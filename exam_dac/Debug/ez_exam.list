
ez_exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006680  08006680  00007680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c0  080066c0  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  080066c0  080066c0  000076c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066c8  080066c8  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c8  080066c8  000076c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066cc  080066cc  000076cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080066d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000020  080066f0  00008020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080066f0  0000841c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0d0  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368d  00000000  00000000  00024120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  000277b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137d  00000000  00000000  00029090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275bc  00000000  00000000  0002a40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f7d6  00000000  00000000  000519c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107717  00000000  00000000  0007119f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001788b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aec  00000000  00000000  001788fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0017f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006668 	.word	0x08006668

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08006668 	.word	0x08006668

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <set_dac>:
static void MX_OPAMP3_Init(void);
/* USER CODE BEGIN PFP */

#define length 10
void set_dac(uint16_t offset)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af02      	add	r7, sp, #8
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
//	  for (int i= 0 ; i < length; ++i)
//	  {
//		  hsdac_buffer[i] = (temp2[i] + (1<< 31))>>21;
//		  hsdac_buffer[i] += offset;
//	  }
	  HAL_DAC_Start_DMA(&hdac3, DAC1_CHANNEL_1, sin_data, length / 2, DAC_ALIGN_12B_R);
 8000512:	2300      	movs	r3, #0
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2305      	movs	r3, #5
 8000518:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <set_dac+0x38>)
 800051a:	2100      	movs	r1, #0
 800051c:	4809      	ldr	r0, [pc, #36]	@ (8000544 <set_dac+0x3c>)
 800051e:	f001 f9fb 	bl	8001918 <HAL_DAC_Start_DMA>
//	  }
//	  uint16_t dither[10] = {4,4,4,4,5,4,4,4,4,5};
//	  HAL_TIM_Base_Start_DMA(&htim15 ,dither , 1000 );
//	  (&htim15)->Instance->ARR = (uint32_t)(4);
//	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	  (&htim15)->Instance->ARR = (uint32_t)(4);
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <set_dac+0x40>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2204      	movs	r2, #4
 8000528:	62da      	str	r2, [r3, #44]	@ 0x2c
	  HAL_OPAMP_Start(&hopamp6);
 800052a:	4808      	ldr	r0, [pc, #32]	@ (800054c <set_dac+0x44>)
 800052c:	f002 fbf6 	bl	8002d1c <HAL_OPAMP_Start>
	 // HAL_OPAMP_Start(&hopamp3);
	  HAL_TIM_Base_Start(&htim15);
 8000530:	4805      	ldr	r0, [pc, #20]	@ (8000548 <set_dac+0x40>)
 8000532:	f003 fd9d 	bl	8004070 <HAL_TIM_Base_Start>

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000
 8000544:	20000088 	.word	0x20000088
 8000548:	200002d8 	.word	0x200002d8
 800054c:	200001ec 	.word	0x200001ec

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 ff19 	bl	800138a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f81e 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 fb3e 	bl	8000bdc <MX_GPIO_Init>
  MX_DMA_Init();
 8000560:	f000 fb06 	bl	8000b70 <MX_DMA_Init>
  MX_CRC_Init();
 8000564:	f000 f87e 	bl	8000664 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000568:	f000 fab6 	bl	8000ad8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800056c:	f000 f9b4 	bl	80008d8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000570:	f000 f8e8 	bl	8000744 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000574:	f000 f972 	bl	800085c <MX_SPI3_Init>
  MX_DAC3_Init();
 8000578:	f000 f8a0 	bl	80006bc <MX_DAC3_Init>
  MX_TIM15_Init();
 800057c:	f000 fa5c 	bl	8000a38 <MX_TIM15_Init>
  MX_CORDIC_Init();
 8000580:	f000 f85c 	bl	800063c <MX_CORDIC_Init>
  MX_OPAMP6_Init();
 8000584:	f000 f944 	bl	8000810 <MX_OPAMP6_Init>
  MX_OPAMP3_Init();
 8000588:	f000 f91c 	bl	80007c4 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */
  set_dac(1241);
 800058c:	f240 40d9 	movw	r0, #1241	@ 0x4d9
 8000590:	f7ff ffba 	bl	8000508 <set_dac>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <main+0x44>

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	2238      	movs	r2, #56	@ 0x38
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 f832 	bl	8006610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005be:	f002 fbdf 	bl	8002d80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d0:	2303      	movs	r3, #3
 80005d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005d8:	2310      	movs	r3, #16
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0318 	add.w	r3, r7, #24
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fc7b 	bl	8002ee8 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005f8:	f000 fb5a 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2103      	movs	r1, #3
 8000614:	4618      	mov	r0, r3
 8000616:	f002 ff79 	bl	800350c <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000620:	f000 fb46 	bl	8000cb0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000624:	2200      	movs	r2, #0
 8000626:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800062a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800062e:	f003 f8a9 	bl	8003784 <HAL_RCC_MCOConfig>
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	@ 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_CORDIC_Init+0x20>)
 8000642:	4a07      	ldr	r2, [pc, #28]	@ (8000660 <MX_CORDIC_Init+0x24>)
 8000644:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	@ (800065c <MX_CORDIC_Init+0x20>)
 8000648:	f000 ff10 	bl	800146c <HAL_CORDIC_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000652:	f000 fb2d 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000003c 	.word	0x2000003c
 8000660:	40020c00 	.word	0x40020c00

08000664 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_CRC_Init+0x50>)
 800066a:	4a13      	ldr	r2, [pc, #76]	@ (80006b8 <MX_CRC_Init+0x54>)
 800066c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_CRC_Init+0x50>)
 8000670:	2201      	movs	r2, #1
 8000672:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_CRC_Init+0x50>)
 8000676:	2201      	movs	r2, #1
 8000678:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_CRC_Init+0x50>)
 800067c:	f241 0221 	movw	r2, #4129	@ 0x1021
 8000680:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_CRC_Init+0x50>)
 8000684:	2208      	movs	r2, #8
 8000686:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <MX_CRC_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_CRC_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <MX_CRC_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_CRC_Init+0x50>)
 800069c:	2201      	movs	r2, #1
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <MX_CRC_Init+0x50>)
 80006a2:	f001 f825 	bl	80016f0 <HAL_CRC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 fb00 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000064 	.word	0x20000064
 80006b8:	40023000 	.word	0x40023000

080006bc <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	@ 0x30
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2230      	movs	r2, #48	@ 0x30
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 ffa1 	bl	8006610 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_DAC3_Init+0x80>)
 80006d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000740 <MX_DAC3_Init+0x84>)
 80006d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80006d4:	4819      	ldr	r0, [pc, #100]	@ (800073c <MX_DAC3_Init+0x80>)
 80006d6:	f001 f8fd 	bl	80018d4 <HAL_DAC_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80006e0:	f000 fae6 	bl	8000cb0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80006e4:	2302      	movs	r3, #2
 80006e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = ENABLE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 80006f4:	230e      	movs	r3, #14
 80006f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80006fc:	2302      	movs	r3, #2
 80006fe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000700:	2302      	movs	r3, #2
 8000702:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	480b      	ldr	r0, [pc, #44]	@ (800073c <MX_DAC3_Init+0x80>)
 8000710:	f001 f9f4 	bl	8001afc <HAL_DAC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800071a:	f000 fac9 	bl	8000cb0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	2210      	movs	r2, #16
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_DAC3_Init+0x80>)
 8000726:	f001 f9e9 	bl	8001afc <HAL_DAC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000730:	f000 fabe 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3730      	adds	r7, #48	@ 0x30
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000088 	.word	0x20000088
 8000740:	50001000 	.word	0x50001000

08000744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_I2C1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <MX_I2C1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B182BE;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	@ (80007c0 <MX_I2C1_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_I2C1_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000780:	f002 f8ca 	bl	8002918 <HAL_I2C_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078a:	f000 fa91 	bl	8000cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	@ (80007b8 <MX_I2C1_Init+0x74>)
 8000792:	f002 f95c 	bl	8002a4e <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 fa88 	bl	8000cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_I2C1_Init+0x74>)
 80007a4:	f002 f99e 	bl	8002ae4 <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 fa7f 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000015c 	.word	0x2000015c
 80007bc:	40005400 	.word	0x40005400
 80007c0:	20b182be 	.word	0x20b182be

080007c4 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_OPAMP3_Init+0x44>)
 80007ca:	4a10      	ldr	r2, [pc, #64]	@ (800080c <MX_OPAMP3_Init+0x48>)
 80007cc:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_OPAMP3_Init+0x44>)
 80007d0:	2280      	movs	r2, #128	@ 0x80
 80007d2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_OPAMP3_Init+0x44>)
 80007d6:	2260      	movs	r2, #96	@ 0x60
 80007d8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_OPAMP3_Init+0x44>)
 80007dc:	220c      	movs	r2, #12
 80007de:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_OPAMP3_Init+0x44>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_OPAMP3_Init+0x44>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_OPAMP3_Init+0x44>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_OPAMP3_Init+0x44>)
 80007f4:	f002 f9c2 	bl	8002b7c <HAL_OPAMP_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80007fe:	f000 fa57 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001b0 	.word	0x200001b0
 800080c:	40010308 	.word	0x40010308

08000810 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_OPAMP6_Init+0x44>)
 8000816:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <MX_OPAMP6_Init+0x48>)
 8000818:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_OPAMP6_Init+0x44>)
 800081c:	2280      	movs	r2, #128	@ 0x80
 800081e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_OPAMP6_Init+0x44>)
 8000822:	2260      	movs	r2, #96	@ 0x60
 8000824:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_OPAMP6_Init+0x44>)
 8000828:	220c      	movs	r2, #12
 800082a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_OPAMP6_Init+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_OPAMP6_Init+0x44>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_OPAMP6_Init+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_OPAMP6_Init+0x44>)
 8000840:	f002 f99c 	bl	8002b7c <HAL_OPAMP_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 800084a:	f000 fa31 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001ec 	.word	0x200001ec
 8000858:	40010314 	.word	0x40010314

0800085c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_SPI3_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <MX_SPI3_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_SPI3_Init+0x74>)
 8000868:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800086c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_SPI3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_SPI3_Init+0x74>)
 8000876:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800087a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_SPI3_Init+0x74>)
 800087e:	2202      	movs	r2, #2
 8000880:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_SPI3_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_SPI3_Init+0x74>)
 800088a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800088e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_SPI3_Init+0x74>)
 8000892:	2218      	movs	r2, #24
 8000894:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_SPI3_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_SPI3_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_SPI3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_SPI3_Init+0x74>)
 80008aa:	2207      	movs	r2, #7
 80008ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_SPI3_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_SPI3_Init+0x74>)
 80008b6:	2208      	movs	r2, #8
 80008b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_SPI3_Init+0x74>)
 80008bc:	f003 fad6 	bl	8003e6c <HAL_SPI_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 f9f3 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000228 	.word	0x20000228
 80008d4:	40003c00 	.word	0x40003c00

080008d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09c      	sub	sp, #112	@ 0x70
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2234      	movs	r2, #52	@ 0x34
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f005 fe7c 	bl	8006610 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000918:	4b45      	ldr	r3, [pc, #276]	@ (8000a30 <MX_TIM1_Init+0x158>)
 800091a:	4a46      	ldr	r2, [pc, #280]	@ (8000a34 <MX_TIM1_Init+0x15c>)
 800091c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800091e:	4b44      	ldr	r3, [pc, #272]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b42      	ldr	r3, [pc, #264]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 800092a:	4b41      	ldr	r3, [pc, #260]	@ (8000a30 <MX_TIM1_Init+0x158>)
 800092c:	2218      	movs	r2, #24
 800092e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b3f      	ldr	r3, [pc, #252]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000936:	4b3e      	ldr	r3, [pc, #248]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a30 <MX_TIM1_Init+0x158>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000942:	483b      	ldr	r0, [pc, #236]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000944:	f003 fb3d 	bl	8003fc2 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800094e:	f000 f9af 	bl	8000cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000956:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000958:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800095c:	4619      	mov	r1, r3
 800095e:	4834      	ldr	r0, [pc, #208]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000960:	f003 fd6c 	bl	800443c <HAL_TIM_ConfigClockSource>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800096a:	f000 f9a1 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096e:	4830      	ldr	r0, [pc, #192]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000970:	f003 fbee 	bl	8004150 <HAL_TIM_PWM_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800097a:	f000 f999 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800098a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800098e:	4619      	mov	r1, r3
 8000990:	4827      	ldr	r0, [pc, #156]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000992:	f004 fae3 	bl	8004f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800099c:	f000 f988 	bl	8000cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a0:	2360      	movs	r3, #96	@ 0x60
 80009a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a8:	2300      	movs	r3, #0
 80009aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009c0:	2200      	movs	r2, #0
 80009c2:	4619      	mov	r1, r3
 80009c4:	481a      	ldr	r0, [pc, #104]	@ (8000a30 <MX_TIM1_Init+0x158>)
 80009c6:	f003 fc25 	bl	8004214 <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80009d0:	f000 f96e 	bl	8000cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000a12:	f004 fb39 	bl	8005088 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000a1c:	f000 f948 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <MX_TIM1_Init+0x158>)
 8000a22:	f000 fb6d 	bl	8001100 <HAL_TIM_MspPostInit>

}
 8000a26:	bf00      	nop
 8000a28:	3770      	adds	r7, #112	@ 0x70
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000028c 	.word	0x2000028c
 8000a34:	40012c00 	.word	0x40012c00

08000a38 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000a58:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad4 <MX_TIM15_Init+0x9c>)
 8000a5a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000a80:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000a82:	f003 fa9e 	bl	8003fc2 <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000a8c:	f000 f910 	bl	8000cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000a9e:	f003 fccd 	bl	800443c <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000aa8:	f000 f902 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000aac:	2320      	movs	r3, #32
 8000aae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_TIM15_Init+0x98>)
 8000aba:	f004 fa4f 	bl	8004f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000ac4:	f000 f8f4 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200002d8 	.word	0x200002d8
 8000ad4:	40014000 	.word	0x40014000

08000ad8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000ade:	4a23      	ldr	r2, [pc, #140]	@ (8000b6c <MX_USART2_UART_Init+0x94>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b20:	4811      	ldr	r0, [pc, #68]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000b22:	f004 fb45 	bl	80051b0 <HAL_UART_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f000 f8c0 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000b34:	f005 fca1 	bl	800647a <HAL_UARTEx_SetTxFifoThreshold>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b3e:	f000 f8b7 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000b46:	f005 fcd6 	bl	80064f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 f8ae 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <MX_USART2_UART_Init+0x90>)
 8000b56:	f005 fc57 	bl	8006408 <HAL_UARTEx_DisableFifoMode>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b60:	f000 f8a6 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000324 	.word	0x20000324
 8000b6c:	40004400 	.word	0x40004400

08000b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <MX_DMA_Init+0x68>)
 8000b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b7a:	4a17      	ldr	r2, [pc, #92]	@ (8000bd8 <MX_DMA_Init+0x68>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <MX_DMA_Init+0x68>)
 8000b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <MX_DMA_Init+0x68>)
 8000b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b92:	4a11      	ldr	r2, [pc, #68]	@ (8000bd8 <MX_DMA_Init+0x68>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <MX_DMA_Init+0x68>)
 8000b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <MX_DMA_Init+0x68>)
 8000ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000baa:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd8 <MX_DMA_Init+0x68>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <MX_DMA_Init+0x68>)
 8000bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2063      	movs	r0, #99	@ 0x63
 8000bc4:	f000 fd5f 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8000bc8:	2063      	movs	r0, #99	@ 0x63
 8000bca:	f000 fd76 	bl	80016ba <HAL_NVIC_EnableIRQ>

}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	4a27      	ldr	r2, [pc, #156]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c16:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a21      	ldr	r2, [pc, #132]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_GPIO_Init+0xd0>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5c:	f001 fe44 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f001 fcb0 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f001 fca0 	bl	80025e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	@ 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <Error_Handler+0x8>

08000cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cf2:	f002 f8e9 	bl	8002ec8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_CORDIC_MspInit+0x38>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10b      	bne.n	8000d2e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_CORDIC_MspInit+0x3c>)
 8000d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d1a:	4a09      	ldr	r2, [pc, #36]	@ (8000d40 <HAL_CORDIC_MspInit+0x3c>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <HAL_CORDIC_MspInit+0x3c>)
 8000d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_CRC_MspInit+0x38>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10b      	bne.n	8000d6e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <HAL_CRC_MspInit+0x3c>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d5a:	4a09      	ldr	r2, [pc, #36]	@ (8000d80 <HAL_CRC_MspInit+0x3c>)
 8000d5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d60:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <HAL_CRC_MspInit+0x3c>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023000 	.word	0x40023000
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a34      	ldr	r2, [pc, #208]	@ (8000e64 <HAL_DAC_MspInit+0xe0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d161      	bne.n	8000e5a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000d96:	4b34      	ldr	r3, [pc, #208]	@ (8000e68 <HAL_DAC_MspInit+0xe4>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	4a33      	ldr	r2, [pc, #204]	@ (8000e68 <HAL_DAC_MspInit+0xe4>)
 8000d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da2:	4b31      	ldr	r3, [pc, #196]	@ (8000e68 <HAL_DAC_MspInit+0xe4>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 8000dae:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000db0:	4a2f      	ldr	r2, [pc, #188]	@ (8000e70 <HAL_DAC_MspInit+0xec>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8000db4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000db6:	2266      	movs	r2, #102	@ 0x66
 8000db8:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000dbc:	2210      	movs	r2, #16
 8000dbe:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b29      	ldr	r3, [pc, #164]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000dc8:	2280      	movs	r2, #128	@ 0x80
 8000dca:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dd4:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dda:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000dde:	2220      	movs	r2, #32
 8000de0:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000de2:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8000de8:	4820      	ldr	r0, [pc, #128]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000dea:	f001 f8c9 	bl	8001f80 <HAL_DMA_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_DAC_MspInit+0x74>
    {
      Error_Handler();
 8000df4:	f7ff ff5c 	bl	8000cb0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8000e6c <HAL_DAC_MspInit+0xe8>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC3_CH2 Init */
    hdma_dac3_ch2.Instance = DMA1_Channel2;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	@ (8000e78 <HAL_DAC_MspInit+0xf4>)
 8000e08:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch2.Init.Request = DMA_REQUEST_DAC3_CHANNEL2;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e0c:	2267      	movs	r2, #103	@ 0x67
 8000e0e:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e12:	2210      	movs	r2, #16
 8000e14:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e1e:	2280      	movs	r2, #128	@ 0x80
 8000e20:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e28:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e30:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch2.Init.Mode = DMA_CIRCULAR;
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e34:	2220      	movs	r2, #32
 8000e36:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000e38:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch2) != HAL_OK)
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e40:	f001 f89e 	bl	8001f80 <HAL_DMA_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000e4a:	f7ff ff31 	bl	8000cb0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac3_ch2);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a08      	ldr	r2, [pc, #32]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_DAC_MspInit+0xf0>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	50001000 	.word	0x50001000
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	2000009c 	.word	0x2000009c
 8000e70:	40020008 	.word	0x40020008
 8000e74:	200000fc 	.word	0x200000fc
 8000e78:	4002001c 	.word	0x4002001c

08000e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0a0      	sub	sp, #128	@ 0x80
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	2254      	movs	r2, #84	@ 0x54
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f005 fbb7 	bl	8006610 <memset>
  if(hi2c->Instance==I2C1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f5c <HAL_I2C_MspInit+0xe0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d153      	bne.n	8000f54 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eac:	2340      	movs	r3, #64	@ 0x40
 8000eae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fd89 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ec4:	f7ff fef4 	bl	8000cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <HAL_I2C_MspInit+0xe4>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ecc:	4a24      	ldr	r2, [pc, #144]	@ (8000f60 <HAL_I2C_MspInit+0xe4>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <HAL_I2C_MspInit+0xe4>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <HAL_I2C_MspInit+0xe4>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f60 <HAL_I2C_MspInit+0xe4>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eec:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <HAL_I2C_MspInit+0xe4>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ef8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000efc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efe:	2312      	movs	r3, #18
 8000f00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f18:	f001 fb64 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f34:	4619      	mov	r1, r3
 8000f36:	480b      	ldr	r0, [pc, #44]	@ (8000f64 <HAL_I2C_MspInit+0xe8>)
 8000f38:	f001 fb54 	bl	80025e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_I2C_MspInit+0xe4>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f40:	4a07      	ldr	r2, [pc, #28]	@ (8000f60 <HAL_I2C_MspInit+0xe4>)
 8000f42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_I2C_MspInit+0xe4>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f54:	bf00      	nop
 8000f56:	3780      	adds	r7, #128	@ 0x80
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	40021000 	.word	0x40021000
 8000f64:	48000400 	.word	0x48000400

08000f68 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	@ 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1e      	ldr	r2, [pc, #120]	@ (8001000 <HAL_OPAMP_MspInit+0x98>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d118      	bne.n	8000fbc <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <HAL_OPAMP_MspInit+0x9c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001004 <HAL_OPAMP_MspInit+0x9c>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <HAL_OPAMP_MspInit+0x9c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    /**OPAMP3 GPIO Configuration
    PB1     ------> OPAMP3_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4814      	ldr	r0, [pc, #80]	@ (8001008 <HAL_OPAMP_MspInit+0xa0>)
 8000fb6:	f001 fb15 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8000fba:	e01d      	b.n	8000ff8 <HAL_OPAMP_MspInit+0x90>
  else if(hopamp->Instance==OPAMP6)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a12      	ldr	r2, [pc, #72]	@ (800100c <HAL_OPAMP_MspInit+0xa4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d118      	bne.n	8000ff8 <HAL_OPAMP_MspInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_OPAMP_MspInit+0x9c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	4a0e      	ldr	r2, [pc, #56]	@ (8001004 <HAL_OPAMP_MspInit+0x9c>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <HAL_OPAMP_MspInit+0x9c>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_OPAMP_MspInit+0xa0>)
 8000ff4:	f001 faf6 	bl	80025e4 <HAL_GPIO_Init>
}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	@ 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40010308 	.word	0x40010308
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400
 800100c:	40010314 	.word	0x40010314

08001010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a17      	ldr	r2, [pc, #92]	@ (800108c <HAL_SPI_MspInit+0x7c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d128      	bne.n	8001084 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001036:	4a16      	ldr	r2, [pc, #88]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800103c:	6593      	str	r3, [r2, #88]	@ 0x58
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_SPI_MspInit+0x80>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001062:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001074:	2306      	movs	r3, #6
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <HAL_SPI_MspInit+0x84>)
 8001080:	f001 fab0 	bl	80025e4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	@ 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40003c00 	.word	0x40003c00
 8001090:	40021000 	.word	0x40021000
 8001094:	48000800 	.word	0x48000800

08001098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <HAL_TIM_Base_MspInit+0x5c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10c      	bne.n	80010c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80010c2:	e010      	b.n	80010e6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM15)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <HAL_TIM_Base_MspInit+0x64>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10b      	bne.n	80010e6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <HAL_TIM_Base_MspInit+0x60>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40012c00 	.word	0x40012c00
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40014000 	.word	0x40014000

08001100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <HAL_TIM_MspPostInit+0x64>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d11b      	bne.n	800115a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <HAL_TIM_MspPostInit+0x68>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <HAL_TIM_MspPostInit+0x68>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_TIM_MspPostInit+0x68>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800113a:	2301      	movs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800114a:	2302      	movs	r3, #2
 800114c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <HAL_TIM_MspPostInit+0x6c>)
 8001156:	f001 fa45 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40012c00 	.word	0x40012c00
 8001168:	40021000 	.word	0x40021000
 800116c:	48000800 	.word	0x48000800

08001170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09e      	sub	sp, #120	@ 0x78
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2254      	movs	r2, #84	@ 0x54
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f005 fa3d 	bl	8006610 <memset>
  if(huart->Instance==USART2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a37      	ldr	r2, [pc, #220]	@ (8001278 <HAL_UART_MspInit+0x108>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d167      	bne.n	8001270 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80011a4:	2304      	movs	r3, #4
 80011a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fc0f 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011b8:	f7ff fd7a 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011bc:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <HAL_UART_MspInit+0x10c>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	4a2e      	ldr	r2, [pc, #184]	@ (800127c <HAL_UART_MspInit+0x10c>)
 80011c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c8:	4b2c      	ldr	r3, [pc, #176]	@ (800127c <HAL_UART_MspInit+0x10c>)
 80011ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b29      	ldr	r3, [pc, #164]	@ (800127c <HAL_UART_MspInit+0x10c>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	4a28      	ldr	r2, [pc, #160]	@ (800127c <HAL_UART_MspInit+0x10c>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e0:	4b26      	ldr	r3, [pc, #152]	@ (800127c <HAL_UART_MspInit+0x10c>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80011ec:	2318      	movs	r3, #24
 80011ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fc:	2307      	movs	r3, #7
 80011fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001204:	4619      	mov	r1, r3
 8001206:	481e      	ldr	r0, [pc, #120]	@ (8001280 <HAL_UART_MspInit+0x110>)
 8001208:	f001 f9ec 	bl	80025e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_UART_MspInit+0x114>)
 800120e:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <HAL_UART_MspInit+0x118>)
 8001210:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <HAL_UART_MspInit+0x114>)
 8001214:	221a      	movs	r2, #26
 8001216:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_UART_MspInit+0x114>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <HAL_UART_MspInit+0x114>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_UART_MspInit+0x114>)
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_UART_MspInit+0x114>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <HAL_UART_MspInit+0x114>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_UART_MspInit+0x114>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <HAL_UART_MspInit+0x114>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001242:	4810      	ldr	r0, [pc, #64]	@ (8001284 <HAL_UART_MspInit+0x114>)
 8001244:	f000 fe9c 	bl	8001f80 <HAL_DMA_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800124e:	f7ff fd2f 	bl	8000cb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <HAL_UART_MspInit+0x114>)
 8001256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <HAL_UART_MspInit+0x114>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2026      	movs	r0, #38	@ 0x26
 8001266:	f000 fa0e 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800126a:	2026      	movs	r0, #38	@ 0x26
 800126c:	f000 fa25 	bl	80016ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001270:	bf00      	nop
 8001272:	3778      	adds	r7, #120	@ 0x78
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40004400 	.word	0x40004400
 800127c:	40021000 	.word	0x40021000
 8001280:	48000400 	.word	0x48000400
 8001284:	200003b8 	.word	0x200003b8
 8001288:	40020494 	.word	0x40020494

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <NMI_Handler+0x4>

08001294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <MemManage_Handler+0x4>

080012a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 f8a5 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <USART2_IRQHandler+0x10>)
 80012f2:	f003 ffad 	bl	8005250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000324 	.word	0x20000324

08001300 <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <DMA2_Channel8_IRQHandler+0x10>)
 8001306:	f001 f81e 	bl	8002346 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200003b8 	.word	0x200003b8

08001314 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <SystemInit+0x20>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <SystemInit+0x20>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800133a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800133c:	f7ff ffea 	bl	8001314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <LoopForever+0x6>)
  ldr r1, =_edata
 8001342:	490d      	ldr	r1, [pc, #52]	@ (8001378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001344:	4a0d      	ldr	r2, [pc, #52]	@ (800137c <LoopForever+0xe>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001358:	4c0a      	ldr	r4, [pc, #40]	@ (8001384 <LoopForever+0x16>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001366:	f005 f95b 	bl	8006620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800136a:	f7ff f8f1 	bl	8000550 <main>

0800136e <LoopForever>:

LoopForever:
    b LoopForever
 800136e:	e7fe      	b.n	800136e <LoopForever>
  ldr   r0, =_estack
 8001370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001378:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800137c:	080066d0 	.word	0x080066d0
  ldr r2, =_sbss
 8001380:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001384:	2000041c 	.word	0x2000041c

08001388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC1_2_IRQHandler>

0800138a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 f96b 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139a:	200f      	movs	r0, #15
 800139c:	f000 f80e 	bl	80013bc <HAL_InitTick>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	e001      	b.n	80013b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013ac:	f7ff fc86 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b0:	79fb      	ldrb	r3, [r7, #7]

}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013c8:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <HAL_InitTick+0x68>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d022      	beq.n	8001416 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_InitTick+0x6c>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <HAL_InitTick+0x68>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f976 	bl	80016d6 <HAL_SYSTICK_Config>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10f      	bne.n	8001410 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	d809      	bhi.n	800140a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f6:	2200      	movs	r2, #0
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	f04f 30ff 	mov.w	r0, #4294967295
 80013fe:	f000 f942 	bl	8001686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <HAL_InitTick+0x70>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	e007      	b.n	800141a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e004      	b.n	800141a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e001      	b.n	800141a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000001c 	.word	0x2000001c
 8001428:	20000014 	.word	0x20000014
 800142c:	20000018 	.word	0x20000018

08001430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_IncTick+0x1c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_IncTick+0x20>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4413      	add	r3, r2
 800143e:	4a03      	ldr	r2, [pc, #12]	@ (800144c <HAL_IncTick+0x1c>)
 8001440:	6013      	str	r3, [r2, #0]
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	20000418 	.word	0x20000418
 8001450:	2000001c 	.word	0x2000001c

08001454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000418 	.word	0x20000418

0800146c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e023      	b.n	80014c6 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fc36 	bl	8000d04 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4907      	ldr	r1, [pc, #28]	@ (800156c <__NVIC_EnableIRQ+0x38>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	@ (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	@ (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	@ 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff8e 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff29 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff40 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff90 	bl	80015c4 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5f 	bl	8001570 <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff33 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa4 	bl	800162c <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e054      	b.n	80017ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7f5b      	ldrb	r3, [r3, #29]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fb16 	bl	8000d44 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	791b      	ldrb	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10c      	bne.n	8001740 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a22      	ldr	r2, [pc, #136]	@ (80017b4 <HAL_CRC_Init+0xc4>)
 800172c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0218 	bic.w	r2, r2, #24
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	e00c      	b.n	800175a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6899      	ldr	r1, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	461a      	mov	r2, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f834 	bl	80017b8 <HAL_CRCEx_Polynomial_Set>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e028      	b.n	80017ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	795b      	ldrb	r3, [r3, #5]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f04f 32ff 	mov.w	r2, #4294967295
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	e004      	b.n	8001778 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6912      	ldr	r2, [r2, #16]
 8001776:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	04c11db7 	.word	0x04c11db7

080017b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80017c8:	231f      	movs	r3, #31
 80017ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	75fb      	strb	r3, [r7, #23]
 80017da:	e063      	b.n	80018a4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80017dc:	bf00      	nop
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	613a      	str	r2, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d009      	beq.n	80017fc <HAL_CRCEx_Polynomial_Set+0x44>
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b18      	cmp	r3, #24
 8001800:	d846      	bhi.n	8001890 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001802:	a201      	add	r2, pc, #4	@ (adr r2, 8001808 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001897 	.word	0x08001897
 800180c:	08001891 	.word	0x08001891
 8001810:	08001891 	.word	0x08001891
 8001814:	08001891 	.word	0x08001891
 8001818:	08001891 	.word	0x08001891
 800181c:	08001891 	.word	0x08001891
 8001820:	08001891 	.word	0x08001891
 8001824:	08001891 	.word	0x08001891
 8001828:	08001885 	.word	0x08001885
 800182c:	08001891 	.word	0x08001891
 8001830:	08001891 	.word	0x08001891
 8001834:	08001891 	.word	0x08001891
 8001838:	08001891 	.word	0x08001891
 800183c:	08001891 	.word	0x08001891
 8001840:	08001891 	.word	0x08001891
 8001844:	08001891 	.word	0x08001891
 8001848:	08001879 	.word	0x08001879
 800184c:	08001891 	.word	0x08001891
 8001850:	08001891 	.word	0x08001891
 8001854:	08001891 	.word	0x08001891
 8001858:	08001891 	.word	0x08001891
 800185c:	08001891 	.word	0x08001891
 8001860:	08001891 	.word	0x08001891
 8001864:	08001891 	.word	0x08001891
 8001868:	0800186d 	.word	0x0800186d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b06      	cmp	r3, #6
 8001870:	d913      	bls.n	800189a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001876:	e010      	b.n	800189a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b07      	cmp	r3, #7
 800187c:	d90f      	bls.n	800189e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001882:	e00c      	b.n	800189e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	d90b      	bls.n	80018a2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800188e:	e008      	b.n	80018a2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	75fb      	strb	r3, [r7, #23]
        break;
 8001894:	e006      	b.n	80018a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001896:	bf00      	nop
 8001898:	e004      	b.n	80018a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800189a:	bf00      	nop
 800189c:	e002      	b.n	80018a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800189e:	bf00      	nop
 80018a0:	e000      	b.n	80018a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80018a2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10d      	bne.n	80018c6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 0118 	bic.w	r1, r3, #24
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	371c      	adds	r7, #28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e014      	b.n	8001910 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	791b      	ldrb	r3, [r3, #4]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fa44 	bl	8000d84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b2      	b.n	8001a96 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	795b      	ldrb	r3, [r3, #5]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_DAC_Start_DMA+0x24>
 8001938:	2302      	movs	r3, #2
 800193a:	e0ac      	b.n	8001a96 <HAL_DAC_Start_DMA+0x17e>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2202      	movs	r2, #2
 8001946:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d129      	bne.n	80019a2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4a53      	ldr	r2, [pc, #332]	@ (8001aa0 <HAL_DAC_Start_DMA+0x188>)
 8001954:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <HAL_DAC_Start_DMA+0x18c>)
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	4a51      	ldr	r2, [pc, #324]	@ (8001aa8 <HAL_DAC_Start_DMA+0x190>)
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001974:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_DAC_Start_DMA+0x6c>
 800197c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197e:	2b04      	cmp	r3, #4
 8001980:	d005      	beq.n	800198e <HAL_DAC_Start_DMA+0x76>
 8001982:	e009      	b.n	8001998 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3308      	adds	r3, #8
 800198a:	61bb      	str	r3, [r7, #24]
        break;
 800198c:	e033      	b.n	80019f6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	330c      	adds	r3, #12
 8001994:	61bb      	str	r3, [r7, #24]
        break;
 8001996:	e02e      	b.n	80019f6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3310      	adds	r3, #16
 800199e:	61bb      	str	r3, [r7, #24]
        break;
 80019a0:	e029      	b.n	80019f6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4a41      	ldr	r2, [pc, #260]	@ (8001aac <HAL_DAC_Start_DMA+0x194>)
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4a40      	ldr	r2, [pc, #256]	@ (8001ab0 <HAL_DAC_Start_DMA+0x198>)
 80019b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ab4 <HAL_DAC_Start_DMA+0x19c>)
 80019b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80019c8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80019ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_DAC_Start_DMA+0xc0>
 80019d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d005      	beq.n	80019e2 <HAL_DAC_Start_DMA+0xca>
 80019d6:	e009      	b.n	80019ec <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3314      	adds	r3, #20
 80019de:	61bb      	str	r3, [r7, #24]
        break;
 80019e0:	e009      	b.n	80019f6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3318      	adds	r3, #24
 80019e8:	61bb      	str	r3, [r7, #24]
        break;
 80019ea:	e004      	b.n	80019f6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	331c      	adds	r3, #28
 80019f2:	61bb      	str	r3, [r7, #24]
        break;
 80019f4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d111      	bne.n	8001a20 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6898      	ldr	r0, [r3, #8]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	f000 fb5b 	bl	80020d0 <HAL_DMA_Start_IT>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	77fb      	strb	r3, [r7, #31]
 8001a1e:	e010      	b.n	8001a42 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	68d8      	ldr	r0, [r3, #12]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	f000 fb49 	bl	80020d0 <HAL_DMA_Start_IT>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d11c      	bne.n	8001a88 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6819      	ldr	r1, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a66:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_DAC_Start_DMA+0x1a0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	4a13      	ldr	r2, [pc, #76]	@ (8001abc <HAL_DAC_Start_DMA+0x1a4>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001a78:	e002      	b.n	8001a80 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <HAL_DAC_Start_DMA+0x162>
 8001a86:	e005      	b.n	8001a94 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f043 0204 	orr.w	r2, r3, #4
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001a94:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	08001e6d 	.word	0x08001e6d
 8001aa4:	08001e8f 	.word	0x08001e8f
 8001aa8:	08001eab 	.word	0x08001eab
 8001aac:	08001f15 	.word	0x08001f15
 8001ab0:	08001f37 	.word	0x08001f37
 8001ab4:	08001f53 	.word	0x08001f53
 8001ab8:	20000014 	.word	0x20000014
 8001abc:	053e2d63 	.word	0x053e2d63

08001ac0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_DAC_ConfigChannel+0x1c>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e19e      	b.n	8001e5a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	795b      	ldrb	r3, [r3, #5]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_DAC_ConfigChannel+0x2c>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e198      	b.n	8001e5a <HAL_DAC_ConfigChannel+0x35e>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2202      	movs	r2, #2
 8001b32:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d17a      	bne.n	8001c32 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b3c:	f7ff fc8a 	bl	8001454 <HAL_GetTick>
 8001b40:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d13d      	bne.n	8001bc4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b48:	e018      	b.n	8001b7c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b4a:	f7ff fc83 	bl	8001454 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d911      	bls.n	8001b7c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f043 0208 	orr.w	r2, r3, #8
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2203      	movs	r2, #3
 8001b76:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e16e      	b.n	8001e5a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1df      	bne.n	8001b4a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b92:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b94:	e020      	b.n	8001bd8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b96:	f7ff fc5d 	bl	8001454 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d90f      	bls.n	8001bc4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da0a      	bge.n	8001bc4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f043 0208 	orr.w	r2, r3, #8
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e14a      	b.n	8001e5a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	dbe3      	blt.n	8001b96 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bd6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	ea02 0103 	and.w	r1, r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	21ff      	movs	r1, #255	@ 0xff
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	ea02 0103 	and.w	r1, r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d11d      	bne.n	8001c76 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	221f      	movs	r2, #31
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c52:	4013      	ands	r3, r2
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c74:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2207      	movs	r2, #7
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c8e:	4013      	ands	r3, r2
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
 8001c9e:	e00f      	b.n	8001cc0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d102      	bne.n	8001cae <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	623b      	str	r3, [r7, #32]
 8001cac:	e008      	b.n	8001cc0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	623b      	str	r3, [r7, #32]
 8001cba:	e001      	b.n	8001cc0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	6a3a      	ldr	r2, [r7, #32]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	791b      	ldrb	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d102      	bne.n	8001cf4 <HAL_DAC_ConfigChannel+0x1f8>
 8001cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf2:	e000      	b.n	8001cf6 <HAL_DAC_ConfigChannel+0x1fa>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d0e:	4013      	ands	r3, r2
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	795b      	ldrb	r3, [r3, #5]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_DAC_ConfigChannel+0x224>
 8001d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d1e:	e000      	b.n	8001d22 <HAL_DAC_ConfigChannel+0x226>
 8001d20:	2300      	movs	r3, #0
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d114      	bne.n	8001d62 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001d38:	f001 fdcc 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8001d3c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4a48      	ldr	r2, [pc, #288]	@ (8001e64 <HAL_DAC_ConfigChannel+0x368>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d904      	bls.n	8001d50 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4e:	e00f      	b.n	8001d70 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4a45      	ldr	r2, [pc, #276]	@ (8001e68 <HAL_DAC_ConfigChannel+0x36c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d90a      	bls.n	8001d6e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d60:	e006      	b.n	8001d70 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6c:	e000      	b.n	8001d70 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001d6e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6819      	ldr	r1, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	22c0      	movs	r2, #192	@ 0xc0
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	400a      	ands	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	ea02 0103 	and.w	r1, r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3728      	adds	r7, #40	@ 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	09896800 	.word	0x09896800
 8001e68:	04c4b400 	.word	0x04c4b400

08001e6c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7ff fe20 	bl	8001ac0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	711a      	strb	r2, [r3, #4]
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff fe19 	bl	8001ad4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f043 0204 	orr.w	r2, r3, #4
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff fe0f 	bl	8001ae8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	711a      	strb	r2, [r3, #4]
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff ffd8 	bl	8001ed8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	711a      	strb	r2, [r3, #4]
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f42:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7ff ffd1 	bl	8001eec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff ffc7 	bl	8001f00 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	711a      	strb	r2, [r3, #4]
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e08d      	b.n	80020ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_DMA_Init+0x138>)
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d80f      	bhi.n	8001fbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b45      	ldr	r3, [pc, #276]	@ (80020bc <HAL_DMA_Init+0x13c>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a45      	ldr	r2, [pc, #276]	@ (80020c0 <HAL_DMA_Init+0x140>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	009a      	lsls	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <HAL_DMA_Init+0x144>)
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fbc:	e00e      	b.n	8001fdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <HAL_DMA_Init+0x148>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a3d      	ldr	r2, [pc, #244]	@ (80020c0 <HAL_DMA_Init+0x140>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	009a      	lsls	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80020cc <HAL_DMA_Init+0x14c>)
 8001fda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fa76 	bl	8002520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800203c:	d102      	bne.n	8002044 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002058:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <HAL_DMA_Init+0x104>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d80c      	bhi.n	8002084 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fa96 	bl	800259c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	e008      	b.n	8002096 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40020407 	.word	0x40020407
 80020bc:	bffdfff8 	.word	0xbffdfff8
 80020c0:	cccccccd 	.word	0xcccccccd
 80020c4:	40020000 	.word	0x40020000
 80020c8:	bffdfbf8 	.word	0xbffdfbf8
 80020cc:	40020400 	.word	0x40020400

080020d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_DMA_Start_IT+0x20>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e066      	b.n	80021be <HAL_DMA_Start_IT+0xee>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d155      	bne.n	80021b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f9bb 	bl	80024a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 020e 	orr.w	r2, r2, #14
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e00f      	b.n	8002168 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0204 	bic.w	r2, r2, #4
 8002156:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 020a 	orr.w	r2, r2, #10
 8002166:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002184:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800219c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e005      	b.n	80021bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
 80021ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d005      	beq.n	80021ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e037      	b.n	800225a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 020e 	bic.w	r2, r2, #14
 80021f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002208:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002236:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00c      	beq.n	800225a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800224e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002258:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d00d      	beq.n	80022ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2204      	movs	r2, #4
 8002294:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e047      	b.n	800233c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 020e 	bic.w	r2, r2, #14
 80022ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00c      	beq.n	800231c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002310:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800231a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
    }
  }
  return status;
 800233c:	7bfb      	ldrb	r3, [r7, #15]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2204      	movs	r2, #4
 8002368:	409a      	lsls	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d026      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x7a>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d021      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d107      	bne.n	800239a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0204 	bic.w	r2, r2, #4
 8002398:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	f003 021f 	and.w	r2, r3, #31
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	2104      	movs	r1, #4
 80023a8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d071      	beq.n	800249a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023be:	e06c      	b.n	800249a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	2202      	movs	r2, #2
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d02e      	beq.n	8002432 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d029      	beq.n	8002432 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 020a 	bic.w	r2, r2, #10
 80023fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	2102      	movs	r1, #2
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d038      	beq.n	800249a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002430:	e033      	b.n	800249a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2208      	movs	r2, #8
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d02a      	beq.n	800249c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d025      	beq.n	800249c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020e 	bic.w	r2, r2, #14
 800245e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	2101      	movs	r1, #1
 800246e:	fa01 f202 	lsl.w	r2, r1, r2
 8002472:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800249a:	bf00      	nop
 800249c:	bf00      	nop
}
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	f003 021f 	and.w	r2, r3, #31
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d108      	bne.n	8002504 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002502:	e007      	b.n	8002514 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	60da      	str	r2, [r3, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4b16      	ldr	r3, [pc, #88]	@ (8002588 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002530:	429a      	cmp	r2, r3
 8002532:	d802      	bhi.n	800253a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002534:	4b15      	ldr	r3, [pc, #84]	@ (800258c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	e001      	b.n	800253e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800253a:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800253c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3b08      	subs	r3, #8
 800254a:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	009a      	lsls	r2, r3, #2
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	461a      	mov	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a0b      	ldr	r2, [pc, #44]	@ (8002598 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800256a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2201      	movs	r2, #1
 8002574:	409a      	lsls	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40020407 	.word	0x40020407
 800258c:	40020800 	.word	0x40020800
 8002590:	40020820 	.word	0x40020820
 8002594:	cccccccd 	.word	0xcccccccd
 8002598:	40020880 	.word	0x40020880

0800259c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	461a      	mov	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2201      	movs	r2, #1
 80025ca:	409a      	lsls	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	1000823f 	.word	0x1000823f
 80025e0:	40020940 	.word	0x40020940

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025f2:	e15a      	b.n	80028aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 814c 	beq.w	80028a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d005      	beq.n	8002624 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002620:	2b02      	cmp	r3, #2
 8002622:	d130      	bne.n	8002686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800265a:	2201      	movs	r2, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0201 	and.w	r2, r3, #1
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b03      	cmp	r3, #3
 8002690:	d017      	beq.n	80026c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d123      	bne.n	8002716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	08da      	lsrs	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3208      	adds	r2, #8
 8002710:	6939      	ldr	r1, [r7, #16]
 8002712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80a6 	beq.w	80028a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002758:	4b5b      	ldr	r3, [pc, #364]	@ (80028c8 <HAL_GPIO_Init+0x2e4>)
 800275a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275c:	4a5a      	ldr	r2, [pc, #360]	@ (80028c8 <HAL_GPIO_Init+0x2e4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6613      	str	r3, [r2, #96]	@ 0x60
 8002764:	4b58      	ldr	r3, [pc, #352]	@ (80028c8 <HAL_GPIO_Init+0x2e4>)
 8002766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002770:	4a56      	ldr	r2, [pc, #344]	@ (80028cc <HAL_GPIO_Init+0x2e8>)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800279a:	d01f      	beq.n	80027dc <HAL_GPIO_Init+0x1f8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a4c      	ldr	r2, [pc, #304]	@ (80028d0 <HAL_GPIO_Init+0x2ec>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d019      	beq.n	80027d8 <HAL_GPIO_Init+0x1f4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a4b      	ldr	r2, [pc, #300]	@ (80028d4 <HAL_GPIO_Init+0x2f0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_GPIO_Init+0x1f0>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a4a      	ldr	r2, [pc, #296]	@ (80028d8 <HAL_GPIO_Init+0x2f4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00d      	beq.n	80027d0 <HAL_GPIO_Init+0x1ec>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a49      	ldr	r2, [pc, #292]	@ (80028dc <HAL_GPIO_Init+0x2f8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d007      	beq.n	80027cc <HAL_GPIO_Init+0x1e8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a48      	ldr	r2, [pc, #288]	@ (80028e0 <HAL_GPIO_Init+0x2fc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d101      	bne.n	80027c8 <HAL_GPIO_Init+0x1e4>
 80027c4:	2305      	movs	r3, #5
 80027c6:	e00a      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027c8:	2306      	movs	r3, #6
 80027ca:	e008      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027cc:	2304      	movs	r3, #4
 80027ce:	e006      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027d0:	2303      	movs	r3, #3
 80027d2:	e004      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e002      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_GPIO_Init+0x1fa>
 80027dc:	2300      	movs	r3, #0
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	f002 0203 	and.w	r2, r2, #3
 80027e4:	0092      	lsls	r2, r2, #2
 80027e6:	4093      	lsls	r3, r2
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ee:	4937      	ldr	r1, [pc, #220]	@ (80028cc <HAL_GPIO_Init+0x2e8>)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027fc:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002820:	4a30      	ldr	r2, [pc, #192]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002826:	4b2f      	ldr	r3, [pc, #188]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800284a:	4a26      	ldr	r2, [pc, #152]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002850:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002874:	4a1b      	ldr	r2, [pc, #108]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800287a:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800289e:	4a11      	ldr	r2, [pc, #68]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f47f ae9d 	bne.w	80025f4 <HAL_GPIO_Init+0x10>
  }
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40010000 	.word	0x40010000
 80028d0:	48000400 	.word	0x48000400
 80028d4:	48000800 	.word	0x48000800
 80028d8:	48000c00 	.word	0x48000c00
 80028dc:	48001000 	.word	0x48001000
 80028e0:	48001400 	.word	0x48001400
 80028e4:	40010400 	.word	0x40010400

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002904:	e002      	b.n	800290c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e08d      	b.n	8002a46 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fa9c 	bl	8000e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	@ 0x24
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002968:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002978:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	e006      	b.n	80029a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800299e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d108      	bne.n	80029ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	e007      	b.n	80029ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69d9      	ldr	r1, [r3, #28]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d138      	bne.n	8002ad6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e032      	b.n	8002ad8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2224      	movs	r2, #36	@ 0x24
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002aa0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	d139      	bne.n	8002b6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e033      	b.n	8002b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	@ 0x24
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0bb      	b.n	8002d0a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d101      	bne.n	8002ba2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0b3      	b.n	8002d0a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d101      	bne.n	8002bb2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0ab      	b.n	8002d0a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb2:	4b58      	ldr	r3, [pc, #352]	@ (8002d14 <HAL_OPAMP_Init+0x198>)
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb6:	4a57      	ldr	r2, [pc, #348]	@ (8002d14 <HAL_OPAMP_Init+0x198>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bbe:	4b55      	ldr	r3, [pc, #340]	@ (8002d14 <HAL_OPAMP_Init+0x198>)
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe f9c2 	bl	8000f68 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b40      	cmp	r3, #64	@ 0x40
 8002bea:	d003      	beq.n	8002bf4 <HAL_OPAMP_Init+0x78>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b60      	cmp	r3, #96	@ 0x60
 8002bf2:	d133      	bne.n	8002c5c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 0110 	bic.w	r1, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b41      	ldr	r3, [pc, #260]	@ (8002d18 <HAL_OPAMP_Init+0x19c>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6851      	ldr	r1, [r2, #4]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6892      	ldr	r2, [r2, #8]
 8002c1c:	4311      	orrs	r1, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6912      	ldr	r2, [r2, #16]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	7d09      	ldrb	r1, [r1, #20]
 8002c28:	2901      	cmp	r1, #1
 8002c2a:	d102      	bne.n	8002c32 <HAL_OPAMP_Init+0xb6>
 8002c2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c30:	e000      	b.n	8002c34 <HAL_OPAMP_Init+0xb8>
 8002c32:	2100      	movs	r1, #0
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c40:	4311      	orrs	r1, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c46:	04d2      	lsls	r2, r2, #19
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c4e:	0612      	lsls	r2, r2, #24
 8002c50:	4311      	orrs	r1, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	430b      	orrs	r3, r1
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e035      	b.n	8002cc8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0110 	bic.w	r1, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b27      	ldr	r3, [pc, #156]	@ (8002d18 <HAL_OPAMP_Init+0x19c>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6851      	ldr	r1, [r2, #4]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6892      	ldr	r2, [r2, #8]
 8002c84:	4311      	orrs	r1, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6912      	ldr	r2, [r2, #16]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	7d09      	ldrb	r1, [r1, #20]
 8002c96:	2901      	cmp	r1, #1
 8002c98:	d102      	bne.n	8002ca0 <HAL_OPAMP_Init+0x124>
 8002c9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c9e:	e000      	b.n	8002ca2 <HAL_OPAMP_Init+0x126>
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ca8:	4311      	orrs	r1, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cb4:	04d2      	lsls	r2, r2, #19
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cbc:	0612      	lsls	r2, r2, #24
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db10      	blt.n	8002cf4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d103      	bne.n	8002d08 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	e0003e11 	.word	0xe0003e11

08002d1c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
 8002d32:	e01d      	b.n	8002d70 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d102      	bne.n	8002d46 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e014      	b.n	8002d70 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10c      	bne.n	8002d6c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2204      	movs	r2, #4
 8002d66:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002d6a:	e001      	b.n	8002d70 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d141      	bne.n	8002e12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d8e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d9a:	d131      	bne.n	8002e00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d9c:	4b47      	ldr	r3, [pc, #284]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002da2:	4a46      	ldr	r2, [pc, #280]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dac:	4b43      	ldr	r3, [pc, #268]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002db4:	4a41      	ldr	r2, [pc, #260]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dbc:	4b40      	ldr	r3, [pc, #256]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2232      	movs	r2, #50	@ 0x32
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	0c9b      	lsrs	r3, r3, #18
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd2:	e002      	b.n	8002dda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dda:	4b38      	ldr	r3, [pc, #224]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de6:	d102      	bne.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f2      	bne.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dee:	4b33      	ldr	r3, [pc, #204]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dfa:	d158      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e057      	b.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e00:	4b2e      	ldr	r3, [pc, #184]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e06:	4a2d      	ldr	r2, [pc, #180]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e10:	e04d      	b.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e18:	d141      	bne.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e1a:	4b28      	ldr	r3, [pc, #160]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e26:	d131      	bne.n	8002e8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e28:	4b24      	ldr	r3, [pc, #144]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e2e:	4a23      	ldr	r2, [pc, #140]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e38:	4b20      	ldr	r3, [pc, #128]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e40:	4a1e      	ldr	r2, [pc, #120]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2232      	movs	r2, #50	@ 0x32
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e5e:	e002      	b.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e66:	4b15      	ldr	r3, [pc, #84]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e72:	d102      	bne.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f2      	bne.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e86:	d112      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e011      	b.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e92:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e9c:	e007      	b.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ea6:	4a05      	ldr	r2, [pc, #20]	@ (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	20000014 	.word	0x20000014
 8002ec4:	431bde83 	.word	0x431bde83

08002ec8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed6:	6093      	str	r3, [r2, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e2fe      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d075      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f06:	4b97      	ldr	r3, [pc, #604]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f10:	4b94      	ldr	r3, [pc, #592]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d102      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3e>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_OscConfig+0x44>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d10b      	bne.n	8002f44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	4b8d      	ldr	r3, [pc, #564]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d05b      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x108>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d157      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e2d9      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f4c:	d106      	bne.n	8002f5c <HAL_RCC_OscConfig+0x74>
 8002f4e:	4b85      	ldr	r3, [pc, #532]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a84      	ldr	r2, [pc, #528]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e01d      	b.n	8002f98 <HAL_RCC_OscConfig+0xb0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x98>
 8002f66:	4b7f      	ldr	r3, [pc, #508]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b7c      	ldr	r3, [pc, #496]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7b      	ldr	r2, [pc, #492]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0xb0>
 8002f80:	4b78      	ldr	r3, [pc, #480]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a77      	ldr	r2, [pc, #476]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b75      	ldr	r3, [pc, #468]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a74      	ldr	r2, [pc, #464]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fa58 	bl	8001454 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fa54 	bl	8001454 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e29e      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fba:	4b6a      	ldr	r3, [pc, #424]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xc0>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fa44 	bl	8001454 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fa40 	bl	8001454 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	@ 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e28a      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe2:	4b60      	ldr	r3, [pc, #384]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xe8>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d075      	beq.n	80030ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffe:	4b59      	ldr	r3, [pc, #356]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003008:	4b56      	ldr	r3, [pc, #344]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b0c      	cmp	r3, #12
 8003016:	d102      	bne.n	800301e <HAL_RCC_OscConfig+0x136>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d002      	beq.n	8003024 <HAL_RCC_OscConfig+0x13c>
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d11f      	bne.n	8003064 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003024:	4b4f      	ldr	r3, [pc, #316]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_OscConfig+0x154>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e25d      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b49      	ldr	r3, [pc, #292]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	4946      	ldr	r1, [pc, #280]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003050:	4b45      	ldr	r3, [pc, #276]	@ (8003168 <HAL_RCC_OscConfig+0x280>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe f9b1 	bl	80013bc <HAL_InitTick>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d043      	beq.n	80030e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e249      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d023      	beq.n	80030b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b3d      	ldr	r3, [pc, #244]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a3c      	ldr	r2, [pc, #240]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8003072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe f9ec 	bl	8001454 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003080:	f7fe f9e8 	bl	8001454 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e232      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003092:	4b34      	ldr	r3, [pc, #208]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309e:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	492d      	ldr	r1, [pc, #180]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
 80030b2:	e01a      	b.n	80030ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 80030ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe f9c8 	bl	8001454 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe f9c4 	bl	8001454 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e20e      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030da:	4b22      	ldr	r3, [pc, #136]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1e0>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d041      	beq.n	800317a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01c      	beq.n	8003138 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fe:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8003100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003104:	4a17      	ldr	r2, [pc, #92]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fe f9a1 	bl	8001454 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003116:	f7fe f99d 	bl	8001454 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e1e7      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003128:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 800312a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ef      	beq.n	8003116 <HAL_RCC_OscConfig+0x22e>
 8003136:	e020      	b.n	800317a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003138:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800313e:	4a09      	ldr	r2, [pc, #36]	@ (8003164 <HAL_RCC_OscConfig+0x27c>)
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe f984 	bl	8001454 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800314e:	e00d      	b.n	800316c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003150:	f7fe f980 	bl	8001454 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d906      	bls.n	800316c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1ca      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800316c:	4b8c      	ldr	r3, [pc, #560]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ea      	bne.n	8003150 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80a6 	beq.w	80032d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003188:	2300      	movs	r3, #0
 800318a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800318c:	4b84      	ldr	r3, [pc, #528]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_OscConfig+0x2b4>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x2b6>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b7f      	ldr	r3, [pc, #508]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a6:	4a7e      	ldr	r2, [pc, #504]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ae:	4b7c      	ldr	r3, [pc, #496]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031be:	4b79      	ldr	r3, [pc, #484]	@ (80033a4 <HAL_RCC_OscConfig+0x4bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ca:	4b76      	ldr	r3, [pc, #472]	@ (80033a4 <HAL_RCC_OscConfig+0x4bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a75      	ldr	r2, [pc, #468]	@ (80033a4 <HAL_RCC_OscConfig+0x4bc>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fe f93d 	bl	8001454 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fe f939 	bl	8001454 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e183      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f0:	4b6c      	ldr	r3, [pc, #432]	@ (80033a4 <HAL_RCC_OscConfig+0x4bc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d108      	bne.n	8003216 <HAL_RCC_OscConfig+0x32e>
 8003204:	4b66      	ldr	r3, [pc, #408]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320a:	4a65      	ldr	r2, [pc, #404]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003214:	e024      	b.n	8003260 <HAL_RCC_OscConfig+0x378>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d110      	bne.n	8003240 <HAL_RCC_OscConfig+0x358>
 800321e:	4b60      	ldr	r3, [pc, #384]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003224:	4a5e      	ldr	r2, [pc, #376]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800322e:	4b5c      	ldr	r3, [pc, #368]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003234:	4a5a      	ldr	r2, [pc, #360]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800323e:	e00f      	b.n	8003260 <HAL_RCC_OscConfig+0x378>
 8003240:	4b57      	ldr	r3, [pc, #348]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003246:	4a56      	ldr	r2, [pc, #344]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003250:	4b53      	ldr	r3, [pc, #332]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003256:	4a52      	ldr	r2, [pc, #328]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d016      	beq.n	8003296 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe f8f4 	bl	8001454 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe f8f0 	bl	8001454 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e138      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003286:	4b46      	ldr	r3, [pc, #280]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ed      	beq.n	8003270 <HAL_RCC_OscConfig+0x388>
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003296:	f7fe f8dd 	bl	8001454 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fe f8d9 	bl	8001454 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e121      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b4:	4b3a      	ldr	r3, [pc, #232]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ed      	bne.n	800329e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c8:	4b35      	ldr	r3, [pc, #212]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	4a34      	ldr	r2, [pc, #208]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 80032ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d03c      	beq.n	800335a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01c      	beq.n	8003322 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032e8:	4b2d      	ldr	r3, [pc, #180]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ee:	4a2c      	ldr	r2, [pc, #176]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe f8ac 	bl	8001454 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003300:	f7fe f8a8 	bl	8001454 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0f2      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003312:	4b23      	ldr	r3, [pc, #140]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ef      	beq.n	8003300 <HAL_RCC_OscConfig+0x418>
 8003320:	e01b      	b.n	800335a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003322:	4b1f      	ldr	r3, [pc, #124]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003328:	4a1d      	ldr	r2, [pc, #116]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fe f88f 	bl	8001454 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333a:	f7fe f88b 	bl	8001454 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0d5      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800334c:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 800334e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1ef      	bne.n	800333a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80c9 	beq.w	80034f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003364:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b0c      	cmp	r3, #12
 800336e:	f000 8083 	beq.w	8003478 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d15e      	bne.n	8003438 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a08      	ldr	r2, [pc, #32]	@ (80033a0 <HAL_RCC_OscConfig+0x4b8>)
 8003380:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe f865 	bl	8001454 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	e00c      	b.n	80033a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe f861 	bl	8001454 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d905      	bls.n	80033a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0ab      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a8:	4b55      	ldr	r3, [pc, #340]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ec      	bne.n	800338e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b4:	4b52      	ldr	r3, [pc, #328]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	4b52      	ldr	r3, [pc, #328]	@ (8003504 <HAL_RCC_OscConfig+0x61c>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6a11      	ldr	r1, [r2, #32]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033c4:	3a01      	subs	r2, #1
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80033ce:	0212      	lsls	r2, r2, #8
 80033d0:	4311      	orrs	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033d6:	0852      	lsrs	r2, r2, #1
 80033d8:	3a01      	subs	r2, #1
 80033da:	0552      	lsls	r2, r2, #21
 80033dc:	4311      	orrs	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033e2:	0852      	lsrs	r2, r2, #1
 80033e4:	3a01      	subs	r2, #1
 80033e6:	0652      	lsls	r2, r2, #25
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033ee:	06d2      	lsls	r2, r2, #27
 80033f0:	430a      	orrs	r2, r1
 80033f2:	4943      	ldr	r1, [pc, #268]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b41      	ldr	r3, [pc, #260]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a40      	ldr	r2, [pc, #256]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003404:	4b3e      	ldr	r3, [pc, #248]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a3d      	ldr	r2, [pc, #244]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800340e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe f820 	bl	8001454 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003418:	f7fe f81c 	bl	8001454 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e066      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342a:	4b35      	ldr	r3, [pc, #212]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x530>
 8003436:	e05e      	b.n	80034f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003438:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 800343e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe f806 	bl	8001454 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe f802 	bl	8001454 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e04c      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345e:	4b28      	ldr	r3, [pc, #160]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800346a:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	4924      	ldr	r1, [pc, #144]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 8003470:	4b25      	ldr	r3, [pc, #148]	@ (8003508 <HAL_RCC_OscConfig+0x620>)
 8003472:	4013      	ands	r3, r2
 8003474:	60cb      	str	r3, [r1, #12]
 8003476:	e03e      	b.n	80034f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e039      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003484:	4b1e      	ldr	r3, [pc, #120]	@ (8003500 <HAL_RCC_OscConfig+0x618>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0203 	and.w	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	429a      	cmp	r2, r3
 8003496:	d12c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	3b01      	subs	r3, #1
 80034a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d123      	bne.n	80034f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d11b      	bne.n	80034f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d113      	bne.n	80034f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	3b01      	subs	r3, #1
 80034ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	019f800c 	.word	0x019f800c
 8003508:	feeefffc 	.word	0xfeeefffc

0800350c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e11e      	b.n	8003762 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b91      	ldr	r3, [pc, #580]	@ (800376c <HAL_RCC_ClockConfig+0x260>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d910      	bls.n	8003554 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b8e      	ldr	r3, [pc, #568]	@ (800376c <HAL_RCC_ClockConfig+0x260>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 020f 	bic.w	r2, r3, #15
 800353a:	498c      	ldr	r1, [pc, #560]	@ (800376c <HAL_RCC_ClockConfig+0x260>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b8a      	ldr	r3, [pc, #552]	@ (800376c <HAL_RCC_ClockConfig+0x260>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e106      	b.n	8003762 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d073      	beq.n	8003648 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d129      	bne.n	80035bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003568:	4b81      	ldr	r3, [pc, #516]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0f4      	b.n	8003762 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003578:	f000 f9e4 	bl	8003944 <RCC_GetSysClockFreqFromPLLSource>
 800357c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4a7c      	ldr	r2, [pc, #496]	@ (8003774 <HAL_RCC_ClockConfig+0x268>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d93f      	bls.n	8003606 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003586:	4b7a      	ldr	r3, [pc, #488]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800359a:	2b00      	cmp	r3, #0
 800359c:	d033      	beq.n	8003606 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d12f      	bne.n	8003606 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035a6:	4b72      	ldr	r3, [pc, #456]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035ae:	4a70      	ldr	r2, [pc, #448]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 80035b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035b6:	2380      	movs	r3, #128	@ 0x80
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e024      	b.n	8003606 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0c6      	b.n	8003762 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d4:	4b66      	ldr	r3, [pc, #408]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0be      	b.n	8003762 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035e4:	f000 f914 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4a61      	ldr	r2, [pc, #388]	@ (8003774 <HAL_RCC_ClockConfig+0x268>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d909      	bls.n	8003606 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035fa:	4a5d      	ldr	r2, [pc, #372]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 80035fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003600:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003602:	2380      	movs	r3, #128	@ 0x80
 8003604:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003606:	4b5a      	ldr	r3, [pc, #360]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 0203 	bic.w	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4957      	ldr	r1, [pc, #348]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003618:	f7fd ff1c 	bl	8001454 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fd ff18 	bl	8001454 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e095      	b.n	8003762 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	4b4e      	ldr	r3, [pc, #312]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 020c 	and.w	r2, r3, #12
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	429a      	cmp	r2, r3
 8003646:	d1eb      	bne.n	8003620 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003660:	4b43      	ldr	r3, [pc, #268]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a42      	ldr	r2, [pc, #264]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003666:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800366a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003678:	4b3d      	ldr	r3, [pc, #244]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003680:	4a3b      	ldr	r2, [pc, #236]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003682:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003686:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b39      	ldr	r3, [pc, #228]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4936      	ldr	r1, [pc, #216]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
 800369a:	e008      	b.n	80036ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b80      	cmp	r3, #128	@ 0x80
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036a2:	4b33      	ldr	r3, [pc, #204]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	4a32      	ldr	r2, [pc, #200]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 80036a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ae:	4b2f      	ldr	r3, [pc, #188]	@ (800376c <HAL_RCC_ClockConfig+0x260>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d21d      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036bc:	4b2b      	ldr	r3, [pc, #172]	@ (800376c <HAL_RCC_ClockConfig+0x260>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 020f 	bic.w	r2, r3, #15
 80036c4:	4929      	ldr	r1, [pc, #164]	@ (800376c <HAL_RCC_ClockConfig+0x260>)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036cc:	f7fd fec2 	bl	8001454 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fd febe 	bl	8001454 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e03b      	b.n	8003762 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	@ (800376c <HAL_RCC_ClockConfig+0x260>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1ed      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003704:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4917      	ldr	r1, [pc, #92]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	490f      	ldr	r1, [pc, #60]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003736:	f000 f86b 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 800373a:	4602      	mov	r2, r0
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <HAL_RCC_ClockConfig+0x264>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	490c      	ldr	r1, [pc, #48]	@ (8003778 <HAL_RCC_ClockConfig+0x26c>)
 8003748:	5ccb      	ldrb	r3, [r1, r3]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a0a      	ldr	r2, [pc, #40]	@ (800377c <HAL_RCC_ClockConfig+0x270>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003756:	4b0a      	ldr	r3, [pc, #40]	@ (8003780 <HAL_RCC_ClockConfig+0x274>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fe2e 	bl	80013bc <HAL_InitTick>
 8003760:	4603      	mov	r3, r0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40022000 	.word	0x40022000
 8003770:	40021000 	.word	0x40021000
 8003774:	04c4b400 	.word	0x04c4b400
 8003778:	08006680 	.word	0x08006680
 800377c:	20000014 	.word	0x20000014
 8003780:	20000018 	.word	0x20000018

08003784 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	@ 0x30
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003794:	2303      	movs	r3, #3
 8003796:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 80037b0:	029b      	lsls	r3, r3, #10
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80037be:	4b13      	ldr	r3, [pc, #76]	@ (800380c <HAL_RCC_MCOConfig+0x88>)
 80037c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037c2:	2101      	movs	r1, #1
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	4910      	ldr	r1, [pc, #64]	@ (800380c <HAL_RCC_MCOConfig+0x88>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	0d1b      	lsrs	r3, r3, #20
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80037de:	f107 0310 	add.w	r3, r7, #16
 80037e2:	4619      	mov	r1, r3
 80037e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037e6:	f7fe fefd 	bl	80025e4 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80037f0:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_RCC_MCOConfig+0x88>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	4903      	ldr	r1, [pc, #12]	@ (800380c <HAL_RCC_MCOConfig+0x88>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]
  }
}
 8003804:	bf00      	nop
 8003806:	3730      	adds	r7, #48	@ 0x30
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003816:	4b2c      	ldr	r3, [pc, #176]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d102      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003822:	4b2a      	ldr	r3, [pc, #168]	@ (80038cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	e047      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003828:	4b27      	ldr	r3, [pc, #156]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b08      	cmp	r3, #8
 8003832:	d102      	bne.n	800383a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003834:	4b26      	ldr	r3, [pc, #152]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	e03e      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800383a:	4b23      	ldr	r3, [pc, #140]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d136      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003846:	4b20      	ldr	r3, [pc, #128]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003850:	4b1d      	ldr	r3, [pc, #116]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3301      	adds	r3, #1
 800385c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d10c      	bne.n	800387e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003864:	4a1a      	ldr	r2, [pc, #104]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386e:	68d2      	ldr	r2, [r2, #12]
 8003870:	0a12      	lsrs	r2, r2, #8
 8003872:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	617b      	str	r3, [r7, #20]
      break;
 800387c:	e00c      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800387e:	4a13      	ldr	r2, [pc, #76]	@ (80038cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	4a10      	ldr	r2, [pc, #64]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003888:	68d2      	ldr	r2, [r2, #12]
 800388a:	0a12      	lsrs	r2, r2, #8
 800388c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003890:	fb02 f303 	mul.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]
      break;
 8003896:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	3301      	adds	r3, #1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	e001      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038b8:	693b      	ldr	r3, [r7, #16]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	017d7840 	.word	0x017d7840

080038d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d8:	4b03      	ldr	r3, [pc, #12]	@ (80038e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000014 	.word	0x20000014

080038ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038f0:	f7ff fff0 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	4904      	ldr	r1, [pc, #16]	@ (8003914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	08006690 	.word	0x08006690

08003918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800391c:	f7ff ffda 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	0adb      	lsrs	r3, r3, #11
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4904      	ldr	r1, [pc, #16]	@ (8003940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	08006690 	.word	0x08006690

08003944 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800394a:	4b1e      	ldr	r3, [pc, #120]	@ (80039c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003954:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3301      	adds	r3, #1
 8003960:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d10c      	bne.n	8003982 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003968:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003972:	68d2      	ldr	r2, [r2, #12]
 8003974:	0a12      	lsrs	r2, r2, #8
 8003976:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	617b      	str	r3, [r7, #20]
    break;
 8003980:	e00c      	b.n	800399c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003982:	4a12      	ldr	r2, [pc, #72]	@ (80039cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	4a0e      	ldr	r2, [pc, #56]	@ (80039c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	0a12      	lsrs	r2, r2, #8
 8003990:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003994:	fb02 f303 	mul.w	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
    break;
 800399a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800399c:	4b09      	ldr	r3, [pc, #36]	@ (80039c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	0e5b      	lsrs	r3, r3, #25
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	3301      	adds	r3, #1
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039b6:	687b      	ldr	r3, [r7, #4]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40021000 	.word	0x40021000
 80039c8:	017d7840 	.word	0x017d7840
 80039cc:	00f42400 	.word	0x00f42400

080039d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039d8:	2300      	movs	r3, #0
 80039da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039dc:	2300      	movs	r3, #0
 80039de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8098 	beq.w	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	4b43      	ldr	r3, [pc, #268]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10d      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b40      	ldr	r3, [pc, #256]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	4a3f      	ldr	r2, [pc, #252]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a16:	2301      	movs	r3, #1
 8003a18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a39      	ldr	r2, [pc, #228]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a26:	f7fd fd15 	bl	8001454 <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a2c:	e009      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fd fd11 	bl	8001454 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d902      	bls.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a40:	e005      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a42:	4b30      	ldr	r3, [pc, #192]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ef      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d159      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a54:	4b2a      	ldr	r3, [pc, #168]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01e      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d019      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a70:	4b23      	ldr	r3, [pc, #140]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7c:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	4a1f      	ldr	r2, [pc, #124]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a92:	4a1b      	ldr	r2, [pc, #108]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a9c:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fd fcd1 	bl	8001454 <HAL_GetTick>
 8003ab2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab4:	e00b      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7fd fccd 	bl	8001454 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d902      	bls.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	74fb      	strb	r3, [r7, #19]
            break;
 8003acc:	e006      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ace:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ec      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10b      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae2:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af0:	4903      	ldr	r1, [pc, #12]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003af8:	e008      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	74bb      	strb	r3, [r7, #18]
 8003afe:	e005      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0c:	7c7b      	ldrb	r3, [r7, #17]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d105      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b12:	4ba7      	ldr	r3, [pc, #668]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	4aa6      	ldr	r2, [pc, #664]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2a:	4ba1      	ldr	r3, [pc, #644]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	f023 0203 	bic.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	499d      	ldr	r1, [pc, #628]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b4c:	4b98      	ldr	r3, [pc, #608]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b52:	f023 020c 	bic.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	4995      	ldr	r1, [pc, #596]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b6e:	4b90      	ldr	r3, [pc, #576]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	498c      	ldr	r1, [pc, #560]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b90:	4b87      	ldr	r3, [pc, #540]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	4984      	ldr	r1, [pc, #528]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	497b      	ldr	r1, [pc, #492]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd4:	4b76      	ldr	r3, [pc, #472]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	4973      	ldr	r1, [pc, #460]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf6:	4b6e      	ldr	r3, [pc, #440]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	496a      	ldr	r1, [pc, #424]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c18:	4b65      	ldr	r3, [pc, #404]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	4962      	ldr	r1, [pc, #392]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	4959      	ldr	r1, [pc, #356]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c5c:	4b54      	ldr	r3, [pc, #336]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6a:	4951      	ldr	r1, [pc, #324]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	4948      	ldr	r1, [pc, #288]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ca0:	4b43      	ldr	r3, [pc, #268]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	4940      	ldr	r1, [pc, #256]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cd8:	4b35      	ldr	r3, [pc, #212]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce6:	4932      	ldr	r1, [pc, #200]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d02:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d10:	4b27      	ldr	r3, [pc, #156]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	4924      	ldr	r1, [pc, #144]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d30:	4b1f      	ldr	r3, [pc, #124]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a1e      	ldr	r2, [pc, #120]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d015      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d48:	4b19      	ldr	r3, [pc, #100]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d56:	4916      	ldr	r1, [pc, #88]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d66:	d105      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d68:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a10      	ldr	r2, [pc, #64]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d019      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d80:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	4908      	ldr	r1, [pc, #32]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d9e:	d109      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da0:	4b03      	ldr	r3, [pc, #12]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a02      	ldr	r2, [pc, #8]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003daa:	60d3      	str	r3, [r2, #12]
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d015      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dc0:	4b29      	ldr	r3, [pc, #164]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	4926      	ldr	r1, [pc, #152]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dde:	d105      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003de0:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a20      	ldr	r2, [pc, #128]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d015      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003df8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e06:	4918      	ldr	r1, [pc, #96]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e16:	d105      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e18:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a12      	ldr	r2, [pc, #72]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d015      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e30:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3e:	490a      	ldr	r1, [pc, #40]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e50:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a04      	ldr	r2, [pc, #16]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000

08003e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e09d      	b.n	8003fba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8e:	d009      	beq.n	8003ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
 8003e96:	e005      	b.n	8003ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fd f8a6 	bl	8001010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ee4:	d902      	bls.n	8003eec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e002      	b.n	8003ef2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003efa:	d007      	beq.n	8003f0c <HAL_SPI_Init+0xa0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4e:	ea42 0103 	orr.w	r1, r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	0c1b      	lsrs	r3, r3, #16
 8003f68:	f003 0204 	and.w	r2, r3, #4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f88:	ea42 0103 	orr.w	r1, r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e049      	b.n	8004068 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fd f855 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f000 fb31 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e04c      	b.n	8004122 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a26      	ldr	r2, [pc, #152]	@ (8004130 <HAL_TIM_Base_Start+0xc0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d022      	beq.n	80040e0 <HAL_TIM_Base_Start+0x70>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d01d      	beq.n	80040e0 <HAL_TIM_Base_Start+0x70>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a22      	ldr	r2, [pc, #136]	@ (8004134 <HAL_TIM_Base_Start+0xc4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d018      	beq.n	80040e0 <HAL_TIM_Base_Start+0x70>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a21      	ldr	r2, [pc, #132]	@ (8004138 <HAL_TIM_Base_Start+0xc8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d013      	beq.n	80040e0 <HAL_TIM_Base_Start+0x70>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	@ (800413c <HAL_TIM_Base_Start+0xcc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00e      	beq.n	80040e0 <HAL_TIM_Base_Start+0x70>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004140 <HAL_TIM_Base_Start+0xd0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d009      	beq.n	80040e0 <HAL_TIM_Base_Start+0x70>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <HAL_TIM_Base_Start+0xd4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d004      	beq.n	80040e0 <HAL_TIM_Base_Start+0x70>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <HAL_TIM_Base_Start+0xd8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d115      	bne.n	800410c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	4b19      	ldr	r3, [pc, #100]	@ (800414c <HAL_TIM_Base_Start+0xdc>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d015      	beq.n	800411e <HAL_TIM_Base_Start+0xae>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f8:	d011      	beq.n	800411e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	e008      	b.n	800411e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e000      	b.n	8004120 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40013400 	.word	0x40013400
 8004144:	40014000 	.word	0x40014000
 8004148:	40015000 	.word	0x40015000
 800414c:	00010007 	.word	0x00010007

08004150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e049      	b.n	80041f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f841 	bl	80041fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3304      	adds	r3, #4
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f000 fa6a 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800422e:	2302      	movs	r3, #2
 8004230:	e0ff      	b.n	8004432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b14      	cmp	r3, #20
 800423e:	f200 80f0 	bhi.w	8004422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004242:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	0800429d 	.word	0x0800429d
 800424c:	08004423 	.word	0x08004423
 8004250:	08004423 	.word	0x08004423
 8004254:	08004423 	.word	0x08004423
 8004258:	080042dd 	.word	0x080042dd
 800425c:	08004423 	.word	0x08004423
 8004260:	08004423 	.word	0x08004423
 8004264:	08004423 	.word	0x08004423
 8004268:	0800431f 	.word	0x0800431f
 800426c:	08004423 	.word	0x08004423
 8004270:	08004423 	.word	0x08004423
 8004274:	08004423 	.word	0x08004423
 8004278:	0800435f 	.word	0x0800435f
 800427c:	08004423 	.word	0x08004423
 8004280:	08004423 	.word	0x08004423
 8004284:	08004423 	.word	0x08004423
 8004288:	080043a1 	.word	0x080043a1
 800428c:	08004423 	.word	0x08004423
 8004290:	08004423 	.word	0x08004423
 8004294:	08004423 	.word	0x08004423
 8004298:	080043e1 	.word	0x080043e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fa94 	bl	80047d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0208 	orr.w	r2, r2, #8
 80042b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0204 	bic.w	r2, r2, #4
 80042c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6999      	ldr	r1, [r3, #24]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	619a      	str	r2, [r3, #24]
      break;
 80042da:	e0a5      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fb0e 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6999      	ldr	r1, [r3, #24]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	021a      	lsls	r2, r3, #8
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	619a      	str	r2, [r3, #24]
      break;
 800431c:	e084      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fb81 	bl	8004a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0208 	orr.w	r2, r2, #8
 8004338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0204 	bic.w	r2, r2, #4
 8004348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69d9      	ldr	r1, [r3, #28]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	61da      	str	r2, [r3, #28]
      break;
 800435c:	e064      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fbf3 	bl	8004b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69d9      	ldr	r1, [r3, #28]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	021a      	lsls	r2, r3, #8
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	61da      	str	r2, [r3, #28]
      break;
 800439e:	e043      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fc66 	bl	8004c78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0208 	orr.w	r2, r2, #8
 80043ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0204 	bic.w	r2, r2, #4
 80043ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80043de:	e023      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fcb0 	bl	8004d4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004420:	e002      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop

0800443c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIM_ConfigClockSource+0x1c>
 8004454:	2302      	movs	r3, #2
 8004456:	e0f6      	b.n	8004646 <HAL_TIM_ConfigClockSource+0x20a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004476:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800447a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a6f      	ldr	r2, [pc, #444]	@ (8004650 <HAL_TIM_ConfigClockSource+0x214>)
 8004492:	4293      	cmp	r3, r2
 8004494:	f000 80c1 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x1de>
 8004498:	4a6d      	ldr	r2, [pc, #436]	@ (8004650 <HAL_TIM_ConfigClockSource+0x214>)
 800449a:	4293      	cmp	r3, r2
 800449c:	f200 80c6 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 80044a0:	4a6c      	ldr	r2, [pc, #432]	@ (8004654 <HAL_TIM_ConfigClockSource+0x218>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	f000 80b9 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x1de>
 80044a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004654 <HAL_TIM_ConfigClockSource+0x218>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	f200 80be 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 80044b0:	4a69      	ldr	r2, [pc, #420]	@ (8004658 <HAL_TIM_ConfigClockSource+0x21c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	f000 80b1 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x1de>
 80044b8:	4a67      	ldr	r2, [pc, #412]	@ (8004658 <HAL_TIM_ConfigClockSource+0x21c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	f200 80b6 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 80044c0:	4a66      	ldr	r2, [pc, #408]	@ (800465c <HAL_TIM_ConfigClockSource+0x220>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	f000 80a9 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x1de>
 80044c8:	4a64      	ldr	r2, [pc, #400]	@ (800465c <HAL_TIM_ConfigClockSource+0x220>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	f200 80ae 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 80044d0:	4a63      	ldr	r2, [pc, #396]	@ (8004660 <HAL_TIM_ConfigClockSource+0x224>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	f000 80a1 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x1de>
 80044d8:	4a61      	ldr	r2, [pc, #388]	@ (8004660 <HAL_TIM_ConfigClockSource+0x224>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	f200 80a6 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 80044e0:	4a60      	ldr	r2, [pc, #384]	@ (8004664 <HAL_TIM_ConfigClockSource+0x228>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	f000 8099 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x1de>
 80044e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004664 <HAL_TIM_ConfigClockSource+0x228>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	f200 809e 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 80044f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044f4:	f000 8091 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x1de>
 80044f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044fc:	f200 8096 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 8004500:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004504:	f000 8089 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x1de>
 8004508:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800450c:	f200 808e 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004514:	d03e      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x158>
 8004516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800451a:	f200 8087 	bhi.w	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004522:	f000 8086 	beq.w	8004632 <HAL_TIM_ConfigClockSource+0x1f6>
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452a:	d87f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 800452c:	2b70      	cmp	r3, #112	@ 0x70
 800452e:	d01a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x12a>
 8004530:	2b70      	cmp	r3, #112	@ 0x70
 8004532:	d87b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 8004534:	2b60      	cmp	r3, #96	@ 0x60
 8004536:	d050      	beq.n	80045da <HAL_TIM_ConfigClockSource+0x19e>
 8004538:	2b60      	cmp	r3, #96	@ 0x60
 800453a:	d877      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 800453c:	2b50      	cmp	r3, #80	@ 0x50
 800453e:	d03c      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0x17e>
 8004540:	2b50      	cmp	r3, #80	@ 0x50
 8004542:	d873      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 8004544:	2b40      	cmp	r3, #64	@ 0x40
 8004546:	d058      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x1be>
 8004548:	2b40      	cmp	r3, #64	@ 0x40
 800454a:	d86f      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 800454c:	2b30      	cmp	r3, #48	@ 0x30
 800454e:	d064      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x1de>
 8004550:	2b30      	cmp	r3, #48	@ 0x30
 8004552:	d86b      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d060      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x1de>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d867      	bhi.n	800462c <HAL_TIM_ConfigClockSource+0x1f0>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d05c      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x1de>
 8004560:	2b10      	cmp	r3, #16
 8004562:	d05a      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x1de>
 8004564:	e062      	b.n	800462c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004576:	f000 fcd1 	bl	8004f1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	609a      	str	r2, [r3, #8]
      break;
 8004592:	e04f      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a4:	f000 fcba 	bl	8004f1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045b6:	609a      	str	r2, [r3, #8]
      break;
 80045b8:	e03c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c6:	461a      	mov	r2, r3
 80045c8:	f000 fc2c 	bl	8004e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2150      	movs	r1, #80	@ 0x50
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fc85 	bl	8004ee2 <TIM_ITRx_SetConfig>
      break;
 80045d8:	e02c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 fc4b 	bl	8004e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2160      	movs	r1, #96	@ 0x60
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fc75 	bl	8004ee2 <TIM_ITRx_SetConfig>
      break;
 80045f8:	e01c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fc0c 	bl	8004e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2140      	movs	r1, #64	@ 0x40
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fc65 	bl	8004ee2 <TIM_ITRx_SetConfig>
      break;
 8004618:	e00c      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fc5c 	bl	8004ee2 <TIM_ITRx_SetConfig>
      break;
 800462a:	e003      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      break;
 8004630:	e000      	b.n	8004634 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	00100070 	.word	0x00100070
 8004654:	00100060 	.word	0x00100060
 8004658:	00100050 	.word	0x00100050
 800465c:	00100040 	.word	0x00100040
 8004660:	00100030 	.word	0x00100030
 8004664:	00100020 	.word	0x00100020

08004668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a4c      	ldr	r2, [pc, #304]	@ (80047ac <TIM_Base_SetConfig+0x144>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d017      	beq.n	80046b0 <TIM_Base_SetConfig+0x48>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004686:	d013      	beq.n	80046b0 <TIM_Base_SetConfig+0x48>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a49      	ldr	r2, [pc, #292]	@ (80047b0 <TIM_Base_SetConfig+0x148>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00f      	beq.n	80046b0 <TIM_Base_SetConfig+0x48>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a48      	ldr	r2, [pc, #288]	@ (80047b4 <TIM_Base_SetConfig+0x14c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00b      	beq.n	80046b0 <TIM_Base_SetConfig+0x48>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a47      	ldr	r2, [pc, #284]	@ (80047b8 <TIM_Base_SetConfig+0x150>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <TIM_Base_SetConfig+0x48>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a46      	ldr	r2, [pc, #280]	@ (80047bc <TIM_Base_SetConfig+0x154>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_Base_SetConfig+0x48>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a45      	ldr	r2, [pc, #276]	@ (80047c0 <TIM_Base_SetConfig+0x158>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d108      	bne.n	80046c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a39      	ldr	r2, [pc, #228]	@ (80047ac <TIM_Base_SetConfig+0x144>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d023      	beq.n	8004712 <TIM_Base_SetConfig+0xaa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d0:	d01f      	beq.n	8004712 <TIM_Base_SetConfig+0xaa>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a36      	ldr	r2, [pc, #216]	@ (80047b0 <TIM_Base_SetConfig+0x148>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01b      	beq.n	8004712 <TIM_Base_SetConfig+0xaa>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a35      	ldr	r2, [pc, #212]	@ (80047b4 <TIM_Base_SetConfig+0x14c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d017      	beq.n	8004712 <TIM_Base_SetConfig+0xaa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a34      	ldr	r2, [pc, #208]	@ (80047b8 <TIM_Base_SetConfig+0x150>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <TIM_Base_SetConfig+0xaa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a33      	ldr	r2, [pc, #204]	@ (80047bc <TIM_Base_SetConfig+0x154>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00f      	beq.n	8004712 <TIM_Base_SetConfig+0xaa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a33      	ldr	r2, [pc, #204]	@ (80047c4 <TIM_Base_SetConfig+0x15c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00b      	beq.n	8004712 <TIM_Base_SetConfig+0xaa>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a32      	ldr	r2, [pc, #200]	@ (80047c8 <TIM_Base_SetConfig+0x160>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d007      	beq.n	8004712 <TIM_Base_SetConfig+0xaa>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a31      	ldr	r2, [pc, #196]	@ (80047cc <TIM_Base_SetConfig+0x164>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d003      	beq.n	8004712 <TIM_Base_SetConfig+0xaa>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2c      	ldr	r2, [pc, #176]	@ (80047c0 <TIM_Base_SetConfig+0x158>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d108      	bne.n	8004724 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a18      	ldr	r2, [pc, #96]	@ (80047ac <TIM_Base_SetConfig+0x144>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d013      	beq.n	8004778 <TIM_Base_SetConfig+0x110>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <TIM_Base_SetConfig+0x154>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00f      	beq.n	8004778 <TIM_Base_SetConfig+0x110>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a1a      	ldr	r2, [pc, #104]	@ (80047c4 <TIM_Base_SetConfig+0x15c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0x110>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <TIM_Base_SetConfig+0x160>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0x110>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <TIM_Base_SetConfig+0x164>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0x110>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a13      	ldr	r2, [pc, #76]	@ (80047c0 <TIM_Base_SetConfig+0x158>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	611a      	str	r2, [r3, #16]
  }
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40013400 	.word	0x40013400
 80047c0:	40015000 	.word	0x40015000
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40014400 	.word	0x40014400
 80047cc:	40014800 	.word	0x40014800

080047d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f023 0201 	bic.w	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 0302 	bic.w	r3, r3, #2
 800481c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a30      	ldr	r2, [pc, #192]	@ (80048ec <TIM_OC1_SetConfig+0x11c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <TIM_OC1_SetConfig+0x88>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a2f      	ldr	r2, [pc, #188]	@ (80048f0 <TIM_OC1_SetConfig+0x120>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00f      	beq.n	8004858 <TIM_OC1_SetConfig+0x88>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a2e      	ldr	r2, [pc, #184]	@ (80048f4 <TIM_OC1_SetConfig+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <TIM_OC1_SetConfig+0x88>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a2d      	ldr	r2, [pc, #180]	@ (80048f8 <TIM_OC1_SetConfig+0x128>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <TIM_OC1_SetConfig+0x88>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a2c      	ldr	r2, [pc, #176]	@ (80048fc <TIM_OC1_SetConfig+0x12c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_OC1_SetConfig+0x88>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a2b      	ldr	r2, [pc, #172]	@ (8004900 <TIM_OC1_SetConfig+0x130>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d10c      	bne.n	8004872 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0308 	bic.w	r3, r3, #8
 800485e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a1d      	ldr	r2, [pc, #116]	@ (80048ec <TIM_OC1_SetConfig+0x11c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <TIM_OC1_SetConfig+0xd2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a1c      	ldr	r2, [pc, #112]	@ (80048f0 <TIM_OC1_SetConfig+0x120>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00f      	beq.n	80048a2 <TIM_OC1_SetConfig+0xd2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a1b      	ldr	r2, [pc, #108]	@ (80048f4 <TIM_OC1_SetConfig+0x124>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00b      	beq.n	80048a2 <TIM_OC1_SetConfig+0xd2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a1a      	ldr	r2, [pc, #104]	@ (80048f8 <TIM_OC1_SetConfig+0x128>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <TIM_OC1_SetConfig+0xd2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a19      	ldr	r2, [pc, #100]	@ (80048fc <TIM_OC1_SetConfig+0x12c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_OC1_SetConfig+0xd2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a18      	ldr	r2, [pc, #96]	@ (8004900 <TIM_OC1_SetConfig+0x130>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d111      	bne.n	80048c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	40012c00 	.word	0x40012c00
 80048f0:	40013400 	.word	0x40013400
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40014400 	.word	0x40014400
 80048fc:	40014800 	.word	0x40014800
 8004900:	40015000 	.word	0x40015000

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f023 0210 	bic.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f023 0320 	bic.w	r3, r3, #32
 8004952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a2c      	ldr	r2, [pc, #176]	@ (8004a14 <TIM_OC2_SetConfig+0x110>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <TIM_OC2_SetConfig+0x74>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a2b      	ldr	r2, [pc, #172]	@ (8004a18 <TIM_OC2_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_OC2_SetConfig+0x74>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a2a      	ldr	r2, [pc, #168]	@ (8004a1c <TIM_OC2_SetConfig+0x118>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d10d      	bne.n	8004994 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800497e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a1f      	ldr	r2, [pc, #124]	@ (8004a14 <TIM_OC2_SetConfig+0x110>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <TIM_OC2_SetConfig+0xc0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a18 <TIM_OC2_SetConfig+0x114>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00f      	beq.n	80049c4 <TIM_OC2_SetConfig+0xc0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a20 <TIM_OC2_SetConfig+0x11c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00b      	beq.n	80049c4 <TIM_OC2_SetConfig+0xc0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <TIM_OC2_SetConfig+0x120>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_OC2_SetConfig+0xc0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a28 <TIM_OC2_SetConfig+0x124>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_OC2_SetConfig+0xc0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a17      	ldr	r2, [pc, #92]	@ (8004a1c <TIM_OC2_SetConfig+0x118>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d113      	bne.n	80049ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40015000 	.word	0x40015000
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800

08004a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a2b      	ldr	r2, [pc, #172]	@ (8004b38 <TIM_OC3_SetConfig+0x10c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_OC3_SetConfig+0x72>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2a      	ldr	r2, [pc, #168]	@ (8004b3c <TIM_OC3_SetConfig+0x110>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_OC3_SetConfig+0x72>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a29      	ldr	r2, [pc, #164]	@ (8004b40 <TIM_OC3_SetConfig+0x114>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10d      	bne.n	8004aba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <TIM_OC3_SetConfig+0x10c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <TIM_OC3_SetConfig+0xbe>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <TIM_OC3_SetConfig+0x110>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00f      	beq.n	8004aea <TIM_OC3_SetConfig+0xbe>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b44 <TIM_OC3_SetConfig+0x118>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00b      	beq.n	8004aea <TIM_OC3_SetConfig+0xbe>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b48 <TIM_OC3_SetConfig+0x11c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <TIM_OC3_SetConfig+0xbe>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b4c <TIM_OC3_SetConfig+0x120>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_OC3_SetConfig+0xbe>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a16      	ldr	r2, [pc, #88]	@ (8004b40 <TIM_OC3_SetConfig+0x114>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d113      	bne.n	8004b12 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	621a      	str	r2, [r3, #32]
}
 8004b2c:	bf00      	nop
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40013400 	.word	0x40013400
 8004b40:	40015000 	.word	0x40015000
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800

08004b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a2c      	ldr	r2, [pc, #176]	@ (8004c60 <TIM_OC4_SetConfig+0x110>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d007      	beq.n	8004bc4 <TIM_OC4_SetConfig+0x74>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c64 <TIM_OC4_SetConfig+0x114>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_OC4_SetConfig+0x74>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8004c68 <TIM_OC4_SetConfig+0x118>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d10d      	bne.n	8004be0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	031b      	lsls	r3, r3, #12
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c60 <TIM_OC4_SetConfig+0x110>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <TIM_OC4_SetConfig+0xc0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a1e      	ldr	r2, [pc, #120]	@ (8004c64 <TIM_OC4_SetConfig+0x114>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00f      	beq.n	8004c10 <TIM_OC4_SetConfig+0xc0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c6c <TIM_OC4_SetConfig+0x11c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <TIM_OC4_SetConfig+0xc0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004c70 <TIM_OC4_SetConfig+0x120>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <TIM_OC4_SetConfig+0xc0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a1c      	ldr	r2, [pc, #112]	@ (8004c74 <TIM_OC4_SetConfig+0x124>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC4_SetConfig+0xc0>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a17      	ldr	r2, [pc, #92]	@ (8004c68 <TIM_OC4_SetConfig+0x118>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d113      	bne.n	8004c38 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	019b      	lsls	r3, r3, #6
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	019b      	lsls	r3, r3, #6
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40013400 	.word	0x40013400
 8004c68:	40015000 	.word	0x40015000
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800

08004c78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a19      	ldr	r2, [pc, #100]	@ (8004d34 <TIM_OC5_SetConfig+0xbc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <TIM_OC5_SetConfig+0x82>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a18      	ldr	r2, [pc, #96]	@ (8004d38 <TIM_OC5_SetConfig+0xc0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00f      	beq.n	8004cfa <TIM_OC5_SetConfig+0x82>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a17      	ldr	r2, [pc, #92]	@ (8004d3c <TIM_OC5_SetConfig+0xc4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_OC5_SetConfig+0x82>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a16      	ldr	r2, [pc, #88]	@ (8004d40 <TIM_OC5_SetConfig+0xc8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_OC5_SetConfig+0x82>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a15      	ldr	r2, [pc, #84]	@ (8004d44 <TIM_OC5_SetConfig+0xcc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC5_SetConfig+0x82>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a14      	ldr	r2, [pc, #80]	@ (8004d48 <TIM_OC5_SetConfig+0xd0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d109      	bne.n	8004d0e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	621a      	str	r2, [r3, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800
 8004d48:	40015000 	.word	0x40015000

08004d4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	051b      	lsls	r3, r3, #20
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e0c <TIM_OC6_SetConfig+0xc0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d013      	beq.n	8004dd0 <TIM_OC6_SetConfig+0x84>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <TIM_OC6_SetConfig+0xc4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00f      	beq.n	8004dd0 <TIM_OC6_SetConfig+0x84>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a18      	ldr	r2, [pc, #96]	@ (8004e14 <TIM_OC6_SetConfig+0xc8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00b      	beq.n	8004dd0 <TIM_OC6_SetConfig+0x84>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a17      	ldr	r2, [pc, #92]	@ (8004e18 <TIM_OC6_SetConfig+0xcc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <TIM_OC6_SetConfig+0x84>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a16      	ldr	r2, [pc, #88]	@ (8004e1c <TIM_OC6_SetConfig+0xd0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC6_SetConfig+0x84>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a15      	ldr	r2, [pc, #84]	@ (8004e20 <TIM_OC6_SetConfig+0xd4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d109      	bne.n	8004de4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	029b      	lsls	r3, r3, #10
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40013400 	.word	0x40013400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40014400 	.word	0x40014400
 8004e1c:	40014800 	.word	0x40014800
 8004e20:	40015000 	.word	0x40015000

08004e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f023 0201 	bic.w	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f023 030a 	bic.w	r3, r3, #10
 8004e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b087      	sub	sp, #28
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f023 0210 	bic.w	r2, r3, #16
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	031b      	lsls	r3, r3, #12
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f043 0307 	orr.w	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	021a      	lsls	r2, r3, #8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	609a      	str	r2, [r3, #8]
}
 8004f50:	bf00      	nop
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e074      	b.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a34      	ldr	r2, [pc, #208]	@ (800506c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a33      	ldr	r2, [pc, #204]	@ (8005070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a31      	ldr	r2, [pc, #196]	@ (8005074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d108      	bne.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004fb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a21      	ldr	r2, [pc, #132]	@ (800506c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d022      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff4:	d01d      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d018      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1d      	ldr	r2, [pc, #116]	@ (800507c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1c      	ldr	r2, [pc, #112]	@ (8005080 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00e      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a15      	ldr	r2, [pc, #84]	@ (8005070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d009      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a18      	ldr	r2, [pc, #96]	@ (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a11      	ldr	r2, [pc, #68]	@ (8005074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d10c      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	4313      	orrs	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40012c00 	.word	0x40012c00
 8005070:	40013400 	.word	0x40013400
 8005074:	40015000 	.word	0x40015000
 8005078:	40000400 	.word	0x40000400
 800507c:	40000800 	.word	0x40000800
 8005080:	40000c00 	.word	0x40000c00
 8005084:	40014000 	.word	0x40014000

08005088 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e078      	b.n	8005196 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1c      	ldr	r2, [pc, #112]	@ (80051a4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1b      	ldr	r2, [pc, #108]	@ (80051a8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a19      	ldr	r2, [pc, #100]	@ (80051ac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d11c      	bne.n	8005184 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	051b      	lsls	r3, r3, #20
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40015000 	.word	0x40015000

080051b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e042      	b.n	8005248 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fb ffcb 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2224      	movs	r2, #36	@ 0x24
 80051de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fe86 	bl	8005f0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fb87 	bl	8005914 <UART_SetConfig>
 8005206:	4603      	mov	r3, r0
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e01b      	b.n	8005248 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800521e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800522e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 ff05 	bl	8006050 <UART_CheckIdleState>
 8005246:	4603      	mov	r3, r0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b0ba      	sub	sp, #232	@ 0xe8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005276:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800527a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800527e:	4013      	ands	r3, r2
 8005280:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d11b      	bne.n	80052c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d015      	beq.n	80052c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d009      	beq.n	80052c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8300 	beq.w	80058ba <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
      }
      return;
 80052c2:	e2fa      	b.n	80058ba <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8123 	beq.w	8005514 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80052d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005508 <HAL_UART_IRQHandler+0x2b8>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052de:	4b8b      	ldr	r3, [pc, #556]	@ (800550c <HAL_UART_IRQHandler+0x2bc>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8116 	beq.w	8005514 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d011      	beq.n	8005318 <HAL_UART_IRQHandler+0xc8>
 80052f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00b      	beq.n	8005318 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2201      	movs	r2, #1
 8005306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530e:	f043 0201 	orr.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d011      	beq.n	8005348 <HAL_UART_IRQHandler+0xf8>
 8005324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00b      	beq.n	8005348 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2202      	movs	r2, #2
 8005336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533e:	f043 0204 	orr.w	r2, r3, #4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d011      	beq.n	8005378 <HAL_UART_IRQHandler+0x128>
 8005354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2204      	movs	r2, #4
 8005366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536e:	f043 0202 	orr.w	r2, r3, #2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d017      	beq.n	80053b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d105      	bne.n	800539c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005390:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005394:	4b5c      	ldr	r3, [pc, #368]	@ (8005508 <HAL_UART_IRQHandler+0x2b8>)
 8005396:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2208      	movs	r2, #8
 80053a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053aa:	f043 0208 	orr.w	r2, r3, #8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d012      	beq.n	80053e6 <HAL_UART_IRQHandler+0x196>
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00c      	beq.n	80053e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8266 	beq.w	80058be <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d013      	beq.n	8005426 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d105      	bne.n	8005416 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800540a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800540e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b40      	cmp	r3, #64	@ 0x40
 800543c:	d005      	beq.n	800544a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800543e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005442:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005446:	2b00      	cmp	r3, #0
 8005448:	d054      	beq.n	80054f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 ff17 	bl	800627e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	d146      	bne.n	80054ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800547c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800548a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800548e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1d9      	bne.n	800545e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d017      	beq.n	80054e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ba:	4a15      	ldr	r2, [pc, #84]	@ (8005510 <HAL_UART_IRQHandler+0x2c0>)
 80054bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fc fed7 	bl	8002278 <HAL_DMA_Abort_IT>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d019      	beq.n	8005504 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80054de:	4610      	mov	r0, r2
 80054e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e2:	e00f      	b.n	8005504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f9ff 	bl	80058e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ea:	e00b      	b.n	8005504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9fb 	bl	80058e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f2:	e007      	b.n	8005504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f9f7 	bl	80058e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005502:	e1dc      	b.n	80058be <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	bf00      	nop
    return;
 8005506:	e1da      	b.n	80058be <HAL_UART_IRQHandler+0x66e>
 8005508:	10000001 	.word	0x10000001
 800550c:	04000120 	.word	0x04000120
 8005510:	0800634b 	.word	0x0800634b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005518:	2b01      	cmp	r3, #1
 800551a:	f040 8170 	bne.w	80057fe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 8169 	beq.w	80057fe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800552c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8162 	beq.w	80057fe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2210      	movs	r2, #16
 8005540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554c:	2b40      	cmp	r3, #64	@ 0x40
 800554e:	f040 80d8 	bne.w	8005702 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80af 	beq.w	80056c8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005574:	429a      	cmp	r2, r3
 8005576:	f080 80a7 	bcs.w	80056c8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005580:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 8087 	bne.w	80056a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1da      	bne.n	8005598 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005606:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800560a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800560e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e1      	bne.n	80055e2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800562e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005642:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005644:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005648:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e3      	bne.n	800561e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005674:	f023 0310 	bic.w	r3, r3, #16
 8005678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005686:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005688:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800568c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e4      	bne.n	8005664 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fc fd90 	bl	80021c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	b29b      	uxth	r3, r3
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f91b 	bl	80058fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056c6:	e0fc      	b.n	80058c2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056d2:	429a      	cmp	r2, r3
 80056d4:	f040 80f5 	bne.w	80058c2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	f040 80eb 	bne.w	80058c2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8fe 	bl	80058fc <HAL_UARTEx_RxEventCallback>
      return;
 8005700:	e0df      	b.n	80058c2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800570e:	b29b      	uxth	r3, r3
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800571c:	b29b      	uxth	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 80d1 	beq.w	80058c6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80cc 	beq.w	80058c6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800573c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800573e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005742:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005750:	647b      	str	r3, [r7, #68]	@ 0x44
 8005752:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800575e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e4      	bne.n	800572e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	623b      	str	r3, [r7, #32]
   return(result);
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800578c:	633a      	str	r2, [r7, #48]	@ 0x30
 800578e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e1      	bne.n	8005764 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	69b9      	ldr	r1, [r7, #24]
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	617b      	str	r3, [r7, #20]
   return(result);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e4      	bne.n	80057b4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f880 	bl	80058fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057fc:	e063      	b.n	80058c6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00e      	beq.n	8005828 <HAL_UART_IRQHandler+0x5d8>
 800580a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800580e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d008      	beq.n	8005828 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800581e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fdd3 	bl	80063cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005826:	e051      	b.n	80058cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	d014      	beq.n	800585e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005850:	2b00      	cmp	r3, #0
 8005852:	d03a      	beq.n	80058ca <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	4798      	blx	r3
    }
    return;
 800585c:	e035      	b.n	80058ca <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <HAL_UART_IRQHandler+0x62e>
 800586a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fd7d 	bl	8006376 <UART_EndTransmit_IT>
    return;
 800587c:	e026      	b.n	80058cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800587e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <HAL_UART_IRQHandler+0x64e>
 800588a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800588e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fdac 	bl	80063f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800589c:	e016      	b.n	80058cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d010      	beq.n	80058cc <HAL_UART_IRQHandler+0x67c>
 80058aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da0c      	bge.n	80058cc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fd94 	bl	80063e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058b8:	e008      	b.n	80058cc <HAL_UART_IRQHandler+0x67c>
      return;
 80058ba:	bf00      	nop
 80058bc:	e006      	b.n	80058cc <HAL_UART_IRQHandler+0x67c>
    return;
 80058be:	bf00      	nop
 80058c0:	e004      	b.n	80058cc <HAL_UART_IRQHandler+0x67c>
      return;
 80058c2:	bf00      	nop
 80058c4:	e002      	b.n	80058cc <HAL_UART_IRQHandler+0x67c>
      return;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <HAL_UART_IRQHandler+0x67c>
    return;
 80058ca:	bf00      	nop
  }
}
 80058cc:	37e8      	adds	r7, #232	@ 0xe8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop

080058d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005918:	b08c      	sub	sp, #48	@ 0x30
 800591a:	af00      	add	r7, sp, #0
 800591c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	431a      	orrs	r2, r3
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	431a      	orrs	r2, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	4313      	orrs	r3, r2
 800593a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4baa      	ldr	r3, [pc, #680]	@ (8005bec <UART_SetConfig+0x2d8>)
 8005944:	4013      	ands	r3, r2
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800594c:	430b      	orrs	r3, r1
 800594e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a9f      	ldr	r2, [pc, #636]	@ (8005bf0 <UART_SetConfig+0x2dc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800597c:	4313      	orrs	r3, r2
 800597e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800598a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005994:	430b      	orrs	r3, r1
 8005996:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599e:	f023 010f 	bic.w	r1, r3, #15
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a90      	ldr	r2, [pc, #576]	@ (8005bf4 <UART_SetConfig+0x2e0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d125      	bne.n	8005a04 <UART_SetConfig+0xf0>
 80059b8:	4b8f      	ldr	r3, [pc, #572]	@ (8005bf8 <UART_SetConfig+0x2e4>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d81a      	bhi.n	80059fc <UART_SetConfig+0xe8>
 80059c6:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <UART_SetConfig+0xb8>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059dd 	.word	0x080059dd
 80059d0:	080059ed 	.word	0x080059ed
 80059d4:	080059e5 	.word	0x080059e5
 80059d8:	080059f5 	.word	0x080059f5
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059e2:	e116      	b.n	8005c12 <UART_SetConfig+0x2fe>
 80059e4:	2302      	movs	r3, #2
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ea:	e112      	b.n	8005c12 <UART_SetConfig+0x2fe>
 80059ec:	2304      	movs	r3, #4
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f2:	e10e      	b.n	8005c12 <UART_SetConfig+0x2fe>
 80059f4:	2308      	movs	r3, #8
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059fa:	e10a      	b.n	8005c12 <UART_SetConfig+0x2fe>
 80059fc:	2310      	movs	r3, #16
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a02:	e106      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a7c      	ldr	r2, [pc, #496]	@ (8005bfc <UART_SetConfig+0x2e8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d138      	bne.n	8005a80 <UART_SetConfig+0x16c>
 8005a0e:	4b7a      	ldr	r3, [pc, #488]	@ (8005bf8 <UART_SetConfig+0x2e4>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a14:	f003 030c 	and.w	r3, r3, #12
 8005a18:	2b0c      	cmp	r3, #12
 8005a1a:	d82d      	bhi.n	8005a78 <UART_SetConfig+0x164>
 8005a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <UART_SetConfig+0x110>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a59 	.word	0x08005a59
 8005a28:	08005a79 	.word	0x08005a79
 8005a2c:	08005a79 	.word	0x08005a79
 8005a30:	08005a79 	.word	0x08005a79
 8005a34:	08005a69 	.word	0x08005a69
 8005a38:	08005a79 	.word	0x08005a79
 8005a3c:	08005a79 	.word	0x08005a79
 8005a40:	08005a79 	.word	0x08005a79
 8005a44:	08005a61 	.word	0x08005a61
 8005a48:	08005a79 	.word	0x08005a79
 8005a4c:	08005a79 	.word	0x08005a79
 8005a50:	08005a79 	.word	0x08005a79
 8005a54:	08005a71 	.word	0x08005a71
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5e:	e0d8      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005a60:	2302      	movs	r3, #2
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a66:	e0d4      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a6e:	e0d0      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005a70:	2308      	movs	r3, #8
 8005a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a76:	e0cc      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a7e:	e0c8      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a5e      	ldr	r2, [pc, #376]	@ (8005c00 <UART_SetConfig+0x2ec>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d125      	bne.n	8005ad6 <UART_SetConfig+0x1c2>
 8005a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf8 <UART_SetConfig+0x2e4>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a94:	2b30      	cmp	r3, #48	@ 0x30
 8005a96:	d016      	beq.n	8005ac6 <UART_SetConfig+0x1b2>
 8005a98:	2b30      	cmp	r3, #48	@ 0x30
 8005a9a:	d818      	bhi.n	8005ace <UART_SetConfig+0x1ba>
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d00a      	beq.n	8005ab6 <UART_SetConfig+0x1a2>
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d814      	bhi.n	8005ace <UART_SetConfig+0x1ba>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <UART_SetConfig+0x19a>
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d008      	beq.n	8005abe <UART_SetConfig+0x1aa>
 8005aac:	e00f      	b.n	8005ace <UART_SetConfig+0x1ba>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab4:	e0ad      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005abc:	e0a9      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005abe:	2304      	movs	r3, #4
 8005ac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac4:	e0a5      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005acc:	e0a1      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005ace:	2310      	movs	r3, #16
 8005ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ad4:	e09d      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a4a      	ldr	r2, [pc, #296]	@ (8005c04 <UART_SetConfig+0x2f0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d125      	bne.n	8005b2c <UART_SetConfig+0x218>
 8005ae0:	4b45      	ldr	r3, [pc, #276]	@ (8005bf8 <UART_SetConfig+0x2e4>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005aea:	2bc0      	cmp	r3, #192	@ 0xc0
 8005aec:	d016      	beq.n	8005b1c <UART_SetConfig+0x208>
 8005aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8005af0:	d818      	bhi.n	8005b24 <UART_SetConfig+0x210>
 8005af2:	2b80      	cmp	r3, #128	@ 0x80
 8005af4:	d00a      	beq.n	8005b0c <UART_SetConfig+0x1f8>
 8005af6:	2b80      	cmp	r3, #128	@ 0x80
 8005af8:	d814      	bhi.n	8005b24 <UART_SetConfig+0x210>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <UART_SetConfig+0x1f0>
 8005afe:	2b40      	cmp	r3, #64	@ 0x40
 8005b00:	d008      	beq.n	8005b14 <UART_SetConfig+0x200>
 8005b02:	e00f      	b.n	8005b24 <UART_SetConfig+0x210>
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0a:	e082      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b12:	e07e      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1a:	e07a      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b22:	e076      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b24:	2310      	movs	r3, #16
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b2a:	e072      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a35      	ldr	r2, [pc, #212]	@ (8005c08 <UART_SetConfig+0x2f4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d12a      	bne.n	8005b8c <UART_SetConfig+0x278>
 8005b36:	4b30      	ldr	r3, [pc, #192]	@ (8005bf8 <UART_SetConfig+0x2e4>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b44:	d01a      	beq.n	8005b7c <UART_SetConfig+0x268>
 8005b46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b4a:	d81b      	bhi.n	8005b84 <UART_SetConfig+0x270>
 8005b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b50:	d00c      	beq.n	8005b6c <UART_SetConfig+0x258>
 8005b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b56:	d815      	bhi.n	8005b84 <UART_SetConfig+0x270>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <UART_SetConfig+0x250>
 8005b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b60:	d008      	beq.n	8005b74 <UART_SetConfig+0x260>
 8005b62:	e00f      	b.n	8005b84 <UART_SetConfig+0x270>
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6a:	e052      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b72:	e04e      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b74:	2304      	movs	r3, #4
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7a:	e04a      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b82:	e046      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8a:	e042      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a17      	ldr	r2, [pc, #92]	@ (8005bf0 <UART_SetConfig+0x2dc>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d13a      	bne.n	8005c0c <UART_SetConfig+0x2f8>
 8005b96:	4b18      	ldr	r3, [pc, #96]	@ (8005bf8 <UART_SetConfig+0x2e4>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ba0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ba4:	d01a      	beq.n	8005bdc <UART_SetConfig+0x2c8>
 8005ba6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005baa:	d81b      	bhi.n	8005be4 <UART_SetConfig+0x2d0>
 8005bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bb0:	d00c      	beq.n	8005bcc <UART_SetConfig+0x2b8>
 8005bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bb6:	d815      	bhi.n	8005be4 <UART_SetConfig+0x2d0>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <UART_SetConfig+0x2b0>
 8005bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc0:	d008      	beq.n	8005bd4 <UART_SetConfig+0x2c0>
 8005bc2:	e00f      	b.n	8005be4 <UART_SetConfig+0x2d0>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bca:	e022      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd2:	e01e      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bda:	e01a      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be2:	e016      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bea:	e012      	b.n	8005c12 <UART_SetConfig+0x2fe>
 8005bec:	cfff69f3 	.word	0xcfff69f3
 8005bf0:	40008000 	.word	0x40008000
 8005bf4:	40013800 	.word	0x40013800
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	40004400 	.word	0x40004400
 8005c00:	40004800 	.word	0x40004800
 8005c04:	40004c00 	.word	0x40004c00
 8005c08:	40005000 	.word	0x40005000
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4aae      	ldr	r2, [pc, #696]	@ (8005ed0 <UART_SetConfig+0x5bc>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	f040 8097 	bne.w	8005d4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d823      	bhi.n	8005c6e <UART_SetConfig+0x35a>
 8005c26:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <UART_SetConfig+0x318>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c6f 	.word	0x08005c6f
 8005c34:	08005c59 	.word	0x08005c59
 8005c38:	08005c6f 	.word	0x08005c6f
 8005c3c:	08005c5f 	.word	0x08005c5f
 8005c40:	08005c6f 	.word	0x08005c6f
 8005c44:	08005c6f 	.word	0x08005c6f
 8005c48:	08005c6f 	.word	0x08005c6f
 8005c4c:	08005c67 	.word	0x08005c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7fd fe4c 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005c54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c56:	e010      	b.n	8005c7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c58:	4b9e      	ldr	r3, [pc, #632]	@ (8005ed4 <UART_SetConfig+0x5c0>)
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c5c:	e00d      	b.n	8005c7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fd fdd7 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8005c62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c64:	e009      	b.n	8005c7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c6c:	e005      	b.n	8005c7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8130 	beq.w	8005ee2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	4a94      	ldr	r2, [pc, #592]	@ (8005ed8 <UART_SetConfig+0x5c4>)
 8005c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	4413      	add	r3, r2
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d305      	bcc.n	8005cb2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d903      	bls.n	8005cba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005cb8:	e113      	b.n	8005ee2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	60bb      	str	r3, [r7, #8]
 8005cc0:	60fa      	str	r2, [r7, #12]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc6:	4a84      	ldr	r2, [pc, #528]	@ (8005ed8 <UART_SetConfig+0x5c4>)
 8005cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2200      	movs	r2, #0
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cdc:	f7fa fa9c 	bl	8000218 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	020b      	lsls	r3, r1, #8
 8005cf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cf6:	0202      	lsls	r2, r0, #8
 8005cf8:	6979      	ldr	r1, [r7, #20]
 8005cfa:	6849      	ldr	r1, [r1, #4]
 8005cfc:	0849      	lsrs	r1, r1, #1
 8005cfe:	2000      	movs	r0, #0
 8005d00:	460c      	mov	r4, r1
 8005d02:	4605      	mov	r5, r0
 8005d04:	eb12 0804 	adds.w	r8, r2, r4
 8005d08:	eb43 0905 	adc.w	r9, r3, r5
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	469a      	mov	sl, r3
 8005d14:	4693      	mov	fp, r2
 8005d16:	4652      	mov	r2, sl
 8005d18:	465b      	mov	r3, fp
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	f7fa fa7b 	bl	8000218 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4613      	mov	r3, r2
 8005d28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d30:	d308      	bcc.n	8005d44 <UART_SetConfig+0x430>
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d38:	d204      	bcs.n	8005d44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a3a      	ldr	r2, [r7, #32]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	e0ce      	b.n	8005ee2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d4a:	e0ca      	b.n	8005ee2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d54:	d166      	bne.n	8005e24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d827      	bhi.n	8005dae <UART_SetConfig+0x49a>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <UART_SetConfig+0x450>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d89 	.word	0x08005d89
 8005d68:	08005d91 	.word	0x08005d91
 8005d6c:	08005d99 	.word	0x08005d99
 8005d70:	08005daf 	.word	0x08005daf
 8005d74:	08005d9f 	.word	0x08005d9f
 8005d78:	08005daf 	.word	0x08005daf
 8005d7c:	08005daf 	.word	0x08005daf
 8005d80:	08005daf 	.word	0x08005daf
 8005d84:	08005da7 	.word	0x08005da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d88:	f7fd fdb0 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005d8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d8e:	e014      	b.n	8005dba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d90:	f7fd fdc2 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8005d94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d96:	e010      	b.n	8005dba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d98:	4b4e      	ldr	r3, [pc, #312]	@ (8005ed4 <UART_SetConfig+0x5c0>)
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d9c:	e00d      	b.n	8005dba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d9e:	f7fd fd37 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8005da2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005da4:	e009      	b.n	8005dba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dac:	e005      	b.n	8005dba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8090 	beq.w	8005ee2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	4a44      	ldr	r2, [pc, #272]	@ (8005ed8 <UART_SetConfig+0x5c4>)
 8005dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd4:	005a      	lsls	r2, r3, #1
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	441a      	add	r2, r3
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	2b0f      	cmp	r3, #15
 8005dec:	d916      	bls.n	8005e1c <UART_SetConfig+0x508>
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df4:	d212      	bcs.n	8005e1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f023 030f 	bic.w	r3, r3, #15
 8005dfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	8bfb      	ldrh	r3, [r7, #30]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	8bfa      	ldrh	r2, [r7, #30]
 8005e18:	60da      	str	r2, [r3, #12]
 8005e1a:	e062      	b.n	8005ee2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e22:	e05e      	b.n	8005ee2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d828      	bhi.n	8005e7e <UART_SetConfig+0x56a>
 8005e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e34 <UART_SetConfig+0x520>)
 8005e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e32:	bf00      	nop
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e61 	.word	0x08005e61
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	08005e7f 	.word	0x08005e7f
 8005e44:	08005e6f 	.word	0x08005e6f
 8005e48:	08005e7f 	.word	0x08005e7f
 8005e4c:	08005e7f 	.word	0x08005e7f
 8005e50:	08005e7f 	.word	0x08005e7f
 8005e54:	08005e77 	.word	0x08005e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e58:	f7fd fd48 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8005e5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e5e:	e014      	b.n	8005e8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e60:	f7fd fd5a 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8005e64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e66:	e010      	b.n	8005e8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e68:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed4 <UART_SetConfig+0x5c0>)
 8005e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e6c:	e00d      	b.n	8005e8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e6e:	f7fd fccf 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8005e72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e74:	e009      	b.n	8005e8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e7c:	e005      	b.n	8005e8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e88:	bf00      	nop
    }

    if (pclk != 0U)
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d028      	beq.n	8005ee2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	4a10      	ldr	r2, [pc, #64]	@ (8005ed8 <UART_SetConfig+0x5c4>)
 8005e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	441a      	add	r2, r3
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	d910      	bls.n	8005edc <UART_SetConfig+0x5c8>
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ec0:	d20c      	bcs.n	8005edc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60da      	str	r2, [r3, #12]
 8005ecc:	e009      	b.n	8005ee2 <UART_SetConfig+0x5ce>
 8005ece:	bf00      	nop
 8005ed0:	40008000 	.word	0x40008000
 8005ed4:	00f42400 	.word	0x00f42400
 8005ed8:	08006698 	.word	0x08006698
      }
      else
      {
        ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2200      	movs	r2, #0
 8005efc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005efe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3730      	adds	r7, #48	@ 0x30
 8005f06:	46bd      	mov	sp, r7
 8005f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01a      	beq.n	8006022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800600a:	d10a      	bne.n	8006022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b098      	sub	sp, #96	@ 0x60
 8006054:	af02      	add	r7, sp, #8
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006060:	f7fb f9f8 	bl	8001454 <HAL_GetTick>
 8006064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d12f      	bne.n	80060d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607c:	2200      	movs	r2, #0
 800607e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f88e 	bl	80061a4 <UART_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d022      	beq.n	80060d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800609c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e6      	bne.n	800608e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e063      	b.n	800619c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d149      	bne.n	8006176 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ea:	2200      	movs	r2, #0
 80060ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f857 	bl	80061a4 <UART_WaitOnFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d03c      	beq.n	8006176 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	623b      	str	r3, [r7, #32]
   return(result);
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800611a:	633b      	str	r3, [r7, #48]	@ 0x30
 800611c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e6      	bne.n	80060fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3308      	adds	r3, #8
 8006134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	60fb      	str	r3, [r7, #12]
   return(result);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800614e:	61fa      	str	r2, [r7, #28]
 8006150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	69b9      	ldr	r1, [r7, #24]
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	617b      	str	r3, [r7, #20]
   return(result);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e5      	bne.n	800612e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e012      	b.n	800619c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3758      	adds	r7, #88	@ 0x58
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b4:	e04f      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d04b      	beq.n	8006256 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061be:	f7fb f949 	bl	8001454 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e04e      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d037      	beq.n	8006256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b80      	cmp	r3, #128	@ 0x80
 80061ea:	d034      	beq.n	8006256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b40      	cmp	r3, #64	@ 0x40
 80061f0:	d031      	beq.n	8006256 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d110      	bne.n	8006222 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2208      	movs	r2, #8
 8006206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f838 	bl	800627e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2208      	movs	r2, #8
 8006212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e029      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800622c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006230:	d111      	bne.n	8006256 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800623a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f81e 	bl	800627e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e00f      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4013      	ands	r3, r2
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	bf0c      	ite	eq
 8006266:	2301      	moveq	r3, #1
 8006268:	2300      	movne	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	429a      	cmp	r2, r3
 8006272:	d0a0      	beq.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800627e:	b480      	push	{r7}
 8006280:	b095      	sub	sp, #84	@ 0x54
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800629a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e6      	bne.n	8006286 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3308      	adds	r3, #8
 80062be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3308      	adds	r3, #8
 80062da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e3      	bne.n	80062b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d118      	bne.n	800632a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	60bb      	str	r3, [r7, #8]
   return(result);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 0310 	bic.w	r3, r3, #16
 800630c:	647b      	str	r3, [r7, #68]	@ 0x44
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6979      	ldr	r1, [r7, #20]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	613b      	str	r3, [r7, #16]
   return(result);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e6      	bne.n	80062f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800633e:	bf00      	nop
 8006340:	3754      	adds	r7, #84	@ 0x54
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff fabd 	bl	80058e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b088      	sub	sp, #32
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	60bb      	str	r3, [r7, #8]
   return(result);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006392:	61fb      	str	r3, [r7, #28]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	6979      	ldr	r1, [r7, #20]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	613b      	str	r3, [r7, #16]
   return(result);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e6      	bne.n	800637e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fa88 	bl	80058d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063c4:	bf00      	nop
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_UARTEx_DisableFifoMode+0x16>
 800641a:	2302      	movs	r3, #2
 800641c:	e027      	b.n	800646e <HAL_UARTEx_DisableFifoMode+0x66>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2224      	movs	r2, #36	@ 0x24
 800642a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800644c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800648e:	2302      	movs	r3, #2
 8006490:	e02d      	b.n	80064ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2224      	movs	r2, #36	@ 0x24
 800649e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0201 	bic.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f850 	bl	8006574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800650a:	2302      	movs	r3, #2
 800650c:	e02d      	b.n	800656a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2224      	movs	r2, #36	@ 0x24
 800651a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0201 	bic.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f812 	bl	8006574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006580:	2b00      	cmp	r3, #0
 8006582:	d108      	bne.n	8006596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006594:	e031      	b.n	80065fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006596:	2308      	movs	r3, #8
 8006598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800659a:	2308      	movs	r3, #8
 800659c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	0e5b      	lsrs	r3, r3, #25
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	0f5b      	lsrs	r3, r3, #29
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	7b3a      	ldrb	r2, [r7, #12]
 80065c2:	4911      	ldr	r1, [pc, #68]	@ (8006608 <UARTEx_SetNbDataToProcess+0x94>)
 80065c4:	5c8a      	ldrb	r2, [r1, r2]
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065ca:	7b3a      	ldrb	r2, [r7, #12]
 80065cc:	490f      	ldr	r1, [pc, #60]	@ (800660c <UARTEx_SetNbDataToProcess+0x98>)
 80065ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	7b7a      	ldrb	r2, [r7, #13]
 80065e0:	4909      	ldr	r1, [pc, #36]	@ (8006608 <UARTEx_SetNbDataToProcess+0x94>)
 80065e2:	5c8a      	ldrb	r2, [r1, r2]
 80065e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065e8:	7b7a      	ldrb	r2, [r7, #13]
 80065ea:	4908      	ldr	r1, [pc, #32]	@ (800660c <UARTEx_SetNbDataToProcess+0x98>)
 80065ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	080066b0 	.word	0x080066b0
 800660c:	080066b8 	.word	0x080066b8

08006610 <memset>:
 8006610:	4402      	add	r2, r0
 8006612:	4603      	mov	r3, r0
 8006614:	4293      	cmp	r3, r2
 8006616:	d100      	bne.n	800661a <memset+0xa>
 8006618:	4770      	bx	lr
 800661a:	f803 1b01 	strb.w	r1, [r3], #1
 800661e:	e7f9      	b.n	8006614 <memset+0x4>

08006620 <__libc_init_array>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	4d0d      	ldr	r5, [pc, #52]	@ (8006658 <__libc_init_array+0x38>)
 8006624:	4c0d      	ldr	r4, [pc, #52]	@ (800665c <__libc_init_array+0x3c>)
 8006626:	1b64      	subs	r4, r4, r5
 8006628:	10a4      	asrs	r4, r4, #2
 800662a:	2600      	movs	r6, #0
 800662c:	42a6      	cmp	r6, r4
 800662e:	d109      	bne.n	8006644 <__libc_init_array+0x24>
 8006630:	4d0b      	ldr	r5, [pc, #44]	@ (8006660 <__libc_init_array+0x40>)
 8006632:	4c0c      	ldr	r4, [pc, #48]	@ (8006664 <__libc_init_array+0x44>)
 8006634:	f000 f818 	bl	8006668 <_init>
 8006638:	1b64      	subs	r4, r4, r5
 800663a:	10a4      	asrs	r4, r4, #2
 800663c:	2600      	movs	r6, #0
 800663e:	42a6      	cmp	r6, r4
 8006640:	d105      	bne.n	800664e <__libc_init_array+0x2e>
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	f855 3b04 	ldr.w	r3, [r5], #4
 8006648:	4798      	blx	r3
 800664a:	3601      	adds	r6, #1
 800664c:	e7ee      	b.n	800662c <__libc_init_array+0xc>
 800664e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006652:	4798      	blx	r3
 8006654:	3601      	adds	r6, #1
 8006656:	e7f2      	b.n	800663e <__libc_init_array+0x1e>
 8006658:	080066c8 	.word	0x080066c8
 800665c:	080066c8 	.word	0x080066c8
 8006660:	080066c8 	.word	0x080066c8
 8006664:	080066cc 	.word	0x080066cc

08006668 <_init>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	bf00      	nop
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr

08006674 <_fini>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	bf00      	nop
 8006678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667a:	bc08      	pop	{r3}
 800667c:	469e      	mov	lr, r3
 800667e:	4770      	bx	lr
