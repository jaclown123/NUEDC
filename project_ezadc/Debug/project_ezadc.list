
project_ezadc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003a84  08003a84  00004a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a94  08003a94  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a94  08003a94  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a94  08003a94  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a94  08003a94  00004a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a98  08003a98  00004a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a9c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08003aa8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003aa8  00005174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a674  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5f  00000000  00000000  0000f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00011110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d8  00000000  00000000  00011b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253d7  00000000  00000000  00012360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b31e  00000000  00000000  00037737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5ef0  00000000  00000000  00042a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138945  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad4  00000000  00000000  00138988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0013b45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003a6c 	.word	0x08003a6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003a6c 	.word	0x08003a6c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb90 	bl	8000942 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f851 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9d3 	bl	80005d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022a:	f000 f88d 	bl	8000348 <MX_ADC1_Init>
  MX_ADC4_Init();
 800022e:	f000 f969 	bl	8000504 <MX_ADC4_Init>
  MX_ADC2_Init();
 8000232:	f000 f901 	bl	8000438 <MX_ADC2_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t i;
	  int min = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
	  int max = 4039;
 800023a:	f640 73c7 	movw	r3, #4039	@ 0xfc7
 800023e:	60bb      	str	r3, [r7, #8]
	  HAL_ADC_Start(&hadc1);
 8000240:	481f      	ldr	r0, [pc, #124]	@ (80002c0 <main+0xa8>)
 8000242:	f001 f825 	bl	8001290 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000246:	2164      	movs	r1, #100	@ 0x64
 8000248:	481d      	ldr	r0, [pc, #116]	@ (80002c0 <main+0xa8>)
 800024a:	f001 f939 	bl	80014c0 <HAL_ADC_PollForConversion>
	  i = HAL_ADC_GetValue(&hadc1);
 800024e:	481c      	ldr	r0, [pc, #112]	@ (80002c0 <main+0xa8>)
 8000250:	f001 fa3c 	bl	80016cc <HAL_ADC_GetValue>
 8000254:	6078      	str	r0, [r7, #4]
	  if ((int)i > min && (int) i < max / 2)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	429a      	cmp	r2, r3
 800025c:	da14      	bge.n	8000288 <main+0x70>
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	0fda      	lsrs	r2, r3, #31
 8000262:	4413      	add	r3, r2
 8000264:	105b      	asrs	r3, r3, #1
 8000266:	461a      	mov	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	429a      	cmp	r2, r3
 800026c:	dd0c      	ble.n	8000288 <main+0x70>
	  {
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000274:	4813      	ldr	r0, [pc, #76]	@ (80002c4 <main+0xac>)
 8000276:	f002 fbbd 	bl	80029f4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000280:	4810      	ldr	r0, [pc, #64]	@ (80002c4 <main+0xac>)
 8000282:	f002 fbb7 	bl	80029f4 <HAL_GPIO_WritePin>
 8000286:	e017      	b.n	80002b8 <main+0xa0>

	  }
	  else if ((int)i >= max/2 &&(int) i <max)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	0fda      	lsrs	r2, r3, #31
 800028c:	4413      	add	r3, r2
 800028e:	105b      	asrs	r3, r3, #1
 8000290:	461a      	mov	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	dc0f      	bgt.n	80002b8 <main+0xa0>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	429a      	cmp	r2, r3
 800029e:	dd0b      	ble.n	80002b8 <main+0xa0>
	  {
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a6:	4807      	ldr	r0, [pc, #28]	@ (80002c4 <main+0xac>)
 80002a8:	f002 fba4 	bl	80029f4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b2:	4804      	ldr	r0, [pc, #16]	@ (80002c4 <main+0xac>)
 80002b4:	f002 fb9e 	bl	80029f4 <HAL_GPIO_WritePin>
	  }

	  HAL_ADC_Stop(&hadc1);
 80002b8:	4801      	ldr	r0, [pc, #4]	@ (80002c0 <main+0xa8>)
 80002ba:	f001 f8cd 	bl	8001458 <HAL_ADC_Stop>
  {
 80002be:	e7ba      	b.n	8000236 <main+0x1e>
 80002c0:	20000028 	.word	0x20000028
 80002c4:	48000400 	.word	0x48000400

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	@ 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2238      	movs	r2, #56	@ 0x38
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fb9c 	bl	8003a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002ee:	f002 fb99 	bl	8002a24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2340      	movs	r3, #64	@ 0x40
 80002fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	2300      	movs	r3, #0
 8000302:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f002 fc3f 	bl	8002b8c <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000314:	f000 f99c 	bl	8000650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	2301      	movs	r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f002 ff3d 	bl	80031b0 <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800033c:	f000 f988 	bl	8000650 <Error_Handler>
  }
}
 8000340:	bf00      	nop
 8000342:	3750      	adds	r7, #80	@ 0x50
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b08c      	sub	sp, #48	@ 0x30
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800034e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2220      	movs	r2, #32
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f003 fb57 	bl	8003a14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000366:	4b32      	ldr	r3, [pc, #200]	@ (8000430 <MX_ADC1_Init+0xe8>)
 8000368:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800036e:	4b30      	ldr	r3, [pc, #192]	@ (8000430 <MX_ADC1_Init+0xe8>)
 8000370:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000374:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000376:	4b2e      	ldr	r3, [pc, #184]	@ (8000430 <MX_ADC1_Init+0xe8>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037c:	4b2c      	ldr	r3, [pc, #176]	@ (8000430 <MX_ADC1_Init+0xe8>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000382:	4b2b      	ldr	r3, [pc, #172]	@ (8000430 <MX_ADC1_Init+0xe8>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000388:	4b29      	ldr	r3, [pc, #164]	@ (8000430 <MX_ADC1_Init+0xe8>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038e:	4b28      	ldr	r3, [pc, #160]	@ (8000430 <MX_ADC1_Init+0xe8>)
 8000390:	2204      	movs	r2, #4
 8000392:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000394:	4b26      	ldr	r3, [pc, #152]	@ (8000430 <MX_ADC1_Init+0xe8>)
 8000396:	2200      	movs	r2, #0
 8000398:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800039a:	4b25      	ldr	r3, [pc, #148]	@ (8000430 <MX_ADC1_Init+0xe8>)
 800039c:	2200      	movs	r2, #0
 800039e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003a0:	4b23      	ldr	r3, [pc, #140]	@ (8000430 <MX_ADC1_Init+0xe8>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b22      	ldr	r3, [pc, #136]	@ (8000430 <MX_ADC1_Init+0xe8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ae:	4b20      	ldr	r3, [pc, #128]	@ (8000430 <MX_ADC1_Init+0xe8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000430 <MX_ADC1_Init+0xe8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <MX_ADC1_Init+0xe8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000430 <MX_ADC1_Init+0xe8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80003c8:	4b19      	ldr	r3, [pc, #100]	@ (8000430 <MX_ADC1_Init+0xe8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003d0:	4817      	ldr	r0, [pc, #92]	@ (8000430 <MX_ADC1_Init+0xe8>)
 80003d2:	f000 fda1 	bl	8000f18 <HAL_ADC_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80003dc:	f000 f938 	bl	8000650 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003e0:	2300      	movs	r3, #0
 80003e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003e8:	4619      	mov	r1, r3
 80003ea:	4811      	ldr	r0, [pc, #68]	@ (8000430 <MX_ADC1_Init+0xe8>)
 80003ec:	f001 ff94 	bl	8002318 <HAL_ADCEx_MultiModeConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80003f6:	f000 f92b 	bl	8000650 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <MX_ADC1_Init+0xec>)
 80003fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003fe:	2306      	movs	r3, #6
 8000400:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000406:	237f      	movs	r3, #127	@ 0x7f
 8000408:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800040a:	2304      	movs	r3, #4
 800040c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4619      	mov	r1, r3
 8000416:	4806      	ldr	r0, [pc, #24]	@ (8000430 <MX_ADC1_Init+0xe8>)
 8000418:	f001 f966 	bl	80016e8 <HAL_ADC_ConfigChannel>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000422:	f000 f915 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	3730      	adds	r7, #48	@ 0x30
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000028 	.word	0x20000028
 8000434:	04300002 	.word	0x04300002

08000438 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800043e:	463b      	mov	r3, r7
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f003 fae5 	bl	8003a14 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800044a:	4b2b      	ldr	r3, [pc, #172]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 800044c:	4a2b      	ldr	r2, [pc, #172]	@ (80004fc <MX_ADC2_Init+0xc4>)
 800044e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000450:	4b29      	ldr	r3, [pc, #164]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 8000452:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000456:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000458:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800045e:	4b26      	ldr	r3, [pc, #152]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000464:	4b24      	ldr	r3, [pc, #144]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800046a:	4b23      	ldr	r3, [pc, #140]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000470:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 8000472:	2204      	movs	r2, #4
 8000474:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000476:	4b20      	ldr	r3, [pc, #128]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 8000478:	2200      	movs	r2, #0
 800047a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800047c:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 800047e:	2200      	movs	r2, #0
 8000480:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000482:	4b1d      	ldr	r3, [pc, #116]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 8000484:	2201      	movs	r2, #1
 8000486:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000488:	4b1b      	ldr	r3, [pc, #108]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 800048a:	2200      	movs	r2, #0
 800048c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000490:	4b19      	ldr	r3, [pc, #100]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 8000492:	2200      	movs	r2, #0
 8000494:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000496:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 8000498:	2200      	movs	r2, #0
 800049a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800049c:	4b16      	ldr	r3, [pc, #88]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80004aa:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004b2:	4811      	ldr	r0, [pc, #68]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 80004b4:	f000 fd30 	bl	8000f18 <HAL_ADC_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80004be:	f000 f8c7 	bl	8000650 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_ADC2_Init+0xc8>)
 80004c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c6:	2306      	movs	r3, #6
 80004c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ce:	237f      	movs	r3, #127	@ 0x7f
 80004d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004d2:	2304      	movs	r3, #4
 80004d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004da:	463b      	mov	r3, r7
 80004dc:	4619      	mov	r1, r3
 80004de:	4806      	ldr	r0, [pc, #24]	@ (80004f8 <MX_ADC2_Init+0xc0>)
 80004e0:	f001 f902 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80004ea:	f000 f8b1 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000094 	.word	0x20000094
 80004fc:	50000100 	.word	0x50000100
 8000500:	04300002 	.word	0x04300002

08000504 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2220      	movs	r2, #32
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f003 fa7f 	bl	8003a14 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000516:	4b2b      	ldr	r3, [pc, #172]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000518:	4a2b      	ldr	r2, [pc, #172]	@ (80005c8 <MX_ADC4_Init+0xc4>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051c:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 800051e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000522:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000524:	4b27      	ldr	r3, [pc, #156]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052a:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000530:	4b24      	ldr	r3, [pc, #144]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053c:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 800053e:	2204      	movs	r2, #4
 8000540:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000542:	4b20      	ldr	r3, [pc, #128]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000544:	2200      	movs	r2, #0
 8000546:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000548:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 800054a:	2200      	movs	r2, #0
 800054c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800054e:	4b1d      	ldr	r3, [pc, #116]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000550:	2201      	movs	r2, #1
 8000552:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000554:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000556:	2200      	movs	r2, #0
 8000558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800055c:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 800055e:	2200      	movs	r2, #0
 8000560:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000568:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000572:	2200      	movs	r2, #0
 8000574:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800057e:	4811      	ldr	r0, [pc, #68]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 8000580:	f000 fcca 	bl	8000f18 <HAL_ADC_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800058a:	f000 f861 	bl	8000650 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_ADC4_Init+0xc8>)
 8000590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000592:	2306      	movs	r3, #6
 8000594:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800059a:	237f      	movs	r3, #127	@ 0x7f
 800059c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800059e:	2304      	movs	r3, #4
 80005a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <MX_ADC4_Init+0xc0>)
 80005ac:	f001 f89c 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80005b6:	f000 f84b 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000100 	.word	0x20000100
 80005c8:	50000500 	.word	0x50000500
 80005cc:	14f00020 	.word	0x14f00020

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <MX_GPIO_Init+0x78>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <MX_GPIO_Init+0x78>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <MX_GPIO_Init+0x78>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_GPIO_Init+0x78>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a11      	ldr	r2, [pc, #68]	@ (8000648 <MX_GPIO_Init+0x78>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_GPIO_Init+0x78>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800061c:	480b      	ldr	r0, [pc, #44]	@ (800064c <MX_GPIO_Init+0x7c>)
 800061e:	f002 f9e9 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000622:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4619      	mov	r1, r3
 800063a:	4804      	ldr	r0, [pc, #16]	@ (800064c <MX_GPIO_Init+0x7c>)
 800063c:	f002 f858 	bl	80026f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	48000400 	.word	0x48000400

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <Error_Handler+0x8>

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <HAL_MspInit+0x44>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000666:	4a0e      	ldr	r2, [pc, #56]	@ (80006a0 <HAL_MspInit+0x44>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6613      	str	r3, [r2, #96]	@ 0x60
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <HAL_MspInit+0x44>)
 8000670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <HAL_MspInit+0x44>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800067e:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <HAL_MspInit+0x44>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000684:	6593      	str	r3, [r2, #88]	@ 0x58
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <HAL_MspInit+0x44>)
 8000688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800068a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000692:	f002 fa6b 	bl	8002b6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0a2      	sub	sp, #136	@ 0x88
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	2254      	movs	r2, #84	@ 0x54
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 f9a5 	bl	8003a14 <memset>
  if(hadc->Instance==ADC1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006d2:	d13e      	bne.n	8000752 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006de:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 ff47 	bl	8003578 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006f0:	f7ff ffae 	bl	8000650 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80006f4:	4b58      	ldr	r3, [pc, #352]	@ (8000858 <HAL_ADC_MspInit+0x1b4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a57      	ldr	r2, [pc, #348]	@ (8000858 <HAL_ADC_MspInit+0x1b4>)
 80006fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80006fe:	4b56      	ldr	r3, [pc, #344]	@ (8000858 <HAL_ADC_MspInit+0x1b4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d10b      	bne.n	800071e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000706:	4b55      	ldr	r3, [pc, #340]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a54      	ldr	r2, [pc, #336]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 800070c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b52      	ldr	r3, [pc, #328]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800071a:	61fb      	str	r3, [r7, #28]
 800071c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b4f      	ldr	r3, [pc, #316]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a4e      	ldr	r2, [pc, #312]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b4c      	ldr	r3, [pc, #304]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000736:	2301      	movs	r3, #1
 8000738:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073a:	2303      	movs	r3, #3
 800073c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074c:	f001 ffd0 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000750:	e07d      	b.n	800084e <HAL_ADC_MspInit+0x1aa>
  else if(hadc->Instance==ADC2)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a42      	ldr	r2, [pc, #264]	@ (8000860 <HAL_ADC_MspInit+0x1bc>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d13e      	bne.n	80007da <HAL_ADC_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800075c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000760:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000762:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000766:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f002 ff03 	bl	8003578 <HAL_RCCEx_PeriphCLKConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8000778:	f7ff ff6a 	bl	8000650 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800077c:	4b36      	ldr	r3, [pc, #216]	@ (8000858 <HAL_ADC_MspInit+0x1b4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a35      	ldr	r2, [pc, #212]	@ (8000858 <HAL_ADC_MspInit+0x1b4>)
 8000784:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000786:	4b34      	ldr	r3, [pc, #208]	@ (8000858 <HAL_ADC_MspInit+0x1b4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d10b      	bne.n	80007a6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800078e:	4b33      	ldr	r3, [pc, #204]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a32      	ldr	r2, [pc, #200]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 8000794:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b30      	ldr	r3, [pc, #192]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a2c      	ldr	r2, [pc, #176]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007be:	2301      	movs	r3, #1
 80007c0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c2:	2303      	movs	r3, #3
 80007c4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80007ce:	4619      	mov	r1, r3
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d4:	f001 ff8c 	bl	80026f0 <HAL_GPIO_Init>
}
 80007d8:	e039      	b.n	800084e <HAL_ADC_MspInit+0x1aa>
  else if(hadc->Instance==ADC4)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a21      	ldr	r2, [pc, #132]	@ (8000864 <HAL_ADC_MspInit+0x1c0>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d134      	bne.n	800084e <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80007e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80007ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80007ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 febf 	bl	8003578 <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8000800:	f7ff ff26 	bl	8000650 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000808:	4a14      	ldr	r2, [pc, #80]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800080e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000820:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <HAL_ADC_MspInit+0x1b8>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000838:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083a:	2303      	movs	r3, #3
 800083c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000846:	4619      	mov	r1, r3
 8000848:	4807      	ldr	r0, [pc, #28]	@ (8000868 <HAL_ADC_MspInit+0x1c4>)
 800084a:	f001 ff51 	bl	80026f0 <HAL_GPIO_Init>
}
 800084e:	bf00      	nop
 8000850:	3788      	adds	r7, #136	@ 0x88
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000016c 	.word	0x2000016c
 800085c:	40021000 	.word	0x40021000
 8000860:	50000100 	.word	0x50000100
 8000864:	50000500 	.word	0x50000500
 8000868:	48000400 	.word	0x48000400

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f891 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f0:	480d      	ldr	r0, [pc, #52]	@ (8000928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff ffea 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	@ (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	@ (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	@ (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f003 f881 	bl	8003a24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000922:	f7ff fc79 	bl	8000218 <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   r0, =_estack
 8000928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	08003a9c 	.word	0x08003a9c
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	20000174 	.word	0x20000174

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>

08000942 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f001 fe9d 	bl	800268c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f80e 	bl	8000974 <HAL_InitTick>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e001      	b.n	8000968 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000964:	f7ff fe7a 	bl	800065c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000968:	79fb      	ldrb	r3, [r7, #7]

}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <HAL_InitTick+0x68>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d022      	beq.n	80009ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_InitTick+0x6c>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <HAL_InitTick+0x68>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000994:	fbb1 f3f3 	udiv	r3, r1, r3
 8000998:	fbb2 f3f3 	udiv	r3, r2, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fe9a 	bl	80026d6 <HAL_SYSTICK_Config>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10f      	bne.n	80009c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b0f      	cmp	r3, #15
 80009ac:	d809      	bhi.n	80009c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ae:	2200      	movs	r2, #0
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	f04f 30ff 	mov.w	r0, #4294967295
 80009b6:	f001 fe74 	bl	80026a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_InitTick+0x70>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	e007      	b.n	80009d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	e004      	b.n	80009d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e001      	b.n	80009d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_IncTick+0x1c>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <HAL_IncTick+0x20>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a03      	ldr	r2, [pc, #12]	@ (8000a04 <HAL_IncTick+0x1c>)
 80009f8:	6013      	str	r3, [r2, #0]
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000170 	.word	0x20000170
 8000a08:	20000008 	.word	0x20000008

08000a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <HAL_GetTick+0x14>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000170 	.word	0x20000170

08000a24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	609a      	str	r2, [r3, #8]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b087      	sub	sp, #28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3360      	adds	r3, #96	@ 0x60
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <LL_ADC_SetOffset+0x44>)
 8000aae:	4013      	ands	r3, r2
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	4313      	orrs	r3, r2
 8000abc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ac4:	bf00      	nop
 8000ac6:	371c      	adds	r7, #28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	03fff000 	.word	0x03fff000

08000ad4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3360      	adds	r3, #96	@ 0x60
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3360      	adds	r3, #96	@ 0x60
 8000b10:	461a      	mov	r2, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	431a      	orrs	r2, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000b2a:	bf00      	nop
 8000b2c:	371c      	adds	r7, #28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b087      	sub	sp, #28
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3360      	adds	r3, #96	@ 0x60
 8000b46:	461a      	mov	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000b60:	bf00      	nop
 8000b62:	371c      	adds	r7, #28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3360      	adds	r3, #96	@ 0x60
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	431a      	orrs	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000b96:	bf00      	nop
 8000b98:	371c      	adds	r7, #28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	615a      	str	r2, [r3, #20]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b087      	sub	sp, #28
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3330      	adds	r3, #48	@ 0x30
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	0a1b      	lsrs	r3, r3, #8
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	4413      	add	r3, r2
 8000c0c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	f003 031f 	and.w	r3, r3, #31
 8000c18:	211f      	movs	r1, #31
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	401a      	ands	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	0e9b      	lsrs	r3, r3, #26
 8000c26:	f003 011f 	and.w	r1, r3, #31
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	f003 031f 	and.w	r3, r3, #31
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	431a      	orrs	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c3a:	bf00      	nop
 8000c3c:	371c      	adds	r7, #28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b087      	sub	sp, #28
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3314      	adds	r3, #20
 8000c56:	461a      	mov	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	0e5b      	lsrs	r3, r3, #25
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	4413      	add	r3, r2
 8000c64:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	0d1b      	lsrs	r3, r3, #20
 8000c6e:	f003 031f 	and.w	r3, r3, #31
 8000c72:	2107      	movs	r1, #7
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	0d1b      	lsrs	r3, r3, #20
 8000c80:	f003 031f 	and.w	r3, r3, #31
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c90:	bf00      	nop
 8000c92:	371c      	adds	r7, #28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0318 	and.w	r3, r3, #24
 8000cbe:	4908      	ldr	r1, [pc, #32]	@ (8000ce0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000cc0:	40d9      	lsrs	r1, r3
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	400b      	ands	r3, r1
 8000cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	0007ffff 	.word	0x0007ffff

08000ce4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 031f 	and.w	r3, r3, #31
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000d2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6093      	str	r3, [r2, #8]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d54:	d101      	bne.n	8000d5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000d78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000da4:	d101      	bne.n	8000daa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000dc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000dcc:	f043 0201 	orr.w	r2, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000df4:	f043 0202 	orr.w	r2, r3, #2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <LL_ADC_IsEnabled+0x18>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <LL_ADC_IsEnabled+0x1a>
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d101      	bne.n	8000e46 <LL_ADC_IsDisableOngoing+0x18>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <LL_ADC_IsDisableOngoing+0x1a>
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e68:	f043 0204 	orr.w	r2, r3, #4
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e90:	f043 0210 	orr.w	r2, r3, #16
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d101      	bne.n	8000ebc <LL_ADC_REG_IsConversionOngoing+0x18>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000eda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ede:	f043 0220 	orr.w	r2, r3, #32
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d101      	bne.n	8000f0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e1a9      	b.n	8001286 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d109      	bne.n	8000f54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fbaf 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fef1 	bl	8000d40 <LL_ADC_IsDeepPowerDownEnabled>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fed7 	bl	8000d1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff0c 	bl	8000d90 <LL_ADC_IsInternalRegulatorEnabled>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d115      	bne.n	8000faa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fef0 	bl	8000d68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f88:	4b9c      	ldr	r3, [pc, #624]	@ (80011fc <HAL_ADC_Init+0x2e4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	099b      	lsrs	r3, r3, #6
 8000f8e:	4a9c      	ldr	r2, [pc, #624]	@ (8001200 <HAL_ADC_Init+0x2e8>)
 8000f90:	fba2 2303 	umull	r2, r3, r2, r3
 8000f94:	099b      	lsrs	r3, r3, #6
 8000f96:	3301      	adds	r3, #1
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f9c:	e002      	b.n	8000fa4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f9      	bne.n	8000f9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff feee 	bl	8000d90 <LL_ADC_IsInternalRegulatorEnabled>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10d      	bne.n	8000fd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fbe:	f043 0210 	orr.w	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff62 	bl	8000ea4 <LL_ADC_REG_IsConversionOngoing>
 8000fe0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f040 8142 	bne.w	8001274 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f040 813e 	bne.w	8001274 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ffc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001000:	f043 0202 	orr.w	r2, r3, #2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fefb 	bl	8000e08 <LL_ADC_IsEnabled>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d141      	bne.n	800109c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001020:	d004      	beq.n	800102c <HAL_ADC_Init+0x114>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a77      	ldr	r2, [pc, #476]	@ (8001204 <HAL_ADC_Init+0x2ec>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d10f      	bne.n	800104c <HAL_ADC_Init+0x134>
 800102c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001030:	f7ff feea 	bl	8000e08 <LL_ADC_IsEnabled>
 8001034:	4604      	mov	r4, r0
 8001036:	4873      	ldr	r0, [pc, #460]	@ (8001204 <HAL_ADC_Init+0x2ec>)
 8001038:	f7ff fee6 	bl	8000e08 <LL_ADC_IsEnabled>
 800103c:	4603      	mov	r3, r0
 800103e:	4323      	orrs	r3, r4
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf0c      	ite	eq
 8001044:	2301      	moveq	r3, #1
 8001046:	2300      	movne	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	e012      	b.n	8001072 <HAL_ADC_Init+0x15a>
 800104c:	486e      	ldr	r0, [pc, #440]	@ (8001208 <HAL_ADC_Init+0x2f0>)
 800104e:	f7ff fedb 	bl	8000e08 <LL_ADC_IsEnabled>
 8001052:	4604      	mov	r4, r0
 8001054:	486d      	ldr	r0, [pc, #436]	@ (800120c <HAL_ADC_Init+0x2f4>)
 8001056:	f7ff fed7 	bl	8000e08 <LL_ADC_IsEnabled>
 800105a:	4603      	mov	r3, r0
 800105c:	431c      	orrs	r4, r3
 800105e:	486c      	ldr	r0, [pc, #432]	@ (8001210 <HAL_ADC_Init+0x2f8>)
 8001060:	f7ff fed2 	bl	8000e08 <LL_ADC_IsEnabled>
 8001064:	4603      	mov	r3, r0
 8001066:	4323      	orrs	r3, r4
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf0c      	ite	eq
 800106c:	2301      	moveq	r3, #1
 800106e:	2300      	movne	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d012      	beq.n	800109c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800107e:	d004      	beq.n	800108a <HAL_ADC_Init+0x172>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a5f      	ldr	r2, [pc, #380]	@ (8001204 <HAL_ADC_Init+0x2ec>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_ADC_Init+0x176>
 800108a:	4a62      	ldr	r2, [pc, #392]	@ (8001214 <HAL_ADC_Init+0x2fc>)
 800108c:	e000      	b.n	8001090 <HAL_ADC_Init+0x178>
 800108e:	4a62      	ldr	r2, [pc, #392]	@ (8001218 <HAL_ADC_Init+0x300>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4619      	mov	r1, r3
 8001096:	4610      	mov	r0, r2
 8001098:	f7ff fcc4 	bl	8000a24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7f5b      	ldrb	r3, [r3, #29]
 80010a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80010ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80010b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d106      	bne.n	80010d8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ce:	3b01      	subs	r3, #1
 80010d0:	045b      	lsls	r3, r3, #17
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d009      	beq.n	80010f4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	4b48      	ldr	r3, [pc, #288]	@ (800121c <HAL_ADC_Init+0x304>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	430b      	orrs	r3, r1
 8001106:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fee5 	bl	8000ef2 <LL_ADC_INJ_IsConversionOngoing>
 8001128:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d17f      	bne.n	8001230 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d17c      	bne.n	8001230 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800113a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001142:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001152:	f023 0302 	bic.w	r3, r3, #2
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	69b9      	ldr	r1, [r7, #24]
 800115c:	430b      	orrs	r3, r1
 800115e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d017      	beq.n	8001198 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001176:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001180:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001184:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6911      	ldr	r1, [r2, #16]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	430b      	orrs	r3, r1
 8001192:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001196:	e013      	b.n	80011c0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80011a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80011b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d12a      	bne.n	8001220 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80011e0:	4311      	orrs	r1, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80011e6:	4311      	orrs	r1, r2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011ec:	430a      	orrs	r2, r1
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	e019      	b.n	8001230 <HAL_ADC_Init+0x318>
 80011fc:	20000000 	.word	0x20000000
 8001200:	053e2d63 	.word	0x053e2d63
 8001204:	50000100 	.word	0x50000100
 8001208:	50000400 	.word	0x50000400
 800120c:	50000500 	.word	0x50000500
 8001210:	50000600 	.word	0x50000600
 8001214:	50000300 	.word	0x50000300
 8001218:	50000700 	.word	0x50000700
 800121c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d10c      	bne.n	8001252 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f023 010f 	bic.w	r1, r3, #15
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001250:	e007      	b.n	8001262 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 020f 	bic.w	r2, r2, #15
 8001260:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001266:	f023 0303 	bic.w	r3, r3, #3
 800126a:	f043 0201 	orr.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001272:	e007      	b.n	8001284 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001278:	f043 0210 	orr.w	r2, r3, #16
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001284:	7ffb      	ldrb	r3, [r7, #31]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	@ 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop

08001290 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012a0:	d004      	beq.n	80012ac <HAL_ADC_Start+0x1c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a67      	ldr	r2, [pc, #412]	@ (8001444 <HAL_ADC_Start+0x1b4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d101      	bne.n	80012b0 <HAL_ADC_Start+0x20>
 80012ac:	4b66      	ldr	r3, [pc, #408]	@ (8001448 <HAL_ADC_Start+0x1b8>)
 80012ae:	e000      	b.n	80012b2 <HAL_ADC_Start+0x22>
 80012b0:	4b66      	ldr	r3, [pc, #408]	@ (800144c <HAL_ADC_Start+0x1bc>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fd16 	bl	8000ce4 <LL_ADC_GetMultimode>
 80012b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fdf0 	bl	8000ea4 <LL_ADC_REG_IsConversionOngoing>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 80b4 	bne.w	8001434 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_ADC_Start+0x4a>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e0af      	b.n	800143a <HAL_ADC_Start+0x1aa>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fefc 	bl	80020e0 <ADC_Enable>
 80012e8:	4603      	mov	r3, r0
 80012ea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 809b 	bne.w	800142a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a4d      	ldr	r2, [pc, #308]	@ (8001444 <HAL_ADC_Start+0x1b4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d009      	beq.n	8001326 <HAL_ADC_Start+0x96>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a4e      	ldr	r2, [pc, #312]	@ (8001450 <HAL_ADC_Start+0x1c0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d002      	beq.n	8001322 <HAL_ADC_Start+0x92>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	e003      	b.n	800132a <HAL_ADC_Start+0x9a>
 8001322:	4b4c      	ldr	r3, [pc, #304]	@ (8001454 <HAL_ADC_Start+0x1c4>)
 8001324:	e001      	b.n	800132a <HAL_ADC_Start+0x9a>
 8001326:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	4293      	cmp	r3, r2
 8001330:	d002      	beq.n	8001338 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800134c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001350:	d106      	bne.n	8001360 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001356:	f023 0206 	bic.w	r2, r3, #6
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	661a      	str	r2, [r3, #96]	@ 0x60
 800135e:	e002      	b.n	8001366 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	221c      	movs	r2, #28
 800136c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a32      	ldr	r2, [pc, #200]	@ (8001444 <HAL_ADC_Start+0x1b4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d009      	beq.n	8001394 <HAL_ADC_Start+0x104>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a32      	ldr	r2, [pc, #200]	@ (8001450 <HAL_ADC_Start+0x1c0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d002      	beq.n	8001390 <HAL_ADC_Start+0x100>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	e003      	b.n	8001398 <HAL_ADC_Start+0x108>
 8001390:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <HAL_ADC_Start+0x1c4>)
 8001392:	e001      	b.n	8001398 <HAL_ADC_Start+0x108>
 8001394:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4293      	cmp	r3, r2
 800139e:	d008      	beq.n	80013b2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d002      	beq.n	80013b2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2b09      	cmp	r3, #9
 80013b0:	d114      	bne.n	80013dc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fd3d 	bl	8000e54 <LL_ADC_REG_StartConversion>
 80013da:	e02d      	b.n	8001438 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a15      	ldr	r2, [pc, #84]	@ (8001444 <HAL_ADC_Start+0x1b4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d009      	beq.n	8001406 <HAL_ADC_Start+0x176>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a16      	ldr	r2, [pc, #88]	@ (8001450 <HAL_ADC_Start+0x1c0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d002      	beq.n	8001402 <HAL_ADC_Start+0x172>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	e003      	b.n	800140a <HAL_ADC_Start+0x17a>
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <HAL_ADC_Start+0x1c4>)
 8001404:	e001      	b.n	800140a <HAL_ADC_Start+0x17a>
 8001406:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800140a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00f      	beq.n	8001438 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800141c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001420:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001428:	e006      	b.n	8001438 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001432:	e001      	b.n	8001438 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001434:	2302      	movs	r3, #2
 8001436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	50000100 	.word	0x50000100
 8001448:	50000300 	.word	0x50000300
 800144c:	50000700 	.word	0x50000700
 8001450:	50000500 	.word	0x50000500
 8001454:	50000400 	.word	0x50000400

08001458 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_ADC_Stop+0x16>
 800146a:	2302      	movs	r3, #2
 800146c:	e023      	b.n	80014b6 <HAL_ADC_Stop+0x5e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001476:	2103      	movs	r1, #3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fd75 	bl	8001f68 <ADC_ConversionStop>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d111      	bne.n	80014ac <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 febf 	bl	800220c <ADC_Disable>
 800148e:	4603      	mov	r3, r0
 8001490:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	f043 0201 	orr.w	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014d2:	d004      	beq.n	80014de <HAL_ADC_PollForConversion+0x1e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a77      	ldr	r2, [pc, #476]	@ (80016b8 <HAL_ADC_PollForConversion+0x1f8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_ADC_PollForConversion+0x22>
 80014de:	4b77      	ldr	r3, [pc, #476]	@ (80016bc <HAL_ADC_PollForConversion+0x1fc>)
 80014e0:	e000      	b.n	80014e4 <HAL_ADC_PollForConversion+0x24>
 80014e2:	4b77      	ldr	r3, [pc, #476]	@ (80016c0 <HAL_ADC_PollForConversion+0x200>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fbfd 	bl	8000ce4 <LL_ADC_GetMultimode>
 80014ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d102      	bne.n	80014fa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80014f4:	2308      	movs	r3, #8
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	e037      	b.n	800156a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b05      	cmp	r3, #5
 8001504:	d002      	beq.n	800150c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b09      	cmp	r3, #9
 800150a:	d111      	bne.n	8001530 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151e:	f043 0220 	orr.w	r2, r3, #32
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0c1      	b.n	80016ae <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800152a:	2304      	movs	r3, #4
 800152c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800152e:	e01c      	b.n	800156a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001538:	d004      	beq.n	8001544 <HAL_ADC_PollForConversion+0x84>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a5e      	ldr	r2, [pc, #376]	@ (80016b8 <HAL_ADC_PollForConversion+0x1f8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d101      	bne.n	8001548 <HAL_ADC_PollForConversion+0x88>
 8001544:	4b5d      	ldr	r3, [pc, #372]	@ (80016bc <HAL_ADC_PollForConversion+0x1fc>)
 8001546:	e000      	b.n	800154a <HAL_ADC_PollForConversion+0x8a>
 8001548:	4b5d      	ldr	r3, [pc, #372]	@ (80016c0 <HAL_ADC_PollForConversion+0x200>)
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fbd8 	bl	8000d00 <LL_ADC_GetMultiDMATransfer>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155a:	f043 0220 	orr.w	r2, r3, #32
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0a3      	b.n	80016ae <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001566:	2304      	movs	r3, #4
 8001568:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800156a:	f7ff fa4f 	bl	8000a0c <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001570:	e021      	b.n	80015b6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d01d      	beq.n	80015b6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800157a:	f7ff fa47 	bl	8000a0c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d302      	bcc.n	8001590 <HAL_ADC_PollForConversion+0xd0>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d112      	bne.n	80015b6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10b      	bne.n	80015b6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a2:	f043 0204 	orr.w	r2, r3, #4
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e07b      	b.n	80016ae <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0d6      	beq.n	8001572 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff faf7 	bl	8000bc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01c      	beq.n	800161a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7f5b      	ldrb	r3, [r3, #29]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d118      	bne.n	800161a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d111      	bne.n	800161a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a26      	ldr	r2, [pc, #152]	@ (80016b8 <HAL_ADC_PollForConversion+0x1f8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d009      	beq.n	8001638 <HAL_ADC_PollForConversion+0x178>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a26      	ldr	r2, [pc, #152]	@ (80016c4 <HAL_ADC_PollForConversion+0x204>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d002      	beq.n	8001634 <HAL_ADC_PollForConversion+0x174>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	e003      	b.n	800163c <HAL_ADC_PollForConversion+0x17c>
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <HAL_ADC_PollForConversion+0x208>)
 8001636:	e001      	b.n	800163c <HAL_ADC_PollForConversion+0x17c>
 8001638:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4293      	cmp	r3, r2
 8001642:	d008      	beq.n	8001656 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b05      	cmp	r3, #5
 800164e:	d002      	beq.n	8001656 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b09      	cmp	r3, #9
 8001654:	d104      	bne.n	8001660 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	e014      	b.n	800168a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <HAL_ADC_PollForConversion+0x1f8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d009      	beq.n	800167e <HAL_ADC_PollForConversion+0x1be>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a15      	ldr	r2, [pc, #84]	@ (80016c4 <HAL_ADC_PollForConversion+0x204>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d002      	beq.n	800167a <HAL_ADC_PollForConversion+0x1ba>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	e003      	b.n	8001682 <HAL_ADC_PollForConversion+0x1c2>
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_ADC_PollForConversion+0x208>)
 800167c:	e001      	b.n	8001682 <HAL_ADC_PollForConversion+0x1c2>
 800167e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001682:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	2b08      	cmp	r3, #8
 800168e:	d104      	bne.n	800169a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2208      	movs	r2, #8
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e008      	b.n	80016ac <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d103      	bne.n	80016ac <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	220c      	movs	r2, #12
 80016aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	50000100 	.word	0x50000100
 80016bc:	50000300 	.word	0x50000300
 80016c0:	50000700 	.word	0x50000700
 80016c4:	50000500 	.word	0x50000500
 80016c8:	50000400 	.word	0x50000400

080016cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0b6      	sub	sp, #216	@ 0xd8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <HAL_ADC_ConfigChannel+0x24>
 8001706:	2302      	movs	r3, #2
 8001708:	f000 bc13 	b.w	8001f32 <HAL_ADC_ConfigChannel+0x84a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fbc3 	bl	8000ea4 <LL_ADC_REG_IsConversionOngoing>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	f040 83f3 	bne.w	8001f0c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	f7ff fa5b 	bl	8000bee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fbb1 	bl	8000ea4 <LL_ADC_REG_IsConversionOngoing>
 8001742:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fbd1 	bl	8000ef2 <LL_ADC_INJ_IsConversionOngoing>
 8001750:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001754:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 81d9 	bne.w	8001b10 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800175e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 81d4 	bne.w	8001b10 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001770:	d10f      	bne.n	8001792 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa62 	bl	8000c46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fa09 	bl	8000ba2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001790:	e00e      	b.n	80017b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	461a      	mov	r2, r3
 80017a0:	f7ff fa51 	bl	8000c46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f9f9 	bl	8000ba2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	08db      	lsrs	r3, r3, #3
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d022      	beq.n	8001818 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6919      	ldr	r1, [r3, #16]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80017e2:	f7ff f953 	bl	8000a8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6919      	ldr	r1, [r3, #16]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	461a      	mov	r2, r3
 80017f4:	f7ff f99f 	bl	8000b36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001804:	2b01      	cmp	r3, #1
 8001806:	d102      	bne.n	800180e <HAL_ADC_ConfigChannel+0x126>
 8001808:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800180c:	e000      	b.n	8001810 <HAL_ADC_ConfigChannel+0x128>
 800180e:	2300      	movs	r3, #0
 8001810:	461a      	mov	r2, r3
 8001812:	f7ff f9ab 	bl	8000b6c <LL_ADC_SetOffsetSaturation>
 8001816:	e17b      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f958 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10a      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x15c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f94d 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	0e9b      	lsrs	r3, r3, #26
 800183e:	f003 021f 	and.w	r2, r3, #31
 8001842:	e01e      	b.n	8001882 <HAL_ADC_ConfigChannel+0x19a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f942 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001866:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800186a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001872:	2320      	movs	r3, #32
 8001874:	e004      	b.n	8001880 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188a:	2b00      	cmp	r3, #0
 800188c:	d105      	bne.n	800189a <HAL_ADC_ConfigChannel+0x1b2>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0e9b      	lsrs	r3, r3, #26
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	e018      	b.n	80018cc <HAL_ADC_ConfigChannel+0x1e4>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80018ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80018b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80018be:	2320      	movs	r3, #32
 80018c0:	e004      	b.n	80018cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80018c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d106      	bne.n	80018de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f911 	bl	8000b00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f8f5 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10a      	bne.n	800190a <HAL_ADC_ConfigChannel+0x222>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f8ea 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	e01e      	b.n	8001948 <HAL_ADC_ConfigChannel+0x260>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2101      	movs	r1, #1
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f8df 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001928:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800192c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001938:	2320      	movs	r3, #32
 800193a:	e004      	b.n	8001946 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800193c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x278>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0e9b      	lsrs	r3, r3, #26
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	e018      	b.n	8001992 <HAL_ADC_ConfigChannel+0x2aa>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001974:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800197c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001984:	2320      	movs	r3, #32
 8001986:	e004      	b.n	8001992 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001988:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001992:	429a      	cmp	r2, r3
 8001994:	d106      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	2101      	movs	r1, #1
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f8ae 	bl	8000b00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2102      	movs	r1, #2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f892 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x2e8>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2102      	movs	r1, #2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f887 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	0e9b      	lsrs	r3, r3, #26
 80019ca:	f003 021f 	and.w	r2, r3, #31
 80019ce:	e01e      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x326>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2102      	movs	r1, #2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f87c 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80019ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80019f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80019fe:	2320      	movs	r3, #32
 8001a00:	e004      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001a02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x33e>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	e016      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x36c>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001a38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001a46:	2320      	movs	r3, #32
 8001a48:	e004      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d106      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2102      	movs	r1, #2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f84d 	bl	8000b00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff f831 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x3aa>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2103      	movs	r1, #3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f826 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	0e9b      	lsrs	r3, r3, #26
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	e017      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x3da>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2103      	movs	r1, #3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f81b 	bl	8000ad4 <LL_ADC_GetOffsetChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001aaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001aac:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001aae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	e003      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d105      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x3f2>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	0e9b      	lsrs	r3, r3, #26
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	e011      	b.n	8001afe <HAL_ADC_ConfigChannel+0x416>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001af2:	2320      	movs	r3, #32
 8001af4:	e003      	b.n	8001afe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d106      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	2103      	movs	r1, #3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fff8 	bl	8000b00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f977 	bl	8000e08 <LL_ADC_IsEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 813d 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6819      	ldr	r1, [r3, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f7ff f8b4 	bl	8000c9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4aa2      	ldr	r2, [pc, #648]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x6dc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	f040 812e 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10b      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x480>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0e9b      	lsrs	r3, r3, #26
 8001b56:	3301      	adds	r3, #1
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	bf94      	ite	ls
 8001b60:	2301      	movls	r3, #1
 8001b62:	2300      	movhi	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e019      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x4b4>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001b76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b78:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001b80:	2320      	movs	r3, #32
 8001b82:	e003      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001b84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	bf94      	ite	ls
 8001b96:	2301      	movls	r3, #1
 8001b98:	2300      	movhi	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d079      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d107      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x4d4>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0e9b      	lsrs	r3, r3, #26
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	069b      	lsls	r3, r3, #26
 8001bb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bba:	e015      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x500>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bcc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e003      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	069b      	lsls	r3, r3, #26
 8001be4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x520>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0e9b      	lsrs	r3, r3, #26
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	e017      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x550>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001c20:	2320      	movs	r3, #32
 8001c22:	e003      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	ea42 0103 	orr.w	r1, r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10a      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x576>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	051b      	lsls	r3, r3, #20
 8001c5c:	e018      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x5a8>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001c76:	2320      	movs	r3, #32
 8001c78:	e003      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c90:	430b      	orrs	r3, r1
 8001c92:	e07e      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x5c8>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	069b      	lsls	r3, r3, #26
 8001caa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cae:	e015      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x5f4>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	e003      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	069b      	lsls	r3, r3, #26
 8001cd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x614>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	e017      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x644>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	61fb      	str	r3, [r7, #28]
  return result;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e003      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	ea42 0103 	orr.w	r1, r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10d      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x670>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0e9b      	lsrs	r3, r3, #26
 8001d42:	3301      	adds	r3, #1
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b1e      	subs	r3, #30
 8001d50:	051b      	lsls	r3, r3, #20
 8001d52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	e01b      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x6a8>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	613b      	str	r3, [r7, #16]
  return result;
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	e003      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f003 021f 	and.w	r2, r3, #31
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	3b1e      	subs	r3, #30
 8001d8a:	051b      	lsls	r3, r3, #20
 8001d8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7fe ff55 	bl	8000c46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x6e0>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80be 	beq.w	8001f26 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db2:	d004      	beq.n	8001dbe <HAL_ADC_ConfigChannel+0x6d6>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <HAL_ADC_ConfigChannel+0x6e4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x6ec>
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x6e8>)
 8001dc0:	e009      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x6ee>
 8001dc2:	bf00      	nop
 8001dc4:	407f0000 	.word	0x407f0000
 8001dc8:	80080000 	.word	0x80080000
 8001dcc:	50000100 	.word	0x50000100
 8001dd0:	50000300 	.word	0x50000300
 8001dd4:	4b59      	ldr	r3, [pc, #356]	@ (8001f3c <HAL_ADC_ConfigChannel+0x854>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fe4a 	bl	8000a70 <LL_ADC_GetCommonPathInternalCh>
 8001ddc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a56      	ldr	r2, [pc, #344]	@ (8001f40 <HAL_ADC_ConfigChannel+0x858>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0x70c>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a55      	ldr	r2, [pc, #340]	@ (8001f44 <HAL_ADC_ConfigChannel+0x85c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d13a      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001df8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d134      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e08:	d005      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x72e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a4e      	ldr	r2, [pc, #312]	@ (8001f48 <HAL_ADC_ConfigChannel+0x860>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	f040 8085 	bne.w	8001f20 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e1e:	d004      	beq.n	8001e2a <HAL_ADC_ConfigChannel+0x742>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a49      	ldr	r2, [pc, #292]	@ (8001f4c <HAL_ADC_ConfigChannel+0x864>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x746>
 8001e2a:	4a49      	ldr	r2, [pc, #292]	@ (8001f50 <HAL_ADC_ConfigChannel+0x868>)
 8001e2c:	e000      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x748>
 8001e2e:	4a43      	ldr	r2, [pc, #268]	@ (8001f3c <HAL_ADC_ConfigChannel+0x854>)
 8001e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f7fe fe05 	bl	8000a4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e40:	4b44      	ldr	r3, [pc, #272]	@ (8001f54 <HAL_ADC_ConfigChannel+0x86c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	4a44      	ldr	r2, [pc, #272]	@ (8001f58 <HAL_ADC_ConfigChannel+0x870>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e5a:	e002      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f9      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e68:	e05a      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f5c <HAL_ADC_ConfigChannel+0x874>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d125      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d11f      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a31      	ldr	r2, [pc, #196]	@ (8001f4c <HAL_ADC_ConfigChannel+0x864>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d104      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x7ac>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a34      	ldr	r2, [pc, #208]	@ (8001f60 <HAL_ADC_ConfigChannel+0x878>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d047      	beq.n	8001f24 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_ConfigChannel+0x7c0>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <HAL_ADC_ConfigChannel+0x864>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x7c4>
 8001ea8:	4a29      	ldr	r2, [pc, #164]	@ (8001f50 <HAL_ADC_ConfigChannel+0x868>)
 8001eaa:	e000      	b.n	8001eae <HAL_ADC_ConfigChannel+0x7c6>
 8001eac:	4a23      	ldr	r2, [pc, #140]	@ (8001f3c <HAL_ADC_ConfigChannel+0x854>)
 8001eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f7fe fdc6 	bl	8000a4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ebe:	e031      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a27      	ldr	r2, [pc, #156]	@ (8001f64 <HAL_ADC_ConfigChannel+0x87c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d12d      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d127      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1c      	ldr	r2, [pc, #112]	@ (8001f4c <HAL_ADC_ConfigChannel+0x864>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d022      	beq.n	8001f26 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ee8:	d004      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x80c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a17      	ldr	r2, [pc, #92]	@ (8001f4c <HAL_ADC_ConfigChannel+0x864>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x810>
 8001ef4:	4a16      	ldr	r2, [pc, #88]	@ (8001f50 <HAL_ADC_ConfigChannel+0x868>)
 8001ef6:	e000      	b.n	8001efa <HAL_ADC_ConfigChannel+0x812>
 8001ef8:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <HAL_ADC_ConfigChannel+0x854>)
 8001efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001efe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f7fe fda0 	bl	8000a4a <LL_ADC_SetCommonPathInternalCh>
 8001f0a:	e00c      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001f1e:	e002      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f20:	bf00      	nop
 8001f22:	e000      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	37d8      	adds	r7, #216	@ 0xd8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	50000700 	.word	0x50000700
 8001f40:	c3210000 	.word	0xc3210000
 8001f44:	90c00010 	.word	0x90c00010
 8001f48:	50000600 	.word	0x50000600
 8001f4c:	50000100 	.word	0x50000100
 8001f50:	50000300 	.word	0x50000300
 8001f54:	20000000 	.word	0x20000000
 8001f58:	053e2d63 	.word	0x053e2d63
 8001f5c:	c7520000 	.word	0xc7520000
 8001f60:	50000500 	.word	0x50000500
 8001f64:	cb840000 	.word	0xcb840000

08001f68 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe ff90 	bl	8000ea4 <LL_ADC_REG_IsConversionOngoing>
 8001f84:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ffb1 	bl	8000ef2 <LL_ADC_INJ_IsConversionOngoing>
 8001f90:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d103      	bne.n	8001fa0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8098 	beq.w	80020d0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d02a      	beq.n	8002004 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7f5b      	ldrb	r3, [r3, #29]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d126      	bne.n	8002004 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7f1b      	ldrb	r3, [r3, #28]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d122      	bne.n	8002004 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001fc2:	e014      	b.n	8001fee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	4a45      	ldr	r2, [pc, #276]	@ (80020dc <ADC_ConversionStop+0x174>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d90d      	bls.n	8001fe8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd0:	f043 0210 	orr.w	r2, r3, #16
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e074      	b.n	80020d2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	3301      	adds	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff8:	2b40      	cmp	r3, #64	@ 0x40
 8001ffa:	d1e3      	bne.n	8001fc4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2240      	movs	r2, #64	@ 0x40
 8002002:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d014      	beq.n	8002034 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe ff48 	bl	8000ea4 <LL_ADC_REG_IsConversionOngoing>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe ff05 	bl	8000e2e <LL_ADC_IsDisableOngoing>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d104      	bne.n	8002034 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe ff24 	bl	8000e7c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d014      	beq.n	8002064 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe ff57 	bl	8000ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe feed 	bl	8000e2e <LL_ADC_IsDisableOngoing>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d104      	bne.n	8002064 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe ff33 	bl	8000eca <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d005      	beq.n	8002076 <ADC_ConversionStop+0x10e>
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d105      	bne.n	800207c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002070:	230c      	movs	r3, #12
 8002072:	617b      	str	r3, [r7, #20]
        break;
 8002074:	e005      	b.n	8002082 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002076:	2308      	movs	r3, #8
 8002078:	617b      	str	r3, [r7, #20]
        break;
 800207a:	e002      	b.n	8002082 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800207c:	2304      	movs	r3, #4
 800207e:	617b      	str	r3, [r7, #20]
        break;
 8002080:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002082:	f7fe fcc3 	bl	8000a0c <HAL_GetTick>
 8002086:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002088:	e01b      	b.n	80020c2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800208a:	f7fe fcbf 	bl	8000a0c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b05      	cmp	r3, #5
 8002096:	d914      	bls.n	80020c2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00d      	beq.n	80020c2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e007      	b.n	80020d2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1dc      	bne.n	800208a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	a33fffff 	.word	0xa33fffff

080020e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fe89 	bl	8000e08 <LL_ADC_IsEnabled>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d176      	bne.n	80021ea <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	4b3c      	ldr	r3, [pc, #240]	@ (80021f4 <ADC_Enable+0x114>)
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00d      	beq.n	8002126 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	f043 0210 	orr.w	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e062      	b.n	80021ec <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fe44 	bl	8000db8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002138:	d004      	beq.n	8002144 <ADC_Enable+0x64>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2e      	ldr	r2, [pc, #184]	@ (80021f8 <ADC_Enable+0x118>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <ADC_Enable+0x68>
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <ADC_Enable+0x11c>)
 8002146:	e000      	b.n	800214a <ADC_Enable+0x6a>
 8002148:	4b2d      	ldr	r3, [pc, #180]	@ (8002200 <ADC_Enable+0x120>)
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fc90 	bl	8000a70 <LL_ADC_GetCommonPathInternalCh>
 8002150:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002156:	2b00      	cmp	r3, #0
 8002158:	d013      	beq.n	8002182 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800215a:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <ADC_Enable+0x124>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	099b      	lsrs	r3, r3, #6
 8002160:	4a29      	ldr	r2, [pc, #164]	@ (8002208 <ADC_Enable+0x128>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002174:	e002      	b.n	800217c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3b01      	subs	r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f9      	bne.n	8002176 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002182:	f7fe fc43 	bl	8000a0c <HAL_GetTick>
 8002186:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002188:	e028      	b.n	80021dc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fe3a 	bl	8000e08 <LL_ADC_IsEnabled>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d104      	bne.n	80021a4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fe0a 	bl	8000db8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021a4:	f7fe fc32 	bl	8000a0c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d914      	bls.n	80021dc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d00d      	beq.n	80021dc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	f043 0210 	orr.w	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e007      	b.n	80021ec <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d1cf      	bne.n	800218a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	8000003f 	.word	0x8000003f
 80021f8:	50000100 	.word	0x50000100
 80021fc:	50000300 	.word	0x50000300
 8002200:	50000700 	.word	0x50000700
 8002204:	20000000 	.word	0x20000000
 8002208:	053e2d63 	.word	0x053e2d63

0800220c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fe08 	bl	8000e2e <LL_ADC_IsDisableOngoing>
 800221e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fdef 	bl	8000e08 <LL_ADC_IsEnabled>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d047      	beq.n	80022c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d144      	bne.n	80022c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030d 	and.w	r3, r3, #13
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10c      	bne.n	800225e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fdc9 	bl	8000de0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2203      	movs	r2, #3
 8002254:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002256:	f7fe fbd9 	bl	8000a0c <HAL_GetTick>
 800225a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800225c:	e029      	b.n	80022b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e023      	b.n	80022c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800227a:	f7fe fbc7 	bl	8000a0c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d914      	bls.n	80022b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e007      	b.n	80022c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1dc      	bne.n	800227a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <LL_ADC_IsEnabled>:
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <LL_ADC_IsEnabled+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_ADC_IsEnabled+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_REG_IsConversionOngoing>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b04      	cmp	r3, #4
 8002302:	d101      	bne.n	8002308 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b0a1      	sub	sp, #132	@ 0x84
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002332:	2302      	movs	r3, #2
 8002334:	e0e7      	b.n	8002506 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800233e:	2300      	movs	r3, #0
 8002340:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002342:	2300      	movs	r3, #0
 8002344:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800234e:	d102      	bne.n	8002356 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002350:	4b6f      	ldr	r3, [pc, #444]	@ (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	e009      	b.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6e      	ldr	r2, [pc, #440]	@ (8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d102      	bne.n	8002366 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002360:	4b6d      	ldr	r3, [pc, #436]	@ (8002518 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	e001      	b.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10b      	bne.n	8002388 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0be      	b.n	8002506 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ffb0 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 8002390:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ffaa 	bl	80022f0 <LL_ADC_REG_IsConversionOngoing>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 80a0 	bne.w	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80023a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 809c 	bne.w	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023b4:	d004      	beq.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a55      	ldr	r2, [pc, #340]	@ (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d101      	bne.n	80023c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023c0:	4b56      	ldr	r3, [pc, #344]	@ (800251c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80023c2:	e000      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023c4:	4b56      	ldr	r3, [pc, #344]	@ (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80023c6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d04b      	beq.n	8002468 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023e2:	035b      	lsls	r3, r3, #13
 80023e4:	430b      	orrs	r3, r1
 80023e6:	431a      	orrs	r2, r3
 80023e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f4:	d004      	beq.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a45      	ldr	r2, [pc, #276]	@ (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10f      	bne.n	8002420 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002400:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002404:	f7ff ff61 	bl	80022ca <LL_ADC_IsEnabled>
 8002408:	4604      	mov	r4, r0
 800240a:	4841      	ldr	r0, [pc, #260]	@ (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800240c:	f7ff ff5d 	bl	80022ca <LL_ADC_IsEnabled>
 8002410:	4603      	mov	r3, r0
 8002412:	4323      	orrs	r3, r4
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e012      	b.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002420:	483c      	ldr	r0, [pc, #240]	@ (8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002422:	f7ff ff52 	bl	80022ca <LL_ADC_IsEnabled>
 8002426:	4604      	mov	r4, r0
 8002428:	483b      	ldr	r0, [pc, #236]	@ (8002518 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800242a:	f7ff ff4e 	bl	80022ca <LL_ADC_IsEnabled>
 800242e:	4603      	mov	r3, r0
 8002430:	431c      	orrs	r4, r3
 8002432:	483c      	ldr	r0, [pc, #240]	@ (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002434:	f7ff ff49 	bl	80022ca <LL_ADC_IsEnabled>
 8002438:	4603      	mov	r3, r0
 800243a:	4323      	orrs	r3, r4
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d056      	beq.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800244a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002452:	f023 030f 	bic.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	6811      	ldr	r1, [r2, #0]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	6892      	ldr	r2, [r2, #8]
 800245e:	430a      	orrs	r2, r1
 8002460:	431a      	orrs	r2, r3
 8002462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002464:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002466:	e047      	b.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002468:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002470:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002472:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800247c:	d004      	beq.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a23      	ldr	r2, [pc, #140]	@ (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d10f      	bne.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002488:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800248c:	f7ff ff1d 	bl	80022ca <LL_ADC_IsEnabled>
 8002490:	4604      	mov	r4, r0
 8002492:	481f      	ldr	r0, [pc, #124]	@ (8002510 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002494:	f7ff ff19 	bl	80022ca <LL_ADC_IsEnabled>
 8002498:	4603      	mov	r3, r0
 800249a:	4323      	orrs	r3, r4
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e012      	b.n	80024ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80024a8:	481a      	ldr	r0, [pc, #104]	@ (8002514 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024aa:	f7ff ff0e 	bl	80022ca <LL_ADC_IsEnabled>
 80024ae:	4604      	mov	r4, r0
 80024b0:	4819      	ldr	r0, [pc, #100]	@ (8002518 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024b2:	f7ff ff0a 	bl	80022ca <LL_ADC_IsEnabled>
 80024b6:	4603      	mov	r3, r0
 80024b8:	431c      	orrs	r4, r3
 80024ba:	481a      	ldr	r0, [pc, #104]	@ (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80024bc:	f7ff ff05 	bl	80022ca <LL_ADC_IsEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4323      	orrs	r3, r4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d012      	beq.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024da:	f023 030f 	bic.w	r3, r3, #15
 80024de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80024e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024e2:	e009      	b.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e8:	f043 0220 	orr.w	r2, r3, #32
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80024f6:	e000      	b.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002502:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002506:	4618      	mov	r0, r3
 8002508:	3784      	adds	r7, #132	@ 0x84
 800250a:	46bd      	mov	sp, r7
 800250c:	bd90      	pop	{r4, r7, pc}
 800250e:	bf00      	nop
 8002510:	50000100 	.word	0x50000100
 8002514:	50000400 	.word	0x50000400
 8002518:	50000500 	.word	0x50000500
 800251c:	50000300 	.word	0x50000300
 8002520:	50000700 	.word	0x50000700
 8002524:	50000600 	.word	0x50000600

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	@ (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	@ (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	@ 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002658:	d301      	bcc.n	800265e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265a:	2301      	movs	r3, #1
 800265c:	e00f      	b.n	800267e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <SysTick_Config+0x40>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002666:	210f      	movs	r1, #15
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f7ff ff8e 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <SysTick_Config+0x40>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <SysTick_Config+0x40>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff47 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b0:	f7ff ff5e 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff ff90 	bl	80025e0 <NVIC_EncodePriority>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff5f 	bl	800258c <__NVIC_SetPriority>
}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffb2 	bl	8002648 <SysTick_Config>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026fe:	e15a      	b.n	80029b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2101      	movs	r1, #1
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 814c 	beq.w	80029b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d005      	beq.n	8002730 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800272c:	2b02      	cmp	r3, #2
 800272e:	d130      	bne.n	8002792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002766:	2201      	movs	r2, #1
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 0201 	and.w	r2, r3, #1
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b03      	cmp	r3, #3
 800279c:	d017      	beq.n	80027ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d123      	bne.n	8002822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	08da      	lsrs	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3208      	adds	r2, #8
 800281c:	6939      	ldr	r1, [r7, #16]
 800281e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0203 	and.w	r2, r3, #3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80a6 	beq.w	80029b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002864:	4b5b      	ldr	r3, [pc, #364]	@ (80029d4 <HAL_GPIO_Init+0x2e4>)
 8002866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002868:	4a5a      	ldr	r2, [pc, #360]	@ (80029d4 <HAL_GPIO_Init+0x2e4>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002870:	4b58      	ldr	r3, [pc, #352]	@ (80029d4 <HAL_GPIO_Init+0x2e4>)
 8002872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800287c:	4a56      	ldr	r2, [pc, #344]	@ (80029d8 <HAL_GPIO_Init+0x2e8>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028a6:	d01f      	beq.n	80028e8 <HAL_GPIO_Init+0x1f8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a4c      	ldr	r2, [pc, #304]	@ (80029dc <HAL_GPIO_Init+0x2ec>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d019      	beq.n	80028e4 <HAL_GPIO_Init+0x1f4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a4b      	ldr	r2, [pc, #300]	@ (80029e0 <HAL_GPIO_Init+0x2f0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d013      	beq.n	80028e0 <HAL_GPIO_Init+0x1f0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a4a      	ldr	r2, [pc, #296]	@ (80029e4 <HAL_GPIO_Init+0x2f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00d      	beq.n	80028dc <HAL_GPIO_Init+0x1ec>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a49      	ldr	r2, [pc, #292]	@ (80029e8 <HAL_GPIO_Init+0x2f8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <HAL_GPIO_Init+0x1e8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a48      	ldr	r2, [pc, #288]	@ (80029ec <HAL_GPIO_Init+0x2fc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_GPIO_Init+0x1e4>
 80028d0:	2305      	movs	r3, #5
 80028d2:	e00a      	b.n	80028ea <HAL_GPIO_Init+0x1fa>
 80028d4:	2306      	movs	r3, #6
 80028d6:	e008      	b.n	80028ea <HAL_GPIO_Init+0x1fa>
 80028d8:	2304      	movs	r3, #4
 80028da:	e006      	b.n	80028ea <HAL_GPIO_Init+0x1fa>
 80028dc:	2303      	movs	r3, #3
 80028de:	e004      	b.n	80028ea <HAL_GPIO_Init+0x1fa>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e002      	b.n	80028ea <HAL_GPIO_Init+0x1fa>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_GPIO_Init+0x1fa>
 80028e8:	2300      	movs	r3, #0
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	f002 0203 	and.w	r2, r2, #3
 80028f0:	0092      	lsls	r2, r2, #2
 80028f2:	4093      	lsls	r3, r2
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028fa:	4937      	ldr	r1, [pc, #220]	@ (80029d8 <HAL_GPIO_Init+0x2e8>)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002908:	4b39      	ldr	r3, [pc, #228]	@ (80029f0 <HAL_GPIO_Init+0x300>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800292c:	4a30      	ldr	r2, [pc, #192]	@ (80029f0 <HAL_GPIO_Init+0x300>)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002932:	4b2f      	ldr	r3, [pc, #188]	@ (80029f0 <HAL_GPIO_Init+0x300>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002956:	4a26      	ldr	r2, [pc, #152]	@ (80029f0 <HAL_GPIO_Init+0x300>)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800295c:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <HAL_GPIO_Init+0x300>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	43db      	mvns	r3, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002980:	4a1b      	ldr	r2, [pc, #108]	@ (80029f0 <HAL_GPIO_Init+0x300>)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002986:	4b1a      	ldr	r3, [pc, #104]	@ (80029f0 <HAL_GPIO_Init+0x300>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029aa:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <HAL_GPIO_Init+0x300>)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3301      	adds	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f47f ae9d 	bne.w	8002700 <HAL_GPIO_Init+0x10>
  }
}
 80029c6:	bf00      	nop
 80029c8:	bf00      	nop
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010000 	.word	0x40010000
 80029dc:	48000400 	.word	0x48000400
 80029e0:	48000800 	.word	0x48000800
 80029e4:	48000c00 	.word	0x48000c00
 80029e8:	48001000 	.word	0x48001000
 80029ec:	48001400 	.word	0x48001400
 80029f0:	40010400 	.word	0x40010400

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d141      	bne.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a32:	4b4b      	ldr	r3, [pc, #300]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3e:	d131      	bne.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a40:	4b47      	ldr	r3, [pc, #284]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a46:	4a46      	ldr	r2, [pc, #280]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a50:	4b43      	ldr	r3, [pc, #268]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a58:	4a41      	ldr	r2, [pc, #260]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a60:	4b40      	ldr	r3, [pc, #256]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2232      	movs	r2, #50	@ 0x32
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	0c9b      	lsrs	r3, r3, #18
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a76:	e002      	b.n	8002a7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a7e:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a8a:	d102      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f2      	bne.n	8002a78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a92:	4b33      	ldr	r3, [pc, #204]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a9e:	d158      	bne.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e057      	b.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ab0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ab4:	e04d      	b.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002abc:	d141      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002abe:	4b28      	ldr	r3, [pc, #160]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aca:	d131      	bne.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002acc:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ad2:	4a23      	ldr	r2, [pc, #140]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002adc:	4b20      	ldr	r3, [pc, #128]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2232      	movs	r2, #50	@ 0x32
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	0c9b      	lsrs	r3, r3, #18
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b02:	e002      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0a:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b16:	d102      	bne.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f2      	bne.n	8002b04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b1e:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2a:	d112      	bne.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e011      	b.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b36:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b40:	e007      	b.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b42:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b4a:	4a05      	ldr	r2, [pc, #20]	@ (8002b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40007000 	.word	0x40007000
 8002b64:	20000000 	.word	0x20000000
 8002b68:	431bde83 	.word	0x431bde83

08002b6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b7a:	6093      	str	r3, [r2, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e2fe      	b.n	800319c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d075      	beq.n	8002c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4b97      	ldr	r3, [pc, #604]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4b94      	ldr	r3, [pc, #592]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b0c      	cmp	r3, #12
 8002bc2:	d102      	bne.n	8002bca <HAL_RCC_OscConfig+0x3e>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x44>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4b8d      	ldr	r3, [pc, #564]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x108>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d157      	bne.n	8002c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e2d9      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCC_OscConfig+0x74>
 8002bf2:	4b85      	ldr	r3, [pc, #532]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a84      	ldr	r2, [pc, #528]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e01d      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b7c      	ldr	r3, [pc, #496]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c24:	4b78      	ldr	r3, [pc, #480]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a77      	ldr	r2, [pc, #476]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b75      	ldr	r3, [pc, #468]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a74      	ldr	r2, [pc, #464]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fd fee2 	bl	8000a0c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fd fede 	bl	8000a0c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	@ 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e29e      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0xc0>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fd fece 	bl	8000a0c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fd feca 	bl	8000a0c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	@ 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e28a      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c86:	4b60      	ldr	r3, [pc, #384]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0xe8>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d075      	beq.n	8002d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca2:	4b59      	ldr	r3, [pc, #356]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cac:	4b56      	ldr	r3, [pc, #344]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d102      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x136>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x13c>
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d11f      	bne.n	8002d08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x154>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e25d      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b49      	ldr	r3, [pc, #292]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	4946      	ldr	r1, [pc, #280]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cf4:	4b45      	ldr	r3, [pc, #276]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fe3b 	bl	8000974 <HAL_InitTick>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d043      	beq.n	8002d8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e249      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d023      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b3d      	ldr	r3, [pc, #244]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3c      	ldr	r2, [pc, #240]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fd fe76 	bl	8000a0c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fd fe72 	bl	8000a0c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e232      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d36:	4b34      	ldr	r3, [pc, #208]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b31      	ldr	r3, [pc, #196]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	492d      	ldr	r1, [pc, #180]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
 8002d56:	e01a      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d58:	4b2b      	ldr	r3, [pc, #172]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fd fe52 	bl	8000a0c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fd fe4e 	bl	8000a0c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e20e      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d7e:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1e0>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d041      	beq.n	8002e1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da8:	4a17      	ldr	r2, [pc, #92]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fd fe2b 	bl	8000a0c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fd fe27 	bl	8000a0c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e1e7      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0ef      	beq.n	8002dba <HAL_RCC_OscConfig+0x22e>
 8002dda:	e020      	b.n	8002e1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de2:	4a09      	ldr	r2, [pc, #36]	@ (8002e08 <HAL_RCC_OscConfig+0x27c>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fd fe0e 	bl	8000a0c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df2:	e00d      	b.n	8002e10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fd fe0a 	bl	8000a0c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d906      	bls.n	8002e10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e1ca      	b.n	800319c <HAL_RCC_OscConfig+0x610>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e10:	4b8c      	ldr	r3, [pc, #560]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ea      	bne.n	8002df4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80a6 	beq.w	8002f78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e30:	4b84      	ldr	r3, [pc, #528]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2b4>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x2b6>
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b7f      	ldr	r3, [pc, #508]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e52:	4b7c      	ldr	r3, [pc, #496]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e62:	4b79      	ldr	r3, [pc, #484]	@ (8003048 <HAL_RCC_OscConfig+0x4bc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e6e:	4b76      	ldr	r3, [pc, #472]	@ (8003048 <HAL_RCC_OscConfig+0x4bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a75      	ldr	r2, [pc, #468]	@ (8003048 <HAL_RCC_OscConfig+0x4bc>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7fd fdc7 	bl	8000a0c <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7fd fdc3 	bl	8000a0c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e183      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e94:	4b6c      	ldr	r3, [pc, #432]	@ (8003048 <HAL_RCC_OscConfig+0x4bc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d108      	bne.n	8002eba <HAL_RCC_OscConfig+0x32e>
 8002ea8:	4b66      	ldr	r3, [pc, #408]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	4a65      	ldr	r2, [pc, #404]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eb8:	e024      	b.n	8002f04 <HAL_RCC_OscConfig+0x378>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d110      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x358>
 8002ec2:	4b60      	ldr	r3, [pc, #384]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec8:	4a5e      	ldr	r2, [pc, #376]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed8:	4a5a      	ldr	r2, [pc, #360]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee2:	e00f      	b.n	8002f04 <HAL_RCC_OscConfig+0x378>
 8002ee4:	4b57      	ldr	r3, [pc, #348]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eea:	4a56      	ldr	r2, [pc, #344]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ef4:	4b53      	ldr	r3, [pc, #332]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efa:	4a52      	ldr	r2, [pc, #328]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d016      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fd fd7e 	bl	8000a0c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fd fd7a 	bl	8000a0c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e138      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2a:	4b46      	ldr	r3, [pc, #280]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ed      	beq.n	8002f14 <HAL_RCC_OscConfig+0x388>
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fd fd67 	bl	8000a0c <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fd fd63 	bl	8000a0c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e121      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f58:	4b3a      	ldr	r3, [pc, #232]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ed      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b35      	ldr	r3, [pc, #212]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	4a34      	ldr	r2, [pc, #208]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d03c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f92:	4a2c      	ldr	r2, [pc, #176]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fd fd36 	bl	8000a0c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa4:	f7fd fd32 	bl	8000a0c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0f2      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb6:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ef      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x418>
 8002fc4:	e01b      	b.n	8002ffe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7fd fd19 	bl	8000a0c <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fde:	f7fd fd15 	bl	8000a0c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e0d5      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff0:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8002ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1ef      	bne.n	8002fde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80c9 	beq.w	800319a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003008:	4b0e      	ldr	r3, [pc, #56]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b0c      	cmp	r3, #12
 8003012:	f000 8083 	beq.w	800311c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d15e      	bne.n	80030dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b09      	ldr	r3, [pc, #36]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a08      	ldr	r2, [pc, #32]	@ (8003044 <HAL_RCC_OscConfig+0x4b8>)
 8003024:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fd fcef 	bl	8000a0c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003030:	e00c      	b.n	800304c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003032:	f7fd fceb 	bl	8000a0c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d905      	bls.n	800304c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0ab      	b.n	800319c <HAL_RCC_OscConfig+0x610>
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	4b55      	ldr	r3, [pc, #340]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1ec      	bne.n	8003032 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003058:	4b52      	ldr	r3, [pc, #328]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4b52      	ldr	r3, [pc, #328]	@ (80031a8 <HAL_RCC_OscConfig+0x61c>)
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6a11      	ldr	r1, [r2, #32]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003068:	3a01      	subs	r2, #1
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	4311      	orrs	r1, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003072:	0212      	lsls	r2, r2, #8
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800307a:	0852      	lsrs	r2, r2, #1
 800307c:	3a01      	subs	r2, #1
 800307e:	0552      	lsls	r2, r2, #21
 8003080:	4311      	orrs	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003086:	0852      	lsrs	r2, r2, #1
 8003088:	3a01      	subs	r2, #1
 800308a:	0652      	lsls	r2, r2, #25
 800308c:	4311      	orrs	r1, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003092:	06d2      	lsls	r2, r2, #27
 8003094:	430a      	orrs	r2, r1
 8003096:	4943      	ldr	r1, [pc, #268]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003098:	4313      	orrs	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309c:	4b41      	ldr	r3, [pc, #260]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a40      	ldr	r2, [pc, #256]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a8:	4b3e      	ldr	r3, [pc, #248]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a3d      	ldr	r2, [pc, #244]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fd fcaa 	bl	8000a0c <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fd fca6 	bl	8000a0c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e066      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ce:	4b35      	ldr	r3, [pc, #212]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x530>
 80030da:	e05e      	b.n	800319a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030dc:	4b31      	ldr	r3, [pc, #196]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 80030e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fd fc90 	bl	8000a0c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fd fc8c 	bl	8000a0c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e04c      	b.n	800319c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003102:	4b28      	ldr	r3, [pc, #160]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800310e:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	4924      	ldr	r1, [pc, #144]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 8003114:	4b25      	ldr	r3, [pc, #148]	@ (80031ac <HAL_RCC_OscConfig+0x620>)
 8003116:	4013      	ands	r3, r2
 8003118:	60cb      	str	r3, [r1, #12]
 800311a:	e03e      	b.n	800319a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e039      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003128:	4b1e      	ldr	r3, [pc, #120]	@ (80031a4 <HAL_RCC_OscConfig+0x618>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	429a      	cmp	r2, r3
 800313a:	d12c      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	3b01      	subs	r3, #1
 8003148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d123      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d11b      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d113      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	3b01      	subs	r3, #1
 800317c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d109      	bne.n	8003196 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	3b01      	subs	r3, #1
 8003190:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	019f800c 	.word	0x019f800c
 80031ac:	feeefffc 	.word	0xfeeefffc

080031b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e11e      	b.n	8003406 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b91      	ldr	r3, [pc, #580]	@ (8003410 <HAL_RCC_ClockConfig+0x260>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d910      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b8e      	ldr	r3, [pc, #568]	@ (8003410 <HAL_RCC_ClockConfig+0x260>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 020f 	bic.w	r2, r3, #15
 80031de:	498c      	ldr	r1, [pc, #560]	@ (8003410 <HAL_RCC_ClockConfig+0x260>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b8a      	ldr	r3, [pc, #552]	@ (8003410 <HAL_RCC_ClockConfig+0x260>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e106      	b.n	8003406 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d073      	beq.n	80032ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d129      	bne.n	8003260 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320c:	4b81      	ldr	r3, [pc, #516]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0f4      	b.n	8003406 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800321c:	f000 f966 	bl	80034ec <RCC_GetSysClockFreqFromPLLSource>
 8003220:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4a7c      	ldr	r2, [pc, #496]	@ (8003418 <HAL_RCC_ClockConfig+0x268>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d93f      	bls.n	80032aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800322a:	4b7a      	ldr	r3, [pc, #488]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800323e:	2b00      	cmp	r3, #0
 8003240:	d033      	beq.n	80032aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003246:	2b00      	cmp	r3, #0
 8003248:	d12f      	bne.n	80032aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800324a:	4b72      	ldr	r3, [pc, #456]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003252:	4a70      	ldr	r2, [pc, #448]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 8003254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003258:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e024      	b.n	80032aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d107      	bne.n	8003278 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003268:	4b6a      	ldr	r3, [pc, #424]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0c6      	b.n	8003406 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003278:	4b66      	ldr	r3, [pc, #408]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0be      	b.n	8003406 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003288:	f000 f8ce 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 800328c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4a61      	ldr	r2, [pc, #388]	@ (8003418 <HAL_RCC_ClockConfig+0x268>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d909      	bls.n	80032aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003296:	4b5f      	ldr	r3, [pc, #380]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800329e:	4a5d      	ldr	r2, [pc, #372]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 80032a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032a6:	2380      	movs	r3, #128	@ 0x80
 80032a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4957      	ldr	r1, [pc, #348]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fd fba6 	bl	8000a0c <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fd fba2 	bl	8000a0c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e095      	b.n	8003406 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b4e      	ldr	r3, [pc, #312]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d023      	beq.n	8003340 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003304:	4b43      	ldr	r3, [pc, #268]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a42      	ldr	r2, [pc, #264]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800330a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800330e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800331c:	4b3d      	ldr	r3, [pc, #244]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003324:	4a3b      	ldr	r2, [pc, #236]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 8003326:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800332a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b39      	ldr	r3, [pc, #228]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4936      	ldr	r1, [pc, #216]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
 800333e:	e008      	b.n	8003352 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b80      	cmp	r3, #128	@ 0x80
 8003344:	d105      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003346:	4b33      	ldr	r3, [pc, #204]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	4a32      	ldr	r2, [pc, #200]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 800334c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003350:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003352:	4b2f      	ldr	r3, [pc, #188]	@ (8003410 <HAL_RCC_ClockConfig+0x260>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d21d      	bcs.n	800339c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003360:	4b2b      	ldr	r3, [pc, #172]	@ (8003410 <HAL_RCC_ClockConfig+0x260>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 020f 	bic.w	r2, r3, #15
 8003368:	4929      	ldr	r1, [pc, #164]	@ (8003410 <HAL_RCC_ClockConfig+0x260>)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003370:	f7fd fb4c 	bl	8000a0c <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fd fb48 	bl	8000a0c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e03b      	b.n	8003406 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b20      	ldr	r3, [pc, #128]	@ (8003410 <HAL_RCC_ClockConfig+0x260>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d1ed      	bne.n	8003378 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4917      	ldr	r1, [pc, #92]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490f      	ldr	r1, [pc, #60]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033da:	f000 f825 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <HAL_RCC_ClockConfig+0x264>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490c      	ldr	r1, [pc, #48]	@ (800341c <HAL_RCC_ClockConfig+0x26c>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <HAL_RCC_ClockConfig+0x270>)
 80033f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003424 <HAL_RCC_ClockConfig+0x274>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fab8 	bl	8000974 <HAL_InitTick>
 8003404:	4603      	mov	r3, r0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40022000 	.word	0x40022000
 8003414:	40021000 	.word	0x40021000
 8003418:	04c4b400 	.word	0x04c4b400
 800341c:	08003a84 	.word	0x08003a84
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800342e:	4b2c      	ldr	r3, [pc, #176]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b04      	cmp	r3, #4
 8003438:	d102      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800343a:	4b2a      	ldr	r3, [pc, #168]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e047      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003440:	4b27      	ldr	r3, [pc, #156]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d102      	bne.n	8003452 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800344c:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e03e      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003452:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b0c      	cmp	r3, #12
 800345c:	d136      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003468:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	3301      	adds	r3, #1
 8003474:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d10c      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800347c:	4a1a      	ldr	r2, [pc, #104]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	4a16      	ldr	r2, [pc, #88]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003486:	68d2      	ldr	r2, [r2, #12]
 8003488:	0a12      	lsrs	r2, r2, #8
 800348a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	617b      	str	r3, [r7, #20]
      break;
 8003494:	e00c      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003496:	4a13      	ldr	r2, [pc, #76]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	4a10      	ldr	r2, [pc, #64]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	0a12      	lsrs	r2, r2, #8
 80034a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034a8:	fb02 f303 	mul.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]
      break;
 80034ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	0e5b      	lsrs	r3, r3, #25
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	3301      	adds	r3, #1
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	e001      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034d0:	693b      	ldr	r3, [r7, #16]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	007a1200 	.word	0x007a1200

080034ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034f2:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034fc:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	3301      	adds	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d10c      	bne.n	800352a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003510:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	4a14      	ldr	r2, [pc, #80]	@ (800356c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800351a:	68d2      	ldr	r2, [r2, #12]
 800351c:	0a12      	lsrs	r2, r2, #8
 800351e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	617b      	str	r3, [r7, #20]
    break;
 8003528:	e00c      	b.n	8003544 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800352a:	4a12      	ldr	r2, [pc, #72]	@ (8003574 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	4a0e      	ldr	r2, [pc, #56]	@ (800356c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003534:	68d2      	ldr	r2, [r2, #12]
 8003536:	0a12      	lsrs	r2, r2, #8
 8003538:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
    break;
 8003542:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	0e5b      	lsrs	r3, r3, #25
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	3301      	adds	r3, #1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800355e:	687b      	ldr	r3, [r7, #4]
}
 8003560:	4618      	mov	r0, r3
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40021000 	.word	0x40021000
 8003570:	007a1200 	.word	0x007a1200
 8003574:	00f42400 	.word	0x00f42400

08003578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003580:	2300      	movs	r3, #0
 8003582:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003584:	2300      	movs	r3, #0
 8003586:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8098 	beq.w	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003596:	2300      	movs	r3, #0
 8003598:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359a:	4b43      	ldr	r3, [pc, #268]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10d      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	4b40      	ldr	r3, [pc, #256]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035aa:	4a3f      	ldr	r2, [pc, #252]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035b2:	4b3d      	ldr	r3, [pc, #244]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035be:	2301      	movs	r3, #1
 80035c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c2:	4b3a      	ldr	r3, [pc, #232]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a39      	ldr	r2, [pc, #228]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ce:	f7fd fa1d 	bl	8000a0c <HAL_GetTick>
 80035d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035d4:	e009      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7fd fa19 	bl	8000a0c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d902      	bls.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	74fb      	strb	r3, [r7, #19]
        break;
 80035e8:	e005      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ea:	4b30      	ldr	r3, [pc, #192]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ef      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d159      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035fc:	4b2a      	ldr	r3, [pc, #168]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003606:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01e      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	d019      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003618:	4b23      	ldr	r3, [pc, #140]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003622:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003624:	4b20      	ldr	r3, [pc, #128]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	4a1f      	ldr	r2, [pc, #124]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003634:	4b1c      	ldr	r3, [pc, #112]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	4a1b      	ldr	r2, [pc, #108]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800363c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003644:	4a18      	ldr	r2, [pc, #96]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fd f9d9 	bl	8000a0c <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365c:	e00b      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7fd f9d5 	bl	8000a0c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d902      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	74fb      	strb	r3, [r7, #19]
            break;
 8003674:	e006      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003676:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ec      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368a:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003698:	4903      	ldr	r1, [pc, #12]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036a0:	e008      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	74bb      	strb	r3, [r7, #18]
 80036a6:	e005      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b4:	7c7b      	ldrb	r3, [r7, #17]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ba:	4ba7      	ldr	r3, [pc, #668]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	4aa6      	ldr	r2, [pc, #664]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d2:	4ba1      	ldr	r3, [pc, #644]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d8:	f023 0203 	bic.w	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	499d      	ldr	r1, [pc, #628]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036f4:	4b98      	ldr	r3, [pc, #608]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f023 020c 	bic.w	r2, r3, #12
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	4995      	ldr	r1, [pc, #596]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003716:	4b90      	ldr	r3, [pc, #576]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	498c      	ldr	r1, [pc, #560]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003738:	4b87      	ldr	r3, [pc, #540]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	4984      	ldr	r1, [pc, #528]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800375a:	4b7f      	ldr	r3, [pc, #508]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003760:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	497b      	ldr	r1, [pc, #492]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800377c:	4b76      	ldr	r3, [pc, #472]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	4973      	ldr	r1, [pc, #460]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800379e:	4b6e      	ldr	r3, [pc, #440]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	496a      	ldr	r1, [pc, #424]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037c0:	4b65      	ldr	r3, [pc, #404]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4962      	ldr	r1, [pc, #392]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	4959      	ldr	r1, [pc, #356]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003804:	4b54      	ldr	r3, [pc, #336]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003806:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	4951      	ldr	r1, [pc, #324]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003826:	4b4c      	ldr	r3, [pc, #304]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	4948      	ldr	r1, [pc, #288]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003848:	4b43      	ldr	r3, [pc, #268]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	4940      	ldr	r1, [pc, #256]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003866:	d105      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003868:	4b3b      	ldr	r3, [pc, #236]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a3a      	ldr	r2, [pc, #232]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003872:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003880:	4b35      	ldr	r3, [pc, #212]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003886:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388e:	4932      	ldr	r1, [pc, #200]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800389e:	d105      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038b8:	4b27      	ldr	r3, [pc, #156]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c6:	4924      	ldr	r1, [pc, #144]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d6:	d105      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f0:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fe:	4916      	ldr	r1, [pc, #88]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800390e:	d105      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003910:	4b11      	ldr	r3, [pc, #68]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a10      	ldr	r2, [pc, #64]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800391a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d019      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	4908      	ldr	r1, [pc, #32]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003946:	d109      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003948:	4b03      	ldr	r3, [pc, #12]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a02      	ldr	r2, [pc, #8]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003952:	60d3      	str	r3, [r2, #12]
 8003954:	e002      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d015      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003968:	4b29      	ldr	r3, [pc, #164]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	4926      	ldr	r1, [pc, #152]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003986:	d105      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003988:	4b21      	ldr	r3, [pc, #132]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a20      	ldr	r2, [pc, #128]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800398e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003992:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d015      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80039a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ae:	4918      	ldr	r1, [pc, #96]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039be:	d105      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039c0:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e6:	490a      	ldr	r1, [pc, #40]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f8:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a04      	ldr	r2, [pc, #16]	@ (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a04:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000

08003a14 <memset>:
 8003a14:	4402      	add	r2, r0
 8003a16:	4603      	mov	r3, r0
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <memset+0xa>
 8003a1c:	4770      	bx	lr
 8003a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a22:	e7f9      	b.n	8003a18 <memset+0x4>

08003a24 <__libc_init_array>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4d0d      	ldr	r5, [pc, #52]	@ (8003a5c <__libc_init_array+0x38>)
 8003a28:	4c0d      	ldr	r4, [pc, #52]	@ (8003a60 <__libc_init_array+0x3c>)
 8003a2a:	1b64      	subs	r4, r4, r5
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	2600      	movs	r6, #0
 8003a30:	42a6      	cmp	r6, r4
 8003a32:	d109      	bne.n	8003a48 <__libc_init_array+0x24>
 8003a34:	4d0b      	ldr	r5, [pc, #44]	@ (8003a64 <__libc_init_array+0x40>)
 8003a36:	4c0c      	ldr	r4, [pc, #48]	@ (8003a68 <__libc_init_array+0x44>)
 8003a38:	f000 f818 	bl	8003a6c <_init>
 8003a3c:	1b64      	subs	r4, r4, r5
 8003a3e:	10a4      	asrs	r4, r4, #2
 8003a40:	2600      	movs	r6, #0
 8003a42:	42a6      	cmp	r6, r4
 8003a44:	d105      	bne.n	8003a52 <__libc_init_array+0x2e>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4c:	4798      	blx	r3
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7ee      	b.n	8003a30 <__libc_init_array+0xc>
 8003a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a56:	4798      	blx	r3
 8003a58:	3601      	adds	r6, #1
 8003a5a:	e7f2      	b.n	8003a42 <__libc_init_array+0x1e>
 8003a5c:	08003a94 	.word	0x08003a94
 8003a60:	08003a94 	.word	0x08003a94
 8003a64:	08003a94 	.word	0x08003a94
 8003a68:	08003a98 	.word	0x08003a98

08003a6c <_init>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

08003a78 <_fini>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr
