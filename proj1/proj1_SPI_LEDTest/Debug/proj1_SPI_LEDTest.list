
proj1_SPI_LEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003870  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003928  08003928  00004928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d0  080039d0  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  080039d0  080039d0  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d0  080039d0  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d0  080039d0  000049d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039d4  080039d4  000049d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080039d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000020  080039f4  00005020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080039f4  00005174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb49  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ae  00000000  00000000  00013b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00015e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099f  00000000  00000000  00016aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f34  00000000  00000000  0001743f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f973  00000000  00000000  0002c373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084cff  00000000  00000000  0003bce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c09e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c40  00000000  00000000  000c0a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c3668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000020 	.word	0x20000020
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003910 	.word	0x08003910

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000024 	.word	0x20000024
 80000fc:	08003910 	.word	0x08003910

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_i2d>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	2800      	cmp	r0, #0
 80003f0:	d016      	beq.n	8000420 <__aeabi_i2d+0x34>
 80003f2:	17c3      	asrs	r3, r0, #31
 80003f4:	18c5      	adds	r5, r0, r3
 80003f6:	405d      	eors	r5, r3
 80003f8:	0fc4      	lsrs	r4, r0, #31
 80003fa:	0028      	movs	r0, r5
 80003fc:	f000 f824 	bl	8000448 <__clzsi2>
 8000400:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <__aeabi_i2d+0x58>)
 8000402:	1a1b      	subs	r3, r3, r0
 8000404:	055b      	lsls	r3, r3, #21
 8000406:	0d5b      	lsrs	r3, r3, #21
 8000408:	280a      	cmp	r0, #10
 800040a:	dc14      	bgt.n	8000436 <__aeabi_i2d+0x4a>
 800040c:	0002      	movs	r2, r0
 800040e:	002e      	movs	r6, r5
 8000410:	3215      	adds	r2, #21
 8000412:	4096      	lsls	r6, r2
 8000414:	220b      	movs	r2, #11
 8000416:	1a12      	subs	r2, r2, r0
 8000418:	40d5      	lsrs	r5, r2
 800041a:	032d      	lsls	r5, r5, #12
 800041c:	0b2d      	lsrs	r5, r5, #12
 800041e:	e003      	b.n	8000428 <__aeabi_i2d+0x3c>
 8000420:	2400      	movs	r4, #0
 8000422:	2300      	movs	r3, #0
 8000424:	2500      	movs	r5, #0
 8000426:	2600      	movs	r6, #0
 8000428:	051b      	lsls	r3, r3, #20
 800042a:	432b      	orrs	r3, r5
 800042c:	07e4      	lsls	r4, r4, #31
 800042e:	4323      	orrs	r3, r4
 8000430:	0030      	movs	r0, r6
 8000432:	0019      	movs	r1, r3
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	380b      	subs	r0, #11
 8000438:	4085      	lsls	r5, r0
 800043a:	032d      	lsls	r5, r5, #12
 800043c:	2600      	movs	r6, #0
 800043e:	0b2d      	lsrs	r5, r5, #12
 8000440:	e7f2      	b.n	8000428 <__aeabi_i2d+0x3c>
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	0000041e 	.word	0x0000041e

08000448 <__clzsi2>:
 8000448:	211c      	movs	r1, #28
 800044a:	2301      	movs	r3, #1
 800044c:	041b      	lsls	r3, r3, #16
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0xe>
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	3910      	subs	r1, #16
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	4298      	cmp	r0, r3
 800045a:	d301      	bcc.n	8000460 <__clzsi2+0x18>
 800045c:	0a00      	lsrs	r0, r0, #8
 800045e:	3908      	subs	r1, #8
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	4298      	cmp	r0, r3
 8000464:	d301      	bcc.n	800046a <__clzsi2+0x22>
 8000466:	0900      	lsrs	r0, r0, #4
 8000468:	3904      	subs	r1, #4
 800046a:	a202      	add	r2, pc, #8	@ (adr r2, 8000474 <__clzsi2+0x2c>)
 800046c:	5c10      	ldrb	r0, [r2, r0]
 800046e:	1840      	adds	r0, r0, r1
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	02020304 	.word	0x02020304
 8000478:	01010101 	.word	0x01010101
	...

08000484 <LED_Init>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_RTC_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void LED_Init(){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_IN_RST_GPIO_Port,LED_IN_RST_Pin,GPIO_PIN_SET);
 8000488:	23a0      	movs	r3, #160	@ 0xa0
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	2201      	movs	r2, #1
 800048e:	2140      	movs	r1, #64	@ 0x40
 8000490:	0018      	movs	r0, r3
 8000492:	f000 ffcb 	bl	800142c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_OUT_EN_GPIO_Port,LED_OUT_EN_Pin,GPIO_PIN_RESET);
 8000496:	23a0      	movs	r3, #160	@ 0xa0
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	2200      	movs	r2, #0
 800049c:	2108      	movs	r1, #8
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 ffc4 	bl	800142c <HAL_GPIO_WritePin>

}
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <Input_Fix>:

void Input_Fix(GPIO_PinState * Input_Data) {
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  for (int i=7;i<=47;i=i+8) {
 80004b2:	2307      	movs	r3, #7
 80004b4:	617b      	str	r3, [r7, #20]
 80004b6:	e02e      	b.n	8000516 <Input_Fix+0x6c>
    for (int j=0;j<=2;j++) {
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	e025      	b.n	800050a <Input_Fix+0x60>
      GPIO_PinState temp=Input_Data[j+i-7];
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	18d3      	adds	r3, r2, r3
 80004c4:	3b07      	subs	r3, #7
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	18d2      	adds	r2, r2, r3
 80004ca:	200f      	movs	r0, #15
 80004cc:	183b      	adds	r3, r7, r0
 80004ce:	7812      	ldrb	r2, [r2, #0]
 80004d0:	701a      	strb	r2, [r3, #0]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	1e5a      	subs	r2, r3, #1
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	001a      	movs	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	189a      	adds	r2, r3, r2
 80004e0:	6939      	ldr	r1, [r7, #16]
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	18cb      	adds	r3, r1, r3
 80004e6:	3b07      	subs	r3, #7
 80004e8:	6879      	ldr	r1, [r7, #4]
 80004ea:	18cb      	adds	r3, r1, r3
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	701a      	strb	r2, [r3, #0]
      Input_Data[i-1-j]=temp;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	1e5a      	subs	r2, r3, #1
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	001a      	movs	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	189b      	adds	r3, r3, r2
 80004fe:	183a      	adds	r2, r7, r0
 8000500:	7812      	ldrb	r2, [r2, #0]
 8000502:	701a      	strb	r2, [r3, #0]
    for (int j=0;j<=2;j++) {
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	3301      	adds	r3, #1
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	2b02      	cmp	r3, #2
 800050e:	ddd6      	ble.n	80004be <Input_Fix+0x14>
  for (int i=7;i<=47;i=i+8) {
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	3308      	adds	r3, #8
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	2b2f      	cmp	r3, #47	@ 0x2f
 800051a:	ddcd      	ble.n	80004b8 <Input_Fix+0xe>
    }
  }
}
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b006      	add	sp, #24
 8000524:	bd80      	pop	{r7, pc}

08000526 <Generate_Bytes>:

void Generate_Bytes(uint8_t * Input_Bits,uint8_t* Bytes){
 8000526:	b580      	push	{r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	6039      	str	r1, [r7, #0]

  for (int byte_index=0;byte_index<6;byte_index++) {
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e02c      	b.n	8000590 <Generate_Bytes+0x6a>
    for (int i=0;i<8;i++) {
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	e023      	b.n	8000584 <Generate_Bytes+0x5e>
      switch(Input_Bits[byte_index*8+i]) {
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	00da      	lsls	r2, r3, #3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	18d3      	adds	r3, r2, r3
 8000544:	001a      	movs	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	189b      	adds	r3, r3, r2
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d015      	beq.n	800057c <Generate_Bytes+0x56>
 8000550:	2b01      	cmp	r3, #1
 8000552:	d114      	bne.n	800057e <Generate_Bytes+0x58>
      case 0:{

        break;
      }
      case 1:{
        Bytes[byte_index]|=(1<<(7-i));
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	18d3      	adds	r3, r2, r3
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b25a      	sxtb	r2, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	2107      	movs	r1, #7
 8000562:	1acb      	subs	r3, r1, r3
 8000564:	2101      	movs	r1, #1
 8000566:	4099      	lsls	r1, r3
 8000568:	000b      	movs	r3, r1
 800056a:	b25b      	sxtb	r3, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	b259      	sxtb	r1, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	18d3      	adds	r3, r2, r3
 8000576:	b2ca      	uxtb	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
        break;
 800057a:	e000      	b.n	800057e <Generate_Bytes+0x58>
        break;
 800057c:	46c0      	nop			@ (mov r8, r8)
    for (int i=0;i<8;i++) {
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	3301      	adds	r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	2b07      	cmp	r3, #7
 8000588:	ddd8      	ble.n	800053c <Generate_Bytes+0x16>
  for (int byte_index=0;byte_index<6;byte_index++) {
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	3301      	adds	r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2b05      	cmp	r3, #5
 8000594:	ddcf      	ble.n	8000536 <Generate_Bytes+0x10>
      }
      }
    }
  }
}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b004      	add	sp, #16
 800059e:	bd80      	pop	{r7, pc}

080005a0 <LED_Display_6Byte_SPI>:

void LED_Display_6Byte_SPI(GPIO_PinState * Input_Data) {
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  Input_Fix(Input_Data);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff ff7d 	bl	80004aa <Input_Fix>
  uint8_t Input_Byte[6]={0};
 80005b0:	2408      	movs	r4, #8
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	809a      	strh	r2, [r3, #4]
 Generate_Bytes(Input_Data,Input_Byte);
 80005bc:	193a      	adds	r2, r7, r4
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f7ff ffaf 	bl	8000526 <Generate_Bytes>

  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_RESET);
 80005c8:	23a0      	movs	r3, #160	@ 0xa0
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2200      	movs	r2, #0
 80005ce:	2110      	movs	r1, #16
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 ff2b 	bl	800142c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,Input_Byte, 6, 1);
 80005d6:	1939      	adds	r1, r7, r4
 80005d8:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <LED_Display_6Byte_SPI+0x58>)
 80005da:	2301      	movs	r3, #1
 80005dc:	2206      	movs	r2, #6
 80005de:	f002 f987 	bl	80028f0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_SET);
 80005e2:	23a0      	movs	r3, #160	@ 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2201      	movs	r2, #1
 80005e8:	2110      	movs	r1, #16
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 ff1e 	bl	800142c <HAL_GPIO_WritePin>
}
 80005f0:	46c0      	nop			@ (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bd90      	pop	{r4, r7, pc}
 80005f8:	20000068 	.word	0x20000068

080005fc <LED_Display_Color>:
//    HAL_Delay(0);
//  }
//  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_SET);
//}

void LED_Display_Color(LED_Color * Color_Input) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	@ 0x40
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint8_t Color_Bytes[48]={1};
 8000604:	2308      	movs	r3, #8
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	3304      	adds	r3, #4
 800060e:	222c      	movs	r2, #44	@ 0x2c
 8000610:	2100      	movs	r1, #0
 8000612:	0018      	movs	r0, r3
 8000614:	f003 f950 	bl	80038b8 <memset>
  int color_index=0,byte_index=47;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800061c:	232f      	movs	r3, #47	@ 0x2f
 800061e:	63bb      	str	r3, [r7, #56]	@ 0x38
  while(color_index<16) {
 8000620:	e0a1      	b.n	8000766 <LED_Display_Color+0x16a>
    switch(Color_Input[color_index]){
 8000622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	18d3      	adds	r3, r2, r3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b07      	cmp	r3, #7
 800062c:	d900      	bls.n	8000630 <LED_Display_Color+0x34>
 800062e:	e094      	b.n	800075a <LED_Display_Color+0x15e>
 8000630:	009a      	lsls	r2, r3, #2
 8000632:	4b53      	ldr	r3, [pc, #332]	@ (8000780 <LED_Display_Color+0x184>)
 8000634:	18d3      	adds	r3, r2, r3
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	469f      	mov	pc, r3
    case BLACK:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 800063a:	2108      	movs	r1, #8
 800063c:	187a      	adds	r2, r7, r1
 800063e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000640:	18d3      	adds	r3, r2, r3
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 8000646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000648:	3b01      	subs	r3, #1
 800064a:	0008      	movs	r0, r1
 800064c:	187a      	adds	r2, r7, r1
 800064e:	2101      	movs	r1, #1
 8000650:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 8000652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000654:	3b02      	subs	r3, #2
 8000656:	183a      	adds	r2, r7, r0
 8000658:	2101      	movs	r1, #1
 800065a:	54d1      	strb	r1, [r2, r3]
      break;
 800065c:	e07d      	b.n	800075a <LED_Display_Color+0x15e>
    }
    case RED:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 800065e:	2108      	movs	r1, #8
 8000660:	187a      	adds	r2, r7, r1
 8000662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000664:	18d3      	adds	r3, r2, r3
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 800066a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800066c:	3b01      	subs	r3, #1
 800066e:	0008      	movs	r0, r1
 8000670:	187a      	adds	r2, r7, r1
 8000672:	2101      	movs	r1, #1
 8000674:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 8000676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000678:	3b02      	subs	r3, #2
 800067a:	183a      	adds	r2, r7, r0
 800067c:	2100      	movs	r1, #0
 800067e:	54d1      	strb	r1, [r2, r3]
      break;
 8000680:	e06b      	b.n	800075a <LED_Display_Color+0x15e>
    }
    case GREEN:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 8000682:	2108      	movs	r1, #8
 8000684:	187a      	adds	r2, r7, r1
 8000686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000688:	18d3      	adds	r3, r2, r3
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 800068e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000690:	3b01      	subs	r3, #1
 8000692:	0008      	movs	r0, r1
 8000694:	187a      	adds	r2, r7, r1
 8000696:	2100      	movs	r1, #0
 8000698:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 800069a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800069c:	3b02      	subs	r3, #2
 800069e:	183a      	adds	r2, r7, r0
 80006a0:	2101      	movs	r1, #1
 80006a2:	54d1      	strb	r1, [r2, r3]
      break;
 80006a4:	e059      	b.n	800075a <LED_Display_Color+0x15e>
    }
    case BLUE:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 80006a6:	2108      	movs	r1, #8
 80006a8:	187a      	adds	r2, r7, r1
 80006aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006ac:	18d3      	adds	r3, r2, r3
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 80006b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006b4:	3b01      	subs	r3, #1
 80006b6:	0008      	movs	r0, r1
 80006b8:	187a      	adds	r2, r7, r1
 80006ba:	2101      	movs	r1, #1
 80006bc:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 80006be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006c0:	3b02      	subs	r3, #2
 80006c2:	183a      	adds	r2, r7, r0
 80006c4:	2101      	movs	r1, #1
 80006c6:	54d1      	strb	r1, [r2, r3]
      break;
 80006c8:	e047      	b.n	800075a <LED_Display_Color+0x15e>
    }
    case YELLOW:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 80006ca:	2108      	movs	r1, #8
 80006cc:	187a      	adds	r2, r7, r1
 80006ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006d0:	18d3      	adds	r3, r2, r3
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 80006d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006d8:	3b01      	subs	r3, #1
 80006da:	0008      	movs	r0, r1
 80006dc:	187a      	adds	r2, r7, r1
 80006de:	2100      	movs	r1, #0
 80006e0:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 80006e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006e4:	3b02      	subs	r3, #2
 80006e6:	183a      	adds	r2, r7, r0
 80006e8:	2100      	movs	r1, #0
 80006ea:	54d1      	strb	r1, [r2, r3]
      break;
 80006ec:	e035      	b.n	800075a <LED_Display_Color+0x15e>
    }
    case PINK:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 80006ee:	2108      	movs	r1, #8
 80006f0:	187a      	adds	r2, r7, r1
 80006f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006f4:	18d3      	adds	r3, r2, r3
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 80006fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006fc:	3b01      	subs	r3, #1
 80006fe:	0008      	movs	r0, r1
 8000700:	187a      	adds	r2, r7, r1
 8000702:	2101      	movs	r1, #1
 8000704:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 8000706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000708:	3b02      	subs	r3, #2
 800070a:	183a      	adds	r2, r7, r0
 800070c:	2100      	movs	r1, #0
 800070e:	54d1      	strb	r1, [r2, r3]
      break;
 8000710:	e023      	b.n	800075a <LED_Display_Color+0x15e>
    }
    case CYAN:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 8000712:	2108      	movs	r1, #8
 8000714:	187a      	adds	r2, r7, r1
 8000716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000718:	18d3      	adds	r3, r2, r3
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 800071e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000720:	3b01      	subs	r3, #1
 8000722:	0008      	movs	r0, r1
 8000724:	187a      	adds	r2, r7, r1
 8000726:	2100      	movs	r1, #0
 8000728:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 800072a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800072c:	3b02      	subs	r3, #2
 800072e:	183a      	adds	r2, r7, r0
 8000730:	2101      	movs	r1, #1
 8000732:	54d1      	strb	r1, [r2, r3]
      break;
 8000734:	e011      	b.n	800075a <LED_Display_Color+0x15e>
    }
    case WHITE:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 8000736:	2108      	movs	r1, #8
 8000738:	187a      	adds	r2, r7, r1
 800073a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800073c:	18d3      	adds	r3, r2, r3
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 8000742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000744:	3b01      	subs	r3, #1
 8000746:	0008      	movs	r0, r1
 8000748:	187a      	adds	r2, r7, r1
 800074a:	2100      	movs	r1, #0
 800074c:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 800074e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000750:	3b02      	subs	r3, #2
 8000752:	183a      	adds	r2, r7, r0
 8000754:	2100      	movs	r1, #0
 8000756:	54d1      	strb	r1, [r2, r3]
      break;
 8000758:	46c0      	nop			@ (mov r8, r8)
    }
    }
    color_index++;
 800075a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800075c:	3301      	adds	r3, #1
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    byte_index-=3;
 8000760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000762:	3b03      	subs	r3, #3
 8000764:	63bb      	str	r3, [r7, #56]	@ 0x38
  while(color_index<16) {
 8000766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000768:	2b0f      	cmp	r3, #15
 800076a:	dc00      	bgt.n	800076e <LED_Display_Color+0x172>
 800076c:	e759      	b.n	8000622 <LED_Display_Color+0x26>
  }
  LED_Display_6Byte_SPI(Color_Bytes);
 800076e:	2308      	movs	r3, #8
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff ff14 	bl	80005a0 <LED_Display_6Byte_SPI>
}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b010      	add	sp, #64	@ 0x40
 800077e:	bd80      	pop	{r7, pc}
 8000780:	08003928 	.word	0x08003928

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fb87 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f819 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f971 	bl	8000a78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000796:	f000 f8e3 	bl	8000960 <MX_SPI1_Init>
  MX_RTC_Init();
 800079a:	f000 f86b 	bl	8000874 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800079e:	f000 f91d 	bl	80009dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LED_Init();
 80007a2:	f7ff fe6f 	bl	8000484 <LED_Init>


  LED_Color color[16]={RED,RED};
 80007a6:	003b      	movs	r3, r7
 80007a8:	0018      	movs	r0, r3
 80007aa:	2310      	movs	r3, #16
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f003 f882 	bl	80038b8 <memset>
 80007b4:	003b      	movs	r3, r7
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	003b      	movs	r3, r7
 80007bc:	2201      	movs	r2, #1
 80007be:	705a      	strb	r2, [r3, #1]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	e7fd      	b.n	80007c0 <main+0x3c>

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b093      	sub	sp, #76	@ 0x4c
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	2414      	movs	r4, #20
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	0018      	movs	r0, r3
 80007d0:	2334      	movs	r3, #52	@ 0x34
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f003 f86f 	bl	80038b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	0018      	movs	r0, r3
 80007de:	2310      	movs	r3, #16
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f003 f868 	bl	80038b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2380      	movs	r3, #128	@ 0x80
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fe6f 	bl	80014d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2209      	movs	r2, #9
 80007f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	22a0      	movs	r2, #160	@ 0xa0
 80007fc:	02d2      	lsls	r2, r2, #11
 80007fe:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000800:	0021      	movs	r1, r4
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2201      	movs	r2, #1
 8000806:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2202      	movs	r2, #2
 800080c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2203      	movs	r2, #3
 8000812:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2210      	movs	r2, #16
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	0292      	lsls	r2, r2, #10
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	22e0      	movs	r2, #224	@ 0xe0
 800082c:	0612      	lsls	r2, r2, #24
 800082e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	187b      	adds	r3, r7, r1
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fe98 	bl	8001568 <HAL_RCC_OscConfig>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800083c:	f000 f986 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2207      	movs	r2, #7
 8000844:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2202      	movs	r2, #2
 800084a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2100      	movs	r1, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f993 	bl	8001b88 <HAL_RCC_ClockConfig>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000866:	f000 f971 	bl	8000b4c <Error_Handler>
  }
}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b013      	add	sp, #76	@ 0x4c
 8000870:	bd90      	pop	{r4, r7, pc}
	...

08000874 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	0018      	movs	r0, r3
 800087e:	2314      	movs	r3, #20
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f003 f818 	bl	80038b8 <memset>
  RTC_DateTypeDef sDate = {0};
 8000888:	003b      	movs	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800088e:	4b32      	ldr	r3, [pc, #200]	@ (8000958 <MX_RTC_Init+0xe4>)
 8000890:	4a32      	ldr	r2, [pc, #200]	@ (800095c <MX_RTC_Init+0xe8>)
 8000892:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000894:	4b30      	ldr	r3, [pc, #192]	@ (8000958 <MX_RTC_Init+0xe4>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800089a:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <MX_RTC_Init+0xe4>)
 800089c:	227f      	movs	r2, #127	@ 0x7f
 800089e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80008a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <MX_RTC_Init+0xe4>)
 80008a2:	22ff      	movs	r2, #255	@ 0xff
 80008a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <MX_RTC_Init+0xe4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <MX_RTC_Init+0xe4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <MX_RTC_Init+0xe4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <MX_RTC_Init+0xe4>)
 80008ba:	2280      	movs	r2, #128	@ 0x80
 80008bc:	05d2      	lsls	r2, r2, #23
 80008be:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008c0:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <MX_RTC_Init+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008c6:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <MX_RTC_Init+0xe4>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 fc2d 	bl	8002128 <HAL_RTC_Init>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80008d2:	f000 f93b 	bl	8000b4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2217      	movs	r2, #23
 80008da:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008fa:	1d39      	adds	r1, r7, #4
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_RTC_Init+0xe4>)
 80008fe:	2201      	movs	r2, #1
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fcb3 	bl	800226c <HAL_RTC_SetTime>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800090a:	f000 f91f 	bl	8000b4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800090e:	003b      	movs	r3, r7
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JULY;
 8000914:	003b      	movs	r3, r7
 8000916:	2207      	movs	r2, #7
 8000918:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x8;
 800091a:	003b      	movs	r3, r7
 800091c:	2208      	movs	r2, #8
 800091e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8000920:	003b      	movs	r3, r7
 8000922:	2224      	movs	r2, #36	@ 0x24
 8000924:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000926:	0039      	movs	r1, r7
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <MX_RTC_Init+0xe4>)
 800092a:	2201      	movs	r2, #1
 800092c:	0018      	movs	r0, r3
 800092e:	f001 fd45 	bl	80023bc <HAL_RTC_SetDate>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000936:	f000 f909 	bl	8000b4c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800093a:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <MX_RTC_Init+0xe4>)
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fea1 	bl	8002688 <HAL_RTCEx_SetWakeUpTimer>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_RTC_Init+0xda>
  {
    Error_Handler();
 800094a:	f000 f8ff 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b006      	add	sp, #24
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	2000003c 	.word	0x2000003c
 800095c:	40002800 	.word	0x40002800

08000960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <MX_SPI1_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_SPI1_Init+0x74>)
 800096c:	2282      	movs	r2, #130	@ 0x82
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_SPI1_Init+0x74>)
 800097a:	22e0      	movs	r2, #224	@ 0xe0
 800097c:	00d2      	lsls	r2, r2, #3
 800097e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_SPI1_Init+0x74>)
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	0092      	lsls	r2, r2, #2
 8000992:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009ba:	2208      	movs	r2, #8
 80009bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009be:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 fedd 	bl	8002780 <HAL_SPI_Init>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 f8bf 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000068 	.word	0x20000068
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e0:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 80009e2:	4a24      	ldr	r2, [pc, #144]	@ (8000a74 <MX_USART1_UART_Init+0x98>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e6:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 80009e8:	22e1      	movs	r2, #225	@ 0xe1
 80009ea:	0252      	lsls	r2, r2, #9
 80009ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 fa38 	bl	8002e9c <HAL_UART_Init>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f88c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 fe5d 	bl	80036f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f000 f883 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fe94 	bl	8003778 <HAL_UARTEx_SetRxFifoThreshold>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 f87a 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <MX_USART1_UART_Init+0x94>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 fe12 	bl	8003684 <HAL_UARTEx_DisableFifoMode>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 f872 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	200000cc 	.word	0x200000cc
 8000a74:	40013800 	.word	0x40013800

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b089      	sub	sp, #36	@ 0x24
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	240c      	movs	r4, #12
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	0018      	movs	r0, r3
 8000a84:	2314      	movs	r3, #20
 8000a86:	001a      	movs	r2, r3
 8000a88:	2100      	movs	r1, #0
 8000a8a:	f002 ff15 	bl	80038b8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <MX_GPIO_Init+0xcc>)
 8000a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a92:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <MX_GPIO_Init+0xcc>)
 8000a94:	2104      	movs	r1, #4
 8000a96:	430a      	orrs	r2, r1
 8000a98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <MX_GPIO_Init+0xcc>)
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b27      	ldr	r3, [pc, #156]	@ (8000b44 <MX_GPIO_Init+0xcc>)
 8000aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aaa:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <MX_GPIO_Init+0xcc>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ab2:	4b24      	ldr	r3, [pc, #144]	@ (8000b44 <MX_GPIO_Init+0xcc>)
 8000ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <MX_GPIO_Init+0xcc>)
 8000ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac2:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <MX_GPIO_Init+0xcc>)
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <MX_GPIO_Init+0xcc>)
 8000acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ace:	2202      	movs	r2, #2
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin, GPIO_PIN_RESET);
 8000ad6:	23a0      	movs	r3, #160	@ 0xa0
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	2200      	movs	r2, #0
 8000adc:	2158      	movs	r1, #88	@ 0x58
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 fca4 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_OUT_EN_Pin LED_OUT_CLK_Pin LED_IN_RST_Pin */
  GPIO_InitStruct.Pin = LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2258      	movs	r2, #88	@ 0x58
 8000ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2201      	movs	r2, #1
 8000aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	193a      	adds	r2, r7, r4
 8000afe:	23a0      	movs	r3, #160	@ 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fb2d 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : detect_Pin */
  GPIO_InitStruct.Pin = detect_Pin;
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2284      	movs	r2, #132	@ 0x84
 8000b16:	0392      	lsls	r2, r2, #14
 8000b18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(detect_GPIO_Port, &GPIO_InitStruct);
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <MX_GPIO_Init+0xd0>)
 8000b24:	0019      	movs	r1, r3
 8000b26:	0010      	movs	r0, r2
 8000b28:	f000 fb1c 	bl	8001164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2005      	movs	r0, #5
 8000b32:	f000 fae5 	bl	8001100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b36:	2005      	movs	r0, #5
 8000b38:	f000 faf7 	bl	800112a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b009      	add	sp, #36	@ 0x24
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	50000400 	.word	0x50000400

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b64:	2101      	movs	r1, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4013      	ands	r3, r2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	0549      	lsls	r1, r1, #21
 8000b80:	430a      	orrs	r2, r1
 8000b82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b88:	2380      	movs	r3, #128	@ 0x80
 8000b8a:	055b      	lsls	r3, r3, #21
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b08b      	sub	sp, #44	@ 0x2c
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	2410      	movs	r4, #16
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	0018      	movs	r0, r3
 8000bae:	2318      	movs	r3, #24
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f002 fe80 	bl	80038b8 <memset>
  if(hrtc->Instance==RTC)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a15      	ldr	r2, [pc, #84]	@ (8000c14 <HAL_RTC_MspInit+0x74>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d124      	bne.n	8000c0c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	0292      	lsls	r2, r2, #10
 8000bc8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2280      	movs	r2, #128	@ 0x80
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 f981 	bl	8001edc <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000bde:	f7ff ffb5 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <HAL_RTC_MspInit+0x78>)
 8000be4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_RTC_MspInit+0x78>)
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0209      	lsls	r1, r1, #8
 8000bec:	430a      	orrs	r2, r1
 8000bee:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_RTC_MspInit+0x78>)
 8000bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_RTC_MspInit+0x78>)
 8000bf6:	2180      	movs	r1, #128	@ 0x80
 8000bf8:	00c9      	lsls	r1, r1, #3
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_RTC_MspInit+0x78>)
 8000c00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c02:	2380      	movs	r3, #128	@ 0x80
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4013      	ands	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b00b      	add	sp, #44	@ 0x2c
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	40002800 	.word	0x40002800
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b08b      	sub	sp, #44	@ 0x2c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	2414      	movs	r4, #20
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	0018      	movs	r0, r3
 8000c2a:	2314      	movs	r3, #20
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f002 fe42 	bl	80038b8 <memset>
  if(hspi->Instance==SPI1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d130      	bne.n	8000ca0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <HAL_SPI_MspInit+0x90>)
 8000c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <HAL_SPI_MspInit+0x90>)
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	0149      	lsls	r1, r1, #5
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_SPI_MspInit+0x90>)
 8000c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	015b      	lsls	r3, r3, #5
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_SPI_MspInit+0x90>)
 8000c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <HAL_SPI_MspInit+0x90>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	430a      	orrs	r2, r1
 8000c64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_SPI_MspInit+0x90>)
 8000c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = LED_MOSI_Pin|LED_SCK_Pin;
 8000c72:	0021      	movs	r1, r4
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2224      	movs	r2, #36	@ 0x24
 8000c78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	187a      	adds	r2, r7, r1
 8000c94:	23a0      	movs	r3, #160	@ 0xa0
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fa62 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b00b      	add	sp, #44	@ 0x2c
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	40013000 	.word	0x40013000
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b091      	sub	sp, #68	@ 0x44
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	232c      	movs	r3, #44	@ 0x2c
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2314      	movs	r3, #20
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f002 fdf8 	bl	80038b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	2414      	movs	r4, #20
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2318      	movs	r3, #24
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f002 fdf0 	bl	80038b8 <memset>
  if(huart->Instance==USART1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <HAL_UART_MspInit+0xbc>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d13f      	bne.n	8000d62 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f001 f8f3 	bl	8001edc <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cfa:	f7ff ff27 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <HAL_UART_MspInit+0xc0>)
 8000d00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d02:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <HAL_UART_MspInit+0xc0>)
 8000d04:	2180      	movs	r1, #128	@ 0x80
 8000d06:	01c9      	lsls	r1, r1, #7
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <HAL_UART_MspInit+0xc0>)
 8000d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	01db      	lsls	r3, r3, #7
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_UART_MspInit+0xc0>)
 8000d1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HAL_UART_MspInit+0xc0>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	430a      	orrs	r2, r1
 8000d24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d26:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_UART_MspInit+0xc0>)
 8000d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d32:	212c      	movs	r1, #44	@ 0x2c
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	22c0      	movs	r2, #192	@ 0xc0
 8000d38:	00d2      	lsls	r2, r2, #3
 8000d3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2202      	movs	r2, #2
 8000d40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2201      	movs	r2, #1
 8000d52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	187a      	adds	r2, r7, r1
 8000d56:	23a0      	movs	r3, #160	@ 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 fa01 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b011      	add	sp, #68	@ 0x44
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	40013800 	.word	0x40013800
 8000d70:	40021000 	.word	0x40021000

08000d74 <caculate_rad>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */
void caculate_rad(int counter)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	rad = 360 / (counter);
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	23b4      	movs	r3, #180	@ 0xb4
 8000d80:	0058      	lsls	r0, r3, #1
 8000d82:	f7ff fa47 	bl	8000214 <__divsi3>
 8000d86:	0003      	movs	r3, r0
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff fb2f 	bl	80003ec <__aeabi_i2d>
 8000d8e:	0002      	movs	r2, r0
 8000d90:	000b      	movs	r3, r1
 8000d92:	4903      	ldr	r1, [pc, #12]	@ (8000da0 <caculate_rad+0x2c>)
 8000d94:	600a      	str	r2, [r1, #0]
 8000d96:	604b      	str	r3, [r1, #4]
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000168 	.word	0x20000168

08000da4 <HAL_GPIO_EXTI_Falling_Callback>:
/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	0002      	movs	r2, r0
 8000dac:	1dbb      	adds	r3, r7, #6
 8000dae:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin != detect_Pin)
 8000db0:	1dbb      	adds	r3, r7, #6
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d110      	bne.n	8000dda <HAL_GPIO_EXTI_Falling_Callback+0x36>
	{
		return;
	}
	if (now_counter > 1)
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_GPIO_EXTI_Falling_Callback+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	dd0d      	ble.n	8000ddc <HAL_GPIO_EXTI_Falling_Callback+0x38>
	{

		counter = now_counter;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_GPIO_EXTI_Falling_Callback+0x40>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 8000dc6:	601a      	str	r2, [r3, #0]
		caculate_rad(counter);
 8000dc8:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff ffd1 	bl	8000d74 <caculate_rad>
		now_counter = 0;
 8000dd2:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <HAL_GPIO_EXTI_Falling_Callback+0x40>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e000      	b.n	8000ddc <HAL_GPIO_EXTI_Falling_Callback+0x38>
		return;
 8000dda:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	20000164 	.word	0x20000164
 8000de8:	20000160 	.word	0x20000160

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	e7fd      	b.n	8000df0 <NMI_Handler+0x4>

08000df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	e7fd      	b.n	8000df8 <HardFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8ac 	bl	8000f70 <HAL_IncTick>
//  now_counter++;
//
//  caculate_theta();
//  show_num(digit_0);
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(detect_Pin);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 fb1f 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  LED_Display_Color(color);
 8000e2a:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <EXTI0_1_IRQHandler+0x18>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fbe5 	bl	80005fc <LED_Display_Color>
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000000 	.word	0x20000000

08000e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e48:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e4c:	f7ff fff6 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	@ (8000e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <LoopForever+0xe>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	@ (8000e94 <LoopForever+0x16>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e76:	f002 fd27 	bl	80038c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e7a:	f7ff fc83 	bl	8000784 <main>

08000e7e <LoopForever>:

LoopForever:
  b LoopForever
 8000e7e:	e7fe      	b.n	8000e7e <LoopForever>
  ldr   r0, =_estack
 8000e80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e8c:	080039d8 	.word	0x080039d8
  ldr r2, =_sbss
 8000e90:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000e94:	20000174 	.word	0x20000174

08000e98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_Init+0x3c>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_Init+0x3c>)
 8000eae:	2180      	movs	r1, #128	@ 0x80
 8000eb0:	0049      	lsls	r1, r1, #1
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f810 	bl	8000edc <HAL_InitTick>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e001      	b.n	8000ecc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fe46 	bl	8000b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000eec:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <HAL_InitTick+0x88>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d02b      	beq.n	8000f4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <HAL_InitTick+0x8c>)
 8000ef6:	681c      	ldr	r4, [r3, #0]
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <HAL_InitTick+0x88>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	0019      	movs	r1, r3
 8000efe:	23fa      	movs	r3, #250	@ 0xfa
 8000f00:	0098      	lsls	r0, r3, #2
 8000f02:	f7ff f8fd 	bl	8000100 <__udivsi3>
 8000f06:	0003      	movs	r3, r0
 8000f08:	0019      	movs	r1, r3
 8000f0a:	0020      	movs	r0, r4
 8000f0c:	f7ff f8f8 	bl	8000100 <__udivsi3>
 8000f10:	0003      	movs	r3, r0
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 f919 	bl	800114a <HAL_SYSTICK_Config>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d112      	bne.n	8000f42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d80a      	bhi.n	8000f38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	2301      	movs	r3, #1
 8000f26:	425b      	negs	r3, r3
 8000f28:	2200      	movs	r2, #0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 f8e8 	bl	8001100 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_InitTick+0x90>)
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e00d      	b.n	8000f54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f38:	230f      	movs	r3, #15
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e008      	b.n	8000f54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f42:	230f      	movs	r3, #15
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e003      	b.n	8000f54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f54:	230f      	movs	r3, #15
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	781b      	ldrb	r3, [r3, #0]
}
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b005      	add	sp, #20
 8000f60:	bd90      	pop	{r4, r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	20000018 	.word	0x20000018
 8000f68:	20000010 	.word	0x20000010
 8000f6c:	20000014 	.word	0x20000014

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	001a      	movs	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	18d2      	adds	r2, r2, r3
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_IncTick+0x20>)
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	20000018 	.word	0x20000018
 8000f90:	20000170 	.word	0x20000170

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	@ (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	20000170 	.word	0x20000170

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	0002      	movs	r2, r0
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fba:	d809      	bhi.n	8000fd0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <__NVIC_EnableIRQ+0x30>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	000a      	movs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ff0:	d828      	bhi.n	8001044 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80010b0 <__NVIC_SetPriority+0xd4>)
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	33c0      	adds	r3, #192	@ 0xc0
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	589b      	ldr	r3, [r3, r2]
 8001002:	1dfa      	adds	r2, r7, #7
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	0011      	movs	r1, r2
 8001008:	2203      	movs	r2, #3
 800100a:	400a      	ands	r2, r1
 800100c:	00d2      	lsls	r2, r2, #3
 800100e:	21ff      	movs	r1, #255	@ 0xff
 8001010:	4091      	lsls	r1, r2
 8001012:	000a      	movs	r2, r1
 8001014:	43d2      	mvns	r2, r2
 8001016:	401a      	ands	r2, r3
 8001018:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	22ff      	movs	r2, #255	@ 0xff
 8001020:	401a      	ands	r2, r3
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	0018      	movs	r0, r3
 8001028:	2303      	movs	r3, #3
 800102a:	4003      	ands	r3, r0
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001030:	481f      	ldr	r0, [pc, #124]	@ (80010b0 <__NVIC_SetPriority+0xd4>)
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b25b      	sxtb	r3, r3
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	430a      	orrs	r2, r1
 800103c:	33c0      	adds	r3, #192	@ 0xc0
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001042:	e031      	b.n	80010a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <__NVIC_SetPriority+0xd8>)
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	0019      	movs	r1, r3
 800104c:	230f      	movs	r3, #15
 800104e:	400b      	ands	r3, r1
 8001050:	3b08      	subs	r3, #8
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3306      	adds	r3, #6
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	3304      	adds	r3, #4
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1dfa      	adds	r2, r7, #7
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	0011      	movs	r1, r2
 8001064:	2203      	movs	r2, #3
 8001066:	400a      	ands	r2, r1
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	21ff      	movs	r1, #255	@ 0xff
 800106c:	4091      	lsls	r1, r2
 800106e:	000a      	movs	r2, r1
 8001070:	43d2      	mvns	r2, r2
 8001072:	401a      	ands	r2, r3
 8001074:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	22ff      	movs	r2, #255	@ 0xff
 800107c:	401a      	ands	r2, r3
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	0018      	movs	r0, r3
 8001084:	2303      	movs	r3, #3
 8001086:	4003      	ands	r3, r0
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108c:	4809      	ldr	r0, [pc, #36]	@ (80010b4 <__NVIC_SetPriority+0xd8>)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	001c      	movs	r4, r3
 8001094:	230f      	movs	r3, #15
 8001096:	4023      	ands	r3, r4
 8001098:	3b08      	subs	r3, #8
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	430a      	orrs	r2, r1
 800109e:	3306      	adds	r3, #6
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	18c3      	adds	r3, r0, r3
 80010a4:	3304      	adds	r3, #4
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b003      	add	sp, #12
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1e5a      	subs	r2, r3, #1
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	045b      	lsls	r3, r3, #17
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d301      	bcc.n	80010d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010cc:	2301      	movs	r3, #1
 80010ce:	e010      	b.n	80010f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <SysTick_Config+0x44>)
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	3a01      	subs	r2, #1
 80010d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d8:	2301      	movs	r3, #1
 80010da:	425b      	negs	r3, r3
 80010dc:	2103      	movs	r1, #3
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff ff7c 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <SysTick_Config+0x44>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SysTick_Config+0x44>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b002      	add	sp, #8
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	210f      	movs	r1, #15
 800110c:	187b      	adds	r3, r7, r1
 800110e:	1c02      	adds	r2, r0, #0
 8001110:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	187b      	adds	r3, r7, r1
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b004      	add	sp, #16
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	0002      	movs	r2, r0
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b25b      	sxtb	r3, r3
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff ff33 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff ffaf 	bl	80010b8 <SysTick_Config>
 800115a:	0003      	movs	r3, r0
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e147      	b.n	8001404 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d100      	bne.n	800118c <HAL_GPIO_Init+0x28>
 800118a:	e138      	b.n	80013fe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2203      	movs	r2, #3
 8001192:	4013      	ands	r3, r2
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2203      	movs	r2, #3
 800119e:	4013      	ands	r3, r2
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	43da      	mvns	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	409a      	lsls	r2, r3
 80011c6:	0013      	movs	r3, r2
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	2201      	movs	r2, #1
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2203      	movs	r2, #3
 800120c:	4013      	ands	r3, r2
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	43da      	mvns	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2203      	movs	r2, #3
 8001248:	4013      	ands	r3, r2
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	58d3      	ldr	r3, [r2, r3]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2207      	movs	r2, #7
 8001260:	4013      	ands	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2107      	movs	r1, #7
 800127a:	400b      	ands	r3, r1
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	6939      	ldr	r1, [r7, #16]
 8001294:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2203      	movs	r2, #3
 80012b4:	401a      	ands	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	23c0      	movs	r3, #192	@ 0xc0
 80012d0:	029b      	lsls	r3, r3, #10
 80012d2:	4013      	ands	r3, r2
 80012d4:	d100      	bne.n	80012d8 <HAL_GPIO_Init+0x174>
 80012d6:	e092      	b.n	80013fe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012d8:	4a50      	ldr	r2, [pc, #320]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3318      	adds	r3, #24
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	589b      	ldr	r3, [r3, r2]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2203      	movs	r2, #3
 80012ea:	4013      	ands	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	220f      	movs	r2, #15
 80012f0:	409a      	lsls	r2, r3
 80012f2:	0013      	movs	r3, r2
 80012f4:	43da      	mvns	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	23a0      	movs	r3, #160	@ 0xa0
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	429a      	cmp	r2, r3
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x1ca>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a45      	ldr	r2, [pc, #276]	@ (8001420 <HAL_GPIO_Init+0x2bc>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x1c6>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a44      	ldr	r2, [pc, #272]	@ (8001424 <HAL_GPIO_Init+0x2c0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x1c2>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a43      	ldr	r2, [pc, #268]	@ (8001428 <HAL_GPIO_Init+0x2c4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x1be>
 800131e:	2303      	movs	r3, #3
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x1cc>
 8001322:	2305      	movs	r3, #5
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x1cc>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x1cc>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x1cc>
 800132e:	2300      	movs	r3, #0
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	2103      	movs	r1, #3
 8001334:	400a      	ands	r2, r1
 8001336:	00d2      	lsls	r2, r2, #3
 8001338:	4093      	lsls	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001340:	4936      	ldr	r1, [pc, #216]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3318      	adds	r3, #24
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800134e:	4b33      	ldr	r3, [pc, #204]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	035b      	lsls	r3, r3, #13
 8001366:	4013      	ands	r3, r2
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43da      	mvns	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	039b      	lsls	r3, r3, #14
 8001390:	4013      	ands	r3, r2
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013a2:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 80013a4:	2384      	movs	r3, #132	@ 0x84
 80013a6:	58d3      	ldr	r3, [r2, r3]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43da      	mvns	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	4013      	ands	r3, r2
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c8:	4914      	ldr	r1, [pc, #80]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 80013ca:	2284      	movs	r2, #132	@ 0x84
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	58d3      	ldr	r3, [r2, r3]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	025b      	lsls	r3, r3, #9
 80013ea:	4013      	ands	r3, r2
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013f6:	4909      	ldr	r1, [pc, #36]	@ (800141c <HAL_GPIO_Init+0x2b8>)
 80013f8:	2280      	movs	r2, #128	@ 0x80
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	40da      	lsrs	r2, r3
 800140c:	1e13      	subs	r3, r2, #0
 800140e:	d000      	beq.n	8001412 <HAL_GPIO_Init+0x2ae>
 8001410:	e6b0      	b.n	8001174 <HAL_GPIO_Init+0x10>
  }
}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b006      	add	sp, #24
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021800 	.word	0x40021800
 8001420:	50000400 	.word	0x50000400
 8001424:	50000800 	.word	0x50000800
 8001428:	50000c00 	.word	0x50000c00

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	0008      	movs	r0, r1
 8001436:	0011      	movs	r1, r2
 8001438:	1cbb      	adds	r3, r7, #2
 800143a:	1c02      	adds	r2, r0, #0
 800143c:	801a      	strh	r2, [r3, #0]
 800143e:	1c7b      	adds	r3, r7, #1
 8001440:	1c0a      	adds	r2, r1, #0
 8001442:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001444:	1c7b      	adds	r3, r7, #1
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144c:	1cbb      	adds	r3, r7, #2
 800144e:	881a      	ldrh	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001456:	1cbb      	adds	r3, r7, #2
 8001458:	881a      	ldrh	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	0002      	movs	r2, r0
 8001470:	1dbb      	adds	r3, r7, #6
 8001472:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	1dba      	adds	r2, r7, #6
 800147a:	8812      	ldrh	r2, [r2, #0]
 800147c:	4013      	ands	r3, r2
 800147e:	d008      	beq.n	8001492 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001482:	1dba      	adds	r2, r7, #6
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001488:	1dbb      	adds	r3, r7, #6
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	0018      	movs	r0, r3
 800148e:	f000 f815 	bl	80014bc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	1dba      	adds	r2, r7, #6
 8001498:	8812      	ldrh	r2, [r2, #0]
 800149a:	4013      	ands	r3, r2
 800149c:	d008      	beq.n	80014b0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80014a0:	1dba      	adds	r2, r7, #6
 80014a2:	8812      	ldrh	r2, [r2, #0]
 80014a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80014a6:	1dbb      	adds	r3, r7, #6
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff fc7a 	bl	8000da4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021800 	.word	0x40021800

080014bc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	0002      	movs	r2, r0
 80014c4:	1dbb      	adds	r3, r7, #6
 80014c6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80014c8:	46c0      	nop			@ (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80014de:	4013      	ands	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	2380      	movs	r3, #128	@ 0x80
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d11f      	bne.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	0013      	movs	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	189b      	adds	r3, r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4912      	ldr	r1, [pc, #72]	@ (800154c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001502:	0018      	movs	r0, r3
 8001504:	f7fe fdfc 	bl	8000100 <__udivsi3>
 8001508:	0003      	movs	r3, r0
 800150a:	3301      	adds	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150e:	e008      	b.n	8001522 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3b01      	subs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e001      	b.n	8001522 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e009      	b.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	401a      	ands	r2, r3
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	429a      	cmp	r2, r3
 8001532:	d0ed      	beq.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b004      	add	sp, #16
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	40007000 	.word	0x40007000
 8001544:	fffff9ff 	.word	0xfffff9ff
 8001548:	20000010 	.word	0x20000010
 800154c:	000f4240 	.word	0x000f4240

08001550 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	23e0      	movs	r3, #224	@ 0xe0
 800155a:	01db      	lsls	r3, r3, #7
 800155c:	4013      	ands	r3, r2
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e2f3      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2201      	movs	r2, #1
 8001580:	4013      	ands	r3, r2
 8001582:	d100      	bne.n	8001586 <HAL_RCC_OscConfig+0x1e>
 8001584:	e07c      	b.n	8001680 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001586:	4bc3      	ldr	r3, [pc, #780]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2238      	movs	r2, #56	@ 0x38
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001590:	4bc0      	ldr	r3, [pc, #768]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2203      	movs	r2, #3
 8001596:	4013      	ands	r3, r2
 8001598:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b10      	cmp	r3, #16
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3e>
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d002      	beq.n	80015ac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d10b      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	4bb9      	ldr	r3, [pc, #740]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	029b      	lsls	r3, r3, #10
 80015b4:	4013      	ands	r3, r2
 80015b6:	d062      	beq.n	800167e <HAL_RCC_OscConfig+0x116>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d15e      	bne.n	800167e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e2ce      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_OscConfig+0x78>
 80015d0:	4bb0      	ldr	r3, [pc, #704]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4baf      	ldr	r3, [pc, #700]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	2180      	movs	r1, #128	@ 0x80
 80015d8:	0249      	lsls	r1, r1, #9
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e020      	b.n	8001622 <HAL_RCC_OscConfig+0xba>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	23a0      	movs	r3, #160	@ 0xa0
 80015e6:	02db      	lsls	r3, r3, #11
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d10e      	bne.n	800160a <HAL_RCC_OscConfig+0xa2>
 80015ec:	4ba9      	ldr	r3, [pc, #676]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4ba8      	ldr	r3, [pc, #672]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	2180      	movs	r1, #128	@ 0x80
 80015f4:	02c9      	lsls	r1, r1, #11
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	4ba6      	ldr	r3, [pc, #664]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4ba5      	ldr	r3, [pc, #660]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	0249      	lsls	r1, r1, #9
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e00b      	b.n	8001622 <HAL_RCC_OscConfig+0xba>
 800160a:	4ba2      	ldr	r3, [pc, #648]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4ba1      	ldr	r3, [pc, #644]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001610:	49a1      	ldr	r1, [pc, #644]	@ (8001898 <HAL_RCC_OscConfig+0x330>)
 8001612:	400a      	ands	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	4b9f      	ldr	r3, [pc, #636]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b9e      	ldr	r3, [pc, #632]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800161c:	499f      	ldr	r1, [pc, #636]	@ (800189c <HAL_RCC_OscConfig+0x334>)
 800161e:	400a      	ands	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d014      	beq.n	8001654 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fcb3 	bl	8000f94 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fcae 	bl	8000f94 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	@ 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e28d      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001646:	4b93      	ldr	r3, [pc, #588]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	@ 0x80
 800164c:	029b      	lsls	r3, r3, #10
 800164e:	4013      	ands	r3, r2
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0xcc>
 8001652:	e015      	b.n	8001680 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fc9e 	bl	8000f94 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165e:	f7ff fc99 	bl	8000f94 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	@ 0x64
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e278      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001670:	4b88      	ldr	r3, [pc, #544]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	029b      	lsls	r3, r3, #10
 8001678:	4013      	ands	r3, r2
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0xf6>
 800167c:	e000      	b.n	8001680 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d100      	bne.n	800168c <HAL_RCC_OscConfig+0x124>
 800168a:	e099      	b.n	80017c0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168c:	4b81      	ldr	r3, [pc, #516]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2238      	movs	r2, #56	@ 0x38
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001696:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2203      	movs	r2, #3
 800169c:	4013      	ands	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d102      	bne.n	80016ac <HAL_RCC_OscConfig+0x144>
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d002      	beq.n	80016b2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d135      	bne.n	800171e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b2:	4b78      	ldr	r3, [pc, #480]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	2380      	movs	r3, #128	@ 0x80
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x162>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e24b      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b72      	ldr	r3, [pc, #456]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4a74      	ldr	r2, [pc, #464]	@ (80018a0 <HAL_RCC_OscConfig+0x338>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	0019      	movs	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	021a      	lsls	r2, r3, #8
 80016da:	4b6e      	ldr	r3, [pc, #440]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d112      	bne.n	800170c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a6e      	ldr	r2, [pc, #440]	@ (80018a4 <HAL_RCC_OscConfig+0x33c>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	0019      	movs	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	4b67      	ldr	r3, [pc, #412]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016fa:	4b66      	ldr	r3, [pc, #408]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0adb      	lsrs	r3, r3, #11
 8001700:	2207      	movs	r2, #7
 8001702:	4013      	ands	r3, r2
 8001704:	4a68      	ldr	r2, [pc, #416]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001706:	40da      	lsrs	r2, r3
 8001708:	4b68      	ldr	r3, [pc, #416]	@ (80018ac <HAL_RCC_OscConfig+0x344>)
 800170a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800170c:	4b68      	ldr	r3, [pc, #416]	@ (80018b0 <HAL_RCC_OscConfig+0x348>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff fbe3 	bl	8000edc <HAL_InitTick>
 8001716:	1e03      	subs	r3, r0, #0
 8001718:	d051      	beq.n	80017be <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e221      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d030      	beq.n	8001788 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001726:	4b5b      	ldr	r3, [pc, #364]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a5e      	ldr	r2, [pc, #376]	@ (80018a4 <HAL_RCC_OscConfig+0x33c>)
 800172c:	4013      	ands	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	4b57      	ldr	r3, [pc, #348]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800173a:	4b56      	ldr	r3, [pc, #344]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b55      	ldr	r3, [pc, #340]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	0049      	lsls	r1, r1, #1
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fc24 	bl	8000f94 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fc1f 	bl	8000f94 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1fe      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001764:	4b4b      	ldr	r3, [pc, #300]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	@ 0x80
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4013      	ands	r3, r2
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b48      	ldr	r3, [pc, #288]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a4a      	ldr	r2, [pc, #296]	@ (80018a0 <HAL_RCC_OscConfig+0x338>)
 8001776:	4013      	ands	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	021a      	lsls	r2, r3, #8
 8001780:	4b44      	ldr	r3, [pc, #272]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001782:	430a      	orrs	r2, r1
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	e01b      	b.n	80017c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001788:	4b42      	ldr	r3, [pc, #264]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b41      	ldr	r3, [pc, #260]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800178e:	4949      	ldr	r1, [pc, #292]	@ (80018b4 <HAL_RCC_OscConfig+0x34c>)
 8001790:	400a      	ands	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fbfe 	bl	8000f94 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff fbf9 	bl	8000f94 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1d8      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b0:	4b38      	ldr	r3, [pc, #224]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4013      	ands	r3, r2
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x236>
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2208      	movs	r2, #8
 80017c6:	4013      	ands	r3, r2
 80017c8:	d047      	beq.n	800185a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017ca:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2238      	movs	r2, #56	@ 0x38
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b18      	cmp	r3, #24
 80017d4:	d10a      	bne.n	80017ec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80017d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	d03c      	beq.n	800185a <HAL_RCC_OscConfig+0x2f2>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d138      	bne.n	800185a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e1ba      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d019      	beq.n	8001828 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017f8:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fbc8 	bl	8000f94 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff fbc3 	bl	8000f94 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1a2      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d0f1      	beq.n	800180a <HAL_RCC_OscConfig+0x2a2>
 8001826:	e018      	b.n	800185a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800182a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800182e:	2101      	movs	r1, #1
 8001830:	438a      	bics	r2, r1
 8001832:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fbae 	bl	8000f94 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff fba9 	bl	8000f94 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e188      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d1f1      	bne.n	800183e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x2fe>
 8001864:	e0c6      	b.n	80019f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001866:	231f      	movs	r3, #31
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2238      	movs	r2, #56	@ 0x38
 8001874:	4013      	ands	r3, r2
 8001876:	2b20      	cmp	r3, #32
 8001878:	d11e      	bne.n	80018b8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_RCC_OscConfig+0x32c>)
 800187c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d100      	bne.n	8001886 <HAL_RCC_OscConfig+0x31e>
 8001884:	e0b6      	b.n	80019f4 <HAL_RCC_OscConfig+0x48c>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d000      	beq.n	8001890 <HAL_RCC_OscConfig+0x328>
 800188e:	e0b1      	b.n	80019f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e166      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
 8001894:	40021000 	.word	0x40021000
 8001898:	fffeffff 	.word	0xfffeffff
 800189c:	fffbffff 	.word	0xfffbffff
 80018a0:	ffff80ff 	.word	0xffff80ff
 80018a4:	ffffc7ff 	.word	0xffffc7ff
 80018a8:	00f42400 	.word	0x00f42400
 80018ac:	20000010 	.word	0x20000010
 80018b0:	20000014 	.word	0x20000014
 80018b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018b8:	4bac      	ldr	r3, [pc, #688]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 80018ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	055b      	lsls	r3, r3, #21
 80018c0:	4013      	ands	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x360>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x362>
 80018c8:	2300      	movs	r3, #0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d011      	beq.n	80018f2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4ba7      	ldr	r3, [pc, #668]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 80018d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018d2:	4ba6      	ldr	r3, [pc, #664]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 80018d4:	2180      	movs	r1, #128	@ 0x80
 80018d6:	0549      	lsls	r1, r1, #21
 80018d8:	430a      	orrs	r2, r1
 80018da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018dc:	4ba3      	ldr	r3, [pc, #652]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 80018de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	055b      	lsls	r3, r3, #21
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018ea:	231f      	movs	r3, #31
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f2:	4b9f      	ldr	r3, [pc, #636]	@ (8001b70 <HAL_RCC_OscConfig+0x608>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	@ 0x80
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	d11a      	bne.n	8001934 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018fe:	4b9c      	ldr	r3, [pc, #624]	@ (8001b70 <HAL_RCC_OscConfig+0x608>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b9b      	ldr	r3, [pc, #620]	@ (8001b70 <HAL_RCC_OscConfig+0x608>)
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	0049      	lsls	r1, r1, #1
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800190c:	f7ff fb42 	bl	8000f94 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001916:	f7ff fb3d 	bl	8000f94 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e11c      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001928:	4b91      	ldr	r3, [pc, #580]	@ (8001b70 <HAL_RCC_OscConfig+0x608>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	@ 0x80
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4013      	ands	r3, r2
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x3e2>
 800193c:	4b8b      	ldr	r3, [pc, #556]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 800193e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001940:	4b8a      	ldr	r3, [pc, #552]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001942:	2101      	movs	r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001948:	e01c      	b.n	8001984 <HAL_RCC_OscConfig+0x41c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x404>
 8001952:	4b86      	ldr	r3, [pc, #536]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001954:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001956:	4b85      	ldr	r3, [pc, #532]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001958:	2104      	movs	r1, #4
 800195a:	430a      	orrs	r2, r1
 800195c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800195e:	4b83      	ldr	r3, [pc, #524]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001960:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001962:	4b82      	ldr	r3, [pc, #520]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001964:	2101      	movs	r1, #1
 8001966:	430a      	orrs	r2, r1
 8001968:	65da      	str	r2, [r3, #92]	@ 0x5c
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0x41c>
 800196c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 800196e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001970:	4b7e      	ldr	r3, [pc, #504]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001978:	4b7c      	ldr	r3, [pc, #496]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 800197a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800197c:	4b7b      	ldr	r3, [pc, #492]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 800197e:	2104      	movs	r1, #4
 8001980:	438a      	bics	r2, r1
 8001982:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d014      	beq.n	80019b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fb02 	bl	8000f94 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001994:	e009      	b.n	80019aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff fafd 	bl	8000f94 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	4a74      	ldr	r2, [pc, #464]	@ (8001b74 <HAL_RCC_OscConfig+0x60c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0db      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019aa:	4b70      	ldr	r3, [pc, #448]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 80019ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x42e>
 80019b4:	e013      	b.n	80019de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff faed 	bl	8000f94 <HAL_GetTick>
 80019ba:	0003      	movs	r3, r0
 80019bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019be:	e009      	b.n	80019d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff fae8 	bl	8000f94 <HAL_GetTick>
 80019c4:	0002      	movs	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001b74 <HAL_RCC_OscConfig+0x60c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0c6      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d4:	4b65      	ldr	r3, [pc, #404]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 80019d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019de:	231f      	movs	r3, #31
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019e8:	4b60      	ldr	r3, [pc, #384]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 80019ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019ec:	4b5f      	ldr	r3, [pc, #380]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 80019ee:	4962      	ldr	r1, [pc, #392]	@ (8001b78 <HAL_RCC_OscConfig+0x610>)
 80019f0:	400a      	ands	r2, r1
 80019f2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d100      	bne.n	80019fe <HAL_RCC_OscConfig+0x496>
 80019fc:	e0b0      	b.n	8001b60 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2238      	movs	r2, #56	@ 0x38
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d100      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4a4>
 8001a0a:	e078      	b.n	8001afe <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d153      	bne.n	8001abc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b55      	ldr	r3, [pc, #340]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b54      	ldr	r3, [pc, #336]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a1a:	4958      	ldr	r1, [pc, #352]	@ (8001b7c <HAL_RCC_OscConfig+0x614>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fab8 	bl	8000f94 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff fab3 	bl	8000f94 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e092      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	049b      	lsls	r3, r3, #18
 8001a44:	4013      	ands	r3, r2
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a48:	4b48      	ldr	r3, [pc, #288]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b80 <HAL_RCC_OscConfig+0x618>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	4b3e      	ldr	r3, [pc, #248]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a72:	430a      	orrs	r2, r1
 8001a74:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a76:	4b3d      	ldr	r3, [pc, #244]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a7c:	2180      	movs	r1, #128	@ 0x80
 8001a7e:	0449      	lsls	r1, r1, #17
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a84:	4b39      	ldr	r3, [pc, #228]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	4b38      	ldr	r3, [pc, #224]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	0549      	lsls	r1, r1, #21
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa7f 	bl	8000f94 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff fa7a 	bl	8000f94 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e059      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	049b      	lsls	r3, r3, #18
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x534>
 8001aba:	e051      	b.n	8001b60 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001ac2:	492e      	ldr	r1, [pc, #184]	@ (8001b7c <HAL_RCC_OscConfig+0x614>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa64 	bl	8000f94 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff fa5f 	bl	8000f94 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e03e      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	049b      	lsls	r3, r3, #18
 8001aec:	4013      	ands	r3, r2
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001af6:	4923      	ldr	r1, [pc, #140]	@ (8001b84 <HAL_RCC_OscConfig+0x61c>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	e030      	b.n	8001b60 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e02b      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_RCC_OscConfig+0x604>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2203      	movs	r2, #3
 8001b14:	401a      	ands	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d11e      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2270      	movs	r2, #112	@ 0x70
 8001b22:	401a      	ands	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d117      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	23fe      	movs	r3, #254	@ 0xfe
 8001b30:	01db      	lsls	r3, r3, #7
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b38:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d10e      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	23f8      	movs	r3, #248	@ 0xf8
 8001b42:	039b      	lsls	r3, r3, #14
 8001b44:	401a      	ands	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d106      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	0f5b      	lsrs	r3, r3, #29
 8001b52:	075a      	lsls	r2, r3, #29
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b008      	add	sp, #32
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40007000 	.word	0x40007000
 8001b74:	00001388 	.word	0x00001388
 8001b78:	efffffff 	.word	0xefffffff
 8001b7c:	feffffff 	.word	0xfeffffff
 8001b80:	1fc1808c 	.word	0x1fc1808c
 8001b84:	effefffc 	.word	0xeffefffc

08001b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0e9      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b76      	ldr	r3, [pc, #472]	@ (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d91e      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b73      	ldr	r3, [pc, #460]	@ (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2207      	movs	r2, #7
 8001bb0:	4393      	bics	r3, r2
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4b70      	ldr	r3, [pc, #448]	@ (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bbc:	f7ff f9ea 	bl	8000f94 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bc4:	e009      	b.n	8001bda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f7ff f9e5 	bl	8000f94 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d7c <HAL_RCC_ClockConfig+0x1f4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e0ca      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bda:	4b67      	ldr	r3, [pc, #412]	@ (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2207      	movs	r2, #7
 8001be0:	4013      	ands	r3, r2
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d015      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d006      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bfc:	4b60      	ldr	r3, [pc, #384]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	4b5f      	ldr	r3, [pc, #380]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c02:	21e0      	movs	r1, #224	@ 0xe0
 8001c04:	01c9      	lsls	r1, r1, #7
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4a5d      	ldr	r2, [pc, #372]	@ (8001d84 <HAL_RCC_ClockConfig+0x1fc>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	4b59      	ldr	r3, [pc, #356]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4013      	ands	r3, r2
 8001c26:	d057      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c30:	4b53      	ldr	r3, [pc, #332]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	029b      	lsls	r3, r3, #10
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d12b      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e097      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c48:	4b4d      	ldr	r3, [pc, #308]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	049b      	lsls	r3, r3, #18
 8001c50:	4013      	ands	r3, r2
 8001c52:	d11f      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e08b      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c60:	4b47      	ldr	r3, [pc, #284]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d113      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e07f      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c78:	4b41      	ldr	r3, [pc, #260]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d108      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e074      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c86:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e06d      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c94:	4b3a      	ldr	r3, [pc, #232]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2207      	movs	r2, #7
 8001c9a:	4393      	bics	r3, r2
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca8:	f7ff f974 	bl	8000f94 <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb0:	e009      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb2:	f7ff f96f 	bl	8000f94 <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8001d7c <HAL_RCC_ClockConfig+0x1f4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e054      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2238      	movs	r2, #56	@ 0x38
 8001ccc:	401a      	ands	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1ec      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2207      	movs	r2, #7
 8001cde:	4013      	ands	r3, r2
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d21e      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	@ (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2207      	movs	r2, #7
 8001cec:	4393      	bics	r3, r2
 8001cee:	0019      	movs	r1, r3
 8001cf0:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff f94c 	bl	8000f94 <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d00:	e009      	b.n	8001d16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d02:	f7ff f947 	bl	8000f94 <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d7c <HAL_RCC_ClockConfig+0x1f4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e02c      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1ee      	bne.n	8001d02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2204      	movs	r2, #4
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <HAL_RCC_ClockConfig+0x200>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d42:	f000 f829 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8001d46:	0001      	movs	r1, r0
 8001d48:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	220f      	movs	r2, #15
 8001d50:	401a      	ands	r2, r3
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <HAL_RCC_ClockConfig+0x204>)
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	58d3      	ldr	r3, [r2, r3]
 8001d58:	221f      	movs	r2, #31
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	000a      	movs	r2, r1
 8001d5e:	40da      	lsrs	r2, r3
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_RCC_ClockConfig+0x208>)
 8001d62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_RCC_ClockConfig+0x20c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff f8b7 	bl	8000edc <HAL_InitTick>
 8001d6e:	0003      	movs	r3, r0
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b004      	add	sp, #16
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	00001388 	.word	0x00001388
 8001d80:	40021000 	.word	0x40021000
 8001d84:	fffff0ff 	.word	0xfffff0ff
 8001d88:	ffff8fff 	.word	0xffff8fff
 8001d8c:	08003948 	.word	0x08003948
 8001d90:	20000010 	.word	0x20000010
 8001d94:	20000014 	.word	0x20000014

08001d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2238      	movs	r2, #56	@ 0x38
 8001da4:	4013      	ands	r3, r2
 8001da6:	d10f      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001da8:	4b39      	ldr	r3, [pc, #228]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0adb      	lsrs	r3, r3, #11
 8001dae:	2207      	movs	r2, #7
 8001db0:	4013      	ands	r3, r2
 8001db2:	2201      	movs	r2, #1
 8001db4:	409a      	lsls	r2, r3
 8001db6:	0013      	movs	r3, r2
 8001db8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	4835      	ldr	r0, [pc, #212]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dbe:	f7fe f99f 	bl	8000100 <__udivsi3>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	e05d      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc8:	4b31      	ldr	r3, [pc, #196]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2238      	movs	r2, #56	@ 0x38
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d102      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dd4:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x100>)
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e054      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dda:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2238      	movs	r2, #56	@ 0x38
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d138      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001de6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2203      	movs	r2, #3
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df0:	4b27      	ldr	r3, [pc, #156]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	2207      	movs	r2, #7
 8001df8:	4013      	ands	r3, r2
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d10d      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	4824      	ldr	r0, [pc, #144]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e08:	f7fe f97a 	bl	8000100 <__udivsi3>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	0019      	movs	r1, r3
 8001e10:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	227f      	movs	r2, #127	@ 0x7f
 8001e18:	4013      	ands	r3, r2
 8001e1a:	434b      	muls	r3, r1
 8001e1c:	617b      	str	r3, [r7, #20]
        break;
 8001e1e:	e00d      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	481c      	ldr	r0, [pc, #112]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e24:	f7fe f96c 	bl	8000100 <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	227f      	movs	r2, #127	@ 0x7f
 8001e34:	4013      	ands	r3, r2
 8001e36:	434b      	muls	r3, r1
 8001e38:	617b      	str	r3, [r7, #20]
        break;
 8001e3a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0f5b      	lsrs	r3, r3, #29
 8001e42:	2207      	movs	r2, #7
 8001e44:	4013      	ands	r3, r2
 8001e46:	3301      	adds	r3, #1
 8001e48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f7fe f957 	bl	8000100 <__udivsi3>
 8001e52:	0003      	movs	r3, r0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e015      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e58:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2238      	movs	r2, #56	@ 0x38
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d103      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2238      	movs	r2, #56	@ 0x38
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b18      	cmp	r3, #24
 8001e76:	d103      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e78:	23fa      	movs	r3, #250	@ 0xfa
 8001e7a:	01db      	lsls	r3, r3, #7
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e001      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e84:	693b      	ldr	r3, [r7, #16]
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b006      	add	sp, #24
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	40021000 	.word	0x40021000
 8001e94:	00f42400 	.word	0x00f42400
 8001e98:	007a1200 	.word	0x007a1200

08001e9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea0:	4b02      	ldr	r3, [pc, #8]	@ (8001eac <HAL_RCC_GetHCLKFreq+0x10>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	20000010 	.word	0x20000010

08001eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001eb4:	f7ff fff2 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001eb8:	0004      	movs	r4, r0
 8001eba:	f7ff fb49 	bl	8001550 <LL_RCC_GetAPB1Prescaler>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	0b1a      	lsrs	r2, r3, #12
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	58d3      	ldr	r3, [r2, r3]
 8001ec8:	221f      	movs	r2, #31
 8001eca:	4013      	ands	r3, r2
 8001ecc:	40dc      	lsrs	r4, r3
 8001ece:	0023      	movs	r3, r4
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	08003988 	.word	0x08003988

08001edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ee4:	2313      	movs	r3, #19
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eec:	2312      	movs	r3, #18
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	029b      	lsls	r3, r3, #10
 8001efc:	4013      	ands	r3, r2
 8001efe:	d100      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f00:	e0a3      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2011      	movs	r0, #17
 8001f04:	183b      	adds	r3, r7, r0
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	4013      	ands	r3, r2
 8001f14:	d110      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b7c      	ldr	r3, [pc, #496]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	0549      	lsls	r1, r1, #21
 8001f20:	430a      	orrs	r2, r1
 8001f22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f24:	4b78      	ldr	r3, [pc, #480]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	055b      	lsls	r3, r3, #21
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f32:	183b      	adds	r3, r7, r0
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f38:	4b74      	ldr	r3, [pc, #464]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b73      	ldr	r3, [pc, #460]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f3e:	2180      	movs	r1, #128	@ 0x80
 8001f40:	0049      	lsls	r1, r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f46:	f7ff f825 	bl	8000f94 <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f50:	f7ff f820 	bl	8000f94 <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d904      	bls.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f5e:	2313      	movs	r3, #19
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	2203      	movs	r2, #3
 8001f64:	701a      	strb	r2, [r3, #0]
        break;
 8001f66:	e005      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f68:	4b68      	ldr	r3, [pc, #416]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	d0ed      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f74:	2313      	movs	r3, #19
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d154      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f7e:	4b62      	ldr	r3, [pc, #392]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f82:	23c0      	movs	r3, #192	@ 0xc0
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d019      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d014      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9e:	4a5c      	ldr	r2, [pc, #368]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fa4:	4b58      	ldr	r3, [pc, #352]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fa8:	4b57      	ldr	r3, [pc, #348]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001faa:	2180      	movs	r1, #128	@ 0x80
 8001fac:	0249      	lsls	r1, r1, #9
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb2:	4b55      	ldr	r3, [pc, #340]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fb6:	4b54      	ldr	r3, [pc, #336]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fb8:	4956      	ldr	r1, [pc, #344]	@ (8002114 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001fba:	400a      	ands	r2, r1
 8001fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fbe:	4b52      	ldr	r3, [pc, #328]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d016      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7fe ffe2 	bl	8000f94 <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd4:	e00c      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe ffdd 	bl	8000f94 <HAL_GetTick>
 8001fda:	0002      	movs	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d904      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001fe6:	2313      	movs	r3, #19
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	2203      	movs	r2, #3
 8001fec:	701a      	strb	r2, [r3, #0]
            break;
 8001fee:	e004      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff0:	4b45      	ldr	r3, [pc, #276]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d0ed      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001ffa:	2313      	movs	r3, #19
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10a      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002004:	4b40      	ldr	r3, [pc, #256]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002008:	4a41      	ldr	r2, [pc, #260]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	4b3d      	ldr	r3, [pc, #244]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002014:	430a      	orrs	r2, r1
 8002016:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002018:	e00c      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800201a:	2312      	movs	r3, #18
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	2213      	movs	r2, #19
 8002020:	18ba      	adds	r2, r7, r2
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e005      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002028:	2312      	movs	r3, #18
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2213      	movs	r2, #19
 800202e:	18ba      	adds	r2, r7, r2
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002034:	2311      	movs	r3, #17
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b32      	ldr	r3, [pc, #200]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002040:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002042:	4b31      	ldr	r3, [pc, #196]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002044:	4935      	ldr	r1, [pc, #212]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002046:	400a      	ands	r2, r1
 8002048:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	4013      	ands	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002054:	4b2c      	ldr	r3, [pc, #176]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	2203      	movs	r2, #3
 800205a:	4393      	bics	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4b29      	ldr	r3, [pc, #164]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002064:	430a      	orrs	r2, r1
 8002066:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2220      	movs	r2, #32
 800206e:	4013      	ands	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002072:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002076:	4a2a      	ldr	r2, [pc, #168]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002078:	4013      	ands	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002082:	430a      	orrs	r2, r1
 8002084:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	01db      	lsls	r3, r3, #7
 800208e:	4013      	ands	r3, r2
 8002090:	d015      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002092:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	0899      	lsrs	r1, r3, #2
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	4b1a      	ldr	r3, [pc, #104]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	05db      	lsls	r3, r3, #23
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020b0:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020b6:	2180      	movs	r1, #128	@ 0x80
 80020b8:	0249      	lsls	r1, r1, #9
 80020ba:	430a      	orrs	r2, r1
 80020bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	4013      	ands	r3, r2
 80020c8:	d016      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80020ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	4a15      	ldr	r2, [pc, #84]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	01db      	lsls	r3, r3, #7
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d106      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020f0:	2180      	movs	r1, #128	@ 0x80
 80020f2:	0249      	lsls	r1, r1, #9
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80020f8:	2312      	movs	r3, #18
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b006      	add	sp, #24
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
 8002110:	fffffcff 	.word	0xfffffcff
 8002114:	fffeffff 	.word	0xfffeffff
 8002118:	00001388 	.word	0x00001388
 800211c:	efffffff 	.word	0xefffffff
 8002120:	ffffcfff 	.word	0xffffcfff
 8002124:	ffff3fff 	.word	0xffff3fff

08002128 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d100      	bne.n	8002140 <HAL_RTC_Init+0x18>
 800213e:	e08c      	b.n	800225a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2229      	movs	r2, #41	@ 0x29
 8002144:	5c9b      	ldrb	r3, [r3, r2]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10b      	bne.n	8002164 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2228      	movs	r2, #40	@ 0x28
 8002150:	2100      	movs	r1, #0
 8002152:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2288      	movs	r2, #136	@ 0x88
 8002158:	0212      	lsls	r2, r2, #8
 800215a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0018      	movs	r0, r3
 8002160:	f7fe fd1e 	bl	8000ba0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2229      	movs	r2, #41	@ 0x29
 8002168:	2102      	movs	r1, #2
 800216a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2210      	movs	r2, #16
 8002174:	4013      	ands	r3, r2
 8002176:	2b10      	cmp	r3, #16
 8002178:	d062      	beq.n	8002240 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	22ca      	movs	r2, #202	@ 0xca
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2253      	movs	r2, #83	@ 0x53
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800218a:	250f      	movs	r5, #15
 800218c:	197c      	adds	r4, r7, r5
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	0018      	movs	r0, r3
 8002192:	f000 f9cb 	bl	800252c <RTC_EnterInitMode>
 8002196:	0003      	movs	r3, r0
 8002198:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800219a:	0028      	movs	r0, r5
 800219c:	183b      	adds	r3, r7, r0
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d12c      	bne.n	80021fe <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	492e      	ldr	r1, [pc, #184]	@ (8002268 <HAL_RTC_Init+0x140>)
 80021b0:	400a      	ands	r2, r1
 80021b2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6999      	ldr	r1, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6912      	ldr	r2, [r2, #16]
 80021da:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6919      	ldr	r1, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	041a      	lsls	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80021f0:	183c      	adds	r4, r7, r0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f9db 	bl	80025b0 <RTC_ExitInitMode>
 80021fa:	0003      	movs	r3, r0
 80021fc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80021fe:	230f      	movs	r3, #15
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d116      	bne.n	8002236 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	00d2      	lsls	r2, r2, #3
 8002214:	08d2      	lsrs	r2, r2, #3
 8002216:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6999      	ldr	r1, [r3, #24]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	22ff      	movs	r2, #255	@ 0xff
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
 800223e:	e003      	b.n	8002248 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002240:	230f      	movs	r3, #15
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002248:	230f      	movs	r3, #15
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2229      	movs	r2, #41	@ 0x29
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800225a:	230f      	movs	r3, #15
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	781b      	ldrb	r3, [r3, #0]
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b004      	add	sp, #16
 8002266:	bdb0      	pop	{r4, r5, r7, pc}
 8002268:	fb8fffbf 	.word	0xfb8fffbf

0800226c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800226c:	b5b0      	push	{r4, r5, r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2228      	movs	r2, #40	@ 0x28
 800227c:	5c9b      	ldrb	r3, [r3, r2]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_RTC_SetTime+0x1a>
 8002282:	2302      	movs	r3, #2
 8002284:	e092      	b.n	80023ac <HAL_RTC_SetTime+0x140>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2228      	movs	r2, #40	@ 0x28
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2229      	movs	r2, #41	@ 0x29
 8002292:	2102      	movs	r1, #2
 8002294:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	22ca      	movs	r2, #202	@ 0xca
 800229c:	625a      	str	r2, [r3, #36]	@ 0x24
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2253      	movs	r2, #83	@ 0x53
 80022a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80022a6:	2513      	movs	r5, #19
 80022a8:	197c      	adds	r4, r7, r5
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f93d 	bl	800252c <RTC_EnterInitMode>
 80022b2:	0003      	movs	r3, r0
 80022b4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80022b6:	197b      	adds	r3, r7, r5
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d162      	bne.n	8002384 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d125      	bne.n	8002310 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2240      	movs	r2, #64	@ 0x40
 80022cc:	4013      	ands	r3, r2
 80022ce:	d102      	bne.n	80022d6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2200      	movs	r2, #0
 80022d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 f9ac 	bl	8002638 <RTC_ByteToBcd2>
 80022e0:	0003      	movs	r3, r0
 80022e2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 f9a5 	bl	8002638 <RTC_ByteToBcd2>
 80022ee:	0003      	movs	r3, r0
 80022f0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80022f2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	789b      	ldrb	r3, [r3, #2]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f99d 	bl	8002638 <RTC_ByteToBcd2>
 80022fe:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002300:	0022      	movs	r2, r4
 8002302:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	78db      	ldrb	r3, [r3, #3]
 8002308:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e017      	b.n	8002340 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2240      	movs	r2, #64	@ 0x40
 8002318:	4013      	ands	r3, r2
 800231a:	d102      	bne.n	8002322 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2200      	movs	r2, #0
 8002320:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800232e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002334:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	78db      	ldrb	r3, [r3, #3]
 800233a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	491b      	ldr	r1, [pc, #108]	@ (80023b4 <HAL_RTC_SetTime+0x148>)
 8002348:	400a      	ands	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4918      	ldr	r1, [pc, #96]	@ (80023b8 <HAL_RTC_SetTime+0x14c>)
 8002358:	400a      	ands	r2, r1
 800235a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6999      	ldr	r1, [r3, #24]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	431a      	orrs	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002374:	2313      	movs	r3, #19
 8002376:	18fc      	adds	r4, r7, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	0018      	movs	r0, r3
 800237c:	f000 f918 	bl	80025b0 <RTC_ExitInitMode>
 8002380:	0003      	movs	r3, r0
 8002382:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	22ff      	movs	r2, #255	@ 0xff
 800238a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800238c:	2313      	movs	r3, #19
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2229      	movs	r2, #41	@ 0x29
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2228      	movs	r2, #40	@ 0x28
 80023a2:	2100      	movs	r1, #0
 80023a4:	5499      	strb	r1, [r3, r2]

  return status;
 80023a6:	2313      	movs	r3, #19
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	781b      	ldrb	r3, [r3, #0]
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b006      	add	sp, #24
 80023b2:	bdb0      	pop	{r4, r5, r7, pc}
 80023b4:	007f7f7f 	.word	0x007f7f7f
 80023b8:	fffbffff 	.word	0xfffbffff

080023bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023bc:	b5b0      	push	{r4, r5, r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2228      	movs	r2, #40	@ 0x28
 80023cc:	5c9b      	ldrb	r3, [r3, r2]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_RTC_SetDate+0x1a>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e07e      	b.n	80024d4 <HAL_RTC_SetDate+0x118>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2228      	movs	r2, #40	@ 0x28
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2229      	movs	r2, #41	@ 0x29
 80023e2:	2102      	movs	r1, #2
 80023e4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10e      	bne.n	800240a <HAL_RTC_SetDate+0x4e>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	001a      	movs	r2, r3
 80023f2:	2310      	movs	r3, #16
 80023f4:	4013      	ands	r3, r2
 80023f6:	d008      	beq.n	800240a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	2210      	movs	r2, #16
 80023fe:	4393      	bics	r3, r2
 8002400:	b2db      	uxtb	r3, r3
 8002402:	330a      	adds	r3, #10
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11c      	bne.n	800244a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	78db      	ldrb	r3, [r3, #3]
 8002414:	0018      	movs	r0, r3
 8002416:	f000 f90f 	bl	8002638 <RTC_ByteToBcd2>
 800241a:	0003      	movs	r3, r0
 800241c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 f908 	bl	8002638 <RTC_ByteToBcd2>
 8002428:	0003      	movs	r3, r0
 800242a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800242c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	789b      	ldrb	r3, [r3, #2]
 8002432:	0018      	movs	r0, r3
 8002434:	f000 f900 	bl	8002638 <RTC_ByteToBcd2>
 8002438:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800243a:	0022      	movs	r2, r4
 800243c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00e      	b.n	8002468 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	78db      	ldrb	r3, [r3, #3]
 800244e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	785b      	ldrb	r3, [r3, #1]
 8002454:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002456:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800245c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	22ca      	movs	r2, #202	@ 0xca
 800246e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2253      	movs	r2, #83	@ 0x53
 8002476:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002478:	2513      	movs	r5, #19
 800247a:	197c      	adds	r4, r7, r5
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f854 	bl	800252c <RTC_EnterInitMode>
 8002484:	0003      	movs	r3, r0
 8002486:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002488:	0028      	movs	r0, r5
 800248a:	183b      	adds	r3, r7, r0
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4910      	ldr	r1, [pc, #64]	@ (80024dc <HAL_RTC_SetDate+0x120>)
 800249a:	400a      	ands	r2, r1
 800249c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800249e:	183c      	adds	r4, r7, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f884 	bl	80025b0 <RTC_ExitInitMode>
 80024a8:	0003      	movs	r3, r0
 80024aa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	22ff      	movs	r2, #255	@ 0xff
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80024b4:	2313      	movs	r3, #19
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2229      	movs	r2, #41	@ 0x29
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2228      	movs	r2, #40	@ 0x28
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]

  return status;
 80024ce:	2313      	movs	r3, #19
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	781b      	ldrb	r3, [r3, #0]
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b006      	add	sp, #24
 80024da:	bdb0      	pop	{r4, r5, r7, pc}
 80024dc:	00ffff3f 	.word	0x00ffff3f

080024e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002528 <HAL_RTC_WaitForSynchro+0x48>)
 80024ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80024f0:	f7fe fd50 	bl	8000f94 <HAL_GetTick>
 80024f4:	0003      	movs	r3, r0
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80024f8:	e00a      	b.n	8002510 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80024fa:	f7fe fd4b 	bl	8000f94 <HAL_GetTick>
 80024fe:	0002      	movs	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	23fa      	movs	r3, #250	@ 0xfa
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d901      	bls.n	8002510 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e006      	b.n	800251e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	4013      	ands	r3, r2
 800251a:	d0ee      	beq.n	80024fa <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	0001005f 	.word	0x0001005f

0800252c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002534:	230f      	movs	r3, #15
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2240      	movs	r2, #64	@ 0x40
 8002544:	4013      	ands	r3, r2
 8002546:	d12c      	bne.n	80025a2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2180      	movs	r1, #128	@ 0x80
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002558:	f7fe fd1c 	bl	8000f94 <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002560:	e014      	b.n	800258c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002562:	f7fe fd17 	bl	8000f94 <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1ad2      	subs	r2, r2, r3
 800256c:	200f      	movs	r0, #15
 800256e:	183b      	adds	r3, r7, r0
 8002570:	1839      	adds	r1, r7, r0
 8002572:	7809      	ldrb	r1, [r1, #0]
 8002574:	7019      	strb	r1, [r3, #0]
 8002576:	23fa      	movs	r3, #250	@ 0xfa
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	429a      	cmp	r2, r3
 800257c:	d906      	bls.n	800258c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800257e:	183b      	adds	r3, r7, r0
 8002580:	2203      	movs	r2, #3
 8002582:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2229      	movs	r2, #41	@ 0x29
 8002588:	2103      	movs	r1, #3
 800258a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2240      	movs	r2, #64	@ 0x40
 8002594:	4013      	ands	r3, r2
 8002596:	d104      	bne.n	80025a2 <RTC_EnterInitMode+0x76>
 8002598:	230f      	movs	r3, #15
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d1df      	bne.n	8002562 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80025a2:	230f      	movs	r3, #15
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	781b      	ldrb	r3, [r3, #0]
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b004      	add	sp, #16
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	240f      	movs	r4, #15
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80025c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002634 <RTC_ExitInitMode+0x84>)
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002634 <RTC_ExitInitMode+0x84>)
 80025c6:	2180      	movs	r1, #128	@ 0x80
 80025c8:	438a      	bics	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80025cc:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <RTC_ExitInitMode+0x84>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2220      	movs	r2, #32
 80025d2:	4013      	ands	r3, r2
 80025d4:	d10d      	bne.n	80025f2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff ff81 	bl	80024e0 <HAL_RTC_WaitForSynchro>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d021      	beq.n	8002626 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2229      	movs	r2, #41	@ 0x29
 80025e6:	2103      	movs	r1, #3
 80025e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	2203      	movs	r2, #3
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e019      	b.n	8002626 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <RTC_ExitInitMode+0x84>)
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <RTC_ExitInitMode+0x84>)
 80025f8:	2120      	movs	r1, #32
 80025fa:	438a      	bics	r2, r1
 80025fc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff ff6d 	bl	80024e0 <HAL_RTC_WaitForSynchro>
 8002606:	1e03      	subs	r3, r0, #0
 8002608:	d007      	beq.n	800261a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2229      	movs	r2, #41	@ 0x29
 800260e:	2103      	movs	r1, #3
 8002610:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002612:	230f      	movs	r3, #15
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <RTC_ExitInitMode+0x84>)
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <RTC_ExitInitMode+0x84>)
 8002620:	2120      	movs	r1, #32
 8002622:	430a      	orrs	r2, r1
 8002624:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002626:	230f      	movs	r3, #15
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	781b      	ldrb	r3, [r3, #0]
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b005      	add	sp, #20
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	40002800 	.word	0x40002800

08002638 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	0002      	movs	r2, r0
 8002640:	1dfb      	adds	r3, r7, #7
 8002642:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002648:	230b      	movs	r3, #11
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	1dfa      	adds	r2, r7, #7
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002652:	e008      	b.n	8002666 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800265a:	220b      	movs	r2, #11
 800265c:	18bb      	adds	r3, r7, r2
 800265e:	18ba      	adds	r2, r7, r2
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	3a0a      	subs	r2, #10
 8002664:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002666:	210b      	movs	r1, #11
 8002668:	187b      	adds	r3, r7, r1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b09      	cmp	r3, #9
 800266e:	d8f1      	bhi.n	8002654 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	b2da      	uxtb	r2, r3
 8002678:	187b      	adds	r3, r7, r1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4313      	orrs	r3, r2
 800267e:	b2db      	uxtb	r3, r3
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2228      	movs	r2, #40	@ 0x28
 8002698:	5c9b      	ldrb	r3, [r3, r2]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e066      	b.n	8002770 <HAL_RTCEx_SetWakeUpTimer+0xe8>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2228      	movs	r2, #40	@ 0x28
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2229      	movs	r2, #41	@ 0x29
 80026ae:	2102      	movs	r1, #2
 80026b0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	22ca      	movs	r2, #202	@ 0xca
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2253      	movs	r2, #83	@ 0x53
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80026c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002778 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002778 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 80026c8:	492c      	ldr	r1, [pc, #176]	@ (800277c <HAL_RTCEx_SetWakeUpTimer+0xf4>)
 80026ca:	400a      	ands	r2, r1
 80026cc:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80026ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2240      	movs	r2, #64	@ 0x40
 80026d4:	4013      	ands	r3, r2
 80026d6:	d121      	bne.n	800271c <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    tickstart = HAL_GetTick();
 80026d8:	f7fe fc5c 	bl	8000f94 <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80026e0:	e016      	b.n	8002710 <HAL_RTCEx_SetWakeUpTimer+0x88>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026e2:	f7fe fc57 	bl	8000f94 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	1ad2      	subs	r2, r2, r3
 80026ec:	23fa      	movs	r3, #250	@ 0xfa
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d90d      	bls.n	8002710 <HAL_RTCEx_SetWakeUpTimer+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	22ff      	movs	r2, #255	@ 0xff
 80026fa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2229      	movs	r2, #41	@ 0x29
 8002700:	2103      	movs	r1, #3
 8002702:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2228      	movs	r2, #40	@ 0x28
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e02f      	b.n	8002770 <HAL_RTCEx_SetWakeUpTimer+0xe8>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2204      	movs	r2, #4
 8002718:	4013      	ands	r3, r2
 800271a:	d0e2      	beq.n	80026e2 <HAL_RTCEx_SetWakeUpTimer+0x5a>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2107      	movs	r1, #7
 8002728:	438a      	bics	r2, r1
 800272a:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6999      	ldr	r1, [r3, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	430a      	orrs	r2, r1
 800273a:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2180      	movs	r1, #128	@ 0x80
 8002750:	00c9      	lsls	r1, r1, #3
 8002752:	430a      	orrs	r2, r1
 8002754:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	22ff      	movs	r2, #255	@ 0xff
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2229      	movs	r2, #41	@ 0x29
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2228      	movs	r2, #40	@ 0x28
 800276a:	2100      	movs	r1, #0
 800276c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b006      	add	sp, #24
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40002800 	.word	0x40002800
 800277c:	fffffbff 	.word	0xfffffbff

08002780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0a8      	b.n	80028e4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	2382      	movs	r3, #130	@ 0x82
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d009      	beq.n	80027ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
 80027ac:	e005      	b.n	80027ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	225d      	movs	r2, #93	@ 0x5d
 80027c4:	5c9b      	ldrb	r3, [r3, r2]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	225c      	movs	r2, #92	@ 0x5c
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fe fa20 	bl	8000c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	225d      	movs	r2, #93	@ 0x5d
 80027e0:	2102      	movs	r1, #2
 80027e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2140      	movs	r1, #64	@ 0x40
 80027f0:	438a      	bics	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	23e0      	movs	r3, #224	@ 0xe0
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d902      	bls.n	8002806 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e002      	b.n	800280c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	015b      	lsls	r3, r3, #5
 800280a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	23f0      	movs	r3, #240	@ 0xf0
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	429a      	cmp	r2, r3
 8002816:	d008      	beq.n	800282a <HAL_SPI_Init+0xaa>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	23e0      	movs	r3, #224	@ 0xe0
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	429a      	cmp	r2, r3
 8002822:	d002      	beq.n	800282a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	2382      	movs	r3, #130	@ 0x82
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	401a      	ands	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6899      	ldr	r1, [r3, #8]
 8002838:	2384      	movs	r3, #132	@ 0x84
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	400b      	ands	r3, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2102      	movs	r1, #2
 8002846:	400b      	ands	r3, r1
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2101      	movs	r1, #1
 8002850:	400b      	ands	r3, r1
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6999      	ldr	r1, [r3, #24]
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	400b      	ands	r3, r1
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2138      	movs	r1, #56	@ 0x38
 8002866:	400b      	ands	r3, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	400b      	ands	r3, r1
 8002872:	431a      	orrs	r2, r3
 8002874:	0011      	movs	r1, r2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	401a      	ands	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	2204      	movs	r2, #4
 8002890:	401a      	ands	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	2110      	movs	r1, #16
 8002898:	400b      	ands	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a0:	2108      	movs	r1, #8
 80028a2:	400b      	ands	r3, r1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68d9      	ldr	r1, [r3, #12]
 80028aa:	23f0      	movs	r3, #240	@ 0xf0
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	400b      	ands	r3, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	0011      	movs	r1, r2
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	015b      	lsls	r3, r3, #5
 80028ba:	401a      	ands	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4907      	ldr	r1, [pc, #28]	@ (80028ec <HAL_SPI_Init+0x16c>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	225d      	movs	r2, #93	@ 0x5d
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b004      	add	sp, #16
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	fffff7ff 	.word	0xfffff7ff

080028f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	1dbb      	adds	r3, r7, #6
 80028fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002900:	231f      	movs	r3, #31
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	225c      	movs	r2, #92	@ 0x5c
 800290c:	5c9b      	ldrb	r3, [r3, r2]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_SPI_Transmit+0x26>
 8002912:	2302      	movs	r3, #2
 8002914:	e147      	b.n	8002ba6 <HAL_SPI_Transmit+0x2b6>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	225c      	movs	r2, #92	@ 0x5c
 800291a:	2101      	movs	r1, #1
 800291c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800291e:	f7fe fb39 	bl	8000f94 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002926:	2316      	movs	r3, #22
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	1dba      	adds	r2, r7, #6
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	225d      	movs	r2, #93	@ 0x5d
 8002934:	5c9b      	ldrb	r3, [r3, r2]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d004      	beq.n	8002946 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800293c:	231f      	movs	r3, #31
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
    goto error;
 8002944:	e128      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_SPI_Transmit+0x64>
 800294c:	1dbb      	adds	r3, r7, #6
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d104      	bne.n	800295e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002954:	231f      	movs	r3, #31
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
    goto error;
 800295c:	e11c      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	225d      	movs	r2, #93	@ 0x5d
 8002962:	2103      	movs	r1, #3
 8002964:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1dba      	adds	r2, r7, #6
 8002976:	8812      	ldrh	r2, [r2, #0]
 8002978:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1dba      	adds	r2, r7, #6
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2244      	movs	r2, #68	@ 0x44
 800298c:	2100      	movs	r1, #0
 800298e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2246      	movs	r2, #70	@ 0x46
 8002994:	2100      	movs	r1, #0
 8002996:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d110      	bne.n	80029d2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2140      	movs	r1, #64	@ 0x40
 80029bc:	438a      	bics	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2180      	movs	r1, #128	@ 0x80
 80029cc:	01c9      	lsls	r1, r1, #7
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2240      	movs	r2, #64	@ 0x40
 80029da:	4013      	ands	r3, r2
 80029dc:	2b40      	cmp	r3, #64	@ 0x40
 80029de:	d007      	beq.n	80029f0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2140      	movs	r1, #64	@ 0x40
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	23e0      	movs	r3, #224	@ 0xe0
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d952      	bls.n	8002aa2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_SPI_Transmit+0x11e>
 8002a04:	2316      	movs	r3, #22
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d143      	bne.n	8002a96 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1e:	1c9a      	adds	r2, r3, #2
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a32:	e030      	b.n	8002a96 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d112      	bne.n	8002a68 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a66:	e016      	b.n	8002a96 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a68:	f7fe fa94 	bl	8000f94 <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d802      	bhi.n	8002a7e <HAL_SPI_Transmit+0x18e>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_SPI_Transmit+0x194>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d108      	bne.n	8002a96 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002a84:	231f      	movs	r3, #31
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	2203      	movs	r2, #3
 8002a8a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	225d      	movs	r2, #93	@ 0x5d
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a94:	e080      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1c9      	bne.n	8002a34 <HAL_SPI_Transmit+0x144>
 8002aa0:	e053      	b.n	8002b4a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <HAL_SPI_Transmit+0x1c4>
 8002aaa:	2316      	movs	r3, #22
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d145      	bne.n	8002b40 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	7812      	ldrb	r2, [r2, #0]
 8002ac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002ada:	e031      	b.n	8002b40 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d113      	bne.n	8002b12 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b10:	e016      	b.n	8002b40 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b12:	f7fe fa3f 	bl	8000f94 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d802      	bhi.n	8002b28 <HAL_SPI_Transmit+0x238>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	d102      	bne.n	8002b2e <HAL_SPI_Transmit+0x23e>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002b2e:	231f      	movs	r3, #31
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2203      	movs	r2, #3
 8002b34:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	225d      	movs	r2, #93	@ 0x5d
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b3e:	e02b      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1c8      	bne.n	8002adc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 f95d 	bl	8002e10 <SPI_EndRxTxTransaction>
 8002b56:	1e03      	subs	r3, r0, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002b86:	231f      	movs	r3, #31
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e003      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	225d      	movs	r2, #93	@ 0x5d
 8002b94:	2101      	movs	r1, #1
 8002b96:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	225c      	movs	r2, #92	@ 0x5c
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002ba0:	231f      	movs	r3, #31
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b008      	add	sp, #32
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bc0:	f7fe f9e8 	bl	8000f94 <HAL_GetTick>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	18d3      	adds	r3, r2, r3
 8002bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bd0:	f7fe f9e0 	bl	8000f94 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	015b      	lsls	r3, r3, #5
 8002bde:	0d1b      	lsrs	r3, r3, #20
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	4353      	muls	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002be6:	e058      	b.n	8002c9a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	d055      	beq.n	8002c9a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bee:	f7fe f9d1 	bl	8000f94 <HAL_GetTick>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d902      	bls.n	8002c04 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d142      	bne.n	8002c8a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	21e0      	movs	r1, #224	@ 0xe0
 8002c10:	438a      	bics	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	2382      	movs	r3, #130	@ 0x82
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d113      	bne.n	8002c48 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	2380      	movs	r3, #128	@ 0x80
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d005      	beq.n	8002c38 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	2380      	movs	r3, #128	@ 0x80
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d107      	bne.n	8002c48 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2140      	movs	r1, #64	@ 0x40
 8002c44:	438a      	bics	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	019b      	lsls	r3, r3, #6
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d110      	bne.n	8002c76 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	491a      	ldr	r1, [pc, #104]	@ (8002cc8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2180      	movs	r1, #128	@ 0x80
 8002c70:	0189      	lsls	r1, r1, #6
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	225d      	movs	r2, #93	@ 0x5d
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	225c      	movs	r2, #92	@ 0x5c
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e017      	b.n	8002cba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	425a      	negs	r2, r3
 8002caa:	4153      	adcs	r3, r2
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	001a      	movs	r2, r3
 8002cb0:	1dfb      	adds	r3, r7, #7
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d197      	bne.n	8002be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b008      	add	sp, #32
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			@ (mov r8, r8)
 8002cc4:	20000010 	.word	0x20000010
 8002cc8:	ffffdfff 	.word	0xffffdfff

08002ccc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002cda:	2317      	movs	r3, #23
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ce2:	f7fe f957 	bl	8000f94 <HAL_GetTick>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	18d3      	adds	r3, r2, r3
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002cf2:	f7fe f94f 	bl	8000f94 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d02:	4b41      	ldr	r3, [pc, #260]	@ (8002e08 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	0013      	movs	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	00da      	lsls	r2, r3, #3
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	0d1b      	lsrs	r3, r3, #20
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	4353      	muls	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d18:	e068      	b.n	8002dec <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	23c0      	movs	r3, #192	@ 0xc0
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d10a      	bne.n	8002d3a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	2117      	movs	r1, #23
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	d055      	beq.n	8002dec <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d40:	f7fe f928 	bl	8000f94 <HAL_GetTick>
 8002d44:	0002      	movs	r2, r0
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d902      	bls.n	8002d56 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d142      	bne.n	8002ddc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	21e0      	movs	r1, #224	@ 0xe0
 8002d62:	438a      	bics	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	2382      	movs	r3, #130	@ 0x82
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d113      	bne.n	8002d9a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d005      	beq.n	8002d8a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d107      	bne.n	8002d9a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2140      	movs	r1, #64	@ 0x40
 8002d96:	438a      	bics	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	019b      	lsls	r3, r3, #6
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d110      	bne.n	8002dc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4916      	ldr	r1, [pc, #88]	@ (8002e0c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2180      	movs	r1, #128	@ 0x80
 8002dc2:	0189      	lsls	r1, r1, #6
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	225d      	movs	r2, #93	@ 0x5d
 8002dcc:	2101      	movs	r1, #1
 8002dce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	225c      	movs	r2, #92	@ 0x5c
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e010      	b.n	8002dfe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d18e      	bne.n	8002d1a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b00a      	add	sp, #40	@ 0x28
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	20000010 	.word	0x20000010
 8002e0c:	ffffdfff 	.word	0xffffdfff

08002e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	23c0      	movs	r3, #192	@ 0xc0
 8002e20:	0159      	lsls	r1, r3, #5
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	0013      	movs	r3, r2
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f7ff ff4e 	bl	8002ccc <SPI_WaitFifoStateUntilTimeout>
 8002e30:	1e03      	subs	r3, r0, #0
 8002e32:	d007      	beq.n	8002e44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e38:	2220      	movs	r2, #32
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e027      	b.n	8002e94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2180      	movs	r1, #128	@ 0x80
 8002e52:	f7ff fead 	bl	8002bb0 <SPI_WaitFlagStateUntilTimeout>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d007      	beq.n	8002e6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	2220      	movs	r2, #32
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e014      	b.n	8002e94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	23c0      	movs	r3, #192	@ 0xc0
 8002e6e:	00d9      	lsls	r1, r3, #3
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	0013      	movs	r3, r2
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f7ff ff27 	bl	8002ccc <SPI_WaitFifoStateUntilTimeout>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d007      	beq.n	8002e92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e86:	2220      	movs	r2, #32
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e000      	b.n	8002e94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b004      	add	sp, #16
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e046      	b.n	8002f3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2288      	movs	r2, #136	@ 0x88
 8002eb2:	589b      	ldr	r3, [r3, r2]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2284      	movs	r2, #132	@ 0x84
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7fd fef4 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2288      	movs	r2, #136	@ 0x88
 8002ecc:	2124      	movs	r1, #36	@ 0x24
 8002ece:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	438a      	bics	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 f996 	bl	800321c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 f828 	bl	8002f48 <UART_SetConfig>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e01c      	b.n	8002f3c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	490d      	ldr	r1, [pc, #52]	@ (8002f44 <HAL_UART_Init+0xa8>)
 8002f0e:	400a      	ands	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	212a      	movs	r1, #42	@ 0x2a
 8002f1e:	438a      	bics	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 fa25 	bl	8003384 <UART_CheckIdleState>
 8002f3a:	0003      	movs	r3, r0
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b002      	add	sp, #8
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	ffffb7ff 	.word	0xffffb7ff

08002f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f50:	231a      	movs	r3, #26
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4aa1      	ldr	r2, [pc, #644]	@ (80031fc <UART_SetConfig+0x2b4>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a9c      	ldr	r2, [pc, #624]	@ (8003200 <UART_SetConfig+0x2b8>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a93      	ldr	r2, [pc, #588]	@ (8003204 <UART_SetConfig+0x2bc>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	220f      	movs	r2, #15
 8002fcc:	4393      	bics	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a89      	ldr	r2, [pc, #548]	@ (8003208 <UART_SetConfig+0x2c0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d127      	bne.n	8003036 <UART_SetConfig+0xee>
 8002fe6:	4b89      	ldr	r3, [pc, #548]	@ (800320c <UART_SetConfig+0x2c4>)
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fea:	2203      	movs	r2, #3
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d017      	beq.n	8003022 <UART_SetConfig+0xda>
 8002ff2:	d81b      	bhi.n	800302c <UART_SetConfig+0xe4>
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d00a      	beq.n	800300e <UART_SetConfig+0xc6>
 8002ff8:	d818      	bhi.n	800302c <UART_SetConfig+0xe4>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <UART_SetConfig+0xbc>
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d00a      	beq.n	8003018 <UART_SetConfig+0xd0>
 8003002:	e013      	b.n	800302c <UART_SetConfig+0xe4>
 8003004:	231b      	movs	r3, #27
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e021      	b.n	8003052 <UART_SetConfig+0x10a>
 800300e:	231b      	movs	r3, #27
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e01c      	b.n	8003052 <UART_SetConfig+0x10a>
 8003018:	231b      	movs	r3, #27
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2204      	movs	r2, #4
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e017      	b.n	8003052 <UART_SetConfig+0x10a>
 8003022:	231b      	movs	r3, #27
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2208      	movs	r2, #8
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e012      	b.n	8003052 <UART_SetConfig+0x10a>
 800302c:	231b      	movs	r3, #27
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2210      	movs	r2, #16
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e00d      	b.n	8003052 <UART_SetConfig+0x10a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a75      	ldr	r2, [pc, #468]	@ (8003210 <UART_SetConfig+0x2c8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d104      	bne.n	800304a <UART_SetConfig+0x102>
 8003040:	231b      	movs	r3, #27
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e003      	b.n	8003052 <UART_SetConfig+0x10a>
 800304a:	231b      	movs	r3, #27
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2210      	movs	r2, #16
 8003050:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	2380      	movs	r3, #128	@ 0x80
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	429a      	cmp	r2, r3
 800305c:	d000      	beq.n	8003060 <UART_SetConfig+0x118>
 800305e:	e065      	b.n	800312c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003060:	231b      	movs	r3, #27
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b08      	cmp	r3, #8
 8003068:	d015      	beq.n	8003096 <UART_SetConfig+0x14e>
 800306a:	dc18      	bgt.n	800309e <UART_SetConfig+0x156>
 800306c:	2b04      	cmp	r3, #4
 800306e:	d00d      	beq.n	800308c <UART_SetConfig+0x144>
 8003070:	dc15      	bgt.n	800309e <UART_SetConfig+0x156>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <UART_SetConfig+0x134>
 8003076:	2b02      	cmp	r3, #2
 8003078:	d005      	beq.n	8003086 <UART_SetConfig+0x13e>
 800307a:	e010      	b.n	800309e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800307c:	f7fe ff18 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 8003080:	0003      	movs	r3, r0
 8003082:	617b      	str	r3, [r7, #20]
        break;
 8003084:	e012      	b.n	80030ac <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003086:	4b63      	ldr	r3, [pc, #396]	@ (8003214 <UART_SetConfig+0x2cc>)
 8003088:	617b      	str	r3, [r7, #20]
        break;
 800308a:	e00f      	b.n	80030ac <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308c:	f7fe fe84 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8003090:	0003      	movs	r3, r0
 8003092:	617b      	str	r3, [r7, #20]
        break;
 8003094:	e00a      	b.n	80030ac <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	617b      	str	r3, [r7, #20]
        break;
 800309c:	e006      	b.n	80030ac <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030a2:	231a      	movs	r3, #26
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
        break;
 80030aa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <UART_SetConfig+0x16c>
 80030b2:	e08d      	b.n	80031d0 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030b8:	4b57      	ldr	r3, [pc, #348]	@ (8003218 <UART_SetConfig+0x2d0>)
 80030ba:	0052      	lsls	r2, r2, #1
 80030bc:	5ad3      	ldrh	r3, [r2, r3]
 80030be:	0019      	movs	r1, r3
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7fd f81d 	bl	8000100 <__udivsi3>
 80030c6:	0003      	movs	r3, r0
 80030c8:	005a      	lsls	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	18d2      	adds	r2, r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	0019      	movs	r1, r3
 80030d8:	0010      	movs	r0, r2
 80030da:	f7fd f811 	bl	8000100 <__udivsi3>
 80030de:	0003      	movs	r3, r0
 80030e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b0f      	cmp	r3, #15
 80030e6:	d91c      	bls.n	8003122 <UART_SetConfig+0x1da>
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	025b      	lsls	r3, r3, #9
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d217      	bcs.n	8003122 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	200e      	movs	r0, #14
 80030f8:	183b      	adds	r3, r7, r0
 80030fa:	210f      	movs	r1, #15
 80030fc:	438a      	bics	r2, r1
 80030fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	2207      	movs	r2, #7
 8003108:	4013      	ands	r3, r2
 800310a:	b299      	uxth	r1, r3
 800310c:	183b      	adds	r3, r7, r0
 800310e:	183a      	adds	r2, r7, r0
 8003110:	8812      	ldrh	r2, [r2, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	183a      	adds	r2, r7, r0
 800311c:	8812      	ldrh	r2, [r2, #0]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	e056      	b.n	80031d0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003122:	231a      	movs	r3, #26
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e051      	b.n	80031d0 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800312c:	231b      	movs	r3, #27
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b08      	cmp	r3, #8
 8003134:	d015      	beq.n	8003162 <UART_SetConfig+0x21a>
 8003136:	dc18      	bgt.n	800316a <UART_SetConfig+0x222>
 8003138:	2b04      	cmp	r3, #4
 800313a:	d00d      	beq.n	8003158 <UART_SetConfig+0x210>
 800313c:	dc15      	bgt.n	800316a <UART_SetConfig+0x222>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <UART_SetConfig+0x200>
 8003142:	2b02      	cmp	r3, #2
 8003144:	d005      	beq.n	8003152 <UART_SetConfig+0x20a>
 8003146:	e010      	b.n	800316a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003148:	f7fe feb2 	bl	8001eb0 <HAL_RCC_GetPCLK1Freq>
 800314c:	0003      	movs	r3, r0
 800314e:	617b      	str	r3, [r7, #20]
        break;
 8003150:	e012      	b.n	8003178 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003152:	4b30      	ldr	r3, [pc, #192]	@ (8003214 <UART_SetConfig+0x2cc>)
 8003154:	617b      	str	r3, [r7, #20]
        break;
 8003156:	e00f      	b.n	8003178 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003158:	f7fe fe1e 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 800315c:	0003      	movs	r3, r0
 800315e:	617b      	str	r3, [r7, #20]
        break;
 8003160:	e00a      	b.n	8003178 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	617b      	str	r3, [r7, #20]
        break;
 8003168:	e006      	b.n	8003178 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800316e:	231a      	movs	r3, #26
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
        break;
 8003176:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003182:	4b25      	ldr	r3, [pc, #148]	@ (8003218 <UART_SetConfig+0x2d0>)
 8003184:	0052      	lsls	r2, r2, #1
 8003186:	5ad3      	ldrh	r3, [r2, r3]
 8003188:	0019      	movs	r1, r3
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7fc ffb8 	bl	8000100 <__udivsi3>
 8003190:	0003      	movs	r3, r0
 8003192:	001a      	movs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	18d2      	adds	r2, r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	0019      	movs	r1, r3
 80031a2:	0010      	movs	r0, r2
 80031a4:	f7fc ffac 	bl	8000100 <__udivsi3>
 80031a8:	0003      	movs	r3, r0
 80031aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	d90a      	bls.n	80031c8 <UART_SetConfig+0x280>
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	025b      	lsls	r3, r3, #9
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d205      	bcs.n	80031c8 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	e003      	b.n	80031d0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80031c8:	231a      	movs	r3, #26
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	226a      	movs	r2, #106	@ 0x6a
 80031d4:	2101      	movs	r1, #1
 80031d6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2268      	movs	r2, #104	@ 0x68
 80031dc:	2101      	movs	r1, #1
 80031de:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80031ec:	231a      	movs	r3, #26
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	781b      	ldrb	r3, [r3, #0]
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b008      	add	sp, #32
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	cfff69f3 	.word	0xcfff69f3
 8003200:	ffffcfff 	.word	0xffffcfff
 8003204:	11fff4ff 	.word	0x11fff4ff
 8003208:	40013800 	.word	0x40013800
 800320c:	40021000 	.word	0x40021000
 8003210:	40004400 	.word	0x40004400
 8003214:	00f42400 	.word	0x00f42400
 8003218:	080039a8 	.word	0x080039a8

0800321c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	2208      	movs	r2, #8
 800322a:	4013      	ands	r3, r2
 800322c:	d00b      	beq.n	8003246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a4a      	ldr	r2, [pc, #296]	@ (8003360 <UART_AdvFeatureConfig+0x144>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	2201      	movs	r2, #1
 800324c:	4013      	ands	r3, r2
 800324e:	d00b      	beq.n	8003268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a43      	ldr	r2, [pc, #268]	@ (8003364 <UART_AdvFeatureConfig+0x148>)
 8003258:	4013      	ands	r3, r2
 800325a:	0019      	movs	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	2202      	movs	r2, #2
 800326e:	4013      	ands	r3, r2
 8003270:	d00b      	beq.n	800328a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a3b      	ldr	r2, [pc, #236]	@ (8003368 <UART_AdvFeatureConfig+0x14c>)
 800327a:	4013      	ands	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328e:	2204      	movs	r2, #4
 8003290:	4013      	ands	r3, r2
 8003292:	d00b      	beq.n	80032ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a34      	ldr	r2, [pc, #208]	@ (800336c <UART_AdvFeatureConfig+0x150>)
 800329c:	4013      	ands	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	2210      	movs	r2, #16
 80032b2:	4013      	ands	r3, r2
 80032b4:	d00b      	beq.n	80032ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003370 <UART_AdvFeatureConfig+0x154>)
 80032be:	4013      	ands	r3, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	2220      	movs	r2, #32
 80032d4:	4013      	ands	r3, r2
 80032d6:	d00b      	beq.n	80032f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4a25      	ldr	r2, [pc, #148]	@ (8003374 <UART_AdvFeatureConfig+0x158>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	0019      	movs	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	2240      	movs	r2, #64	@ 0x40
 80032f6:	4013      	ands	r3, r2
 80032f8:	d01d      	beq.n	8003336 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4a1d      	ldr	r2, [pc, #116]	@ (8003378 <UART_AdvFeatureConfig+0x15c>)
 8003302:	4013      	ands	r3, r2
 8003304:	0019      	movs	r1, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	035b      	lsls	r3, r3, #13
 800331a:	429a      	cmp	r2, r3
 800331c:	d10b      	bne.n	8003336 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a15      	ldr	r2, [pc, #84]	@ (800337c <UART_AdvFeatureConfig+0x160>)
 8003326:	4013      	ands	r3, r2
 8003328:	0019      	movs	r1, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	2280      	movs	r2, #128	@ 0x80
 800333c:	4013      	ands	r3, r2
 800333e:	d00b      	beq.n	8003358 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4a0e      	ldr	r2, [pc, #56]	@ (8003380 <UART_AdvFeatureConfig+0x164>)
 8003348:	4013      	ands	r3, r2
 800334a:	0019      	movs	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  }
}
 8003358:	46c0      	nop			@ (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b002      	add	sp, #8
 800335e:	bd80      	pop	{r7, pc}
 8003360:	ffff7fff 	.word	0xffff7fff
 8003364:	fffdffff 	.word	0xfffdffff
 8003368:	fffeffff 	.word	0xfffeffff
 800336c:	fffbffff 	.word	0xfffbffff
 8003370:	ffffefff 	.word	0xffffefff
 8003374:	ffffdfff 	.word	0xffffdfff
 8003378:	ffefffff 	.word	0xffefffff
 800337c:	ff9fffff 	.word	0xff9fffff
 8003380:	fff7ffff 	.word	0xfff7ffff

08003384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b092      	sub	sp, #72	@ 0x48
 8003388:	af02      	add	r7, sp, #8
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2290      	movs	r2, #144	@ 0x90
 8003390:	2100      	movs	r1, #0
 8003392:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003394:	f7fd fdfe 	bl	8000f94 <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2208      	movs	r2, #8
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d12d      	bne.n	8003406 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ac:	2280      	movs	r2, #128	@ 0x80
 80033ae:	0391      	lsls	r1, r2, #14
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4a47      	ldr	r2, [pc, #284]	@ (80034d0 <UART_CheckIdleState+0x14c>)
 80033b4:	9200      	str	r2, [sp, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f000 f88e 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d022      	beq.n	8003406 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c0:	f3ef 8310 	mrs	r3, PRIMASK
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80033c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033ca:	2301      	movs	r3, #1
 80033cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d0:	f383 8810 	msr	PRIMASK, r3
}
 80033d4:	46c0      	nop			@ (mov r8, r8)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2180      	movs	r1, #128	@ 0x80
 80033e2:	438a      	bics	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2288      	movs	r2, #136	@ 0x88
 80033f6:	2120      	movs	r1, #32
 80033f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2284      	movs	r2, #132	@ 0x84
 80033fe:	2100      	movs	r1, #0
 8003400:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e060      	b.n	80034c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2204      	movs	r2, #4
 800340e:	4013      	ands	r3, r2
 8003410:	2b04      	cmp	r3, #4
 8003412:	d146      	bne.n	80034a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003416:	2280      	movs	r2, #128	@ 0x80
 8003418:	03d1      	lsls	r1, r2, #15
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <UART_CheckIdleState+0x14c>)
 800341e:	9200      	str	r2, [sp, #0]
 8003420:	2200      	movs	r2, #0
 8003422:	f000 f859 	bl	80034d8 <UART_WaitOnFlagUntilTimeout>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d03b      	beq.n	80034a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342a:	f3ef 8310 	mrs	r3, PRIMASK
 800342e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003432:	637b      	str	r3, [r7, #52]	@ 0x34
 8003434:	2301      	movs	r3, #1
 8003436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4922      	ldr	r1, [pc, #136]	@ (80034d4 <UART_CheckIdleState+0x150>)
 800344c:	400a      	ands	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003452:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345c:	f3ef 8310 	mrs	r3, PRIMASK
 8003460:	61bb      	str	r3, [r7, #24]
  return(result);
 8003462:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	633b      	str	r3, [r7, #48]	@ 0x30
 8003466:	2301      	movs	r3, #1
 8003468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			@ (mov r8, r8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	438a      	bics	r2, r1
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	228c      	movs	r2, #140	@ 0x8c
 8003492:	2120      	movs	r1, #32
 8003494:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2284      	movs	r2, #132	@ 0x84
 800349a:	2100      	movs	r1, #0
 800349c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e012      	b.n	80034c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2288      	movs	r2, #136	@ 0x88
 80034a6:	2120      	movs	r1, #32
 80034a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	228c      	movs	r2, #140	@ 0x8c
 80034ae:	2120      	movs	r1, #32
 80034b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2284      	movs	r2, #132	@ 0x84
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b010      	add	sp, #64	@ 0x40
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	01ffffff 	.word	0x01ffffff
 80034d4:	fffffedf 	.word	0xfffffedf

080034d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	1dfb      	adds	r3, r7, #7
 80034e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e8:	e051      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3301      	adds	r3, #1
 80034ee:	d04e      	beq.n	800358e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f0:	f7fd fd50 	bl	8000f94 <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e051      	b.n	80035ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2204      	movs	r2, #4
 8003512:	4013      	ands	r3, r2
 8003514:	d03b      	beq.n	800358e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b80      	cmp	r3, #128	@ 0x80
 800351a:	d038      	beq.n	800358e <UART_WaitOnFlagUntilTimeout+0xb6>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b40      	cmp	r3, #64	@ 0x40
 8003520:	d035      	beq.n	800358e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2208      	movs	r2, #8
 800352a:	4013      	ands	r3, r2
 800352c:	2b08      	cmp	r3, #8
 800352e:	d111      	bne.n	8003554 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2208      	movs	r2, #8
 8003536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f83c 	bl	80035b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2290      	movs	r2, #144	@ 0x90
 8003544:	2108      	movs	r1, #8
 8003546:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2284      	movs	r2, #132	@ 0x84
 800354c:	2100      	movs	r1, #0
 800354e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e02c      	b.n	80035ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	2380      	movs	r3, #128	@ 0x80
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	401a      	ands	r2, r3
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	429a      	cmp	r2, r3
 8003566:	d112      	bne.n	800358e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2280      	movs	r2, #128	@ 0x80
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 f81f 	bl	80035b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2290      	movs	r2, #144	@ 0x90
 800357e:	2120      	movs	r1, #32
 8003580:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2284      	movs	r2, #132	@ 0x84
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e00f      	b.n	80035ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	425a      	negs	r2, r3
 800359e:	4153      	adcs	r3, r2
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	001a      	movs	r2, r3
 80035a4:	1dfb      	adds	r3, r7, #7
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d09e      	beq.n	80034ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b004      	add	sp, #16
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08e      	sub	sp, #56	@ 0x38
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c0:	f3ef 8310 	mrs	r3, PRIMASK
 80035c4:	617b      	str	r3, [r7, #20]
  return(result);
 80035c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ca:	2301      	movs	r3, #1
 80035cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f383 8810 	msr	PRIMASK, r3
}
 80035d4:	46c0      	nop			@ (mov r8, r8)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4926      	ldr	r1, [pc, #152]	@ (800367c <UART_EndRxTransfer+0xc4>)
 80035e2:	400a      	ands	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f383 8810 	msr	PRIMASK, r3
}
 80035f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f2:	f3ef 8310 	mrs	r3, PRIMASK
 80035f6:	623b      	str	r3, [r7, #32]
  return(result);
 80035f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80035fc:	2301      	movs	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	f383 8810 	msr	PRIMASK, r3
}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	491b      	ldr	r1, [pc, #108]	@ (8003680 <UART_EndRxTransfer+0xc8>)
 8003614:	400a      	ands	r2, r1
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	f383 8810 	msr	PRIMASK, r3
}
 8003622:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003628:	2b01      	cmp	r3, #1
 800362a:	d118      	bne.n	800365e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362c:	f3ef 8310 	mrs	r3, PRIMASK
 8003630:	60bb      	str	r3, [r7, #8]
  return(result);
 8003632:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003636:	2301      	movs	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2110      	movs	r1, #16
 800364e:	438a      	bics	r2, r1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003654:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f383 8810 	msr	PRIMASK, r3
}
 800365c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	228c      	movs	r2, #140	@ 0x8c
 8003662:	2120      	movs	r1, #32
 8003664:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b00e      	add	sp, #56	@ 0x38
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	fffffedf 	.word	0xfffffedf
 8003680:	effffffe 	.word	0xeffffffe

08003684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2284      	movs	r2, #132	@ 0x84
 8003690:	5c9b      	ldrb	r3, [r3, r2]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_UARTEx_DisableFifoMode+0x16>
 8003696:	2302      	movs	r3, #2
 8003698:	e027      	b.n	80036ea <HAL_UARTEx_DisableFifoMode+0x66>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2284      	movs	r2, #132	@ 0x84
 800369e:	2101      	movs	r1, #1
 80036a0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2288      	movs	r2, #136	@ 0x88
 80036a6:	2124      	movs	r1, #36	@ 0x24
 80036a8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	438a      	bics	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a0b      	ldr	r2, [pc, #44]	@ (80036f4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2288      	movs	r2, #136	@ 0x88
 80036dc:	2120      	movs	r1, #32
 80036de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2284      	movs	r2, #132	@ 0x84
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b004      	add	sp, #16
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	dfffffff 	.word	0xdfffffff

080036f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2284      	movs	r2, #132	@ 0x84
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800370c:	2302      	movs	r3, #2
 800370e:	e02e      	b.n	800376e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2284      	movs	r2, #132	@ 0x84
 8003714:	2101      	movs	r1, #1
 8003716:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2288      	movs	r2, #136	@ 0x88
 800371c:	2124      	movs	r1, #36	@ 0x24
 800371e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	438a      	bics	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	08d9      	lsrs	r1, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 f854 	bl	80037fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2288      	movs	r2, #136	@ 0x88
 8003760:	2120      	movs	r1, #32
 8003762:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2284      	movs	r2, #132	@ 0x84
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	0018      	movs	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	b004      	add	sp, #16
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2284      	movs	r2, #132	@ 0x84
 8003786:	5c9b      	ldrb	r3, [r3, r2]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800378c:	2302      	movs	r3, #2
 800378e:	e02f      	b.n	80037f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2284      	movs	r2, #132	@ 0x84
 8003794:	2101      	movs	r1, #1
 8003796:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2288      	movs	r2, #136	@ 0x88
 800379c:	2124      	movs	r1, #36	@ 0x24
 800379e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2101      	movs	r1, #1
 80037b4:	438a      	bics	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4a0e      	ldr	r2, [pc, #56]	@ (80037f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 f813 	bl	80037fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2288      	movs	r2, #136	@ 0x88
 80037e2:	2120      	movs	r1, #32
 80037e4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2284      	movs	r2, #132	@ 0x84
 80037ea:	2100      	movs	r1, #0
 80037ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b004      	add	sp, #16
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	f1ffffff 	.word	0xf1ffffff

080037fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003808:	2b00      	cmp	r3, #0
 800380a:	d108      	bne.n	800381e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	226a      	movs	r2, #106	@ 0x6a
 8003810:	2101      	movs	r1, #1
 8003812:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2268      	movs	r2, #104	@ 0x68
 8003818:	2101      	movs	r1, #1
 800381a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800381c:	e043      	b.n	80038a6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800381e:	260f      	movs	r6, #15
 8003820:	19bb      	adds	r3, r7, r6
 8003822:	2208      	movs	r2, #8
 8003824:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003826:	200e      	movs	r0, #14
 8003828:	183b      	adds	r3, r7, r0
 800382a:	2208      	movs	r2, #8
 800382c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	0e5b      	lsrs	r3, r3, #25
 8003836:	b2da      	uxtb	r2, r3
 8003838:	240d      	movs	r4, #13
 800383a:	193b      	adds	r3, r7, r4
 800383c:	2107      	movs	r1, #7
 800383e:	400a      	ands	r2, r1
 8003840:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	0f5b      	lsrs	r3, r3, #29
 800384a:	b2da      	uxtb	r2, r3
 800384c:	250c      	movs	r5, #12
 800384e:	197b      	adds	r3, r7, r5
 8003850:	2107      	movs	r1, #7
 8003852:	400a      	ands	r2, r1
 8003854:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003856:	183b      	adds	r3, r7, r0
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	197a      	adds	r2, r7, r5
 800385c:	7812      	ldrb	r2, [r2, #0]
 800385e:	4914      	ldr	r1, [pc, #80]	@ (80038b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003860:	5c8a      	ldrb	r2, [r1, r2]
 8003862:	435a      	muls	r2, r3
 8003864:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003866:	197b      	adds	r3, r7, r5
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	4a12      	ldr	r2, [pc, #72]	@ (80038b4 <UARTEx_SetNbDataToProcess+0xb8>)
 800386c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800386e:	0019      	movs	r1, r3
 8003870:	f7fc fcd0 	bl	8000214 <__divsi3>
 8003874:	0003      	movs	r3, r0
 8003876:	b299      	uxth	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	226a      	movs	r2, #106	@ 0x6a
 800387c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800387e:	19bb      	adds	r3, r7, r6
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	193a      	adds	r2, r7, r4
 8003884:	7812      	ldrb	r2, [r2, #0]
 8003886:	490a      	ldr	r1, [pc, #40]	@ (80038b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003888:	5c8a      	ldrb	r2, [r1, r2]
 800388a:	435a      	muls	r2, r3
 800388c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800388e:	193b      	adds	r3, r7, r4
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4a08      	ldr	r2, [pc, #32]	@ (80038b4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003894:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003896:	0019      	movs	r1, r3
 8003898:	f7fc fcbc 	bl	8000214 <__divsi3>
 800389c:	0003      	movs	r3, r0
 800389e:	b299      	uxth	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2268      	movs	r2, #104	@ 0x68
 80038a4:	5299      	strh	r1, [r3, r2]
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b005      	add	sp, #20
 80038ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	080039c0 	.word	0x080039c0
 80038b4:	080039c8 	.word	0x080039c8

080038b8 <memset>:
 80038b8:	0003      	movs	r3, r0
 80038ba:	1882      	adds	r2, r0, r2
 80038bc:	4293      	cmp	r3, r2
 80038be:	d100      	bne.n	80038c2 <memset+0xa>
 80038c0:	4770      	bx	lr
 80038c2:	7019      	strb	r1, [r3, #0]
 80038c4:	3301      	adds	r3, #1
 80038c6:	e7f9      	b.n	80038bc <memset+0x4>

080038c8 <__libc_init_array>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	2600      	movs	r6, #0
 80038cc:	4c0c      	ldr	r4, [pc, #48]	@ (8003900 <__libc_init_array+0x38>)
 80038ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003904 <__libc_init_array+0x3c>)
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	42a6      	cmp	r6, r4
 80038d6:	d109      	bne.n	80038ec <__libc_init_array+0x24>
 80038d8:	2600      	movs	r6, #0
 80038da:	f000 f819 	bl	8003910 <_init>
 80038de:	4c0a      	ldr	r4, [pc, #40]	@ (8003908 <__libc_init_array+0x40>)
 80038e0:	4d0a      	ldr	r5, [pc, #40]	@ (800390c <__libc_init_array+0x44>)
 80038e2:	1b64      	subs	r4, r4, r5
 80038e4:	10a4      	asrs	r4, r4, #2
 80038e6:	42a6      	cmp	r6, r4
 80038e8:	d105      	bne.n	80038f6 <__libc_init_array+0x2e>
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	00b3      	lsls	r3, r6, #2
 80038ee:	58eb      	ldr	r3, [r5, r3]
 80038f0:	4798      	blx	r3
 80038f2:	3601      	adds	r6, #1
 80038f4:	e7ee      	b.n	80038d4 <__libc_init_array+0xc>
 80038f6:	00b3      	lsls	r3, r6, #2
 80038f8:	58eb      	ldr	r3, [r5, r3]
 80038fa:	4798      	blx	r3
 80038fc:	3601      	adds	r6, #1
 80038fe:	e7f2      	b.n	80038e6 <__libc_init_array+0x1e>
 8003900:	080039d0 	.word	0x080039d0
 8003904:	080039d0 	.word	0x080039d0
 8003908:	080039d4 	.word	0x080039d4
 800390c:	080039d0 	.word	0x080039d0

08003910 <_init>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr

0800391c <_fini>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr
