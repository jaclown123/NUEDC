
proj1_SPI_LEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e7c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001f34  08001f34  00002f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f94  08001f94  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f94  08001f94  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f94  08001f94  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f94  08001f94  00002f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f98  08001f98  00002f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001f9c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08001fa8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001fa8  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a35  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000147c  00000000  00000000  00008a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00009ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004da  00000000  00000000  0000a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001332a  00000000  00000000  0000aa42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007be2  00000000  00000000  0001dd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078502  00000000  00000000  0002594e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009de50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015ec  00000000  00000000  0009de94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0009f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001f1c 	.word	0x08001f1c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001f1c 	.word	0x08001f1c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <LED_Init>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void LED_Init(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_IN_RST_GPIO_Port,LED_IN_RST_Pin,GPIO_PIN_SET);
 800021c:	23a0      	movs	r3, #160	@ 0xa0
 800021e:	05db      	lsls	r3, r3, #23
 8000220:	2201      	movs	r2, #1
 8000222:	2140      	movs	r1, #64	@ 0x40
 8000224:	0018      	movs	r0, r3
 8000226:	f000 fdc7 	bl	8000db8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_OUT_EN_GPIO_Port,LED_OUT_EN_Pin,GPIO_PIN_RESET);
 800022a:	23a0      	movs	r3, #160	@ 0xa0
 800022c:	05db      	lsls	r3, r3, #23
 800022e:	2200      	movs	r2, #0
 8000230:	2108      	movs	r1, #8
 8000232:	0018      	movs	r0, r3
 8000234:	f000 fdc0 	bl	8000db8 <HAL_GPIO_WritePin>

}
 8000238:	46c0      	nop			@ (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <Input_Fix>:

void Input_Fix(GPIO_PinState * Input_Data) {
 800023e:	b580      	push	{r7, lr}
 8000240:	b086      	sub	sp, #24
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
  for (int i=7;i<=47;i=i+8) {
 8000246:	2307      	movs	r3, #7
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	e02e      	b.n	80002aa <Input_Fix+0x6c>
    for (int j=0;j<=2;j++) {
 800024c:	2300      	movs	r3, #0
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	e025      	b.n	800029e <Input_Fix+0x60>
      GPIO_PinState temp=Input_Data[j+i-7];
 8000252:	693a      	ldr	r2, [r7, #16]
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	18d3      	adds	r3, r2, r3
 8000258:	3b07      	subs	r3, #7
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	18d2      	adds	r2, r2, r3
 800025e:	200f      	movs	r0, #15
 8000260:	183b      	adds	r3, r7, r0
 8000262:	7812      	ldrb	r2, [r2, #0]
 8000264:	701a      	strb	r2, [r3, #0]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	1e5a      	subs	r2, r3, #1
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	001a      	movs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	189a      	adds	r2, r3, r2
 8000274:	6939      	ldr	r1, [r7, #16]
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	18cb      	adds	r3, r1, r3
 800027a:	3b07      	subs	r3, #7
 800027c:	6879      	ldr	r1, [r7, #4]
 800027e:	18cb      	adds	r3, r1, r3
 8000280:	7812      	ldrb	r2, [r2, #0]
 8000282:	701a      	strb	r2, [r3, #0]
      Input_Data[i-1-j]=temp;
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	1e5a      	subs	r2, r3, #1
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	1ad3      	subs	r3, r2, r3
 800028c:	001a      	movs	r2, r3
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	189b      	adds	r3, r3, r2
 8000292:	183a      	adds	r2, r7, r0
 8000294:	7812      	ldrb	r2, [r2, #0]
 8000296:	701a      	strb	r2, [r3, #0]
    for (int j=0;j<=2;j++) {
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	3301      	adds	r3, #1
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	ddd6      	ble.n	8000252 <Input_Fix+0x14>
  for (int i=7;i<=47;i=i+8) {
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	3308      	adds	r3, #8
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80002ae:	ddcd      	ble.n	800024c <Input_Fix+0xe>
    }
  }
}
 80002b0:	46c0      	nop			@ (mov r8, r8)
 80002b2:	46c0      	nop			@ (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b006      	add	sp, #24
 80002b8:	bd80      	pop	{r7, pc}

080002ba <Generate_Bytes>:

void Generate_Bytes(uint8_t * Input_Bits,uint8_t* Bytes){
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
 80002c2:	6039      	str	r1, [r7, #0]

  for (int byte_index=0;byte_index<6;byte_index++) {
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	e02c      	b.n	8000324 <Generate_Bytes+0x6a>
    for (int i=0;i<8;i++) {
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	e023      	b.n	8000318 <Generate_Bytes+0x5e>
      switch(Input_Bits[byte_index*8+i]) {
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	00da      	lsls	r2, r3, #3
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	18d3      	adds	r3, r2, r3
 80002d8:	001a      	movs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	189b      	adds	r3, r3, r2
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d015      	beq.n	8000310 <Generate_Bytes+0x56>
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d114      	bne.n	8000312 <Generate_Bytes+0x58>
      case 0:{

        break;
      }
      case 1:{
        Bytes[byte_index]|=(1<<(7-i));
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	18d3      	adds	r3, r2, r3
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	b25a      	sxtb	r2, r3
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	2107      	movs	r1, #7
 80002f6:	1acb      	subs	r3, r1, r3
 80002f8:	2101      	movs	r1, #1
 80002fa:	4099      	lsls	r1, r3
 80002fc:	000b      	movs	r3, r1
 80002fe:	b25b      	sxtb	r3, r3
 8000300:	4313      	orrs	r3, r2
 8000302:	b259      	sxtb	r1, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	18d3      	adds	r3, r2, r3
 800030a:	b2ca      	uxtb	r2, r1
 800030c:	701a      	strb	r2, [r3, #0]
        break;
 800030e:	e000      	b.n	8000312 <Generate_Bytes+0x58>
        break;
 8000310:	46c0      	nop			@ (mov r8, r8)
    for (int i=0;i<8;i++) {
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	2b07      	cmp	r3, #7
 800031c:	ddd8      	ble.n	80002d0 <Generate_Bytes+0x16>
  for (int byte_index=0;byte_index<6;byte_index++) {
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	3301      	adds	r3, #1
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2b05      	cmp	r3, #5
 8000328:	ddcf      	ble.n	80002ca <Generate_Bytes+0x10>
      }
      }
    }
  }
}
 800032a:	46c0      	nop			@ (mov r8, r8)
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b004      	add	sp, #16
 8000332:	bd80      	pop	{r7, pc}

08000334 <LED_Display_6Byte_SPI>:

void LED_Display_6Byte_SPI(GPIO_PinState * Input_Data) {
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  Input_Fix(Input_Data);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	0018      	movs	r0, r3
 8000340:	f7ff ff7d 	bl	800023e <Input_Fix>
  uint8_t Input_Byte[6]={0};
 8000344:	2408      	movs	r4, #8
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	2200      	movs	r2, #0
 800034e:	809a      	strh	r2, [r3, #4]
 Generate_Bytes(Input_Data,Input_Byte);
 8000350:	193a      	adds	r2, r7, r4
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	0011      	movs	r1, r2
 8000356:	0018      	movs	r0, r3
 8000358:	f7ff ffaf 	bl	80002ba <Generate_Bytes>

  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_RESET);
 800035c:	23a0      	movs	r3, #160	@ 0xa0
 800035e:	05db      	lsls	r3, r3, #23
 8000360:	2200      	movs	r2, #0
 8000362:	2110      	movs	r1, #16
 8000364:	0018      	movs	r0, r3
 8000366:	f000 fd27 	bl	8000db8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,Input_Byte, 6, 1);
 800036a:	1939      	adds	r1, r7, r4
 800036c:	4807      	ldr	r0, [pc, #28]	@ (800038c <LED_Display_6Byte_SPI+0x58>)
 800036e:	2301      	movs	r3, #1
 8000370:	2206      	movs	r2, #6
 8000372:	f001 fad1 	bl	8001918 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_SET);
 8000376:	23a0      	movs	r3, #160	@ 0xa0
 8000378:	05db      	lsls	r3, r3, #23
 800037a:	2201      	movs	r2, #1
 800037c:	2110      	movs	r1, #16
 800037e:	0018      	movs	r0, r3
 8000380:	f000 fd1a 	bl	8000db8 <HAL_GPIO_WritePin>
}
 8000384:	46c0      	nop			@ (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b005      	add	sp, #20
 800038a:	bd90      	pop	{r4, r7, pc}
 800038c:	20000028 	.word	0x20000028

08000390 <LED_Display_Color>:
//    HAL_Delay(0);
//  }
//  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_SET);
//}

void LED_Display_Color(LED_Color * Color_Input) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	@ 0x40
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint8_t Color_Bytes[48]={1};
 8000398:	2308      	movs	r3, #8
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	2201      	movs	r2, #1
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	3304      	adds	r3, #4
 80003a2:	222c      	movs	r2, #44	@ 0x2c
 80003a4:	2100      	movs	r1, #0
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 fd8c 	bl	8001ec4 <memset>
  int color_index=0,byte_index=47;
 80003ac:	2300      	movs	r3, #0
 80003ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80003b0:	232f      	movs	r3, #47	@ 0x2f
 80003b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  while(color_index<16) {
 80003b4:	e0a1      	b.n	80004fa <LED_Display_Color+0x16a>
    switch(Color_Input[color_index]){
 80003b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	18d3      	adds	r3, r2, r3
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b07      	cmp	r3, #7
 80003c0:	d900      	bls.n	80003c4 <LED_Display_Color+0x34>
 80003c2:	e094      	b.n	80004ee <LED_Display_Color+0x15e>
 80003c4:	009a      	lsls	r2, r3, #2
 80003c6:	4b53      	ldr	r3, [pc, #332]	@ (8000514 <LED_Display_Color+0x184>)
 80003c8:	18d3      	adds	r3, r2, r3
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	469f      	mov	pc, r3
    case BLACK:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 80003ce:	2108      	movs	r1, #8
 80003d0:	187a      	adds	r2, r7, r1
 80003d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003d4:	18d3      	adds	r3, r2, r3
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 80003da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003dc:	3b01      	subs	r3, #1
 80003de:	0008      	movs	r0, r1
 80003e0:	187a      	adds	r2, r7, r1
 80003e2:	2101      	movs	r1, #1
 80003e4:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 80003e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003e8:	3b02      	subs	r3, #2
 80003ea:	183a      	adds	r2, r7, r0
 80003ec:	2101      	movs	r1, #1
 80003ee:	54d1      	strb	r1, [r2, r3]
      break;
 80003f0:	e07d      	b.n	80004ee <LED_Display_Color+0x15e>
    }
    case RED:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 80003f2:	2108      	movs	r1, #8
 80003f4:	187a      	adds	r2, r7, r1
 80003f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003f8:	18d3      	adds	r3, r2, r3
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 80003fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000400:	3b01      	subs	r3, #1
 8000402:	0008      	movs	r0, r1
 8000404:	187a      	adds	r2, r7, r1
 8000406:	2101      	movs	r1, #1
 8000408:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 800040a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800040c:	3b02      	subs	r3, #2
 800040e:	183a      	adds	r2, r7, r0
 8000410:	2100      	movs	r1, #0
 8000412:	54d1      	strb	r1, [r2, r3]
      break;
 8000414:	e06b      	b.n	80004ee <LED_Display_Color+0x15e>
    }
    case GREEN:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 8000416:	2108      	movs	r1, #8
 8000418:	187a      	adds	r2, r7, r1
 800041a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800041c:	18d3      	adds	r3, r2, r3
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 8000422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000424:	3b01      	subs	r3, #1
 8000426:	0008      	movs	r0, r1
 8000428:	187a      	adds	r2, r7, r1
 800042a:	2100      	movs	r1, #0
 800042c:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 800042e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000430:	3b02      	subs	r3, #2
 8000432:	183a      	adds	r2, r7, r0
 8000434:	2101      	movs	r1, #1
 8000436:	54d1      	strb	r1, [r2, r3]
      break;
 8000438:	e059      	b.n	80004ee <LED_Display_Color+0x15e>
    }
    case BLUE:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 800043a:	2108      	movs	r1, #8
 800043c:	187a      	adds	r2, r7, r1
 800043e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000440:	18d3      	adds	r3, r2, r3
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 8000446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000448:	3b01      	subs	r3, #1
 800044a:	0008      	movs	r0, r1
 800044c:	187a      	adds	r2, r7, r1
 800044e:	2101      	movs	r1, #1
 8000450:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 8000452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000454:	3b02      	subs	r3, #2
 8000456:	183a      	adds	r2, r7, r0
 8000458:	2101      	movs	r1, #1
 800045a:	54d1      	strb	r1, [r2, r3]
      break;
 800045c:	e047      	b.n	80004ee <LED_Display_Color+0x15e>
    }
    case YELLOW:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 800045e:	2108      	movs	r1, #8
 8000460:	187a      	adds	r2, r7, r1
 8000462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000464:	18d3      	adds	r3, r2, r3
 8000466:	2201      	movs	r2, #1
 8000468:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 800046a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800046c:	3b01      	subs	r3, #1
 800046e:	0008      	movs	r0, r1
 8000470:	187a      	adds	r2, r7, r1
 8000472:	2100      	movs	r1, #0
 8000474:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 8000476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000478:	3b02      	subs	r3, #2
 800047a:	183a      	adds	r2, r7, r0
 800047c:	2100      	movs	r1, #0
 800047e:	54d1      	strb	r1, [r2, r3]
      break;
 8000480:	e035      	b.n	80004ee <LED_Display_Color+0x15e>
    }
    case PINK:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 8000482:	2108      	movs	r1, #8
 8000484:	187a      	adds	r2, r7, r1
 8000486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000488:	18d3      	adds	r3, r2, r3
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 800048e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000490:	3b01      	subs	r3, #1
 8000492:	0008      	movs	r0, r1
 8000494:	187a      	adds	r2, r7, r1
 8000496:	2101      	movs	r1, #1
 8000498:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 800049a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800049c:	3b02      	subs	r3, #2
 800049e:	183a      	adds	r2, r7, r0
 80004a0:	2100      	movs	r1, #0
 80004a2:	54d1      	strb	r1, [r2, r3]
      break;
 80004a4:	e023      	b.n	80004ee <LED_Display_Color+0x15e>
    }
    case CYAN:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 80004a6:	2108      	movs	r1, #8
 80004a8:	187a      	adds	r2, r7, r1
 80004aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004ac:	18d3      	adds	r3, r2, r3
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 80004b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004b4:	3b01      	subs	r3, #1
 80004b6:	0008      	movs	r0, r1
 80004b8:	187a      	adds	r2, r7, r1
 80004ba:	2100      	movs	r1, #0
 80004bc:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 80004be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004c0:	3b02      	subs	r3, #2
 80004c2:	183a      	adds	r2, r7, r0
 80004c4:	2101      	movs	r1, #1
 80004c6:	54d1      	strb	r1, [r2, r3]
      break;
 80004c8:	e011      	b.n	80004ee <LED_Display_Color+0x15e>
    }
    case WHITE:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 80004ca:	2108      	movs	r1, #8
 80004cc:	187a      	adds	r2, r7, r1
 80004ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004d0:	18d3      	adds	r3, r2, r3
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 80004d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004d8:	3b01      	subs	r3, #1
 80004da:	0008      	movs	r0, r1
 80004dc:	187a      	adds	r2, r7, r1
 80004de:	2100      	movs	r1, #0
 80004e0:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 80004e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004e4:	3b02      	subs	r3, #2
 80004e6:	183a      	adds	r2, r7, r0
 80004e8:	2100      	movs	r1, #0
 80004ea:	54d1      	strb	r1, [r2, r3]
      break;
 80004ec:	46c0      	nop			@ (mov r8, r8)
    }
    }
    color_index++;
 80004ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80004f0:	3301      	adds	r3, #1
 80004f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    byte_index-=3;
 80004f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004f6:	3b03      	subs	r3, #3
 80004f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  while(color_index<16) {
 80004fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80004fc:	2b0f      	cmp	r3, #15
 80004fe:	dc00      	bgt.n	8000502 <LED_Display_Color+0x172>
 8000500:	e759      	b.n	80003b6 <LED_Display_Color+0x26>
  }
  LED_Display_6Byte_SPI(Color_Bytes);
 8000502:	2308      	movs	r3, #8
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff ff14 	bl	8000334 <LED_Display_6Byte_SPI>
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b010      	add	sp, #64	@ 0x40
 8000512:	bd80      	pop	{r7, pc}
 8000514:	08001f34 	.word	0x08001f34

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 f9ad 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f818 	bl	8000556 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f8a9 	bl	800067c <MX_GPIO_Init>
  MX_SPI1_Init();
 800052a:	f000 f869 	bl	8000600 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LED_Init();
 800052e:	f7ff fe73 	bl	8000218 <LED_Init>


  LED_Color color[16]={RED,RED};
 8000532:	003b      	movs	r3, r7
 8000534:	0018      	movs	r0, r3
 8000536:	2310      	movs	r3, #16
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f001 fcc2 	bl	8001ec4 <memset>
 8000540:	003b      	movs	r3, r7
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	003b      	movs	r3, r7
 8000548:	2201      	movs	r2, #1
 800054a:	705a      	strb	r2, [r3, #1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    LED_Display_Color(color);
 800054c:	003b      	movs	r3, r7
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff ff1e 	bl	8000390 <LED_Display_Color>
 8000554:	e7fa      	b.n	800054c <main+0x34>

08000556 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000556:	b590      	push	{r4, r7, lr}
 8000558:	b093      	sub	sp, #76	@ 0x4c
 800055a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055c:	2414      	movs	r4, #20
 800055e:	193b      	adds	r3, r7, r4
 8000560:	0018      	movs	r0, r3
 8000562:	2334      	movs	r3, #52	@ 0x34
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f001 fcac 	bl	8001ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	0018      	movs	r0, r3
 8000570:	2310      	movs	r3, #16
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f001 fca5 	bl	8001ec4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057a:	2380      	movs	r3, #128	@ 0x80
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fc38 	bl	8000df4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	22a0      	movs	r2, #160	@ 0xa0
 800058e:	02d2      	lsls	r2, r2, #11
 8000590:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	0021      	movs	r1, r4
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2202      	movs	r2, #2
 8000598:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2203      	movs	r2, #3
 800059e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2210      	movs	r2, #16
 80005aa:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2280      	movs	r2, #128	@ 0x80
 80005b0:	0292      	lsls	r2, r2, #10
 80005b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	22e0      	movs	r2, #224	@ 0xe0
 80005b8:	0612      	lsls	r2, r2, #24
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 fc58 	bl	8000e74 <HAL_RCC_OscConfig>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x76>
  {
    Error_Handler();
 80005c8:	f000 f89c 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2207      	movs	r2, #7
 80005d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2202      	movs	r2, #2
 80005d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2100      	movs	r1, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 ff53 	bl	8001494 <HAL_RCC_ClockConfig>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005f2:	f000 f887 	bl	8000704 <Error_Handler>
  }
}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b013      	add	sp, #76	@ 0x4c
 80005fc:	bd90      	pop	{r4, r7, pc}
	...

08000600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000604:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MX_SPI1_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <MX_SPI1_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060a:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_SPI1_Init+0x74>)
 800060c:	2282      	movs	r2, #130	@ 0x82
 800060e:	0052      	lsls	r2, r2, #1
 8000610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MX_SPI1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <MX_SPI1_Init+0x74>)
 800061a:	22e0      	movs	r2, #224	@ 0xe0
 800061c:	00d2      	lsls	r2, r2, #3
 800061e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_SPI1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000626:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <MX_SPI1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_SPI1_Init+0x74>)
 800062e:	2280      	movs	r2, #128	@ 0x80
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_SPI1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_SPI1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_SPI1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_SPI1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_SPI1_Init+0x74>)
 800064e:	2207      	movs	r2, #7
 8000650:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_SPI1_Init+0x74>)
 800065a:	2208      	movs	r2, #8
 800065c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065e:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <MX_SPI1_Init+0x74>)
 8000660:	0018      	movs	r0, r3
 8000662:	f001 f8a1 	bl	80017a8 <HAL_SPI_Init>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 f84b 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000028 	.word	0x20000028
 8000678:	40013000 	.word	0x40013000

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b089      	sub	sp, #36	@ 0x24
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	240c      	movs	r4, #12
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	2314      	movs	r3, #20
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f001 fc19 	bl	8001ec4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MX_GPIO_Init+0x84>)
 8000694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_GPIO_Init+0x84>)
 8000698:	2104      	movs	r1, #4
 800069a:	430a      	orrs	r2, r1
 800069c:	635a      	str	r2, [r3, #52]	@ 0x34
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_GPIO_Init+0x84>)
 80006a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a2:	2204      	movs	r2, #4
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_GPIO_Init+0x84>)
 80006ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_GPIO_Init+0x84>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_GPIO_Init+0x84>)
 80006b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin, GPIO_PIN_RESET);
 80006c2:	23a0      	movs	r3, #160	@ 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2200      	movs	r2, #0
 80006c8:	2158      	movs	r1, #88	@ 0x58
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fb74 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_OUT_EN_Pin LED_OUT_CLK_Pin LED_IN_RST_Pin */
  GPIO_InitStruct.Pin = LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin;
 80006d0:	0021      	movs	r1, r4
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2258      	movs	r2, #88	@ 0x58
 80006d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2201      	movs	r2, #1
 80006dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	187a      	adds	r2, r7, r1
 80006ec:	23a0      	movs	r3, #160	@ 0xa0
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 f9fc 	bl	8000af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b009      	add	sp, #36	@ 0x24
 80006fe:	bd90      	pop	{r4, r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <HAL_MspInit+0x44>)
 8000718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <HAL_MspInit+0x44>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_MspInit+0x44>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_MspInit+0x44>)
 8000730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <HAL_MspInit+0x44>)
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	0549      	lsls	r1, r1, #21
 8000738:	430a      	orrs	r2, r1
 800073a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <HAL_MspInit+0x44>)
 800073e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	055b      	lsls	r3, r3, #21
 8000744:	4013      	ands	r3, r2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b08b      	sub	sp, #44	@ 0x2c
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	2414      	movs	r4, #20
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	2314      	movs	r3, #20
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f001 fbaa 	bl	8001ec4 <memset>
  if(hspi->Instance==SPI1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a1b      	ldr	r2, [pc, #108]	@ (80007e4 <HAL_SPI_MspInit+0x8c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d130      	bne.n	80007dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800077a:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <HAL_SPI_MspInit+0x90>)
 800077c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <HAL_SPI_MspInit+0x90>)
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	0149      	lsls	r1, r1, #5
 8000784:	430a      	orrs	r2, r1
 8000786:	641a      	str	r2, [r3, #64]	@ 0x40
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_SPI_MspInit+0x90>)
 800078a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	015b      	lsls	r3, r3, #5
 8000790:	4013      	ands	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <HAL_SPI_MspInit+0x90>)
 8000798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <HAL_SPI_MspInit+0x90>)
 800079c:	2101      	movs	r1, #1
 800079e:	430a      	orrs	r2, r1
 80007a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <HAL_SPI_MspInit+0x90>)
 80007a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007a6:	2201      	movs	r2, #1
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = LED_MOSI_Pin|LED_SCK_Pin;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2224      	movs	r2, #36	@ 0x24
 80007b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2202      	movs	r2, #2
 80007ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	187a      	adds	r2, r7, r1
 80007d0:	23a0      	movs	r3, #160	@ 0xa0
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 f98a 	bl	8000af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b00b      	add	sp, #44	@ 0x2c
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	40013000 	.word	0x40013000
 80007e8:	40021000 	.word	0x40021000

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	e7fd      	b.n	80007f0 <NMI_Handler+0x4>

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	e7fd      	b.n	80007f8 <HardFault_Handler+0x4>

080007fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f89c 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800082a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800082c:	f7ff fff7 	bl	800081e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	@ (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	@ (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <LoopForever+0xe>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	@ (8000874 <LoopForever+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000856:	f001 fb3d 	bl	8001ed4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800085a:	f7ff fe5d 	bl	8000518 <main>

0800085e <LoopForever>:

LoopForever:
  b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   r0, =_estack
 8000860:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800086c:	08001f9c 	.word	0x08001f9c
  ldr r2, =_sbss
 8000870:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000874:	20000090 	.word	0x20000090

08000878 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_IRQHandler>
	...

0800087c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_Init+0x3c>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <HAL_Init+0x3c>)
 800088e:	2180      	movs	r1, #128	@ 0x80
 8000890:	0049      	lsls	r1, r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000896:	2003      	movs	r0, #3
 8000898:	f000 f810 	bl	80008bc <HAL_InitTick>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d003      	beq.n	80008a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e001      	b.n	80008ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff ff32 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	781b      	ldrb	r3, [r3, #0]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c4:	230f      	movs	r3, #15
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <HAL_InitTick+0x88>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d02b      	beq.n	800092c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <HAL_InitTick+0x8c>)
 80008d6:	681c      	ldr	r4, [r3, #0]
 80008d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <HAL_InitTick+0x88>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	0019      	movs	r1, r3
 80008de:	23fa      	movs	r3, #250	@ 0xfa
 80008e0:	0098      	lsls	r0, r3, #2
 80008e2:	f7ff fc0d 	bl	8000100 <__udivsi3>
 80008e6:	0003      	movs	r3, r0
 80008e8:	0019      	movs	r1, r3
 80008ea:	0020      	movs	r0, r4
 80008ec:	f7ff fc08 	bl	8000100 <__udivsi3>
 80008f0:	0003      	movs	r3, r0
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 f8ef 	bl	8000ad6 <HAL_SYSTICK_Config>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d112      	bne.n	8000922 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d80a      	bhi.n	8000918 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	2301      	movs	r3, #1
 8000906:	425b      	negs	r3, r3
 8000908:	2200      	movs	r2, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f000 f8ce 	bl	8000aac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_InitTick+0x90>)
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e00d      	b.n	8000934 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000918:	230f      	movs	r3, #15
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	e008      	b.n	8000934 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000922:	230f      	movs	r3, #15
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e003      	b.n	8000934 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800092c:	230f      	movs	r3, #15
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000934:	230f      	movs	r3, #15
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	781b      	ldrb	r3, [r3, #0]
}
 800093a:	0018      	movs	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	b005      	add	sp, #20
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	20000008 	.word	0x20000008
 8000948:	20000000 	.word	0x20000000
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_IncTick+0x1c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	001a      	movs	r2, r3
 800095a:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x20>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	18d2      	adds	r2, r2, r3
 8000960:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <HAL_IncTick+0x20>)
 8000962:	601a      	str	r2, [r3, #0]
}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	20000008 	.word	0x20000008
 8000970:	2000008c 	.word	0x2000008c

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b02      	ldr	r3, [pc, #8]	@ (8000984 <HAL_GetTick+0x10>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	2000008c 	.word	0x2000008c

08000988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	0002      	movs	r2, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b7f      	cmp	r3, #127	@ 0x7f
 800099c:	d828      	bhi.n	80009f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a5c <__NVIC_SetPriority+0xd4>)
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	33c0      	adds	r3, #192	@ 0xc0
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	589b      	ldr	r3, [r3, r2]
 80009ae:	1dfa      	adds	r2, r7, #7
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	0011      	movs	r1, r2
 80009b4:	2203      	movs	r2, #3
 80009b6:	400a      	ands	r2, r1
 80009b8:	00d2      	lsls	r2, r2, #3
 80009ba:	21ff      	movs	r1, #255	@ 0xff
 80009bc:	4091      	lsls	r1, r2
 80009be:	000a      	movs	r2, r1
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	401a      	ands	r2, r3
 80009c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	22ff      	movs	r2, #255	@ 0xff
 80009cc:	401a      	ands	r2, r3
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	0018      	movs	r0, r3
 80009d4:	2303      	movs	r3, #3
 80009d6:	4003      	ands	r3, r0
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009dc:	481f      	ldr	r0, [pc, #124]	@ (8000a5c <__NVIC_SetPriority+0xd4>)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	430a      	orrs	r2, r1
 80009e8:	33c0      	adds	r3, #192	@ 0xc0
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ee:	e031      	b.n	8000a54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <__NVIC_SetPriority+0xd8>)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0019      	movs	r1, r3
 80009f8:	230f      	movs	r3, #15
 80009fa:	400b      	ands	r3, r1
 80009fc:	3b08      	subs	r3, #8
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	3306      	adds	r3, #6
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	18d3      	adds	r3, r2, r3
 8000a06:	3304      	adds	r3, #4
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	1dfa      	adds	r2, r7, #7
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	0011      	movs	r1, r2
 8000a10:	2203      	movs	r2, #3
 8000a12:	400a      	ands	r2, r1
 8000a14:	00d2      	lsls	r2, r2, #3
 8000a16:	21ff      	movs	r1, #255	@ 0xff
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	000a      	movs	r2, r1
 8000a1c:	43d2      	mvns	r2, r2
 8000a1e:	401a      	ands	r2, r3
 8000a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	019b      	lsls	r3, r3, #6
 8000a26:	22ff      	movs	r2, #255	@ 0xff
 8000a28:	401a      	ands	r2, r3
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2303      	movs	r3, #3
 8000a32:	4003      	ands	r3, r0
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a38:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <__NVIC_SetPriority+0xd8>)
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	001c      	movs	r4, r3
 8000a40:	230f      	movs	r3, #15
 8000a42:	4023      	ands	r3, r4
 8000a44:	3b08      	subs	r3, #8
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	3306      	adds	r3, #6
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	18c3      	adds	r3, r0, r3
 8000a50:	3304      	adds	r3, #4
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b003      	add	sp, #12
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	045b      	lsls	r3, r3, #17
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d301      	bcc.n	8000a7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e010      	b.n	8000a9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <SysTick_Config+0x44>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	3a01      	subs	r2, #1
 8000a82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a84:	2301      	movs	r3, #1
 8000a86:	425b      	negs	r3, r3
 8000a88:	2103      	movs	r1, #3
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff ff7c 	bl	8000988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <SysTick_Config+0x44>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <SysTick_Config+0x44>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	e000e010 	.word	0xe000e010

08000aac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	1c02      	adds	r2, r0, #0
 8000abc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ff5d 	bl	8000988 <__NVIC_SetPriority>
}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff ffbf 	bl	8000a64 <SysTick_Config>
 8000ae6:	0003      	movs	r3, r0
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	e147      	b.n	8000d90 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2101      	movs	r1, #1
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	000a      	movs	r2, r1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d100      	bne.n	8000b18 <HAL_GPIO_Init+0x28>
 8000b16:	e138      	b.n	8000d8a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d005      	beq.n	8000b30 <HAL_GPIO_Init+0x40>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2203      	movs	r2, #3
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d130      	bne.n	8000b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	0013      	movs	r3, r2
 8000b40:	43da      	mvns	r2, r3
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	409a      	lsls	r2, r3
 8000b52:	0013      	movs	r3, r2
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b66:	2201      	movs	r2, #1
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	091b      	lsrs	r3, r3, #4
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2203      	movs	r2, #3
 8000b98:	4013      	ands	r3, r2
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d017      	beq.n	8000bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	409a      	lsls	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d123      	bne.n	8000c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	08da      	lsrs	r2, r3, #3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3208      	adds	r2, #8
 8000be2:	0092      	lsls	r2, r2, #2
 8000be4:	58d3      	ldr	r3, [r2, r3]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	2207      	movs	r2, #7
 8000bec:	4013      	ands	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	691a      	ldr	r2, [r3, #16]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	2107      	movs	r1, #7
 8000c06:	400b      	ands	r3, r1
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	6939      	ldr	r1, [r7, #16]
 8000c20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	401a      	ands	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	23c0      	movs	r3, #192	@ 0xc0
 8000c5c:	029b      	lsls	r3, r3, #10
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d100      	bne.n	8000c64 <HAL_GPIO_Init+0x174>
 8000c62:	e092      	b.n	8000d8a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c64:	4a50      	ldr	r2, [pc, #320]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	3318      	adds	r3, #24
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	589b      	ldr	r3, [r3, r2]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2203      	movs	r2, #3
 8000c76:	4013      	ands	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	0013      	movs	r3, r2
 8000c80:	43da      	mvns	r2, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	23a0      	movs	r3, #160	@ 0xa0
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d013      	beq.n	8000cba <HAL_GPIO_Init+0x1ca>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a45      	ldr	r2, [pc, #276]	@ (8000dac <HAL_GPIO_Init+0x2bc>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d00d      	beq.n	8000cb6 <HAL_GPIO_Init+0x1c6>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a44      	ldr	r2, [pc, #272]	@ (8000db0 <HAL_GPIO_Init+0x2c0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d007      	beq.n	8000cb2 <HAL_GPIO_Init+0x1c2>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a43      	ldr	r2, [pc, #268]	@ (8000db4 <HAL_GPIO_Init+0x2c4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_GPIO_Init+0x1be>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x1cc>
 8000cae:	2305      	movs	r3, #5
 8000cb0:	e004      	b.n	8000cbc <HAL_GPIO_Init+0x1cc>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_Init+0x1cc>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <HAL_GPIO_Init+0x1cc>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	400a      	ands	r2, r1
 8000cc2:	00d2      	lsls	r2, r2, #3
 8000cc4:	4093      	lsls	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ccc:	4936      	ldr	r1, [pc, #216]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3318      	adds	r3, #24
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cda:	4b33      	ldr	r3, [pc, #204]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	2380      	movs	r3, #128	@ 0x80
 8000cf0:	035b      	lsls	r3, r3, #13
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d04:	4b28      	ldr	r3, [pc, #160]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43da      	mvns	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	039b      	lsls	r3, r3, #14
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000d30:	2384      	movs	r3, #132	@ 0x84
 8000d32:	58d3      	ldr	r3, [r2, r3]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d54:	4914      	ldr	r1, [pc, #80]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000d56:	2284      	movs	r2, #132	@ 0x84
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000d5c:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000d5e:	2380      	movs	r3, #128	@ 0x80
 8000d60:	58d3      	ldr	r3, [r2, r3]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43da      	mvns	r2, r3
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	2380      	movs	r3, #128	@ 0x80
 8000d74:	025b      	lsls	r3, r3, #9
 8000d76:	4013      	ands	r3, r2
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d82:	4909      	ldr	r1, [pc, #36]	@ (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000d84:	2280      	movs	r2, #128	@ 0x80
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	40da      	lsrs	r2, r3
 8000d98:	1e13      	subs	r3, r2, #0
 8000d9a:	d000      	beq.n	8000d9e <HAL_GPIO_Init+0x2ae>
 8000d9c:	e6b0      	b.n	8000b00 <HAL_GPIO_Init+0x10>
  }
}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46c0      	nop			@ (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b006      	add	sp, #24
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40021800 	.word	0x40021800
 8000dac:	50000400 	.word	0x50000400
 8000db0:	50000800 	.word	0x50000800
 8000db4:	50000c00 	.word	0x50000c00

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	0008      	movs	r0, r1
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	1cbb      	adds	r3, r7, #2
 8000dc6:	1c02      	adds	r2, r0, #0
 8000dc8:	801a      	strh	r2, [r3, #0]
 8000dca:	1c7b      	adds	r3, r7, #1
 8000dcc:	1c0a      	adds	r2, r1, #0
 8000dce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd0:	1c7b      	adds	r3, r7, #1
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd8:	1cbb      	adds	r3, r7, #2
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de0:	e003      	b.n	8000dea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de2:	1cbb      	adds	r3, r7, #2
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000dfc:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	0019      	movs	r1, r3
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d11f      	bne.n	8000e58 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	189b      	adds	r3, r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4912      	ldr	r1, [pc, #72]	@ (8000e70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff f96a 	bl	8000100 <__udivsi3>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e32:	e008      	b.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	e001      	b.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e009      	b.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e48:	695a      	ldr	r2, [r3, #20]
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	401a      	ands	r2, r3
 8000e50:	2380      	movs	r3, #128	@ 0x80
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d0ed      	beq.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	40007000 	.word	0x40007000
 8000e68:	fffff9ff 	.word	0xfffff9ff
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	000f4240 	.word	0x000f4240

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e2f3      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d100      	bne.n	8000e92 <HAL_RCC_OscConfig+0x1e>
 8000e90:	e07c      	b.n	8000f8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e92:	4bc3      	ldr	r3, [pc, #780]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2238      	movs	r2, #56	@ 0x38
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e9c:	4bc0      	ldr	r3, [pc, #768]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	2b10      	cmp	r3, #16
 8000eaa:	d102      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x3e>
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d002      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d10b      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	4bb9      	ldr	r3, [pc, #740]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d062      	beq.n	8000f8a <HAL_RCC_OscConfig+0x116>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d15e      	bne.n	8000f8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e2ce      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	025b      	lsls	r3, r3, #9
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d107      	bne.n	8000eec <HAL_RCC_OscConfig+0x78>
 8000edc:	4bb0      	ldr	r3, [pc, #704]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4baf      	ldr	r3, [pc, #700]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e020      	b.n	8000f2e <HAL_RCC_OscConfig+0xba>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	23a0      	movs	r3, #160	@ 0xa0
 8000ef2:	02db      	lsls	r3, r3, #11
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d10e      	bne.n	8000f16 <HAL_RCC_OscConfig+0xa2>
 8000ef8:	4ba9      	ldr	r3, [pc, #676]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4ba8      	ldr	r3, [pc, #672]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	02c9      	lsls	r1, r1, #11
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	4ba6      	ldr	r3, [pc, #664]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4ba5      	ldr	r3, [pc, #660]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	2180      	movs	r1, #128	@ 0x80
 8000f0e:	0249      	lsls	r1, r1, #9
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e00b      	b.n	8000f2e <HAL_RCC_OscConfig+0xba>
 8000f16:	4ba2      	ldr	r3, [pc, #648]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4ba1      	ldr	r3, [pc, #644]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000f1c:	49a1      	ldr	r1, [pc, #644]	@ (80011a4 <HAL_RCC_OscConfig+0x330>)
 8000f1e:	400a      	ands	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	4b9f      	ldr	r3, [pc, #636]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4b9e      	ldr	r3, [pc, #632]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000f28:	499f      	ldr	r1, [pc, #636]	@ (80011a8 <HAL_RCC_OscConfig+0x334>)
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d014      	beq.n	8000f60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f36:	f7ff fd1d 	bl	8000974 <HAL_GetTick>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fd18 	bl	8000974 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	@ 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e28d      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f52:	4b93      	ldr	r3, [pc, #588]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	2380      	movs	r3, #128	@ 0x80
 8000f58:	029b      	lsls	r3, r3, #10
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0xcc>
 8000f5e:	e015      	b.n	8000f8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f60:	f7ff fd08 	bl	8000974 <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fd03 	bl	8000974 <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b64      	cmp	r3, #100	@ 0x64
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e278      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f7c:	4b88      	ldr	r3, [pc, #544]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	029b      	lsls	r3, r3, #10
 8000f84:	4013      	ands	r3, r2
 8000f86:	d1f0      	bne.n	8000f6a <HAL_RCC_OscConfig+0xf6>
 8000f88:	e000      	b.n	8000f8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2202      	movs	r2, #2
 8000f92:	4013      	ands	r3, r2
 8000f94:	d100      	bne.n	8000f98 <HAL_RCC_OscConfig+0x124>
 8000f96:	e099      	b.n	80010cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f98:	4b81      	ldr	r3, [pc, #516]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2238      	movs	r2, #56	@ 0x38
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	4013      	ands	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d102      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x144>
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d002      	beq.n	8000fbe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d135      	bne.n	800102a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fbe:	4b78      	ldr	r3, [pc, #480]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d005      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x162>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e24b      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd6:	4b72      	ldr	r3, [pc, #456]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a74      	ldr	r2, [pc, #464]	@ (80011ac <HAL_RCC_OscConfig+0x338>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	0019      	movs	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	021a      	lsls	r2, r3, #8
 8000fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d112      	bne.n	8001018 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ff2:	4b6b      	ldr	r3, [pc, #428]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80011b0 <HAL_RCC_OscConfig+0x33c>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	4b67      	ldr	r3, [pc, #412]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001002:	430a      	orrs	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001006:	4b66      	ldr	r3, [pc, #408]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	0adb      	lsrs	r3, r3, #11
 800100c:	2207      	movs	r2, #7
 800100e:	4013      	ands	r3, r2
 8001010:	4a68      	ldr	r2, [pc, #416]	@ (80011b4 <HAL_RCC_OscConfig+0x340>)
 8001012:	40da      	lsrs	r2, r3
 8001014:	4b68      	ldr	r3, [pc, #416]	@ (80011b8 <HAL_RCC_OscConfig+0x344>)
 8001016:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001018:	4b68      	ldr	r3, [pc, #416]	@ (80011bc <HAL_RCC_OscConfig+0x348>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff fc4d 	bl	80008bc <HAL_InitTick>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d051      	beq.n	80010ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e221      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d030      	beq.n	8001094 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001032:	4b5b      	ldr	r3, [pc, #364]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a5e      	ldr	r2, [pc, #376]	@ (80011b0 <HAL_RCC_OscConfig+0x33c>)
 8001038:	4013      	ands	r3, r2
 800103a:	0019      	movs	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	4b57      	ldr	r3, [pc, #348]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001042:	430a      	orrs	r2, r1
 8001044:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001046:	4b56      	ldr	r3, [pc, #344]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b55      	ldr	r3, [pc, #340]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	0049      	lsls	r1, r1, #1
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001054:	f7ff fc8e 	bl	8000974 <HAL_GetTick>
 8001058:	0003      	movs	r3, r0
 800105a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fc89 	bl	8000974 <HAL_GetTick>
 8001062:	0002      	movs	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1fe      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001070:	4b4b      	ldr	r3, [pc, #300]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4013      	ands	r3, r2
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b48      	ldr	r3, [pc, #288]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a4a      	ldr	r2, [pc, #296]	@ (80011ac <HAL_RCC_OscConfig+0x338>)
 8001082:	4013      	ands	r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	021a      	lsls	r2, r3, #8
 800108c:	4b44      	ldr	r3, [pc, #272]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 800108e:	430a      	orrs	r2, r1
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	e01b      	b.n	80010cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001094:	4b42      	ldr	r3, [pc, #264]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b41      	ldr	r3, [pc, #260]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 800109a:	4949      	ldr	r1, [pc, #292]	@ (80011c0 <HAL_RCC_OscConfig+0x34c>)
 800109c:	400a      	ands	r2, r1
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc68 	bl	8000974 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010aa:	f7ff fc63 	bl	8000974 <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e1d8      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010bc:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4013      	ands	r3, r2
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x236>
 80010c8:	e000      	b.n	80010cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2208      	movs	r2, #8
 80010d2:	4013      	ands	r3, r2
 80010d4:	d047      	beq.n	8001166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80010d6:	4b32      	ldr	r3, [pc, #200]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2238      	movs	r2, #56	@ 0x38
 80010dc:	4013      	ands	r3, r2
 80010de:	2b18      	cmp	r3, #24
 80010e0:	d10a      	bne.n	80010f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010e2:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e6:	2202      	movs	r2, #2
 80010e8:	4013      	ands	r3, r2
 80010ea:	d03c      	beq.n	8001166 <HAL_RCC_OscConfig+0x2f2>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d138      	bne.n	8001166 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e1ba      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d019      	beq.n	8001134 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001102:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001104:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001106:	2101      	movs	r1, #1
 8001108:	430a      	orrs	r2, r1
 800110a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110c:	f7ff fc32 	bl	8000974 <HAL_GetTick>
 8001110:	0003      	movs	r3, r0
 8001112:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001116:	f7ff fc2d 	bl	8000974 <HAL_GetTick>
 800111a:	0002      	movs	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e1a2      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 800112a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112c:	2202      	movs	r2, #2
 800112e:	4013      	ands	r3, r2
 8001130:	d0f1      	beq.n	8001116 <HAL_RCC_OscConfig+0x2a2>
 8001132:	e018      	b.n	8001166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001136:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 800113a:	2101      	movs	r1, #1
 800113c:	438a      	bics	r2, r1
 800113e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001140:	f7ff fc18 	bl	8000974 <HAL_GetTick>
 8001144:	0003      	movs	r3, r0
 8001146:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114a:	f7ff fc13 	bl	8000974 <HAL_GetTick>
 800114e:	0002      	movs	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e188      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800115c:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001160:	2202      	movs	r2, #2
 8001162:	4013      	ands	r3, r2
 8001164:	d1f1      	bne.n	800114a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2204      	movs	r2, #4
 800116c:	4013      	ands	r3, r2
 800116e:	d100      	bne.n	8001172 <HAL_RCC_OscConfig+0x2fe>
 8001170:	e0c6      	b.n	8001300 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001172:	231f      	movs	r3, #31
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2238      	movs	r2, #56	@ 0x38
 8001180:	4013      	ands	r3, r2
 8001182:	2b20      	cmp	r3, #32
 8001184:	d11e      	bne.n	80011c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_RCC_OscConfig+0x32c>)
 8001188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800118a:	2202      	movs	r2, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d100      	bne.n	8001192 <HAL_RCC_OscConfig+0x31e>
 8001190:	e0b6      	b.n	8001300 <HAL_RCC_OscConfig+0x48c>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d000      	beq.n	800119c <HAL_RCC_OscConfig+0x328>
 800119a:	e0b1      	b.n	8001300 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e166      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
 80011a0:	40021000 	.word	0x40021000
 80011a4:	fffeffff 	.word	0xfffeffff
 80011a8:	fffbffff 	.word	0xfffbffff
 80011ac:	ffff80ff 	.word	0xffff80ff
 80011b0:	ffffc7ff 	.word	0xffffc7ff
 80011b4:	00f42400 	.word	0x00f42400
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004
 80011c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011c4:	4bac      	ldr	r3, [pc, #688]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80011c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	055b      	lsls	r3, r3, #21
 80011cc:	4013      	ands	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_OscConfig+0x360>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x362>
 80011d4:	2300      	movs	r3, #0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d011      	beq.n	80011fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4ba7      	ldr	r3, [pc, #668]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80011dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011de:	4ba6      	ldr	r3, [pc, #664]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	0549      	lsls	r1, r1, #21
 80011e4:	430a      	orrs	r2, r1
 80011e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011e8:	4ba3      	ldr	r3, [pc, #652]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80011ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	055b      	lsls	r3, r3, #21
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80011f6:	231f      	movs	r3, #31
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fe:	4b9f      	ldr	r3, [pc, #636]	@ (800147c <HAL_RCC_OscConfig+0x608>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	@ 0x80
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4013      	ands	r3, r2
 8001208:	d11a      	bne.n	8001240 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800120a:	4b9c      	ldr	r3, [pc, #624]	@ (800147c <HAL_RCC_OscConfig+0x608>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b9b      	ldr	r3, [pc, #620]	@ (800147c <HAL_RCC_OscConfig+0x608>)
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	0049      	lsls	r1, r1, #1
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001218:	f7ff fbac 	bl	8000974 <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001222:	f7ff fba7 	bl	8000974 <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e11c      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001234:	4b91      	ldr	r3, [pc, #580]	@ (800147c <HAL_RCC_OscConfig+0x608>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4013      	ands	r3, r2
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x3e2>
 8001248:	4b8b      	ldr	r3, [pc, #556]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 800124a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800124c:	4b8a      	ldr	r3, [pc, #552]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 800124e:	2101      	movs	r1, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001254:	e01c      	b.n	8001290 <HAL_RCC_OscConfig+0x41c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b05      	cmp	r3, #5
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x404>
 800125e:	4b86      	ldr	r3, [pc, #536]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001260:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001262:	4b85      	ldr	r3, [pc, #532]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001264:	2104      	movs	r1, #4
 8001266:	430a      	orrs	r2, r1
 8001268:	65da      	str	r2, [r3, #92]	@ 0x5c
 800126a:	4b83      	ldr	r3, [pc, #524]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 800126c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800126e:	4b82      	ldr	r3, [pc, #520]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001270:	2101      	movs	r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0x41c>
 8001278:	4b7f      	ldr	r3, [pc, #508]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 800127a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800127c:	4b7e      	ldr	r3, [pc, #504]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 800127e:	2101      	movs	r1, #1
 8001280:	438a      	bics	r2, r1
 8001282:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001284:	4b7c      	ldr	r3, [pc, #496]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001286:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001288:	4b7b      	ldr	r3, [pc, #492]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 800128a:	2104      	movs	r1, #4
 800128c:	438a      	bics	r2, r1
 800128e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d014      	beq.n	80012c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fb6c 	bl	8000974 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012a0:	e009      	b.n	80012b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fb67 	bl	8000974 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a74      	ldr	r2, [pc, #464]	@ (8001480 <HAL_RCC_OscConfig+0x60c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e0db      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b6:	4b70      	ldr	r3, [pc, #448]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80012b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x42e>
 80012c0:	e013      	b.n	80012ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff fb57 	bl	8000974 <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012ca:	e009      	b.n	80012e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff fb52 	bl	8000974 <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001480 <HAL_RCC_OscConfig+0x60c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e0c6      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e0:	4b65      	ldr	r3, [pc, #404]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80012e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e4:	2202      	movs	r2, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012ea:	231f      	movs	r3, #31
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012f4:	4b60      	ldr	r3, [pc, #384]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80012f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80012fa:	4962      	ldr	r1, [pc, #392]	@ (8001484 <HAL_RCC_OscConfig+0x610>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d100      	bne.n	800130a <HAL_RCC_OscConfig+0x496>
 8001308:	e0b0      	b.n	800146c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800130a:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2238      	movs	r2, #56	@ 0x38
 8001310:	4013      	ands	r3, r2
 8001312:	2b10      	cmp	r3, #16
 8001314:	d100      	bne.n	8001318 <HAL_RCC_OscConfig+0x4a4>
 8001316:	e078      	b.n	800140a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d153      	bne.n	80013c8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001320:	4b55      	ldr	r3, [pc, #340]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b54      	ldr	r3, [pc, #336]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001326:	4958      	ldr	r1, [pc, #352]	@ (8001488 <HAL_RCC_OscConfig+0x614>)
 8001328:	400a      	ands	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fb22 	bl	8000974 <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff fb1d 	bl	8000974 <HAL_GetTick>
 800133a:	0002      	movs	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e092      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001348:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	049b      	lsls	r3, r3, #18
 8001350:	4013      	ands	r3, r2
 8001352:	d1f0      	bne.n	8001336 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001354:	4b48      	ldr	r3, [pc, #288]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a4c      	ldr	r2, [pc, #304]	@ (800148c <HAL_RCC_OscConfig+0x618>)
 800135a:	4013      	ands	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1a      	ldr	r2, [r3, #32]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	431a      	orrs	r2, r3
 800137c:	4b3e      	ldr	r3, [pc, #248]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 800137e:	430a      	orrs	r2, r1
 8001380:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001382:	4b3d      	ldr	r3, [pc, #244]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b3c      	ldr	r3, [pc, #240]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	0449      	lsls	r1, r1, #17
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001390:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	4b38      	ldr	r3, [pc, #224]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001396:	2180      	movs	r1, #128	@ 0x80
 8001398:	0549      	lsls	r1, r1, #21
 800139a:	430a      	orrs	r2, r1
 800139c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fae9 	bl	8000974 <HAL_GetTick>
 80013a2:	0003      	movs	r3, r0
 80013a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fae4 	bl	8000974 <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e059      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	049b      	lsls	r3, r3, #18
 80013c2:	4013      	ands	r3, r2
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x534>
 80013c6:	e051      	b.n	800146c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80013ce:	492e      	ldr	r1, [pc, #184]	@ (8001488 <HAL_RCC_OscConfig+0x614>)
 80013d0:	400a      	ands	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff face 	bl	8000974 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff fac9 	bl	8000974 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e03e      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f0:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	049b      	lsls	r3, r3, #18
 80013f8:	4013      	ands	r3, r2
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001402:	4923      	ldr	r1, [pc, #140]	@ (8001490 <HAL_RCC_OscConfig+0x61c>)
 8001404:	400a      	ands	r2, r1
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	e030      	b.n	800146c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e02b      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001416:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <HAL_RCC_OscConfig+0x604>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2203      	movs	r2, #3
 8001420:	401a      	ands	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	429a      	cmp	r2, r3
 8001428:	d11e      	bne.n	8001468 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2270      	movs	r2, #112	@ 0x70
 800142e:	401a      	ands	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d117      	bne.n	8001468 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	23fe      	movs	r3, #254	@ 0xfe
 800143c:	01db      	lsls	r3, r3, #7
 800143e:	401a      	ands	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d10e      	bne.n	8001468 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	23f8      	movs	r3, #248	@ 0xf8
 800144e:	039b      	lsls	r3, r3, #14
 8001450:	401a      	ands	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d106      	bne.n	8001468 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	0f5b      	lsrs	r3, r3, #29
 800145e:	075a      	lsls	r2, r3, #29
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b008      	add	sp, #32
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	40021000 	.word	0x40021000
 800147c:	40007000 	.word	0x40007000
 8001480:	00001388 	.word	0x00001388
 8001484:	efffffff 	.word	0xefffffff
 8001488:	feffffff 	.word	0xfeffffff
 800148c:	1fc1808c 	.word	0x1fc1808c
 8001490:	effefffc 	.word	0xeffefffc

08001494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0e9      	b.n	800167c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a8:	4b76      	ldr	r3, [pc, #472]	@ (8001684 <HAL_RCC_ClockConfig+0x1f0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2207      	movs	r2, #7
 80014ae:	4013      	ands	r3, r2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d91e      	bls.n	80014f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b73      	ldr	r3, [pc, #460]	@ (8001684 <HAL_RCC_ClockConfig+0x1f0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2207      	movs	r2, #7
 80014bc:	4393      	bics	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	4b70      	ldr	r3, [pc, #448]	@ (8001684 <HAL_RCC_ClockConfig+0x1f0>)
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014c8:	f7ff fa54 	bl	8000974 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014d0:	e009      	b.n	80014e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d2:	f7ff fa4f 	bl	8000974 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001688 <HAL_RCC_ClockConfig+0x1f4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0ca      	b.n	800167c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014e6:	4b67      	ldr	r3, [pc, #412]	@ (8001684 <HAL_RCC_ClockConfig+0x1f0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2207      	movs	r2, #7
 80014ec:	4013      	ands	r3, r2
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1ee      	bne.n	80014d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2202      	movs	r2, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	d015      	beq.n	800152a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2204      	movs	r2, #4
 8001504:	4013      	ands	r3, r2
 8001506:	d006      	beq.n	8001516 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001508:	4b60      	ldr	r3, [pc, #384]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	4b5f      	ldr	r3, [pc, #380]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 800150e:	21e0      	movs	r1, #224	@ 0xe0
 8001510:	01c9      	lsls	r1, r1, #7
 8001512:	430a      	orrs	r2, r1
 8001514:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001516:	4b5d      	ldr	r3, [pc, #372]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4a5d      	ldr	r2, [pc, #372]	@ (8001690 <HAL_RCC_ClockConfig+0x1fc>)
 800151c:	4013      	ands	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	4b59      	ldr	r3, [pc, #356]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 8001526:	430a      	orrs	r2, r1
 8001528:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2201      	movs	r2, #1
 8001530:	4013      	ands	r3, r2
 8001532:	d057      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d107      	bne.n	800154c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800153c:	4b53      	ldr	r3, [pc, #332]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	029b      	lsls	r3, r3, #10
 8001544:	4013      	ands	r3, r2
 8001546:	d12b      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e097      	b.n	800167c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d107      	bne.n	8001564 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001554:	4b4d      	ldr	r3, [pc, #308]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	049b      	lsls	r3, r3, #18
 800155c:	4013      	ands	r3, r2
 800155e:	d11f      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e08b      	b.n	800167c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d107      	bne.n	800157c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156c:	4b47      	ldr	r3, [pc, #284]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4013      	ands	r3, r2
 8001576:	d113      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e07f      	b.n	800167c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d106      	bne.n	8001592 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001584:	4b41      	ldr	r3, [pc, #260]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 8001586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	d108      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e074      	b.n	800167c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001592:	4b3e      	ldr	r3, [pc, #248]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 8001594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e06d      	b.n	800167c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015a0:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2207      	movs	r2, #7
 80015a6:	4393      	bics	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015b4:	f7ff f9de 	bl	8000974 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015bc:	e009      	b.n	80015d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015be:	f7ff f9d9 	bl	8000974 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001688 <HAL_RCC_ClockConfig+0x1f4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e054      	b.n	800167c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	4b2e      	ldr	r3, [pc, #184]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2238      	movs	r2, #56	@ 0x38
 80015d8:	401a      	ands	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d1ec      	bne.n	80015be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015e4:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <HAL_RCC_ClockConfig+0x1f0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2207      	movs	r2, #7
 80015ea:	4013      	ands	r3, r2
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d21e      	bcs.n	8001630 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <HAL_RCC_ClockConfig+0x1f0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2207      	movs	r2, #7
 80015f8:	4393      	bics	r3, r2
 80015fa:	0019      	movs	r1, r3
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <HAL_RCC_ClockConfig+0x1f0>)
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001604:	f7ff f9b6 	bl	8000974 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800160c:	e009      	b.n	8001622 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160e:	f7ff f9b1 	bl	8000974 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_RCC_ClockConfig+0x1f4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e02c      	b.n	800167c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2207      	movs	r2, #7
 8001628:	4013      	ands	r3, r2
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d1ee      	bne.n	800160e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2204      	movs	r2, #4
 8001636:	4013      	ands	r3, r2
 8001638:	d009      	beq.n	800164e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <HAL_RCC_ClockConfig+0x200>)
 8001640:	4013      	ands	r3, r2
 8001642:	0019      	movs	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	4b10      	ldr	r3, [pc, #64]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 800164a:	430a      	orrs	r2, r1
 800164c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800164e:	f000 f829 	bl	80016a4 <HAL_RCC_GetSysClockFreq>
 8001652:	0001      	movs	r1, r0
 8001654:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <HAL_RCC_ClockConfig+0x1f8>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	220f      	movs	r2, #15
 800165c:	401a      	ands	r2, r3
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <HAL_RCC_ClockConfig+0x204>)
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	58d3      	ldr	r3, [r2, r3]
 8001664:	221f      	movs	r2, #31
 8001666:	4013      	ands	r3, r2
 8001668:	000a      	movs	r2, r1
 800166a:	40da      	lsrs	r2, r3
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <HAL_RCC_ClockConfig+0x208>)
 800166e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_RCC_ClockConfig+0x20c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff f921 	bl	80008bc <HAL_InitTick>
 800167a:	0003      	movs	r3, r0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b004      	add	sp, #16
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40022000 	.word	0x40022000
 8001688:	00001388 	.word	0x00001388
 800168c:	40021000 	.word	0x40021000
 8001690:	fffff0ff 	.word	0xfffff0ff
 8001694:	ffff8fff 	.word	0xffff8fff
 8001698:	08001f54 	.word	0x08001f54
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016aa:	4b3c      	ldr	r3, [pc, #240]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2238      	movs	r2, #56	@ 0x38
 80016b0:	4013      	ands	r3, r2
 80016b2:	d10f      	bne.n	80016d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016b4:	4b39      	ldr	r3, [pc, #228]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0adb      	lsrs	r3, r3, #11
 80016ba:	2207      	movs	r2, #7
 80016bc:	4013      	ands	r3, r2
 80016be:	2201      	movs	r2, #1
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80016c6:	6839      	ldr	r1, [r7, #0]
 80016c8:	4835      	ldr	r0, [pc, #212]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016ca:	f7fe fd19 	bl	8000100 <__udivsi3>
 80016ce:	0003      	movs	r3, r0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	e05d      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d4:	4b31      	ldr	r3, [pc, #196]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2238      	movs	r2, #56	@ 0x38
 80016da:	4013      	ands	r3, r2
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016e0:	4b30      	ldr	r3, [pc, #192]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	e054      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e6:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2238      	movs	r2, #56	@ 0x38
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d138      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016f2:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2203      	movs	r2, #3
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	2207      	movs	r2, #7
 8001704:	4013      	ands	r3, r2
 8001706:	3301      	adds	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d10d      	bne.n	800172c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	4824      	ldr	r0, [pc, #144]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001714:	f7fe fcf4 	bl	8000100 <__udivsi3>
 8001718:	0003      	movs	r3, r0
 800171a:	0019      	movs	r1, r3
 800171c:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	227f      	movs	r2, #127	@ 0x7f
 8001724:	4013      	ands	r3, r2
 8001726:	434b      	muls	r3, r1
 8001728:	617b      	str	r3, [r7, #20]
        break;
 800172a:	e00d      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	481c      	ldr	r0, [pc, #112]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001730:	f7fe fce6 	bl	8000100 <__udivsi3>
 8001734:	0003      	movs	r3, r0
 8001736:	0019      	movs	r1, r3
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	227f      	movs	r2, #127	@ 0x7f
 8001740:	4013      	ands	r3, r2
 8001742:	434b      	muls	r3, r1
 8001744:	617b      	str	r3, [r7, #20]
        break;
 8001746:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0f5b      	lsrs	r3, r3, #29
 800174e:	2207      	movs	r2, #7
 8001750:	4013      	ands	r3, r2
 8001752:	3301      	adds	r3, #1
 8001754:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	6978      	ldr	r0, [r7, #20]
 800175a:	f7fe fcd1 	bl	8000100 <__udivsi3>
 800175e:	0003      	movs	r3, r0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	e015      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001764:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2238      	movs	r2, #56	@ 0x38
 800176a:	4013      	ands	r3, r2
 800176c:	2b20      	cmp	r3, #32
 800176e:	d103      	bne.n	8001778 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_RCC_GetSysClockFreq+0xf8>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2238      	movs	r2, #56	@ 0x38
 800177e:	4013      	ands	r3, r2
 8001780:	2b18      	cmp	r3, #24
 8001782:	d103      	bne.n	800178c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001784:	23fa      	movs	r3, #250	@ 0xfa
 8001786:	01db      	lsls	r3, r3, #7
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	e001      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001790:	693b      	ldr	r3, [r7, #16]
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b006      	add	sp, #24
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	40021000 	.word	0x40021000
 80017a0:	00f42400 	.word	0x00f42400
 80017a4:	007a1200 	.word	0x007a1200

080017a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0a8      	b.n	800190c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	2382      	movs	r3, #130	@ 0x82
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d009      	beq.n	80017e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
 80017d4:	e005      	b.n	80017e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	225d      	movs	r2, #93	@ 0x5d
 80017ec:	5c9b      	ldrb	r3, [r3, r2]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	225c      	movs	r2, #92	@ 0x5c
 80017f8:	2100      	movs	r1, #0
 80017fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	0018      	movs	r0, r3
 8001800:	f7fe ffaa 	bl	8000758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	225d      	movs	r2, #93	@ 0x5d
 8001808:	2102      	movs	r1, #2
 800180a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2140      	movs	r1, #64	@ 0x40
 8001818:	438a      	bics	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	23e0      	movs	r3, #224	@ 0xe0
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	429a      	cmp	r2, r3
 8001826:	d902      	bls.n	800182e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e002      	b.n	8001834 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	23f0      	movs	r3, #240	@ 0xf0
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	429a      	cmp	r2, r3
 800183e:	d008      	beq.n	8001852 <HAL_SPI_Init+0xaa>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	23e0      	movs	r3, #224	@ 0xe0
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	429a      	cmp	r2, r3
 800184a:	d002      	beq.n	8001852 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	2382      	movs	r3, #130	@ 0x82
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	401a      	ands	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6899      	ldr	r1, [r3, #8]
 8001860:	2384      	movs	r3, #132	@ 0x84
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	400b      	ands	r3, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2102      	movs	r1, #2
 800186e:	400b      	ands	r3, r1
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	2101      	movs	r1, #1
 8001878:	400b      	ands	r3, r1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6999      	ldr	r1, [r3, #24]
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	400b      	ands	r3, r1
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2138      	movs	r1, #56	@ 0x38
 800188e:	400b      	ands	r3, r1
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	2180      	movs	r1, #128	@ 0x80
 8001898:	400b      	ands	r3, r1
 800189a:	431a      	orrs	r2, r3
 800189c:	0011      	movs	r1, r2
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018a2:	2380      	movs	r3, #128	@ 0x80
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	2204      	movs	r2, #4
 80018b8:	401a      	ands	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	2110      	movs	r1, #16
 80018c0:	400b      	ands	r3, r1
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c8:	2108      	movs	r1, #8
 80018ca:	400b      	ands	r3, r1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68d9      	ldr	r1, [r3, #12]
 80018d2:	23f0      	movs	r3, #240	@ 0xf0
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	400b      	ands	r3, r1
 80018d8:	431a      	orrs	r2, r3
 80018da:	0011      	movs	r1, r2
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	015b      	lsls	r3, r3, #5
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4907      	ldr	r1, [pc, #28]	@ (8001914 <HAL_SPI_Init+0x16c>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	225d      	movs	r2, #93	@ 0x5d
 8001906:	2101      	movs	r1, #1
 8001908:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b004      	add	sp, #16
 8001912:	bd80      	pop	{r7, pc}
 8001914:	fffff7ff 	.word	0xfffff7ff

08001918 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	1dbb      	adds	r3, r7, #6
 8001926:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001928:	231f      	movs	r3, #31
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	225c      	movs	r2, #92	@ 0x5c
 8001934:	5c9b      	ldrb	r3, [r3, r2]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_SPI_Transmit+0x26>
 800193a:	2302      	movs	r3, #2
 800193c:	e147      	b.n	8001bce <HAL_SPI_Transmit+0x2b6>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	225c      	movs	r2, #92	@ 0x5c
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001946:	f7ff f815 	bl	8000974 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800194e:	2316      	movs	r3, #22
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	1dba      	adds	r2, r7, #6
 8001954:	8812      	ldrh	r2, [r2, #0]
 8001956:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	225d      	movs	r2, #93	@ 0x5d
 800195c:	5c9b      	ldrb	r3, [r3, r2]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d004      	beq.n	800196e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001964:	231f      	movs	r3, #31
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2202      	movs	r2, #2
 800196a:	701a      	strb	r2, [r3, #0]
    goto error;
 800196c:	e128      	b.n	8001bc0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_SPI_Transmit+0x64>
 8001974:	1dbb      	adds	r3, r7, #6
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d104      	bne.n	8001986 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800197c:	231f      	movs	r3, #31
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
    goto error;
 8001984:	e11c      	b.n	8001bc0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	225d      	movs	r2, #93	@ 0x5d
 800198a:	2103      	movs	r1, #3
 800198c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1dba      	adds	r2, r7, #6
 800199e:	8812      	ldrh	r2, [r2, #0]
 80019a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1dba      	adds	r2, r7, #6
 80019a6:	8812      	ldrh	r2, [r2, #0]
 80019a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2244      	movs	r2, #68	@ 0x44
 80019b4:	2100      	movs	r1, #0
 80019b6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2246      	movs	r2, #70	@ 0x46
 80019bc:	2100      	movs	r1, #0
 80019be:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d110      	bne.n	80019fa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2140      	movs	r1, #64	@ 0x40
 80019e4:	438a      	bics	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2180      	movs	r1, #128	@ 0x80
 80019f4:	01c9      	lsls	r1, r1, #7
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2240      	movs	r2, #64	@ 0x40
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b40      	cmp	r3, #64	@ 0x40
 8001a06:	d007      	beq.n	8001a18 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2140      	movs	r1, #64	@ 0x40
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	23e0      	movs	r3, #224	@ 0xe0
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d952      	bls.n	8001aca <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_SPI_Transmit+0x11e>
 8001a2c:	2316      	movs	r3, #22
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d143      	bne.n	8001abe <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a46:	1c9a      	adds	r2, r3, #2
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a5a:	e030      	b.n	8001abe <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d112      	bne.n	8001a90 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7a:	1c9a      	adds	r2, r3, #2
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001a8e:	e016      	b.n	8001abe <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a90:	f7fe ff70 	bl	8000974 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d802      	bhi.n	8001aa6 <HAL_SPI_Transmit+0x18e>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	d102      	bne.n	8001aac <HAL_SPI_Transmit+0x194>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d108      	bne.n	8001abe <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001aac:	231f      	movs	r3, #31
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	225d      	movs	r2, #93	@ 0x5d
 8001ab8:	2101      	movs	r1, #1
 8001aba:	5499      	strb	r1, [r3, r2]
          goto error;
 8001abc:	e080      	b.n	8001bc0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1c9      	bne.n	8001a5c <HAL_SPI_Transmit+0x144>
 8001ac8:	e053      	b.n	8001b72 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_SPI_Transmit+0x1c4>
 8001ad2:	2316      	movs	r3, #22
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d145      	bne.n	8001b68 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001b02:	e031      	b.n	8001b68 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d113      	bne.n	8001b3a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	330c      	adds	r3, #12
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b38:	e016      	b.n	8001b68 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b3a:	f7fe ff1b 	bl	8000974 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d802      	bhi.n	8001b50 <HAL_SPI_Transmit+0x238>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	d102      	bne.n	8001b56 <HAL_SPI_Transmit+0x23e>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001b56:	231f      	movs	r3, #31
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	225d      	movs	r2, #93	@ 0x5d
 8001b62:	2101      	movs	r1, #1
 8001b64:	5499      	strb	r1, [r3, r2]
          goto error;
 8001b66:	e02b      	b.n	8001bc0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1c8      	bne.n	8001b04 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	6839      	ldr	r1, [r7, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 f95d 	bl	8001e38 <SPI_EndRxTxTransaction>
 8001b7e:	1e03      	subs	r3, r0, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2220      	movs	r2, #32
 8001b86:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10a      	bne.n	8001ba6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001bae:	231f      	movs	r3, #31
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e003      	b.n	8001bc0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	225d      	movs	r2, #93	@ 0x5d
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	225c      	movs	r2, #92	@ 0x5c
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001bc8:	231f      	movs	r3, #31
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	781b      	ldrb	r3, [r3, #0]
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b008      	add	sp, #32
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001be8:	f7fe fec4 	bl	8000974 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	18d3      	adds	r3, r2, r3
 8001bf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001bf8:	f7fe febc 	bl	8000974 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c00:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	015b      	lsls	r3, r3, #5
 8001c06:	0d1b      	lsrs	r3, r3, #20
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	4353      	muls	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c0e:	e058      	b.n	8001cc2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	d055      	beq.n	8001cc2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c16:	f7fe fead 	bl	8000974 <HAL_GetTick>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d902      	bls.n	8001c2c <SPI_WaitFlagStateUntilTimeout+0x54>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d142      	bne.n	8001cb2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	21e0      	movs	r1, #224	@ 0xe0
 8001c38:	438a      	bics	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	2382      	movs	r3, #130	@ 0x82
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d113      	bne.n	8001c70 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d005      	beq.n	8001c60 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d107      	bne.n	8001c70 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2140      	movs	r1, #64	@ 0x40
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	019b      	lsls	r3, r3, #6
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d110      	bne.n	8001c9e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	491a      	ldr	r1, [pc, #104]	@ (8001cf0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001c88:	400a      	ands	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2180      	movs	r1, #128	@ 0x80
 8001c98:	0189      	lsls	r1, r1, #6
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	225d      	movs	r2, #93	@ 0x5d
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	225c      	movs	r2, #92	@ 0x5c
 8001caa:	2100      	movs	r1, #0
 8001cac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e017      	b.n	8001ce2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	425a      	negs	r2, r3
 8001cd2:	4153      	adcs	r3, r2
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d197      	bne.n	8001c10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b008      	add	sp, #32
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	ffffdfff 	.word	0xffffdfff

08001cf4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001d02:	2317      	movs	r3, #23
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001d0a:	f7fe fe33 	bl	8000974 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	18d3      	adds	r3, r2, r3
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001d1a:	f7fe fe2b 	bl	8000974 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	330c      	adds	r3, #12
 8001d28:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001d2a:	4b41      	ldr	r3, [pc, #260]	@ (8001e30 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	0013      	movs	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	189b      	adds	r3, r3, r2
 8001d34:	00da      	lsls	r2, r3, #3
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	0d1b      	lsrs	r3, r3, #20
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d3c:	4353      	muls	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001d40:	e068      	b.n	8001e14 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	23c0      	movs	r3, #192	@ 0xc0
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d10a      	bne.n	8001d62 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d107      	bne.n	8001d62 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	2117      	movs	r1, #23
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	d055      	beq.n	8001e14 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d68:	f7fe fe04 	bl	8000974 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d902      	bls.n	8001d7e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d142      	bne.n	8001e04 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	21e0      	movs	r1, #224	@ 0xe0
 8001d8a:	438a      	bics	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	2382      	movs	r3, #130	@ 0x82
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d113      	bne.n	8001dc2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d005      	beq.n	8001db2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	2380      	movs	r3, #128	@ 0x80
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d107      	bne.n	8001dc2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2140      	movs	r1, #64	@ 0x40
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d110      	bne.n	8001df0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4916      	ldr	r1, [pc, #88]	@ (8001e34 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001dda:	400a      	ands	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2180      	movs	r1, #128	@ 0x80
 8001dea:	0189      	lsls	r1, r1, #6
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	225d      	movs	r2, #93	@ 0x5d
 8001df4:	2101      	movs	r1, #1
 8001df6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	225c      	movs	r2, #92	@ 0x5c
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e010      	b.n	8001e26 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d18e      	bne.n	8001d42 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b00a      	add	sp, #40	@ 0x28
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	20000000 	.word	0x20000000
 8001e34:	ffffdfff 	.word	0xffffdfff

08001e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	23c0      	movs	r3, #192	@ 0xc0
 8001e48:	0159      	lsls	r1, r3, #5
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	0013      	movs	r3, r2
 8001e52:	2200      	movs	r2, #0
 8001e54:	f7ff ff4e 	bl	8001cf4 <SPI_WaitFifoStateUntilTimeout>
 8001e58:	1e03      	subs	r3, r0, #0
 8001e5a:	d007      	beq.n	8001e6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e60:	2220      	movs	r2, #32
 8001e62:	431a      	orrs	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e027      	b.n	8001ebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	0013      	movs	r3, r2
 8001e76:	2200      	movs	r2, #0
 8001e78:	2180      	movs	r1, #128	@ 0x80
 8001e7a:	f7ff fead 	bl	8001bd8 <SPI_WaitFlagStateUntilTimeout>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d007      	beq.n	8001e92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e86:	2220      	movs	r2, #32
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e014      	b.n	8001ebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	23c0      	movs	r3, #192	@ 0xc0
 8001e96:	00d9      	lsls	r1, r3, #3
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f7ff ff27 	bl	8001cf4 <SPI_WaitFifoStateUntilTimeout>
 8001ea6:	1e03      	subs	r3, r0, #0
 8001ea8:	d007      	beq.n	8001eba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eae:	2220      	movs	r2, #32
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e000      	b.n	8001ebc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b004      	add	sp, #16
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <memset>:
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	1882      	adds	r2, r0, r2
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d100      	bne.n	8001ece <memset+0xa>
 8001ecc:	4770      	bx	lr
 8001ece:	7019      	strb	r1, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	e7f9      	b.n	8001ec8 <memset+0x4>

08001ed4 <__libc_init_array>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	2600      	movs	r6, #0
 8001ed8:	4c0c      	ldr	r4, [pc, #48]	@ (8001f0c <__libc_init_array+0x38>)
 8001eda:	4d0d      	ldr	r5, [pc, #52]	@ (8001f10 <__libc_init_array+0x3c>)
 8001edc:	1b64      	subs	r4, r4, r5
 8001ede:	10a4      	asrs	r4, r4, #2
 8001ee0:	42a6      	cmp	r6, r4
 8001ee2:	d109      	bne.n	8001ef8 <__libc_init_array+0x24>
 8001ee4:	2600      	movs	r6, #0
 8001ee6:	f000 f819 	bl	8001f1c <_init>
 8001eea:	4c0a      	ldr	r4, [pc, #40]	@ (8001f14 <__libc_init_array+0x40>)
 8001eec:	4d0a      	ldr	r5, [pc, #40]	@ (8001f18 <__libc_init_array+0x44>)
 8001eee:	1b64      	subs	r4, r4, r5
 8001ef0:	10a4      	asrs	r4, r4, #2
 8001ef2:	42a6      	cmp	r6, r4
 8001ef4:	d105      	bne.n	8001f02 <__libc_init_array+0x2e>
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
 8001ef8:	00b3      	lsls	r3, r6, #2
 8001efa:	58eb      	ldr	r3, [r5, r3]
 8001efc:	4798      	blx	r3
 8001efe:	3601      	adds	r6, #1
 8001f00:	e7ee      	b.n	8001ee0 <__libc_init_array+0xc>
 8001f02:	00b3      	lsls	r3, r6, #2
 8001f04:	58eb      	ldr	r3, [r5, r3]
 8001f06:	4798      	blx	r3
 8001f08:	3601      	adds	r6, #1
 8001f0a:	e7f2      	b.n	8001ef2 <__libc_init_array+0x1e>
 8001f0c:	08001f94 	.word	0x08001f94
 8001f10:	08001f94 	.word	0x08001f94
 8001f14:	08001f98 	.word	0x08001f98
 8001f18:	08001f94 	.word	0x08001f94

08001f1c <_init>:
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f22:	bc08      	pop	{r3}
 8001f24:	469e      	mov	lr, r3
 8001f26:	4770      	bx	lr

08001f28 <_fini>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2e:	bc08      	pop	{r3}
 8001f30:	469e      	mov	lr, r3
 8001f32:	4770      	bx	lr
