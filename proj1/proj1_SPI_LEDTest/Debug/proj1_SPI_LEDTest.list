
proj1_SPI_LEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002f88  08002f88  00003f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003034  08003034  00005674  2**0
                  CONTENTS
  4 .ARM          00000000  08003034  08003034  00005674  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003034  08003034  00005674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003034  08003034  00004034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003038  08003038  00004038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000674  20000000  0800303c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000674  080036b0  00005674  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  080036b0  00005838  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005674  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ddd5  00000000  00000000  0000569c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003588  00000000  00000000  00023471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001048b  00000000  00000000  000269f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00036e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a6a  00000000  00000000  00037f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001604a  00000000  00000000  000399d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021efe  00000000  00000000  0004fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f418  00000000  00000000  0007191a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100d32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003024  00000000  00000000  00100d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00103d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000674 	.word	0x20000674
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002f70 	.word	0x08002f70

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000678 	.word	0x20000678
 80000fc:	08002f70 	.word	0x08002f70

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <LED_Init>:
static void MX_SPI1_Init(void);
static void MX_RTC_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void LED_Init(){
 80003ec:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_IN_RST_GPIO_Port,LED_IN_RST_Pin,GPIO_PIN_SET);
 80003ee:	24a0      	movs	r4, #160	@ 0xa0
 80003f0:	05e4      	lsls	r4, r4, #23
 80003f2:	0020      	movs	r0, r4
 80003f4:	2201      	movs	r2, #1
 80003f6:	2140      	movs	r1, #64	@ 0x40
 80003f8:	f000 fdda 	bl	8000fb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_OUT_EN_GPIO_Port,LED_OUT_EN_Pin,GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2108      	movs	r1, #8
 8000400:	0020      	movs	r0, r4
 8000402:	f000 fdd5 	bl	8000fb0 <HAL_GPIO_WritePin>

}
 8000406:	bd10      	pop	{r4, pc}

08000408 <LED_Display_6Byte_SPI>:
      }
    }
  }
}

void LED_Display_6Byte_SPI(GPIO_PinState * Input_Data) {
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	4657      	mov	r7, sl
 800040c:	464e      	mov	r6, r9
 800040e:	4645      	mov	r5, r8
 8000410:	46de      	mov	lr, fp
 8000412:	b5e0      	push	{r5, r6, r7, lr}
      GPIO_PinState temp=Input_Data[j+i-7];
 8000414:	7803      	ldrb	r3, [r0, #0]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000416:	7982      	ldrb	r2, [r0, #6]
      Input_Data[i-1-j]=temp;
 8000418:	7183      	strb	r3, [r0, #6]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800041a:	7002      	strb	r2, [r0, #0]
      GPIO_PinState temp=Input_Data[j+i-7];
 800041c:	7843      	ldrb	r3, [r0, #1]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800041e:	7942      	ldrb	r2, [r0, #5]
      Input_Data[i-1-j]=temp;
 8000420:	7143      	strb	r3, [r0, #5]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000422:	7042      	strb	r2, [r0, #1]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000424:	7883      	ldrb	r3, [r0, #2]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000426:	7902      	ldrb	r2, [r0, #4]
      Input_Data[i-1-j]=temp;
 8000428:	7103      	strb	r3, [r0, #4]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800042a:	7082      	strb	r2, [r0, #2]
      GPIO_PinState temp=Input_Data[j+i-7];
 800042c:	7a03      	ldrb	r3, [r0, #8]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800042e:	7b82      	ldrb	r2, [r0, #14]
      Input_Data[i-1-j]=temp;
 8000430:	7383      	strb	r3, [r0, #14]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000432:	7202      	strb	r2, [r0, #8]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000434:	7a43      	ldrb	r3, [r0, #9]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000436:	7b42      	ldrb	r2, [r0, #13]
      Input_Data[i-1-j]=temp;
 8000438:	7343      	strb	r3, [r0, #13]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800043a:	7242      	strb	r2, [r0, #9]
      GPIO_PinState temp=Input_Data[j+i-7];
 800043c:	7a83      	ldrb	r3, [r0, #10]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800043e:	7b02      	ldrb	r2, [r0, #12]
      Input_Data[i-1-j]=temp;
 8000440:	7303      	strb	r3, [r0, #12]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000442:	7282      	strb	r2, [r0, #10]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000444:	7c03      	ldrb	r3, [r0, #16]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000446:	7d82      	ldrb	r2, [r0, #22]
      Input_Data[i-1-j]=temp;
 8000448:	7583      	strb	r3, [r0, #22]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800044a:	7402      	strb	r2, [r0, #16]
      GPIO_PinState temp=Input_Data[j+i-7];
 800044c:	7c43      	ldrb	r3, [r0, #17]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800044e:	7d42      	ldrb	r2, [r0, #21]
void LED_Display_6Byte_SPI(GPIO_PinState * Input_Data) {
 8000450:	b083      	sub	sp, #12
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000452:	7442      	strb	r2, [r0, #17]
      Input_Data[i-1-j]=temp;
 8000454:	7543      	strb	r3, [r0, #21]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000456:	7d02      	ldrb	r2, [r0, #20]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000458:	7c83      	ldrb	r3, [r0, #18]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800045a:	7482      	strb	r2, [r0, #18]
      Input_Data[i-1-j]=temp;
 800045c:	7503      	strb	r3, [r0, #20]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800045e:	7f82      	ldrb	r2, [r0, #30]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000460:	7e03      	ldrb	r3, [r0, #24]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000462:	7602      	strb	r2, [r0, #24]
      Input_Data[i-1-j]=temp;
 8000464:	7783      	strb	r3, [r0, #30]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000466:	7f42      	ldrb	r2, [r0, #29]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000468:	7e43      	ldrb	r3, [r0, #25]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800046a:	7642      	strb	r2, [r0, #25]
      Input_Data[i-1-j]=temp;
 800046c:	7743      	strb	r3, [r0, #29]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800046e:	7f02      	ldrb	r2, [r0, #28]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000470:	7e83      	ldrb	r3, [r0, #26]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000472:	7682      	strb	r2, [r0, #26]
      Input_Data[i-1-j]=temp;
 8000474:	7703      	strb	r3, [r0, #28]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000476:	2220      	movs	r2, #32
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000478:	2326      	movs	r3, #38	@ 0x26
      GPIO_PinState temp=Input_Data[j+i-7];
 800047a:	5c81      	ldrb	r1, [r0, r2]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800047c:	5cc4      	ldrb	r4, [r0, r3]
        Bytes[byte_index]|=(1<<(7-i));
 800047e:	2708      	movs	r7, #8
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000480:	5484      	strb	r4, [r0, r2]
      Input_Data[i-1-j]=temp;
 8000482:	54c1      	strb	r1, [r0, r3]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000484:	3201      	adds	r2, #1
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000486:	3b01      	subs	r3, #1
      GPIO_PinState temp=Input_Data[j+i-7];
 8000488:	5c81      	ldrb	r1, [r0, r2]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800048a:	5cc4      	ldrb	r4, [r0, r3]
        Bytes[byte_index]|=(1<<(7-i));
 800048c:	2604      	movs	r6, #4
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800048e:	5484      	strb	r4, [r0, r2]
      Input_Data[i-1-j]=temp;
 8000490:	54c1      	strb	r1, [r0, r3]
      GPIO_PinState temp=Input_Data[j+i-7];
 8000492:	3201      	adds	r2, #1
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000494:	3b01      	subs	r3, #1
      GPIO_PinState temp=Input_Data[j+i-7];
 8000496:	5c81      	ldrb	r1, [r0, r2]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 8000498:	5cc4      	ldrb	r4, [r0, r3]
        Bytes[byte_index]|=(1<<(7-i));
 800049a:	2502      	movs	r5, #2
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800049c:	5484      	strb	r4, [r0, r2]
      Input_Data[i-1-j]=temp;
 800049e:	54c1      	strb	r1, [r0, r3]
      GPIO_PinState temp=Input_Data[j+i-7];
 80004a0:	3206      	adds	r2, #6
      Input_Data[j+i-7]=Input_Data[i-1-j];
 80004a2:	330a      	adds	r3, #10
      GPIO_PinState temp=Input_Data[j+i-7];
 80004a4:	5c81      	ldrb	r1, [r0, r2]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 80004a6:	5cc4      	ldrb	r4, [r0, r3]
 80004a8:	5484      	strb	r4, [r0, r2]
      Input_Data[i-1-j]=temp;
 80004aa:	54c1      	strb	r1, [r0, r3]
      GPIO_PinState temp=Input_Data[j+i-7];
 80004ac:	3201      	adds	r2, #1
      Input_Data[j+i-7]=Input_Data[i-1-j];
 80004ae:	3b01      	subs	r3, #1
      GPIO_PinState temp=Input_Data[j+i-7];
 80004b0:	5c81      	ldrb	r1, [r0, r2]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 80004b2:	5cc4      	ldrb	r4, [r0, r3]
 80004b4:	5484      	strb	r4, [r0, r2]
      Input_Data[i-1-j]=temp;
 80004b6:	54c1      	strb	r1, [r0, r3]
      GPIO_PinState temp=Input_Data[j+i-7];
 80004b8:	3201      	adds	r2, #1
      Input_Data[j+i-7]=Input_Data[i-1-j];
 80004ba:	3b01      	subs	r3, #1
      GPIO_PinState temp=Input_Data[j+i-7];
 80004bc:	5c81      	ldrb	r1, [r0, r2]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 80004be:	5cc4      	ldrb	r4, [r0, r3]
 80004c0:	5484      	strb	r4, [r0, r2]
  Input_Fix(Input_Data);
  uint8_t Input_Byte[6]={0};
 80004c2:	466a      	mov	r2, sp
      Input_Data[i-1-j]=temp;
 80004c4:	54c1      	strb	r1, [r0, r3]
  uint8_t Input_Byte[6]={0};
 80004c6:	2300      	movs	r3, #0
 80004c8:	8093      	strh	r3, [r2, #4]
        Bytes[byte_index]|=(1<<(7-i));
 80004ca:	2280      	movs	r2, #128	@ 0x80
 80004cc:	4252      	negs	r2, r2
 80004ce:	4692      	mov	sl, r2
 80004d0:	2240      	movs	r2, #64	@ 0x40
 80004d2:	4691      	mov	r9, r2
 80004d4:	2220      	movs	r2, #32
 80004d6:	4690      	mov	r8, r2
 80004d8:	2210      	movs	r2, #16
 80004da:	4694      	mov	ip, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	0001      	movs	r1, r0
  uint8_t Input_Byte[6]={0};
 80004e0:	9300      	str	r3, [sp, #0]
        Bytes[byte_index]|=(1<<(7-i));
 80004e2:	4693      	mov	fp, r2
 80004e4:	466b      	mov	r3, sp
 80004e6:	3130      	adds	r1, #48	@ 0x30
      switch(Input_Bits[byte_index*8+i]) {
 80004e8:	7802      	ldrb	r2, [r0, #0]
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	d103      	bne.n	80004f6 <LED_Display_6Byte_SPI+0xee>
        Bytes[byte_index]|=(1<<(7-i));
 80004ee:	4654      	mov	r4, sl
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	4322      	orrs	r2, r4
 80004f4:	701a      	strb	r2, [r3, #0]
      switch(Input_Bits[byte_index*8+i]) {
 80004f6:	7842      	ldrb	r2, [r0, #1]
 80004f8:	2a01      	cmp	r2, #1
 80004fa:	d103      	bne.n	8000504 <LED_Display_6Byte_SPI+0xfc>
        Bytes[byte_index]|=(1<<(7-i));
 80004fc:	464c      	mov	r4, r9
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	4322      	orrs	r2, r4
 8000502:	701a      	strb	r2, [r3, #0]
      switch(Input_Bits[byte_index*8+i]) {
 8000504:	7882      	ldrb	r2, [r0, #2]
 8000506:	2a01      	cmp	r2, #1
 8000508:	d103      	bne.n	8000512 <LED_Display_6Byte_SPI+0x10a>
        Bytes[byte_index]|=(1<<(7-i));
 800050a:	4644      	mov	r4, r8
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	4322      	orrs	r2, r4
 8000510:	701a      	strb	r2, [r3, #0]
      switch(Input_Bits[byte_index*8+i]) {
 8000512:	78c2      	ldrb	r2, [r0, #3]
 8000514:	2a01      	cmp	r2, #1
 8000516:	d103      	bne.n	8000520 <LED_Display_6Byte_SPI+0x118>
        Bytes[byte_index]|=(1<<(7-i));
 8000518:	4664      	mov	r4, ip
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	4322      	orrs	r2, r4
 800051e:	701a      	strb	r2, [r3, #0]
      switch(Input_Bits[byte_index*8+i]) {
 8000520:	7902      	ldrb	r2, [r0, #4]
 8000522:	2a01      	cmp	r2, #1
 8000524:	d102      	bne.n	800052c <LED_Display_6Byte_SPI+0x124>
        Bytes[byte_index]|=(1<<(7-i));
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	433a      	orrs	r2, r7
 800052a:	701a      	strb	r2, [r3, #0]
      switch(Input_Bits[byte_index*8+i]) {
 800052c:	7942      	ldrb	r2, [r0, #5]
 800052e:	2a01      	cmp	r2, #1
 8000530:	d102      	bne.n	8000538 <LED_Display_6Byte_SPI+0x130>
        Bytes[byte_index]|=(1<<(7-i));
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	4332      	orrs	r2, r6
 8000536:	701a      	strb	r2, [r3, #0]
      switch(Input_Bits[byte_index*8+i]) {
 8000538:	7982      	ldrb	r2, [r0, #6]
 800053a:	2a01      	cmp	r2, #1
 800053c:	d102      	bne.n	8000544 <LED_Display_6Byte_SPI+0x13c>
        Bytes[byte_index]|=(1<<(7-i));
 800053e:	781a      	ldrb	r2, [r3, #0]
 8000540:	432a      	orrs	r2, r5
 8000542:	701a      	strb	r2, [r3, #0]
      switch(Input_Bits[byte_index*8+i]) {
 8000544:	79c2      	ldrb	r2, [r0, #7]
 8000546:	2a01      	cmp	r2, #1
 8000548:	d103      	bne.n	8000552 <LED_Display_6Byte_SPI+0x14a>
        Bytes[byte_index]|=(1<<(7-i));
 800054a:	465c      	mov	r4, fp
 800054c:	781a      	ldrb	r2, [r3, #0]
 800054e:	4322      	orrs	r2, r4
 8000550:	701a      	strb	r2, [r3, #0]
  for (int byte_index=0;byte_index<6;byte_index++) {
 8000552:	3008      	adds	r0, #8
 8000554:	3301      	adds	r3, #1
 8000556:	4281      	cmp	r1, r0
 8000558:	d1c6      	bne.n	80004e8 <LED_Display_6Byte_SPI+0xe0>
 Generate_Bytes(Input_Data,Input_Byte);

  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_RESET);
 800055a:	20a0      	movs	r0, #160	@ 0xa0
 800055c:	2200      	movs	r2, #0
 800055e:	2110      	movs	r1, #16
 8000560:	05c0      	lsls	r0, r0, #23
 8000562:	f000 fd25 	bl	8000fb0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,Input_Byte, 6, 1);
 8000566:	2301      	movs	r3, #1
 8000568:	4669      	mov	r1, sp
 800056a:	2206      	movs	r2, #6
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <LED_Display_6Byte_SPI+0x184>)
 800056e:	f001 fdfd 	bl	800216c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_SET);
 8000572:	20a0      	movs	r0, #160	@ 0xa0
 8000574:	2201      	movs	r2, #1
 8000576:	2110      	movs	r1, #16
 8000578:	05c0      	lsls	r0, r0, #23
 800057a:	f000 fd19 	bl	8000fb0 <HAL_GPIO_WritePin>
}
 800057e:	b003      	add	sp, #12
 8000580:	bcf0      	pop	{r4, r5, r6, r7}
 8000582:	46bb      	mov	fp, r7
 8000584:	46b2      	mov	sl, r6
 8000586:	46a9      	mov	r9, r5
 8000588:	46a0      	mov	r8, r4
 800058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058c:	20000770 	.word	0x20000770

08000590 <LED_Display_Color>:
//  }
//  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_SET);
//}

void LED_Display_Color(LED_Color * Color_Input) {
  uint8_t Color_Bytes[48]={1};
 8000590:	2301      	movs	r3, #1
void LED_Display_Color(LED_Color * Color_Input) {
 8000592:	b570      	push	{r4, r5, r6, lr}
 8000594:	0004      	movs	r4, r0
 8000596:	b08c      	sub	sp, #48	@ 0x30
  uint8_t Color_Bytes[48]={1};
 8000598:	2100      	movs	r1, #0
 800059a:	222c      	movs	r2, #44	@ 0x2c
 800059c:	a801      	add	r0, sp, #4
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	f002 fcba 	bl	8002f18 <memset>
  int color_index=0,byte_index=47;
  while(color_index<16) {
 80005a4:	232d      	movs	r3, #45	@ 0x2d
 80005a6:	0020      	movs	r0, r4
  uint8_t Color_Bytes[48]={1};
 80005a8:	466d      	mov	r5, sp
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
      break;
    }
    case WHITE:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 80005aa:	2400      	movs	r4, #0
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 80005ac:	2101      	movs	r1, #1
    switch(Color_Input[color_index]){
 80005ae:	4e1a      	ldr	r6, [pc, #104]	@ (8000618 <LED_Display_Color+0x88>)
 80005b0:	446b      	add	r3, sp
 80005b2:	7802      	ldrb	r2, [r0, #0]
 80005b4:	2a07      	cmp	r2, #7
 80005b6:	d805      	bhi.n	80005c4 <LED_Display_Color+0x34>
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	58b2      	ldr	r2, [r6, r2]
 80005bc:	4697      	mov	pc, r2
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 80005be:	709c      	strb	r4, [r3, #2]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 80005c0:	705c      	strb	r4, [r3, #1]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 80005c2:	7019      	strb	r1, [r3, #0]
  while(color_index<16) {
 80005c4:	3001      	adds	r0, #1
 80005c6:	1eda      	subs	r2, r3, #3
 80005c8:	429d      	cmp	r5, r3
 80005ca:	d008      	beq.n	80005de <LED_Display_Color+0x4e>
 80005cc:	0013      	movs	r3, r2
 80005ce:	e7f0      	b.n	80005b2 <LED_Display_Color+0x22>
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 80005d0:	709c      	strb	r4, [r3, #2]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 80005d2:	7059      	strb	r1, [r3, #1]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 80005d4:	701c      	strb	r4, [r3, #0]
  while(color_index<16) {
 80005d6:	3001      	adds	r0, #1
 80005d8:	1eda      	subs	r2, r3, #3
 80005da:	429d      	cmp	r5, r3
 80005dc:	d1f6      	bne.n	80005cc <LED_Display_Color+0x3c>
    }
    }
    color_index++;
    byte_index-=3;
  }
  LED_Display_6Byte_SPI(Color_Bytes);
 80005de:	0028      	movs	r0, r5
 80005e0:	f7ff ff12 	bl	8000408 <LED_Display_6Byte_SPI>
}
 80005e4:	b00c      	add	sp, #48	@ 0x30
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 80005e8:	7099      	strb	r1, [r3, #2]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 80005ea:	7059      	strb	r1, [r3, #1]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 80005ec:	701c      	strb	r4, [r3, #0]
      break;
 80005ee:	e7e9      	b.n	80005c4 <LED_Display_Color+0x34>
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 80005f0:	709c      	strb	r4, [r3, #2]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 80005f2:	705c      	strb	r4, [r3, #1]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 80005f4:	701c      	strb	r4, [r3, #0]
      break;
 80005f6:	e7e5      	b.n	80005c4 <LED_Display_Color+0x34>
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 80005f8:	7099      	strb	r1, [r3, #2]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 80005fa:	7059      	strb	r1, [r3, #1]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 80005fc:	7019      	strb	r1, [r3, #0]
      break;
 80005fe:	e7e1      	b.n	80005c4 <LED_Display_Color+0x34>
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 8000600:	709c      	strb	r4, [r3, #2]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 8000602:	7059      	strb	r1, [r3, #1]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 8000604:	7019      	strb	r1, [r3, #0]
      break;
 8000606:	e7dd      	b.n	80005c4 <LED_Display_Color+0x34>
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 8000608:	7099      	strb	r1, [r3, #2]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 800060a:	705c      	strb	r4, [r3, #1]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 800060c:	7019      	strb	r1, [r3, #0]
      break;
 800060e:	e7d9      	b.n	80005c4 <LED_Display_Color+0x34>
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 8000610:	7099      	strb	r1, [r3, #2]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 8000612:	705c      	strb	r4, [r3, #1]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 8000614:	701c      	strb	r4, [r3, #0]
      break;
 8000616:	e7d5      	b.n	80005c4 <LED_Display_Color+0x34>
 8000618:	08002f88 	.word	0x08002f88

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b510      	push	{r4, lr}
 800061e:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000620:	2234      	movs	r2, #52	@ 0x34
 8000622:	2100      	movs	r1, #0
 8000624:	a804      	add	r0, sp, #16
 8000626:	f002 fc77 	bl	8002f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062a:	2210      	movs	r2, #16
 800062c:	2100      	movs	r1, #0
 800062e:	4668      	mov	r0, sp
 8000630:	f002 fc72 	bl	8002f18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2080      	movs	r0, #128	@ 0x80
 8000636:	0080      	lsls	r0, r0, #2
 8000638:	f000 fcdc 	bl	8000ff4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800063c:	23a0      	movs	r3, #160	@ 0xa0
 800063e:	2209      	movs	r2, #9
 8000640:	02db      	lsls	r3, r3, #11
 8000642:	9204      	str	r2, [sp, #16]
 8000644:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	3302      	adds	r3, #2
 800064c:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000652:	2380      	movs	r3, #128	@ 0x80
 8000654:	2210      	movs	r2, #16
 8000656:	029b      	lsls	r3, r3, #10
 8000658:	920e      	str	r2, [sp, #56]	@ 0x38
 800065a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800065c:	23e0      	movs	r3, #224	@ 0xe0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000660:	061b      	lsls	r3, r3, #24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000666:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f000 fcf4 	bl	8001054 <HAL_RCC_OscConfig>
 800066c:	2800      	cmp	r0, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000672:	e7fe      	b.n	8000672 <SystemClock_Config+0x56>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067a:	2100      	movs	r1, #0
 800067c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000682:	f000 ff93 	bl	80015ac <HAL_RCC_ClockConfig>
 8000686:	2800      	cmp	r0, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x72>
 800068a:	b672      	cpsid	i
  while (1)
 800068c:	e7fe      	b.n	800068c <SystemClock_Config+0x70>
}
 800068e:	b012      	add	sp, #72	@ 0x48
 8000690:	bd10      	pop	{r4, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)

08000694 <main>:
{
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	b08c      	sub	sp, #48	@ 0x30
  HAL_Init();
 8000698:	f000 fb22 	bl	8000ce0 <HAL_Init>
  SystemClock_Config();
 800069c:	f7ff ffbe 	bl	800061c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	2214      	movs	r2, #20
 80006a2:	2100      	movs	r1, #0
 80006a4:	a807      	add	r0, sp, #28
 80006a6:	f002 fc37 	bl	8002f18 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b7f      	ldr	r3, [pc, #508]	@ (80008ac <main+0x218>)
  HAL_GPIO_WritePin(GPIOA, LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin, GPIO_PIN_RESET);
 80006b0:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin, GPIO_PIN_RESET);
 80006b4:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4311      	orrs	r1, r2
 80006b8:	6359      	str	r1, [r3, #52]	@ 0x34
 80006ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	400a      	ands	r2, r1
 80006c0:	9201      	str	r2, [sp, #4]
 80006c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c6:	432a      	orrs	r2, r5
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006cc:	402a      	ands	r2, r5
 80006ce:	9202      	str	r2, [sp, #8]
 80006d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2202      	movs	r2, #2
 80006d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80006d6:	4311      	orrs	r1, r2
 80006d8:	6359      	str	r1, [r3, #52]	@ 0x34
 80006da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin, GPIO_PIN_RESET);
 80006dc:	2158      	movs	r1, #88	@ 0x58
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	401a      	ands	r2, r3
 80006e0:	9203      	str	r2, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin, GPIO_PIN_RESET);
 80006e6:	f000 fc63 	bl	8000fb0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin;
 80006ec:	2358      	movs	r3, #88	@ 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	a907      	add	r1, sp, #28
 80006f0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin;
 80006f2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f000 fb67 	bl	8000dcc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fe:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(detect_GPIO_Port, &GPIO_InitStruct);
 8000700:	486b      	ldr	r0, [pc, #428]	@ (80008b0 <main+0x21c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000702:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(detect_GPIO_Port, &GPIO_InitStruct);
 8000704:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000706:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = detect_Pin;
 800070a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(detect_GPIO_Port, &GPIO_InitStruct);
 800070c:	f000 fb5e 	bl	8000dcc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2005      	movs	r0, #5
 8000716:	f000 fb09 	bl	8000d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800071a:	2005      	movs	r0, #5
 800071c:	f000 fb30 	bl	8000d80 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8000720:	4864      	ldr	r0, [pc, #400]	@ (80008b4 <main+0x220>)
 8000722:	4b65      	ldr	r3, [pc, #404]	@ (80008b8 <main+0x224>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000724:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 8000726:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000728:	2382      	movs	r3, #130	@ 0x82
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072e:	23e0      	movs	r3, #224	@ 0xe0
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000734:	2380      	movs	r3, #128	@ 0x80
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800073a:	3bfa      	subs	r3, #250	@ 0xfa
 800073c:	3bff      	subs	r3, #255	@ 0xff
 800073e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000740:	3301      	adds	r3, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000742:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000744:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000746:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074a:	6244      	str	r4, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074c:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074e:	6304      	str	r4, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000750:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000752:	f001 fc65 	bl	8002020 <HAL_SPI_Init>
 8000756:	1e04      	subs	r4, r0, #0
 8000758:	d001      	beq.n	800075e <main+0xca>
 800075a:	b672      	cpsid	i
  while (1)
 800075c:	e7fe      	b.n	800075c <main+0xc8>
  RTC_TimeTypeDef sTime = {0};
 800075e:	2214      	movs	r2, #20
 8000760:	2100      	movs	r1, #0
 8000762:	a807      	add	r0, sp, #28
 8000764:	f002 fbd8 	bl	8002f18 <memset>
  hrtc.Instance = RTC;
 8000768:	4d54      	ldr	r5, [pc, #336]	@ (80008bc <main+0x228>)
 800076a:	4b55      	ldr	r3, [pc, #340]	@ (80008c0 <main+0x22c>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800076c:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 800076e:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = 127;
 8000770:	237f      	movs	r3, #127	@ 0x7f
 8000772:	60eb      	str	r3, [r5, #12]
  hrtc.Init.SynchPrediv = 255;
 8000774:	3380      	adds	r3, #128	@ 0x80
 8000776:	612b      	str	r3, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000778:	2380      	movs	r3, #128	@ 0x80
 800077a:	05db      	lsls	r3, r3, #23
  RTC_DateTypeDef sDate = {0};
 800077c:	9404      	str	r4, [sp, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800077e:	60ac      	str	r4, [r5, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000780:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000782:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000784:	61ec      	str	r4, [r5, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000786:	622b      	str	r3, [r5, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000788:	626c      	str	r4, [r5, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800078a:	f001 f8f5 	bl	8001978 <HAL_RTC_Init>
 800078e:	2800      	cmp	r0, #0
 8000790:	d001      	beq.n	8000796 <main+0x102>
 8000792:	b672      	cpsid	i
  while (1)
 8000794:	e7fe      	b.n	8000794 <main+0x100>
  sTime.Hours = 0x17;
 8000796:	466a      	mov	r2, sp
 8000798:	2317      	movs	r3, #23
  sTime.Seconds = 0x0;
 800079a:	7790      	strb	r0, [r2, #30]
  sTime.Hours = 0x17;
 800079c:	8393      	strh	r3, [r2, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800079e:	a907      	add	r1, sp, #28
  sTime.SubSeconds = 0x0;
 80007a0:	9008      	str	r0, [sp, #32]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007a2:	900a      	str	r0, [sp, #40]	@ 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007a4:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007a6:	2201      	movs	r2, #1
 80007a8:	0028      	movs	r0, r5
 80007aa:	f001 f961 	bl	8001a70 <HAL_RTC_SetTime>
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d001      	beq.n	80007b6 <main+0x122>
 80007b2:	b672      	cpsid	i
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <main+0x120>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007b6:	4b43      	ldr	r3, [pc, #268]	@ (80008c4 <main+0x230>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007b8:	a904      	add	r1, sp, #16
 80007ba:	2201      	movs	r2, #1
 80007bc:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007be:	9304      	str	r3, [sp, #16]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007c0:	f001 fa00 	bl	8001bc4 <HAL_RTC_SetDate>
 80007c4:	1e01      	subs	r1, r0, #0
 80007c6:	d001      	beq.n	80007cc <main+0x138>
 80007c8:	b672      	cpsid	i
  while (1)
 80007ca:	e7fe      	b.n	80007ca <main+0x136>
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80007cc:	0002      	movs	r2, r0
 80007ce:	0028      	movs	r0, r5
 80007d0:	f001 fa92 	bl	8001cf8 <HAL_RTCEx_SetWakeUpTimer>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d001      	beq.n	80007dc <main+0x148>
 80007d8:	b672      	cpsid	i
  while (1)
 80007da:	e7fe      	b.n	80007da <main+0x146>
  huart1.Instance = USART1;
 80007dc:	4c3a      	ldr	r4, [pc, #232]	@ (80008c8 <main+0x234>)
 80007de:	4b3b      	ldr	r3, [pc, #236]	@ (80008cc <main+0x238>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	260c      	movs	r6, #12
  huart1.Instance = USART1;
 80007e2:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 80007e4:	23e1      	movs	r3, #225	@ 0xe1
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	60a0      	str	r0, [r4, #8]
  huart1.Init.BaudRate = 115200;
 80007e8:	025b      	lsls	r3, r3, #9
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ea:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ec:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	61e0      	str	r0, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	6220      	str	r0, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f4:	6260      	str	r0, [r4, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f6:	62a0      	str	r0, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f8:	0020      	movs	r0, r4
  huart1.Init.BaudRate = 115200;
 80007fa:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	6166      	str	r6, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	f002 f9e7 	bl	8002bd0 <HAL_UART_Init>
 8000802:	1e01      	subs	r1, r0, #0
 8000804:	d001      	beq.n	800080a <main+0x176>
 8000806:	b672      	cpsid	i
  while (1)
 8000808:	e7fe      	b.n	8000808 <main+0x174>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080a:	0020      	movs	r0, r4
 800080c:	f002 fae2 	bl	8002dd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000810:	1e01      	subs	r1, r0, #0
 8000812:	d001      	beq.n	8000818 <main+0x184>
 8000814:	b672      	cpsid	i
  while (1)
 8000816:	e7fe      	b.n	8000816 <main+0x182>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000818:	0020      	movs	r0, r4
 800081a:	f002 fb2b 	bl	8002e74 <HAL_UARTEx_SetRxFifoThreshold>
 800081e:	2800      	cmp	r0, #0
 8000820:	d001      	beq.n	8000826 <main+0x192>
 8000822:	b672      	cpsid	i
  while (1)
 8000824:	e7fe      	b.n	8000824 <main+0x190>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000826:	0020      	movs	r0, r4
 8000828:	f002 fab8 	bl	8002d9c <HAL_UARTEx_DisableFifoMode>
 800082c:	1e05      	subs	r5, r0, #0
 800082e:	d001      	beq.n	8000834 <main+0x1a0>
 8000830:	b672      	cpsid	i
  while (1)
 8000832:	e7fe      	b.n	8000832 <main+0x19e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000834:	0001      	movs	r1, r0
 8000836:	2210      	movs	r2, #16
 8000838:	a807      	add	r0, sp, #28
 800083a:	f002 fb6d 	bl	8002f18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083e:	0032      	movs	r2, r6
 8000840:	0029      	movs	r1, r5
 8000842:	a804      	add	r0, sp, #16
 8000844:	f002 fb68 	bl	8002f18 <memset>
  htim1.Instance = TIM1;
 8000848:	4c21      	ldr	r4, [pc, #132]	@ (80008d0 <main+0x23c>)
 800084a:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <main+0x240>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800084c:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 800084e:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 15;
 8000850:	230f      	movs	r3, #15
 8000852:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 499;
 8000854:	23f4      	movs	r3, #244	@ 0xf4
 8000856:	33ff      	adds	r3, #255	@ 0xff
 8000858:	60e3      	str	r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800085a:	3b74      	subs	r3, #116	@ 0x74
 800085c:	3bff      	subs	r3, #255	@ 0xff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	60a5      	str	r5, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8000862:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000864:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000866:	f001 fd91 	bl	800238c <HAL_TIM_Base_Init>
 800086a:	2800      	cmp	r0, #0
 800086c:	d001      	beq.n	8000872 <main+0x1de>
 800086e:	b672      	cpsid	i
  while (1)
 8000870:	e7fe      	b.n	8000870 <main+0x1dc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000872:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000874:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000876:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000878:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087a:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800087c:	f001 fe34 	bl	80024e8 <HAL_TIM_ConfigClockSource>
 8000880:	2800      	cmp	r0, #0
 8000882:	d001      	beq.n	8000888 <main+0x1f4>
 8000884:	b672      	cpsid	i
  while (1)
 8000886:	e7fe      	b.n	8000886 <main+0x1f2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800088a:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088e:	a904      	add	r1, sp, #16
 8000890:	0020      	movs	r0, r4
 8000892:	f001 ffa5 	bl	80027e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	2800      	cmp	r0, #0
 8000898:	d001      	beq.n	800089e <main+0x20a>
 800089a:	b672      	cpsid	i
  while (1)
 800089c:	e7fe      	b.n	800089c <main+0x208>
  LED_Init();
 800089e:	f7ff fda5 	bl	80003ec <LED_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80008a2:	0020      	movs	r0, r4
 80008a4:	f001 fdf2 	bl	800248c <HAL_TIM_Base_Start_IT>
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <main+0x214>
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	40021000 	.word	0x40021000
 80008b0:	50000400 	.word	0x50000400
 80008b4:	20000770 	.word	0x20000770
 80008b8:	40013000 	.word	0x40013000
 80008bc:	200007d4 	.word	0x200007d4
 80008c0:	40002800 	.word	0x40002800
 80008c4:	24080701 	.word	0x24080701
 80008c8:	20000690 	.word	0x20000690
 80008cc:	40013800 	.word	0x40013800
 80008d0:	20000724 	.word	0x20000724
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <Error_Handler>:
 80008d8:	b672      	cpsid	i
  while (1)
 80008da:	e7fe      	b.n	80008da <Error_Handler+0x2>

080008dc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008dc:	2201      	movs	r2, #1
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <HAL_MspInit+0x2c>)
{
 80008e0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80008e4:	4311      	orrs	r1, r2
 80008e6:	6419      	str	r1, [r3, #64]	@ 0x40
 80008e8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80008ea:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	9200      	str	r2, [sp, #0]
 80008f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008f4:	0549      	lsls	r1, r1, #21
 80008f6:	430a      	orrs	r2, r1
 80008f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008fc:	400b      	ands	r3, r1
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	b002      	add	sp, #8
 8000904:	4770      	bx	lr
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800090c:	b510      	push	{r4, lr}
 800090e:	0004      	movs	r4, r0
 8000910:	b088      	sub	sp, #32
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000912:	2218      	movs	r2, #24
 8000914:	2100      	movs	r1, #0
 8000916:	a802      	add	r0, sp, #8
 8000918:	f002 fafe 	bl	8002f18 <memset>
  if(hrtc->Instance==RTC)
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <HAL_RTC_MspInit+0x58>)
 800091e:	6822      	ldr	r2, [r4, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d001      	beq.n	8000928 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000924:	b008      	add	sp, #32
 8000926:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	029b      	lsls	r3, r3, #10
 800092c:	9302      	str	r3, [sp, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800092e:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	a802      	add	r0, sp, #8
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	f000 ff15 	bl	8001764 <HAL_RCCEx_PeriphCLKConfig>
 800093a:	2800      	cmp	r0, #0
 800093c:	d10f      	bne.n	800095e <HAL_RTC_MspInit+0x52>
    __HAL_RCC_RTC_ENABLE();
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_RTC_MspInit+0x5c>)
 8000942:	0212      	lsls	r2, r2, #8
 8000944:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8000946:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000948:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_RTC_ENABLE();
 800094a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800094c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800094e:	00c9      	lsls	r1, r1, #3
 8000950:	430a      	orrs	r2, r1
 8000952:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000956:	400b      	ands	r3, r1
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	9b01      	ldr	r3, [sp, #4]
}
 800095c:	e7e2      	b.n	8000924 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 800095e:	f7ff ffbb 	bl	80008d8 <Error_Handler>
 8000962:	e7ec      	b.n	800093e <HAL_RTC_MspInit+0x32>
 8000964:	40002800 	.word	0x40002800
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800096c:	b510      	push	{r4, lr}
 800096e:	0004      	movs	r4, r0
 8000970:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	2214      	movs	r2, #20
 8000974:	2100      	movs	r1, #0
 8000976:	a802      	add	r0, sp, #8
 8000978:	f002 face 	bl	8002f18 <memset>
  if(hspi->Instance==SPI1)
 800097c:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <HAL_SPI_MspInit+0x54>)
 800097e:	6822      	ldr	r2, [r4, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d001      	beq.n	8000988 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000984:	b008      	add	sp, #32
 8000986:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <HAL_SPI_MspInit+0x58>)
 800098c:	0149      	lsls	r1, r1, #5
 800098e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000992:	430a      	orrs	r2, r1
 8000994:	641a      	str	r2, [r3, #64]	@ 0x40
 8000996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099a:	400a      	ands	r2, r1
 800099c:	9200      	str	r2, [sp, #0]
 800099e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	2201      	movs	r2, #1
 80009a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80009a4:	4311      	orrs	r1, r2
 80009a6:	6359      	str	r1, [r3, #52]	@ 0x34
 80009a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	401a      	ands	r2, r3
 80009ae:	9201      	str	r2, [sp, #4]
 80009b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LED_MOSI_Pin|LED_SCK_Pin;
 80009b2:	2224      	movs	r2, #36	@ 0x24
 80009b4:	2302      	movs	r3, #2
 80009b6:	9202      	str	r2, [sp, #8]
 80009b8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f000 fa07 	bl	8000dcc <HAL_GPIO_Init>
}
 80009be:	e7e1      	b.n	8000984 <HAL_SPI_MspInit+0x18>
 80009c0:	40013000 	.word	0x40013000
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <HAL_TIM_Base_MspInit+0x38>)
 80009cc:	6802      	ldr	r2, [r0, #0]
{
 80009ce:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d001      	beq.n	80009d8 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009d4:	b003      	add	sp, #12
 80009d6:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d8:	2180      	movs	r1, #128	@ 0x80
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <HAL_TIM_Base_MspInit+0x3c>)
 80009dc:	0109      	lsls	r1, r1, #4
 80009de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80009e0:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009e2:	430a      	orrs	r2, r1
 80009e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ea:	400b      	ands	r3, r1
 80009ec:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80009ee:	2100      	movs	r1, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009f0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80009f2:	f000 f99b 	bl	8000d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80009f6:	200d      	movs	r0, #13
 80009f8:	f000 f9c2 	bl	8000d80 <HAL_NVIC_EnableIRQ>
}
 80009fc:	e7ea      	b.n	80009d4 <HAL_TIM_Base_MspInit+0xc>
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	40012c00 	.word	0x40012c00
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	0004      	movs	r4, r0
 8000a0c:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	2214      	movs	r2, #20
 8000a10:	2100      	movs	r1, #0
 8000a12:	a802      	add	r0, sp, #8
 8000a14:	f002 fa80 	bl	8002f18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	2218      	movs	r2, #24
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	a808      	add	r0, sp, #32
 8000a1e:	f002 fa7b 	bl	8002f18 <memset>
  if(huart->Instance==USART1)
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_UART_MspInit+0x80>)
 8000a24:	6822      	ldr	r2, [r4, #0]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d001      	beq.n	8000a2e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a2a:	b00e      	add	sp, #56	@ 0x38
 8000a2c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a2e:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a30:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a32:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f000 fe96 	bl	8001764 <HAL_RCCEx_PeriphCLKConfig>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d121      	bne.n	8000a80 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <HAL_UART_MspInit+0x84>)
 8000a40:	01c9      	lsls	r1, r1, #7
 8000a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a44:	20c0      	movs	r0, #192	@ 0xc0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a46:	430a      	orrs	r2, r1
 8000a48:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a4c:	00c0      	lsls	r0, r0, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4e:	400a      	ands	r2, r1
 8000a50:	9200      	str	r2, [sp, #0]
 8000a52:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	2201      	movs	r2, #1
 8000a56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a58:	4311      	orrs	r1, r2
 8000a5a:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a5c:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a60:	9002      	str	r0, [sp, #8]
 8000a62:	9103      	str	r1, [sp, #12]
 8000a64:	2000      	movs	r0, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	9004      	str	r0, [sp, #16]
 8000a6a:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4013      	ands	r3, r2
 8000a70:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	a902      	add	r1, sp, #8
 8000a74:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a78:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f000 f9a7 	bl	8000dcc <HAL_GPIO_Init>
}
 8000a7e:	e7d4      	b.n	8000a2a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000a80:	f7ff ff2a 	bl	80008d8 <Error_Handler>
 8000a84:	e7da      	b.n	8000a3c <HAL_UART_MspInit+0x34>
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	40013800 	.word	0x40013800
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_GPIO_EXTI_Falling_Callback>:
/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000a90:	b570      	push	{r4, r5, r6, lr}
	if (GPIO_Pin != detect_Pin)
 8000a92:	2801      	cmp	r0, #1
 8000a94:	d117      	bne.n	8000ac6 <HAL_GPIO_EXTI_Falling_Callback+0x36>
	{
		return;
	}
	if (now_counter > 1)
 8000a96:	4c0c      	ldr	r4, [pc, #48]	@ (8000ac8 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8000a98:	6821      	ldr	r1, [r4, #0]
 8000a9a:	2901      	cmp	r1, #1
 8000a9c:	dd13      	ble.n	8000ac6 <HAL_GPIO_EXTI_Falling_Callback+0x36>
	{
		counter = now_counter;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
	rad = 360 / (counter);
 8000aa0:	3068      	adds	r0, #104	@ 0x68
		counter = now_counter;
 8000aa2:	6019      	str	r1, [r3, #0]
	rad = 360 / (counter);
 8000aa4:	30ff      	adds	r0, #255	@ 0xff
 8000aa6:	f7ff fbb5 	bl	8000214 <__divsi3>
		caculate_rad(counter);
		now_counter = 0;
 8000aaa:	2300      	movs	r3, #0
	rad = 360 / (counter);
 8000aac:	4d08      	ldr	r5, [pc, #32]	@ (8000ad0 <HAL_GPIO_EXTI_Falling_Callback+0x40>)
//		flag_1 = 0;
//		row = 0;
		for(int i = 0;i < 6;i++)
		{
			flag[i] = 0;
 8000aae:	2206      	movs	r2, #6
 8000ab0:	2100      	movs	r1, #0
	rad = 360 / (counter);
 8000ab2:	6028      	str	r0, [r5, #0]
			flag[i] = 0;
 8000ab4:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
		now_counter = 0;
 8000ab6:	6023      	str	r3, [r4, #0]
			flag[i] = 0;
 8000ab8:	f002 fa2e 	bl	8002f18 <memset>
			row[i] = 0;
 8000abc:	2218      	movs	r2, #24
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8000ac2:	f002 fa29 	bl	8002f18 <memset>
		}
	}
}
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
 8000ac8:	2000082c 	.word	0x2000082c
 8000acc:	20000830 	.word	0x20000830
 8000ad0:	20000824 	.word	0x20000824
 8000ad4:	20000818 	.word	0x20000818
 8000ad8:	20000800 	.word	0x20000800

08000adc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler>
 8000ade:	46c0      	nop			@ (mov r8, r8)

08000ae0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <HardFault_Handler>
 8000ae2:	46c0      	nop			@ (mov r8, r8)

08000ae4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae4:	4770      	bx	lr
 8000ae6:	46c0      	nop			@ (mov r8, r8)

08000ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000ae8:	4770      	bx	lr
 8000aea:	46c0      	nop			@ (mov r8, r8)

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aee:	f000 f90b 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  now_counter++;
 8000af2:	4a18      	ldr	r2, [pc, #96]	@ (8000b54 <SysTick_Handler+0x68>)
	theta = now_counter * rad;
 8000af4:	4918      	ldr	r1, [pc, #96]	@ (8000b58 <SysTick_Handler+0x6c>)
  now_counter++;
 8000af6:	6813      	ldr	r3, [r2, #0]
	theta = now_counter * rad;
 8000af8:	6809      	ldr	r1, [r1, #0]
  now_counter++;
 8000afa:	3301      	adds	r3, #1
 8000afc:	6013      	str	r3, [r2, #0]
	theta = now_counter * rad;
 8000afe:	434b      	muls	r3, r1
 
  caculate_theta();
  second ++;
  if(second == 1000)
 8000b00:	21fa      	movs	r1, #250	@ 0xfa
	theta = now_counter * rad;
 8000b02:	4a16      	ldr	r2, [pc, #88]	@ (8000b5c <SysTick_Handler+0x70>)
  if(second == 1000)
 8000b04:	0089      	lsls	r1, r1, #2
	theta = now_counter * rad;
 8000b06:	6013      	str	r3, [r2, #0]
  second ++;
 8000b08:	4a15      	ldr	r2, [pc, #84]	@ (8000b60 <SysTick_Handler+0x74>)
 8000b0a:	6813      	ldr	r3, [r2, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]
  if(second == 1000)
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d017      	beq.n	8000b44 <SysTick_Handler+0x58>
  {
	  second = 0;
	  number[5] ++;
  }
  if(number[5] == 10)
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <SysTick_Handler+0x78>)
 8000b16:	695a      	ldr	r2, [r3, #20]
  {
	  number[5] = 0;
	  number[4] ++;
 8000b18:	6919      	ldr	r1, [r3, #16]
  if(number[5] == 10)
 8000b1a:	2a0a      	cmp	r2, #10
 8000b1c:	d103      	bne.n	8000b26 <SysTick_Handler+0x3a>
	  number[5] = 0;
 8000b1e:	2200      	movs	r2, #0
	  number[4] ++;
 8000b20:	3101      	adds	r1, #1
	  number[5] = 0;
 8000b22:	615a      	str	r2, [r3, #20]
	  number[4] ++;
 8000b24:	6119      	str	r1, [r3, #16]
  }
  if(number[4] == 6)
  {
  	  number[4] = 0;
  	  number[3] ++;
 8000b26:	68da      	ldr	r2, [r3, #12]
  if(number[4] == 6)
 8000b28:	2906      	cmp	r1, #6
 8000b2a:	d103      	bne.n	8000b34 <SysTick_Handler+0x48>
  	  number[4] = 0;
 8000b2c:	2100      	movs	r1, #0
  	  number[3] ++;
 8000b2e:	3201      	adds	r2, #1
  	  number[4] = 0;
 8000b30:	6119      	str	r1, [r3, #16]
  	  number[3] ++;
 8000b32:	60da      	str	r2, [r3, #12]
  }
  if(number[3] == 10)
 8000b34:	2a0a      	cmp	r2, #10
 8000b36:	d104      	bne.n	8000b42 <SysTick_Handler+0x56>
  {
  	  number[3] = 0;
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  	  number[2] ++;
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	3201      	adds	r2, #1
 8000b40:	609a      	str	r2, [r3, #8]
//  show_num(0, 1);
//  show_num(1, 2);
//  show_num(4, 5);

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bd10      	pop	{r4, pc}
	  second = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	6013      	str	r3, [r2, #0]
	  number[5] ++;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SysTick_Handler+0x78>)
 8000b4a:	695a      	ldr	r2, [r3, #20]
 8000b4c:	3201      	adds	r2, #1
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	e7e2      	b.n	8000b18 <SysTick_Handler+0x2c>
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	2000082c 	.word	0x2000082c
 8000b58:	20000824 	.word	0x20000824
 8000b5c:	20000828 	.word	0x20000828
 8000b60:	20000820 	.word	0x20000820
 8000b64:	20000640 	.word	0x20000640

08000b68 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000b68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(detect_Pin);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 fa28 	bl	8000fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  //LED_Display_Color(color);
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000b70:	bd10      	pop	{r4, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)

08000b74 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b76:	46ce      	mov	lr, r9
 8000b78:	4647      	mov	r7, r8
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b7a:	4829      	ldr	r0, [pc, #164]	@ (8000c20 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xac>)
{
 8000b7c:	b580      	push	{r7, lr}
  HAL_TIM_IRQHandler(&htim1);
 8000b7e:	f001 fd75 	bl	800266c <HAL_TIM_IRQHandler>
  {
	  if(flag[i] == 0 && theta > 48 * i && theta <= 48 * i +45) flag[i] = 1;
	  if(flag[i] == 1 && (theta <= 48 * i || theta > 48 * i + 45))
	  {
		  flag[i] = 0;
		  LED_Display_Color(close);
 8000b82:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xb0>)
  HAL_TIM_IRQHandler(&htim1);
 8000b84:	2400      	movs	r4, #0
		  LED_Display_Color(close);
 8000b86:	4698      	mov	r8, r3
	  }
	  if(flag[i] == 1)
	  {
		if (row[i] < 10)
		{
			LED_Display_Color(digit[number[i]][row[i]]);
 8000b88:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xb4>)
 8000b8a:	4d28      	ldr	r5, [pc, #160]	@ (8000c2c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xb8>)
 8000b8c:	4699      	mov	r9, r3
 8000b8e:	4f28      	ldr	r7, [pc, #160]	@ (8000c30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xbc>)
 8000b90:	4e28      	ldr	r6, [pc, #160]	@ (8000c34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc0>)
 8000b92:	e02a      	b.n	8000bea <TIM1_BRK_UP_TRG_COM_IRQHandler+0x76>
	  if(flag[i] == 0 && theta > 48 * i && theta <= 48 * i +45) flag[i] = 1;
 8000b94:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	da1e      	bge.n	8000bda <TIM1_BRK_UP_TRG_COM_IRQHandler+0x66>
 8000b9c:	0022      	movs	r2, r4
 8000b9e:	322d      	adds	r2, #45	@ 0x2d
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	dc1a      	bgt.n	8000bda <TIM1_BRK_UP_TRG_COM_IRQHandler+0x66>
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	7029      	strb	r1, [r5, #0]
	  if(flag[i] == 1 && (theta <= 48 * i || theta > 48 * i + 45))
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	dd07      	ble.n	8000bbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x48>
		  flag[i] = 0;
 8000bac:	2300      	movs	r3, #0
		  LED_Display_Color(close);
 8000bae:	4640      	mov	r0, r8
		  flag[i] = 0;
 8000bb0:	702b      	strb	r3, [r5, #0]
		  LED_Display_Color(close);
 8000bb2:	f7ff fced 	bl	8000590 <LED_Display_Color>
	  if(flag[i] == 1)
 8000bb6:	782b      	ldrb	r3, [r5, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10e      	bne.n	8000bda <TIM1_BRK_UP_TRG_COM_IRQHandler+0x66>
		if (row[i] < 10)
 8000bbc:	6833      	ldr	r3, [r6, #0]
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	dc1f      	bgt.n	8000c02 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x8e>
			LED_Display_Color(digit[number[i]][row[i]]);
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	0090      	lsls	r0, r2, #2
 8000bc6:	1880      	adds	r0, r0, r2
 8000bc8:	0040      	lsls	r0, r0, #1
 8000bca:	18c0      	adds	r0, r0, r3
 8000bcc:	0100      	lsls	r0, r0, #4
 8000bce:	4448      	add	r0, r9
 8000bd0:	f7ff fcde 	bl	8000590 <LED_Display_Color>
			row[i]++;
 8000bd4:	6833      	ldr	r3, [r6, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	6033      	str	r3, [r6, #0]
  for (int i = 0;i < 6;i++)
 8000bda:	2390      	movs	r3, #144	@ 0x90
 8000bdc:	3430      	adds	r4, #48	@ 0x30
 8000bde:	3501      	adds	r5, #1
 8000be0:	3704      	adds	r7, #4
 8000be2:	3604      	adds	r6, #4
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	429c      	cmp	r4, r3
 8000be8:	d016      	beq.n	8000c18 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xa4>
	  if(flag[i] == 0 && theta > 48 * i && theta <= 48 * i +45) flag[i] = 1;
 8000bea:	782b      	ldrb	r3, [r5, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0d1      	beq.n	8000b94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x20>
	  if(flag[i] == 1 && (theta <= 48 * i || theta > 48 * i + 45))
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d1f2      	bne.n	8000bda <TIM1_BRK_UP_TRG_COM_IRQHandler+0x66>
	  if(flag[i] == 0 && theta > 48 * i && theta <= 48 * i +45) flag[i] = 1;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
	  if(flag[i] == 1 && (theta <= 48 * i || theta > 48 * i + 45))
 8000bf8:	42a3      	cmp	r3, r4
 8000bfa:	ddd7      	ble.n	8000bac <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
 8000bfc:	0022      	movs	r2, r4
 8000bfe:	322d      	adds	r2, #45	@ 0x2d
 8000c00:	e7d2      	b.n	8000ba8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x34>
		}
		else
		{
			LED_Display_Color(close);
 8000c02:	4640      	mov	r0, r8
 8000c04:	f7ff fcc4 	bl	8000590 <LED_Display_Color>
  for (int i = 0;i < 6;i++)
 8000c08:	2390      	movs	r3, #144	@ 0x90
 8000c0a:	3430      	adds	r4, #48	@ 0x30
 8000c0c:	3501      	adds	r5, #1
 8000c0e:	3704      	adds	r7, #4
 8000c10:	3604      	adds	r6, #4
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	429c      	cmp	r4, r3
 8000c16:	d1e8      	bne.n	8000bea <TIM1_BRK_UP_TRG_COM_IRQHandler+0x76>
		}
	  }
  }

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000c18:	bcc0      	pop	{r6, r7}
 8000c1a:	46b9      	mov	r9, r7
 8000c1c:	46b0      	mov	r8, r6
 8000c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c20:	20000724 	.word	0x20000724
 8000c24:	20000658 	.word	0x20000658
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000818 	.word	0x20000818
 8000c30:	20000640 	.word	0x20000640
 8000c34:	20000800 	.word	0x20000800
 8000c38:	20000828 	.word	0x20000828

08000c3c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	4770      	bx	lr
 8000c3e:	46c0      	nop			@ (mov r8, r8)

08000c40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c44:	f7ff fffa 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	@ (8000c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LoopForever+0xe>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	@ (8000c8c <LoopForever+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c6e:	f002 f95b 	bl	8002f28 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c72:	f7ff fd0f 	bl	8000694 <main>

08000c76 <LoopForever>:

LoopForever:
  b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   r0, =_estack
 8000c78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	20000674 	.word	0x20000674
  ldr r2, =_sidata
 8000c84:	0800303c 	.word	0x0800303c
  ldr r2, =_sbss
 8000c88:	20000674 	.word	0x20000674
  ldr r4, =_ebss
 8000c8c:	20000838 	.word	0x20000838

08000c90 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_IRQHandler>
	...

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_InitTick+0x40>)
{
 8000c98:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000c9a:	7819      	ldrb	r1, [r3, #0]
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d101      	bne.n	8000ca4 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca0:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ca4:	20fa      	movs	r0, #250	@ 0xfa
 8000ca6:	0080      	lsls	r0, r0, #2
 8000ca8:	f7ff fa2a 	bl	8000100 <__udivsi3>
 8000cac:	4d0a      	ldr	r5, [pc, #40]	@ (8000cd8 <HAL_InitTick+0x44>)
 8000cae:	0001      	movs	r1, r0
 8000cb0:	6828      	ldr	r0, [r5, #0]
 8000cb2:	f7ff fa25 	bl	8000100 <__udivsi3>
 8000cb6:	f000 f86f 	bl	8000d98 <HAL_SYSTICK_Config>
 8000cba:	2800      	cmp	r0, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	2c03      	cmp	r4, #3
 8000cc0:	d8ee      	bhi.n	8000ca0 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	f000 f830 	bl	8000d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <HAL_InitTick+0x48>)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	601c      	str	r4, [r3, #0]
  return status;
 8000cd2:	e7e6      	b.n	8000ca2 <HAL_InitTick+0xe>
 8000cd4:	2000066c 	.word	0x2000066c
 8000cd8:	20000668 	.word	0x20000668
 8000cdc:	20000670 	.word	0x20000670

08000ce0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_Init+0x24>)
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	6811      	ldr	r1, [r2, #0]
{
 8000ce8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cea:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cec:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cee:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf0:	f7ff ffd0 	bl	8000c94 <HAL_InitTick>
 8000cf4:	1e04      	subs	r4, r0, #0
 8000cf6:	d002      	beq.n	8000cfe <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000cf8:	2401      	movs	r4, #1
}
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8000cfe:	f7ff fded 	bl	80008dc <HAL_MspInit>
 8000d02:	e7fa      	b.n	8000cfa <HAL_Init+0x1a>
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4a03      	ldr	r2, [pc, #12]	@ (8000d18 <HAL_IncTick+0x10>)
 8000d0a:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <HAL_IncTick+0x14>)
 8000d0c:	6811      	ldr	r1, [r2, #0]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	185b      	adds	r3, r3, r1
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	4770      	bx	lr
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	20000834 	.word	0x20000834
 8000d1c:	2000066c 	.word	0x2000066c

08000d20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d20:	4b01      	ldr	r3, [pc, #4]	@ (8000d28 <HAL_GetTick+0x8>)
 8000d22:	6818      	ldr	r0, [r3, #0]
}
 8000d24:	4770      	bx	lr
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	20000834 	.word	0x20000834

08000d2c <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2c:	22ff      	movs	r2, #255	@ 0xff
 8000d2e:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b510      	push	{r4, lr}
 8000d32:	0014      	movs	r4, r2
 8000d34:	4003      	ands	r3, r0
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3a:	0189      	lsls	r1, r1, #6
 8000d3c:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3e:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d40:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8000d42:	2800      	cmp	r0, #0
 8000d44:	db0b      	blt.n	8000d5e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <HAL_NVIC_SetPriority+0x4c>)
 8000d48:	21c0      	movs	r1, #192	@ 0xc0
 8000d4a:	469c      	mov	ip, r3
 8000d4c:	0880      	lsrs	r0, r0, #2
 8000d4e:	0080      	lsls	r0, r0, #2
 8000d50:	4460      	add	r0, ip
 8000d52:	0089      	lsls	r1, r1, #2
 8000d54:	5843      	ldr	r3, [r0, r1]
 8000d56:	4023      	ands	r3, r4
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000d5c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5e:	230f      	movs	r3, #15
 8000d60:	4906      	ldr	r1, [pc, #24]	@ (8000d7c <HAL_NVIC_SetPriority+0x50>)
 8000d62:	4003      	ands	r3, r0
 8000d64:	468c      	mov	ip, r1
 8000d66:	3b08      	subs	r3, #8
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4463      	add	r3, ip
 8000d6e:	69d9      	ldr	r1, [r3, #28]
 8000d70:	400c      	ands	r4, r1
 8000d72:	4314      	orrs	r4, r2
 8000d74:	61dc      	str	r4, [r3, #28]
 8000d76:	e7f1      	b.n	8000d5c <HAL_NVIC_SetPriority+0x30>
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d80:	2800      	cmp	r0, #0
 8000d82:	db05      	blt.n	8000d90 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d84:	221f      	movs	r2, #31
 8000d86:	2301      	movs	r3, #1
 8000d88:	4002      	ands	r2, r0
 8000d8a:	4093      	lsls	r3, r2
 8000d8c:	4a01      	ldr	r2, [pc, #4]	@ (8000d94 <HAL_NVIC_EnableIRQ+0x14>)
 8000d8e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d90:	4770      	bx	lr
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	2280      	movs	r2, #128	@ 0x80
 8000d9a:	1e43      	subs	r3, r0, #1
 8000d9c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d20e      	bcs.n	8000dc2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da4:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	4807      	ldr	r0, [pc, #28]	@ (8000dc8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	6a03      	ldr	r3, [r0, #32]
 8000dae:	0609      	lsls	r1, r1, #24
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dba:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	3307      	adds	r3, #7
 8000dc0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e010 	.word	0xe000e010
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dce:	46de      	mov	lr, fp
 8000dd0:	4657      	mov	r7, sl
 8000dd2:	464e      	mov	r6, r9
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd8:	680c      	ldr	r4, [r1, #0]
{
 8000dda:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8000ddc:	2300      	movs	r3, #0
{
 8000dde:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d068      	beq.n	8000eb6 <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	2201      	movs	r2, #1
 8000de6:	409a      	lsls	r2, r3
 8000de8:	4694      	mov	ip, r2
 8000dea:	4022      	ands	r2, r4
 8000dec:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8000dee:	4662      	mov	r2, ip
 8000df0:	4214      	tst	r4, r2
 8000df2:	d05c      	beq.n	8000eae <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000df4:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df6:	465a      	mov	r2, fp
 8000df8:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dfa:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dfc:	6855      	ldr	r5, [r2, #4]
 8000dfe:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e00:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e02:	402a      	ands	r2, r5
 8000e04:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e06:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e08:	2e01      	cmp	r6, #1
 8000e0a:	d95b      	bls.n	8000ec4 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	2a03      	cmp	r2, #3
 8000e0e:	d000      	beq.n	8000e12 <HAL_GPIO_Init+0x46>
 8000e10:	e0ad      	b.n	8000f6e <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e12:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000e14:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e16:	9900      	ldr	r1, [sp, #0]
 8000e18:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e1a:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8000e1c:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e1e:	22c0      	movs	r2, #192	@ 0xc0
 8000e20:	0292      	lsls	r2, r2, #10
 8000e22:	4215      	tst	r5, r2
 8000e24:	d043      	beq.n	8000eae <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e26:	2703      	movs	r7, #3
 8000e28:	260f      	movs	r6, #15
 8000e2a:	495d      	ldr	r1, [pc, #372]	@ (8000fa0 <HAL_GPIO_Init+0x1d4>)
 8000e2c:	401f      	ands	r7, r3
 8000e2e:	468c      	mov	ip, r1
 8000e30:	00ff      	lsls	r7, r7, #3
 8000e32:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8000e34:	089a      	lsrs	r2, r3, #2
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4462      	add	r2, ip
 8000e3a:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e3c:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e3e:	26a0      	movs	r6, #160	@ 0xa0
 8000e40:	05f6      	lsls	r6, r6, #23
 8000e42:	42b0      	cmp	r0, r6
 8000e44:	d00e      	beq.n	8000e64 <HAL_GPIO_Init+0x98>
 8000e46:	4e57      	ldr	r6, [pc, #348]	@ (8000fa4 <HAL_GPIO_Init+0x1d8>)
 8000e48:	42b0      	cmp	r0, r6
 8000e4a:	d100      	bne.n	8000e4e <HAL_GPIO_Init+0x82>
 8000e4c:	e0a0      	b.n	8000f90 <HAL_GPIO_Init+0x1c4>
 8000e4e:	4e56      	ldr	r6, [pc, #344]	@ (8000fa8 <HAL_GPIO_Init+0x1dc>)
 8000e50:	42b0      	cmp	r0, r6
 8000e52:	d100      	bne.n	8000e56 <HAL_GPIO_Init+0x8a>
 8000e54:	e0a0      	b.n	8000f98 <HAL_GPIO_Init+0x1cc>
 8000e56:	4e55      	ldr	r6, [pc, #340]	@ (8000fac <HAL_GPIO_Init+0x1e0>)
 8000e58:	42b0      	cmp	r0, r6
 8000e5a:	d100      	bne.n	8000e5e <HAL_GPIO_Init+0x92>
 8000e5c:	e094      	b.n	8000f88 <HAL_GPIO_Init+0x1bc>
 8000e5e:	2605      	movs	r6, #5
 8000e60:	40be      	lsls	r6, r7
 8000e62:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e64:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8000e66:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8000e68:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8000e6a:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa0 <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e6c:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8000e6e:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8000e70:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e72:	4235      	tst	r5, r6
 8000e74:	d000      	beq.n	8000e78 <HAL_GPIO_Init+0xac>
 8000e76:	e077      	b.n	8000f68 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8000e78:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000e7a:	4e49      	ldr	r6, [pc, #292]	@ (8000fa0 <HAL_GPIO_Init+0x1d4>)
 8000e7c:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8000e7e:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e80:	2680      	movs	r6, #128	@ 0x80
 8000e82:	03b6      	lsls	r6, r6, #14
 8000e84:	4235      	tst	r5, r6
 8000e86:	d16c      	bne.n	8000f62 <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8000e88:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8000e8a:	4e45      	ldr	r6, [pc, #276]	@ (8000fa0 <HAL_GPIO_Init+0x1d4>)
 8000e8c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e8e:	2284      	movs	r2, #132	@ 0x84
 8000e90:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e92:	03af      	lsls	r7, r5, #14
 8000e94:	d462      	bmi.n	8000f5c <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8000e96:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8000e98:	2784      	movs	r7, #132	@ 0x84
 8000e9a:	4e41      	ldr	r6, [pc, #260]	@ (8000fa0 <HAL_GPIO_Init+0x1d4>)
 8000e9c:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 8000e9e:	2280      	movs	r2, #128	@ 0x80
 8000ea0:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea2:	03ed      	lsls	r5, r5, #15
 8000ea4:	d456      	bmi.n	8000f54 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8000ea6:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8000ea8:	2180      	movs	r1, #128	@ 0x80
 8000eaa:	4d3d      	ldr	r5, [pc, #244]	@ (8000fa0 <HAL_GPIO_Init+0x1d4>)
 8000eac:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eae:	0022      	movs	r2, r4
      }
    }

    position++;
 8000eb0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	40da      	lsrs	r2, r3
 8000eb4:	d196      	bne.n	8000de4 <HAL_GPIO_Init+0x18>
  }
}
 8000eb6:	b003      	add	sp, #12
 8000eb8:	bcf0      	pop	{r4, r5, r6, r7}
 8000eba:	46bb      	mov	fp, r7
 8000ebc:	46b2      	mov	sl, r6
 8000ebe:	46a9      	mov	r9, r5
 8000ec0:	46a0      	mov	r8, r4
 8000ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000ec4:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec6:	000e      	movs	r6, r1
 8000ec8:	9900      	ldr	r1, [sp, #0]
 8000eca:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ecc:	4659      	mov	r1, fp
 8000ece:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ed0:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed2:	000e      	movs	r6, r1
 8000ed4:	40be      	lsls	r6, r7
 8000ed6:	46b0      	mov	r8, r6
 8000ed8:	464e      	mov	r6, r9
 8000eda:	4641      	mov	r1, r8
 8000edc:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8000ede:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ee0:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee2:	000e      	movs	r6, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee8:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eea:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eec:	000e      	movs	r6, r1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	400e      	ands	r6, r1
 8000ef2:	409e      	lsls	r6, r3
 8000ef4:	46b4      	mov	ip, r6
 8000ef6:	4646      	mov	r6, r8
 8000ef8:	4661      	mov	r1, ip
 8000efa:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8000efc:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000efe:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f00:	000e      	movs	r6, r1
 8000f02:	9900      	ldr	r1, [sp, #0]
 8000f04:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f06:	4659      	mov	r1, fp
 8000f08:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f0a:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f0c:	000e      	movs	r6, r1
 8000f0e:	40be      	lsls	r6, r7
 8000f10:	46b4      	mov	ip, r6
 8000f12:	4646      	mov	r6, r8
 8000f14:	4661      	mov	r1, ip
 8000f16:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8000f18:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	2a02      	cmp	r2, #2
 8000f1c:	d000      	beq.n	8000f20 <HAL_GPIO_Init+0x154>
 8000f1e:	e778      	b.n	8000e12 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8000f20:	08d9      	lsrs	r1, r3, #3
 8000f22:	0089      	lsls	r1, r1, #2
 8000f24:	468c      	mov	ip, r1
 8000f26:	4484      	add	ip, r0
 8000f28:	4661      	mov	r1, ip
 8000f2a:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f2c:	2107      	movs	r1, #7
 8000f2e:	4019      	ands	r1, r3
 8000f30:	0089      	lsls	r1, r1, #2
 8000f32:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8000f34:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f36:	210f      	movs	r1, #15
 8000f38:	4646      	mov	r6, r8
 8000f3a:	40b1      	lsls	r1, r6
 8000f3c:	9e01      	ldr	r6, [sp, #4]
 8000f3e:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f40:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f42:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f44:	4646      	mov	r6, r8
 8000f46:	6909      	ldr	r1, [r1, #16]
 8000f48:	40b1      	lsls	r1, r6
 8000f4a:	9e01      	ldr	r6, [sp, #4]
 8000f4c:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000f4e:	4661      	mov	r1, ip
 8000f50:	620e      	str	r6, [r1, #32]
 8000f52:	e75e      	b.n	8000e12 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8000f54:	4651      	mov	r1, sl
 8000f56:	4311      	orrs	r1, r2
 8000f58:	000a      	movs	r2, r1
 8000f5a:	e7a5      	b.n	8000ea8 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8000f5c:	4656      	mov	r6, sl
 8000f5e:	4332      	orrs	r2, r6
 8000f60:	e79a      	b.n	8000e98 <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8000f62:	4656      	mov	r6, sl
 8000f64:	4332      	orrs	r2, r6
 8000f66:	e790      	b.n	8000e8a <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8000f68:	4656      	mov	r6, sl
 8000f6a:	4332      	orrs	r2, r6
 8000f6c:	e785      	b.n	8000e7a <HAL_GPIO_Init+0xae>
 8000f6e:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8000f70:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f72:	4031      	ands	r1, r6
 8000f74:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f76:	4659      	mov	r1, fp
 8000f78:	6889      	ldr	r1, [r1, #8]
 8000f7a:	40b9      	lsls	r1, r7
 8000f7c:	468c      	mov	ip, r1
 8000f7e:	4641      	mov	r1, r8
 8000f80:	4666      	mov	r6, ip
 8000f82:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8000f84:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	e744      	b.n	8000e12 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f88:	2603      	movs	r6, #3
 8000f8a:	40be      	lsls	r6, r7
 8000f8c:	4331      	orrs	r1, r6
 8000f8e:	e769      	b.n	8000e64 <HAL_GPIO_Init+0x98>
 8000f90:	2601      	movs	r6, #1
 8000f92:	40be      	lsls	r6, r7
 8000f94:	4331      	orrs	r1, r6
 8000f96:	e765      	b.n	8000e64 <HAL_GPIO_Init+0x98>
 8000f98:	2602      	movs	r6, #2
 8000f9a:	40be      	lsls	r6, r7
 8000f9c:	4331      	orrs	r1, r6
 8000f9e:	e761      	b.n	8000e64 <HAL_GPIO_Init+0x98>
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	50000400 	.word	0x50000400
 8000fa8:	50000800 	.word	0x50000800
 8000fac:	50000c00 	.word	0x50000c00

08000fb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb0:	2a00      	cmp	r2, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb8:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000fba:	e7fc      	b.n	8000fb6 <HAL_GPIO_WritePin+0x6>

08000fbc <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000fbc:	4770      	bx	lr
 8000fbe:	46c0      	nop			@ (mov r8, r8)

08000fc0 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 8000fc2:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000fc4:	68da      	ldr	r2, [r3, #12]
{
 8000fc6:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000fc8:	4210      	tst	r0, r2
 8000fca:	d104      	bne.n	8000fd6 <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	4222      	tst	r2, r4
 8000fd2:	d107      	bne.n	8000fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
}
 8000fd4:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000fd6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000fd8:	f7ff fff0 	bl	8000fbc <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000fdc:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	4222      	tst	r2, r4
 8000fe2:	d0f7      	beq.n	8000fd4 <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000fe4:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000fe6:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000fe8:	f7ff fd52 	bl	8000a90 <HAL_GPIO_EXTI_Falling_Callback>
}
 8000fec:	e7f2      	b.n	8000fd4 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	40021800 	.word	0x40021800

08000ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ff4:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ff6:	4c13      	ldr	r4, [pc, #76]	@ (8001044 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8000ff8:	4a13      	ldr	r2, [pc, #76]	@ (8001048 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8000ffa:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000ffc:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ffe:	4013      	ands	r3, r2
 8001000:	4303      	orrs	r3, r0
 8001002:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4298      	cmp	r0, r3
 800100a:	d001      	beq.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 800100c:	0028      	movs	r0, r5
 800100e:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_PWREx_ControlVoltageScaling+0x58>)
 8001012:	490f      	ldr	r1, [pc, #60]	@ (8001050 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	0058      	lsls	r0, r3, #1
 8001018:	18c0      	adds	r0, r0, r3
 800101a:	0040      	lsls	r0, r0, #1
 800101c:	f7ff f870 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001020:	2280      	movs	r2, #128	@ 0x80
 8001022:	6963      	ldr	r3, [r4, #20]
 8001024:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001026:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001028:	4213      	tst	r3, r2
 800102a:	d102      	bne.n	8001032 <HAL_PWREx_ControlVoltageScaling+0x3e>
 800102c:	e7ee      	b.n	800100c <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 800102e:	2800      	cmp	r0, #0
 8001030:	d005      	beq.n	800103e <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001032:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8001034:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001036:	4213      	tst	r3, r2
 8001038:	d1f9      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 800103a:	2500      	movs	r5, #0
 800103c:	e7e6      	b.n	800100c <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 800103e:	2503      	movs	r5, #3
 8001040:	e7e4      	b.n	800100c <HAL_PWREx_ControlVoltageScaling+0x18>
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	40007000 	.word	0x40007000
 8001048:	fffff9ff 	.word	0xfffff9ff
 800104c:	20000668 	.word	0x20000668
 8001050:	000f4240 	.word	0x000f4240

08001054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	46ce      	mov	lr, r9
 8001058:	4647      	mov	r7, r8
 800105a:	b580      	push	{r7, lr}
 800105c:	0004      	movs	r4, r0
 800105e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001060:	2800      	cmp	r0, #0
 8001062:	d027      	beq.n	80010b4 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001064:	6803      	ldr	r3, [r0, #0]
 8001066:	07da      	lsls	r2, r3, #31
 8001068:	d511      	bpl.n	800108e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800106a:	2238      	movs	r2, #56	@ 0x38
 800106c:	49c0      	ldr	r1, [pc, #768]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 800106e:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001070:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001072:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001074:	2a10      	cmp	r2, #16
 8001076:	d100      	bne.n	800107a <HAL_RCC_OscConfig+0x26>
 8001078:	e0cc      	b.n	8001214 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800107a:	2a08      	cmp	r2, #8
 800107c:	d000      	beq.n	8001080 <HAL_RCC_OscConfig+0x2c>
 800107e:	e0cd      	b.n	800121c <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	4abb      	ldr	r2, [pc, #748]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	0392      	lsls	r2, r2, #14
 8001086:	d502      	bpl.n	800108e <HAL_RCC_OscConfig+0x3a>
 8001088:	6862      	ldr	r2, [r4, #4]
 800108a:	2a00      	cmp	r2, #0
 800108c:	d012      	beq.n	80010b4 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108e:	079a      	lsls	r2, r3, #30
 8001090:	d532      	bpl.n	80010f8 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001092:	2338      	movs	r3, #56	@ 0x38
 8001094:	4ab6      	ldr	r2, [pc, #728]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 8001096:	6891      	ldr	r1, [r2, #8]
 8001098:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800109a:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800109c:	2b10      	cmp	r3, #16
 800109e:	d100      	bne.n	80010a2 <HAL_RCC_OscConfig+0x4e>
 80010a0:	e10b      	b.n	80012ba <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d000      	beq.n	80010a8 <HAL_RCC_OscConfig+0x54>
 80010a6:	e10d      	b.n	80012c4 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010a8:	6813      	ldr	r3, [r2, #0]
 80010aa:	055b      	lsls	r3, r3, #21
 80010ac:	d508      	bpl.n	80010c0 <HAL_RCC_OscConfig+0x6c>
 80010ae:	68e3      	ldr	r3, [r4, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 80010b4:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 80010b6:	b003      	add	sp, #12
 80010b8:	bcc0      	pop	{r6, r7}
 80010ba:	46b9      	mov	r9, r7
 80010bc:	46b0      	mov	r8, r6
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c0:	6851      	ldr	r1, [r2, #4]
 80010c2:	6963      	ldr	r3, [r4, #20]
 80010c4:	48ab      	ldr	r0, [pc, #684]	@ (8001374 <HAL_RCC_OscConfig+0x320>)
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	4001      	ands	r1, r0
 80010ca:	430b      	orrs	r3, r1
 80010cc:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010ce:	4aa8      	ldr	r2, [pc, #672]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 80010d0:	49a9      	ldr	r1, [pc, #676]	@ (8001378 <HAL_RCC_OscConfig+0x324>)
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	400b      	ands	r3, r1
 80010d6:	6921      	ldr	r1, [r4, #16]
 80010d8:	430b      	orrs	r3, r1
 80010da:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	4aa7      	ldr	r2, [pc, #668]	@ (800137c <HAL_RCC_OscConfig+0x328>)
 80010e0:	049b      	lsls	r3, r3, #18
 80010e2:	0f5b      	lsrs	r3, r3, #29
 80010e4:	40da      	lsrs	r2, r3
 80010e6:	49a6      	ldr	r1, [pc, #664]	@ (8001380 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010ea:	4ba6      	ldr	r3, [pc, #664]	@ (8001384 <HAL_RCC_OscConfig+0x330>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	f7ff fdd1 	bl	8000c94 <HAL_InitTick>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d1de      	bne.n	80010b4 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	071a      	lsls	r2, r3, #28
 80010fa:	d46d      	bmi.n	80011d8 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fc:	075b      	lsls	r3, r3, #29
 80010fe:	d545      	bpl.n	800118c <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001100:	2338      	movs	r3, #56	@ 0x38
 8001102:	4a9b      	ldr	r2, [pc, #620]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 8001104:	6891      	ldr	r1, [r2, #8]
 8001106:	400b      	ands	r3, r1
 8001108:	2b20      	cmp	r3, #32
 800110a:	d100      	bne.n	800110e <HAL_RCC_OscConfig+0xba>
 800110c:	e0cc      	b.n	80012a8 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800110e:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001110:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001112:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001114:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001116:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001118:	4219      	tst	r1, r3
 800111a:	d108      	bne.n	800112e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800111e:	4319      	orrs	r1, r3
 8001120:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001122:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001124:	4013      	ands	r3, r2
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800112a:	2301      	movs	r3, #1
 800112c:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800112e:	2780      	movs	r7, #128	@ 0x80
 8001130:	4e95      	ldr	r6, [pc, #596]	@ (8001388 <HAL_RCC_OscConfig+0x334>)
 8001132:	007f      	lsls	r7, r7, #1
 8001134:	6833      	ldr	r3, [r6, #0]
 8001136:	423b      	tst	r3, r7
 8001138:	d100      	bne.n	800113c <HAL_RCC_OscConfig+0xe8>
 800113a:	e0ff      	b.n	800133c <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113c:	68a3      	ldr	r3, [r4, #8]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d100      	bne.n	8001144 <HAL_RCC_OscConfig+0xf0>
 8001142:	e0e5      	b.n	8001310 <HAL_RCC_OscConfig+0x2bc>
 8001144:	2b05      	cmp	r3, #5
 8001146:	d100      	bne.n	800114a <HAL_RCC_OscConfig+0xf6>
 8001148:	e1c8      	b.n	80014dc <HAL_RCC_OscConfig+0x488>
 800114a:	2101      	movs	r1, #1
 800114c:	4e88      	ldr	r6, [pc, #544]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 800114e:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8001150:	438a      	bics	r2, r1
 8001152:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8001154:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8001156:	3103      	adds	r1, #3
 8001158:	438a      	bics	r2, r1
 800115a:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800115c:	2b00      	cmp	r3, #0
 800115e:	d000      	beq.n	8001162 <HAL_RCC_OscConfig+0x10e>
 8001160:	e0da      	b.n	8001318 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8001162:	f7ff fddd 	bl	8000d20 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001166:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8001168:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800116a:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116c:	4d87      	ldr	r5, [pc, #540]	@ (800138c <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800116e:	e005      	b.n	800117c <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001170:	f7ff fdd6 	bl	8000d20 <HAL_GetTick>
 8001174:	1bc0      	subs	r0, r0, r7
 8001176:	42a8      	cmp	r0, r5
 8001178:	d900      	bls.n	800117c <HAL_RCC_OscConfig+0x128>
 800117a:	e0ee      	b.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800117c:	4642      	mov	r2, r8
 800117e:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8001180:	421a      	tst	r2, r3
 8001182:	d1f5      	bne.n	8001170 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8001184:	464b      	mov	r3, r9
 8001186:	2b01      	cmp	r3, #1
 8001188:	d100      	bne.n	800118c <HAL_RCC_OscConfig+0x138>
 800118a:	e163      	b.n	8001454 <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800118c:	69e3      	ldr	r3, [r4, #28]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d020      	beq.n	80011d4 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001192:	2238      	movs	r2, #56	@ 0x38
 8001194:	4d76      	ldr	r5, [pc, #472]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 8001196:	68a9      	ldr	r1, [r5, #8]
 8001198:	400a      	ands	r2, r1
 800119a:	2a10      	cmp	r2, #16
 800119c:	d100      	bne.n	80011a0 <HAL_RCC_OscConfig+0x14c>
 800119e:	e11d      	b.n	80013dc <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d100      	bne.n	80011a6 <HAL_RCC_OscConfig+0x152>
 80011a4:	e15c      	b.n	8001460 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 80011a6:	682b      	ldr	r3, [r5, #0]
 80011a8:	4a79      	ldr	r2, [pc, #484]	@ (8001390 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011aa:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80011ac:	4013      	ands	r3, r2
 80011ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011b0:	f7ff fdb6 	bl	8000d20 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011b4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80011b6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011b8:	e005      	b.n	80011c6 <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ba:	f7ff fdb1 	bl	8000d20 <HAL_GetTick>
 80011be:	1b00      	subs	r0, r0, r4
 80011c0:	2802      	cmp	r0, #2
 80011c2:	d900      	bls.n	80011c6 <HAL_RCC_OscConfig+0x172>
 80011c4:	e0c9      	b.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c6:	682b      	ldr	r3, [r5, #0]
 80011c8:	4233      	tst	r3, r6
 80011ca:	d1f6      	bne.n	80011ba <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80011cc:	68eb      	ldr	r3, [r5, #12]
 80011ce:	4a71      	ldr	r2, [pc, #452]	@ (8001394 <HAL_RCC_OscConfig+0x340>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 80011d4:	2000      	movs	r0, #0
 80011d6:	e76e      	b.n	80010b6 <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011d8:	2238      	movs	r2, #56	@ 0x38
 80011da:	4d65      	ldr	r5, [pc, #404]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 80011dc:	68a9      	ldr	r1, [r5, #8]
 80011de:	400a      	ands	r2, r1
 80011e0:	2a18      	cmp	r2, #24
 80011e2:	d043      	beq.n	800126c <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e4:	69a3      	ldr	r3, [r4, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <HAL_RCC_OscConfig+0x198>
 80011ea:	e0b8      	b.n	800135e <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 80011ec:	2201      	movs	r2, #1
 80011ee:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f0:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80011f2:	4313      	orrs	r3, r2
 80011f4:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80011f6:	f7ff fd93 	bl	8000d20 <HAL_GetTick>
 80011fa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011fc:	e005      	b.n	800120a <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff fd8f 	bl	8000d20 <HAL_GetTick>
 8001202:	1b80      	subs	r0, r0, r6
 8001204:	2802      	cmp	r0, #2
 8001206:	d900      	bls.n	800120a <HAL_RCC_OscConfig+0x1b6>
 8001208:	e0a7      	b.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800120a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800120c:	421f      	tst	r7, r3
 800120e:	d0f6      	beq.n	80011fe <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	e773      	b.n	80010fc <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001214:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001216:	0789      	lsls	r1, r1, #30
 8001218:	d100      	bne.n	800121c <HAL_RCC_OscConfig+0x1c8>
 800121a:	e731      	b.n	8001080 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121c:	2280      	movs	r2, #128	@ 0x80
 800121e:	6863      	ldr	r3, [r4, #4]
 8001220:	0252      	lsls	r2, r2, #9
 8001222:	4293      	cmp	r3, r2
 8001224:	d02b      	beq.n	800127e <HAL_RCC_OscConfig+0x22a>
 8001226:	21a0      	movs	r1, #160	@ 0xa0
 8001228:	02c9      	lsls	r1, r1, #11
 800122a:	428b      	cmp	r3, r1
 800122c:	d100      	bne.n	8001230 <HAL_RCC_OscConfig+0x1dc>
 800122e:	e0fc      	b.n	800142a <HAL_RCC_OscConfig+0x3d6>
 8001230:	4d4f      	ldr	r5, [pc, #316]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 8001232:	4959      	ldr	r1, [pc, #356]	@ (8001398 <HAL_RCC_OscConfig+0x344>)
 8001234:	682a      	ldr	r2, [r5, #0]
 8001236:	400a      	ands	r2, r1
 8001238:	602a      	str	r2, [r5, #0]
 800123a:	682a      	ldr	r2, [r5, #0]
 800123c:	4957      	ldr	r1, [pc, #348]	@ (800139c <HAL_RCC_OscConfig+0x348>)
 800123e:	400a      	ands	r2, r1
 8001240:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001242:	2b00      	cmp	r3, #0
 8001244:	d11f      	bne.n	8001286 <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8001246:	f7ff fd6b 	bl	8000d20 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124a:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 800124c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124e:	02bf      	lsls	r7, r7, #10
 8001250:	e004      	b.n	800125c <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001252:	f7ff fd65 	bl	8000d20 <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	2864      	cmp	r0, #100	@ 0x64
 800125a:	d87e      	bhi.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	423b      	tst	r3, r7
 8001260:	d1f7      	bne.n	8001252 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	079a      	lsls	r2, r3, #30
 8001266:	d400      	bmi.n	800126a <HAL_RCC_OscConfig+0x216>
 8001268:	e746      	b.n	80010f8 <HAL_RCC_OscConfig+0xa4>
 800126a:	e712      	b.n	8001092 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800126c:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 800126e:	0792      	lsls	r2, r2, #30
 8001270:	d400      	bmi.n	8001274 <HAL_RCC_OscConfig+0x220>
 8001272:	e743      	b.n	80010fc <HAL_RCC_OscConfig+0xa8>
 8001274:	69a2      	ldr	r2, [r4, #24]
 8001276:	2a00      	cmp	r2, #0
 8001278:	d000      	beq.n	800127c <HAL_RCC_OscConfig+0x228>
 800127a:	e73f      	b.n	80010fc <HAL_RCC_OscConfig+0xa8>
 800127c:	e71a      	b.n	80010b4 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127e:	4a3c      	ldr	r2, [pc, #240]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 8001280:	6811      	ldr	r1, [r2, #0]
 8001282:	430b      	orrs	r3, r1
 8001284:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001286:	f7ff fd4b 	bl	8000d20 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 800128c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128e:	4f38      	ldr	r7, [pc, #224]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 8001290:	02b6      	lsls	r6, r6, #10
 8001292:	e004      	b.n	800129e <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fd44 	bl	8000d20 <HAL_GetTick>
 8001298:	1b40      	subs	r0, r0, r5
 800129a:	2864      	cmp	r0, #100	@ 0x64
 800129c:	d85d      	bhi.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	4233      	tst	r3, r6
 80012a2:	d0f7      	beq.n	8001294 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	e7dd      	b.n	8001264 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80012a8:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80012aa:	079b      	lsls	r3, r3, #30
 80012ac:	d400      	bmi.n	80012b0 <HAL_RCC_OscConfig+0x25c>
 80012ae:	e76d      	b.n	800118c <HAL_RCC_OscConfig+0x138>
 80012b0:	68a3      	ldr	r3, [r4, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d000      	beq.n	80012b8 <HAL_RCC_OscConfig+0x264>
 80012b6:	e769      	b.n	800118c <HAL_RCC_OscConfig+0x138>
 80012b8:	e6fc      	b.n	80010b4 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ba:	3b0d      	subs	r3, #13
 80012bc:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d100      	bne.n	80012c4 <HAL_RCC_OscConfig+0x270>
 80012c2:	e0bc      	b.n	800143e <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c4:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012c6:	4d2a      	ldr	r5, [pc, #168]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d073      	beq.n	80013b4 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001378 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d0:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012d2:	4013      	ands	r3, r2
 80012d4:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d6:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012d8:	4313      	orrs	r3, r2
 80012da:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	682a      	ldr	r2, [r5, #0]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4313      	orrs	r3, r2
 80012e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012e6:	f7ff fd1b 	bl	8000d20 <HAL_GetTick>
 80012ea:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ec:	e004      	b.n	80012f8 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fd17 	bl	8000d20 <HAL_GetTick>
 80012f2:	1b80      	subs	r0, r0, r6
 80012f4:	2802      	cmp	r0, #2
 80012f6:	d830      	bhi.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	423b      	tst	r3, r7
 80012fc:	d0f7      	beq.n	80012ee <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	686a      	ldr	r2, [r5, #4]
 8001300:	6963      	ldr	r3, [r4, #20]
 8001302:	491c      	ldr	r1, [pc, #112]	@ (8001374 <HAL_RCC_OscConfig+0x320>)
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	400a      	ands	r2, r1
 8001308:	4313      	orrs	r3, r2
 800130a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	e6f3      	b.n	80010f8 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	4917      	ldr	r1, [pc, #92]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
 8001312:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8001314:	4313      	orrs	r3, r2
 8001316:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8001318:	f7ff fd02 	bl	8000d20 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 800131e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001320:	4698      	mov	r8, r3
 8001322:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	4d19      	ldr	r5, [pc, #100]	@ (800138c <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001326:	e004      	b.n	8001332 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f7ff fcfa 	bl	8000d20 <HAL_GetTick>
 800132c:	1b80      	subs	r0, r0, r6
 800132e:	42a8      	cmp	r0, r5
 8001330:	d813      	bhi.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001332:	4643      	mov	r3, r8
 8001334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001336:	421f      	tst	r7, r3
 8001338:	d0f6      	beq.n	8001328 <HAL_RCC_OscConfig+0x2d4>
 800133a:	e723      	b.n	8001184 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800133c:	6833      	ldr	r3, [r6, #0]
 800133e:	433b      	orrs	r3, r7
 8001340:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001342:	f7ff fced 	bl	8000d20 <HAL_GetTick>
 8001346:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001348:	6833      	ldr	r3, [r6, #0]
 800134a:	423b      	tst	r3, r7
 800134c:	d000      	beq.n	8001350 <HAL_RCC_OscConfig+0x2fc>
 800134e:	e6f5      	b.n	800113c <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001350:	f7ff fce6 	bl	8000d20 <HAL_GetTick>
 8001354:	1b40      	subs	r0, r0, r5
 8001356:	2802      	cmp	r0, #2
 8001358:	d9f6      	bls.n	8001348 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 800135a:	2003      	movs	r0, #3
 800135c:	e6ab      	b.n	80010b6 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 800135e:	2201      	movs	r2, #1
 8001360:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001362:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001364:	4393      	bics	r3, r2
 8001366:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001368:	f7ff fcda 	bl	8000d20 <HAL_GetTick>
 800136c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800136e:	e01c      	b.n	80013aa <HAL_RCC_OscConfig+0x356>
 8001370:	40021000 	.word	0x40021000
 8001374:	ffff80ff 	.word	0xffff80ff
 8001378:	ffffc7ff 	.word	0xffffc7ff
 800137c:	00f42400 	.word	0x00f42400
 8001380:	20000668 	.word	0x20000668
 8001384:	20000670 	.word	0x20000670
 8001388:	40007000 	.word	0x40007000
 800138c:	00001388 	.word	0x00001388
 8001390:	feffffff 	.word	0xfeffffff
 8001394:	effefffc 	.word	0xeffefffc
 8001398:	fffeffff 	.word	0xfffeffff
 800139c:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fcbe 	bl	8000d20 <HAL_GetTick>
 80013a4:	1b80      	subs	r0, r0, r6
 80013a6:	2802      	cmp	r0, #2
 80013a8:	d8d7      	bhi.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013aa:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80013ac:	421f      	tst	r7, r3
 80013ae:	d1f7      	bne.n	80013a0 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	e6a3      	b.n	80010fc <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 80013b4:	682b      	ldr	r3, [r5, #0]
 80013b6:	4a50      	ldr	r2, [pc, #320]	@ (80014f8 <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4013      	ands	r3, r2
 80013bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013be:	f7ff fcaf 	bl	8000d20 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c2:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80013c4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c6:	e004      	b.n	80013d2 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fcaa 	bl	8000d20 <HAL_GetTick>
 80013cc:	1b80      	subs	r0, r0, r6
 80013ce:	2802      	cmp	r0, #2
 80013d0:	d8c3      	bhi.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	423b      	tst	r3, r7
 80013d6:	d1f7      	bne.n	80013c8 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	e68d      	b.n	80010f8 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d100      	bne.n	80013e2 <HAL_RCC_OscConfig+0x38e>
 80013e0:	e668      	b.n	80010b4 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80013e4:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	6a21      	ldr	r1, [r4, #32]
 80013e8:	4002      	ands	r2, r0
 80013ea:	428a      	cmp	r2, r1
 80013ec:	d000      	beq.n	80013f0 <HAL_RCC_OscConfig+0x39c>
 80013ee:	e661      	b.n	80010b4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013f0:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013f4:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	428a      	cmp	r2, r1
 80013f8:	d000      	beq.n	80013fc <HAL_RCC_OscConfig+0x3a8>
 80013fa:	e65b      	b.n	80010b4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013fc:	21fe      	movs	r1, #254	@ 0xfe
 80013fe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001400:	01c9      	lsls	r1, r1, #7
 8001402:	4001      	ands	r1, r0
 8001404:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001406:	4291      	cmp	r1, r2
 8001408:	d000      	beq.n	800140c <HAL_RCC_OscConfig+0x3b8>
 800140a:	e653      	b.n	80010b4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800140c:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800140e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001410:	0392      	lsls	r2, r2, #14
 8001412:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001414:	428a      	cmp	r2, r1
 8001416:	d000      	beq.n	800141a <HAL_RCC_OscConfig+0x3c6>
 8001418:	e64c      	b.n	80010b4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800141a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800141c:	0f40      	lsrs	r0, r0, #29
 800141e:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001420:	1ac0      	subs	r0, r0, r3
 8001422:	1e43      	subs	r3, r0, #1
 8001424:	4198      	sbcs	r0, r3
 8001426:	b2c0      	uxtb	r0, r0
 8001428:	e645      	b.n	80010b6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142a:	2180      	movs	r1, #128	@ 0x80
 800142c:	4b33      	ldr	r3, [pc, #204]	@ (80014fc <HAL_RCC_OscConfig+0x4a8>)
 800142e:	02c9      	lsls	r1, r1, #11
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	4301      	orrs	r1, r0
 8001434:	6019      	str	r1, [r3, #0]
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	e723      	b.n	8001286 <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800143e:	6813      	ldr	r3, [r2, #0]
 8001440:	055b      	lsls	r3, r3, #21
 8001442:	d455      	bmi.n	80014f0 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	6851      	ldr	r1, [r2, #4]
 8001446:	6963      	ldr	r3, [r4, #20]
 8001448:	482d      	ldr	r0, [pc, #180]	@ (8001500 <HAL_RCC_OscConfig+0x4ac>)
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4001      	ands	r1, r0
 800144e:	430b      	orrs	r3, r1
 8001450:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001452:	e64a      	b.n	80010ea <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001454:	4a29      	ldr	r2, [pc, #164]	@ (80014fc <HAL_RCC_OscConfig+0x4a8>)
 8001456:	492b      	ldr	r1, [pc, #172]	@ (8001504 <HAL_RCC_OscConfig+0x4b0>)
 8001458:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800145a:	400b      	ands	r3, r1
 800145c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800145e:	e695      	b.n	800118c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	4a29      	ldr	r2, [pc, #164]	@ (8001508 <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001464:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001466:	4013      	ands	r3, r2
 8001468:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800146a:	f7ff fc59 	bl	8000d20 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146e:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001470:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001472:	e005      	b.n	8001480 <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff fc54 	bl	8000d20 <HAL_GetTick>
 8001478:	1b80      	subs	r0, r0, r6
 800147a:	2802      	cmp	r0, #2
 800147c:	d900      	bls.n	8001480 <HAL_RCC_OscConfig+0x42c>
 800147e:	e76c      	b.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001480:	682b      	ldr	r3, [r5, #0]
 8001482:	423b      	tst	r3, r7
 8001484:	d1f6      	bne.n	8001474 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001486:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001488:	6a23      	ldr	r3, [r4, #32]
 800148a:	68ea      	ldr	r2, [r5, #12]
 800148c:	430b      	orrs	r3, r1
 800148e:	491f      	ldr	r1, [pc, #124]	@ (800150c <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001490:	4e1a      	ldr	r6, [pc, #104]	@ (80014fc <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001492:	400a      	ands	r2, r1
 8001494:	4313      	orrs	r3, r2
 8001496:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001498:	4313      	orrs	r3, r2
 800149a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800149c:	4313      	orrs	r3, r2
 800149e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80014a0:	0212      	lsls	r2, r2, #8
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	682a      	ldr	r2, [r5, #0]
 80014aa:	045b      	lsls	r3, r3, #17
 80014ac:	4313      	orrs	r3, r2
 80014ae:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80014b0:	2380      	movs	r3, #128	@ 0x80
 80014b2:	68ea      	ldr	r2, [r5, #12]
 80014b4:	055b      	lsls	r3, r3, #21
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80014ba:	f7ff fc31 	bl	8000d20 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014be:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 80014c0:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c2:	04ad      	lsls	r5, r5, #18
 80014c4:	e005      	b.n	80014d2 <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff fc2b 	bl	8000d20 <HAL_GetTick>
 80014ca:	1b00      	subs	r0, r0, r4
 80014cc:	2802      	cmp	r0, #2
 80014ce:	d900      	bls.n	80014d2 <HAL_RCC_OscConfig+0x47e>
 80014d0:	e743      	b.n	800135a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d2:	6833      	ldr	r3, [r6, #0]
 80014d4:	422b      	tst	r3, r5
 80014d6:	d0f6      	beq.n	80014c6 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 80014d8:	2000      	movs	r0, #0
 80014da:	e5ec      	b.n	80010b6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014dc:	2104      	movs	r1, #4
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_RCC_OscConfig+0x4a8>)
 80014e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e2:	430a      	orrs	r2, r1
 80014e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e8:	3903      	subs	r1, #3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ee:	e713      	b.n	8001318 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f0:	68e3      	ldr	r3, [r4, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1a6      	bne.n	8001444 <HAL_RCC_OscConfig+0x3f0>
 80014f6:	e5dd      	b.n	80010b4 <HAL_RCC_OscConfig+0x60>
 80014f8:	fffffeff 	.word	0xfffffeff
 80014fc:	40021000 	.word	0x40021000
 8001500:	ffff80ff 	.word	0xffff80ff
 8001504:	efffffff 	.word	0xefffffff
 8001508:	feffffff 	.word	0xfeffffff
 800150c:	1fc1808c 	.word	0x1fc1808c

08001510 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001510:	2338      	movs	r3, #56	@ 0x38
 8001512:	4a22      	ldr	r2, [pc, #136]	@ (800159c <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8001514:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001516:	6891      	ldr	r1, [r2, #8]
 8001518:	420b      	tst	r3, r1
 800151a:	d105      	bne.n	8001528 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800151c:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800151e:	4820      	ldr	r0, [pc, #128]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001520:	049b      	lsls	r3, r3, #18
 8001522:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001524:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001526:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001528:	6891      	ldr	r1, [r2, #8]
 800152a:	4019      	ands	r1, r3
 800152c:	2908      	cmp	r1, #8
 800152e:	d014      	beq.n	800155a <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001530:	6891      	ldr	r1, [r2, #8]
 8001532:	4019      	ands	r1, r3
 8001534:	2910      	cmp	r1, #16
 8001536:	d012      	beq.n	800155e <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001538:	6891      	ldr	r1, [r2, #8]
 800153a:	4019      	ands	r1, r3
 800153c:	2920      	cmp	r1, #32
 800153e:	d024      	beq.n	800158a <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001540:	6890      	ldr	r0, [r2, #8]
 8001542:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8001544:	3818      	subs	r0, #24
 8001546:	1e43      	subs	r3, r0, #1
 8001548:	4198      	sbcs	r0, r3
 800154a:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800154c:	4240      	negs	r0, r0
 800154e:	4018      	ands	r0, r3
 8001550:	23fa      	movs	r3, #250	@ 0xfa
 8001552:	01db      	lsls	r3, r3, #7
 8001554:	469c      	mov	ip, r3
 8001556:	4460      	add	r0, ip
 8001558:	e7e5      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800155a:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x98>)
 800155c:	e7e3      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800155e:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001560:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001562:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001564:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001566:	0649      	lsls	r1, r1, #25
 8001568:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800156a:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800156c:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800156e:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8001570:	079b      	lsls	r3, r3, #30
 8001572:	d00d      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001574:	480a      	ldr	r0, [pc, #40]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x90>)
 8001576:	f7fe fdc3 	bl	8000100 <__udivsi3>
 800157a:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800157c:	4b07      	ldr	r3, [pc, #28]	@ (800159c <HAL_RCC_GetSysClockFreq+0x8c>)
 800157e:	68d9      	ldr	r1, [r3, #12]
 8001580:	0f49      	lsrs	r1, r1, #29
 8001582:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001584:	f7fe fdbc 	bl	8000100 <__udivsi3>
  return sysclockfreq;
 8001588:	e7cd      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800158a:	2080      	movs	r0, #128	@ 0x80
 800158c:	0200      	lsls	r0, r0, #8
 800158e:	e7ca      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001590:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001592:	f7fe fdb5 	bl	8000100 <__udivsi3>
 8001596:	4360      	muls	r0, r4
        break;
 8001598:	e7f0      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x6c>
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	40021000 	.word	0x40021000
 80015a0:	00f42400 	.word	0x00f42400
 80015a4:	ffff8300 	.word	0xffff8300
 80015a8:	007a1200 	.word	0x007a1200

080015ac <HAL_RCC_ClockConfig>:
{
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ae:	46ce      	mov	lr, r9
 80015b0:	4647      	mov	r7, r8
 80015b2:	0005      	movs	r5, r0
 80015b4:	000c      	movs	r4, r1
 80015b6:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d026      	beq.n	800160a <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	2207      	movs	r2, #7
 80015be:	4e57      	ldr	r6, [pc, #348]	@ (800171c <HAL_RCC_ClockConfig+0x170>)
 80015c0:	6833      	ldr	r3, [r6, #0]
 80015c2:	4013      	ands	r3, r2
 80015c4:	428b      	cmp	r3, r1
 80015c6:	d35e      	bcc.n	8001686 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	682b      	ldr	r3, [r5, #0]
 80015ca:	079a      	lsls	r2, r3, #30
 80015cc:	d50e      	bpl.n	80015ec <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ce:	075a      	lsls	r2, r3, #29
 80015d0:	d505      	bpl.n	80015de <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015d2:	22e0      	movs	r2, #224	@ 0xe0
 80015d4:	4952      	ldr	r1, [pc, #328]	@ (8001720 <HAL_RCC_ClockConfig+0x174>)
 80015d6:	01d2      	lsls	r2, r2, #7
 80015d8:	6888      	ldr	r0, [r1, #8]
 80015da:	4302      	orrs	r2, r0
 80015dc:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015de:	4950      	ldr	r1, [pc, #320]	@ (8001720 <HAL_RCC_ClockConfig+0x174>)
 80015e0:	4850      	ldr	r0, [pc, #320]	@ (8001724 <HAL_RCC_ClockConfig+0x178>)
 80015e2:	688a      	ldr	r2, [r1, #8]
 80015e4:	4002      	ands	r2, r0
 80015e6:	68a8      	ldr	r0, [r5, #8]
 80015e8:	4302      	orrs	r2, r0
 80015ea:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ec:	07db      	lsls	r3, r3, #31
 80015ee:	d52b      	bpl.n	8001648 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f0:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001720 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d100      	bne.n	80015fa <HAL_RCC_ClockConfig+0x4e>
 80015f8:	e07c      	b.n	80016f4 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d007      	beq.n	800160e <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d000      	beq.n	8001604 <HAL_RCC_ClockConfig+0x58>
 8001602:	e07d      	b.n	8001700 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	0552      	lsls	r2, r2, #21
 8001608:	d404      	bmi.n	8001614 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800160a:	2001      	movs	r0, #1
 800160c:	e037      	b.n	800167e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	0192      	lsls	r2, r2, #6
 8001612:	d5fa      	bpl.n	800160a <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001614:	2107      	movs	r1, #7
 8001616:	4e42      	ldr	r6, [pc, #264]	@ (8001720 <HAL_RCC_ClockConfig+0x174>)
 8001618:	68b2      	ldr	r2, [r6, #8]
 800161a:	438a      	bics	r2, r1
 800161c:	4313      	orrs	r3, r2
 800161e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001620:	f7ff fb7e 	bl	8000d20 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001624:	2338      	movs	r3, #56	@ 0x38
 8001626:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	4b3f      	ldr	r3, [pc, #252]	@ (8001728 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800162a:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	e004      	b.n	800163a <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001630:	f7ff fb76 	bl	8000d20 <HAL_GetTick>
 8001634:	1bc0      	subs	r0, r0, r7
 8001636:	4548      	cmp	r0, r9
 8001638:	d83b      	bhi.n	80016b2 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	4643      	mov	r3, r8
 800163c:	68b2      	ldr	r2, [r6, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	686b      	ldr	r3, [r5, #4]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	429a      	cmp	r2, r3
 8001646:	d1f3      	bne.n	8001630 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	2207      	movs	r2, #7
 800164a:	4e34      	ldr	r6, [pc, #208]	@ (800171c <HAL_RCC_ClockConfig+0x170>)
 800164c:	6833      	ldr	r3, [r6, #0]
 800164e:	4013      	ands	r3, r2
 8001650:	42a3      	cmp	r3, r4
 8001652:	d838      	bhi.n	80016c6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	075b      	lsls	r3, r3, #29
 8001658:	d42d      	bmi.n	80016b6 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800165a:	f7ff ff59 	bl	8001510 <HAL_RCC_GetSysClockFreq>
 800165e:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <HAL_RCC_ClockConfig+0x174>)
 8001660:	4a32      	ldr	r2, [pc, #200]	@ (800172c <HAL_RCC_ClockConfig+0x180>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4932      	ldr	r1, [pc, #200]	@ (8001730 <HAL_RCC_ClockConfig+0x184>)
 8001666:	051b      	lsls	r3, r3, #20
 8001668:	0f1b      	lsrs	r3, r3, #28
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	589b      	ldr	r3, [r3, r2]
 800166e:	221f      	movs	r2, #31
 8001670:	4013      	ands	r3, r2
 8001672:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8001674:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001676:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f7ff fb0b 	bl	8000c94 <HAL_InitTick>
}
 800167e:	bcc0      	pop	{r6, r7}
 8001680:	46b9      	mov	r9, r7
 8001682:	46b0      	mov	r8, r6
 8001684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	6833      	ldr	r3, [r6, #0]
 8001688:	4393      	bics	r3, r2
 800168a:	430b      	orrs	r3, r1
 800168c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800168e:	f7ff fb47 	bl	8000d20 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001692:	2307      	movs	r3, #7
 8001694:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001698:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800169c:	4642      	mov	r2, r8
 800169e:	6833      	ldr	r3, [r6, #0]
 80016a0:	4013      	ands	r3, r2
 80016a2:	42a3      	cmp	r3, r4
 80016a4:	d100      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xfc>
 80016a6:	e78f      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fb3a 	bl	8000d20 <HAL_GetTick>
 80016ac:	1bc0      	subs	r0, r0, r7
 80016ae:	4548      	cmp	r0, r9
 80016b0:	d9f4      	bls.n	800169c <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 80016b2:	2003      	movs	r0, #3
 80016b4:	e7e3      	b.n	800167e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001720 <HAL_RCC_ClockConfig+0x174>)
 80016b8:	491f      	ldr	r1, [pc, #124]	@ (8001738 <HAL_RCC_ClockConfig+0x18c>)
 80016ba:	6893      	ldr	r3, [r2, #8]
 80016bc:	400b      	ands	r3, r1
 80016be:	68e9      	ldr	r1, [r5, #12]
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6093      	str	r3, [r2, #8]
 80016c4:	e7c9      	b.n	800165a <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	6833      	ldr	r3, [r6, #0]
 80016c8:	4393      	bics	r3, r2
 80016ca:	4323      	orrs	r3, r4
 80016cc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80016ce:	f7ff fb27 	bl	8000d20 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016d2:	2307      	movs	r3, #7
 80016d4:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d6:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80016d8:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016da:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016dc:	4642      	mov	r2, r8
 80016de:	6833      	ldr	r3, [r6, #0]
 80016e0:	4013      	ands	r3, r2
 80016e2:	42a3      	cmp	r3, r4
 80016e4:	d0b6      	beq.n	8001654 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e6:	f7ff fb1b 	bl	8000d20 <HAL_GetTick>
 80016ea:	1bc0      	subs	r0, r0, r7
 80016ec:	4548      	cmp	r0, r9
 80016ee:	d9f5      	bls.n	80016dc <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80016f0:	2003      	movs	r0, #3
 80016f2:	e7c4      	b.n	800167e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	0392      	lsls	r2, r2, #14
 80016f8:	d500      	bpl.n	80016fc <HAL_RCC_ClockConfig+0x150>
 80016fa:	e78b      	b.n	8001614 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
 80016fe:	e7be      	b.n	800167e <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001700:	2b03      	cmp	r3, #3
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001704:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001706:	0792      	lsls	r2, r2, #30
 8001708:	d500      	bpl.n	800170c <HAL_RCC_ClockConfig+0x160>
 800170a:	e783      	b.n	8001614 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800170c:	2001      	movs	r0, #1
 800170e:	e7b6      	b.n	800167e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001710:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001712:	0792      	lsls	r2, r2, #30
 8001714:	d500      	bpl.n	8001718 <HAL_RCC_ClockConfig+0x16c>
 8001716:	e77d      	b.n	8001614 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001718:	2001      	movs	r0, #1
 800171a:	e7b0      	b.n	800167e <HAL_RCC_ClockConfig+0xd2>
 800171c:	40022000 	.word	0x40022000
 8001720:	40021000 	.word	0x40021000
 8001724:	fffff0ff 	.word	0xfffff0ff
 8001728:	00001388 	.word	0x00001388
 800172c:	08002fc8 	.word	0x08002fc8
 8001730:	20000668 	.word	0x20000668
 8001734:	20000670 	.word	0x20000670
 8001738:	ffff8fff 	.word	0xffff8fff

0800173c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800173e:	4907      	ldr	r1, [pc, #28]	@ (800175c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001740:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001742:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	0f5b      	lsrs	r3, r3, #29
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	585b      	ldr	r3, [r3, r1]
 800174c:	211f      	movs	r1, #31
 800174e:	6810      	ldr	r0, [r2, #0]
 8001750:	400b      	ands	r3, r1
 8001752:	40d8      	lsrs	r0, r3
}
 8001754:	4770      	bx	lr
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	40021000 	.word	0x40021000
 800175c:	08002fa8 	.word	0x08002fa8
 8001760:	20000668 	.word	0x20000668

08001764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001766:	46d6      	mov	lr, sl
 8001768:	464f      	mov	r7, r9
 800176a:	4646      	mov	r6, r8
 800176c:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800176e:	6803      	ldr	r3, [r0, #0]
{
 8001770:	0004      	movs	r4, r0
 8001772:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001774:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001776:	039a      	lsls	r2, r3, #14
 8001778:	d551      	bpl.n	800181e <HAL_RCCEx_PeriphCLKConfig+0xba>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177a:	2280      	movs	r2, #128	@ 0x80
 800177c:	4b51      	ldr	r3, [pc, #324]	@ (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800177e:	0552      	lsls	r2, r2, #21
 8001780:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001782:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001784:	4211      	tst	r1, r2
 8001786:	d100      	bne.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001788:	e07b      	b.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800178a:	2780      	movs	r7, #128	@ 0x80
 800178c:	4d4e      	ldr	r5, [pc, #312]	@ (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800178e:	007f      	lsls	r7, r7, #1
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	433b      	orrs	r3, r7
 8001794:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001796:	f7ff fac3 	bl	8000d20 <HAL_GetTick>
 800179a:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800179c:	e005      	b.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179e:	f7ff fabf 	bl	8000d20 <HAL_GetTick>
 80017a2:	1b80      	subs	r0, r0, r6
 80017a4:	2802      	cmp	r0, #2
 80017a6:	d900      	bls.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x46>
 80017a8:	e075      	b.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x132>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	423b      	tst	r3, r7
 80017ae:	d0f6      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80017b0:	4d44      	ldr	r5, [pc, #272]	@ (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017b2:	23c0      	movs	r3, #192	@ 0xc0
 80017b4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80017ba:	6961      	ldr	r1, [r4, #20]
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80017bc:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80017be:	421a      	tst	r2, r3
 80017c0:	d022      	beq.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80017c2:	4288      	cmp	r0, r1
 80017c4:	d020      	beq.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80017c6:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80017c8:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 80017ca:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 80017cc:	0240      	lsls	r0, r0, #9
 80017ce:	4330      	orrs	r0, r6
 80017d0:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80017d2:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80017d4:	4a3d      	ldr	r2, [pc, #244]	@ (80018cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 80017d6:	4e3e      	ldr	r6, [pc, #248]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80017d8:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 80017da:	4030      	ands	r0, r6
 80017dc:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80017de:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80017e0:	07db      	lsls	r3, r3, #31
 80017e2:	d511      	bpl.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fa9c 	bl	8000d20 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e8:	2302      	movs	r3, #2
 80017ea:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ec:	4b39      	ldr	r3, [pc, #228]	@ (80018d4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
        tickstart = HAL_GetTick();
 80017ee:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	e004      	b.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa94 	bl	8000d20 <HAL_GetTick>
 80017f8:	1b80      	subs	r0, r0, r6
 80017fa:	4548      	cmp	r0, r9
 80017fc:	d84b      	bhi.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x132>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fe:	4642      	mov	r2, r8
 8001800:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001802:	421a      	tst	r2, r3
 8001804:	d0f6      	beq.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001806:	6961      	ldr	r1, [r4, #20]
 8001808:	4a2e      	ldr	r2, [pc, #184]	@ (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800180a:	4830      	ldr	r0, [pc, #192]	@ (80018cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800180c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800180e:	4003      	ands	r3, r0
 8001810:	430b      	orrs	r3, r1
 8001812:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001814:	4652      	mov	r2, sl
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001816:	2000      	movs	r0, #0
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001818:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 800181a:	2a01      	cmp	r2, #1
 800181c:	d040      	beq.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800181e:	07da      	lsls	r2, r3, #31
 8001820:	d506      	bpl.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001822:	2503      	movs	r5, #3
 8001824:	4927      	ldr	r1, [pc, #156]	@ (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001826:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001828:	43aa      	bics	r2, r5
 800182a:	6865      	ldr	r5, [r4, #4]
 800182c:	432a      	orrs	r2, r5
 800182e:	654a      	str	r2, [r1, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001830:	069a      	lsls	r2, r3, #26
 8001832:	d506      	bpl.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0xde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001834:	4923      	ldr	r1, [pc, #140]	@ (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001836:	4d28      	ldr	r5, [pc, #160]	@ (80018d8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8001838:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800183a:	402a      	ands	r2, r5
 800183c:	68a5      	ldr	r5, [r4, #8]
 800183e:	432a      	orrs	r2, r5
 8001840:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001842:	045a      	lsls	r2, r3, #17
 8001844:	d50a      	bpl.n	800185c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001846:	491f      	ldr	r1, [pc, #124]	@ (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001848:	6925      	ldr	r5, [r4, #16]
 800184a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800184c:	0092      	lsls	r2, r2, #2
 800184e:	0892      	lsrs	r2, r2, #2
 8001850:	432a      	orrs	r2, r5
 8001852:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001854:	2280      	movs	r2, #128	@ 0x80
 8001856:	05d2      	lsls	r2, r2, #23
 8001858:	4295      	cmp	r5, r2
 800185a:	d027      	beq.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x148>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800185c:	051b      	lsls	r3, r3, #20
 800185e:	d50a      	bpl.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001860:	4a18      	ldr	r2, [pc, #96]	@ (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001862:	68e1      	ldr	r1, [r4, #12]
 8001864:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001866:	4c1d      	ldr	r4, [pc, #116]	@ (80018dc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001868:	4023      	ands	r3, r4
 800186a:	430b      	orrs	r3, r1
 800186c:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800186e:	2380      	movs	r3, #128	@ 0x80
 8001870:	01db      	lsls	r3, r3, #7
 8001872:	4299      	cmp	r1, r3
 8001874:	d020      	beq.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001876:	b002      	add	sp, #8
 8001878:	bce0      	pop	{r5, r6, r7}
 800187a:	46ba      	mov	sl, r7
 800187c:	46b1      	mov	r9, r6
 800187e:	46a8      	mov	r8, r5
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001884:	4311      	orrs	r1, r2
 8001886:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8001888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188a:	4013      	ands	r3, r2
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001890:	2301      	movs	r3, #1
 8001892:	469a      	mov	sl, r3
 8001894:	e779      	b.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x26>
    if (pwrclkchanged == SET)
 8001896:	4652      	mov	r2, sl
        status = ret;
 8001898:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800189a:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 800189c:	2a01      	cmp	r2, #1
 800189e:	d1be      	bne.n	800181e <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018a2:	4d0f      	ldr	r5, [pc, #60]	@ (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80018a4:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80018a6:	402a      	ands	r2, r5
 80018a8:	63ca      	str	r2, [r1, #60]	@ 0x3c
 80018aa:	e7b8      	b.n	800181e <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	68cd      	ldr	r5, [r1, #12]
 80018b0:	0252      	lsls	r2, r2, #9
 80018b2:	432a      	orrs	r2, r5
 80018b4:	60ca      	str	r2, [r1, #12]
 80018b6:	e7d1      	b.n	800185c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	68d1      	ldr	r1, [r2, #12]
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	430b      	orrs	r3, r1
 80018c0:	60d3      	str	r3, [r2, #12]
  return status;
 80018c2:	e7d8      	b.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40007000 	.word	0x40007000
 80018cc:	fffffcff 	.word	0xfffffcff
 80018d0:	fffeffff 	.word	0xfffeffff
 80018d4:	00001388 	.word	0x00001388
 80018d8:	ffffcfff 	.word	0xffffcfff
 80018dc:	ffff3fff 	.word	0xffff3fff
 80018e0:	efffffff 	.word	0xefffffff

080018e4 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80018e4:	2180      	movs	r1, #128	@ 0x80
{
 80018e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80018e8:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <RTC_ExitInitMode+0x8c>)
{
 80018ea:	0004      	movs	r4, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	438a      	bics	r2, r1
 80018f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80018f2:	2220      	movs	r2, #32
 80018f4:	6998      	ldr	r0, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80018f6:	6821      	ldr	r1, [r4, #0]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80018f8:	4202      	tst	r2, r0
 80018fa:	d113      	bne.n	8001924 <RTC_ExitInitMode+0x40>
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <RTC_ExitInitMode+0x90>)
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80018fe:	27fa      	movs	r7, #250	@ 0xfa
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001900:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 8001902:	f7ff fa0d 	bl	8000d20 <HAL_GetTick>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001906:	2620      	movs	r6, #32
  tickstart = HAL_GetTick();
 8001908:	0005      	movs	r5, r0
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800190a:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800190c:	e004      	b.n	8001918 <RTC_ExitInitMode+0x34>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800190e:	f7ff fa07 	bl	8000d20 <HAL_GetTick>
 8001912:	1b40      	subs	r0, r0, r5
 8001914:	42b8      	cmp	r0, r7
 8001916:	d826      	bhi.n	8001966 <RTC_ExitInitMode+0x82>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	421e      	tst	r6, r3
 800191e:	d0f6      	beq.n	800190e <RTC_ExitInitMode+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8001920:	2000      	movs	r0, #0
 8001922:	e01a      	b.n	800195a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001924:	6998      	ldr	r0, [r3, #24]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001926:	27fa      	movs	r7, #250	@ 0xfa
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001928:	4390      	bics	r0, r2
 800192a:	6198      	str	r0, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <RTC_ExitInitMode+0x90>)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800192e:	2620      	movs	r6, #32
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001930:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 8001932:	f7ff f9f5 	bl	8000d20 <HAL_GetTick>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001936:	00bf      	lsls	r7, r7, #2
  tickstart = HAL_GetTick();
 8001938:	0005      	movs	r5, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800193a:	e004      	b.n	8001946 <RTC_ExitInitMode+0x62>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800193c:	f7ff f9f0 	bl	8000d20 <HAL_GetTick>
 8001940:	1b40      	subs	r0, r0, r5
 8001942:	42b8      	cmp	r0, r7
 8001944:	d80a      	bhi.n	800195c <RTC_ExitInitMode+0x78>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	421e      	tst	r6, r3
 800194c:	d0f6      	beq.n	800193c <RTC_ExitInitMode+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 800194e:	2000      	movs	r0, #0
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001950:	2120      	movs	r1, #32
 8001952:	4a07      	ldr	r2, [pc, #28]	@ (8001970 <RTC_ExitInitMode+0x8c>)
 8001954:	6993      	ldr	r3, [r2, #24]
 8001956:	430b      	orrs	r3, r1
 8001958:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 800195a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800195c:	2329      	movs	r3, #41	@ 0x29
 800195e:	2203      	movs	r2, #3
      status = HAL_TIMEOUT;
 8001960:	2003      	movs	r0, #3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001962:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 8001964:	e7f4      	b.n	8001950 <RTC_ExitInitMode+0x6c>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001966:	2329      	movs	r3, #41	@ 0x29
 8001968:	2203      	movs	r2, #3
      status = HAL_TIMEOUT;
 800196a:	2003      	movs	r0, #3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800196c:	54e2      	strb	r2, [r4, r3]
  return status;
 800196e:	e7f4      	b.n	800195a <RTC_ExitInitMode+0x76>
 8001970:	40002800 	.word	0x40002800
 8001974:	0001005f 	.word	0x0001005f

08001978 <HAL_RTC_Init>:
{
 8001978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800197a:	1e04      	subs	r4, r0, #0
  if(hrtc != NULL)
 800197c:	d04e      	beq.n	8001a1c <HAL_RTC_Init+0xa4>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800197e:	2329      	movs	r3, #41	@ 0x29
 8001980:	5cc3      	ldrb	r3, [r0, r3]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03a      	beq.n	80019fe <HAL_RTC_Init+0x86>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001988:	2329      	movs	r3, #41	@ 0x29
 800198a:	2202      	movs	r2, #2
 800198c:	54e2      	strb	r2, [r4, r3]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	06d2      	lsls	r2, r2, #27
 8001994:	d504      	bpl.n	80019a0 <HAL_RTC_Init+0x28>
      hrtc->State = HAL_RTC_STATE_READY;
 8001996:	2329      	movs	r3, #41	@ 0x29
 8001998:	2201      	movs	r2, #1
 800199a:	2000      	movs	r0, #0
 800199c:	54e2      	strb	r2, [r4, r3]
}
 800199e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019a0:	22ca      	movs	r2, #202	@ 0xca
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80019a4:	3a77      	subs	r2, #119	@ 0x77
 80019a6:	625a      	str	r2, [r3, #36]	@ 0x24
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	0652      	lsls	r2, r2, #25
 80019ac:	d538      	bpl.n	8001a20 <HAL_RTC_Init+0xa8>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	492e      	ldr	r1, [pc, #184]	@ (8001a6c <HAL_RTC_Init+0xf4>)
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80019b2:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80019b4:	400a      	ands	r2, r1
 80019b6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80019b8:	68a2      	ldr	r2, [r4, #8]
 80019ba:	6999      	ldr	r1, [r3, #24]
 80019bc:	4302      	orrs	r2, r0
 80019be:	69e0      	ldr	r0, [r4, #28]
 80019c0:	4302      	orrs	r2, r0
 80019c2:	430a      	orrs	r2, r1
 80019c4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80019c6:	6922      	ldr	r2, [r4, #16]
        status = RTC_ExitInitMode(hrtc);
 80019c8:	0020      	movs	r0, r4
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80019ca:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80019cc:	68e2      	ldr	r2, [r4, #12]
 80019ce:	6919      	ldr	r1, [r3, #16]
 80019d0:	0412      	lsls	r2, r2, #16
 80019d2:	430a      	orrs	r2, r1
 80019d4:	611a      	str	r2, [r3, #16]
        status = RTC_ExitInitMode(hrtc);
 80019d6:	f7ff ff85 	bl	80018e4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80019da:	2800      	cmp	r0, #0
 80019dc:	d13e      	bne.n	8001a5c <HAL_RTC_Init+0xe4>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80019de:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80019e0:	6a20      	ldr	r0, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80019e2:	6993      	ldr	r3, [r2, #24]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	08db      	lsrs	r3, r3, #3
 80019e8:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80019ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80019ec:	6991      	ldr	r1, [r2, #24]
 80019ee:	4303      	orrs	r3, r0
 80019f0:	69a0      	ldr	r0, [r4, #24]
 80019f2:	4303      	orrs	r3, r0
 80019f4:	430b      	orrs	r3, r1
 80019f6:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019f8:	23ff      	movs	r3, #255	@ 0xff
 80019fa:	6253      	str	r3, [r2, #36]	@ 0x24
    if (status == HAL_OK)
 80019fc:	e7cb      	b.n	8001996 <HAL_RTC_Init+0x1e>
      hrtc->Lock = HAL_UNLOCKED;
 80019fe:	3328      	adds	r3, #40	@ 0x28
 8001a00:	54c2      	strb	r2, [r0, r3]
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001a02:	2388      	movs	r3, #136	@ 0x88
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	6043      	str	r3, [r0, #4]
      HAL_RTC_MspInit(hrtc);
 8001a08:	f7fe ff80 	bl	800090c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001a0c:	2329      	movs	r3, #41	@ 0x29
 8001a0e:	2202      	movs	r2, #2
 8001a10:	54e2      	strb	r2, [r4, r3]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	06d2      	lsls	r2, r2, #27
 8001a18:	d4bd      	bmi.n	8001996 <HAL_RTC_Init+0x1e>
 8001a1a:	e7c1      	b.n	80019a0 <HAL_RTC_Init+0x28>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	e7be      	b.n	800199e <HAL_RTC_Init+0x26>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001a20:	2180      	movs	r1, #128	@ 0x80
 8001a22:	68da      	ldr	r2, [r3, #12]
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001a24:	27fa      	movs	r7, #250	@ 0xfa
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001a26:	430a      	orrs	r2, r1
 8001a28:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001a2a:	f7ff f979 	bl	8000d20 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;  
 8001a2e:	2200      	movs	r2, #0
    tickstart = HAL_GetTick();
 8001a30:	0005      	movs	r5, r0
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001a32:	00bf      	lsls	r7, r7, #2
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001a34:	2640      	movs	r6, #64	@ 0x40
 8001a36:	e007      	b.n	8001a48 <HAL_RTC_Init+0xd0>
 8001a38:	2a03      	cmp	r2, #3
 8001a3a:	d00b      	beq.n	8001a54 <HAL_RTC_Init+0xdc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001a3c:	f7ff f970 	bl	8000d20 <HAL_GetTick>
 8001a40:	2200      	movs	r2, #0
 8001a42:	1b40      	subs	r0, r0, r5
 8001a44:	42b8      	cmp	r0, r7
 8001a46:	d80d      	bhi.n	8001a64 <HAL_RTC_Init+0xec>
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	68d9      	ldr	r1, [r3, #12]
 8001a4c:	420e      	tst	r6, r1
 8001a4e:	d0f3      	beq.n	8001a38 <HAL_RTC_Init+0xc0>
      if(status == HAL_OK)
 8001a50:	2a00      	cmp	r2, #0
 8001a52:	d0ac      	beq.n	80019ae <HAL_RTC_Init+0x36>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a54:	22ff      	movs	r2, #255	@ 0xff
 8001a56:	2003      	movs	r0, #3
 8001a58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8001a5a:	e7a0      	b.n	800199e <HAL_RTC_Init+0x26>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a5c:	22ff      	movs	r2, #255	@ 0xff
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8001a62:	e79c      	b.n	800199e <HAL_RTC_Init+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001a64:	2329      	movs	r3, #41	@ 0x29
 8001a66:	3203      	adds	r2, #3
 8001a68:	54e2      	strb	r2, [r4, r3]
 8001a6a:	e7e3      	b.n	8001a34 <HAL_RTC_Init+0xbc>
 8001a6c:	fb8fffbf 	.word	0xfb8fffbf

08001a70 <HAL_RTC_SetTime>:
{
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	46ce      	mov	lr, r9
 8001a74:	4647      	mov	r7, r8
  __HAL_LOCK(hrtc);
 8001a76:	2328      	movs	r3, #40	@ 0x28
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 8001a7c:	5cc2      	ldrb	r2, [r0, r3]
{
 8001a7e:	0004      	movs	r4, r0
 8001a80:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001a82:	2a01      	cmp	r2, #1
 8001a84:	d064      	beq.n	8001b50 <HAL_RTC_SetTime+0xe0>
 8001a86:	2201      	movs	r2, #1
 8001a88:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	3201      	adds	r2, #1
 8001a8e:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	32c8      	adds	r2, #200	@ 0xc8
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a96:	3a77      	subs	r2, #119	@ 0x77
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	0652      	lsls	r2, r2, #25
 8001a9e:	d533      	bpl.n	8001b08 <HAL_RTC_SetTime+0x98>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001aa0:	699a      	ldr	r2, [r3, #24]
    if(Format == RTC_FORMAT_BIN)
 8001aa2:	2d00      	cmp	r5, #0
 8001aa4:	d159      	bne.n	8001b5a <HAL_RTC_SetTime+0xea>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001aa6:	2140      	movs	r1, #64	@ 0x40
 8001aa8:	0008      	movs	r0, r1
 8001aaa:	4010      	ands	r0, r2
 8001aac:	4211      	tst	r1, r2
 8001aae:	d100      	bne.n	8001ab2 <HAL_RTC_SetTime+0x42>
 8001ab0:	e081      	b.n	8001bb6 <HAL_RTC_SetTime+0x146>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001ab2:	78f0      	ldrb	r0, [r6, #3]
 8001ab4:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ab6:	7832      	ldrb	r2, [r6, #0]
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t Param = Value;

  while(Param >= 10U)
 8001ab8:	2a09      	cmp	r2, #9
 8001aba:	d908      	bls.n	8001ace <HAL_RTC_SetTime+0x5e>
  uint32_t bcdhigh = 0U;
 8001abc:	2100      	movs	r1, #0
  {
    bcdhigh++;
    Param -= 10U;
 8001abe:	3a0a      	subs	r2, #10
 8001ac0:	b2d2      	uxtb	r2, r2
    bcdhigh++;
 8001ac2:	3101      	adds	r1, #1
  while(Param >= 10U)
 8001ac4:	2a09      	cmp	r2, #9
 8001ac6:	d8fa      	bhi.n	8001abe <HAL_RTC_SetTime+0x4e>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001ac8:	0109      	lsls	r1, r1, #4
 8001aca:	430a      	orrs	r2, r1
 8001acc:	b2d2      	uxtb	r2, r2
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ace:	0417      	lsls	r7, r2, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ad0:	7872      	ldrb	r2, [r6, #1]
  while(Param >= 10U)
 8001ad2:	2a09      	cmp	r2, #9
 8001ad4:	d908      	bls.n	8001ae8 <HAL_RTC_SetTime+0x78>
  uint32_t bcdhigh = 0U;
 8001ad6:	2100      	movs	r1, #0
    Param -= 10U;
 8001ad8:	3a0a      	subs	r2, #10
 8001ada:	b2d2      	uxtb	r2, r2
    bcdhigh++;
 8001adc:	3101      	adds	r1, #1
  while(Param >= 10U)
 8001ade:	2a09      	cmp	r2, #9
 8001ae0:	d8fa      	bhi.n	8001ad8 <HAL_RTC_SetTime+0x68>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001ae2:	0109      	lsls	r1, r1, #4
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	b2d2      	uxtb	r2, r2
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001ae8:	78b1      	ldrb	r1, [r6, #2]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001aea:	0212      	lsls	r2, r2, #8
  while(Param >= 10U)
 8001aec:	2909      	cmp	r1, #9
 8001aee:	d907      	bls.n	8001b00 <HAL_RTC_SetTime+0x90>
    Param -= 10U;
 8001af0:	390a      	subs	r1, #10
 8001af2:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8001af4:	3501      	adds	r5, #1
  while(Param >= 10U)
 8001af6:	2909      	cmp	r1, #9
 8001af8:	d8fa      	bhi.n	8001af0 <HAL_RTC_SetTime+0x80>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001afa:	012d      	lsls	r5, r5, #4
 8001afc:	4329      	orrs	r1, r5
 8001afe:	b2c9      	uxtb	r1, r1
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001b00:	4307      	orrs	r7, r0
 8001b02:	433a      	orrs	r2, r7
 8001b04:	430a      	orrs	r2, r1
 8001b06:	e037      	b.n	8001b78 <HAL_RTC_SetTime+0x108>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001b08:	2180      	movs	r1, #128	@ 0x80
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001b10:	f7ff f906 	bl	8000d20 <HAL_GetTick>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b14:	23fa      	movs	r3, #250	@ 0xfa
 8001b16:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8001b18:	0007      	movs	r7, r0
  HAL_StatusTypeDef status = HAL_OK;  
 8001b1a:	2200      	movs	r2, #0
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b1c:	4699      	mov	r9, r3
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001b1e:	2340      	movs	r3, #64	@ 0x40
 8001b20:	4698      	mov	r8, r3
 8001b22:	e007      	b.n	8001b34 <HAL_RTC_SetTime+0xc4>
 8001b24:	2a03      	cmp	r2, #3
 8001b26:	d00c      	beq.n	8001b42 <HAL_RTC_SetTime+0xd2>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b28:	f7ff f8fa 	bl	8000d20 <HAL_GetTick>
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	1bc0      	subs	r0, r0, r7
 8001b30:	4548      	cmp	r0, r9
 8001b32:	d83a      	bhi.n	8001baa <HAL_RTC_SetTime+0x13a>
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001b34:	4640      	mov	r0, r8
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	68d9      	ldr	r1, [r3, #12]
 8001b3a:	4208      	tst	r0, r1
 8001b3c:	d0f2      	beq.n	8001b24 <HAL_RTC_SetTime+0xb4>
  if(status == HAL_OK)
 8001b3e:	2a00      	cmp	r2, #0
 8001b40:	d0ae      	beq.n	8001aa0 <HAL_RTC_SetTime+0x30>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b42:	22ff      	movs	r2, #255	@ 0xff
 8001b44:	2003      	movs	r0, #3
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8001b48:	2328      	movs	r3, #40	@ 0x28
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	54e2      	strb	r2, [r4, r3]
  return status;
 8001b4e:	e000      	b.n	8001b52 <HAL_RTC_SetTime+0xe2>
  __HAL_LOCK(hrtc);
 8001b50:	2002      	movs	r0, #2
}
 8001b52:	bcc0      	pop	{r6, r7}
 8001b54:	46b9      	mov	r9, r7
 8001b56:	46b0      	mov	r8, r6
 8001b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001b5a:	2040      	movs	r0, #64	@ 0x40
 8001b5c:	0001      	movs	r1, r0
 8001b5e:	4011      	ands	r1, r2
 8001b60:	4210      	tst	r0, r2
 8001b62:	d026      	beq.n	8001bb2 <HAL_RTC_SetTime+0x142>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001b64:	78f1      	ldrb	r1, [r6, #3]
 8001b66:	0589      	lsls	r1, r1, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001b68:	7832      	ldrb	r2, [r6, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001b6a:	7870      	ldrb	r0, [r6, #1]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001b6c:	0412      	lsls	r2, r2, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001b6e:	0200      	lsls	r0, r0, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001b70:	4302      	orrs	r2, r0
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001b72:	78b0      	ldrb	r0, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001b74:	4302      	orrs	r2, r0
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001b76:	430a      	orrs	r2, r1
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001b78:	4910      	ldr	r1, [pc, #64]	@ (8001bbc <HAL_RTC_SetTime+0x14c>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001b7a:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	490f      	ldr	r1, [pc, #60]	@ (8001bc0 <HAL_RTC_SetTime+0x150>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	619a      	str	r2, [r3, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001b88:	68f2      	ldr	r2, [r6, #12]
 8001b8a:	6999      	ldr	r1, [r3, #24]
 8001b8c:	4302      	orrs	r2, r0
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	619a      	str	r2, [r3, #24]
    status = RTC_ExitInitMode(hrtc);
 8001b92:	0020      	movs	r0, r4
 8001b94:	f7ff fea6 	bl	80018e4 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b98:	22ff      	movs	r2, #255	@ 0xff
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d1d2      	bne.n	8001b48 <HAL_RTC_SetTime+0xd8>
   hrtc->State = HAL_RTC_STATE_READY;
 8001ba2:	2329      	movs	r3, #41	@ 0x29
 8001ba4:	3afe      	subs	r2, #254	@ 0xfe
 8001ba6:	54e2      	strb	r2, [r4, r3]
 8001ba8:	e7ce      	b.n	8001b48 <HAL_RTC_SetTime+0xd8>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001baa:	2329      	movs	r3, #41	@ 0x29
 8001bac:	3203      	adds	r2, #3
 8001bae:	54e2      	strb	r2, [r4, r3]
 8001bb0:	e7b5      	b.n	8001b1e <HAL_RTC_SetTime+0xae>
        sTime->TimeFormat = 0x00U;
 8001bb2:	70f1      	strb	r1, [r6, #3]
 8001bb4:	e7d8      	b.n	8001b68 <HAL_RTC_SetTime+0xf8>
        sTime->TimeFormat = 0x00U;
 8001bb6:	70f5      	strb	r5, [r6, #3]
 8001bb8:	e77d      	b.n	8001ab6 <HAL_RTC_SetTime+0x46>
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	007f7f7f 	.word	0x007f7f7f
 8001bc0:	fffbffff 	.word	0xfffbffff

08001bc4 <HAL_RTC_SetDate>:
{
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	46c6      	mov	lr, r8
 __HAL_LOCK(hrtc);
 8001bc8:	2328      	movs	r3, #40	@ 0x28
{
 8001bca:	b500      	push	{lr}
 8001bcc:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8001bce:	5cc0      	ldrb	r0, [r0, r3]
 8001bd0:	2801      	cmp	r0, #1
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RTC_SetDate+0x12>
 8001bd4:	e089      	b.n	8001cea <HAL_RTC_SetDate+0x126>
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	54e8      	strb	r0, [r5, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bda:	3301      	adds	r3, #1
 8001bdc:	3001      	adds	r0, #1
 8001bde:	54e8      	strb	r0, [r5, r3]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001be0:	780f      	ldrb	r7, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001be2:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001be4:	7848      	ldrb	r0, [r1, #1]
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8001be6:	788e      	ldrb	r6, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001be8:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d022      	beq.n	8001c34 <HAL_RTC_SetDate+0x70>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001bee:	041c      	lsls	r4, r3, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bf0:	23ca      	movs	r3, #202	@ 0xca
 8001bf2:	682a      	ldr	r2, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001bf4:	433c      	orrs	r4, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bf6:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bf8:	3b77      	subs	r3, #119	@ 0x77
 8001bfa:	6253      	str	r3, [r2, #36]	@ 0x24
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001bfc:	4334      	orrs	r4, r6
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001bfe:	0200      	lsls	r0, r0, #8
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001c00:	68d3      	ldr	r3, [r2, #12]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001c02:	4304      	orrs	r4, r0
 8001c04:	46a0      	mov	r8, r4
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001c06:	065b      	lsls	r3, r3, #25
 8001c08:	d549      	bpl.n	8001c9e <HAL_RTC_SetDate+0xda>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c0a:	4644      	mov	r4, r8
 8001c0c:	4b39      	ldr	r3, [pc, #228]	@ (8001cf4 <HAL_RTC_SetDate+0x130>)
    status = RTC_ExitInitMode(hrtc);
 8001c0e:	0028      	movs	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c10:	401c      	ands	r4, r3
 8001c12:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8001c14:	f7ff fe66 	bl	80018e4 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c18:	22ff      	movs	r2, #255	@ 0xff
 8001c1a:	682b      	ldr	r3, [r5, #0]
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_RTC_SetDate+0x64>
    hrtc->State = HAL_RTC_STATE_READY;
 8001c22:	2329      	movs	r3, #41	@ 0x29
 8001c24:	3afe      	subs	r2, #254	@ 0xfe
 8001c26:	54ea      	strb	r2, [r5, r3]
  __HAL_UNLOCK(hrtc);
 8001c28:	2328      	movs	r3, #40	@ 0x28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	54ea      	strb	r2, [r5, r3]
}
 8001c2e:	bc80      	pop	{r7}
 8001c30:	46b8      	mov	r8, r7
 8001c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001c34:	2410      	movs	r4, #16
 8001c36:	4204      	tst	r4, r0
 8001c38:	d04f      	beq.n	8001cda <HAL_RTC_SetDate+0x116>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001c3a:	43a0      	bics	r0, r4
 8001c3c:	300a      	adds	r0, #10
 8001c3e:	b2c0      	uxtb	r0, r0
 8001c40:	7048      	strb	r0, [r1, #1]
  while(Param >= 10U)
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	d953      	bls.n	8001cee <HAL_RTC_SetDate+0x12a>
  uint32_t bcdhigh = 0U;
 8001c46:	2100      	movs	r1, #0
    Param -= 10U;
 8001c48:	3b0a      	subs	r3, #10
 8001c4a:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8001c4c:	3101      	adds	r1, #1
  while(Param >= 10U)
 8001c4e:	2b09      	cmp	r3, #9
 8001c50:	d8fa      	bhi.n	8001c48 <HAL_RTC_SetDate+0x84>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001c52:	0109      	lsls	r1, r1, #4
 8001c54:	430b      	orrs	r3, r1
 8001c56:	b2db      	uxtb	r3, r3
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001c58:	041b      	lsls	r3, r3, #16
  while(Param >= 10U)
 8001c5a:	2809      	cmp	r0, #9
 8001c5c:	d908      	bls.n	8001c70 <HAL_RTC_SetDate+0xac>
  uint32_t bcdhigh = 0U;
 8001c5e:	2100      	movs	r1, #0
    Param -= 10U;
 8001c60:	380a      	subs	r0, #10
 8001c62:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8001c64:	3101      	adds	r1, #1
  while(Param >= 10U)
 8001c66:	2809      	cmp	r0, #9
 8001c68:	d8fa      	bhi.n	8001c60 <HAL_RTC_SetDate+0x9c>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001c6a:	0109      	lsls	r1, r1, #4
 8001c6c:	4308      	orrs	r0, r1
 8001c6e:	b2c0      	uxtb	r0, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001c70:	0200      	lsls	r0, r0, #8
  while(Param >= 10U)
 8001c72:	2e09      	cmp	r6, #9
 8001c74:	d907      	bls.n	8001c86 <HAL_RTC_SetDate+0xc2>
    Param -= 10U;
 8001c76:	3e0a      	subs	r6, #10
 8001c78:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 8001c7a:	3201      	adds	r2, #1
  while(Param >= 10U)
 8001c7c:	2e09      	cmp	r6, #9
 8001c7e:	d8fa      	bhi.n	8001c76 <HAL_RTC_SetDate+0xb2>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	4316      	orrs	r6, r2
 8001c84:	b2f6      	uxtb	r6, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001c86:	433b      	orrs	r3, r7
 8001c88:	4303      	orrs	r3, r0
 8001c8a:	4333      	orrs	r3, r6
 8001c8c:	4698      	mov	r8, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c8e:	23ca      	movs	r3, #202	@ 0xca
 8001c90:	682a      	ldr	r2, [r5, #0]
 8001c92:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c94:	3b77      	subs	r3, #119	@ 0x77
 8001c96:	6253      	str	r3, [r2, #36]	@ 0x24
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001c98:	68d3      	ldr	r3, [r2, #12]
 8001c9a:	065b      	lsls	r3, r3, #25
 8001c9c:	d4b5      	bmi.n	8001c0a <HAL_RTC_SetDate+0x46>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001c9e:	2180      	movs	r1, #128	@ 0x80
 8001ca0:	68d3      	ldr	r3, [r2, #12]
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001ca2:	24fa      	movs	r4, #250	@ 0xfa
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8001ca8:	f7ff f83a 	bl	8000d20 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;  
 8001cac:	2300      	movs	r3, #0
    tickstart = HAL_GetTick();
 8001cae:	0006      	movs	r6, r0
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001cb0:	00a4      	lsls	r4, r4, #2
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001cb2:	2740      	movs	r7, #64	@ 0x40
 8001cb4:	e007      	b.n	8001cc6 <HAL_RTC_SetDate+0x102>
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RTC_SetDate+0x10e>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001cba:	f7ff f831 	bl	8000d20 <HAL_GetTick>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	1b80      	subs	r0, r0, r6
 8001cc2:	42a0      	cmp	r0, r4
 8001cc4:	d80c      	bhi.n	8001ce0 <HAL_RTC_SetDate+0x11c>
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001cc6:	682a      	ldr	r2, [r5, #0]
 8001cc8:	68d1      	ldr	r1, [r2, #12]
 8001cca:	420f      	tst	r7, r1
 8001ccc:	d0f3      	beq.n	8001cb6 <HAL_RTC_SetDate+0xf2>
  if(status == HAL_OK)
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d09b      	beq.n	8001c0a <HAL_RTC_SetDate+0x46>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cd2:	23ff      	movs	r3, #255	@ 0xff
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	6253      	str	r3, [r2, #36]	@ 0x24
  if (status == HAL_OK)
 8001cd8:	e7a6      	b.n	8001c28 <HAL_RTC_SetDate+0x64>
  while(Param >= 10U)
 8001cda:	2b09      	cmp	r3, #9
 8001cdc:	d8b3      	bhi.n	8001c46 <HAL_RTC_SetDate+0x82>
 8001cde:	e7bb      	b.n	8001c58 <HAL_RTC_SetDate+0x94>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	3329      	adds	r3, #41	@ 0x29
 8001ce4:	54ea      	strb	r2, [r5, r3]
        status = HAL_TIMEOUT;
 8001ce6:	3b26      	subs	r3, #38	@ 0x26
 8001ce8:	e7e3      	b.n	8001cb2 <HAL_RTC_SetDate+0xee>
 __HAL_LOCK(hrtc);
 8001cea:	2002      	movs	r0, #2
 8001cec:	e79f      	b.n	8001c2e <HAL_RTC_SetDate+0x6a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001cee:	041b      	lsls	r3, r3, #16
  while(Param >= 10U)
 8001cf0:	e7b5      	b.n	8001c5e <HAL_RTC_SetDate+0x9a>
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	00ffff3f 	.word	0x00ffff3f

08001cf8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	464f      	mov	r7, r9
 8001cfc:	4646      	mov	r6, r8
 8001cfe:	46d6      	mov	lr, sl
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d00:	2328      	movs	r3, #40	@ 0x28
{
 8001d02:	b5c0      	push	{r6, r7, lr}
 8001d04:	0017      	movs	r7, r2
  __HAL_LOCK(hrtc);
 8001d06:	5cc2      	ldrb	r2, [r0, r3]
{
 8001d08:	0004      	movs	r4, r0
 8001d0a:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001d0c:	2a01      	cmp	r2, #1
 8001d0e:	d04b      	beq.n	8001da8 <HAL_RTCEx_SetWakeUpTimer+0xb0>
 8001d10:	2201      	movs	r2, #1
 8001d12:	54c2      	strb	r2, [r0, r3]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d14:	3301      	adds	r3, #1
 8001d16:	3201      	adds	r2, #1
 8001d18:	54c2      	strb	r2, [r0, r3]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d1a:	6803      	ldr	r3, [r0, #0]
 8001d1c:	32c8      	adds	r2, #200	@ 0xc8
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d20:	3a77      	subs	r2, #119	@ 0x77
 8001d22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8001d24:	4a21      	ldr	r2, [pc, #132]	@ (8001dac <HAL_RTCEx_SetWakeUpTimer+0xb4>)
 8001d26:	4822      	ldr	r0, [pc, #136]	@ (8001db0 <HAL_RTCEx_SetWakeUpTimer+0xb8>)
 8001d28:	6991      	ldr	r1, [r2, #24]
 8001d2a:	4001      	ands	r1, r0
 8001d2c:	6191      	str	r1, [r2, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8001d2e:	68d2      	ldr	r2, [r2, #12]
 8001d30:	0652      	lsls	r2, r2, #25
 8001d32:	d51a      	bpl.n	8001d6a <HAL_RTCEx_SetWakeUpTimer+0x72>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8001d34:	2107      	movs	r1, #7
 8001d36:	699a      	ldr	r2, [r3, #24]
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);

  return HAL_OK;
 8001d38:	2000      	movs	r0, #0
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	619a      	str	r2, [r3, #24]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	433a      	orrs	r2, r7
 8001d42:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8001d44:	2280      	movs	r2, #128	@ 0x80
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8001d46:	615e      	str	r6, [r3, #20]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8001d48:	6999      	ldr	r1, [r3, #24]
 8001d4a:	00d2      	lsls	r2, r2, #3
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d50:	22ff      	movs	r2, #255	@ 0xff
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8001d54:	2329      	movs	r3, #41	@ 0x29
 8001d56:	3afe      	subs	r2, #254	@ 0xfe
 8001d58:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	54e2      	strb	r2, [r4, r3]
}
 8001d60:	bce0      	pop	{r5, r6, r7}
 8001d62:	46ba      	mov	sl, r7
 8001d64:	46b1      	mov	r9, r6
 8001d66:	46a8      	mov	r8, r5
 8001d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 8001d6a:	f7fe ffd9 	bl	8000d20 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d6e:	23fa      	movs	r3, #250	@ 0xfa
 8001d70:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8001d72:	4680      	mov	r8, r0
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8001d74:	2504      	movs	r5, #4
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d76:	469a      	mov	sl, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8001d78:	0029      	movs	r1, r5
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	4011      	ands	r1, r2
 8001d80:	4689      	mov	r9, r1
 8001d82:	4215      	tst	r5, r2
 8001d84:	d1d6      	bne.n	8001d34 <HAL_RTCEx_SetWakeUpTimer+0x3c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d86:	f7fe ffcb 	bl	8000d20 <HAL_GetTick>
 8001d8a:	4643      	mov	r3, r8
 8001d8c:	1ac0      	subs	r0, r0, r3
 8001d8e:	4550      	cmp	r0, sl
 8001d90:	d9f2      	bls.n	8001d78 <HAL_RTCEx_SetWakeUpTimer+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d92:	22ff      	movs	r2, #255	@ 0xff
 8001d94:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001d96:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d9a:	2329      	movs	r3, #41	@ 0x29
 8001d9c:	3afc      	subs	r2, #252	@ 0xfc
 8001d9e:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 8001da0:	464a      	mov	r2, r9
 8001da2:	3b01      	subs	r3, #1
 8001da4:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8001da6:	e7db      	b.n	8001d60 <HAL_RTCEx_SetWakeUpTimer+0x68>
  __HAL_LOCK(hrtc);
 8001da8:	2002      	movs	r0, #2
 8001daa:	e7d9      	b.n	8001d60 <HAL_RTCEx_SetWakeUpTimer+0x68>
 8001dac:	40002800 	.word	0x40002800
 8001db0:	fffffbff 	.word	0xfffffbff

08001db4 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46ce      	mov	lr, r9
 8001db8:	4647      	mov	r7, r8
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001dbe:	466b      	mov	r3, sp
 8001dc0:	1cdc      	adds	r4, r3, #3
 8001dc2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001dc4:	0016      	movs	r6, r2
 8001dc6:	000f      	movs	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 8001dc8:	7023      	strb	r3, [r4, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001dca:	4680      	mov	r8, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001dcc:	f7fe ffa8 	bl	8000d20 <HAL_GetTick>
 8001dd0:	19f6      	adds	r6, r6, r7
 8001dd2:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8001dd4:	f7fe ffa4 	bl	8000d20 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001dd8:	4643      	mov	r3, r8
 8001dda:	681d      	ldr	r5, [r3, #0]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001ddc:	4b35      	ldr	r3, [pc, #212]	@ (8001eb4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x100>)
  tmp_tickstart = HAL_GetTick();
 8001dde:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	009a      	lsls	r2, r3, #2
 8001de4:	18d2      	adds	r2, r2, r3
 8001de6:	00d3      	lsls	r3, r2, #3
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	0d1b      	lsrs	r3, r3, #20
 8001dec:	4373      	muls	r3, r6
 8001dee:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8001df0:	3701      	adds	r7, #1
 8001df2:	d111      	bne.n	8001e18 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x64>
 8001df4:	22c0      	movs	r2, #192	@ 0xc0
 8001df6:	68ab      	ldr	r3, [r5, #8]
 8001df8:	00d2      	lsls	r2, r2, #3
 8001dfa:	4213      	tst	r3, r2
 8001dfc:	d006      	beq.n	8001e0c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001dfe:	7b2b      	ldrb	r3, [r5, #12]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	7023      	strb	r3, [r4, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001e04:	7823      	ldrb	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e06:	68ab      	ldr	r3, [r5, #8]
 8001e08:	4213      	tst	r3, r2
 8001e0a:	d1f8      	bne.n	8001dfe <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
      }
      count--;
    }
  }

  return HAL_OK;
 8001e0c:	2000      	movs	r0, #0
}
 8001e0e:	b003      	add	sp, #12
 8001e10:	bcc0      	pop	{r6, r7}
 8001e12:	46b9      	mov	r9, r7
 8001e14:	46b0      	mov	r8, r6
 8001e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8001e18:	27c0      	movs	r7, #192	@ 0xc0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001e1a:	002b      	movs	r3, r5
  while ((hspi->Instance->SR & Fifo) != State)
 8001e1c:	00ff      	lsls	r7, r7, #3
 8001e1e:	e013      	b.n	8001e48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      tmpreg8 = *ptmpreg8;
 8001e20:	7b2b      	ldrb	r3, [r5, #12]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	7023      	strb	r3, [r4, #0]
      UNUSED(tmpreg8);
 8001e26:	7823      	ldrb	r3, [r4, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e28:	f7fe ff7a 	bl	8000d20 <HAL_GetTick>
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	1ac0      	subs	r0, r0, r3
 8001e30:	42b0      	cmp	r0, r6
 8001e32:	d20d      	bcs.n	8001e50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9c>
      if (count == 0U)
 8001e34:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001e36:	1e5a      	subs	r2, r3, #1
 8001e38:	4193      	sbcs	r3, r2
 8001e3a:	425b      	negs	r3, r3
 8001e3c:	401e      	ands	r6, r3
      count--;
 8001e3e:	9b01      	ldr	r3, [sp, #4]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e44:	4643      	mov	r3, r8
 8001e46:	681b      	ldr	r3, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	423b      	tst	r3, r7
 8001e4c:	d1e8      	bne.n	8001e20 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
 8001e4e:	e7dd      	b.n	8001e0c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e50:	4643      	mov	r3, r8
 8001e52:	21e0      	movs	r1, #224	@ 0xe0
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e5a:	4641      	mov	r1, r8
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e5c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e5e:	2282      	movs	r2, #130	@ 0x82
 8001e60:	6849      	ldr	r1, [r1, #4]
 8001e62:	0052      	lsls	r2, r2, #1
 8001e64:	4291      	cmp	r1, r2
 8001e66:	d015      	beq.n	8001e94 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e68:	4642      	mov	r2, r8
 8001e6a:	2180      	movs	r1, #128	@ 0x80
 8001e6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e6e:	0189      	lsls	r1, r1, #6
 8001e70:	428a      	cmp	r2, r1
 8001e72:	d106      	bne.n	8001e82 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
          SPI_RESET_CRC(hspi);
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	4810      	ldr	r0, [pc, #64]	@ (8001eb8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x104>)
 8001e78:	4001      	ands	r1, r0
 8001e7a:	6019      	str	r1, [r3, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001e82:	235d      	movs	r3, #93	@ 0x5d
 8001e84:	2201      	movs	r2, #1
 8001e86:	4641      	mov	r1, r8
 8001e88:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8001e8e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001e90:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8001e92:	e7bc      	b.n	8001e0e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e94:	4642      	mov	r2, r8
 8001e96:	2180      	movs	r1, #128	@ 0x80
 8001e98:	6892      	ldr	r2, [r2, #8]
 8001e9a:	0209      	lsls	r1, r1, #8
 8001e9c:	428a      	cmp	r2, r1
 8001e9e:	d003      	beq.n	8001ea8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ea0:	2180      	movs	r1, #128	@ 0x80
 8001ea2:	00c9      	lsls	r1, r1, #3
 8001ea4:	428a      	cmp	r2, r1
 8001ea6:	d1df      	bne.n	8001e68 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb4>
          __HAL_SPI_DISABLE(hspi);
 8001ea8:	2140      	movs	r1, #64	@ 0x40
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	438a      	bics	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e7da      	b.n	8001e68 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb4>
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	20000668 	.word	0x20000668
 8001eb8:	ffffdfff 	.word	0xffffdfff

08001ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	46de      	mov	lr, fp
 8001ec0:	4657      	mov	r7, sl
 8001ec2:	464e      	mov	r6, r9
 8001ec4:	4645      	mov	r5, r8
 8001ec6:	b5e0      	push	{r5, r6, r7, lr}
 8001ec8:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8001eca:	466b      	mov	r3, sp
{
 8001ecc:	0017      	movs	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8001ece:	2200      	movs	r2, #0
{
 8001ed0:	000e      	movs	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 8001ed2:	71da      	strb	r2, [r3, #7]
{
 8001ed4:	0004      	movs	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001ed6:	f7fe ff23 	bl	8000d20 <HAL_GetTick>
 8001eda:	19f3      	adds	r3, r6, r7
 8001edc:	1a1d      	subs	r5, r3, r0
 8001ede:	469a      	mov	sl, r3
  tmp_tickstart = HAL_GetTick();
 8001ee0:	f7fe ff1e 	bl	8000d20 <HAL_GetTick>
  while ((hspi->Instance->SR & Fifo) != State)
 8001ee4:	21c0      	movs	r1, #192	@ 0xc0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8002018 <SPI_EndRxTxTransaction+0x15c>)
  tmp_tickstart = HAL_GetTick();
 8001ee8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001eea:	4699      	mov	r9, r3
 8001eec:	681b      	ldr	r3, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001eee:	0149      	lsls	r1, r1, #5
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001ef0:	009a      	lsls	r2, r3, #2
 8001ef2:	18d2      	adds	r2, r2, r3
 8001ef4:	00d3      	lsls	r3, r2, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	0d1b      	lsrs	r3, r3, #20
 8001efa:	436b      	muls	r3, r5
  while ((hspi->Instance->SR & Fifo) != State)
 8001efc:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001efe:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8001f00:	1c73      	adds	r3, r6, #1
 8001f02:	d000      	beq.n	8001f06 <SPI_EndRxTxTransaction+0x4a>
 8001f04:	e070      	b.n	8001fe8 <SPI_EndRxTxTransaction+0x12c>
 8001f06:	6893      	ldr	r3, [r2, #8]
 8001f08:	420b      	tst	r3, r1
 8001f0a:	d1fc      	bne.n	8001f06 <SPI_EndRxTxTransaction+0x4a>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f0c:	f7fe ff08 	bl	8000d20 <HAL_GetTick>
 8001f10:	4653      	mov	r3, sl
 8001f12:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8001f14:	f7fe ff04 	bl	8000d20 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f18:	464b      	mov	r3, r9
 8001f1a:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 8001f1c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f1e:	015b      	lsls	r3, r3, #5
 8001f20:	0d1b      	lsrs	r3, r3, #20
 8001f22:	436b      	muls	r3, r5
 8001f24:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f26:	2380      	movs	r3, #128	@ 0x80
 8001f28:	6822      	ldr	r2, [r4, #0]
 8001f2a:	4699      	mov	r9, r3
 8001f2c:	1c73      	adds	r3, r6, #1
 8001f2e:	d120      	bne.n	8001f72 <SPI_EndRxTxTransaction+0xb6>
 8001f30:	2180      	movs	r1, #128	@ 0x80
 8001f32:	6893      	ldr	r3, [r2, #8]
 8001f34:	4219      	tst	r1, r3
 8001f36:	d1fc      	bne.n	8001f32 <SPI_EndRxTxTransaction+0x76>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f38:	003a      	movs	r2, r7
 8001f3a:	0031      	movs	r1, r6
 8001f3c:	0020      	movs	r0, r4
 8001f3e:	f7ff ff39 	bl	8001db4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001f42:	2800      	cmp	r0, #0
 8001f44:	d11a      	bne.n	8001f7c <SPI_EndRxTxTransaction+0xc0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001f46:	b005      	add	sp, #20
 8001f48:	bcf0      	pop	{r4, r5, r6, r7}
 8001f4a:	46bb      	mov	fp, r7
 8001f4c:	46b2      	mov	sl, r6
 8001f4e:	46a9      	mov	r9, r5
 8001f50:	46a0      	mov	r8, r4
 8001f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f54:	f7fe fee4 	bl	8000d20 <HAL_GetTick>
 8001f58:	4643      	mov	r3, r8
 8001f5a:	1ac0      	subs	r0, r0, r3
 8001f5c:	4285      	cmp	r5, r0
 8001f5e:	d913      	bls.n	8001f88 <SPI_EndRxTxTransaction+0xcc>
      if (count == 0U)
 8001f60:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	4193      	sbcs	r3, r2
 8001f66:	425b      	negs	r3, r3
 8001f68:	401d      	ands	r5, r3
      count--;
 8001f6a:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f6c:	6822      	ldr	r2, [r4, #0]
      count--;
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f72:	6893      	ldr	r3, [r2, #8]
 8001f74:	464a      	mov	r2, r9
 8001f76:	421a      	tst	r2, r3
 8001f78:	d1ec      	bne.n	8001f54 <SPI_EndRxTxTransaction+0x98>
 8001f7a:	e7dd      	b.n	8001f38 <SPI_EndRxTxTransaction+0x7c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001f80:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f82:	4313      	orrs	r3, r2
 8001f84:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001f86:	e7de      	b.n	8001f46 <SPI_EndRxTxTransaction+0x8a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f88:	21e0      	movs	r1, #224	@ 0xe0
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	438a      	bics	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f92:	2282      	movs	r2, #130	@ 0x82
 8001f94:	6861      	ldr	r1, [r4, #4]
 8001f96:	0052      	lsls	r2, r2, #1
 8001f98:	4291      	cmp	r1, r2
 8001f9a:	d017      	beq.n	8001fcc <SPI_EndRxTxTransaction+0x110>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001fa0:	0189      	lsls	r1, r1, #6
 8001fa2:	428a      	cmp	r2, r1
 8001fa4:	d106      	bne.n	8001fb4 <SPI_EndRxTxTransaction+0xf8>
          SPI_RESET_CRC(hspi);
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	481c      	ldr	r0, [pc, #112]	@ (800201c <SPI_EndRxTxTransaction+0x160>)
 8001faa:	4001      	ands	r1, r0
 8001fac:	6019      	str	r1, [r3, #0]
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001fb4:	235d      	movs	r3, #93	@ 0x5d
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hspi);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001fc2:	3220      	adds	r2, #32
 8001fc4:	4313      	orrs	r3, r2
    return HAL_TIMEOUT;
 8001fc6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc8:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001fca:	e7bc      	b.n	8001f46 <SPI_EndRxTxTransaction+0x8a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	68a2      	ldr	r2, [r4, #8]
 8001fd0:	0209      	lsls	r1, r1, #8
 8001fd2:	428a      	cmp	r2, r1
 8001fd4:	d003      	beq.n	8001fde <SPI_EndRxTxTransaction+0x122>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	00c9      	lsls	r1, r1, #3
 8001fda:	428a      	cmp	r2, r1
 8001fdc:	d1de      	bne.n	8001f9c <SPI_EndRxTxTransaction+0xe0>
          __HAL_SPI_DISABLE(hspi);
 8001fde:	2140      	movs	r1, #64	@ 0x40
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	438a      	bics	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e7d9      	b.n	8001f9c <SPI_EndRxTxTransaction+0xe0>
  while ((hspi->Instance->SR & Fifo) != State)
 8001fe8:	23c0      	movs	r3, #192	@ 0xc0
 8001fea:	015b      	lsls	r3, r3, #5
 8001fec:	469b      	mov	fp, r3
 8001fee:	e00e      	b.n	800200e <SPI_EndRxTxTransaction+0x152>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ff0:	f7fe fe96 	bl	8000d20 <HAL_GetTick>
 8001ff4:	4643      	mov	r3, r8
 8001ff6:	1ac0      	subs	r0, r0, r3
 8001ff8:	4285      	cmp	r5, r0
 8001ffa:	d9c5      	bls.n	8001f88 <SPI_EndRxTxTransaction+0xcc>
      if (count == 0U)
 8001ffc:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	4193      	sbcs	r3, r2
 8002002:	425b      	negs	r3, r3
 8002004:	401d      	ands	r5, r3
      count--;
 8002006:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8002008:	6822      	ldr	r2, [r4, #0]
      count--;
 800200a:	3b01      	subs	r3, #1
 800200c:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800200e:	6893      	ldr	r3, [r2, #8]
 8002010:	465a      	mov	r2, fp
 8002012:	4213      	tst	r3, r2
 8002014:	d1ec      	bne.n	8001ff0 <SPI_EndRxTxTransaction+0x134>
 8002016:	e779      	b.n	8001f0c <SPI_EndRxTxTransaction+0x50>
 8002018:	20000668 	.word	0x20000668
 800201c:	ffffdfff 	.word	0xffffdfff

08002020 <HAL_SPI_Init>:
{
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	46de      	mov	lr, fp
 8002024:	4657      	mov	r7, sl
 8002026:	464e      	mov	r6, r9
 8002028:	4645      	mov	r5, r8
 800202a:	0004      	movs	r4, r0
 800202c:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 800202e:	2800      	cmp	r0, #0
 8002030:	d100      	bne.n	8002034 <HAL_SPI_Init+0x14>
 8002032:	e093      	b.n	800215c <HAL_SPI_Init+0x13c>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002034:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8002036:	2d00      	cmp	r5, #0
 8002038:	d069      	beq.n	800210e <HAL_SPI_Init+0xee>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800203e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002044:	335d      	adds	r3, #93	@ 0x5d
 8002046:	5ce3      	ldrb	r3, [r4, r3]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d06c      	beq.n	8002128 <HAL_SPI_Init+0x108>
  hspi->State = HAL_SPI_STATE_BUSY;
 800204e:	235d      	movs	r3, #93	@ 0x5d
 8002050:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8002052:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8002054:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8002056:	6822      	ldr	r2, [r4, #0]
 8002058:	6813      	ldr	r3, [r2, #0]
 800205a:	438b      	bics	r3, r1
 800205c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800205e:	23e0      	movs	r3, #224	@ 0xe0
 8002060:	68e1      	ldr	r1, [r4, #12]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4299      	cmp	r1, r3
 8002066:	d866      	bhi.n	8002136 <HAL_SPI_Init+0x116>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002068:	d000      	beq.n	800206c <HAL_SPI_Init+0x4c>
 800206a:	e070      	b.n	800214e <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002078:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800207a:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800207c:	2682      	movs	r6, #130	@ 0x82
 800207e:	2784      	movs	r7, #132	@ 0x84
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	0076      	lsls	r6, r6, #1
 8002084:	4033      	ands	r3, r6
 8002086:	68a6      	ldr	r6, [r4, #8]
 8002088:	023f      	lsls	r7, r7, #8
 800208a:	403e      	ands	r6, r7
 800208c:	2702      	movs	r7, #2
 800208e:	4333      	orrs	r3, r6
 8002090:	6926      	ldr	r6, [r4, #16]
 8002092:	69a0      	ldr	r0, [r4, #24]
 8002094:	403e      	ands	r6, r7
 8002096:	4333      	orrs	r3, r6
 8002098:	2601      	movs	r6, #1
 800209a:	6967      	ldr	r7, [r4, #20]
 800209c:	46b2      	mov	sl, r6
 800209e:	4037      	ands	r7, r6
 80020a0:	433b      	orrs	r3, r7
 80020a2:	2780      	movs	r7, #128	@ 0x80
 80020a4:	00bf      	lsls	r7, r7, #2
 80020a6:	4007      	ands	r7, r0
 80020a8:	433b      	orrs	r3, r7
 80020aa:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020ac:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020ae:	46b8      	mov	r8, r7
 80020b0:	2738      	movs	r7, #56	@ 0x38
 80020b2:	46b9      	mov	r9, r7
 80020b4:	4647      	mov	r7, r8
 80020b6:	464e      	mov	r6, r9
 80020b8:	4037      	ands	r7, r6
 80020ba:	6a26      	ldr	r6, [r4, #32]
 80020bc:	433b      	orrs	r3, r7
 80020be:	46b0      	mov	r8, r6
 80020c0:	2680      	movs	r6, #128	@ 0x80
 80020c2:	4647      	mov	r7, r8
 80020c4:	4037      	ands	r7, r6
 80020c6:	4666      	mov	r6, ip
 80020c8:	433b      	orrs	r3, r7
 80020ca:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020cc:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020ce:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80020d2:	4033      	ands	r3, r6
 80020d4:	26f0      	movs	r6, #240	@ 0xf0
 80020d6:	0136      	lsls	r6, r6, #4
 80020d8:	4031      	ands	r1, r6
 80020da:	4319      	orrs	r1, r3
 80020dc:	2304      	movs	r3, #4
 80020de:	4003      	ands	r3, r0
 80020e0:	4319      	orrs	r1, r3
 80020e2:	2310      	movs	r3, #16
 80020e4:	402b      	ands	r3, r5
 80020e6:	4319      	orrs	r1, r3
 80020e8:	465b      	mov	r3, fp
 80020ea:	4319      	orrs	r1, r3
 80020ec:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ee:	69d3      	ldr	r3, [r2, #28]
 80020f0:	491d      	ldr	r1, [pc, #116]	@ (8002168 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 80020f2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020f4:	400b      	ands	r3, r1
 80020f6:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020f8:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80020fa:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020fc:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020fe:	335d      	adds	r3, #93	@ 0x5d
 8002100:	54e2      	strb	r2, [r4, r3]
}
 8002102:	bcf0      	pop	{r4, r5, r6, r7}
 8002104:	46bb      	mov	fp, r7
 8002106:	46b2      	mov	sl, r6
 8002108:	46a9      	mov	r9, r5
 800210a:	46a0      	mov	r8, r4
 800210c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800210e:	2382      	movs	r3, #130	@ 0x82
 8002110:	6842      	ldr	r2, [r0, #4]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	429a      	cmp	r2, r3
 8002116:	d093      	beq.n	8002040 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002118:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800211a:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211c:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800211e:	335d      	adds	r3, #93	@ 0x5d
 8002120:	5ce3      	ldrb	r3, [r4, r3]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d192      	bne.n	800204e <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8002128:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800212a:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800212c:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 800212e:	f7fe fc1d 	bl	800096c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002132:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8002134:	e78b      	b.n	800204e <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002136:	23f0      	movs	r3, #240	@ 0xf0
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4299      	cmp	r1, r3
 800213c:	d110      	bne.n	8002160 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002142:	019b      	lsls	r3, r3, #6
 8002144:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002146:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002148:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800214a:	469b      	mov	fp, r3
 800214c:	e796      	b.n	800207c <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800214e:	2380      	movs	r3, #128	@ 0x80
 8002150:	015b      	lsls	r3, r3, #5
 8002152:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	469c      	mov	ip, r3
 8002158:	62a3      	str	r3, [r4, #40]	@ 0x28
 800215a:	e78f      	b.n	800207c <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 800215c:	2001      	movs	r0, #1
 800215e:	e7d0      	b.n	8002102 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002160:	2300      	movs	r3, #0
 8002162:	469b      	mov	fp, r3
 8002164:	e7f6      	b.n	8002154 <HAL_SPI_Init+0x134>
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	fffff7ff 	.word	0xfffff7ff

0800216c <HAL_SPI_Transmit>:
{
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	46ce      	mov	lr, r9
 8002170:	4647      	mov	r7, r8
 8002172:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8002174:	235c      	movs	r3, #92	@ 0x5c
{
 8002176:	b580      	push	{r7, lr}
 8002178:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800217a:	5cc2      	ldrb	r2, [r0, r3]
{
 800217c:	0004      	movs	r4, r0
 800217e:	000d      	movs	r5, r1
 8002180:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8002182:	2a01      	cmp	r2, #1
 8002184:	d100      	bne.n	8002188 <HAL_SPI_Transmit+0x1c>
 8002186:	e07b      	b.n	8002280 <HAL_SPI_Transmit+0x114>
 8002188:	2201      	movs	r2, #1
 800218a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800218c:	f7fe fdc8 	bl	8000d20 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002190:	225d      	movs	r2, #93	@ 0x5d
 8002192:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 8002194:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002196:	b2df      	uxtb	r7, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d009      	beq.n	80021b0 <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 800219c:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 800219e:	235c      	movs	r3, #92	@ 0x5c
 80021a0:	2200      	movs	r2, #0
 80021a2:	54e2      	strb	r2, [r4, r3]
}
 80021a4:	0038      	movs	r0, r7
 80021a6:	b003      	add	sp, #12
 80021a8:	bcc0      	pop	{r6, r7}
 80021aa:	46b9      	mov	r9, r7
 80021ac:	46b0      	mov	r8, r6
 80021ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 80021b0:	2d00      	cmp	r5, #0
 80021b2:	d0f4      	beq.n	800219e <HAL_SPI_Transmit+0x32>
 80021b4:	464b      	mov	r3, r9
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f1      	beq.n	800219e <HAL_SPI_Transmit+0x32>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021ba:	2303      	movs	r3, #3
 80021bc:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021be:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 80021c0:	464a      	mov	r2, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 80021c4:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80021c6:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 80021c8:	2244      	movs	r2, #68	@ 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021ca:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021cc:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80021ce:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80021d0:	3202      	adds	r2, #2
 80021d2:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80021d4:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80021d6:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d8:	2380      	movs	r3, #128	@ 0x80
    __HAL_SPI_DISABLE(hspi);
 80021da:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021dc:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80021de:	0002      	movs	r2, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	4299      	cmp	r1, r3
 80021e4:	d100      	bne.n	80021e8 <HAL_SPI_Transmit+0x7c>
 80021e6:	e078      	b.n	80022da <HAL_SPI_Transmit+0x16e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021e8:	2340      	movs	r3, #64	@ 0x40
 80021ea:	6801      	ldr	r1, [r0, #0]
 80021ec:	420b      	tst	r3, r1
 80021ee:	d102      	bne.n	80021f6 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 80021f0:	6801      	ldr	r1, [r0, #0]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	6003      	str	r3, [r0, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f6:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021f8:	68e1      	ldr	r1, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021fa:	469c      	mov	ip, r3
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021fc:	23e0      	movs	r3, #224	@ 0xe0
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4299      	cmp	r1, r3
 8002202:	d93f      	bls.n	8002284 <HAL_SPI_Transmit+0x118>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002204:	4663      	mov	r3, ip
 8002206:	2b00      	cmp	r3, #0
 8002208:	d100      	bne.n	800220c <HAL_SPI_Transmit+0xa0>
 800220a:	e0ae      	b.n	800236a <HAL_SPI_Transmit+0x1fe>
 800220c:	464b      	mov	r3, r9
 800220e:	2b01      	cmp	r3, #1
 8002210:	d100      	bne.n	8002214 <HAL_SPI_Transmit+0xa8>
 8002212:	e0aa      	b.n	800236a <HAL_SPI_Transmit+0x1fe>
    while (hspi->TxXferCount > 0U)
 8002214:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_SPI_Transmit+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800221a:	2502      	movs	r5, #2
 800221c:	1c73      	adds	r3, r6, #1
 800221e:	d000      	beq.n	8002222 <HAL_SPI_Transmit+0xb6>
 8002220:	e08f      	b.n	8002342 <HAL_SPI_Transmit+0x1d6>
 8002222:	2302      	movs	r3, #2
 8002224:	4699      	mov	r9, r3
 8002226:	464a      	mov	r2, r9
 8002228:	6883      	ldr	r3, [r0, #8]
 800222a:	421a      	tst	r2, r3
 800222c:	d100      	bne.n	8002230 <HAL_SPI_Transmit+0xc4>
 800222e:	e0a5      	b.n	800237c <HAL_SPI_Transmit+0x210>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002230:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002232:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002234:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002236:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 8002238:	8fe5      	ldrh	r5, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800223a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800223c:	3d01      	subs	r5, #1
 800223e:	b2ad      	uxth	r5, r5
 8002240:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8002242:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ee      	bne.n	8002226 <HAL_SPI_Transmit+0xba>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002248:	4642      	mov	r2, r8
 800224a:	0031      	movs	r1, r6
 800224c:	0020      	movs	r0, r4
 800224e:	f7ff fe35 	bl	8001ebc <SPI_EndRxTxTransaction>
 8002252:	2800      	cmp	r0, #0
 8002254:	d001      	beq.n	800225a <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002256:	2320      	movs	r3, #32
 8002258:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800225a:	68a3      	ldr	r3, [r4, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_SPI_Transmit+0x102>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	9201      	str	r2, [sp, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800226e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002270:	2b00      	cmp	r3, #0
 8002272:	d000      	beq.n	8002276 <HAL_SPI_Transmit+0x10a>
 8002274:	e793      	b.n	800219e <HAL_SPI_Transmit+0x32>
    hspi->State = HAL_SPI_STATE_READY;
 8002276:	2201      	movs	r2, #1
 8002278:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 800227a:	2700      	movs	r7, #0
    hspi->State = HAL_SPI_STATE_READY;
 800227c:	54e2      	strb	r2, [r4, r3]
 800227e:	e78e      	b.n	800219e <HAL_SPI_Transmit+0x32>
  __HAL_LOCK(hspi);
 8002280:	2702      	movs	r7, #2
 8002282:	e78f      	b.n	80021a4 <HAL_SPI_Transmit+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002284:	4663      	mov	r3, ip
 8002286:	2b00      	cmp	r3, #0
 8002288:	d065      	beq.n	8002356 <HAL_SPI_Transmit+0x1ea>
 800228a:	464b      	mov	r3, r9
 800228c:	2b01      	cmp	r3, #1
 800228e:	d062      	beq.n	8002356 <HAL_SPI_Transmit+0x1ea>
    while (hspi->TxXferCount > 0U)
 8002290:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0d8      	beq.n	8002248 <HAL_SPI_Transmit+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002296:	2502      	movs	r5, #2
 8002298:	1c73      	adds	r3, r6, #1
 800229a:	d135      	bne.n	8002308 <HAL_SPI_Transmit+0x19c>
 800229c:	2302      	movs	r3, #2
 800229e:	4699      	mov	r9, r3
 80022a0:	4649      	mov	r1, r9
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4211      	tst	r1, r2
 80022a8:	d011      	beq.n	80022ce <HAL_SPI_Transmit+0x162>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022aa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80022b0:	8fe5      	ldrh	r5, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80022b4:	3d01      	subs	r5, #1
 80022b6:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022b8:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 80022ba:	87e5      	strh	r5, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022bc:	63a3      	str	r3, [r4, #56]	@ 0x38
    while (hspi->TxXferCount > 0U)
 80022be:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0c1      	beq.n	8002248 <HAL_SPI_Transmit+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022c4:	4649      	mov	r1, r9
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	4211      	tst	r1, r2
 80022cc:	d1ed      	bne.n	80022aa <HAL_SPI_Transmit+0x13e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ce:	f7fe fd27 	bl	8000d20 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80022d2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e3      	bne.n	80022a0 <HAL_SPI_Transmit+0x134>
 80022d8:	e7b6      	b.n	8002248 <HAL_SPI_Transmit+0xdc>
    __HAL_SPI_DISABLE(hspi);
 80022da:	2140      	movs	r1, #64	@ 0x40
 80022dc:	6803      	ldr	r3, [r0, #0]
 80022de:	438b      	bics	r3, r1
 80022e0:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	6801      	ldr	r1, [r0, #0]
 80022e6:	01db      	lsls	r3, r3, #7
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6003      	str	r3, [r0, #0]
 80022ec:	e77c      	b.n	80021e8 <HAL_SPI_Transmit+0x7c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022ee:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80022f6:	3301      	adds	r3, #1
 80022f8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80022fa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29b      	uxth	r3, r3
 8002300:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8002302:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002304:	2b00      	cmp	r3, #0
 8002306:	d09f      	beq.n	8002248 <HAL_SPI_Transmit+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	4215      	tst	r5, r2
 800230e:	d1ee      	bne.n	80022ee <HAL_SPI_Transmit+0x182>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002310:	f7fe fd06 	bl	8000d20 <HAL_GetTick>
 8002314:	4643      	mov	r3, r8
 8002316:	1ac0      	subs	r0, r0, r3
 8002318:	42b0      	cmp	r0, r6
 800231a:	d3f2      	bcc.n	8002302 <HAL_SPI_Transmit+0x196>
          hspi->State = HAL_SPI_STATE_READY;
 800231c:	235d      	movs	r3, #93	@ 0x5d
 800231e:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8002320:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8002322:	54e2      	strb	r2, [r4, r3]
          goto error;
 8002324:	e73b      	b.n	800219e <HAL_SPI_Transmit+0x32>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002326:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002328:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800232a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800232e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002330:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002332:	3b01      	subs	r3, #1
 8002334:	b29b      	uxth	r3, r3
 8002336:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8002338:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800233a:	2b00      	cmp	r3, #0
 800233c:	d100      	bne.n	8002340 <HAL_SPI_Transmit+0x1d4>
 800233e:	e783      	b.n	8002248 <HAL_SPI_Transmit+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002340:	6822      	ldr	r2, [r4, #0]
 8002342:	6893      	ldr	r3, [r2, #8]
 8002344:	421d      	tst	r5, r3
 8002346:	d1ee      	bne.n	8002326 <HAL_SPI_Transmit+0x1ba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002348:	f7fe fcea 	bl	8000d20 <HAL_GetTick>
 800234c:	4643      	mov	r3, r8
 800234e:	1ac0      	subs	r0, r0, r3
 8002350:	42b0      	cmp	r0, r6
 8002352:	d3f1      	bcc.n	8002338 <HAL_SPI_Transmit+0x1cc>
 8002354:	e7e2      	b.n	800231c <HAL_SPI_Transmit+0x1b0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002356:	782b      	ldrb	r3, [r5, #0]
 8002358:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800235a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800235c:	3301      	adds	r3, #1
 800235e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002360:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002362:	3b01      	subs	r3, #1
 8002364:	b29b      	uxth	r3, r3
 8002366:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002368:	e792      	b.n	8002290 <HAL_SPI_Transmit+0x124>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800236a:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800236c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800236e:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8002370:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002372:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002374:	3b01      	subs	r3, #1
 8002376:	b29b      	uxth	r3, r3
 8002378:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800237a:	e74b      	b.n	8002214 <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800237c:	f7fe fcd0 	bl	8000d20 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8002380:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <HAL_SPI_Transmit+0x21c>
 8002386:	e75f      	b.n	8002248 <HAL_SPI_Transmit+0xdc>
 8002388:	6820      	ldr	r0, [r4, #0]
 800238a:	e74c      	b.n	8002226 <HAL_SPI_Transmit+0xba>

0800238c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002390:	d063      	beq.n	800245a <HAL_TIM_Base_Init+0xce>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002392:	233d      	movs	r3, #61	@ 0x3d
 8002394:	5cc3      	ldrb	r3, [r0, r3]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d050      	beq.n	800243e <HAL_TIM_Base_Init+0xb2>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	233d      	movs	r3, #61	@ 0x3d
 800239e:	2202      	movs	r2, #2
 80023a0:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a2:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023a4:	4e33      	ldr	r6, [pc, #204]	@ (8002474 <HAL_TIM_Base_Init+0xe8>)
  tmpcr1 = TIMx->CR1;
 80023a6:	681a      	ldr	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023aa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ac:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ae:	42b3      	cmp	r3, r6
 80023b0:	d012      	beq.n	80023d8 <HAL_TIM_Base_Init+0x4c>
 80023b2:	4e31      	ldr	r6, [pc, #196]	@ (8002478 <HAL_TIM_Base_Init+0xec>)
 80023b4:	42b3      	cmp	r3, r6
 80023b6:	d047      	beq.n	8002448 <HAL_TIM_Base_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b8:	4e30      	ldr	r6, [pc, #192]	@ (800247c <HAL_TIM_Base_Init+0xf0>)
 80023ba:	42b3      	cmp	r3, r6
 80023bc:	d048      	beq.n	8002450 <HAL_TIM_Base_Init+0xc4>
 80023be:	4e30      	ldr	r6, [pc, #192]	@ (8002480 <HAL_TIM_Base_Init+0xf4>)
 80023c0:	42b3      	cmp	r3, r6
 80023c2:	d00d      	beq.n	80023e0 <HAL_TIM_Base_Init+0x54>
 80023c4:	4e2f      	ldr	r6, [pc, #188]	@ (8002484 <HAL_TIM_Base_Init+0xf8>)
 80023c6:	42b3      	cmp	r3, r6
 80023c8:	d049      	beq.n	800245e <HAL_TIM_Base_Init+0xd2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ca:	2680      	movs	r6, #128	@ 0x80
 80023cc:	43b2      	bics	r2, r6
 80023ce:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80023d0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80023d4:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d6:	e00f      	b.n	80023f8 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023d8:	2670      	movs	r6, #112	@ 0x70
 80023da:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80023dc:	68a6      	ldr	r6, [r4, #8]
 80023de:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e0:	4e29      	ldr	r6, [pc, #164]	@ (8002488 <HAL_TIM_Base_Init+0xfc>)
 80023e2:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e4:	6926      	ldr	r6, [r4, #16]
 80023e6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e8:	2680      	movs	r6, #128	@ 0x80
 80023ea:	43b2      	bics	r2, r6
 80023ec:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80023ee:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80023f2:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f4:	6962      	ldr	r2, [r4, #20]
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f8:	2201      	movs	r2, #1
 80023fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023fc:	6919      	ldr	r1, [r3, #16]
 80023fe:	420a      	tst	r2, r1
 8002400:	d002      	beq.n	8002408 <HAL_TIM_Base_Init+0x7c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002402:	6919      	ldr	r1, [r3, #16]
 8002404:	4391      	bics	r1, r2
 8002406:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002408:	2301      	movs	r3, #1
 800240a:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800240c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	3a0a      	subs	r2, #10
 8002412:	54a3      	strb	r3, [r4, r2]
 8002414:	3201      	adds	r2, #1
 8002416:	54a3      	strb	r3, [r4, r2]
 8002418:	3201      	adds	r2, #1
 800241a:	54a3      	strb	r3, [r4, r2]
 800241c:	3201      	adds	r2, #1
 800241e:	54a3      	strb	r3, [r4, r2]
 8002420:	3201      	adds	r2, #1
 8002422:	54a3      	strb	r3, [r4, r2]
 8002424:	3201      	adds	r2, #1
 8002426:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	3201      	adds	r2, #1
 800242a:	54a3      	strb	r3, [r4, r2]
 800242c:	3201      	adds	r2, #1
 800242e:	54a3      	strb	r3, [r4, r2]
 8002430:	3201      	adds	r2, #1
 8002432:	54a3      	strb	r3, [r4, r2]
 8002434:	3201      	adds	r2, #1
 8002436:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002438:	3a0a      	subs	r2, #10
 800243a:	54a3      	strb	r3, [r4, r2]
}
 800243c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800243e:	333c      	adds	r3, #60	@ 0x3c
 8002440:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002442:	f7fe fac1 	bl	80009c8 <HAL_TIM_Base_MspInit>
 8002446:	e7a9      	b.n	800239c <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002448:	2670      	movs	r6, #112	@ 0x70
 800244a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 800244c:	68a6      	ldr	r6, [r4, #8]
 800244e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8002450:	4e0d      	ldr	r6, [pc, #52]	@ (8002488 <HAL_TIM_Base_Init+0xfc>)
 8002452:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002454:	6926      	ldr	r6, [r4, #16]
 8002456:	4332      	orrs	r2, r6
 8002458:	e7b7      	b.n	80023ca <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 800245a:	2001      	movs	r0, #1
 800245c:	e7ee      	b.n	800243c <HAL_TIM_Base_Init+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 800245e:	4e0a      	ldr	r6, [pc, #40]	@ (8002488 <HAL_TIM_Base_Init+0xfc>)
 8002460:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002462:	6926      	ldr	r6, [r4, #16]
 8002464:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002466:	2680      	movs	r6, #128	@ 0x80
 8002468:	43b2      	bics	r2, r6
 800246a:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 800246c:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800246e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002470:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002472:	e7bf      	b.n	80023f4 <HAL_TIM_Base_Init+0x68>
 8002474:	40012c00 	.word	0x40012c00
 8002478:	40000400 	.word	0x40000400
 800247c:	40002000 	.word	0x40002000
 8002480:	40014400 	.word	0x40014400
 8002484:	40014800 	.word	0x40014800
 8002488:	fffffcff 	.word	0xfffffcff

0800248c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800248c:	213d      	movs	r1, #61	@ 0x3d
{
 800248e:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8002490:	5c42      	ldrb	r2, [r0, r1]
{
 8002492:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8002494:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8002496:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002498:	2a01      	cmp	r2, #1
 800249a:	d10f      	bne.n	80024bc <HAL_TIM_Base_Start_IT+0x30>
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	3201      	adds	r2, #1
 800249e:	545a      	strb	r2, [r3, r1]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	4322      	orrs	r2, r4
 80024a6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a8:	4a0c      	ldr	r2, [pc, #48]	@ (80024dc <HAL_TIM_Base_Start_IT+0x50>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x32>
 80024ae:	4a0c      	ldr	r2, [pc, #48]	@ (80024e0 <HAL_TIM_Base_Start_IT+0x54>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d004      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4322      	orrs	r2, r4
 80024b8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80024ba:	2000      	movs	r0, #0
}
 80024bc:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4908      	ldr	r1, [pc, #32]	@ (80024e4 <HAL_TIM_Base_Start_IT+0x58>)
 80024c2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c4:	2a06      	cmp	r2, #6
 80024c6:	d0f8      	beq.n	80024ba <HAL_TIM_Base_Start_IT+0x2e>
 80024c8:	3907      	subs	r1, #7
 80024ca:	428a      	cmp	r2, r1
 80024cc:	d0f5      	beq.n	80024ba <HAL_TIM_Base_Start_IT+0x2e>
      __HAL_TIM_ENABLE(htim);
 80024ce:	2101      	movs	r1, #1
 80024d0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80024d2:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e7f0      	b.n	80024bc <HAL_TIM_Base_Start_IT+0x30>
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40000400 	.word	0x40000400
 80024e4:	00010007 	.word	0x00010007

080024e8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80024e8:	233c      	movs	r3, #60	@ 0x3c
{
 80024ea:	b570      	push	{r4, r5, r6, lr}
 80024ec:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80024ee:	5cc0      	ldrb	r0, [r0, r3]
 80024f0:	2801      	cmp	r0, #1
 80024f2:	d100      	bne.n	80024f6 <HAL_TIM_ConfigClockSource+0xe>
 80024f4:	e073      	b.n	80025de <HAL_TIM_ConfigClockSource+0xf6>
 80024f6:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80024fa:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	3301      	adds	r3, #1
 80024fe:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002500:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002502:	4d51      	ldr	r5, [pc, #324]	@ (8002648 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8002504:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002506:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002508:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800250a:	680b      	ldr	r3, [r1, #0]
 800250c:	2b60      	cmp	r3, #96	@ 0x60
 800250e:	d100      	bne.n	8002512 <HAL_TIM_ConfigClockSource+0x2a>
 8002510:	e067      	b.n	80025e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002512:	d81d      	bhi.n	8002550 <HAL_TIM_ConfigClockSource+0x68>
 8002514:	2b40      	cmp	r3, #64	@ 0x40
 8002516:	d100      	bne.n	800251a <HAL_TIM_ConfigClockSource+0x32>
 8002518:	e07d      	b.n	8002616 <HAL_TIM_ConfigClockSource+0x12e>
 800251a:	d93f      	bls.n	800259c <HAL_TIM_ConfigClockSource+0xb4>
 800251c:	2b50      	cmp	r3, #80	@ 0x50
 800251e:	d135      	bne.n	800258c <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 8002520:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002522:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002524:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002526:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002528:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800252a:	43a6      	bics	r6, r4
 800252c:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800252e:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002530:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002532:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002534:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002536:	240a      	movs	r4, #10
 8002538:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800253a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800253c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800253e:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002540:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002542:	4942      	ldr	r1, [pc, #264]	@ (800264c <HAL_TIM_ConfigClockSource+0x164>)
 8002544:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002546:	2157      	movs	r1, #87	@ 0x57
 8002548:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800254a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2000      	movs	r0, #0
 800254e:	e01e      	b.n	800258e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8002550:	2480      	movs	r4, #128	@ 0x80
 8002552:	0164      	lsls	r4, r4, #5
 8002554:	42a3      	cmp	r3, r4
 8002556:	d0f9      	beq.n	800254c <HAL_TIM_ConfigClockSource+0x64>
 8002558:	2480      	movs	r4, #128	@ 0x80
 800255a:	01a4      	lsls	r4, r4, #6
 800255c:	42a3      	cmp	r3, r4
 800255e:	d12b      	bne.n	80025b8 <HAL_TIM_ConfigClockSource+0xd0>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002560:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002562:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002564:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002566:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002568:	688b      	ldr	r3, [r1, #8]
 800256a:	68c9      	ldr	r1, [r1, #12]
 800256c:	432b      	orrs	r3, r5
 800256e:	0209      	lsls	r1, r1, #8
 8002570:	430b      	orrs	r3, r1
 8002572:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002574:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002576:	2380      	movs	r3, #128	@ 0x80
 8002578:	6881      	ldr	r1, [r0, #8]
 800257a:	01db      	lsls	r3, r3, #7
 800257c:	430b      	orrs	r3, r1
 800257e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002580:	2000      	movs	r0, #0
 8002582:	e004      	b.n	800258e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8002584:	2110      	movs	r1, #16
 8002586:	001c      	movs	r4, r3
 8002588:	438c      	bics	r4, r1
 800258a:	d00c      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 800258c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800258e:	233d      	movs	r3, #61	@ 0x3d
 8002590:	2101      	movs	r1, #1
 8002592:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8002594:	2100      	movs	r1, #0
 8002596:	3b01      	subs	r3, #1
 8002598:	54d1      	strb	r1, [r2, r3]
}
 800259a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800259c:	2b20      	cmp	r3, #32
 800259e:	d002      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0xbe>
 80025a0:	d9f0      	bls.n	8002584 <HAL_TIM_ConfigClockSource+0x9c>
 80025a2:	2b30      	cmp	r3, #48	@ 0x30
 80025a4:	d1f2      	bne.n	800258c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 80025a6:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025a8:	4c28      	ldr	r4, [pc, #160]	@ (800264c <HAL_TIM_ConfigClockSource+0x164>)
 80025aa:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ac:	430b      	orrs	r3, r1
 80025ae:	2107      	movs	r1, #7
 80025b0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80025b2:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2000      	movs	r0, #0
 80025b6:	e7ea      	b.n	800258e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80025b8:	2b70      	cmp	r3, #112	@ 0x70
 80025ba:	d1e7      	bne.n	800258c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 80025bc:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025be:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025c0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c2:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025c4:	688b      	ldr	r3, [r1, #8]
 80025c6:	68c9      	ldr	r1, [r1, #12]
 80025c8:	432b      	orrs	r3, r5
 80025ca:	0209      	lsls	r1, r1, #8
 80025cc:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ce:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025d0:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80025d2:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80025d4:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d6:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80025d8:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2000      	movs	r0, #0
 80025dc:	e7d7      	b.n	800258e <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 80025de:	2002      	movs	r0, #2
 80025e0:	e7db      	b.n	800259a <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025e2:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 80025e4:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025e6:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80025e8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ea:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 80025ec:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ee:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f0:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f2:	4e18      	ldr	r6, [pc, #96]	@ (8002654 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025f4:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f6:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025f8:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025fa:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80025fc:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025fe:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002600:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8002602:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8002604:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002606:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002608:	4910      	ldr	r1, [pc, #64]	@ (800264c <HAL_TIM_ConfigClockSource+0x164>)
 800260a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800260c:	2167      	movs	r1, #103	@ 0x67
 800260e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002610:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2000      	movs	r0, #0
 8002614:	e7bb      	b.n	800258e <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8002616:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002618:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800261a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800261c:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800261e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002620:	43a6      	bics	r6, r4
 8002622:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002624:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002626:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002628:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800262a:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800262c:	240a      	movs	r4, #10
 800262e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8002630:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002632:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002634:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002636:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002638:	4904      	ldr	r1, [pc, #16]	@ (800264c <HAL_TIM_ConfigClockSource+0x164>)
 800263a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800263c:	2147      	movs	r1, #71	@ 0x47
 800263e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002640:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2000      	movs	r0, #0
 8002644:	e7a3      	b.n	800258e <HAL_TIM_ConfigClockSource+0xa6>
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	ffce0088 	.word	0xffce0088
 800264c:	ffcfff8f 	.word	0xffcfff8f
 8002650:	ffff00ff 	.word	0xffff00ff
 8002654:	ffff0fff 	.word	0xffff0fff

08002658 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8002658:	4770      	bx	lr
 800265a:	46c0      	nop			@ (mov r8, r8)

0800265c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800265c:	4770      	bx	lr
 800265e:	46c0      	nop			@ (mov r8, r8)

08002660 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8002660:	4770      	bx	lr
 8002662:	46c0      	nop			@ (mov r8, r8)

08002664 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002664:	4770      	bx	lr
 8002666:	46c0      	nop			@ (mov r8, r8)

08002668 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002668:	4770      	bx	lr
 800266a:	46c0      	nop			@ (mov r8, r8)

0800266c <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800266c:	2202      	movs	r2, #2
{
 800266e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002670:	6803      	ldr	r3, [r0, #0]
{
 8002672:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8002674:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002676:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002678:	4222      	tst	r2, r4
 800267a:	d001      	beq.n	8002680 <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800267c:	4232      	tst	r2, r6
 800267e:	d162      	bne.n	8002746 <HAL_TIM_IRQHandler+0xda>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002680:	2304      	movs	r3, #4
 8002682:	4223      	tst	r3, r4
 8002684:	d001      	beq.n	800268a <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002686:	4233      	tst	r3, r6
 8002688:	d149      	bne.n	800271e <HAL_TIM_IRQHandler+0xb2>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800268a:	2308      	movs	r3, #8
 800268c:	4223      	tst	r3, r4
 800268e:	d001      	beq.n	8002694 <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002690:	4233      	tst	r3, r6
 8002692:	d132      	bne.n	80026fa <HAL_TIM_IRQHandler+0x8e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002694:	2310      	movs	r3, #16
 8002696:	4223      	tst	r3, r4
 8002698:	d001      	beq.n	800269e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800269a:	4233      	tst	r3, r6
 800269c:	d119      	bne.n	80026d2 <HAL_TIM_IRQHandler+0x66>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800269e:	2301      	movs	r3, #1
 80026a0:	4223      	tst	r3, r4
 80026a2:	d001      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026a4:	4233      	tst	r3, r6
 80026a6:	d16a      	bne.n	800277e <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026a8:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026aa:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026ac:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026ae:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026b0:	4027      	ands	r7, r4
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026b2:	421c      	tst	r4, r3
 80026b4:	d056      	beq.n	8002764 <HAL_TIM_IRQHandler+0xf8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026b6:	0633      	lsls	r3, r6, #24
 80026b8:	d469      	bmi.n	800278e <HAL_TIM_IRQHandler+0x122>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026ba:	2340      	movs	r3, #64	@ 0x40
 80026bc:	4223      	tst	r3, r4
 80026be:	d002      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x5a>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026c0:	4233      	tst	r3, r6
 80026c2:	d000      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x5a>
 80026c4:	e073      	b.n	80027ae <HAL_TIM_IRQHandler+0x142>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026c6:	2320      	movs	r3, #32
 80026c8:	4223      	tst	r3, r4
 80026ca:	d001      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x64>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026cc:	4233      	tst	r3, r6
 80026ce:	d14e      	bne.n	800276e <HAL_TIM_IRQHandler+0x102>
}
 80026d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026d2:	2211      	movs	r2, #17
 80026d4:	682b      	ldr	r3, [r5, #0]
 80026d6:	4252      	negs	r2, r2
 80026d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026da:	3219      	adds	r2, #25
 80026dc:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	23c0      	movs	r3, #192	@ 0xc0
 80026e2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80026e4:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e6:	421a      	tst	r2, r3
 80026e8:	d172      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x164>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	f7ff ffb7 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ee:	0028      	movs	r0, r5
 80026f0:	f7ff ffb8 	bl	8002664 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f4:	2300      	movs	r3, #0
 80026f6:	772b      	strb	r3, [r5, #28]
 80026f8:	e7d1      	b.n	800269e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026fa:	2209      	movs	r2, #9
 80026fc:	682b      	ldr	r3, [r5, #0]
 80026fe:	4252      	negs	r2, r2
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002702:	320d      	adds	r2, #13
 8002704:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002706:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002708:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800270a:	079b      	lsls	r3, r3, #30
 800270c:	d15d      	bne.n	80027ca <HAL_TIM_IRQHandler+0x15e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	f7ff ffa5 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002712:	0028      	movs	r0, r5
 8002714:	f7ff ffa6 	bl	8002664 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002718:	2300      	movs	r3, #0
 800271a:	772b      	strb	r3, [r5, #28]
 800271c:	e7ba      	b.n	8002694 <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800271e:	2205      	movs	r2, #5
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	4252      	negs	r2, r2
 8002724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002726:	3207      	adds	r2, #7
 8002728:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	23c0      	movs	r3, #192	@ 0xc0
 800272e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002730:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002732:	421a      	tst	r2, r3
 8002734:	d146      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	f7ff ff91 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273a:	0028      	movs	r0, r5
 800273c:	f7ff ff92 	bl	8002664 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002740:	2300      	movs	r3, #0
 8002742:	772b      	strb	r3, [r5, #28]
 8002744:	e7a1      	b.n	800268a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002746:	3a05      	subs	r2, #5
 8002748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800274a:	3204      	adds	r2, #4
 800274c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	079b      	lsls	r3, r3, #30
 8002752:	d134      	bne.n	80027be <HAL_TIM_IRQHandler+0x152>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002754:	f7ff ff82 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	0028      	movs	r0, r5
 800275a:	f7ff ff83 	bl	8002664 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	2300      	movs	r3, #0
 8002760:	772b      	strb	r3, [r5, #28]
 8002762:	e78d      	b.n	8002680 <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002764:	2f00      	cmp	r7, #0
 8002766:	d0a8      	beq.n	80026ba <HAL_TIM_IRQHandler+0x4e>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002768:	0633      	lsls	r3, r6, #24
 800276a:	d5a6      	bpl.n	80026ba <HAL_TIM_IRQHandler+0x4e>
 800276c:	e018      	b.n	80027a0 <HAL_TIM_IRQHandler+0x134>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800276e:	2221      	movs	r2, #33	@ 0x21
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8002774:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002776:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002778:	f000 f866 	bl	8002848 <HAL_TIMEx_CommutCallback>
}
 800277c:	e7a8      	b.n	80026d0 <HAL_TIM_IRQHandler+0x64>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800277e:	2202      	movs	r2, #2
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8002784:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002786:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002788:	f7ff ff66 	bl	8002658 <HAL_TIM_PeriodElapsedCallback>
 800278c:	e78c      	b.n	80026a8 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800278e:	682b      	ldr	r3, [r5, #0]
 8002790:	4a11      	ldr	r2, [pc, #68]	@ (80027d8 <HAL_TIM_IRQHandler+0x16c>)
      HAL_TIMEx_BreakCallback(htim);
 8002792:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002794:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002796:	f000 f859 	bl	800284c <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800279a:	2f00      	cmp	r7, #0
 800279c:	d100      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x134>
 800279e:	e78c      	b.n	80026ba <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027a0:	682b      	ldr	r3, [r5, #0]
 80027a2:	4a0e      	ldr	r2, [pc, #56]	@ (80027dc <HAL_TIM_IRQHandler+0x170>)
      HAL_TIMEx_Break2Callback(htim);
 80027a4:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80027a8:	f000 f852 	bl	8002850 <HAL_TIMEx_Break2Callback>
 80027ac:	e785      	b.n	80026ba <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027ae:	2241      	movs	r2, #65	@ 0x41
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 80027b4:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80027b8:	f7ff ff56 	bl	8002668 <HAL_TIM_TriggerCallback>
 80027bc:	e783      	b.n	80026c6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 80027be:	f7ff ff4f 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
 80027c2:	e7cc      	b.n	800275e <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80027c4:	f7ff ff4c 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
 80027c8:	e7ba      	b.n	8002740 <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	f7ff ff49 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
 80027ce:	e7a3      	b.n	8002718 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_IC_CaptureCallback(htim);
 80027d0:	f7ff ff46 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
 80027d4:	e78e      	b.n	80026f4 <HAL_TIM_IRQHandler+0x88>
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	ffffdf7f 	.word	0xffffdf7f
 80027dc:	fffffeff 	.word	0xfffffeff

080027e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027e0:	233c      	movs	r3, #60	@ 0x3c
{
 80027e2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80027e4:	5cc3      	ldrb	r3, [r0, r3]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d026      	beq.n	8002838 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ea:	233d      	movs	r3, #61	@ 0x3d
 80027ec:	2202      	movs	r2, #2
 80027ee:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f0:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027f2:	4d12      	ldr	r5, [pc, #72]	@ (800283c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 80027f4:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f6:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80027f8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027fa:	42aa      	cmp	r2, r5
 80027fc:	d00e      	beq.n	800281c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 &= ~TIM_CR2_MMS;
 80027fe:	2570      	movs	r5, #112	@ 0x70
 8002800:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002802:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002804:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002806:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002808:	429a      	cmp	r2, r3
 800280a:	d00f      	beq.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800280c:	233d      	movs	r3, #61	@ 0x3d
 800280e:	2201      	movs	r2, #1
 8002810:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002812:	2200      	movs	r2, #0
 8002814:	3b01      	subs	r3, #1
 8002816:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002818:	2000      	movs	r0, #0
}
 800281a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800281c:	4d09      	ldr	r5, [pc, #36]	@ (8002844 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800281e:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002820:	684d      	ldr	r5, [r1, #4]
 8002822:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8002824:	2570      	movs	r5, #112	@ 0x70
 8002826:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002828:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 800282a:	6053      	str	r3, [r2, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	439c      	bics	r4, r3
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002830:	688b      	ldr	r3, [r1, #8]
 8002832:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8002834:	6094      	str	r4, [r2, #8]
 8002836:	e7e9      	b.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8002838:	2002      	movs	r0, #2
 800283a:	e7ee      	b.n	800281a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40000400 	.word	0x40000400
 8002844:	ff0fffff 	.word	0xff0fffff

08002848 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002848:	4770      	bx	lr
 800284a:	46c0      	nop			@ (mov r8, r8)

0800284c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800284c:	4770      	bx	lr
 800284e:	46c0      	nop			@ (mov r8, r8)

08002850 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8002850:	4770      	bx	lr
 8002852:	46c0      	nop			@ (mov r8, r8)

08002854 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002854:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8002856:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002858:	071a      	lsls	r2, r3, #28
 800285a:	d506      	bpl.n	800286a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800285c:	6801      	ldr	r1, [r0, #0]
 800285e:	4c28      	ldr	r4, [pc, #160]	@ (8002900 <UART_AdvFeatureConfig+0xac>)
 8002860:	684a      	ldr	r2, [r1, #4]
 8002862:	4022      	ands	r2, r4
 8002864:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002866:	4322      	orrs	r2, r4
 8002868:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800286a:	07da      	lsls	r2, r3, #31
 800286c:	d506      	bpl.n	800287c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800286e:	6801      	ldr	r1, [r0, #0]
 8002870:	4c24      	ldr	r4, [pc, #144]	@ (8002904 <UART_AdvFeatureConfig+0xb0>)
 8002872:	684a      	ldr	r2, [r1, #4]
 8002874:	4022      	ands	r2, r4
 8002876:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002878:	4322      	orrs	r2, r4
 800287a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800287c:	079a      	lsls	r2, r3, #30
 800287e:	d506      	bpl.n	800288e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002880:	6801      	ldr	r1, [r0, #0]
 8002882:	4c21      	ldr	r4, [pc, #132]	@ (8002908 <UART_AdvFeatureConfig+0xb4>)
 8002884:	684a      	ldr	r2, [r1, #4]
 8002886:	4022      	ands	r2, r4
 8002888:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800288a:	4322      	orrs	r2, r4
 800288c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800288e:	075a      	lsls	r2, r3, #29
 8002890:	d506      	bpl.n	80028a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002892:	6801      	ldr	r1, [r0, #0]
 8002894:	4c1d      	ldr	r4, [pc, #116]	@ (800290c <UART_AdvFeatureConfig+0xb8>)
 8002896:	684a      	ldr	r2, [r1, #4]
 8002898:	4022      	ands	r2, r4
 800289a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800289c:	4322      	orrs	r2, r4
 800289e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028a0:	06da      	lsls	r2, r3, #27
 80028a2:	d506      	bpl.n	80028b2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028a4:	6801      	ldr	r1, [r0, #0]
 80028a6:	4c1a      	ldr	r4, [pc, #104]	@ (8002910 <UART_AdvFeatureConfig+0xbc>)
 80028a8:	688a      	ldr	r2, [r1, #8]
 80028aa:	4022      	ands	r2, r4
 80028ac:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80028ae:	4322      	orrs	r2, r4
 80028b0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028b2:	069a      	lsls	r2, r3, #26
 80028b4:	d506      	bpl.n	80028c4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028b6:	6801      	ldr	r1, [r0, #0]
 80028b8:	4c16      	ldr	r4, [pc, #88]	@ (8002914 <UART_AdvFeatureConfig+0xc0>)
 80028ba:	688a      	ldr	r2, [r1, #8]
 80028bc:	4022      	ands	r2, r4
 80028be:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80028c0:	4322      	orrs	r2, r4
 80028c2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028c4:	065a      	lsls	r2, r3, #25
 80028c6:	d50a      	bpl.n	80028de <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028c8:	6801      	ldr	r1, [r0, #0]
 80028ca:	4d13      	ldr	r5, [pc, #76]	@ (8002918 <UART_AdvFeatureConfig+0xc4>)
 80028cc:	684a      	ldr	r2, [r1, #4]
 80028ce:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80028d0:	402a      	ands	r2, r5
 80028d2:	4322      	orrs	r2, r4
 80028d4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028d6:	2280      	movs	r2, #128	@ 0x80
 80028d8:	0352      	lsls	r2, r2, #13
 80028da:	4294      	cmp	r4, r2
 80028dc:	d009      	beq.n	80028f2 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028de:	061b      	lsls	r3, r3, #24
 80028e0:	d506      	bpl.n	80028f0 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028e2:	6802      	ldr	r2, [r0, #0]
 80028e4:	490d      	ldr	r1, [pc, #52]	@ (800291c <UART_AdvFeatureConfig+0xc8>)
 80028e6:	6853      	ldr	r3, [r2, #4]
 80028e8:	400b      	ands	r3, r1
 80028ea:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80028ec:	430b      	orrs	r3, r1
 80028ee:	6053      	str	r3, [r2, #4]
  }
}
 80028f0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028f2:	684a      	ldr	r2, [r1, #4]
 80028f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002920 <UART_AdvFeatureConfig+0xcc>)
 80028f6:	4022      	ands	r2, r4
 80028f8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80028fa:	4322      	orrs	r2, r4
 80028fc:	604a      	str	r2, [r1, #4]
 80028fe:	e7ee      	b.n	80028de <UART_AdvFeatureConfig+0x8a>
 8002900:	ffff7fff 	.word	0xffff7fff
 8002904:	fffdffff 	.word	0xfffdffff
 8002908:	fffeffff 	.word	0xfffeffff
 800290c:	fffbffff 	.word	0xfffbffff
 8002910:	ffffefff 	.word	0xffffefff
 8002914:	ffffdfff 	.word	0xffffdfff
 8002918:	ffefffff 	.word	0xffefffff
 800291c:	fff7ffff 	.word	0xfff7ffff
 8002920:	ff9fffff 	.word	0xff9fffff

08002924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002924:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002926:	2390      	movs	r3, #144	@ 0x90
 8002928:	2200      	movs	r2, #0
{
 800292a:	46c6      	mov	lr, r8
 800292c:	0004      	movs	r4, r0
 800292e:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002932:	f7fe f9f5 	bl	8000d20 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002936:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002938:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	0712      	lsls	r2, r2, #28
 800293e:	d411      	bmi.n	8002964 <UART_CheckIdleState+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	0752      	lsls	r2, r2, #29
 8002944:	d43e      	bmi.n	80029c4 <UART_CheckIdleState+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002946:	2320      	movs	r3, #32
 8002948:	2288      	movs	r2, #136	@ 0x88
 800294a:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800294c:	3204      	adds	r2, #4
 800294e:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002950:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8002952:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002954:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002956:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8002958:	2384      	movs	r3, #132	@ 0x84
 800295a:	2200      	movs	r2, #0
 800295c:	54e2      	strb	r2, [r4, r3]
}
 800295e:	bc80      	pop	{r7}
 8002960:	46b8      	mov	r8, r7
 8002962:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	0292      	lsls	r2, r2, #10
 8002968:	d4ea      	bmi.n	8002940 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800296c:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800296e:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002970:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	04b6      	lsls	r6, r6, #18
 8002974:	e010      	b.n	8002998 <UART_CheckIdleState+0x74>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4217      	tst	r7, r2
 800297c:	d009      	beq.n	8002992 <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800297e:	4641      	mov	r1, r8
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	4211      	tst	r1, r2
 8002984:	d159      	bne.n	8002a3a <UART_CheckIdleState+0x116>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002986:	2280      	movs	r2, #128	@ 0x80
 8002988:	69d9      	ldr	r1, [r3, #28]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	4211      	tst	r1, r2
 800298e:	d000      	beq.n	8002992 <UART_CheckIdleState+0x6e>
 8002990:	e085      	b.n	8002a9e <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	0292      	lsls	r2, r2, #10
 8002996:	d4d3      	bmi.n	8002940 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002998:	f7fe f9c2 	bl	8000d20 <HAL_GetTick>
 800299c:	1b40      	subs	r0, r0, r5
 800299e:	42b0      	cmp	r0, r6
 80029a0:	d3e9      	bcc.n	8002976 <UART_CheckIdleState+0x52>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a2:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	2301      	movs	r3, #1
 80029a8:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80029ac:	2080      	movs	r0, #128	@ 0x80
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	6813      	ldr	r3, [r2, #0]
 80029b2:	4383      	bics	r3, r0
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80029ba:	2388      	movs	r3, #136	@ 0x88
 80029bc:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80029be:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80029c0:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80029c2:	e7c9      	b.n	8002958 <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	025b      	lsls	r3, r3, #9
 80029c8:	d4bd      	bmi.n	8002946 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ca:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029cc:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029ce:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029d0:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	04b6      	lsls	r6, r6, #18
 80029d4:	e011      	b.n	80029fa <UART_CheckIdleState+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4217      	tst	r7, r2
 80029dc:	d00a      	beq.n	80029f4 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029de:	4641      	mov	r1, r8
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	4211      	tst	r1, r2
 80029e4:	d000      	beq.n	80029e8 <UART_CheckIdleState+0xc4>
 80029e6:	e08b      	b.n	8002b00 <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029e8:	2280      	movs	r2, #128	@ 0x80
 80029ea:	69d9      	ldr	r1, [r3, #28]
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	4211      	tst	r1, r2
 80029f0:	d000      	beq.n	80029f4 <UART_CheckIdleState+0xd0>
 80029f2:	e0b7      	b.n	8002b64 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	d4a5      	bmi.n	8002946 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fe f991 	bl	8000d20 <HAL_GetTick>
 80029fe:	1b40      	subs	r0, r0, r5
 8002a00:	42b0      	cmp	r0, r6
 8002a02:	d3e8      	bcc.n	80029d6 <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a04:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a0e:	6821      	ldr	r1, [r4, #0]
 8002a10:	4d6d      	ldr	r5, [pc, #436]	@ (8002bc8 <UART_CheckIdleState+0x2a4>)
 8002a12:	680b      	ldr	r3, [r1, #0]
 8002a14:	402b      	ands	r3, r5
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a20:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a24:	6821      	ldr	r1, [r4, #0]
 8002a26:	688b      	ldr	r3, [r1, #8]
 8002a28:	4393      	bics	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]
 8002a2c:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002a30:	238c      	movs	r3, #140	@ 0x8c
 8002a32:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8002a34:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8002a36:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002a38:	e78e      	b.n	8002958 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a3a:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a40:	2201      	movs	r2, #1
 8002a42:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a46:	6821      	ldr	r1, [r4, #0]
 8002a48:	4d5f      	ldr	r5, [pc, #380]	@ (8002bc8 <UART_CheckIdleState+0x2a4>)
 8002a4a:	680b      	ldr	r3, [r1, #0]
 8002a4c:	402b      	ands	r3, r5
 8002a4e:	600b      	str	r3, [r1, #0]
 8002a50:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a54:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a5c:	6822      	ldr	r2, [r4, #0]
 8002a5e:	485b      	ldr	r0, [pc, #364]	@ (8002bcc <UART_CheckIdleState+0x2a8>)
 8002a60:	6893      	ldr	r3, [r2, #8]
 8002a62:	4003      	ands	r3, r0
 8002a64:	6093      	str	r3, [r2, #8]
 8002a66:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a6a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10a      	bne.n	8002a86 <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a70:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a78:	2010      	movs	r0, #16
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	4383      	bics	r3, r0
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a86:	238c      	movs	r3, #140	@ 0x8c
 8002a88:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a8a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8e:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a90:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a92:	66e3      	str	r3, [r4, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a94:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a96:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8002a98:	3a0c      	subs	r2, #12
 8002a9a:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8002a9c:	e781      	b.n	80029a2 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a9e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002aaa:	6821      	ldr	r1, [r4, #0]
 8002aac:	4d46      	ldr	r5, [pc, #280]	@ (8002bc8 <UART_CheckIdleState+0x2a4>)
 8002aae:	680b      	ldr	r3, [r1, #0]
 8002ab0:	402b      	ands	r3, r5
 8002ab2:	600b      	str	r3, [r1, #0]
 8002ab4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abc:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	4842      	ldr	r0, [pc, #264]	@ (8002bcc <UART_CheckIdleState+0x2a8>)
 8002ac4:	6893      	ldr	r3, [r2, #8]
 8002ac6:	4003      	ands	r3, r0
 8002ac8:	6093      	str	r3, [r2, #8]
 8002aca:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ace:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d10a      	bne.n	8002aea <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002adc:	2010      	movs	r0, #16
 8002ade:	6822      	ldr	r2, [r4, #0]
 8002ae0:	6813      	ldr	r3, [r2, #0]
 8002ae2:	4383      	bics	r3, r0
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002aea:	2220      	movs	r2, #32
 8002aec:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002aee:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8002af0:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af2:	2300      	movs	r3, #0
 8002af4:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8002af6:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002af8:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002afa:	3264      	adds	r2, #100	@ 0x64
 8002afc:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002afe:	e750      	b.n	80029a2 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b00:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b02:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b06:	2201      	movs	r2, #1
 8002b08:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b0c:	6821      	ldr	r1, [r4, #0]
 8002b0e:	4d2e      	ldr	r5, [pc, #184]	@ (8002bc8 <UART_CheckIdleState+0x2a4>)
 8002b10:	680b      	ldr	r3, [r1, #0]
 8002b12:	402b      	ands	r3, r5
 8002b14:	600b      	str	r3, [r1, #0]
 8002b16:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	4829      	ldr	r0, [pc, #164]	@ (8002bcc <UART_CheckIdleState+0x2a8>)
 8002b26:	6893      	ldr	r3, [r2, #8]
 8002b28:	4003      	ands	r3, r0
 8002b2a:	6093      	str	r3, [r2, #8]
 8002b2c:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b30:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d10a      	bne.n	8002b4c <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b36:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b3e:	2010      	movs	r0, #16
 8002b40:	6822      	ldr	r2, [r4, #0]
 8002b42:	6813      	ldr	r3, [r2, #0]
 8002b44:	4383      	bics	r3, r0
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	238c      	movs	r3, #140	@ 0x8c
 8002b4e:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b50:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8002b52:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b54:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b56:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b58:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8002b5a:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b5c:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 8002b5e:	3a0c      	subs	r2, #12
 8002b60:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8002b62:	e74f      	b.n	8002a04 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b64:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b66:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b70:	6821      	ldr	r1, [r4, #0]
 8002b72:	4d15      	ldr	r5, [pc, #84]	@ (8002bc8 <UART_CheckIdleState+0x2a4>)
 8002b74:	680b      	ldr	r3, [r1, #0]
 8002b76:	402b      	ands	r3, r5
 8002b78:	600b      	str	r3, [r1, #0]
 8002b7a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b7e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b82:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b86:	6822      	ldr	r2, [r4, #0]
 8002b88:	4810      	ldr	r0, [pc, #64]	@ (8002bcc <UART_CheckIdleState+0x2a8>)
 8002b8a:	6893      	ldr	r3, [r2, #8]
 8002b8c:	4003      	ands	r3, r0
 8002b8e:	6093      	str	r3, [r2, #8]
 8002b90:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b94:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10a      	bne.n	8002bb0 <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba2:	2010      	movs	r0, #16
 8002ba4:	6822      	ldr	r2, [r4, #0]
 8002ba6:	6813      	ldr	r3, [r2, #0]
 8002ba8:	4383      	bics	r3, r0
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bb4:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8002bb6:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8002bbc:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bbe:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002bc0:	3264      	adds	r2, #100	@ 0x64
 8002bc2:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002bc4:	e71e      	b.n	8002a04 <UART_CheckIdleState+0xe0>
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	fffffedf 	.word	0xfffffedf
 8002bcc:	effffffe 	.word	0xeffffffe

08002bd0 <HAL_UART_Init>:
{
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002bd4:	d03a      	beq.n	8002c4c <HAL_UART_Init+0x7c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd6:	2388      	movs	r3, #136	@ 0x88
 8002bd8:	58c3      	ldr	r3, [r0, r3]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d100      	bne.n	8002be0 <HAL_UART_Init+0x10>
 8002bde:	e072      	b.n	8002cc6 <HAL_UART_Init+0xf6>
  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	2388      	movs	r3, #136	@ 0x88
 8002be2:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002be4:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002be6:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	3a23      	subs	r2, #35	@ 0x23
 8002bec:	4393      	bics	r3, r2
 8002bee:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bf0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d163      	bne.n	8002cbe <HAL_UART_Init+0xee>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf6:	6921      	ldr	r1, [r4, #16]
 8002bf8:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bfa:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	6961      	ldr	r1, [r4, #20]
 8002c00:	69e0      	ldr	r0, [r4, #28]
 8002c02:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c04:	4958      	ldr	r1, [pc, #352]	@ (8002d68 <HAL_UART_Init+0x198>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c06:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c08:	400a      	ands	r2, r1
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c0e:	686b      	ldr	r3, [r5, #4]
 8002c10:	4a56      	ldr	r2, [pc, #344]	@ (8002d6c <HAL_UART_Init+0x19c>)
    tmpreg |= huart->Init.OneBitSampling;
 8002c12:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c14:	4013      	ands	r3, r2
 8002c16:	68e2      	ldr	r2, [r4, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c1c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c1e:	68aa      	ldr	r2, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002c20:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c22:	4953      	ldr	r1, [pc, #332]	@ (8002d70 <HAL_UART_Init+0x1a0>)
 8002c24:	400a      	ands	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c26:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c2c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002c30:	438b      	bics	r3, r1
 8002c32:	4313      	orrs	r3, r2
 8002c34:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c36:	4b4f      	ldr	r3, [pc, #316]	@ (8002d74 <HAL_UART_Init+0x1a4>)
 8002c38:	429d      	cmp	r5, r3
 8002c3a:	d009      	beq.n	8002c50 <HAL_UART_Init+0x80>
 8002c3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002d78 <HAL_UART_Init+0x1a8>)
 8002c3e:	429d      	cmp	r5, r3
 8002c40:	d00d      	beq.n	8002c5e <HAL_UART_Init+0x8e>
  huart->NbRxDataToProcess = 1;
 8002c42:	4b4e      	ldr	r3, [pc, #312]	@ (8002d7c <HAL_UART_Init+0x1ac>)
 8002c44:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002c4a:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 8002c4c:	2001      	movs	r0, #1
}
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c50:	4b4b      	ldr	r3, [pc, #300]	@ (8002d80 <HAL_UART_Init+0x1b0>)
 8002c52:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c54:	2303      	movs	r3, #3
 8002c56:	400b      	ands	r3, r1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d938      	bls.n	8002cd0 <HAL_UART_Init+0x100>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	4298      	cmp	r0, r3
 8002c64:	d043      	beq.n	8002cee <HAL_UART_Init+0x11e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c66:	f7fe fd69 	bl	800173c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	d062      	beq.n	8002d34 <HAL_UART_Init+0x164>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c6e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002c70:	4b44      	ldr	r3, [pc, #272]	@ (8002d84 <HAL_UART_Init+0x1b4>)
 8002c72:	0052      	lsls	r2, r2, #1
 8002c74:	5ad1      	ldrh	r1, [r2, r3]
 8002c76:	f7fd fa43 	bl	8000100 <__udivsi3>
 8002c7a:	6865      	ldr	r5, [r4, #4]
 8002c7c:	086b      	lsrs	r3, r5, #1
 8002c7e:	18c0      	adds	r0, r0, r3
 8002c80:	0029      	movs	r1, r5
 8002c82:	f7fd fa3d 	bl	8000100 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c86:	0002      	movs	r2, r0
 8002c88:	4b3f      	ldr	r3, [pc, #252]	@ (8002d88 <HAL_UART_Init+0x1b8>)
 8002c8a:	3a10      	subs	r2, #16
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d8d8      	bhi.n	8002c42 <HAL_UART_Init+0x72>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8002c94:	4a39      	ldr	r2, [pc, #228]	@ (8002d7c <HAL_UART_Init+0x1ac>)
 8002c96:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002c9c:	67a2      	str	r2, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	493a      	ldr	r1, [pc, #232]	@ (8002d8c <HAL_UART_Init+0x1bc>)
  return (UART_CheckIdleState(huart));
 8002ca2:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca4:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca6:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	438a      	bics	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	3929      	subs	r1, #41	@ 0x29
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002cb8:	f7ff fe34 	bl	8002924 <UART_CheckIdleState>
 8002cbc:	e7c7      	b.n	8002c4e <HAL_UART_Init+0x7e>
    UART_AdvFeatureConfig(huart);
 8002cbe:	0020      	movs	r0, r4
 8002cc0:	f7ff fdc8 	bl	8002854 <UART_AdvFeatureConfig>
 8002cc4:	e797      	b.n	8002bf6 <HAL_UART_Init+0x26>
    huart->Lock = HAL_UNLOCKED;
 8002cc6:	2284      	movs	r2, #132	@ 0x84
 8002cc8:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002cca:	f7fd fe9d 	bl	8000a08 <HAL_UART_MspInit>
 8002cce:	e787      	b.n	8002be0 <HAL_UART_Init+0x10>
 8002cd0:	492f      	ldr	r1, [pc, #188]	@ (8002d90 <HAL_UART_Init+0x1c0>)
 8002cd2:	5cc9      	ldrb	r1, [r1, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	4298      	cmp	r0, r3
 8002cda:	d034      	beq.n	8002d46 <HAL_UART_Init+0x176>
    switch (clocksource)
 8002cdc:	2904      	cmp	r1, #4
 8002cde:	d02f      	beq.n	8002d40 <HAL_UART_Init+0x170>
 8002ce0:	d824      	bhi.n	8002d2c <HAL_UART_Init+0x15c>
 8002ce2:	2900      	cmp	r1, #0
 8002ce4:	d0bf      	beq.n	8002c66 <HAL_UART_Init+0x96>
 8002ce6:	2902      	cmp	r1, #2
 8002ce8:	d1ab      	bne.n	8002c42 <HAL_UART_Init+0x72>
        pclk = (uint32_t) HSI_VALUE;
 8002cea:	482a      	ldr	r0, [pc, #168]	@ (8002d94 <HAL_UART_Init+0x1c4>)
 8002cec:	e7c0      	b.n	8002c70 <HAL_UART_Init+0xa0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cee:	f7fe fd25 	bl	800173c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d01e      	beq.n	8002d34 <HAL_UART_Init+0x164>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cf6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002cf8:	4b22      	ldr	r3, [pc, #136]	@ (8002d84 <HAL_UART_Init+0x1b4>)
 8002cfa:	0052      	lsls	r2, r2, #1
 8002cfc:	5ad1      	ldrh	r1, [r2, r3]
 8002cfe:	f7fd f9ff 	bl	8000100 <__udivsi3>
 8002d02:	6865      	ldr	r5, [r4, #4]
 8002d04:	0040      	lsls	r0, r0, #1
 8002d06:	086b      	lsrs	r3, r5, #1
 8002d08:	18c0      	adds	r0, r0, r3
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	f7fd f9f8 	bl	8000100 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d10:	0002      	movs	r2, r0
 8002d12:	4b1d      	ldr	r3, [pc, #116]	@ (8002d88 <HAL_UART_Init+0x1b8>)
 8002d14:	3a10      	subs	r2, #16
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d900      	bls.n	8002d1c <HAL_UART_Init+0x14c>
 8002d1a:	e792      	b.n	8002c42 <HAL_UART_Init+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d98 <HAL_UART_Init+0x1c8>)
        huart->Instance->BRR = brrtemp;
 8002d1e:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d20:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d22:	0700      	lsls	r0, r0, #28
 8002d24:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002d26:	4302      	orrs	r2, r0
 8002d28:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8002d2a:	e7b3      	b.n	8002c94 <HAL_UART_Init+0xc4>
    switch (clocksource)
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	2908      	cmp	r1, #8
 8002d30:	d09e      	beq.n	8002c70 <HAL_UART_Init+0xa0>
 8002d32:	e786      	b.n	8002c42 <HAL_UART_Init+0x72>
  huart->NbRxDataToProcess = 1;
 8002d34:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <HAL_UART_Init+0x1ac>)
  huart->RxISR = NULL;
 8002d36:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8002d38:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d3a:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	e7ae      	b.n	8002c9e <HAL_UART_Init+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d40:	f7fe fbe6 	bl	8001510 <HAL_RCC_GetSysClockFreq>
        break;
 8002d44:	e791      	b.n	8002c6a <HAL_UART_Init+0x9a>
    switch (clocksource)
 8002d46:	2904      	cmp	r1, #4
 8002d48:	d007      	beq.n	8002d5a <HAL_UART_Init+0x18a>
 8002d4a:	d809      	bhi.n	8002d60 <HAL_UART_Init+0x190>
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	d0ce      	beq.n	8002cee <HAL_UART_Init+0x11e>
 8002d50:	2902      	cmp	r1, #2
 8002d52:	d000      	beq.n	8002d56 <HAL_UART_Init+0x186>
 8002d54:	e775      	b.n	8002c42 <HAL_UART_Init+0x72>
 8002d56:	480f      	ldr	r0, [pc, #60]	@ (8002d94 <HAL_UART_Init+0x1c4>)
 8002d58:	e7ce      	b.n	8002cf8 <HAL_UART_Init+0x128>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5a:	f7fe fbd9 	bl	8001510 <HAL_RCC_GetSysClockFreq>
        break;
 8002d5e:	e7c8      	b.n	8002cf2 <HAL_UART_Init+0x122>
    switch (clocksource)
 8002d60:	2908      	cmp	r1, #8
 8002d62:	d0c9      	beq.n	8002cf8 <HAL_UART_Init+0x128>
 8002d64:	e76d      	b.n	8002c42 <HAL_UART_Init+0x72>
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	cfff69f3 	.word	0xcfff69f3
 8002d6c:	ffffcfff 	.word	0xffffcfff
 8002d70:	11fff4ff 	.word	0x11fff4ff
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40004400 	.word	0x40004400
 8002d7c:	00010001 	.word	0x00010001
 8002d80:	40021000 	.word	0x40021000
 8002d84:	0800300c 	.word	0x0800300c
 8002d88:	0000ffef 	.word	0x0000ffef
 8002d8c:	ffffb7ff 	.word	0xffffb7ff
 8002d90:	08003008 	.word	0x08003008
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	0000fff0 	.word	0x0000fff0

08002d9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d9c:	b570      	push	{r4, r5, r6, lr}

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d9e:	2484      	movs	r4, #132	@ 0x84
 8002da0:	5d03      	ldrb	r3, [r0, r4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d012      	beq.n	8002dcc <HAL_UARTEx_DisableFifoMode+0x30>

  huart->gState = HAL_UART_STATE_BUSY;
 8002da6:	2588      	movs	r5, #136	@ 0x88
 8002da8:	2324      	movs	r3, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002daa:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dae:	6803      	ldr	r3, [r0, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	43b1      	bics	r1, r6
 8002db6:	6019      	str	r1, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002db8:	4905      	ldr	r1, [pc, #20]	@ (8002dd0 <HAL_UARTEx_DisableFifoMode+0x34>)
 8002dba:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	6641      	str	r1, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	5143      	str	r3, [r0, r5]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dc6:	5501      	strb	r1, [r0, r4]

  return HAL_OK;
 8002dc8:	2000      	movs	r0, #0
}
 8002dca:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8002dcc:	2002      	movs	r0, #2
 8002dce:	e7fc      	b.n	8002dca <HAL_UARTEx_DisableFifoMode+0x2e>
 8002dd0:	dfffffff 	.word	0xdfffffff

08002dd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd6:	46d6      	mov	lr, sl
 8002dd8:	464f      	mov	r7, r9
 8002dda:	4646      	mov	r6, r8
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ddc:	2384      	movs	r3, #132	@ 0x84
{
 8002dde:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 8002de0:	5cc3      	ldrb	r3, [r0, r3]
{
 8002de2:	0004      	movs	r4, r0
 8002de4:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d03d      	beq.n	8002e66 <HAL_UARTEx_SetTxFifoThreshold+0x92>

  huart->gState = HAL_UART_STATE_BUSY;
 8002dea:	2388      	movs	r3, #136	@ 0x88
 8002dec:	2124      	movs	r1, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dee:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002df0:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002df2:	682e      	ldr	r6, [r5, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002df4:	682b      	ldr	r3, [r5, #0]
 8002df6:	3923      	subs	r1, #35	@ 0x23
 8002df8:	438b      	bics	r3, r1
 8002dfa:	602b      	str	r3, [r5, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002dfc:	68ab      	ldr	r3, [r5, #8]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	08d9      	lsrs	r1, r3, #3
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e02:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e04:	4311      	orrs	r1, r2
 8002e06:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d029      	beq.n	8002e60 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e0c:	68ab      	ldr	r3, [r5, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e0e:	4a17      	ldr	r2, [pc, #92]	@ (8002e6c <HAL_UARTEx_SetTxFifoThreshold+0x98>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e10:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e12:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002e14:	68ab      	ldr	r3, [r5, #8]
 8002e16:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e18:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002e1a:	4a15      	ldr	r2, [pc, #84]	@ (8002e70 <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e1c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002e1e:	5cd1      	ldrb	r1, [r2, r3]
 8002e20:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e22:	f7fd f9f7 	bl	8000214 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e26:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e28:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e2a:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e2c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e2e:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e30:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002e32:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e34:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002e36:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e38:	f7fd f9ec 	bl	8000214 <__divsi3>
 8002e3c:	b280      	uxth	r0, r0
 8002e3e:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8002e40:	2220      	movs	r2, #32
 8002e42:	52e0      	strh	r0, [r4, r3]
 8002e44:	3302      	adds	r3, #2
 8002e46:	52e7      	strh	r7, [r4, r3]
 8002e48:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e4a:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002e4c:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8002e4e:	2200      	movs	r2, #0
  return HAL_OK;
 8002e50:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8002e52:	3b04      	subs	r3, #4
 8002e54:	54e2      	strb	r2, [r4, r3]
}
 8002e56:	bce0      	pop	{r5, r6, r7}
 8002e58:	46ba      	mov	sl, r7
 8002e5a:	46b1      	mov	r9, r6
 8002e5c:	46a8      	mov	r8, r5
 8002e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 8002e60:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 8002e62:	2701      	movs	r7, #1
 8002e64:	e7eb      	b.n	8002e3e <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8002e66:	2002      	movs	r0, #2
 8002e68:	e7f5      	b.n	8002e56 <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	0800302c 	.word	0x0800302c
 8002e70:	08003024 	.word	0x08003024

08002e74 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	46d6      	mov	lr, sl
 8002e78:	464f      	mov	r7, r9
 8002e7a:	4646      	mov	r6, r8
  __HAL_LOCK(huart);
 8002e7c:	2384      	movs	r3, #132	@ 0x84
{
 8002e7e:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 8002e80:	5cc3      	ldrb	r3, [r0, r3]
{
 8002e82:	0004      	movs	r4, r0
 8002e84:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d03d      	beq.n	8002f06 <HAL_UARTEx_SetRxFifoThreshold+0x92>
  huart->gState = HAL_UART_STATE_BUSY;
 8002e8a:	2388      	movs	r3, #136	@ 0x88
 8002e8c:	2124      	movs	r1, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e8e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e90:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e92:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8002e94:	682b      	ldr	r3, [r5, #0]
 8002e96:	3923      	subs	r1, #35	@ 0x23
 8002e98:	438b      	bics	r3, r1
 8002e9a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e9c:	68a9      	ldr	r1, [r5, #8]
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <HAL_UARTEx_SetRxFifoThreshold+0x98>)
 8002ea0:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ea2:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ea4:	4311      	orrs	r1, r2
 8002ea6:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d029      	beq.n	8002f00 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002eac:	68ab      	ldr	r3, [r5, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002eae:	4a18      	ldr	r2, [pc, #96]	@ (8002f10 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002eb0:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002eb2:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002eb4:	68ab      	ldr	r3, [r5, #8]
 8002eb6:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002eb8:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002eba:	4a16      	ldr	r2, [pc, #88]	@ (8002f14 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ebc:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002ebe:	5cd1      	ldrb	r1, [r2, r3]
 8002ec0:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ec2:	f7fd f9a7 	bl	8000214 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ec6:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ec8:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002eca:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ecc:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ece:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ed0:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002ed2:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ed4:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002ed6:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ed8:	f7fd f99c 	bl	8000214 <__divsi3>
 8002edc:	b280      	uxth	r0, r0
 8002ede:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	52e0      	strh	r0, [r4, r3]
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	52e7      	strh	r7, [r4, r3]
 8002ee8:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002eea:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002eec:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8002eee:	2200      	movs	r2, #0
  return HAL_OK;
 8002ef0:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8002ef2:	3b04      	subs	r3, #4
 8002ef4:	54e2      	strb	r2, [r4, r3]
}
 8002ef6:	bce0      	pop	{r5, r6, r7}
 8002ef8:	46ba      	mov	sl, r7
 8002efa:	46b1      	mov	r9, r6
 8002efc:	46a8      	mov	r8, r5
 8002efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 8002f00:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 8002f02:	2701      	movs	r7, #1
 8002f04:	e7eb      	b.n	8002ede <HAL_UARTEx_SetRxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8002f06:	2002      	movs	r0, #2
 8002f08:	e7f5      	b.n	8002ef6 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	f1ffffff 	.word	0xf1ffffff
 8002f10:	0800302c 	.word	0x0800302c
 8002f14:	08003024 	.word	0x08003024

08002f18 <memset>:
 8002f18:	0003      	movs	r3, r0
 8002f1a:	1882      	adds	r2, r0, r2
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memset+0xa>
 8002f20:	4770      	bx	lr
 8002f22:	7019      	strb	r1, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	e7f9      	b.n	8002f1c <memset+0x4>

08002f28 <__libc_init_array>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	2600      	movs	r6, #0
 8002f2c:	4c0c      	ldr	r4, [pc, #48]	@ (8002f60 <__libc_init_array+0x38>)
 8002f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8002f64 <__libc_init_array+0x3c>)
 8002f30:	1b64      	subs	r4, r4, r5
 8002f32:	10a4      	asrs	r4, r4, #2
 8002f34:	42a6      	cmp	r6, r4
 8002f36:	d109      	bne.n	8002f4c <__libc_init_array+0x24>
 8002f38:	2600      	movs	r6, #0
 8002f3a:	f000 f819 	bl	8002f70 <_init>
 8002f3e:	4c0a      	ldr	r4, [pc, #40]	@ (8002f68 <__libc_init_array+0x40>)
 8002f40:	4d0a      	ldr	r5, [pc, #40]	@ (8002f6c <__libc_init_array+0x44>)
 8002f42:	1b64      	subs	r4, r4, r5
 8002f44:	10a4      	asrs	r4, r4, #2
 8002f46:	42a6      	cmp	r6, r4
 8002f48:	d105      	bne.n	8002f56 <__libc_init_array+0x2e>
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
 8002f4c:	00b3      	lsls	r3, r6, #2
 8002f4e:	58eb      	ldr	r3, [r5, r3]
 8002f50:	4798      	blx	r3
 8002f52:	3601      	adds	r6, #1
 8002f54:	e7ee      	b.n	8002f34 <__libc_init_array+0xc>
 8002f56:	00b3      	lsls	r3, r6, #2
 8002f58:	58eb      	ldr	r3, [r5, r3]
 8002f5a:	4798      	blx	r3
 8002f5c:	3601      	adds	r6, #1
 8002f5e:	e7f2      	b.n	8002f46 <__libc_init_array+0x1e>
 8002f60:	08003034 	.word	0x08003034
 8002f64:	08003034 	.word	0x08003034
 8002f68:	08003038 	.word	0x08003038
 8002f6c:	08003034 	.word	0x08003034

08002f70 <_init>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr

08002f7c <_fini>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr
