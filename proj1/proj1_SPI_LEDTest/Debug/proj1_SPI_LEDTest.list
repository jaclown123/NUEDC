
proj1_SPI_LEDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003958  08003958  00004958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a10  08003a10  0000565c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a10  08003a10  0000565c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a10  08003a10  0000565c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a10  08003a10  00004a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a14  08003a14  00004a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000065c  20000000  08003a18  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000065c  08004074  0000565c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  08004074  000057b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000565c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb23  00000000  00000000  00005684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d9  00000000  00000000  000141a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00016480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a0  00000000  00000000  000170e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f34  00000000  00000000  00017a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000faa8  00000000  00000000  0002c9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084cd5  00000000  00000000  0003c45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c14  00000000  00000000  000c1174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c3d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000065c 	.word	0x2000065c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003940 	.word	0x08003940

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000660 	.word	0x20000660
 80000fc:	08003940 	.word	0x08003940

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <LED_Init>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_RTC_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void LED_Init(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_IN_RST_GPIO_Port,LED_IN_RST_Pin,GPIO_PIN_SET);
 80003f0:	23a0      	movs	r3, #160	@ 0xa0
 80003f2:	05db      	lsls	r3, r3, #23
 80003f4:	2201      	movs	r2, #1
 80003f6:	2140      	movs	r1, #64	@ 0x40
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 f82f 	bl	800145c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_OUT_EN_GPIO_Port,LED_OUT_EN_Pin,GPIO_PIN_RESET);
 80003fe:	23a0      	movs	r3, #160	@ 0xa0
 8000400:	05db      	lsls	r3, r3, #23
 8000402:	2200      	movs	r2, #0
 8000404:	2108      	movs	r1, #8
 8000406:	0018      	movs	r0, r3
 8000408:	f001 f828 	bl	800145c <HAL_GPIO_WritePin>

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <Input_Fix>:

void Input_Fix(GPIO_PinState * Input_Data) {
 8000412:	b580      	push	{r7, lr}
 8000414:	b086      	sub	sp, #24
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
  for (int i=7;i<=47;i=i+8) {
 800041a:	2307      	movs	r3, #7
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e02e      	b.n	800047e <Input_Fix+0x6c>
    for (int j=0;j<=2;j++) {
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
 8000424:	e025      	b.n	8000472 <Input_Fix+0x60>
      GPIO_PinState temp=Input_Data[j+i-7];
 8000426:	693a      	ldr	r2, [r7, #16]
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	18d3      	adds	r3, r2, r3
 800042c:	3b07      	subs	r3, #7
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	18d2      	adds	r2, r2, r3
 8000432:	200f      	movs	r0, #15
 8000434:	183b      	adds	r3, r7, r0
 8000436:	7812      	ldrb	r2, [r2, #0]
 8000438:	701a      	strb	r2, [r3, #0]
      Input_Data[j+i-7]=Input_Data[i-1-j];
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	1e5a      	subs	r2, r3, #1
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	001a      	movs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	189a      	adds	r2, r3, r2
 8000448:	6939      	ldr	r1, [r7, #16]
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	18cb      	adds	r3, r1, r3
 800044e:	3b07      	subs	r3, #7
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	18cb      	adds	r3, r1, r3
 8000454:	7812      	ldrb	r2, [r2, #0]
 8000456:	701a      	strb	r2, [r3, #0]
      Input_Data[i-1-j]=temp;
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	693b      	ldr	r3, [r7, #16]
 800045e:	1ad3      	subs	r3, r2, r3
 8000460:	001a      	movs	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	189b      	adds	r3, r3, r2
 8000466:	183a      	adds	r2, r7, r0
 8000468:	7812      	ldrb	r2, [r2, #0]
 800046a:	701a      	strb	r2, [r3, #0]
    for (int j=0;j<=2;j++) {
 800046c:	693b      	ldr	r3, [r7, #16]
 800046e:	3301      	adds	r3, #1
 8000470:	613b      	str	r3, [r7, #16]
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	2b02      	cmp	r3, #2
 8000476:	ddd6      	ble.n	8000426 <Input_Fix+0x14>
  for (int i=7;i<=47;i=i+8) {
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	3308      	adds	r3, #8
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	2b2f      	cmp	r3, #47	@ 0x2f
 8000482:	ddcd      	ble.n	8000420 <Input_Fix+0xe>
    }
  }
}
 8000484:	46c0      	nop			@ (mov r8, r8)
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b006      	add	sp, #24
 800048c:	bd80      	pop	{r7, pc}

0800048e <Generate_Bytes>:

void Generate_Bytes(uint8_t * Input_Bits,uint8_t* Bytes){
 800048e:	b580      	push	{r7, lr}
 8000490:	b084      	sub	sp, #16
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	6039      	str	r1, [r7, #0]

  for (int byte_index=0;byte_index<6;byte_index++) {
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	e02c      	b.n	80004f8 <Generate_Bytes+0x6a>
    for (int i=0;i<8;i++) {
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	e023      	b.n	80004ec <Generate_Bytes+0x5e>
      switch(Input_Bits[byte_index*8+i]) {
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	00da      	lsls	r2, r3, #3
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	18d3      	adds	r3, r2, r3
 80004ac:	001a      	movs	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	189b      	adds	r3, r3, r2
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d015      	beq.n	80004e4 <Generate_Bytes+0x56>
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d114      	bne.n	80004e6 <Generate_Bytes+0x58>
      case 0:{

        break;
      }
      case 1:{
        Bytes[byte_index]|=(1<<(7-i));
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	18d3      	adds	r3, r2, r3
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b25a      	sxtb	r2, r3
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	2107      	movs	r1, #7
 80004ca:	1acb      	subs	r3, r1, r3
 80004cc:	2101      	movs	r1, #1
 80004ce:	4099      	lsls	r1, r3
 80004d0:	000b      	movs	r3, r1
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b259      	sxtb	r1, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	18d3      	adds	r3, r2, r3
 80004de:	b2ca      	uxtb	r2, r1
 80004e0:	701a      	strb	r2, [r3, #0]
        break;
 80004e2:	e000      	b.n	80004e6 <Generate_Bytes+0x58>
        break;
 80004e4:	46c0      	nop			@ (mov r8, r8)
    for (int i=0;i<8;i++) {
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	3301      	adds	r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	2b07      	cmp	r3, #7
 80004f0:	ddd8      	ble.n	80004a4 <Generate_Bytes+0x16>
  for (int byte_index=0;byte_index<6;byte_index++) {
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b05      	cmp	r3, #5
 80004fc:	ddcf      	ble.n	800049e <Generate_Bytes+0x10>
      }
      }
    }
  }
}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b004      	add	sp, #16
 8000506:	bd80      	pop	{r7, pc}

08000508 <LED_Display_6Byte_SPI>:

void LED_Display_6Byte_SPI(GPIO_PinState * Input_Data) {
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  Input_Fix(Input_Data);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	0018      	movs	r0, r3
 8000514:	f7ff ff7d 	bl	8000412 <Input_Fix>
  uint8_t Input_Byte[6]={0};
 8000518:	2408      	movs	r4, #8
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	2200      	movs	r2, #0
 8000522:	809a      	strh	r2, [r3, #4]
 Generate_Bytes(Input_Data,Input_Byte);
 8000524:	193a      	adds	r2, r7, r4
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff ffaf 	bl	800048e <Generate_Bytes>

  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_RESET);
 8000530:	23a0      	movs	r3, #160	@ 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	2200      	movs	r2, #0
 8000536:	2110      	movs	r1, #16
 8000538:	0018      	movs	r0, r3
 800053a:	f000 ff8f 	bl	800145c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,Input_Byte, 6, 1);
 800053e:	1939      	adds	r1, r7, r4
 8000540:	4807      	ldr	r0, [pc, #28]	@ (8000560 <LED_Display_6Byte_SPI+0x58>)
 8000542:	2301      	movs	r3, #1
 8000544:	2206      	movs	r2, #6
 8000546:	f002 f9eb 	bl	8002920 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_SET);
 800054a:	23a0      	movs	r3, #160	@ 0xa0
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	0018      	movs	r0, r3
 8000554:	f000 ff82 	bl	800145c <HAL_GPIO_WritePin>
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b005      	add	sp, #20
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	200006a4 	.word	0x200006a4

08000564 <LED_Display_Color>:
//    HAL_Delay(0);
//  }
//  HAL_GPIO_WritePin(LED_OUT_CLK_GPIO_Port,LED_OUT_CLK_Pin,GPIO_PIN_SET);
//}

void LED_Display_Color(LED_Color * Color_Input) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b090      	sub	sp, #64	@ 0x40
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint8_t Color_Bytes[48]={1};
 800056c:	2308      	movs	r3, #8
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	3304      	adds	r3, #4
 8000576:	222c      	movs	r2, #44	@ 0x2c
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f003 f9b4 	bl	80038e8 <memset>
  int color_index=0,byte_index=47;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000584:	232f      	movs	r3, #47	@ 0x2f
 8000586:	63bb      	str	r3, [r7, #56]	@ 0x38
  while(color_index<16) {
 8000588:	e0a1      	b.n	80006ce <LED_Display_Color+0x16a>
    switch(Color_Input[color_index]){
 800058a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	18d3      	adds	r3, r2, r3
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b07      	cmp	r3, #7
 8000594:	d900      	bls.n	8000598 <LED_Display_Color+0x34>
 8000596:	e094      	b.n	80006c2 <LED_Display_Color+0x15e>
 8000598:	009a      	lsls	r2, r3, #2
 800059a:	4b53      	ldr	r3, [pc, #332]	@ (80006e8 <LED_Display_Color+0x184>)
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	469f      	mov	pc, r3
    case BLACK:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 80005a2:	2108      	movs	r1, #8
 80005a4:	187a      	adds	r2, r7, r1
 80005a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005a8:	18d3      	adds	r3, r2, r3
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 80005ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005b0:	3b01      	subs	r3, #1
 80005b2:	0008      	movs	r0, r1
 80005b4:	187a      	adds	r2, r7, r1
 80005b6:	2101      	movs	r1, #1
 80005b8:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 80005ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005bc:	3b02      	subs	r3, #2
 80005be:	183a      	adds	r2, r7, r0
 80005c0:	2101      	movs	r1, #1
 80005c2:	54d1      	strb	r1, [r2, r3]
      break;
 80005c4:	e07d      	b.n	80006c2 <LED_Display_Color+0x15e>
    }
    case RED:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 80005c6:	2108      	movs	r1, #8
 80005c8:	187a      	adds	r2, r7, r1
 80005ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005cc:	18d3      	adds	r3, r2, r3
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 80005d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005d4:	3b01      	subs	r3, #1
 80005d6:	0008      	movs	r0, r1
 80005d8:	187a      	adds	r2, r7, r1
 80005da:	2101      	movs	r1, #1
 80005dc:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 80005de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005e0:	3b02      	subs	r3, #2
 80005e2:	183a      	adds	r2, r7, r0
 80005e4:	2100      	movs	r1, #0
 80005e6:	54d1      	strb	r1, [r2, r3]
      break;
 80005e8:	e06b      	b.n	80006c2 <LED_Display_Color+0x15e>
    }
    case GREEN:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 80005ea:	2108      	movs	r1, #8
 80005ec:	187a      	adds	r2, r7, r1
 80005ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005f0:	18d3      	adds	r3, r2, r3
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 80005f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005f8:	3b01      	subs	r3, #1
 80005fa:	0008      	movs	r0, r1
 80005fc:	187a      	adds	r2, r7, r1
 80005fe:	2100      	movs	r1, #0
 8000600:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 8000602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000604:	3b02      	subs	r3, #2
 8000606:	183a      	adds	r2, r7, r0
 8000608:	2101      	movs	r1, #1
 800060a:	54d1      	strb	r1, [r2, r3]
      break;
 800060c:	e059      	b.n	80006c2 <LED_Display_Color+0x15e>
    }
    case BLUE:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 800060e:	2108      	movs	r1, #8
 8000610:	187a      	adds	r2, r7, r1
 8000612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000614:	18d3      	adds	r3, r2, r3
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 800061a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800061c:	3b01      	subs	r3, #1
 800061e:	0008      	movs	r0, r1
 8000620:	187a      	adds	r2, r7, r1
 8000622:	2101      	movs	r1, #1
 8000624:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 8000626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000628:	3b02      	subs	r3, #2
 800062a:	183a      	adds	r2, r7, r0
 800062c:	2101      	movs	r1, #1
 800062e:	54d1      	strb	r1, [r2, r3]
      break;
 8000630:	e047      	b.n	80006c2 <LED_Display_Color+0x15e>
    }
    case YELLOW:{
      Color_Bytes[byte_index]=GPIO_PIN_SET;
 8000632:	2108      	movs	r1, #8
 8000634:	187a      	adds	r2, r7, r1
 8000636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000638:	18d3      	adds	r3, r2, r3
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 800063e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000640:	3b01      	subs	r3, #1
 8000642:	0008      	movs	r0, r1
 8000644:	187a      	adds	r2, r7, r1
 8000646:	2100      	movs	r1, #0
 8000648:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 800064a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800064c:	3b02      	subs	r3, #2
 800064e:	183a      	adds	r2, r7, r0
 8000650:	2100      	movs	r1, #0
 8000652:	54d1      	strb	r1, [r2, r3]
      break;
 8000654:	e035      	b.n	80006c2 <LED_Display_Color+0x15e>
    }
    case PINK:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 8000656:	2108      	movs	r1, #8
 8000658:	187a      	adds	r2, r7, r1
 800065a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800065c:	18d3      	adds	r3, r2, r3
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_SET;
 8000662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000664:	3b01      	subs	r3, #1
 8000666:	0008      	movs	r0, r1
 8000668:	187a      	adds	r2, r7, r1
 800066a:	2101      	movs	r1, #1
 800066c:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 800066e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000670:	3b02      	subs	r3, #2
 8000672:	183a      	adds	r2, r7, r0
 8000674:	2100      	movs	r1, #0
 8000676:	54d1      	strb	r1, [r2, r3]
      break;
 8000678:	e023      	b.n	80006c2 <LED_Display_Color+0x15e>
    }
    case CYAN:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 800067a:	2108      	movs	r1, #8
 800067c:	187a      	adds	r2, r7, r1
 800067e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000680:	18d3      	adds	r3, r2, r3
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 8000686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000688:	3b01      	subs	r3, #1
 800068a:	0008      	movs	r0, r1
 800068c:	187a      	adds	r2, r7, r1
 800068e:	2100      	movs	r1, #0
 8000690:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_SET;
 8000692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000694:	3b02      	subs	r3, #2
 8000696:	183a      	adds	r2, r7, r0
 8000698:	2101      	movs	r1, #1
 800069a:	54d1      	strb	r1, [r2, r3]
      break;
 800069c:	e011      	b.n	80006c2 <LED_Display_Color+0x15e>
    }
    case WHITE:{
      Color_Bytes[byte_index]=GPIO_PIN_RESET;
 800069e:	2108      	movs	r1, #8
 80006a0:	187a      	adds	r2, r7, r1
 80006a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006a4:	18d3      	adds	r3, r2, r3
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
      Color_Bytes[byte_index-1]=GPIO_PIN_RESET;
 80006aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006ac:	3b01      	subs	r3, #1
 80006ae:	0008      	movs	r0, r1
 80006b0:	187a      	adds	r2, r7, r1
 80006b2:	2100      	movs	r1, #0
 80006b4:	54d1      	strb	r1, [r2, r3]
      Color_Bytes[byte_index-2]=GPIO_PIN_RESET;
 80006b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006b8:	3b02      	subs	r3, #2
 80006ba:	183a      	adds	r2, r7, r0
 80006bc:	2100      	movs	r1, #0
 80006be:	54d1      	strb	r1, [r2, r3]
      break;
 80006c0:	46c0      	nop			@ (mov r8, r8)
    }
    }
    color_index++;
 80006c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006c4:	3301      	adds	r3, #1
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    byte_index-=3;
 80006c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006ca:	3b03      	subs	r3, #3
 80006cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  while(color_index<16) {
 80006ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	dc00      	bgt.n	80006d6 <LED_Display_Color+0x172>
 80006d4:	e759      	b.n	800058a <LED_Display_Color+0x26>
  }
  LED_Display_6Byte_SPI(Color_Bytes);
 80006d6:	2308      	movs	r3, #8
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff ff14 	bl	8000508 <LED_Display_6Byte_SPI>
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b010      	add	sp, #64	@ 0x40
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	08003968 	.word	0x08003968

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b089      	sub	sp, #36	@ 0x24
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 fbeb 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f82f 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 f987 	bl	8000a0c <MX_GPIO_Init>
  MX_SPI1_Init();
 80006fe:	f000 f8f9 	bl	80008f4 <MX_SPI1_Init>
  MX_RTC_Init();
 8000702:	f000 f881 	bl	8000808 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000706:	f000 f933 	bl	8000970 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LED_Init();
 800070a:	f7ff fe6f 	bl	80003ec <LED_Init>


  LED_Color color[16]={PINK,PINK,PINK,PINK,PINK,PINK,PINK,PINK,PINK,PINK,PINK,PINK,PINK,PINK,PINK,PINK};
 800070e:	2310      	movs	r3, #16
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <main+0x68>)
 8000714:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000716:	c313      	stmia	r3!, {r0, r1, r4}
 8000718:	6812      	ldr	r2, [r2, #0]
 800071a:	601a      	str	r2, [r3, #0]
  LED_Color red[16] = {1,1,1,1,1,1};
 800071c:	003b      	movs	r3, r7
 800071e:	0018      	movs	r0, r3
 8000720:	2310      	movs	r3, #16
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f003 f8df 	bl	80038e8 <memset>
 800072a:	003b      	movs	r3, r7
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	003b      	movs	r3, r7
 8000732:	2201      	movs	r2, #1
 8000734:	705a      	strb	r2, [r3, #1]
 8000736:	003b      	movs	r3, r7
 8000738:	2201      	movs	r2, #1
 800073a:	709a      	strb	r2, [r3, #2]
 800073c:	003b      	movs	r3, r7
 800073e:	2201      	movs	r2, #1
 8000740:	70da      	strb	r2, [r3, #3]
 8000742:	003b      	movs	r3, r7
 8000744:	2201      	movs	r2, #1
 8000746:	711a      	strb	r2, [r3, #4]
 8000748:	003b      	movs	r3, r7
 800074a:	2201      	movs	r2, #1
 800074c:	715a      	strb	r2, [r3, #5]
//LED_Display_Color(red);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	e7fd      	b.n	800074e <main+0x62>
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	08003958 	.word	0x08003958

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b093      	sub	sp, #76	@ 0x4c
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	2414      	movs	r4, #20
 8000760:	193b      	adds	r3, r7, r4
 8000762:	0018      	movs	r0, r3
 8000764:	2334      	movs	r3, #52	@ 0x34
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f003 f8bd 	bl	80038e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	0018      	movs	r0, r3
 8000772:	2310      	movs	r3, #16
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f003 f8b6 	bl	80038e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2380      	movs	r3, #128	@ 0x80
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	0018      	movs	r0, r3
 8000782:	f000 febd 	bl	8001500 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2209      	movs	r2, #9
 800078a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	22a0      	movs	r2, #160	@ 0xa0
 8000790:	02d2      	lsls	r2, r2, #11
 8000792:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000794:	0021      	movs	r1, r4
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2201      	movs	r2, #1
 800079a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2202      	movs	r2, #2
 80007a0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2203      	movs	r2, #3
 80007a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2210      	movs	r2, #16
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	0292      	lsls	r2, r2, #10
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	22e0      	movs	r2, #224	@ 0xe0
 80007c0:	0612      	lsls	r2, r2, #24
 80007c2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fee6 	bl	8001598 <HAL_RCC_OscConfig>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007d0:	f000 f986 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2207      	movs	r2, #7
 80007d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2202      	movs	r2, #2
 80007de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2100      	movs	r1, #0
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 f9e1 	bl	8001bb8 <HAL_RCC_ClockConfig>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007fa:	f000 f971 	bl	8000ae0 <Error_Handler>
  }
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b013      	add	sp, #76	@ 0x4c
 8000804:	bd90      	pop	{r4, r7, pc}
	...

08000808 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	0018      	movs	r0, r3
 8000812:	2314      	movs	r3, #20
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f003 f866 	bl	80038e8 <memset>
  RTC_DateTypeDef sDate = {0};
 800081c:	003b      	movs	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000822:	4b32      	ldr	r3, [pc, #200]	@ (80008ec <MX_RTC_Init+0xe4>)
 8000824:	4a32      	ldr	r2, [pc, #200]	@ (80008f0 <MX_RTC_Init+0xe8>)
 8000826:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000828:	4b30      	ldr	r3, [pc, #192]	@ (80008ec <MX_RTC_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800082e:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <MX_RTC_Init+0xe4>)
 8000830:	227f      	movs	r2, #127	@ 0x7f
 8000832:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000834:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <MX_RTC_Init+0xe4>)
 8000836:	22ff      	movs	r2, #255	@ 0xff
 8000838:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800083a:	4b2c      	ldr	r3, [pc, #176]	@ (80008ec <MX_RTC_Init+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000840:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <MX_RTC_Init+0xe4>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000846:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <MX_RTC_Init+0xe4>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <MX_RTC_Init+0xe4>)
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	05d2      	lsls	r2, r2, #23
 8000852:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000854:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <MX_RTC_Init+0xe4>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800085a:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <MX_RTC_Init+0xe4>)
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fc7b 	bl	8002158 <HAL_RTC_Init>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000866:	f000 f93b 	bl	8000ae0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2217      	movs	r2, #23
 800086e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800088e:	1d39      	adds	r1, r7, #4
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_RTC_Init+0xe4>)
 8000892:	2201      	movs	r2, #1
 8000894:	0018      	movs	r0, r3
 8000896:	f001 fd01 	bl	800229c <HAL_RTC_SetTime>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800089e:	f000 f91f 	bl	8000ae0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008a2:	003b      	movs	r3, r7
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JULY;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2207      	movs	r2, #7
 80008ac:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x8;
 80008ae:	003b      	movs	r3, r7
 80008b0:	2208      	movs	r2, #8
 80008b2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 80008b4:	003b      	movs	r3, r7
 80008b6:	2224      	movs	r2, #36	@ 0x24
 80008b8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008ba:	0039      	movs	r1, r7
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_RTC_Init+0xe4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fd93 	bl	80023ec <HAL_RTC_SetDate>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80008ca:	f000 f909 	bl	8000ae0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_RTC_Init+0xe4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 feef 	bl	80026b8 <HAL_RTCEx_SetWakeUpTimer>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_RTC_Init+0xda>
  {
    Error_Handler();
 80008de:	f000 f8ff 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b006      	add	sp, #24
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	20000678 	.word	0x20000678
 80008f0:	40002800 	.word	0x40002800

080008f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_SPI1_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	@ (800096c <MX_SPI1_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_SPI1_Init+0x74>)
 8000900:	2282      	movs	r2, #130	@ 0x82
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_SPI1_Init+0x74>)
 800090e:	22e0      	movs	r2, #224	@ 0xe0
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_SPI1_Init+0x74>)
 8000922:	2280      	movs	r2, #128	@ 0x80
 8000924:	0092      	lsls	r2, r2, #2
 8000926:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_SPI1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_SPI1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_SPI1_Init+0x74>)
 8000942:	2207      	movs	r2, #7
 8000944:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_SPI1_Init+0x74>)
 800094e:	2208      	movs	r2, #8
 8000950:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000952:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <MX_SPI1_Init+0x74>)
 8000954:	0018      	movs	r0, r3
 8000956:	f001 ff2b 	bl	80027b0 <HAL_SPI_Init>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 f8bf 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200006a4 	.word	0x200006a4
 800096c:	40013000 	.word	0x40013000

08000970 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000974:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 8000976:	4a24      	ldr	r2, [pc, #144]	@ (8000a08 <MX_USART1_UART_Init+0x98>)
 8000978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097a:	4b22      	ldr	r3, [pc, #136]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 800097c:	22e1      	movs	r2, #225	@ 0xe1
 800097e:	0252      	lsls	r2, r2, #9
 8000980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 fa86 	bl	8002ecc <HAL_UART_Init>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c4:	f000 f88c 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 80009ca:	2100      	movs	r1, #0
 80009cc:	0018      	movs	r0, r3
 80009ce:	f002 feab 	bl	8003728 <HAL_UARTEx_SetTxFifoThreshold>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009d6:	f000 f883 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 80009dc:	2100      	movs	r1, #0
 80009de:	0018      	movs	r0, r3
 80009e0:	f002 fee2 	bl	80037a8 <HAL_UARTEx_SetRxFifoThreshold>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e8:	f000 f87a 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f002 fe60 	bl	80036b4 <HAL_UARTEx_DisableFifoMode>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f8:	f000 f872 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	20000708 	.word	0x20000708
 8000a08:	40013800 	.word	0x40013800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b089      	sub	sp, #36	@ 0x24
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	240c      	movs	r4, #12
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	0018      	movs	r0, r3
 8000a18:	2314      	movs	r3, #20
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f002 ff63 	bl	80038e8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a28:	2104      	movs	r1, #4
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a32:	2204      	movs	r2, #4
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a58:	2102      	movs	r1, #2
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a62:	2202      	movs	r2, #2
 8000a64:	4013      	ands	r3, r2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin, GPIO_PIN_RESET);
 8000a6a:	23a0      	movs	r3, #160	@ 0xa0
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2158      	movs	r1, #88	@ 0x58
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fcf2 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_OUT_EN_Pin LED_OUT_CLK_Pin LED_IN_RST_Pin */
  GPIO_InitStruct.Pin = LED_OUT_EN_Pin|LED_OUT_CLK_Pin|LED_IN_RST_Pin;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2258      	movs	r2, #88	@ 0x58
 8000a7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2201      	movs	r2, #1
 8000a82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	193a      	adds	r2, r7, r4
 8000a92:	23a0      	movs	r3, #160	@ 0xa0
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fb7b 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : detect_Pin */
  GPIO_InitStruct.Pin = detect_Pin;
 8000a9e:	0021      	movs	r1, r4
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2284      	movs	r2, #132	@ 0x84
 8000aaa:	0392      	lsls	r2, r2, #14
 8000aac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(detect_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	4a09      	ldr	r2, [pc, #36]	@ (8000adc <MX_GPIO_Init+0xd0>)
 8000ab8:	0019      	movs	r1, r3
 8000aba:	0010      	movs	r0, r2
 8000abc:	f000 fb6a 	bl	8001194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2005      	movs	r0, #5
 8000ac6:	f000 fb33 	bl	8001130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000aca:	2005      	movs	r0, #5
 8000acc:	f000 fb45 	bl	800115a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b009      	add	sp, #36	@ 0x24
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	50000400 	.word	0x50000400

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <HAL_MspInit+0x44>)
 8000af4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_MspInit+0x44>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	430a      	orrs	r2, r1
 8000afc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <HAL_MspInit+0x44>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	2201      	movs	r2, #1
 8000b04:	4013      	ands	r3, r2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <HAL_MspInit+0x44>)
 8000b0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_MspInit+0x44>)
 8000b10:	2180      	movs	r1, #128	@ 0x80
 8000b12:	0549      	lsls	r1, r1, #21
 8000b14:	430a      	orrs	r2, r1
 8000b16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <HAL_MspInit+0x44>)
 8000b1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b1c:	2380      	movs	r3, #128	@ 0x80
 8000b1e:	055b      	lsls	r3, r3, #21
 8000b20:	4013      	ands	r3, r2
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b08b      	sub	sp, #44	@ 0x2c
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b3c:	2410      	movs	r4, #16
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	0018      	movs	r0, r3
 8000b42:	2318      	movs	r3, #24
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f002 fece 	bl	80038e8 <memset>
  if(hrtc->Instance==RTC)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a15      	ldr	r2, [pc, #84]	@ (8000ba8 <HAL_RTC_MspInit+0x74>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d124      	bne.n	8000ba0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2280      	movs	r2, #128	@ 0x80
 8000b5a:	0292      	lsls	r2, r2, #10
 8000b5c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2280      	movs	r2, #128	@ 0x80
 8000b62:	0092      	lsls	r2, r2, #2
 8000b64:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 f9cf 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b72:	f7ff ffb5 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <HAL_RTC_MspInit+0x78>)
 8000b78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <HAL_RTC_MspInit+0x78>)
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	0209      	lsls	r1, r1, #8
 8000b80:	430a      	orrs	r2, r1
 8000b82:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <HAL_RTC_MspInit+0x78>)
 8000b86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <HAL_RTC_MspInit+0x78>)
 8000b8a:	2180      	movs	r1, #128	@ 0x80
 8000b8c:	00c9      	lsls	r1, r1, #3
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_RTC_MspInit+0x78>)
 8000b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b96:	2380      	movs	r3, #128	@ 0x80
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b00b      	add	sp, #44	@ 0x2c
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	40002800 	.word	0x40002800
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b08b      	sub	sp, #44	@ 0x2c
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	2414      	movs	r4, #20
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f002 fe90 	bl	80038e8 <memset>
  if(hspi->Instance==SPI1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <HAL_SPI_MspInit+0x8c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d130      	bne.n	8000c34 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <HAL_SPI_MspInit+0x90>)
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_SPI_MspInit+0x90>)
 8000bd8:	2180      	movs	r1, #128	@ 0x80
 8000bda:	0149      	lsls	r1, r1, #5
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	641a      	str	r2, [r3, #64]	@ 0x40
 8000be0:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <HAL_SPI_MspInit+0x90>)
 8000be2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	015b      	lsls	r3, r3, #5
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <HAL_SPI_MspInit+0x90>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <HAL_SPI_MspInit+0x90>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <HAL_SPI_MspInit+0x90>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = LED_MOSI_Pin|LED_SCK_Pin;
 8000c06:	0021      	movs	r1, r4
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2224      	movs	r2, #36	@ 0x24
 8000c0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2202      	movs	r2, #2
 8000c12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	187a      	adds	r2, r7, r1
 8000c28:	23a0      	movs	r3, #160	@ 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	0011      	movs	r1, r2
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fab0 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b00b      	add	sp, #44	@ 0x2c
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	40013000 	.word	0x40013000
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b091      	sub	sp, #68	@ 0x44
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	232c      	movs	r3, #44	@ 0x2c
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	0018      	movs	r0, r3
 8000c52:	2314      	movs	r3, #20
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f002 fe46 	bl	80038e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	2414      	movs	r4, #20
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	0018      	movs	r0, r3
 8000c62:	2318      	movs	r3, #24
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f002 fe3e 	bl	80038e8 <memset>
  if(huart->Instance==USART1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a23      	ldr	r2, [pc, #140]	@ (8000d00 <HAL_UART_MspInit+0xbc>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d13f      	bne.n	8000cf6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	0018      	movs	r0, r3
 8000c86:	f001 f941 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c8e:	f7ff ff27 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <HAL_UART_MspInit+0xc0>)
 8000c94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c96:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <HAL_UART_MspInit+0xc0>)
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	01c9      	lsls	r1, r1, #7
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <HAL_UART_MspInit+0xc0>)
 8000ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	01db      	lsls	r3, r3, #7
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_UART_MspInit+0xc0>)
 8000cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_UART_MspInit+0xc0>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_UART_MspInit+0xc0>)
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc6:	212c      	movs	r1, #44	@ 0x2c
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	22c0      	movs	r2, #192	@ 0xc0
 8000ccc:	00d2      	lsls	r2, r2, #3
 8000cce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	187a      	adds	r2, r7, r1
 8000cea:	23a0      	movs	r3, #160	@ 0xa0
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fa4f 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b011      	add	sp, #68	@ 0x44
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	40013800 	.word	0x40013800
 8000d04:	40021000 	.word	0x40021000

08000d08 <caculate_rad>:
		123, 126, 129, 132, 135, 138, 141, 144, 147, 150
	
	}
};
void caculate_rad(int counter)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	rad = 360 / (counter);
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	23b4      	movs	r3, #180	@ 0xb4
 8000d14:	0058      	lsls	r0, r3, #1
 8000d16:	f7ff fa7d 	bl	8000214 <__divsi3>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <caculate_rad+0x24>)
 8000d20:	601a      	str	r2, [r3, #0]
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	200007a8 	.word	0x200007a8

08000d30 <caculate_theta>:
void caculate_theta(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	theta = now_counter * rad;
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <caculate_theta+0x18>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <caculate_theta+0x1c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	435a      	muls	r2, r3
 8000d3e:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <caculate_theta+0x20>)
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200007a0 	.word	0x200007a0
 8000d4c:	200007a8 	.word	0x200007a8
 8000d50:	200007a4 	.word	0x200007a4

08000d54 <HAL_GPIO_EXTI_Falling_Callback>:
/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	1dbb      	adds	r3, r7, #6
 8000d5e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin != detect_Pin)
 8000d60:	1dbb      	adds	r3, r7, #6
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d116      	bne.n	8000d96 <HAL_GPIO_EXTI_Falling_Callback+0x42>
	{
		return;
	}
	if (now_counter > 1)
 8000d68:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	dd13      	ble.n	8000d98 <HAL_GPIO_EXTI_Falling_Callback+0x44>
	{
		counter = now_counter;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8000d76:	601a      	str	r2, [r3, #0]
		caculate_rad(counter);
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ffc3 	bl	8000d08 <caculate_rad>
		now_counter = 0;
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
		flag_flag = 0;
 8000d88:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
		row = 0;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_EXTI_Falling_Callback+0x44>
		return;
 8000d96:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	200007a0 	.word	0x200007a0
 8000da4:	2000079c 	.word	0x2000079c
 8000da8:	200007b0 	.word	0x200007b0
 8000dac:	200007ac 	.word	0x200007ac

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
 HAL_IncTick();
 8000dd8:	f000 f8e2 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
 now_counter++;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <SysTick_Handler+0x70>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <SysTick_Handler+0x70>)
 8000de4:	601a      	str	r2, [r3, #0]
 
 caculate_theta();
 8000de6:	f7ff ffa3 	bl	8000d30 <caculate_theta>
 if (flag_flag == 0 && theta >0 && theta <=30)
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <SysTick_Handler+0x74>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10a      	bne.n	8000e08 <SysTick_Handler+0x34>
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <SysTick_Handler+0x78>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	dd06      	ble.n	8000e08 <SysTick_Handler+0x34>
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <SysTick_Handler+0x78>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b1e      	cmp	r3, #30
 8000e00:	dc02      	bgt.n	8000e08 <SysTick_Handler+0x34>
 {
	flag_flag = 1;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <SysTick_Handler+0x74>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
 }
 if (flag_flag == 1)
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <SysTick_Handler+0x74>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d115      	bne.n	8000e3c <SysTick_Handler+0x68>
 {
	if (row < 10)
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <SysTick_Handler+0x7c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b09      	cmp	r3, #9
 8000e16:	dc0d      	bgt.n	8000e34 <SysTick_Handler+0x60>
	{
		LED_Display_Color(digit[0][row]);
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <SysTick_Handler+0x7c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	011a      	lsls	r2, r3, #4
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <SysTick_Handler+0x80>)
 8000e20:	18d3      	adds	r3, r2, r3
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fb9e 	bl	8000564 <LED_Display_Color>
		row++;
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <SysTick_Handler+0x7c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <SysTick_Handler+0x7c>)
 8000e30:	601a      	str	r2, [r3, #0]
//  show_num(0, 1);
//  show_num(1, 2);
//  show_num(4, 5);

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e32:	e003      	b.n	8000e3c <SysTick_Handler+0x68>
		LED_Display_Color(close);
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <SysTick_Handler+0x84>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff fb94 	bl	8000564 <LED_Display_Color>
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	200007a0 	.word	0x200007a0
 8000e48:	200007b0 	.word	0x200007b0
 8000e4c:	200007a4 	.word	0x200007a4
 8000e50:	200007ac 	.word	0x200007ac
 8000e54:	20000010 	.word	0x20000010
 8000e58:	20000000 	.word	0x20000000

08000e5c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(detect_Pin);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 fb19 	bl	8001498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  //LED_Display_Color(color);
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e78:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e7c:	f7ff fff6 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	@ (8000eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <LoopForever+0xe>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec4 <LoopForever+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ea6:	f002 fd27 	bl	80038f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000eaa:	f7ff fc1f 	bl	80006ec <main>

08000eae <LoopForever>:

LoopForever:
  b LoopForever
 8000eae:	e7fe      	b.n	8000eae <LoopForever>
  ldr   r0, =_estack
 8000eb0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	2000065c 	.word	0x2000065c
  ldr r2, =_sidata
 8000ebc:	08003a18 	.word	0x08003a18
  ldr r2, =_sbss
 8000ec0:	2000065c 	.word	0x2000065c
  ldr r4, =_ebss
 8000ec4:	200007b8 	.word	0x200007b8

08000ec8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC1_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <HAL_Init+0x3c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_Init+0x3c>)
 8000ede:	2180      	movs	r1, #128	@ 0x80
 8000ee0:	0049      	lsls	r1, r1, #1
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 f810 	bl	8000f0c <HAL_InitTick>
 8000eec:	1e03      	subs	r3, r0, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e001      	b.n	8000efc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fdf8 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <HAL_InitTick+0x88>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d02b      	beq.n	8000f7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f24:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <HAL_InitTick+0x8c>)
 8000f26:	681c      	ldr	r4, [r3, #0]
 8000f28:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <HAL_InitTick+0x88>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	23fa      	movs	r3, #250	@ 0xfa
 8000f30:	0098      	lsls	r0, r3, #2
 8000f32:	f7ff f8e5 	bl	8000100 <__udivsi3>
 8000f36:	0003      	movs	r3, r0
 8000f38:	0019      	movs	r1, r3
 8000f3a:	0020      	movs	r0, r4
 8000f3c:	f7ff f8e0 	bl	8000100 <__udivsi3>
 8000f40:	0003      	movs	r3, r0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f919 	bl	800117a <HAL_SYSTICK_Config>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d112      	bne.n	8000f72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d80a      	bhi.n	8000f68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	2301      	movs	r3, #1
 8000f56:	425b      	negs	r3, r3
 8000f58:	2200      	movs	r2, #0
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 f8e8 	bl	8001130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <HAL_InitTick+0x90>)
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e00d      	b.n	8000f84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e008      	b.n	8000f84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f72:	230f      	movs	r3, #15
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e003      	b.n	8000f84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	781b      	ldrb	r3, [r3, #0]
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b005      	add	sp, #20
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	20000658 	.word	0x20000658
 8000f98:	20000650 	.word	0x20000650
 8000f9c:	20000654 	.word	0x20000654

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	001a      	movs	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	18d2      	adds	r2, r2, r3
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	20000658 	.word	0x20000658
 8000fc0:	200007b4 	.word	0x200007b4

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b02      	ldr	r3, [pc, #8]	@ (8000fd4 <HAL_GetTick+0x10>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	200007b4 	.word	0x200007b4

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fea:	d809      	bhi.n	8001000 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fec:	1dfb      	adds	r3, r7, #7
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	231f      	movs	r3, #31
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__NVIC_EnableIRQ+0x30>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4091      	lsls	r1, r2
 8000ffc:	000a      	movs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	0002      	movs	r2, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001020:	d828      	bhi.n	8001074 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001022:	4a2f      	ldr	r2, [pc, #188]	@ (80010e0 <__NVIC_SetPriority+0xd4>)
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	33c0      	adds	r3, #192	@ 0xc0
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	589b      	ldr	r3, [r3, r2]
 8001032:	1dfa      	adds	r2, r7, #7
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	0011      	movs	r1, r2
 8001038:	2203      	movs	r2, #3
 800103a:	400a      	ands	r2, r1
 800103c:	00d2      	lsls	r2, r2, #3
 800103e:	21ff      	movs	r1, #255	@ 0xff
 8001040:	4091      	lsls	r1, r2
 8001042:	000a      	movs	r2, r1
 8001044:	43d2      	mvns	r2, r2
 8001046:	401a      	ands	r2, r3
 8001048:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	019b      	lsls	r3, r3, #6
 800104e:	22ff      	movs	r2, #255	@ 0xff
 8001050:	401a      	ands	r2, r3
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0018      	movs	r0, r3
 8001058:	2303      	movs	r3, #3
 800105a:	4003      	ands	r3, r0
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001060:	481f      	ldr	r0, [pc, #124]	@ (80010e0 <__NVIC_SetPriority+0xd4>)
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b25b      	sxtb	r3, r3
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	430a      	orrs	r2, r1
 800106c:	33c0      	adds	r3, #192	@ 0xc0
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001072:	e031      	b.n	80010d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <__NVIC_SetPriority+0xd8>)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	0019      	movs	r1, r3
 800107c:	230f      	movs	r3, #15
 800107e:	400b      	ands	r3, r1
 8001080:	3b08      	subs	r3, #8
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3306      	adds	r3, #6
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	18d3      	adds	r3, r2, r3
 800108a:	3304      	adds	r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1dfa      	adds	r2, r7, #7
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	0011      	movs	r1, r2
 8001094:	2203      	movs	r2, #3
 8001096:	400a      	ands	r2, r1
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	21ff      	movs	r1, #255	@ 0xff
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	43d2      	mvns	r2, r2
 80010a2:	401a      	ands	r2, r3
 80010a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	22ff      	movs	r2, #255	@ 0xff
 80010ac:	401a      	ands	r2, r3
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	0018      	movs	r0, r3
 80010b4:	2303      	movs	r3, #3
 80010b6:	4003      	ands	r3, r0
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <__NVIC_SetPriority+0xd8>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	001c      	movs	r4, r3
 80010c4:	230f      	movs	r3, #15
 80010c6:	4023      	ands	r3, r4
 80010c8:	3b08      	subs	r3, #8
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	430a      	orrs	r2, r1
 80010ce:	3306      	adds	r3, #6
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	18c3      	adds	r3, r0, r3
 80010d4:	3304      	adds	r3, #4
 80010d6:	601a      	str	r2, [r3, #0]
}
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b003      	add	sp, #12
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	045b      	lsls	r3, r3, #17
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d301      	bcc.n	8001100 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fc:	2301      	movs	r3, #1
 80010fe:	e010      	b.n	8001122 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <SysTick_Config+0x44>)
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	3a01      	subs	r2, #1
 8001106:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001108:	2301      	movs	r3, #1
 800110a:	425b      	negs	r3, r3
 800110c:	2103      	movs	r1, #3
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff ff7c 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <SysTick_Config+0x44>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <SysTick_Config+0x44>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	210f      	movs	r1, #15
 800113c:	187b      	adds	r3, r7, r1
 800113e:	1c02      	adds	r2, r0, #0
 8001140:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	187b      	adds	r3, r7, r1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b004      	add	sp, #16
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	0002      	movs	r2, r0
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b25b      	sxtb	r3, r3
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff ff33 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff ffaf 	bl	80010e8 <SysTick_Config>
 800118a:	0003      	movs	r3, r0
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e147      	b.n	8001434 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4091      	lsls	r1, r2
 80011ae:	000a      	movs	r2, r1
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d100      	bne.n	80011bc <HAL_GPIO_Init+0x28>
 80011ba:	e138      	b.n	800142e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d005      	beq.n	80011d4 <HAL_GPIO_Init+0x40>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d130      	bne.n	8001236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120a:	2201      	movs	r2, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	2201      	movs	r2, #1
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2203      	movs	r2, #3
 800123c:	4013      	ands	r3, r2
 800123e:	2b03      	cmp	r3, #3
 8001240:	d017      	beq.n	8001272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	4013      	ands	r3, r2
 800127a:	2b02      	cmp	r3, #2
 800127c:	d123      	bne.n	80012c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	58d3      	ldr	r3, [r2, r3]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2207      	movs	r2, #7
 8001290:	4013      	ands	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2107      	movs	r1, #7
 80012aa:	400b      	ands	r3, r1
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	6939      	ldr	r1, [r7, #16]
 80012c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	401a      	ands	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	23c0      	movs	r3, #192	@ 0xc0
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d100      	bne.n	8001308 <HAL_GPIO_Init+0x174>
 8001306:	e092      	b.n	800142e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001308:	4a50      	ldr	r2, [pc, #320]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3318      	adds	r3, #24
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	589b      	ldr	r3, [r3, r2]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2203      	movs	r2, #3
 800131a:	4013      	ands	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	220f      	movs	r2, #15
 8001320:	409a      	lsls	r2, r3
 8001322:	0013      	movs	r3, r2
 8001324:	43da      	mvns	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	23a0      	movs	r3, #160	@ 0xa0
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	429a      	cmp	r2, r3
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x1ca>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a45      	ldr	r2, [pc, #276]	@ (8001450 <HAL_GPIO_Init+0x2bc>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x1c6>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a44      	ldr	r2, [pc, #272]	@ (8001454 <HAL_GPIO_Init+0x2c0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x1c2>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a43      	ldr	r2, [pc, #268]	@ (8001458 <HAL_GPIO_Init+0x2c4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x1be>
 800134e:	2303      	movs	r3, #3
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x1cc>
 8001352:	2305      	movs	r3, #5
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x1cc>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x1cc>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x1cc>
 800135e:	2300      	movs	r3, #0
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	2103      	movs	r1, #3
 8001364:	400a      	ands	r2, r1
 8001366:	00d2      	lsls	r2, r2, #3
 8001368:	4093      	lsls	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001370:	4936      	ldr	r1, [pc, #216]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3318      	adds	r3, #24
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800137e:	4b33      	ldr	r3, [pc, #204]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43da      	mvns	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	035b      	lsls	r3, r3, #13
 8001396:	4013      	ands	r3, r2
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013a8:	4b28      	ldr	r3, [pc, #160]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43da      	mvns	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	039b      	lsls	r3, r3, #14
 80013c0:	4013      	ands	r3, r2
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013d2:	4a1e      	ldr	r2, [pc, #120]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 80013d4:	2384      	movs	r3, #132	@ 0x84
 80013d6:	58d3      	ldr	r3, [r2, r3]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43da      	mvns	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	029b      	lsls	r3, r3, #10
 80013ec:	4013      	ands	r3, r2
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f8:	4914      	ldr	r1, [pc, #80]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 80013fa:	2284      	movs	r2, #132	@ 0x84
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001400:	4a12      	ldr	r2, [pc, #72]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 8001402:	2380      	movs	r3, #128	@ 0x80
 8001404:	58d3      	ldr	r3, [r2, r3]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43da      	mvns	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	025b      	lsls	r3, r3, #9
 800141a:	4013      	ands	r3, r2
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001426:	4909      	ldr	r1, [pc, #36]	@ (800144c <HAL_GPIO_Init+0x2b8>)
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	40da      	lsrs	r2, r3
 800143c:	1e13      	subs	r3, r2, #0
 800143e:	d000      	beq.n	8001442 <HAL_GPIO_Init+0x2ae>
 8001440:	e6b0      	b.n	80011a4 <HAL_GPIO_Init+0x10>
  }
}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	46c0      	nop			@ (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b006      	add	sp, #24
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021800 	.word	0x40021800
 8001450:	50000400 	.word	0x50000400
 8001454:	50000800 	.word	0x50000800
 8001458:	50000c00 	.word	0x50000c00

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	0008      	movs	r0, r1
 8001466:	0011      	movs	r1, r2
 8001468:	1cbb      	adds	r3, r7, #2
 800146a:	1c02      	adds	r2, r0, #0
 800146c:	801a      	strh	r2, [r3, #0]
 800146e:	1c7b      	adds	r3, r7, #1
 8001470:	1c0a      	adds	r2, r1, #0
 8001472:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001474:	1c7b      	adds	r3, r7, #1
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147c:	1cbb      	adds	r3, r7, #2
 800147e:	881a      	ldrh	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	1cbb      	adds	r3, r7, #2
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	0002      	movs	r2, r0
 80014a0:	1dbb      	adds	r3, r7, #6
 80014a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	1dba      	adds	r2, r7, #6
 80014aa:	8812      	ldrh	r2, [r2, #0]
 80014ac:	4013      	ands	r3, r2
 80014ae:	d008      	beq.n	80014c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80014b0:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80014b2:	1dba      	adds	r2, r7, #6
 80014b4:	8812      	ldrh	r2, [r2, #0]
 80014b6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80014b8:	1dbb      	adds	r3, r7, #6
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	0018      	movs	r0, r3
 80014be:	f000 f815 	bl	80014ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	1dba      	adds	r2, r7, #6
 80014c8:	8812      	ldrh	r2, [r2, #0]
 80014ca:	4013      	ands	r3, r2
 80014cc:	d008      	beq.n	80014e0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80014d0:	1dba      	adds	r2, r7, #6
 80014d2:	8812      	ldrh	r2, [r2, #0]
 80014d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80014d6:	1dbb      	adds	r3, r7, #6
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff fc3a 	bl	8000d54 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80014e0:	46c0      	nop			@ (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b002      	add	sp, #8
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021800 	.word	0x40021800

080014ec <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	0002      	movs	r2, r0
 80014f4:	1dbb      	adds	r3, r7, #6
 80014f6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a19      	ldr	r2, [pc, #100]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	2380      	movs	r3, #128	@ 0x80
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	429a      	cmp	r2, r3
 8001522:	d11f      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	0013      	movs	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	189b      	adds	r3, r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4912      	ldr	r1, [pc, #72]	@ (800157c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001532:	0018      	movs	r0, r3
 8001534:	f7fe fde4 	bl	8000100 <__udivsi3>
 8001538:	0003      	movs	r3, r0
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800153e:	e008      	b.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3b01      	subs	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e001      	b.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e009      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	401a      	ands	r2, r3
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	429a      	cmp	r2, r3
 8001562:	d0ed      	beq.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	40007000 	.word	0x40007000
 8001574:	fffff9ff 	.word	0xfffff9ff
 8001578:	20000650 	.word	0x20000650
 800157c:	000f4240 	.word	0x000f4240

08001580 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	23e0      	movs	r3, #224	@ 0xe0
 800158a:	01db      	lsls	r3, r3, #7
 800158c:	4013      	ands	r3, r2
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e2f3      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4013      	ands	r3, r2
 80015b2:	d100      	bne.n	80015b6 <HAL_RCC_OscConfig+0x1e>
 80015b4:	e07c      	b.n	80016b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b6:	4bc3      	ldr	r3, [pc, #780]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2238      	movs	r2, #56	@ 0x38
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c0:	4bc0      	ldr	r3, [pc, #768]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	d102      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3e>
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d002      	beq.n	80015dc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d10b      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	4bb9      	ldr	r3, [pc, #740]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	029b      	lsls	r3, r3, #10
 80015e4:	4013      	ands	r3, r2
 80015e6:	d062      	beq.n	80016ae <HAL_RCC_OscConfig+0x116>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d15e      	bne.n	80016ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e2ce      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x78>
 8001600:	4bb0      	ldr	r3, [pc, #704]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4baf      	ldr	r3, [pc, #700]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001606:	2180      	movs	r1, #128	@ 0x80
 8001608:	0249      	lsls	r1, r1, #9
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e020      	b.n	8001652 <HAL_RCC_OscConfig+0xba>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	23a0      	movs	r3, #160	@ 0xa0
 8001616:	02db      	lsls	r3, r3, #11
 8001618:	429a      	cmp	r2, r3
 800161a:	d10e      	bne.n	800163a <HAL_RCC_OscConfig+0xa2>
 800161c:	4ba9      	ldr	r3, [pc, #676]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4ba8      	ldr	r3, [pc, #672]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001622:	2180      	movs	r1, #128	@ 0x80
 8001624:	02c9      	lsls	r1, r1, #11
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	4ba6      	ldr	r3, [pc, #664]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4ba5      	ldr	r3, [pc, #660]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001630:	2180      	movs	r1, #128	@ 0x80
 8001632:	0249      	lsls	r1, r1, #9
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0xba>
 800163a:	4ba2      	ldr	r3, [pc, #648]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4ba1      	ldr	r3, [pc, #644]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001640:	49a1      	ldr	r1, [pc, #644]	@ (80018c8 <HAL_RCC_OscConfig+0x330>)
 8001642:	400a      	ands	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	4b9f      	ldr	r3, [pc, #636]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b9e      	ldr	r3, [pc, #632]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800164c:	499f      	ldr	r1, [pc, #636]	@ (80018cc <HAL_RCC_OscConfig+0x334>)
 800164e:	400a      	ands	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d014      	beq.n	8001684 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7ff fcb3 	bl	8000fc4 <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fcae 	bl	8000fc4 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	@ 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e28d      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001676:	4b93      	ldr	r3, [pc, #588]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	029b      	lsls	r3, r3, #10
 800167e:	4013      	ands	r3, r2
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0xcc>
 8001682:	e015      	b.n	80016b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fc9e 	bl	8000fc4 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168e:	f7ff fc99 	bl	8000fc4 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	@ 0x64
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e278      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a0:	4b88      	ldr	r3, [pc, #544]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	4013      	ands	r3, r2
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0xf6>
 80016ac:	e000      	b.n	80016b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2202      	movs	r2, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d100      	bne.n	80016bc <HAL_RCC_OscConfig+0x124>
 80016ba:	e099      	b.n	80017f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016bc:	4b81      	ldr	r3, [pc, #516]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2238      	movs	r2, #56	@ 0x38
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c6:	4b7f      	ldr	r3, [pc, #508]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2203      	movs	r2, #3
 80016cc:	4013      	ands	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d102      	bne.n	80016dc <HAL_RCC_OscConfig+0x144>
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d002      	beq.n	80016e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d135      	bne.n	800174e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e2:	4b78      	ldr	r3, [pc, #480]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	2380      	movs	r3, #128	@ 0x80
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4013      	ands	r3, r2
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x162>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e24b      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b72      	ldr	r3, [pc, #456]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a74      	ldr	r2, [pc, #464]	@ (80018d0 <HAL_RCC_OscConfig+0x338>)
 8001700:	4013      	ands	r3, r2
 8001702:	0019      	movs	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	021a      	lsls	r2, r3, #8
 800170a:	4b6e      	ldr	r3, [pc, #440]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d112      	bne.n	800173c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001716:	4b6b      	ldr	r3, [pc, #428]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6e      	ldr	r2, [pc, #440]	@ (80018d4 <HAL_RCC_OscConfig+0x33c>)
 800171c:	4013      	ands	r3, r2
 800171e:	0019      	movs	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	4b67      	ldr	r3, [pc, #412]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800172a:	4b66      	ldr	r3, [pc, #408]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0adb      	lsrs	r3, r3, #11
 8001730:	2207      	movs	r2, #7
 8001732:	4013      	ands	r3, r2
 8001734:	4a68      	ldr	r2, [pc, #416]	@ (80018d8 <HAL_RCC_OscConfig+0x340>)
 8001736:	40da      	lsrs	r2, r3
 8001738:	4b68      	ldr	r3, [pc, #416]	@ (80018dc <HAL_RCC_OscConfig+0x344>)
 800173a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800173c:	4b68      	ldr	r3, [pc, #416]	@ (80018e0 <HAL_RCC_OscConfig+0x348>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff fbe3 	bl	8000f0c <HAL_InitTick>
 8001746:	1e03      	subs	r3, r0, #0
 8001748:	d051      	beq.n	80017ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e221      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d030      	beq.n	80017b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001756:	4b5b      	ldr	r3, [pc, #364]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5e      	ldr	r2, [pc, #376]	@ (80018d4 <HAL_RCC_OscConfig+0x33c>)
 800175c:	4013      	ands	r3, r2
 800175e:	0019      	movs	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	4b57      	ldr	r3, [pc, #348]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800176a:	4b56      	ldr	r3, [pc, #344]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b55      	ldr	r3, [pc, #340]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	0049      	lsls	r1, r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fc24 	bl	8000fc4 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff fc1f 	bl	8000fc4 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e1fe      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001794:	4b4b      	ldr	r3, [pc, #300]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4013      	ands	r3, r2
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b48      	ldr	r3, [pc, #288]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a4a      	ldr	r2, [pc, #296]	@ (80018d0 <HAL_RCC_OscConfig+0x338>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	021a      	lsls	r2, r3, #8
 80017b0:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	e01b      	b.n	80017f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017b8:	4b42      	ldr	r3, [pc, #264]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017be:	4949      	ldr	r1, [pc, #292]	@ (80018e4 <HAL_RCC_OscConfig+0x34c>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fbfe 	bl	8000fc4 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fbf9 	bl	8000fc4 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1d8      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e0:	4b38      	ldr	r3, [pc, #224]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4013      	ands	r3, r2
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x236>
 80017ec:	e000      	b.n	80017f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2208      	movs	r2, #8
 80017f6:	4013      	ands	r3, r2
 80017f8:	d047      	beq.n	800188a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017fa:	4b32      	ldr	r3, [pc, #200]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2238      	movs	r2, #56	@ 0x38
 8001800:	4013      	ands	r3, r2
 8001802:	2b18      	cmp	r3, #24
 8001804:	d10a      	bne.n	800181c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001806:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800180a:	2202      	movs	r2, #2
 800180c:	4013      	ands	r3, r2
 800180e:	d03c      	beq.n	800188a <HAL_RCC_OscConfig+0x2f2>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d138      	bne.n	800188a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e1ba      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d019      	beq.n	8001858 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001824:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001826:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001828:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800182a:	2101      	movs	r1, #1
 800182c:	430a      	orrs	r2, r1
 800182e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fbc8 	bl	8000fc4 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183a:	f7ff fbc3 	bl	8000fc4 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1a2      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800184e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001850:	2202      	movs	r2, #2
 8001852:	4013      	ands	r3, r2
 8001854:	d0f1      	beq.n	800183a <HAL_RCC_OscConfig+0x2a2>
 8001856:	e018      	b.n	800188a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001858:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800185a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 800185e:	2101      	movs	r1, #1
 8001860:	438a      	bics	r2, r1
 8001862:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fbae 	bl	8000fc4 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff fba9 	bl	8000fc4 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e188      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 8001882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001884:	2202      	movs	r2, #2
 8001886:	4013      	ands	r3, r2
 8001888:	d1f1      	bne.n	800186e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2204      	movs	r2, #4
 8001890:	4013      	ands	r3, r2
 8001892:	d100      	bne.n	8001896 <HAL_RCC_OscConfig+0x2fe>
 8001894:	e0c6      	b.n	8001a24 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001896:	231f      	movs	r3, #31
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2238      	movs	r2, #56	@ 0x38
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	d11e      	bne.n	80018e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d100      	bne.n	80018b6 <HAL_RCC_OscConfig+0x31e>
 80018b4:	e0b6      	b.n	8001a24 <HAL_RCC_OscConfig+0x48c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d000      	beq.n	80018c0 <HAL_RCC_OscConfig+0x328>
 80018be:	e0b1      	b.n	8001a24 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e166      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	fffeffff 	.word	0xfffeffff
 80018cc:	fffbffff 	.word	0xfffbffff
 80018d0:	ffff80ff 	.word	0xffff80ff
 80018d4:	ffffc7ff 	.word	0xffffc7ff
 80018d8:	00f42400 	.word	0x00f42400
 80018dc:	20000650 	.word	0x20000650
 80018e0:	20000654 	.word	0x20000654
 80018e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018e8:	4bac      	ldr	r3, [pc, #688]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 80018ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	055b      	lsls	r3, r3, #21
 80018f0:	4013      	ands	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x360>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x362>
 80018f8:	2300      	movs	r3, #0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d011      	beq.n	8001922 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4ba7      	ldr	r3, [pc, #668]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001900:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001902:	4ba6      	ldr	r3, [pc, #664]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	0549      	lsls	r1, r1, #21
 8001908:	430a      	orrs	r2, r1
 800190a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800190c:	4ba3      	ldr	r3, [pc, #652]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 800190e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	055b      	lsls	r3, r3, #21
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800191a:	231f      	movs	r3, #31
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001922:	4b9f      	ldr	r3, [pc, #636]	@ (8001ba0 <HAL_RCC_OscConfig+0x608>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4013      	ands	r3, r2
 800192c:	d11a      	bne.n	8001964 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800192e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ba0 <HAL_RCC_OscConfig+0x608>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b9b      	ldr	r3, [pc, #620]	@ (8001ba0 <HAL_RCC_OscConfig+0x608>)
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	0049      	lsls	r1, r1, #1
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800193c:	f7ff fb42 	bl	8000fc4 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001946:	f7ff fb3d 	bl	8000fc4 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e11c      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001958:	4b91      	ldr	r3, [pc, #580]	@ (8001ba0 <HAL_RCC_OscConfig+0x608>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4013      	ands	r3, r2
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x3e2>
 800196c:	4b8b      	ldr	r3, [pc, #556]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 800196e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001970:	4b8a      	ldr	r3, [pc, #552]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001978:	e01c      	b.n	80019b4 <HAL_RCC_OscConfig+0x41c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b05      	cmp	r3, #5
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x404>
 8001982:	4b86      	ldr	r3, [pc, #536]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001984:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001986:	4b85      	ldr	r3, [pc, #532]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001988:	2104      	movs	r1, #4
 800198a:	430a      	orrs	r2, r1
 800198c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800198e:	4b83      	ldr	r3, [pc, #524]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001990:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001992:	4b82      	ldr	r3, [pc, #520]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001994:	2101      	movs	r1, #1
 8001996:	430a      	orrs	r2, r1
 8001998:	65da      	str	r2, [r3, #92]	@ 0x5c
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0x41c>
 800199c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 800199e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019a0:	4b7e      	ldr	r3, [pc, #504]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 80019a2:	2101      	movs	r1, #1
 80019a4:	438a      	bics	r2, r1
 80019a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019a8:	4b7c      	ldr	r3, [pc, #496]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 80019aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019ac:	4b7b      	ldr	r3, [pc, #492]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 80019ae:	2104      	movs	r1, #4
 80019b0:	438a      	bics	r2, r1
 80019b2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d014      	beq.n	80019e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fb02 	bl	8000fc4 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c4:	e009      	b.n	80019da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff fafd 	bl	8000fc4 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	4a74      	ldr	r2, [pc, #464]	@ (8001ba4 <HAL_RCC_OscConfig+0x60c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0db      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019da:	4b70      	ldr	r3, [pc, #448]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 80019dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x42e>
 80019e4:	e013      	b.n	8001a0e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff faed 	bl	8000fc4 <HAL_GetTick>
 80019ea:	0003      	movs	r3, r0
 80019ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ee:	e009      	b.n	8001a04 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff fae8 	bl	8000fc4 <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba4 <HAL_RCC_OscConfig+0x60c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0c6      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a04:	4b65      	ldr	r3, [pc, #404]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a0e:	231f      	movs	r3, #31
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a18:	4b60      	ldr	r3, [pc, #384]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a1c:	4b5f      	ldr	r3, [pc, #380]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001a1e:	4962      	ldr	r1, [pc, #392]	@ (8001ba8 <HAL_RCC_OscConfig+0x610>)
 8001a20:	400a      	ands	r2, r1
 8001a22:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCC_OscConfig+0x496>
 8001a2c:	e0b0      	b.n	8001b90 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2238      	movs	r2, #56	@ 0x38
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d100      	bne.n	8001a3c <HAL_RCC_OscConfig+0x4a4>
 8001a3a:	e078      	b.n	8001b2e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d153      	bne.n	8001aec <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	4b55      	ldr	r3, [pc, #340]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b54      	ldr	r3, [pc, #336]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001a4a:	4958      	ldr	r1, [pc, #352]	@ (8001bac <HAL_RCC_OscConfig+0x614>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fab8 	bl	8000fc4 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7ff fab3 	bl	8000fc4 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e092      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	049b      	lsls	r3, r3, #18
 8001a74:	4013      	ands	r3, r2
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a78:	4b48      	ldr	r3, [pc, #288]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001bb0 <HAL_RCC_OscConfig+0x618>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	0449      	lsls	r1, r1, #17
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ab4:	4b39      	ldr	r3, [pc, #228]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b38      	ldr	r3, [pc, #224]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	0549      	lsls	r1, r1, #21
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fa7f 	bl	8000fc4 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff fa7a 	bl	8000fc4 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e059      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	4b2f      	ldr	r3, [pc, #188]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	049b      	lsls	r3, r3, #18
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x534>
 8001aea:	e051      	b.n	8001b90 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	4b2b      	ldr	r3, [pc, #172]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001af2:	492e      	ldr	r1, [pc, #184]	@ (8001bac <HAL_RCC_OscConfig+0x614>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fa64 	bl	8000fc4 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff fa5f 	bl	8000fc4 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e03e      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b14:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	049b      	lsls	r3, r3, #18
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001b20:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001b26:	4923      	ldr	r1, [pc, #140]	@ (8001bb4 <HAL_RCC_OscConfig+0x61c>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	e030      	b.n	8001b90 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e02b      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <HAL_RCC_OscConfig+0x604>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2203      	movs	r2, #3
 8001b44:	401a      	ands	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d11e      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2270      	movs	r2, #112	@ 0x70
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d117      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	23fe      	movs	r3, #254	@ 0xfe
 8001b60:	01db      	lsls	r3, r3, #7
 8001b62:	401a      	ands	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d10e      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	23f8      	movs	r3, #248	@ 0xf8
 8001b72:	039b      	lsls	r3, r3, #14
 8001b74:	401a      	ands	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d106      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	0f5b      	lsrs	r3, r3, #29
 8001b82:	075a      	lsls	r2, r3, #29
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b008      	add	sp, #32
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	00001388 	.word	0x00001388
 8001ba8:	efffffff 	.word	0xefffffff
 8001bac:	feffffff 	.word	0xfeffffff
 8001bb0:	1fc1808c 	.word	0x1fc1808c
 8001bb4:	effefffc 	.word	0xeffefffc

08001bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0e9      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b76      	ldr	r3, [pc, #472]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d91e      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b73      	ldr	r3, [pc, #460]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2207      	movs	r2, #7
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b70      	ldr	r3, [pc, #448]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bec:	f7ff f9ea 	bl	8000fc4 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7ff f9e5 	bl	8000fc4 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a6a      	ldr	r2, [pc, #424]	@ (8001dac <HAL_RCC_ClockConfig+0x1f4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e0ca      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c0a:	4b67      	ldr	r3, [pc, #412]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2207      	movs	r2, #7
 8001c10:	4013      	ands	r3, r2
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d015      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2204      	movs	r2, #4
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d006      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c2c:	4b60      	ldr	r3, [pc, #384]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b5f      	ldr	r3, [pc, #380]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	21e0      	movs	r1, #224	@ 0xe0
 8001c34:	01c9      	lsls	r1, r1, #7
 8001c36:	430a      	orrs	r2, r1
 8001c38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4a5d      	ldr	r2, [pc, #372]	@ (8001db4 <HAL_RCC_ClockConfig+0x1fc>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2201      	movs	r2, #1
 8001c54:	4013      	ands	r3, r2
 8001c56:	d057      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c60:	4b53      	ldr	r3, [pc, #332]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d12b      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e097      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c78:	4b4d      	ldr	r3, [pc, #308]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	049b      	lsls	r3, r3, #18
 8001c80:	4013      	ands	r3, r2
 8001c82:	d11f      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e08b      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c90:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	@ 0x80
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d113      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e07f      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca8:	4b41      	ldr	r3, [pc, #260]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cac:	2202      	movs	r2, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d108      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e074      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cba:	2202      	movs	r2, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e06d      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2207      	movs	r2, #7
 8001cca:	4393      	bics	r3, r2
 8001ccc:	0019      	movs	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4b37      	ldr	r3, [pc, #220]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd8:	f7ff f974 	bl	8000fc4 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce0:	e009      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce2:	f7ff f96f 	bl	8000fc4 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	4a2f      	ldr	r2, [pc, #188]	@ (8001dac <HAL_RCC_ClockConfig+0x1f4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e054      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2238      	movs	r2, #56	@ 0x38
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1ec      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d08:	4b27      	ldr	r3, [pc, #156]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	4013      	ands	r3, r2
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d21e      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d28:	f7ff f94c 	bl	8000fc4 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d32:	f7ff f947 	bl	8000fc4 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <HAL_RCC_ClockConfig+0x1f4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e02c      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d46:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5e:	4b14      	ldr	r3, [pc, #80]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <HAL_RCC_ClockConfig+0x200>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	0019      	movs	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d72:	f000 f829 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d76:	0001      	movs	r1, r0
 8001d78:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	220f      	movs	r2, #15
 8001d80:	401a      	ands	r2, r3
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <HAL_RCC_ClockConfig+0x204>)
 8001d84:	0092      	lsls	r2, r2, #2
 8001d86:	58d3      	ldr	r3, [r2, r3]
 8001d88:	221f      	movs	r2, #31
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	000a      	movs	r2, r1
 8001d8e:	40da      	lsrs	r2, r3
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <HAL_RCC_ClockConfig+0x208>)
 8001d92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_RCC_ClockConfig+0x20c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff f8b7 	bl	8000f0c <HAL_InitTick>
 8001d9e:	0003      	movs	r3, r0
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b004      	add	sp, #16
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40022000 	.word	0x40022000
 8001dac:	00001388 	.word	0x00001388
 8001db0:	40021000 	.word	0x40021000
 8001db4:	fffff0ff 	.word	0xfffff0ff
 8001db8:	ffff8fff 	.word	0xffff8fff
 8001dbc:	08003988 	.word	0x08003988
 8001dc0:	20000650 	.word	0x20000650
 8001dc4:	20000654 	.word	0x20000654

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dce:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2238      	movs	r2, #56	@ 0x38
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d10f      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001dd8:	4b39      	ldr	r3, [pc, #228]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0adb      	lsrs	r3, r3, #11
 8001dde:	2207      	movs	r2, #7
 8001de0:	4013      	ands	r3, r2
 8001de2:	2201      	movs	r2, #1
 8001de4:	409a      	lsls	r2, r3
 8001de6:	0013      	movs	r3, r2
 8001de8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dea:	6839      	ldr	r1, [r7, #0]
 8001dec:	4835      	ldr	r0, [pc, #212]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dee:	f7fe f987 	bl	8000100 <__udivsi3>
 8001df2:	0003      	movs	r3, r0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	e05d      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df8:	4b31      	ldr	r3, [pc, #196]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2238      	movs	r2, #56	@ 0x38
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e04:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	e054      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2238      	movs	r2, #56	@ 0x38
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d138      	bne.n	8001e88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e16:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e20:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	2207      	movs	r2, #7
 8001e28:	4013      	ands	r3, r2
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d10d      	bne.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	4824      	ldr	r0, [pc, #144]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e38:	f7fe f962 	bl	8000100 <__udivsi3>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	0019      	movs	r1, r3
 8001e40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	227f      	movs	r2, #127	@ 0x7f
 8001e48:	4013      	ands	r3, r2
 8001e4a:	434b      	muls	r3, r1
 8001e4c:	617b      	str	r3, [r7, #20]
        break;
 8001e4e:	e00d      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	481c      	ldr	r0, [pc, #112]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e54:	f7fe f954 	bl	8000100 <__udivsi3>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	227f      	movs	r2, #127	@ 0x7f
 8001e64:	4013      	ands	r3, r2
 8001e66:	434b      	muls	r3, r1
 8001e68:	617b      	str	r3, [r7, #20]
        break;
 8001e6a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0f5b      	lsrs	r3, r3, #29
 8001e72:	2207      	movs	r2, #7
 8001e74:	4013      	ands	r3, r2
 8001e76:	3301      	adds	r3, #1
 8001e78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	6978      	ldr	r0, [r7, #20]
 8001e7e:	f7fe f93f 	bl	8000100 <__udivsi3>
 8001e82:	0003      	movs	r3, r0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	e015      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2238      	movs	r2, #56	@ 0x38
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d103      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2238      	movs	r2, #56	@ 0x38
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b18      	cmp	r3, #24
 8001ea6:	d103      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ea8:	23fa      	movs	r3, #250	@ 0xfa
 8001eaa:	01db      	lsls	r3, r3, #7
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e001      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001eb4:	693b      	ldr	r3, [r7, #16]
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b006      	add	sp, #24
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	007a1200 	.word	0x007a1200

08001ecc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed0:	4b02      	ldr	r3, [pc, #8]	@ (8001edc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	20000650 	.word	0x20000650

08001ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ee4:	f7ff fff2 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001ee8:	0004      	movs	r4, r0
 8001eea:	f7ff fb49 	bl	8001580 <LL_RCC_GetAPB1Prescaler>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	0b1a      	lsrs	r2, r3, #12
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	58d3      	ldr	r3, [r2, r3]
 8001ef8:	221f      	movs	r2, #31
 8001efa:	4013      	ands	r3, r2
 8001efc:	40dc      	lsrs	r4, r3
 8001efe:	0023      	movs	r3, r4
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bdb0      	pop	{r4, r5, r7, pc}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	080039c8 	.word	0x080039c8

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f14:	2313      	movs	r3, #19
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f1c:	2312      	movs	r3, #18
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	029b      	lsls	r3, r3, #10
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f30:	e0a3      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2011      	movs	r0, #17
 8001f34:	183b      	adds	r3, r7, r0
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	055b      	lsls	r3, r3, #21
 8001f42:	4013      	ands	r3, r2
 8001f44:	d110      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b7c      	ldr	r3, [pc, #496]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f4c:	2180      	movs	r1, #128	@ 0x80
 8001f4e:	0549      	lsls	r1, r1, #21
 8001f50:	430a      	orrs	r2, r1
 8001f52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f54:	4b78      	ldr	r3, [pc, #480]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f58:	2380      	movs	r3, #128	@ 0x80
 8001f5a:	055b      	lsls	r3, r3, #21
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f62:	183b      	adds	r3, r7, r0
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f68:	4b74      	ldr	r3, [pc, #464]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b73      	ldr	r3, [pc, #460]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f6e:	2180      	movs	r1, #128	@ 0x80
 8001f70:	0049      	lsls	r1, r1, #1
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f76:	f7ff f825 	bl	8000fc4 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f80:	f7ff f820 	bl	8000fc4 <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d904      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f8e:	2313      	movs	r3, #19
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2203      	movs	r2, #3
 8001f94:	701a      	strb	r2, [r3, #0]
        break;
 8001f96:	e005      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f98:	4b68      	ldr	r3, [pc, #416]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d0ed      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001fa4:	2313      	movs	r3, #19
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d154      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fae:	4b62      	ldr	r3, [pc, #392]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fb2:	23c0      	movs	r3, #192	@ 0xc0
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d019      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d014      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fca:	4b5b      	ldr	r3, [pc, #364]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fce:	4a5c      	ldr	r2, [pc, #368]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fd4:	4b58      	ldr	r3, [pc, #352]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fd8:	4b57      	ldr	r3, [pc, #348]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fda:	2180      	movs	r1, #128	@ 0x80
 8001fdc:	0249      	lsls	r1, r1, #9
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe2:	4b55      	ldr	r3, [pc, #340]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fe4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fe6:	4b54      	ldr	r3, [pc, #336]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fe8:	4956      	ldr	r1, [pc, #344]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fee:	4b52      	ldr	r3, [pc, #328]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d016      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ffe2 	bl	8000fc4 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002004:	e00c      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7fe ffdd 	bl	8000fc4 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	4a4d      	ldr	r2, [pc, #308]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d904      	bls.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002016:	2313      	movs	r3, #19
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2203      	movs	r2, #3
 800201c:	701a      	strb	r2, [r3, #0]
            break;
 800201e:	e004      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002020:	4b45      	ldr	r3, [pc, #276]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002024:	2202      	movs	r2, #2
 8002026:	4013      	ands	r3, r2
 8002028:	d0ed      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800202a:	2313      	movs	r3, #19
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002034:	4b40      	ldr	r3, [pc, #256]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002038:	4a41      	ldr	r2, [pc, #260]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002044:	430a      	orrs	r2, r1
 8002046:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002048:	e00c      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800204a:	2312      	movs	r3, #18
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2213      	movs	r2, #19
 8002050:	18ba      	adds	r2, r7, r2
 8002052:	7812      	ldrb	r2, [r2, #0]
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e005      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002058:	2312      	movs	r3, #18
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2213      	movs	r2, #19
 800205e:	18ba      	adds	r2, r7, r2
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002064:	2311      	movs	r3, #17
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4b32      	ldr	r3, [pc, #200]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002072:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002074:	4935      	ldr	r1, [pc, #212]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002076:	400a      	ands	r2, r1
 8002078:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	d009      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002084:	4b2c      	ldr	r3, [pc, #176]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002088:	2203      	movs	r2, #3
 800208a:	4393      	bics	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4b29      	ldr	r3, [pc, #164]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002094:	430a      	orrs	r2, r1
 8002096:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2220      	movs	r2, #32
 800209e:	4013      	ands	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020a2:	4b25      	ldr	r3, [pc, #148]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	01db      	lsls	r3, r3, #7
 80020be:	4013      	ands	r3, r2
 80020c0:	d015      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	0899      	lsrs	r1, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020d0:	430a      	orrs	r2, r1
 80020d2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	2380      	movs	r3, #128	@ 0x80
 80020da:	05db      	lsls	r3, r3, #23
 80020dc:	429a      	cmp	r2, r3
 80020de:	d106      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020e0:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020e6:	2180      	movs	r1, #128	@ 0x80
 80020e8:	0249      	lsls	r1, r1, #9
 80020ea:	430a      	orrs	r2, r1
 80020ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	4013      	ands	r3, r2
 80020f8:	d016      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80020fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fe:	4a15      	ldr	r2, [pc, #84]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800210a:	430a      	orrs	r2, r1
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	01db      	lsls	r3, r3, #7
 8002116:	429a      	cmp	r2, r3
 8002118:	d106      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002120:	2180      	movs	r1, #128	@ 0x80
 8002122:	0249      	lsls	r1, r1, #9
 8002124:	430a      	orrs	r2, r1
 8002126:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002128:	2312      	movs	r3, #18
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	781b      	ldrb	r3, [r3, #0]
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b006      	add	sp, #24
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
 8002140:	fffffcff 	.word	0xfffffcff
 8002144:	fffeffff 	.word	0xfffeffff
 8002148:	00001388 	.word	0x00001388
 800214c:	efffffff 	.word	0xefffffff
 8002150:	ffffcfff 	.word	0xffffcfff
 8002154:	ffff3fff 	.word	0xffff3fff

08002158 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002160:	230f      	movs	r3, #15
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d100      	bne.n	8002170 <HAL_RTC_Init+0x18>
 800216e:	e08c      	b.n	800228a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2229      	movs	r2, #41	@ 0x29
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2228      	movs	r2, #40	@ 0x28
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2288      	movs	r2, #136	@ 0x88
 8002188:	0212      	lsls	r2, r2, #8
 800218a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	0018      	movs	r0, r3
 8002190:	f7fe fcd0 	bl	8000b34 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2229      	movs	r2, #41	@ 0x29
 8002198:	2102      	movs	r1, #2
 800219a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2210      	movs	r2, #16
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d062      	beq.n	8002270 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	22ca      	movs	r2, #202	@ 0xca
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2253      	movs	r2, #83	@ 0x53
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80021ba:	250f      	movs	r5, #15
 80021bc:	197c      	adds	r4, r7, r5
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 f9cb 	bl	800255c <RTC_EnterInitMode>
 80021c6:	0003      	movs	r3, r0
 80021c8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80021ca:	0028      	movs	r0, r5
 80021cc:	183b      	adds	r3, r7, r0
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d12c      	bne.n	800222e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	492e      	ldr	r1, [pc, #184]	@ (8002298 <HAL_RTC_Init+0x140>)
 80021e0:	400a      	ands	r2, r1
 80021e2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6999      	ldr	r1, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6912      	ldr	r2, [r2, #16]
 800220a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	041a      	lsls	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002220:	183c      	adds	r4, r7, r0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 f9db 	bl	80025e0 <RTC_ExitInitMode>
 800222a:	0003      	movs	r3, r0
 800222c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800222e:	230f      	movs	r3, #15
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d116      	bne.n	8002266 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	00d2      	lsls	r2, r2, #3
 8002244:	08d2      	lsrs	r2, r2, #3
 8002246:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6999      	ldr	r1, [r3, #24]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	22ff      	movs	r2, #255	@ 0xff
 800226c:	625a      	str	r2, [r3, #36]	@ 0x24
 800226e:	e003      	b.n	8002278 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002270:	230f      	movs	r3, #15
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002278:	230f      	movs	r3, #15
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2229      	movs	r2, #41	@ 0x29
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800228a:	230f      	movs	r3, #15
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	781b      	ldrb	r3, [r3, #0]
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bdb0      	pop	{r4, r5, r7, pc}
 8002298:	fb8fffbf 	.word	0xfb8fffbf

0800229c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800229c:	b5b0      	push	{r4, r5, r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2228      	movs	r2, #40	@ 0x28
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_RTC_SetTime+0x1a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e092      	b.n	80023dc <HAL_RTC_SetTime+0x140>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2228      	movs	r2, #40	@ 0x28
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2229      	movs	r2, #41	@ 0x29
 80022c2:	2102      	movs	r1, #2
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	22ca      	movs	r2, #202	@ 0xca
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2253      	movs	r2, #83	@ 0x53
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80022d6:	2513      	movs	r5, #19
 80022d8:	197c      	adds	r4, r7, r5
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 f93d 	bl	800255c <RTC_EnterInitMode>
 80022e2:	0003      	movs	r3, r0
 80022e4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80022e6:	197b      	adds	r3, r7, r5
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d162      	bne.n	80023b4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d125      	bne.n	8002340 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2240      	movs	r2, #64	@ 0x40
 80022fc:	4013      	ands	r3, r2
 80022fe:	d102      	bne.n	8002306 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2200      	movs	r2, #0
 8002304:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f9ac 	bl	8002668 <RTC_ByteToBcd2>
 8002310:	0003      	movs	r3, r0
 8002312:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	785b      	ldrb	r3, [r3, #1]
 8002318:	0018      	movs	r0, r3
 800231a:	f000 f9a5 	bl	8002668 <RTC_ByteToBcd2>
 800231e:	0003      	movs	r3, r0
 8002320:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002322:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	789b      	ldrb	r3, [r3, #2]
 8002328:	0018      	movs	r0, r3
 800232a:	f000 f99d 	bl	8002668 <RTC_ByteToBcd2>
 800232e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002330:	0022      	movs	r2, r4
 8002332:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	78db      	ldrb	r3, [r3, #3]
 8002338:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e017      	b.n	8002370 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2240      	movs	r2, #64	@ 0x40
 8002348:	4013      	ands	r3, r2
 800234a:	d102      	bne.n	8002352 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2200      	movs	r2, #0
 8002350:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800235e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002364:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	78db      	ldrb	r3, [r3, #3]
 800236a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	491b      	ldr	r1, [pc, #108]	@ (80023e4 <HAL_RTC_SetTime+0x148>)
 8002378:	400a      	ands	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4918      	ldr	r1, [pc, #96]	@ (80023e8 <HAL_RTC_SetTime+0x14c>)
 8002388:	400a      	ands	r2, r1
 800238a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6999      	ldr	r1, [r3, #24]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	431a      	orrs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023a4:	2313      	movs	r3, #19
 80023a6:	18fc      	adds	r4, r7, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 f918 	bl	80025e0 <RTC_ExitInitMode>
 80023b0:	0003      	movs	r3, r0
 80023b2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22ff      	movs	r2, #255	@ 0xff
 80023ba:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80023bc:	2313      	movs	r3, #19
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2229      	movs	r2, #41	@ 0x29
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2228      	movs	r2, #40	@ 0x28
 80023d2:	2100      	movs	r1, #0
 80023d4:	5499      	strb	r1, [r3, r2]

  return status;
 80023d6:	2313      	movs	r3, #19
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	781b      	ldrb	r3, [r3, #0]
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	b006      	add	sp, #24
 80023e2:	bdb0      	pop	{r4, r5, r7, pc}
 80023e4:	007f7f7f 	.word	0x007f7f7f
 80023e8:	fffbffff 	.word	0xfffbffff

080023ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023ec:	b5b0      	push	{r4, r5, r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2228      	movs	r2, #40	@ 0x28
 80023fc:	5c9b      	ldrb	r3, [r3, r2]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_RTC_SetDate+0x1a>
 8002402:	2302      	movs	r3, #2
 8002404:	e07e      	b.n	8002504 <HAL_RTC_SetDate+0x118>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2228      	movs	r2, #40	@ 0x28
 800240a:	2101      	movs	r1, #1
 800240c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2229      	movs	r2, #41	@ 0x29
 8002412:	2102      	movs	r1, #2
 8002414:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10e      	bne.n	800243a <HAL_RTC_SetDate+0x4e>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	001a      	movs	r2, r3
 8002422:	2310      	movs	r3, #16
 8002424:	4013      	ands	r3, r2
 8002426:	d008      	beq.n	800243a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	2210      	movs	r2, #16
 800242e:	4393      	bics	r3, r2
 8002430:	b2db      	uxtb	r3, r3
 8002432:	330a      	adds	r3, #10
 8002434:	b2da      	uxtb	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d11c      	bne.n	800247a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	78db      	ldrb	r3, [r3, #3]
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f90f 	bl	8002668 <RTC_ByteToBcd2>
 800244a:	0003      	movs	r3, r0
 800244c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	0018      	movs	r0, r3
 8002454:	f000 f908 	bl	8002668 <RTC_ByteToBcd2>
 8002458:	0003      	movs	r3, r0
 800245a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800245c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	789b      	ldrb	r3, [r3, #2]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f900 	bl	8002668 <RTC_ByteToBcd2>
 8002468:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800246a:	0022      	movs	r2, r4
 800246c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e00e      	b.n	8002498 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	78db      	ldrb	r3, [r3, #3]
 800247e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002486:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800248c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	22ca      	movs	r2, #202	@ 0xca
 800249e:	625a      	str	r2, [r3, #36]	@ 0x24
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2253      	movs	r2, #83	@ 0x53
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80024a8:	2513      	movs	r5, #19
 80024aa:	197c      	adds	r4, r7, r5
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 f854 	bl	800255c <RTC_EnterInitMode>
 80024b4:	0003      	movs	r3, r0
 80024b6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80024b8:	0028      	movs	r0, r5
 80024ba:	183b      	adds	r3, r7, r0
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4910      	ldr	r1, [pc, #64]	@ (800250c <HAL_RTC_SetDate+0x120>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024ce:	183c      	adds	r4, r7, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 f884 	bl	80025e0 <RTC_ExitInitMode>
 80024d8:	0003      	movs	r3, r0
 80024da:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	22ff      	movs	r2, #255	@ 0xff
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80024e4:	2313      	movs	r3, #19
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2229      	movs	r2, #41	@ 0x29
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2228      	movs	r2, #40	@ 0x28
 80024fa:	2100      	movs	r1, #0
 80024fc:	5499      	strb	r1, [r3, r2]

  return status;
 80024fe:	2313      	movs	r3, #19
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	781b      	ldrb	r3, [r3, #0]
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b006      	add	sp, #24
 800250a:	bdb0      	pop	{r4, r5, r7, pc}
 800250c:	00ffff3f 	.word	0x00ffff3f

08002510 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0e      	ldr	r2, [pc, #56]	@ (8002558 <HAL_RTC_WaitForSynchro+0x48>)
 800251e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002520:	f7fe fd50 	bl	8000fc4 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002528:	e00a      	b.n	8002540 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800252a:	f7fe fd4b 	bl	8000fc4 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad2      	subs	r2, r2, r3
 8002534:	23fa      	movs	r3, #250	@ 0xfa
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d901      	bls.n	8002540 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e006      	b.n	800254e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	4013      	ands	r3, r2
 800254a:	d0ee      	beq.n	800252a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b004      	add	sp, #16
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	0001005f 	.word	0x0001005f

0800255c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002564:	230f      	movs	r3, #15
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2240      	movs	r2, #64	@ 0x40
 8002574:	4013      	ands	r3, r2
 8002576:	d12c      	bne.n	80025d2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2180      	movs	r1, #128	@ 0x80
 8002584:	430a      	orrs	r2, r1
 8002586:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002588:	f7fe fd1c 	bl	8000fc4 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002590:	e014      	b.n	80025bc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002592:	f7fe fd17 	bl	8000fc4 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1ad2      	subs	r2, r2, r3
 800259c:	200f      	movs	r0, #15
 800259e:	183b      	adds	r3, r7, r0
 80025a0:	1839      	adds	r1, r7, r0
 80025a2:	7809      	ldrb	r1, [r1, #0]
 80025a4:	7019      	strb	r1, [r3, #0]
 80025a6:	23fa      	movs	r3, #250	@ 0xfa
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d906      	bls.n	80025bc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80025ae:	183b      	adds	r3, r7, r0
 80025b0:	2203      	movs	r2, #3
 80025b2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2229      	movs	r2, #41	@ 0x29
 80025b8:	2103      	movs	r1, #3
 80025ba:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2240      	movs	r2, #64	@ 0x40
 80025c4:	4013      	ands	r3, r2
 80025c6:	d104      	bne.n	80025d2 <RTC_EnterInitMode+0x76>
 80025c8:	230f      	movs	r3, #15
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d1df      	bne.n	8002592 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	781b      	ldrb	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bd80      	pop	{r7, pc}

080025e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	240f      	movs	r4, #15
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80025f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <RTC_ExitInitMode+0x84>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <RTC_ExitInitMode+0x84>)
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	438a      	bics	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <RTC_ExitInitMode+0x84>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2220      	movs	r2, #32
 8002602:	4013      	ands	r3, r2
 8002604:	d10d      	bne.n	8002622 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff ff81 	bl	8002510 <HAL_RTC_WaitForSynchro>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d021      	beq.n	8002656 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2229      	movs	r2, #41	@ 0x29
 8002616:	2103      	movs	r1, #3
 8002618:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800261a:	193b      	adds	r3, r7, r4
 800261c:	2203      	movs	r2, #3
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e019      	b.n	8002656 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <RTC_ExitInitMode+0x84>)
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <RTC_ExitInitMode+0x84>)
 8002628:	2120      	movs	r1, #32
 800262a:	438a      	bics	r2, r1
 800262c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0018      	movs	r0, r3
 8002632:	f7ff ff6d 	bl	8002510 <HAL_RTC_WaitForSynchro>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d007      	beq.n	800264a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2229      	movs	r2, #41	@ 0x29
 800263e:	2103      	movs	r1, #3
 8002640:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002642:	230f      	movs	r3, #15
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	2203      	movs	r2, #3
 8002648:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <RTC_ExitInitMode+0x84>)
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <RTC_ExitInitMode+0x84>)
 8002650:	2120      	movs	r1, #32
 8002652:	430a      	orrs	r2, r1
 8002654:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002656:	230f      	movs	r3, #15
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	781b      	ldrb	r3, [r3, #0]
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b005      	add	sp, #20
 8002662:	bd90      	pop	{r4, r7, pc}
 8002664:	40002800 	.word	0x40002800

08002668 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	0002      	movs	r2, r0
 8002670:	1dfb      	adds	r3, r7, #7
 8002672:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002678:	230b      	movs	r3, #11
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	1dfa      	adds	r2, r7, #7
 800267e:	7812      	ldrb	r2, [r2, #0]
 8002680:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002682:	e008      	b.n	8002696 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3301      	adds	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800268a:	220b      	movs	r2, #11
 800268c:	18bb      	adds	r3, r7, r2
 800268e:	18ba      	adds	r2, r7, r2
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	3a0a      	subs	r2, #10
 8002694:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002696:	210b      	movs	r1, #11
 8002698:	187b      	adds	r3, r7, r1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b09      	cmp	r3, #9
 800269e:	d8f1      	bhi.n	8002684 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b2db      	uxtb	r3, r3
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b004      	add	sp, #16
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2228      	movs	r2, #40	@ 0x28
 80026c8:	5c9b      	ldrb	r3, [r3, r2]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e066      	b.n	80027a0 <HAL_RTCEx_SetWakeUpTimer+0xe8>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2228      	movs	r2, #40	@ 0x28
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2229      	movs	r2, #41	@ 0x29
 80026de:	2102      	movs	r1, #2
 80026e0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	22ca      	movs	r2, #202	@ 0xca
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2253      	movs	r2, #83	@ 0x53
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80026f2:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	4b2c      	ldr	r3, [pc, #176]	@ (80027a8 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 80026f8:	492c      	ldr	r1, [pc, #176]	@ (80027ac <HAL_RTCEx_SetWakeUpTimer+0xf4>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80026fe:	4b2a      	ldr	r3, [pc, #168]	@ (80027a8 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2240      	movs	r2, #64	@ 0x40
 8002704:	4013      	ands	r3, r2
 8002706:	d121      	bne.n	800274c <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    tickstart = HAL_GetTick();
 8002708:	f7fe fc5c 	bl	8000fc4 <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002710:	e016      	b.n	8002740 <HAL_RTCEx_SetWakeUpTimer+0x88>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002712:	f7fe fc57 	bl	8000fc4 <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	1ad2      	subs	r2, r2, r3
 800271c:	23fa      	movs	r3, #250	@ 0xfa
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d90d      	bls.n	8002740 <HAL_RTCEx_SetWakeUpTimer+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	22ff      	movs	r2, #255	@ 0xff
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2229      	movs	r2, #41	@ 0x29
 8002730:	2103      	movs	r1, #3
 8002732:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2228      	movs	r2, #40	@ 0x28
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e02f      	b.n	80027a0 <HAL_RTCEx_SetWakeUpTimer+0xe8>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2204      	movs	r2, #4
 8002748:	4013      	ands	r3, r2
 800274a:	d0e2      	beq.n	8002712 <HAL_RTCEx_SetWakeUpTimer+0x5a>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2107      	movs	r1, #7
 8002758:	438a      	bics	r2, r1
 800275a:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6999      	ldr	r1, [r3, #24]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	430a      	orrs	r2, r1
 800276a:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2180      	movs	r1, #128	@ 0x80
 8002780:	00c9      	lsls	r1, r1, #3
 8002782:	430a      	orrs	r2, r1
 8002784:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	22ff      	movs	r2, #255	@ 0xff
 800278c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2229      	movs	r2, #41	@ 0x29
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2228      	movs	r2, #40	@ 0x28
 800279a:	2100      	movs	r1, #0
 800279c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b006      	add	sp, #24
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40002800 	.word	0x40002800
 80027ac:	fffffbff 	.word	0xfffffbff

080027b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e0a8      	b.n	8002914 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	2382      	movs	r3, #130	@ 0x82
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d009      	beq.n	80027ea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	61da      	str	r2, [r3, #28]
 80027dc:	e005      	b.n	80027ea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	225d      	movs	r2, #93	@ 0x5d
 80027f4:	5c9b      	ldrb	r3, [r3, r2]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	225c      	movs	r2, #92	@ 0x5c
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	0018      	movs	r0, r3
 8002808:	f7fe f9d2 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	225d      	movs	r2, #93	@ 0x5d
 8002810:	2102      	movs	r1, #2
 8002812:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2140      	movs	r1, #64	@ 0x40
 8002820:	438a      	bics	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	23e0      	movs	r3, #224	@ 0xe0
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	429a      	cmp	r2, r3
 800282e:	d902      	bls.n	8002836 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e002      	b.n	800283c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	015b      	lsls	r3, r3, #5
 800283a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	23f0      	movs	r3, #240	@ 0xf0
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	429a      	cmp	r2, r3
 8002846:	d008      	beq.n	800285a <HAL_SPI_Init+0xaa>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	23e0      	movs	r3, #224	@ 0xe0
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	429a      	cmp	r2, r3
 8002852:	d002      	beq.n	800285a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	2382      	movs	r3, #130	@ 0x82
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	401a      	ands	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	2384      	movs	r3, #132	@ 0x84
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	400b      	ands	r3, r1
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2102      	movs	r1, #2
 8002876:	400b      	ands	r3, r1
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2101      	movs	r1, #1
 8002880:	400b      	ands	r3, r1
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6999      	ldr	r1, [r3, #24]
 8002888:	2380      	movs	r3, #128	@ 0x80
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	400b      	ands	r3, r1
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2138      	movs	r1, #56	@ 0x38
 8002896:	400b      	ands	r3, r1
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	2180      	movs	r1, #128	@ 0x80
 80028a0:	400b      	ands	r3, r1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	0011      	movs	r1, r2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	401a      	ands	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	2204      	movs	r2, #4
 80028c0:	401a      	ands	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	2110      	movs	r1, #16
 80028c8:	400b      	ands	r3, r1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d0:	2108      	movs	r1, #8
 80028d2:	400b      	ands	r3, r1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68d9      	ldr	r1, [r3, #12]
 80028da:	23f0      	movs	r3, #240	@ 0xf0
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	400b      	ands	r3, r1
 80028e0:	431a      	orrs	r2, r3
 80028e2:	0011      	movs	r1, r2
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	015b      	lsls	r3, r3, #5
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4907      	ldr	r1, [pc, #28]	@ (800291c <HAL_SPI_Init+0x16c>)
 8002900:	400a      	ands	r2, r1
 8002902:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	225d      	movs	r2, #93	@ 0x5d
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b004      	add	sp, #16
 800291a:	bd80      	pop	{r7, pc}
 800291c:	fffff7ff 	.word	0xfffff7ff

08002920 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	1dbb      	adds	r3, r7, #6
 800292e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002930:	231f      	movs	r3, #31
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	225c      	movs	r2, #92	@ 0x5c
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_SPI_Transmit+0x26>
 8002942:	2302      	movs	r3, #2
 8002944:	e147      	b.n	8002bd6 <HAL_SPI_Transmit+0x2b6>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	225c      	movs	r2, #92	@ 0x5c
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800294e:	f7fe fb39 	bl	8000fc4 <HAL_GetTick>
 8002952:	0003      	movs	r3, r0
 8002954:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002956:	2316      	movs	r3, #22
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	1dba      	adds	r2, r7, #6
 800295c:	8812      	ldrh	r2, [r2, #0]
 800295e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	225d      	movs	r2, #93	@ 0x5d
 8002964:	5c9b      	ldrb	r3, [r3, r2]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d004      	beq.n	8002976 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800296c:	231f      	movs	r3, #31
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2202      	movs	r2, #2
 8002972:	701a      	strb	r2, [r3, #0]
    goto error;
 8002974:	e128      	b.n	8002bc8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_SPI_Transmit+0x64>
 800297c:	1dbb      	adds	r3, r7, #6
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002984:	231f      	movs	r3, #31
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
    goto error;
 800298c:	e11c      	b.n	8002bc8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	225d      	movs	r2, #93	@ 0x5d
 8002992:	2103      	movs	r1, #3
 8002994:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1dba      	adds	r2, r7, #6
 80029a6:	8812      	ldrh	r2, [r2, #0]
 80029a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1dba      	adds	r2, r7, #6
 80029ae:	8812      	ldrh	r2, [r2, #0]
 80029b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2244      	movs	r2, #68	@ 0x44
 80029bc:	2100      	movs	r1, #0
 80029be:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2246      	movs	r2, #70	@ 0x46
 80029c4:	2100      	movs	r1, #0
 80029c6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	2380      	movs	r3, #128	@ 0x80
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	429a      	cmp	r2, r3
 80029de:	d110      	bne.n	8002a02 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2140      	movs	r1, #64	@ 0x40
 80029ec:	438a      	bics	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2180      	movs	r1, #128	@ 0x80
 80029fc:	01c9      	lsls	r1, r1, #7
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2240      	movs	r2, #64	@ 0x40
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b40      	cmp	r3, #64	@ 0x40
 8002a0e:	d007      	beq.n	8002a20 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2140      	movs	r1, #64	@ 0x40
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	23e0      	movs	r3, #224	@ 0xe0
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d952      	bls.n	8002ad2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_SPI_Transmit+0x11e>
 8002a34:	2316      	movs	r3, #22
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d143      	bne.n	8002ac6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a42:	881a      	ldrh	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4e:	1c9a      	adds	r2, r3, #2
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a62:	e030      	b.n	8002ac6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d112      	bne.n	8002a98 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	881a      	ldrh	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	1c9a      	adds	r2, r3, #2
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a96:	e016      	b.n	8002ac6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a98:	f7fe fa94 	bl	8000fc4 <HAL_GetTick>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d802      	bhi.n	8002aae <HAL_SPI_Transmit+0x18e>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_Transmit+0x194>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d108      	bne.n	8002ac6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002ab4:	231f      	movs	r3, #31
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2203      	movs	r2, #3
 8002aba:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	225d      	movs	r2, #93	@ 0x5d
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	5499      	strb	r1, [r3, r2]
          goto error;
 8002ac4:	e080      	b.n	8002bc8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1c9      	bne.n	8002a64 <HAL_SPI_Transmit+0x144>
 8002ad0:	e053      	b.n	8002b7a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <HAL_SPI_Transmit+0x1c4>
 8002ada:	2316      	movs	r3, #22
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d145      	bne.n	8002b70 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	7812      	ldrb	r2, [r2, #0]
 8002af0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002b0a:	e031      	b.n	8002b70 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d113      	bne.n	8002b42 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b40:	e016      	b.n	8002b70 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b42:	f7fe fa3f 	bl	8000fc4 <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d802      	bhi.n	8002b58 <HAL_SPI_Transmit+0x238>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	3301      	adds	r3, #1
 8002b56:	d102      	bne.n	8002b5e <HAL_SPI_Transmit+0x23e>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d108      	bne.n	8002b70 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002b5e:	231f      	movs	r3, #31
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	2203      	movs	r2, #3
 8002b64:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	225d      	movs	r2, #93	@ 0x5d
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b6e:	e02b      	b.n	8002bc8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1c8      	bne.n	8002b0c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f95d 	bl	8002e40 <SPI_EndRxTxTransaction>
 8002b86:	1e03      	subs	r3, r0, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002bb6:	231f      	movs	r3, #31
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e003      	b.n	8002bc8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	225d      	movs	r2, #93	@ 0x5d
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	225c      	movs	r2, #92	@ 0x5c
 8002bcc:	2100      	movs	r1, #0
 8002bce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002bd0:	231f      	movs	r3, #31
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	781b      	ldrb	r3, [r3, #0]
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b008      	add	sp, #32
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bf0:	f7fe f9e8 	bl	8000fc4 <HAL_GetTick>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	18d3      	adds	r3, r2, r3
 8002bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c00:	f7fe f9e0 	bl	8000fc4 <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c08:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	015b      	lsls	r3, r3, #5
 8002c0e:	0d1b      	lsrs	r3, r3, #20
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	4353      	muls	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c16:	e058      	b.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	d055      	beq.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c1e:	f7fe f9d1 	bl	8000fc4 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d902      	bls.n	8002c34 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d142      	bne.n	8002cba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	21e0      	movs	r1, #224	@ 0xe0
 8002c40:	438a      	bics	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	2382      	movs	r3, #130	@ 0x82
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d113      	bne.n	8002c78 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d005      	beq.n	8002c68 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d107      	bne.n	8002c78 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2140      	movs	r1, #64	@ 0x40
 8002c74:	438a      	bics	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	019b      	lsls	r3, r3, #6
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d110      	bne.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	491a      	ldr	r1, [pc, #104]	@ (8002cf8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2180      	movs	r1, #128	@ 0x80
 8002ca0:	0189      	lsls	r1, r1, #6
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	225d      	movs	r2, #93	@ 0x5d
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	225c      	movs	r2, #92	@ 0x5c
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e017      	b.n	8002cea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	425a      	negs	r2, r3
 8002cda:	4153      	adcs	r3, r2
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	001a      	movs	r2, r3
 8002ce0:	1dfb      	adds	r3, r7, #7
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d197      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b008      	add	sp, #32
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	20000650 	.word	0x20000650
 8002cf8:	ffffdfff 	.word	0xffffdfff

08002cfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	@ 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d0a:	2317      	movs	r3, #23
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d12:	f7fe f957 	bl	8000fc4 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	18d3      	adds	r3, r2, r3
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002d22:	f7fe f94f 	bl	8000fc4 <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d32:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	0013      	movs	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	189b      	adds	r3, r3, r2
 8002d3c:	00da      	lsls	r2, r3, #3
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	0d1b      	lsrs	r3, r3, #20
 8002d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d44:	4353      	muls	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d48:	e068      	b.n	8002e1c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	23c0      	movs	r3, #192	@ 0xc0
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d10a      	bne.n	8002d6a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d107      	bne.n	8002d6a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	2117      	movs	r1, #23
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	d055      	beq.n	8002e1c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d70:	f7fe f928 	bl	8000fc4 <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d902      	bls.n	8002d86 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d142      	bne.n	8002e0c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	21e0      	movs	r1, #224	@ 0xe0
 8002d92:	438a      	bics	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	2382      	movs	r3, #130	@ 0x82
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d113      	bne.n	8002dca <SPI_WaitFifoStateUntilTimeout+0xce>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d005      	beq.n	8002dba <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d107      	bne.n	8002dca <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2140      	movs	r1, #64	@ 0x40
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	019b      	lsls	r3, r3, #6
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d110      	bne.n	8002df8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4916      	ldr	r1, [pc, #88]	@ (8002e3c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002de2:	400a      	ands	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2180      	movs	r1, #128	@ 0x80
 8002df2:	0189      	lsls	r1, r1, #6
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	225d      	movs	r2, #93	@ 0x5d
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	225c      	movs	r2, #92	@ 0x5c
 8002e04:	2100      	movs	r1, #0
 8002e06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e010      	b.n	8002e2e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d18e      	bne.n	8002d4a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b00a      	add	sp, #40	@ 0x28
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	20000650 	.word	0x20000650
 8002e3c:	ffffdfff 	.word	0xffffdfff

08002e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	23c0      	movs	r3, #192	@ 0xc0
 8002e50:	0159      	lsls	r1, r3, #5
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	0013      	movs	r3, r2
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f7ff ff4e 	bl	8002cfc <SPI_WaitFifoStateUntilTimeout>
 8002e60:	1e03      	subs	r3, r0, #0
 8002e62:	d007      	beq.n	8002e74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e68:	2220      	movs	r2, #32
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e027      	b.n	8002ec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	0013      	movs	r3, r2
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2180      	movs	r1, #128	@ 0x80
 8002e82:	f7ff fead 	bl	8002be0 <SPI_WaitFlagStateUntilTimeout>
 8002e86:	1e03      	subs	r3, r0, #0
 8002e88:	d007      	beq.n	8002e9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8e:	2220      	movs	r2, #32
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e014      	b.n	8002ec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	23c0      	movs	r3, #192	@ 0xc0
 8002e9e:	00d9      	lsls	r1, r3, #3
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	0013      	movs	r3, r2
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f7ff ff27 	bl	8002cfc <SPI_WaitFifoStateUntilTimeout>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d007      	beq.n	8002ec2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e000      	b.n	8002ec4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e046      	b.n	8002f6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2288      	movs	r2, #136	@ 0x88
 8002ee2:	589b      	ldr	r3, [r3, r2]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2284      	movs	r2, #132	@ 0x84
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7fd fea6 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2288      	movs	r2, #136	@ 0x88
 8002efc:	2124      	movs	r1, #36	@ 0x24
 8002efe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f996 	bl	800324c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 f828 	bl	8002f78 <UART_SetConfig>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e01c      	b.n	8002f6c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	490d      	ldr	r1, [pc, #52]	@ (8002f74 <HAL_UART_Init+0xa8>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	212a      	movs	r1, #42	@ 0x2a
 8002f4e:	438a      	bics	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 fa25 	bl	80033b4 <UART_CheckIdleState>
 8002f6a:	0003      	movs	r3, r0
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	ffffb7ff 	.word	0xffffb7ff

08002f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f80:	231a      	movs	r3, #26
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4aa1      	ldr	r2, [pc, #644]	@ (800322c <UART_SetConfig+0x2b4>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	0019      	movs	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a9c      	ldr	r2, [pc, #624]	@ (8003230 <UART_SetConfig+0x2b8>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a93      	ldr	r2, [pc, #588]	@ (8003234 <UART_SetConfig+0x2bc>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a89      	ldr	r2, [pc, #548]	@ (8003238 <UART_SetConfig+0x2c0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d127      	bne.n	8003066 <UART_SetConfig+0xee>
 8003016:	4b89      	ldr	r3, [pc, #548]	@ (800323c <UART_SetConfig+0x2c4>)
 8003018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301a:	2203      	movs	r2, #3
 800301c:	4013      	ands	r3, r2
 800301e:	2b03      	cmp	r3, #3
 8003020:	d017      	beq.n	8003052 <UART_SetConfig+0xda>
 8003022:	d81b      	bhi.n	800305c <UART_SetConfig+0xe4>
 8003024:	2b02      	cmp	r3, #2
 8003026:	d00a      	beq.n	800303e <UART_SetConfig+0xc6>
 8003028:	d818      	bhi.n	800305c <UART_SetConfig+0xe4>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <UART_SetConfig+0xbc>
 800302e:	2b01      	cmp	r3, #1
 8003030:	d00a      	beq.n	8003048 <UART_SetConfig+0xd0>
 8003032:	e013      	b.n	800305c <UART_SetConfig+0xe4>
 8003034:	231b      	movs	r3, #27
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e021      	b.n	8003082 <UART_SetConfig+0x10a>
 800303e:	231b      	movs	r3, #27
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	2202      	movs	r2, #2
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e01c      	b.n	8003082 <UART_SetConfig+0x10a>
 8003048:	231b      	movs	r3, #27
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	2204      	movs	r2, #4
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e017      	b.n	8003082 <UART_SetConfig+0x10a>
 8003052:	231b      	movs	r3, #27
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	2208      	movs	r2, #8
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e012      	b.n	8003082 <UART_SetConfig+0x10a>
 800305c:	231b      	movs	r3, #27
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2210      	movs	r2, #16
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e00d      	b.n	8003082 <UART_SetConfig+0x10a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a75      	ldr	r2, [pc, #468]	@ (8003240 <UART_SetConfig+0x2c8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d104      	bne.n	800307a <UART_SetConfig+0x102>
 8003070:	231b      	movs	r3, #27
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e003      	b.n	8003082 <UART_SetConfig+0x10a>
 800307a:	231b      	movs	r3, #27
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	2210      	movs	r2, #16
 8003080:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	429a      	cmp	r2, r3
 800308c:	d000      	beq.n	8003090 <UART_SetConfig+0x118>
 800308e:	e065      	b.n	800315c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003090:	231b      	movs	r3, #27
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b08      	cmp	r3, #8
 8003098:	d015      	beq.n	80030c6 <UART_SetConfig+0x14e>
 800309a:	dc18      	bgt.n	80030ce <UART_SetConfig+0x156>
 800309c:	2b04      	cmp	r3, #4
 800309e:	d00d      	beq.n	80030bc <UART_SetConfig+0x144>
 80030a0:	dc15      	bgt.n	80030ce <UART_SetConfig+0x156>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <UART_SetConfig+0x134>
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d005      	beq.n	80030b6 <UART_SetConfig+0x13e>
 80030aa:	e010      	b.n	80030ce <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ac:	f7fe ff18 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 80030b0:	0003      	movs	r3, r0
 80030b2:	617b      	str	r3, [r7, #20]
        break;
 80030b4:	e012      	b.n	80030dc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b6:	4b63      	ldr	r3, [pc, #396]	@ (8003244 <UART_SetConfig+0x2cc>)
 80030b8:	617b      	str	r3, [r7, #20]
        break;
 80030ba:	e00f      	b.n	80030dc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030bc:	f7fe fe84 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 80030c0:	0003      	movs	r3, r0
 80030c2:	617b      	str	r3, [r7, #20]
        break;
 80030c4:	e00a      	b.n	80030dc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030c6:	2380      	movs	r3, #128	@ 0x80
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	617b      	str	r3, [r7, #20]
        break;
 80030cc:	e006      	b.n	80030dc <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030d2:	231a      	movs	r3, #26
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
        break;
 80030da:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d100      	bne.n	80030e4 <UART_SetConfig+0x16c>
 80030e2:	e08d      	b.n	8003200 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030e8:	4b57      	ldr	r3, [pc, #348]	@ (8003248 <UART_SetConfig+0x2d0>)
 80030ea:	0052      	lsls	r2, r2, #1
 80030ec:	5ad3      	ldrh	r3, [r2, r3]
 80030ee:	0019      	movs	r1, r3
 80030f0:	6978      	ldr	r0, [r7, #20]
 80030f2:	f7fd f805 	bl	8000100 <__udivsi3>
 80030f6:	0003      	movs	r3, r0
 80030f8:	005a      	lsls	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	18d2      	adds	r2, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0019      	movs	r1, r3
 8003108:	0010      	movs	r0, r2
 800310a:	f7fc fff9 	bl	8000100 <__udivsi3>
 800310e:	0003      	movs	r3, r0
 8003110:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d91c      	bls.n	8003152 <UART_SetConfig+0x1da>
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	025b      	lsls	r3, r3, #9
 800311e:	429a      	cmp	r2, r3
 8003120:	d217      	bcs.n	8003152 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	b29a      	uxth	r2, r3
 8003126:	200e      	movs	r0, #14
 8003128:	183b      	adds	r3, r7, r0
 800312a:	210f      	movs	r1, #15
 800312c:	438a      	bics	r2, r1
 800312e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	b29b      	uxth	r3, r3
 8003136:	2207      	movs	r2, #7
 8003138:	4013      	ands	r3, r2
 800313a:	b299      	uxth	r1, r3
 800313c:	183b      	adds	r3, r7, r0
 800313e:	183a      	adds	r2, r7, r0
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	183a      	adds	r2, r7, r0
 800314c:	8812      	ldrh	r2, [r2, #0]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	e056      	b.n	8003200 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003152:	231a      	movs	r3, #26
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e051      	b.n	8003200 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800315c:	231b      	movs	r3, #27
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b08      	cmp	r3, #8
 8003164:	d015      	beq.n	8003192 <UART_SetConfig+0x21a>
 8003166:	dc18      	bgt.n	800319a <UART_SetConfig+0x222>
 8003168:	2b04      	cmp	r3, #4
 800316a:	d00d      	beq.n	8003188 <UART_SetConfig+0x210>
 800316c:	dc15      	bgt.n	800319a <UART_SetConfig+0x222>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <UART_SetConfig+0x200>
 8003172:	2b02      	cmp	r3, #2
 8003174:	d005      	beq.n	8003182 <UART_SetConfig+0x20a>
 8003176:	e010      	b.n	800319a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003178:	f7fe feb2 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 800317c:	0003      	movs	r3, r0
 800317e:	617b      	str	r3, [r7, #20]
        break;
 8003180:	e012      	b.n	80031a8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003182:	4b30      	ldr	r3, [pc, #192]	@ (8003244 <UART_SetConfig+0x2cc>)
 8003184:	617b      	str	r3, [r7, #20]
        break;
 8003186:	e00f      	b.n	80031a8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003188:	f7fe fe1e 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 800318c:	0003      	movs	r3, r0
 800318e:	617b      	str	r3, [r7, #20]
        break;
 8003190:	e00a      	b.n	80031a8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	617b      	str	r3, [r7, #20]
        break;
 8003198:	e006      	b.n	80031a8 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800319e:	231a      	movs	r3, #26
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
        break;
 80031a6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d028      	beq.n	8003200 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031b2:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <UART_SetConfig+0x2d0>)
 80031b4:	0052      	lsls	r2, r2, #1
 80031b6:	5ad3      	ldrh	r3, [r2, r3]
 80031b8:	0019      	movs	r1, r3
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7fc ffa0 	bl	8000100 <__udivsi3>
 80031c0:	0003      	movs	r3, r0
 80031c2:	001a      	movs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	18d2      	adds	r2, r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	0019      	movs	r1, r3
 80031d2:	0010      	movs	r0, r2
 80031d4:	f7fc ff94 	bl	8000100 <__udivsi3>
 80031d8:	0003      	movs	r3, r0
 80031da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	d90a      	bls.n	80031f8 <UART_SetConfig+0x280>
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	025b      	lsls	r3, r3, #9
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d205      	bcs.n	80031f8 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e003      	b.n	8003200 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80031f8:	231a      	movs	r3, #26
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	226a      	movs	r2, #106	@ 0x6a
 8003204:	2101      	movs	r1, #1
 8003206:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2268      	movs	r2, #104	@ 0x68
 800320c:	2101      	movs	r1, #1
 800320e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800321c:	231a      	movs	r3, #26
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	781b      	ldrb	r3, [r3, #0]
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b008      	add	sp, #32
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	cfff69f3 	.word	0xcfff69f3
 8003230:	ffffcfff 	.word	0xffffcfff
 8003234:	11fff4ff 	.word	0x11fff4ff
 8003238:	40013800 	.word	0x40013800
 800323c:	40021000 	.word	0x40021000
 8003240:	40004400 	.word	0x40004400
 8003244:	00f42400 	.word	0x00f42400
 8003248:	080039e8 	.word	0x080039e8

0800324c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	2208      	movs	r2, #8
 800325a:	4013      	ands	r3, r2
 800325c:	d00b      	beq.n	8003276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a4a      	ldr	r2, [pc, #296]	@ (8003390 <UART_AdvFeatureConfig+0x144>)
 8003266:	4013      	ands	r3, r2
 8003268:	0019      	movs	r1, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327a:	2201      	movs	r2, #1
 800327c:	4013      	ands	r3, r2
 800327e:	d00b      	beq.n	8003298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a43      	ldr	r2, [pc, #268]	@ (8003394 <UART_AdvFeatureConfig+0x148>)
 8003288:	4013      	ands	r3, r2
 800328a:	0019      	movs	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	2202      	movs	r2, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	d00b      	beq.n	80032ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003398 <UART_AdvFeatureConfig+0x14c>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	0019      	movs	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032be:	2204      	movs	r2, #4
 80032c0:	4013      	ands	r3, r2
 80032c2:	d00b      	beq.n	80032dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a34      	ldr	r2, [pc, #208]	@ (800339c <UART_AdvFeatureConfig+0x150>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e0:	2210      	movs	r2, #16
 80032e2:	4013      	ands	r3, r2
 80032e4:	d00b      	beq.n	80032fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	@ (80033a0 <UART_AdvFeatureConfig+0x154>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	0019      	movs	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003302:	2220      	movs	r2, #32
 8003304:	4013      	ands	r3, r2
 8003306:	d00b      	beq.n	8003320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	4a25      	ldr	r2, [pc, #148]	@ (80033a4 <UART_AdvFeatureConfig+0x158>)
 8003310:	4013      	ands	r3, r2
 8003312:	0019      	movs	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	2240      	movs	r2, #64	@ 0x40
 8003326:	4013      	ands	r3, r2
 8003328:	d01d      	beq.n	8003366 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <UART_AdvFeatureConfig+0x15c>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003346:	2380      	movs	r3, #128	@ 0x80
 8003348:	035b      	lsls	r3, r3, #13
 800334a:	429a      	cmp	r2, r3
 800334c:	d10b      	bne.n	8003366 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <UART_AdvFeatureConfig+0x160>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	2280      	movs	r2, #128	@ 0x80
 800336c:	4013      	ands	r3, r2
 800336e:	d00b      	beq.n	8003388 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a0e      	ldr	r2, [pc, #56]	@ (80033b0 <UART_AdvFeatureConfig+0x164>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  }
}
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}
 8003390:	ffff7fff 	.word	0xffff7fff
 8003394:	fffdffff 	.word	0xfffdffff
 8003398:	fffeffff 	.word	0xfffeffff
 800339c:	fffbffff 	.word	0xfffbffff
 80033a0:	ffffefff 	.word	0xffffefff
 80033a4:	ffffdfff 	.word	0xffffdfff
 80033a8:	ffefffff 	.word	0xffefffff
 80033ac:	ff9fffff 	.word	0xff9fffff
 80033b0:	fff7ffff 	.word	0xfff7ffff

080033b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b092      	sub	sp, #72	@ 0x48
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2290      	movs	r2, #144	@ 0x90
 80033c0:	2100      	movs	r1, #0
 80033c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033c4:	f7fd fdfe 	bl	8000fc4 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2208      	movs	r2, #8
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d12d      	bne.n	8003436 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033dc:	2280      	movs	r2, #128	@ 0x80
 80033de:	0391      	lsls	r1, r2, #14
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4a47      	ldr	r2, [pc, #284]	@ (8003500 <UART_CheckIdleState+0x14c>)
 80033e4:	9200      	str	r2, [sp, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f000 f88e 	bl	8003508 <UART_WaitOnFlagUntilTimeout>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d022      	beq.n	8003436 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f0:	f3ef 8310 	mrs	r3, PRIMASK
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80033f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033fa:	2301      	movs	r3, #1
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	438a      	bics	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2288      	movs	r2, #136	@ 0x88
 8003426:	2120      	movs	r1, #32
 8003428:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2284      	movs	r2, #132	@ 0x84
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e060      	b.n	80034f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2204      	movs	r2, #4
 800343e:	4013      	ands	r3, r2
 8003440:	2b04      	cmp	r3, #4
 8003442:	d146      	bne.n	80034d2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003446:	2280      	movs	r2, #128	@ 0x80
 8003448:	03d1      	lsls	r1, r2, #15
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <UART_CheckIdleState+0x14c>)
 800344e:	9200      	str	r2, [sp, #0]
 8003450:	2200      	movs	r2, #0
 8003452:	f000 f859 	bl	8003508 <UART_WaitOnFlagUntilTimeout>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d03b      	beq.n	80034d2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345a:	f3ef 8310 	mrs	r3, PRIMASK
 800345e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003460:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003462:	637b      	str	r3, [r7, #52]	@ 0x34
 8003464:	2301      	movs	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f383 8810 	msr	PRIMASK, r3
}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4922      	ldr	r1, [pc, #136]	@ (8003504 <UART_CheckIdleState+0x150>)
 800347c:	400a      	ands	r2, r1
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f383 8810 	msr	PRIMASK, r3
}
 800348a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348c:	f3ef 8310 	mrs	r3, PRIMASK
 8003490:	61bb      	str	r3, [r7, #24]
  return(result);
 8003492:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003494:	633b      	str	r3, [r7, #48]	@ 0x30
 8003496:	2301      	movs	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	438a      	bics	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	f383 8810 	msr	PRIMASK, r3
}
 80034bc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	228c      	movs	r2, #140	@ 0x8c
 80034c2:	2120      	movs	r1, #32
 80034c4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2284      	movs	r2, #132	@ 0x84
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e012      	b.n	80034f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2288      	movs	r2, #136	@ 0x88
 80034d6:	2120      	movs	r1, #32
 80034d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	228c      	movs	r2, #140	@ 0x8c
 80034de:	2120      	movs	r1, #32
 80034e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2284      	movs	r2, #132	@ 0x84
 80034f2:	2100      	movs	r1, #0
 80034f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b010      	add	sp, #64	@ 0x40
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	01ffffff 	.word	0x01ffffff
 8003504:	fffffedf 	.word	0xfffffedf

08003508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003518:	e051      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	3301      	adds	r3, #1
 800351e:	d04e      	beq.n	80035be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7fd fd50 	bl	8000fc4 <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e051      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2204      	movs	r2, #4
 8003542:	4013      	ands	r3, r2
 8003544:	d03b      	beq.n	80035be <UART_WaitOnFlagUntilTimeout+0xb6>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b80      	cmp	r3, #128	@ 0x80
 800354a:	d038      	beq.n	80035be <UART_WaitOnFlagUntilTimeout+0xb6>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d035      	beq.n	80035be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2208      	movs	r2, #8
 800355a:	4013      	ands	r3, r2
 800355c:	2b08      	cmp	r3, #8
 800355e:	d111      	bne.n	8003584 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2208      	movs	r2, #8
 8003566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f83c 	bl	80035e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2290      	movs	r2, #144	@ 0x90
 8003574:	2108      	movs	r1, #8
 8003576:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2284      	movs	r2, #132	@ 0x84
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e02c      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	2380      	movs	r3, #128	@ 0x80
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	401a      	ands	r2, r3
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	429a      	cmp	r2, r3
 8003596:	d112      	bne.n	80035be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2280      	movs	r2, #128	@ 0x80
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 f81f 	bl	80035e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2290      	movs	r2, #144	@ 0x90
 80035ae:	2120      	movs	r1, #32
 80035b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2284      	movs	r2, #132	@ 0x84
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e00f      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	425a      	negs	r2, r3
 80035ce:	4153      	adcs	r3, r2
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	001a      	movs	r2, r3
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d09e      	beq.n	800351a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	@ 0x38
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f0:	f3ef 8310 	mrs	r3, PRIMASK
 80035f4:	617b      	str	r3, [r7, #20]
  return(result);
 80035f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80035fa:	2301      	movs	r3, #1
 80035fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f383 8810 	msr	PRIMASK, r3
}
 8003604:	46c0      	nop			@ (mov r8, r8)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4926      	ldr	r1, [pc, #152]	@ (80036ac <UART_EndRxTransfer+0xc4>)
 8003612:	400a      	ands	r2, r1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003618:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f383 8810 	msr	PRIMASK, r3
}
 8003620:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8310 	mrs	r3, PRIMASK
 8003626:	623b      	str	r3, [r7, #32]
  return(result);
 8003628:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800362a:	633b      	str	r3, [r7, #48]	@ 0x30
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	491b      	ldr	r1, [pc, #108]	@ (80036b0 <UART_EndRxTransfer+0xc8>)
 8003644:	400a      	ands	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	f383 8810 	msr	PRIMASK, r3
}
 8003652:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d118      	bne.n	800368e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365c:	f3ef 8310 	mrs	r3, PRIMASK
 8003660:	60bb      	str	r3, [r7, #8]
  return(result);
 8003662:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003666:	2301      	movs	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f383 8810 	msr	PRIMASK, r3
}
 8003670:	46c0      	nop			@ (mov r8, r8)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2110      	movs	r1, #16
 800367e:	438a      	bics	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003684:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f383 8810 	msr	PRIMASK, r3
}
 800368c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	228c      	movs	r2, #140	@ 0x8c
 8003692:	2120      	movs	r1, #32
 8003694:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b00e      	add	sp, #56	@ 0x38
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	fffffedf 	.word	0xfffffedf
 80036b0:	effffffe 	.word	0xeffffffe

080036b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2284      	movs	r2, #132	@ 0x84
 80036c0:	5c9b      	ldrb	r3, [r3, r2]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_UARTEx_DisableFifoMode+0x16>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e027      	b.n	800371a <HAL_UARTEx_DisableFifoMode+0x66>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2284      	movs	r2, #132	@ 0x84
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2288      	movs	r2, #136	@ 0x88
 80036d6:	2124      	movs	r1, #36	@ 0x24
 80036d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2101      	movs	r1, #1
 80036ee:	438a      	bics	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003724 <HAL_UARTEx_DisableFifoMode+0x70>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2288      	movs	r2, #136	@ 0x88
 800370c:	2120      	movs	r1, #32
 800370e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2284      	movs	r2, #132	@ 0x84
 8003714:	2100      	movs	r1, #0
 8003716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	dfffffff 	.word	0xdfffffff

08003728 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2284      	movs	r2, #132	@ 0x84
 8003736:	5c9b      	ldrb	r3, [r3, r2]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e02e      	b.n	800379e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2284      	movs	r2, #132	@ 0x84
 8003744:	2101      	movs	r1, #1
 8003746:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2288      	movs	r2, #136	@ 0x88
 800374c:	2124      	movs	r1, #36	@ 0x24
 800374e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2101      	movs	r1, #1
 8003764:	438a      	bics	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	08d9      	lsrs	r1, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	0018      	movs	r0, r3
 8003780:	f000 f854 	bl	800382c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2288      	movs	r2, #136	@ 0x88
 8003790:	2120      	movs	r1, #32
 8003792:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2284      	movs	r2, #132	@ 0x84
 8003798:	2100      	movs	r1, #0
 800379a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b004      	add	sp, #16
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2284      	movs	r2, #132	@ 0x84
 80037b6:	5c9b      	ldrb	r3, [r3, r2]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e02f      	b.n	8003820 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2284      	movs	r2, #132	@ 0x84
 80037c4:	2101      	movs	r1, #1
 80037c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2288      	movs	r2, #136	@ 0x88
 80037cc:	2124      	movs	r1, #36	@ 0x24
 80037ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2101      	movs	r1, #1
 80037e4:	438a      	bics	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003828 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0018      	movs	r0, r3
 8003802:	f000 f813 	bl	800382c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2288      	movs	r2, #136	@ 0x88
 8003812:	2120      	movs	r1, #32
 8003814:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2284      	movs	r2, #132	@ 0x84
 800381a:	2100      	movs	r1, #0
 800381c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b004      	add	sp, #16
 8003826:	bd80      	pop	{r7, pc}
 8003828:	f1ffffff 	.word	0xf1ffffff

0800382c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800382c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003838:	2b00      	cmp	r3, #0
 800383a:	d108      	bne.n	800384e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	226a      	movs	r2, #106	@ 0x6a
 8003840:	2101      	movs	r1, #1
 8003842:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2268      	movs	r2, #104	@ 0x68
 8003848:	2101      	movs	r1, #1
 800384a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800384c:	e043      	b.n	80038d6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800384e:	260f      	movs	r6, #15
 8003850:	19bb      	adds	r3, r7, r6
 8003852:	2208      	movs	r2, #8
 8003854:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003856:	200e      	movs	r0, #14
 8003858:	183b      	adds	r3, r7, r0
 800385a:	2208      	movs	r2, #8
 800385c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	0e5b      	lsrs	r3, r3, #25
 8003866:	b2da      	uxtb	r2, r3
 8003868:	240d      	movs	r4, #13
 800386a:	193b      	adds	r3, r7, r4
 800386c:	2107      	movs	r1, #7
 800386e:	400a      	ands	r2, r1
 8003870:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	0f5b      	lsrs	r3, r3, #29
 800387a:	b2da      	uxtb	r2, r3
 800387c:	250c      	movs	r5, #12
 800387e:	197b      	adds	r3, r7, r5
 8003880:	2107      	movs	r1, #7
 8003882:	400a      	ands	r2, r1
 8003884:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003886:	183b      	adds	r3, r7, r0
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	197a      	adds	r2, r7, r5
 800388c:	7812      	ldrb	r2, [r2, #0]
 800388e:	4914      	ldr	r1, [pc, #80]	@ (80038e0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003890:	5c8a      	ldrb	r2, [r1, r2]
 8003892:	435a      	muls	r2, r3
 8003894:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003896:	197b      	adds	r3, r7, r5
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <UARTEx_SetNbDataToProcess+0xb8>)
 800389c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800389e:	0019      	movs	r1, r3
 80038a0:	f7fc fcb8 	bl	8000214 <__divsi3>
 80038a4:	0003      	movs	r3, r0
 80038a6:	b299      	uxth	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	226a      	movs	r2, #106	@ 0x6a
 80038ac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038ae:	19bb      	adds	r3, r7, r6
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	193a      	adds	r2, r7, r4
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	490a      	ldr	r1, [pc, #40]	@ (80038e0 <UARTEx_SetNbDataToProcess+0xb4>)
 80038b8:	5c8a      	ldrb	r2, [r1, r2]
 80038ba:	435a      	muls	r2, r3
 80038bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80038be:	193b      	adds	r3, r7, r4
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	4a08      	ldr	r2, [pc, #32]	@ (80038e4 <UARTEx_SetNbDataToProcess+0xb8>)
 80038c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038c6:	0019      	movs	r1, r3
 80038c8:	f7fc fca4 	bl	8000214 <__divsi3>
 80038cc:	0003      	movs	r3, r0
 80038ce:	b299      	uxth	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2268      	movs	r2, #104	@ 0x68
 80038d4:	5299      	strh	r1, [r3, r2]
}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b005      	add	sp, #20
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	08003a00 	.word	0x08003a00
 80038e4:	08003a08 	.word	0x08003a08

080038e8 <memset>:
 80038e8:	0003      	movs	r3, r0
 80038ea:	1882      	adds	r2, r0, r2
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d100      	bne.n	80038f2 <memset+0xa>
 80038f0:	4770      	bx	lr
 80038f2:	7019      	strb	r1, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	e7f9      	b.n	80038ec <memset+0x4>

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	2600      	movs	r6, #0
 80038fc:	4c0c      	ldr	r4, [pc, #48]	@ (8003930 <__libc_init_array+0x38>)
 80038fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003934 <__libc_init_array+0x3c>)
 8003900:	1b64      	subs	r4, r4, r5
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	2600      	movs	r6, #0
 800390a:	f000 f819 	bl	8003940 <_init>
 800390e:	4c0a      	ldr	r4, [pc, #40]	@ (8003938 <__libc_init_array+0x40>)
 8003910:	4d0a      	ldr	r5, [pc, #40]	@ (800393c <__libc_init_array+0x44>)
 8003912:	1b64      	subs	r4, r4, r5
 8003914:	10a4      	asrs	r4, r4, #2
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	00b3      	lsls	r3, r6, #2
 800391e:	58eb      	ldr	r3, [r5, r3]
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	00b3      	lsls	r3, r6, #2
 8003928:	58eb      	ldr	r3, [r5, r3]
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	08003a10 	.word	0x08003a10
 8003934:	08003a10 	.word	0x08003a10
 8003938:	08003a14 	.word	0x08003a14
 800393c:	08003a10 	.word	0x08003a10

08003940 <_init>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003946:	bc08      	pop	{r3}
 8003948:	469e      	mov	lr, r3
 800394a:	4770      	bx	lr

0800394c <_fini>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003952:	bc08      	pop	{r3}
 8003954:	469e      	mov	lr, r3
 8003956:	4770      	bx	lr
