
ez_exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007600  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080077d8  080077d8  000087d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007818  08007818  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007818  08007818  00008818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007820  08007820  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007820  08007820  00008820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007824  08007824  00008824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007828  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000000c  08007834  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08007834  000092a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d63  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312b  00000000  00000000  00022d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00025ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121c  00000000  00000000  000275e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002838c  00000000  00000000  000287fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d022  00000000  00000000  00050b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010484b  00000000  00000000  0006dbaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001723f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000657c  00000000  00000000  00172438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001789b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080077c0 	.word	0x080077c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080077c0 	.word	0x080077c0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_ldivmod>:
 8000b14:	b97b      	cbnz	r3, 8000b36 <__aeabi_ldivmod+0x22>
 8000b16:	b972      	cbnz	r2, 8000b36 <__aeabi_ldivmod+0x22>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bfbe      	ittt	lt
 8000b1c:	2000      	movlt	r0, #0
 8000b1e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b22:	e006      	blt.n	8000b32 <__aeabi_ldivmod+0x1e>
 8000b24:	bf08      	it	eq
 8000b26:	2800      	cmpeq	r0, #0
 8000b28:	bf1c      	itt	ne
 8000b2a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b2e:	f04f 30ff 	movne.w	r0, #4294967295
 8000b32:	f000 b9b5 	b.w	8000ea0 <__aeabi_idiv0>
 8000b36:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	db09      	blt.n	8000b56 <__aeabi_ldivmod+0x42>
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db1a      	blt.n	8000b7c <__aeabi_ldivmod+0x68>
 8000b46:	f000 f84d 	bl	8000be4 <__udivmoddi4>
 8000b4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b52:	b004      	add	sp, #16
 8000b54:	4770      	bx	lr
 8000b56:	4240      	negs	r0, r0
 8000b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db1b      	blt.n	8000b98 <__aeabi_ldivmod+0x84>
 8000b60:	f000 f840 	bl	8000be4 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4240      	negs	r0, r0
 8000b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b74:	4252      	negs	r2, r2
 8000b76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b7a:	4770      	bx	lr
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	f000 f82f 	bl	8000be4 <__udivmoddi4>
 8000b86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8e:	b004      	add	sp, #16
 8000b90:	4240      	negs	r0, r0
 8000b92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b96:	4770      	bx	lr
 8000b98:	4252      	negs	r2, r2
 8000b9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b9e:	f000 f821 	bl	8000be4 <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4252      	negs	r2, r2
 8000bae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <set_freq>:

#include <stdint.h>
#include <stdio.h>
//1为正弦波�????? 2为三角波 ,3为正弦波+方波 方波在sqr引脚输出
void set_freq(void (*send_data)(uint16_t), long long int freq,int c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	e9c7 2300 	strd	r2, r3, [r7]

	long long int temp = (freq * 268435456 / 100000000) ;
 8000eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eb8:	f04f 0000 	mov.w	r0, #0
 8000ebc:	f04f 0100 	mov.w	r1, #0
 8000ec0:	0719      	lsls	r1, r3, #28
 8000ec2:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8000ec6:	0710      	lsls	r0, r2, #28
 8000ec8:	a337      	add	r3, pc, #220	@ (adr r3, 8000fa8 <set_freq+0x100>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff fe21 	bl	8000b14 <__aeabi_ldivmod>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t fr = temp;
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	617b      	str	r3, [r7, #20]
	uint16_t lsb = 0x4000;
 8000ede:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ee2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t msb = 0x4000;
 8000ee4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ee8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
 8000eee:	e029      	b.n	8000f44 <set_freq+0x9c>
	    // 对于lsb，直接取fr对应�?????
	    if (fr & (1 << i)) {
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d009      	beq.n	8000f16 <set_freq+0x6e>
	        lsb |= (1 << i);
 8000f02:	2201      	movs	r2, #1
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    }
	    if (fr & (1 << (i + 14))) {
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	330e      	adds	r3, #14
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d009      	beq.n	8000f3e <set_freq+0x96>
	        msb |= (1 << i);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	3301      	adds	r3, #1
 8000f42:	623b      	str	r3, [r7, #32]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	2b0d      	cmp	r3, #13
 8000f48:	ddd2      	ble.n	8000ef0 <set_freq+0x48>
	    }
	}

	send_data(0x2100);//send_data(0x2300);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8000f50:	4798      	blx	r3
	send_data(lsb);//freq0
 8000f52:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4610      	mov	r0, r2
 8000f58:	4798      	blx	r3
	send_data(msb);
 8000f5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4798      	blx	r3
	send_data(0xc000);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000f68:	4798      	blx	r3
//	send_data(0x2100);
//	send_data(0x8000);//freq1
//	send_data(0x8432);

	//send_data(0x0028);
	switch(c)
 8000f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d011      	beq.n	8000f94 <set_freq+0xec>
 8000f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	dc12      	bgt.n	8000f9c <set_freq+0xf4>
 8000f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d003      	beq.n	8000f84 <set_freq+0xdc>
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d004      	beq.n	8000f8c <set_freq+0xe4>
			case 1:send_data(0x0000);break;//send_data(0x0200);
			case 2:send_data(0x0002);break;
			case 3:send_data(0x0028); break;
		}
	//send_data(0x2200);
}
 8000f82:	e00b      	b.n	8000f9c <set_freq+0xf4>
			case 1:send_data(0x0000);break;//send_data(0x0200);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2000      	movs	r0, #0
 8000f88:	4798      	blx	r3
 8000f8a:	e007      	b.n	8000f9c <set_freq+0xf4>
			case 2:send_data(0x0002);break;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2002      	movs	r0, #2
 8000f90:	4798      	blx	r3
 8000f92:	e003      	b.n	8000f9c <set_freq+0xf4>
			case 3:send_data(0x0028); break;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2028      	movs	r0, #40	@ 0x28
 8000f98:	4798      	blx	r3
 8000f9a:	bf00      	nop
}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	@ 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	05f5e100 	.word	0x05f5e100
 8000fac:	00000000 	.word	0x00000000

08000fb0 <send_data>:
		}
		//uart_transmit(i2c_buffer, length + 1);
	}
}
void send_data(uint16_t data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, 1<<10, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc4:	f002 f826 	bl	8003014 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&data, 1, 10);
 8000fc8:	1db9      	adds	r1, r7, #6
 8000fca:	230a      	movs	r3, #10
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <send_data+0x3c>)
 8000fd0:	f003 fdbf 	bl	8004b52 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, 1<<10, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f002 f819 	bl	8003014 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000b4 	.word	0x200000b4

08000ff0 <i2c_write>:
void i2c_write(uint8_t * data, size_t size , uint16_t addr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_Master_Transmit(&hi2c1, addr, data , size , size) !=  HAL_OK)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	b29a      	uxth	r2, r3
 8001002:	88f9      	ldrh	r1, [r7, #6]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <i2c_write+0x2c>)
 800100e:	f002 f8b5 	bl	800317c <HAL_I2C_Master_Transmit>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
		return;
}
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000060 	.word	0x20000060

08001020 <multisynth_program>:
	if (HAL_I2C_Master_Receive(&hi2c1, addr, i2c_buffer + 1, length , length + 1) != HAL_OK)
	{
		i2c_buffer[0] = -1;
	}
}
void multisynth_program(int intg, int num, int denom, int rdiv, uint8_t* data , uint8_t reg_addr) {
 8001020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001024:	b08a      	sub	sp, #40	@ 0x28
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	603b      	str	r3, [r7, #0]
    int p1 = 128 * intg + floor(128*(double)num/denom) - 512;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	01db      	lsls	r3, r3, #7
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa41 	bl	80004bc <__aeabi_i2d>
 800103a:	4604      	mov	r4, r0
 800103c:	460d      	mov	r5, r1
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f7ff fa3c 	bl	80004bc <__aeabi_i2d>
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b89      	ldr	r3, [pc, #548]	@ (8001270 <multisynth_program+0x250>)
 800104a:	f7ff faa1 	bl	8000590 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4690      	mov	r8, r2
 8001054:	4699      	mov	r9, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fa30 	bl	80004bc <__aeabi_i2d>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4640      	mov	r0, r8
 8001062:	4649      	mov	r1, r9
 8001064:	f7ff fbbe 	bl	80007e4 <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	ec43 2b17 	vmov	d7, r2, r3
 8001070:	eeb0 0a47 	vmov.f32	s0, s14
 8001074:	eef0 0a67 	vmov.f32	s1, s15
 8001078:	f006 fafa 	bl	8007670 <floor>
 800107c:	ec53 2b10 	vmov	r2, r3, d0
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff f8ce 	bl	8000224 <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001098:	f7ff f8c2 	bl	8000220 <__aeabi_dsub>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd0e 	bl	8000ac4 <__aeabi_d2iz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
    int p2 = 128 * num - denom * floor(128*(double)num/denom);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	01db      	lsls	r3, r3, #7
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa03 	bl	80004bc <__aeabi_i2d>
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff f9fe 	bl	80004bc <__aeabi_i2d>
 80010c0:	4680      	mov	r8, r0
 80010c2:	4689      	mov	r9, r1
 80010c4:	68b8      	ldr	r0, [r7, #8]
 80010c6:	f7ff f9f9 	bl	80004bc <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b68      	ldr	r3, [pc, #416]	@ (8001270 <multisynth_program+0x250>)
 80010d0:	f7ff fa5e 	bl	8000590 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4692      	mov	sl, r2
 80010da:	469b      	mov	fp, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff f9ed 	bl	80004bc <__aeabi_i2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4650      	mov	r0, sl
 80010e8:	4659      	mov	r1, fp
 80010ea:	f7ff fb7b 	bl	80007e4 <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	ec43 2b17 	vmov	d7, r2, r3
 80010f6:	eeb0 0a47 	vmov.f32	s0, s14
 80010fa:	eef0 0a67 	vmov.f32	s1, s15
 80010fe:	f006 fab7 	bl	8007670 <floor>
 8001102:	ec53 2b10 	vmov	r2, r3, d0
 8001106:	4640      	mov	r0, r8
 8001108:	4649      	mov	r1, r9
 800110a:	f7ff fa41 	bl	8000590 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff f883 	bl	8000220 <__aeabi_dsub>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fccf 	bl	8000ac4 <__aeabi_d2iz>
 8001126:	4603      	mov	r3, r0
 8001128:	623b      	str	r3, [r7, #32]
    int p3 = denom;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	61fb      	str	r3, [r7, #28]

    int x, y, z;
    x = p3 / (256*256);
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	2b00      	cmp	r3, #0
 8001132:	da02      	bge.n	800113a <multisynth_program+0x11a>
 8001134:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001138:	33ff      	adds	r3, #255	@ 0xff
 800113a:	141b      	asrs	r3, r3, #16
 800113c:	61bb      	str	r3, [r7, #24]
    p3 %= (256*256);
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	425a      	negs	r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	b292      	uxth	r2, r2
 8001146:	bf58      	it	pl
 8001148:	4253      	negpl	r3, r2
 800114a:	61fb      	str	r3, [r7, #28]
    y = p3 / 256;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	da00      	bge.n	8001154 <multisynth_program+0x134>
 8001152:	33ff      	adds	r3, #255	@ 0xff
 8001154:	121b      	asrs	r3, r3, #8
 8001156:	617b      	str	r3, [r7, #20]
    z = p3 % 256;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	425a      	negs	r2, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	bf58      	it	pl
 8001162:	4253      	negpl	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
    data[1] = y;
 8001166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001168:	3301      	adds	r3, #1
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	701a      	strb	r2, [r3, #0]
    data[2] = z;
 8001170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001172:	3302      	adds	r3, #2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]
    data[6] = x << 4;
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001180:	3306      	adds	r3, #6
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	701a      	strb	r2, [r3, #0]

    x = p1 / (256*256);
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	2b00      	cmp	r3, #0
 800118c:	da02      	bge.n	8001194 <multisynth_program+0x174>
 800118e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001192:	33ff      	adds	r3, #255	@ 0xff
 8001194:	141b      	asrs	r3, r3, #16
 8001196:	61bb      	str	r3, [r7, #24]
    p1 %= (256*256);
 8001198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119a:	425a      	negs	r2, r3
 800119c:	b29b      	uxth	r3, r3
 800119e:	b292      	uxth	r2, r2
 80011a0:	bf58      	it	pl
 80011a2:	4253      	negpl	r3, r2
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
    y = p1 / 256;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da00      	bge.n	80011ae <multisynth_program+0x18e>
 80011ac:	33ff      	adds	r3, #255	@ 0xff
 80011ae:	121b      	asrs	r3, r3, #8
 80011b0:	617b      	str	r3, [r7, #20]
    z = p1 % 256;
 80011b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b4:	425a      	negs	r2, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	bf58      	it	pl
 80011bc:	4253      	negpl	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
    data[3] = x;
 80011c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011c2:	3303      	adds	r3, #3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]
    data[4] = y;
 80011ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011cc:	3304      	adds	r3, #4
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	701a      	strb	r2, [r3, #0]
    data[5] = z;
 80011d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011d6:	3305      	adds	r3, #5
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]

    x = p2 / (256*256);
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da02      	bge.n	80011ea <multisynth_program+0x1ca>
 80011e4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011e8:	33ff      	adds	r3, #255	@ 0xff
 80011ea:	141b      	asrs	r3, r3, #16
 80011ec:	61bb      	str	r3, [r7, #24]
    p2 %= (256*256);
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	425a      	negs	r2, r3
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b292      	uxth	r2, r2
 80011f6:	bf58      	it	pl
 80011f8:	4253      	negpl	r3, r2
 80011fa:	623b      	str	r3, [r7, #32]
    y = p2 / 256;
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da00      	bge.n	8001204 <multisynth_program+0x1e4>
 8001202:	33ff      	adds	r3, #255	@ 0xff
 8001204:	121b      	asrs	r3, r3, #8
 8001206:	617b      	str	r3, [r7, #20]
    z = p2 % 256;
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	425a      	negs	r2, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	bf58      	it	pl
 8001212:	4253      	negpl	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
    data[6] |= x;
 8001216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001218:	3306      	adds	r3, #6
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b25a      	sxtb	r2, r3
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	b25b      	sxtb	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b25a      	sxtb	r2, r3
 8001226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001228:	3306      	adds	r3, #6
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]
    data[7] = y;
 800122e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001230:	3307      	adds	r3, #7
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]
    data[8] = z;
 8001238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800123a:	3308      	adds	r3, #8
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]

    data[3] |= rdiv << 4;
 8001242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001244:	3303      	adds	r3, #3
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b25a      	sxtb	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	b25b      	sxtb	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b25a      	sxtb	r2, r3
 8001254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001256:	3303      	adds	r3, #3
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]
    data[0] = reg_addr;
 800125c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800125e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001262:	701a      	strb	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	@ 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800126e:	bf00      	nop
 8001270:	40600000 	.word	0x40600000

08001274 <pll_freq>:
void pll_freq(uint8_t x , uint8_t y)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	@ 0x30
 8001278:	af02      	add	r7, sp, #8
 800127a:	4603      	mov	r3, r0
 800127c:	460a      	mov	r2, r1
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	4613      	mov	r3, r2
 8001282:	71bb      	strb	r3, [r7, #6]
	uint8_t data[9] = {0};
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	711a      	strb	r2, [r3, #4]
	for (int i = 0 ; i < 9 ;++ i )
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	e008      	b.n	80012aa <pll_freq+0x36>
		  	  {
		  		  data[i] = 0;
 8001298:	f107 0208 	add.w	r2, r7, #8
 800129c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129e:	4413      	add	r3, r2
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < 9 ;++ i )
 80012a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a6:	3301      	adds	r3, #1
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	ddf3      	ble.n	8001298 <pll_freq+0x24>
		  	  }
		  data[0] = 3;
 80012b0:	2303      	movs	r3, #3
 80012b2:	723b      	strb	r3, [r7, #8]
		  data[1] = 255;
 80012b4:	23ff      	movs	r3, #255	@ 0xff
 80012b6:	727b      	strb	r3, [r7, #9]
		  i2c_write(data , 2  , 0xc0);
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	22c0      	movs	r2, #192	@ 0xc0
 80012be:	2102      	movs	r1, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe95 	bl	8000ff0 <i2c_write>
		  for (int i = 0 ; i < 9 ;++ i )
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
 80012ca:	e008      	b.n	80012de <pll_freq+0x6a>
		  {
			  data[i] = 0;
 80012cc:	f107 0208 	add.w	r2, r7, #8
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	4413      	add	r3, r2
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
		  for (int i = 0 ; i < 9 ;++ i )
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	3301      	adds	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	ddf3      	ble.n	80012cc <pll_freq+0x58>
		  }
		  multisynth_program(x, 0, 500, 0, data , 26);
 80012e4:	79f8      	ldrb	r0, [r7, #7]
 80012e6:	231a      	movs	r3, #26
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2300      	movs	r3, #0
 80012f2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012f6:	2100      	movs	r1, #0
 80012f8:	f7ff fe92 	bl	8001020 <multisynth_program>
		i2c_write(data, 9 , 0xc0);
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	22c0      	movs	r2, #192	@ 0xc0
 8001302:	2109      	movs	r1, #9
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe73 	bl	8000ff0 <i2c_write>
		for (int i = 0 ; i < 9 ;++ i )
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	e008      	b.n	8001322 <pll_freq+0xae>
		  {
			  data[i] = 0;
 8001310:	f107 0208 	add.w	r2, r7, #8
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
		for (int i = 0 ; i < 9 ;++ i )
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	3301      	adds	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	2b08      	cmp	r3, #8
 8001326:	ddf3      	ble.n	8001310 <pll_freq+0x9c>
		  }
		multisynth_program(y, 0, 1, 0, data , 58);
 8001328:	79b8      	ldrb	r0, [r7, #6]
 800132a:	233a      	movs	r3, #58	@ 0x3a
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	2201      	movs	r2, #1
 8001338:	2100      	movs	r1, #0
 800133a:	f7ff fe71 	bl	8001020 <multisynth_program>
		i2c_write(data, 9, 0xc0);
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	22c0      	movs	r2, #192	@ 0xc0
 8001344:	2109      	movs	r1, #9
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe52 	bl	8000ff0 <i2c_write>
		for (int i = 0 ; i < 9 ;++ i )
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	e008      	b.n	8001364 <pll_freq+0xf0>
		  {
			  data[i] = 0;
 8001352:	f107 0208 	add.w	r2, r7, #8
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4413      	add	r3, r2
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
		for (int i = 0 ; i < 9 ;++ i )
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	3301      	adds	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b08      	cmp	r3, #8
 8001368:	ddf3      	ble.n	8001352 <pll_freq+0xde>
		  }
		data[0] = 16;
 800136a:	2310      	movs	r3, #16
 800136c:	723b      	strb	r3, [r7, #8]
		data[1] = 0b11<<2 | 0b01;
 800136e:	230d      	movs	r3, #13
 8001370:	727b      	strb	r3, [r7, #9]
		i2c_write(data, 2, 0xc0);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	22c0      	movs	r2, #192	@ 0xc0
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fe38 	bl	8000ff0 <i2c_write>
		for (int i = 0 ; i < 9 ;++ i )
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e008      	b.n	8001398 <pll_freq+0x124>
		  {
			  data[i] = 0;
 8001386:	f107 0208 	add.w	r2, r7, #8
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	4413      	add	r3, r2
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
		for (int i = 0 ; i < 9 ;++ i )
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2b08      	cmp	r3, #8
 800139c:	ddf3      	ble.n	8001386 <pll_freq+0x112>
		  }
		data[0] = 3;
 800139e:	2303      	movs	r3, #3
 80013a0:	723b      	strb	r3, [r7, #8]
		data[1] = 255 - (1);
 80013a2:	23fe      	movs	r3, #254	@ 0xfe
 80013a4:	727b      	strb	r3, [r7, #9]
		i2c_write(data, 2, 0xc0);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	22c0      	movs	r2, #192	@ 0xc0
 80013ac:	2102      	movs	r1, #2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe1e 	bl	8000ff0 <i2c_write>
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	@ 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c2:	f000 fdde 	bl	8001f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c6:	f000 f825 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ca:	f000 fad3 	bl	8001974 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ce:	f000 faa7 	bl	8001920 <MX_DMA_Init>
  MX_CRC_Init();
 80013d2:	f000 f871 	bl	80014b8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80013d6:	f000 fa57 	bl	8001888 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013da:	f000 f951 	bl	8001680 <MX_TIM1_Init>
  MX_I2C1_Init();
 80013de:	f000 f8d1 	bl	8001584 <MX_I2C1_Init>
  MX_SPI3_Init();
 80013e2:	f000 f90f 	bl	8001604 <MX_SPI3_Init>
  MX_DAC3_Init();
 80013e6:	f000 f893 	bl	8001510 <MX_DAC3_Init>
  MX_TIM8_Init();
 80013ea:	f000 f9f9 	bl	80017e0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t data[9] = {0};
  //set_freq(send_data, 5000000, 1);
  pll_freq(32, 10);
 80013ee:	210a      	movs	r1, #10
 80013f0:	2020      	movs	r0, #32
 80013f2:	f7ff ff3f 	bl	8001274 <pll_freq>
  set_freq(send_data, 1000000, 1);
 80013f6:	2301      	movs	r3, #1
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4a04      	ldr	r2, [pc, #16]	@ (800140c <main+0x50>)
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	4803      	ldr	r0, [pc, #12]	@ (8001410 <main+0x54>)
 8001402:	f7ff fd51 	bl	8000ea8 <set_freq>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001406:	bf00      	nop
 8001408:	e7fd      	b.n	8001406 <main+0x4a>
 800140a:	bf00      	nop
 800140c:	000f4240 	.word	0x000f4240
 8001410:	08000fb1 	.word	0x08000fb1

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b094      	sub	sp, #80	@ 0x50
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	2238      	movs	r2, #56	@ 0x38
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f006 f9a0 	bl	8007768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001436:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800143a:	f002 fa69 	bl	8003910 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800143e:	2301      	movs	r3, #1
 8001440:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001442:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001446:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144c:	2303      	movs	r3, #3
 800144e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8001450:	2305      	movs	r3, #5
 8001452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001454:	233c      	movs	r3, #60	@ 0x3c
 8001456:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fb05 	bl	8003a78 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001474:	f000 fae8 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2303      	movs	r3, #3
 800147e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2104      	movs	r1, #4
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fe03 	bl	800409c <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800149c:	f000 fad4 	bl	8001a48 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80014a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014aa:	f002 ff33 	bl	8004314 <HAL_RCC_MCOConfig>
}
 80014ae:	bf00      	nop
 80014b0:	3750      	adds	r7, #80	@ 0x50
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <MX_CRC_Init+0x50>)
 80014be:	4a13      	ldr	r2, [pc, #76]	@ (800150c <MX_CRC_Init+0x54>)
 80014c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_CRC_Init+0x50>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_CRC_Init+0x50>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_CRC_Init+0x50>)
 80014d0:	f241 0221 	movw	r2, #4129	@ 0x1021
 80014d4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_CRC_Init+0x50>)
 80014d8:	2208      	movs	r2, #8
 80014da:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <MX_CRC_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_CRC_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <MX_CRC_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_CRC_Init+0x50>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_CRC_Init+0x50>)
 80014f6:	f000 fec5 	bl	8002284 <HAL_CRC_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8001500:	f000 faa2 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000028 	.word	0x20000028
 800150c:	40023000 	.word	0x40023000

08001510 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	@ 0x30
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2230      	movs	r2, #48	@ 0x30
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f006 f923 	bl	8007768 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_DAC3_Init+0x6c>)
 8001524:	4a16      	ldr	r2, [pc, #88]	@ (8001580 <MX_DAC3_Init+0x70>)
 8001526:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001528:	4814      	ldr	r0, [pc, #80]	@ (800157c <MX_DAC3_Init+0x6c>)
 800152a:	f000 ff9d 	bl	8002468 <HAL_DAC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001534:	f000 fa88 	bl	8001a48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001538:	2302      	movs	r3, #2
 800153a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = ENABLE;
 800153c:	2301      	movs	r3, #1
 800153e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001550:	2302      	movs	r3, #2
 8001552:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <MX_DAC3_Init+0x6c>)
 8001564:	f000 ffa2 	bl	80024ac <HAL_DAC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800156e:	f000 fa6b 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3730      	adds	r7, #48	@ 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000004c 	.word	0x2000004c
 8001580:	50001000 	.word	0x50001000

08001584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001588:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <MX_I2C1_Init+0x74>)
 800158a:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <MX_I2C1_Init+0x78>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20C0EDFF;
 800158e:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_I2C1_Init+0x74>)
 8001590:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <MX_I2C1_Init+0x7c>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_I2C1_Init+0x74>)
 800159c:	2201      	movs	r2, #1
 800159e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <MX_I2C1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015a6:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_I2C1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <MX_I2C1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_I2C1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <MX_I2C1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015be:	480e      	ldr	r0, [pc, #56]	@ (80015f8 <MX_I2C1_Init+0x74>)
 80015c0:	f001 fd40 	bl	8003044 <HAL_I2C_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ca:	f000 fa3d 	bl	8001a48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <MX_I2C1_Init+0x74>)
 80015d2:	f002 f905 	bl	80037e0 <HAL_I2CEx_ConfigAnalogFilter>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015dc:	f000 fa34 	bl	8001a48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <MX_I2C1_Init+0x74>)
 80015e4:	f002 f947 	bl	8003876 <HAL_I2CEx_ConfigDigitalFilter>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f000 fa2b 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000060 	.word	0x20000060
 80015fc:	40005400 	.word	0x40005400
 8001600:	20c0edff 	.word	0x20c0edff

08001604 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_SPI3_Init+0x74>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <MX_SPI3_Init+0x78>)
 800160c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_SPI3_Init+0x74>)
 8001610:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001614:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <MX_SPI3_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <MX_SPI3_Init+0x74>)
 800161e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001622:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_SPI3_Init+0x74>)
 8001626:	2202      	movs	r2, #2
 8001628:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_SPI3_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_SPI3_Init+0x74>)
 8001632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001636:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <MX_SPI3_Init+0x74>)
 800163a:	2218      	movs	r2, #24
 800163c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <MX_SPI3_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <MX_SPI3_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <MX_SPI3_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <MX_SPI3_Init+0x74>)
 8001652:	2207      	movs	r2, #7
 8001654:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <MX_SPI3_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <MX_SPI3_Init+0x74>)
 800165e:	2208      	movs	r2, #8
 8001660:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_SPI3_Init+0x74>)
 8001664:	f003 f9ca 	bl	80049fc <HAL_SPI_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800166e:	f000 f9eb 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000b4 	.word	0x200000b4
 800167c:	40003c00 	.word	0x40003c00

08001680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b09c      	sub	sp, #112	@ 0x70
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2234      	movs	r2, #52	@ 0x34
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f006 f854 	bl	8007768 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c0:	4b45      	ldr	r3, [pc, #276]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80016c2:	4a46      	ldr	r2, [pc, #280]	@ (80017dc <MX_TIM1_Init+0x15c>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016c6:	4b44      	ldr	r3, [pc, #272]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 80016d2:	4b41      	ldr	r3, [pc, #260]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80016d4:	2218      	movs	r2, #24
 80016d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016de:	4b3e      	ldr	r3, [pc, #248]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b3c      	ldr	r3, [pc, #240]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ea:	483b      	ldr	r0, [pc, #236]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80016ec:	f003 fd0a 	bl	8005104 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016f6:	f000 f9a7 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fe:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001704:	4619      	mov	r1, r3
 8001706:	4834      	ldr	r0, [pc, #208]	@ (80017d8 <MX_TIM1_Init+0x158>)
 8001708:	f003 fec8 	bl	800549c <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001712:	f000 f999 	bl	8001a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001716:	4830      	ldr	r0, [pc, #192]	@ (80017d8 <MX_TIM1_Init+0x158>)
 8001718:	f003 fd4b 	bl	80051b2 <HAL_TIM_PWM_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001722:	f000 f991 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001732:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001736:	4619      	mov	r1, r3
 8001738:	4827      	ldr	r0, [pc, #156]	@ (80017d8 <MX_TIM1_Init+0x158>)
 800173a:	f004 fc3f 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001744:	f000 f980 	bl	8001a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001748:	2360      	movs	r3, #96	@ 0x60
 800174a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001750:	2300      	movs	r3, #0
 8001752:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001764:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001768:	2200      	movs	r2, #0
 800176a:	4619      	mov	r1, r3
 800176c:	481a      	ldr	r0, [pc, #104]	@ (80017d8 <MX_TIM1_Init+0x158>)
 800176e:	f003 fd81 	bl	8005274 <HAL_TIM_PWM_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001778:	f000 f966 	bl	8001a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001794:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80017ba:	f004 fc95 	bl	80060e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80017c4:	f000 f940 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017c8:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <MX_TIM1_Init+0x158>)
 80017ca:	f000 fa95 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3770      	adds	r7, #112	@ 0x70
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000118 	.word	0x20000118
 80017dc:	40012c00 	.word	0x40012c00

080017e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017fe:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <MX_TIM8_Init+0xa0>)
 8001800:	4a20      	ldr	r2, [pc, #128]	@ (8001884 <MX_TIM8_Init+0xa4>)
 8001802:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <MX_TIM8_Init+0xa0>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <MX_TIM8_Init+0xa0>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001810:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <MX_TIM8_Init+0xa0>)
 8001812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001816:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <MX_TIM8_Init+0xa0>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <MX_TIM8_Init+0xa0>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <MX_TIM8_Init+0xa0>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800182a:	4815      	ldr	r0, [pc, #84]	@ (8001880 <MX_TIM8_Init+0xa0>)
 800182c:	f003 fc6a 	bl	8005104 <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001836:	f000 f907 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4619      	mov	r1, r3
 8001846:	480e      	ldr	r0, [pc, #56]	@ (8001880 <MX_TIM8_Init+0xa0>)
 8001848:	f003 fe28 	bl	800549c <HAL_TIM_ConfigClockSource>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001852:	f000 f8f9 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001856:	2320      	movs	r3, #32
 8001858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	@ (8001880 <MX_TIM8_Init+0xa0>)
 8001868:	f004 fba8 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001872:	f000 f8e9 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000164 	.word	0x20000164
 8001884:	40013400 	.word	0x40013400

08001888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800188c:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 800188e:	4a23      	ldr	r2, [pc, #140]	@ (800191c <MX_USART2_UART_Init+0x94>)
 8001890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001892:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c4:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d0:	4811      	ldr	r0, [pc, #68]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018d2:	f004 fc9d 	bl	8006210 <HAL_UART_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018dc:	f000 f8b4 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e0:	2100      	movs	r1, #0
 80018e2:	480d      	ldr	r0, [pc, #52]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018e4:	f005 fdf9 	bl	80074da <HAL_UARTEx_SetTxFifoThreshold>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018ee:	f000 f8ab 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f2:	2100      	movs	r1, #0
 80018f4:	4808      	ldr	r0, [pc, #32]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 80018f6:	f005 fe2e 	bl	8007556 <HAL_UARTEx_SetRxFifoThreshold>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001900:	f000 f8a2 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	@ (8001918 <MX_USART2_UART_Init+0x90>)
 8001906:	f005 fdaf 	bl	8007468 <HAL_UARTEx_DisableFifoMode>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001910:	f000 f89a 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200001b0 	.word	0x200001b0
 800191c:	40004400 	.word	0x40004400

08001920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <MX_DMA_Init+0x50>)
 8001928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800192a:	4a11      	ldr	r2, [pc, #68]	@ (8001970 <MX_DMA_Init+0x50>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6493      	str	r3, [r2, #72]	@ 0x48
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <MX_DMA_Init+0x50>)
 8001934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800193e:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <MX_DMA_Init+0x50>)
 8001940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001942:	4a0b      	ldr	r2, [pc, #44]	@ (8001970 <MX_DMA_Init+0x50>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6493      	str	r3, [r2, #72]	@ 0x48
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <MX_DMA_Init+0x50>)
 800194c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	2063      	movs	r0, #99	@ 0x63
 800195c:	f000 fc5d 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8001960:	2063      	movs	r0, #99	@ 0x63
 8001962:	f000 fc74 	bl	800224e <HAL_NVIC_EnableIRQ>

}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000

08001974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800198a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 8001990:	f043 0320 	orr.w	r3, r3, #32
 8001994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001996:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	4a27      	ldr	r2, [pc, #156]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ae:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	4a21      	ldr	r2, [pc, #132]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019de:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <MX_GPIO_Init+0xd0>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f4:	f001 fb0e 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a18:	f001 f97a 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a38:	f001 f96a 	bl	8002d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	@ 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <Error_Handler+0x8>

08001a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	4a08      	ldr	r2, [pc, #32]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_MspInit+0x44>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a8a:	f001 ffe5 	bl	8003a58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_CRC_MspInit+0x38>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10b      	bne.n	8001ac6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_CRC_MspInit+0x3c>)
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab2:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <HAL_CRC_MspInit+0x3c>)
 8001ab4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ab8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_CRC_MspInit+0x3c>)
 8001abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023000 	.word	0x40023000
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_DAC_MspInit+0x38>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10b      	bne.n	8001b06 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <HAL_DAC_MspInit+0x3c>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <HAL_DAC_MspInit+0x3c>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afa:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <HAL_DAC_MspInit+0x3c>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	50001000 	.word	0x50001000
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0a0      	sub	sp, #128	@ 0x80
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	2254      	movs	r2, #84	@ 0x54
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f005 fe13 	bl	8007768 <memset>
  if(hi2c->Instance==I2C1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2d      	ldr	r2, [pc, #180]	@ (8001bfc <HAL_I2C_MspInit+0xe0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d153      	bne.n	8001bf4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b4c:	2340      	movs	r3, #64	@ 0x40
 8001b4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fd01 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b64:	f7ff ff70 	bl	8001a48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	4b25      	ldr	r3, [pc, #148]	@ (8001c00 <HAL_I2C_MspInit+0xe4>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6c:	4a24      	ldr	r2, [pc, #144]	@ (8001c00 <HAL_I2C_MspInit+0xe4>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <HAL_I2C_MspInit+0xe4>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b80:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <HAL_I2C_MspInit+0xe4>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4a1e      	ldr	r2, [pc, #120]	@ (8001c00 <HAL_I2C_MspInit+0xe4>)
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <HAL_I2C_MspInit+0xe4>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9e:	2312      	movs	r3, #18
 8001ba0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001baa:	2304      	movs	r3, #4
 8001bac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb8:	f001 f8aa 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc0:	2312      	movs	r3, #18
 8001bc2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480b      	ldr	r0, [pc, #44]	@ (8001c04 <HAL_I2C_MspInit+0xe8>)
 8001bd8:	f001 f89a 	bl	8002d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_I2C_MspInit+0xe4>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_I2C_MspInit+0xe4>)
 8001be2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_I2C_MspInit+0xe4>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3780      	adds	r7, #128	@ 0x80
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	40021000 	.word	0x40021000
 8001c04:	48000400 	.word	0x48000400

08001c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a17      	ldr	r2, [pc, #92]	@ (8001c84 <HAL_SPI_MspInit+0x7c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d128      	bne.n	8001c7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c2a:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <HAL_SPI_MspInit+0x80>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	4a16      	ldr	r2, [pc, #88]	@ (8001c88 <HAL_SPI_MspInit+0x80>)
 8001c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c36:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <HAL_SPI_MspInit+0x80>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <HAL_SPI_MspInit+0x80>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4a10      	ldr	r2, [pc, #64]	@ (8001c88 <HAL_SPI_MspInit+0x80>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_SPI_MspInit+0x80>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001c5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c6c:	2306      	movs	r3, #6
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <HAL_SPI_MspInit+0x84>)
 8001c78:	f001 f84a 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40003c00 	.word	0x40003c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	48000800 	.word	0x48000800

08001c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <HAL_TIM_Base_MspInit+0x5c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10c      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ca2:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001ca8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001cba:	e010      	b.n	8001cde <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x64>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10b      	bne.n	8001cde <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cca:	4a09      	ldr	r2, [pc, #36]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001ccc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40013400 	.word	0x40013400

08001cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_TIM_MspPostInit+0x64>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d11b      	bne.n	8001d52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	4a10      	ldr	r2, [pc, #64]	@ (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d32:	2301      	movs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <HAL_TIM_MspPostInit+0x6c>)
 8001d4e:	f000 ffdf 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000800 	.word	0x48000800

08001d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09e      	sub	sp, #120	@ 0x78
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	2254      	movs	r2, #84	@ 0x54
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 fced 	bl	8007768 <memset>
  if(huart->Instance==USART2)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a37      	ldr	r2, [pc, #220]	@ (8001e70 <HAL_UART_MspInit+0x108>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d167      	bne.n	8001e68 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fbdb 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001db0:	f7ff fe4a 	bl	8001a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e74 <HAL_UART_MspInit+0x10c>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	4a2e      	ldr	r2, [pc, #184]	@ (8001e74 <HAL_UART_MspInit+0x10c>)
 8001dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e74 <HAL_UART_MspInit+0x10c>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	4b29      	ldr	r3, [pc, #164]	@ (8001e74 <HAL_UART_MspInit+0x10c>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd0:	4a28      	ldr	r2, [pc, #160]	@ (8001e74 <HAL_UART_MspInit+0x10c>)
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd8:	4b26      	ldr	r3, [pc, #152]	@ (8001e74 <HAL_UART_MspInit+0x10c>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001de4:	2318      	movs	r3, #24
 8001de6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df4:	2307      	movs	r3, #7
 8001df6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481e      	ldr	r0, [pc, #120]	@ (8001e78 <HAL_UART_MspInit+0x110>)
 8001e00:	f000 ff86 	bl	8002d10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e06:	4a1e      	ldr	r2, [pc, #120]	@ (8001e80 <HAL_UART_MspInit+0x118>)
 8001e08:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e0c:	221a      	movs	r2, #26
 8001e0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e1e:	2280      	movs	r2, #128	@ 0x80
 8001e20:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e22:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e28:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e3a:	4810      	ldr	r0, [pc, #64]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e3c:	f000 fcee 	bl	800281c <HAL_DMA_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8001e46:	f7ff fdff 	bl	8001a48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_UART_MspInit+0x114>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2026      	movs	r0, #38	@ 0x26
 8001e5e:	f000 f9dc 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e62:	2026      	movs	r0, #38	@ 0x26
 8001e64:	f000 f9f3 	bl	800224e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e68:	bf00      	nop
 8001e6a:	3778      	adds	r7, #120	@ 0x78
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40004400 	.word	0x40004400
 8001e74:	40021000 	.word	0x40021000
 8001e78:	48000400 	.word	0x48000400
 8001e7c:	20000244 	.word	0x20000244
 8001e80:	40020494 	.word	0x40020494

08001e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <NMI_Handler+0x4>

08001e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <HardFault_Handler+0x4>

08001e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <MemManage_Handler+0x4>

08001e9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <BusFault_Handler+0x4>

08001ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <UsageFault_Handler+0x4>

08001eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eda:	f000 f8a5 	bl	8002028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <USART2_IRQHandler+0x10>)
 8001eea:	f004 f9e1 	bl	80062b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200001b0 	.word	0x200001b0

08001ef8 <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <DMA2_Channel8_IRQHandler+0x10>)
 8001efe:	f000 fdf5 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000244 	.word	0x20000244

08001f0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	@ (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f30:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f34:	f7ff ffea 	bl	8001f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f38:	480c      	ldr	r0, [pc, #48]	@ (8001f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f3a:	490d      	ldr	r1, [pc, #52]	@ (8001f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <LoopForever+0xe>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f50:	4c0a      	ldr	r4, [pc, #40]	@ (8001f7c <LoopForever+0x16>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f005 fc0b 	bl	8007778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f62:	f7ff fa2b 	bl	80013bc <main>

08001f66 <LoopForever>:

LoopForever:
    b LoopForever
 8001f66:	e7fe      	b.n	8001f66 <LoopForever>
  ldr   r0, =_estack
 8001f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f74:	08007828 	.word	0x08007828
  ldr r2, =_sbss
 8001f78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f7c:	200002a8 	.word	0x200002a8

08001f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC1_2_IRQHandler>

08001f82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 f939 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f92:	200f      	movs	r0, #15
 8001f94:	f000 f80e 	bl	8001fb4 <HAL_InitTick>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	e001      	b.n	8001fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fa4:	f7ff fd56 	bl	8001a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]

}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fc0:	4b16      	ldr	r3, [pc, #88]	@ (800201c <HAL_InitTick+0x68>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d022      	beq.n	800200e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fc8:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <HAL_InitTick+0x6c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <HAL_InitTick+0x68>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 f944 	bl	800226a <HAL_SYSTICK_Config>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10f      	bne.n	8002008 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	d809      	bhi.n	8002002 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff6:	f000 f910 	bl	800221a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <HAL_InitTick+0x70>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e007      	b.n	8002012 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e004      	b.n	8002012 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e001      	b.n	8002012 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000008 	.word	0x20000008
 8002020:	20000000 	.word	0x20000000
 8002024:	20000004 	.word	0x20000004

08002028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_IncTick+0x1c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_IncTick+0x20>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4413      	add	r3, r2
 8002036:	4a03      	ldr	r2, [pc, #12]	@ (8002044 <HAL_IncTick+0x1c>)
 8002038:	6013      	str	r3, [r2, #0]
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	200002a4 	.word	0x200002a4
 8002048:	20000008 	.word	0x20000008

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	200002a4 	.word	0x200002a4

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff29 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002228:	f7ff ff40 	bl	80020ac <__NVIC_GetPriorityGrouping>
 800222c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7ff ff90 	bl	8002158 <NVIC_EncodePriority>
 8002238:	4602      	mov	r2, r0
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff5f 	bl	8002104 <__NVIC_SetPriority>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff33 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffa4 	bl	80021c0 <SysTick_Config>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e054      	b.n	8002340 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7f5b      	ldrb	r3, [r3, #29]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fbf8 	bl	8001a9c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	791b      	ldrb	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10c      	bne.n	80022d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a22      	ldr	r2, [pc, #136]	@ (8002348 <HAL_CRC_Init+0xc4>)
 80022c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0218 	bic.w	r2, r2, #24
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	e00c      	b.n	80022ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6899      	ldr	r1, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	461a      	mov	r2, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f834 	bl	800234c <HAL_CRCEx_Polynomial_Set>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e028      	b.n	8002340 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	795b      	ldrb	r3, [r3, #5]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f04f 32ff 	mov.w	r2, #4294967295
 80022fe:	611a      	str	r2, [r3, #16]
 8002300:	e004      	b.n	800230c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6912      	ldr	r2, [r2, #16]
 800230a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	04c11db7 	.word	0x04c11db7

0800234c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800235c:	231f      	movs	r3, #31
 800235e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
 800236e:	e063      	b.n	8002438 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002370:	bf00      	nop
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1e5a      	subs	r2, r3, #1
 8002376:	613a      	str	r2, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <HAL_CRCEx_Polynomial_Set+0x44>
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b18      	cmp	r3, #24
 8002394:	d846      	bhi.n	8002424 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002396:	a201      	add	r2, pc, #4	@ (adr r2, 800239c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	0800242b 	.word	0x0800242b
 80023a0:	08002425 	.word	0x08002425
 80023a4:	08002425 	.word	0x08002425
 80023a8:	08002425 	.word	0x08002425
 80023ac:	08002425 	.word	0x08002425
 80023b0:	08002425 	.word	0x08002425
 80023b4:	08002425 	.word	0x08002425
 80023b8:	08002425 	.word	0x08002425
 80023bc:	08002419 	.word	0x08002419
 80023c0:	08002425 	.word	0x08002425
 80023c4:	08002425 	.word	0x08002425
 80023c8:	08002425 	.word	0x08002425
 80023cc:	08002425 	.word	0x08002425
 80023d0:	08002425 	.word	0x08002425
 80023d4:	08002425 	.word	0x08002425
 80023d8:	08002425 	.word	0x08002425
 80023dc:	0800240d 	.word	0x0800240d
 80023e0:	08002425 	.word	0x08002425
 80023e4:	08002425 	.word	0x08002425
 80023e8:	08002425 	.word	0x08002425
 80023ec:	08002425 	.word	0x08002425
 80023f0:	08002425 	.word	0x08002425
 80023f4:	08002425 	.word	0x08002425
 80023f8:	08002425 	.word	0x08002425
 80023fc:	08002401 	.word	0x08002401
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b06      	cmp	r3, #6
 8002404:	d913      	bls.n	800242e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800240a:	e010      	b.n	800242e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b07      	cmp	r3, #7
 8002410:	d90f      	bls.n	8002432 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002416:	e00c      	b.n	8002432 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b0f      	cmp	r3, #15
 800241c:	d90b      	bls.n	8002436 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002422:	e008      	b.n	8002436 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	75fb      	strb	r3, [r7, #23]
        break;
 8002428:	e006      	b.n	8002438 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800242a:	bf00      	nop
 800242c:	e004      	b.n	8002438 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002436:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002438:	7dfb      	ldrb	r3, [r7, #23]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 0118 	bic.w	r1, r3, #24
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
}
 800245c:	4618      	mov	r0, r3
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e014      	b.n	80024a4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	791b      	ldrb	r3, [r3, #4]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fb26 	bl	8001adc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	@ 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_DAC_ConfigChannel+0x1c>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e19e      	b.n	800280a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	795b      	ldrb	r3, [r3, #5]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_DAC_ConfigChannel+0x2c>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e198      	b.n	800280a <HAL_DAC_ConfigChannel+0x35e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2202      	movs	r2, #2
 80024e2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d17a      	bne.n	80025e2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80024ec:	f7ff fdae 	bl	800204c <HAL_GetTick>
 80024f0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d13d      	bne.n	8002574 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024f8:	e018      	b.n	800252c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024fa:	f7ff fda7 	bl	800204c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d911      	bls.n	800252c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f043 0208 	orr.w	r2, r3, #8
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2203      	movs	r2, #3
 8002526:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e16e      	b.n	800280a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1df      	bne.n	80024fa <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40
 8002544:	e020      	b.n	8002588 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002546:	f7ff fd81 	bl	800204c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d90f      	bls.n	8002574 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255a:	2b00      	cmp	r3, #0
 800255c:	da0a      	bge.n	8002574 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f043 0208 	orr.w	r2, r3, #8
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2203      	movs	r2, #3
 800256e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e14a      	b.n	800280a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257a:	2b00      	cmp	r3, #0
 800257c:	dbe3      	blt.n	8002546 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002586:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	ea02 0103 	and.w	r1, r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	409a      	lsls	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	21ff      	movs	r1, #255	@ 0xff
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	ea02 0103 	and.w	r1, r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	409a      	lsls	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d11d      	bne.n	8002626 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	221f      	movs	r2, #31
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002602:	4013      	ands	r3, r2
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261a:	4313      	orrs	r3, r2
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002624:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2207      	movs	r2, #7
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263e:	4013      	ands	r3, r2
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
 800264e:	e00f      	b.n	8002670 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d102      	bne.n	800265e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002658:	2301      	movs	r3, #1
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	e008      	b.n	8002670 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002666:	2301      	movs	r3, #1
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	e001      	b.n	8002670 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	6a3a      	ldr	r2, [r7, #32]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002692:	4013      	ands	r3, r2
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	791b      	ldrb	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_DAC_ConfigChannel+0x1f8>
 800269e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026a2:	e000      	b.n	80026a6 <HAL_DAC_ConfigChannel+0x1fa>
 80026a4:	2300      	movs	r3, #0
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026be:	4013      	ands	r3, r2
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	795b      	ldrb	r3, [r3, #5]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_DAC_ConfigChannel+0x224>
 80026ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026ce:	e000      	b.n	80026d2 <HAL_DAC_ConfigChannel+0x226>
 80026d0:	2300      	movs	r3, #0
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d114      	bne.n	8002712 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80026e8:	f001 febc 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80026ec:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4a48      	ldr	r2, [pc, #288]	@ (8002814 <HAL_DAC_ConfigChannel+0x368>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d904      	bls.n	8002700 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fe:	e00f      	b.n	8002720 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4a45      	ldr	r2, [pc, #276]	@ (8002818 <HAL_DAC_ConfigChannel+0x36c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d90a      	bls.n	800271e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002710:	e006      	b.n	8002720 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002718:	4313      	orrs	r3, r2
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
 800271c:	e000      	b.n	8002720 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800271e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272e:	4313      	orrs	r3, r2
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	400a      	ands	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002772:	4013      	ands	r3, r2
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800278a:	4313      	orrs	r3, r2
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002794:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	22c0      	movs	r2, #192	@ 0xc0
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43da      	mvns	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	400a      	ands	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	ea02 0103 	and.w	r1, r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002808:	7ffb      	ldrb	r3, [r7, #31]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3728      	adds	r7, #40	@ 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	09896800 	.word	0x09896800
 8002818:	04c4b400 	.word	0x04c4b400

0800281c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e08d      	b.n	800294a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_DMA_Init+0x138>)
 8002836:	429a      	cmp	r2, r3
 8002838:	d80f      	bhi.n	800285a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b45      	ldr	r3, [pc, #276]	@ (8002958 <HAL_DMA_Init+0x13c>)
 8002842:	4413      	add	r3, r2
 8002844:	4a45      	ldr	r2, [pc, #276]	@ (800295c <HAL_DMA_Init+0x140>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	009a      	lsls	r2, r3, #2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a42      	ldr	r2, [pc, #264]	@ (8002960 <HAL_DMA_Init+0x144>)
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40
 8002858:	e00e      	b.n	8002878 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	4b40      	ldr	r3, [pc, #256]	@ (8002964 <HAL_DMA_Init+0x148>)
 8002862:	4413      	add	r3, r2
 8002864:	4a3d      	ldr	r2, [pc, #244]	@ (800295c <HAL_DMA_Init+0x140>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	009a      	lsls	r2, r3, #2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a3c      	ldr	r2, [pc, #240]	@ (8002968 <HAL_DMA_Init+0x14c>)
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800288e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002892:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f9be 	bl	8002c4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028d8:	d102      	bne.n	80028e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_DMA_Init+0x104>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d80c      	bhi.n	8002920 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f9de 	bl	8002cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e008      	b.n	8002932 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40020407 	.word	0x40020407
 8002958:	bffdfff8 	.word	0xbffdfff8
 800295c:	cccccccd 	.word	0xcccccccd
 8002960:	40020000 	.word	0x40020000
 8002964:	bffdfbf8 	.word	0xbffdfbf8
 8002968:	40020400 	.word	0x40020400

0800296c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d005      	beq.n	8002990 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2204      	movs	r2, #4
 8002988:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e037      	b.n	8002a00 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 020e 	bic.w	r2, r2, #14
 800299e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ae:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029dc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029f4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029fe:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d00d      	beq.n	8002a52 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2204      	movs	r2, #4
 8002a3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e047      	b.n	8002ae2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 020e 	bic.w	r2, r2, #14
 8002a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f003 021f 	and.w	r2, r3, #31
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a9e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ac0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
    }
  }
  return status;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d026      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x7a>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d021      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d071      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b64:	e06c      	b.n	8002c40 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2202      	movs	r2, #2
 8002b70:	409a      	lsls	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02e      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d029      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10b      	bne.n	8002baa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 020a 	bic.w	r2, r2, #10
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	f003 021f 	and.w	r2, r3, #31
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d038      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002bd6:	e033      	b.n	8002c40 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2208      	movs	r2, #8
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d02a      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d025      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 020e 	bic.w	r2, r2, #14
 8002c04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	f003 021f 	and.w	r2, r3, #31
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
}
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d802      	bhi.n	8002c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002c60:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e001      	b.n	8002c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c68:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	3b08      	subs	r3, #8
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	009a      	lsls	r2, r3, #2
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40020407 	.word	0x40020407
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	40020820 	.word	0x40020820
 8002cc0:	cccccccd 	.word	0xcccccccd
 8002cc4:	40020880 	.word	0x40020880

08002cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a08      	ldr	r2, [pc, #32]	@ (8002d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	1000823f 	.word	0x1000823f
 8002d0c:	40020940 	.word	0x40020940

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d1e:	e15a      	b.n	8002fd6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 814c 	beq.w	8002fd0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d005      	beq.n	8002d50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d130      	bne.n	8002db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d86:	2201      	movs	r2, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	f003 0201 	and.w	r2, r3, #1
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d017      	beq.n	8002dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d123      	bne.n	8002e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	08da      	lsrs	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3208      	adds	r2, #8
 8002e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	220f      	movs	r2, #15
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	6939      	ldr	r1, [r7, #16]
 8002e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0203 	and.w	r2, r3, #3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80a6 	beq.w	8002fd0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e84:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff4 <HAL_GPIO_Init+0x2e4>)
 8002e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e88:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff4 <HAL_GPIO_Init+0x2e4>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e90:	4b58      	ldr	r3, [pc, #352]	@ (8002ff4 <HAL_GPIO_Init+0x2e4>)
 8002e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9c:	4a56      	ldr	r2, [pc, #344]	@ (8002ff8 <HAL_GPIO_Init+0x2e8>)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ec6:	d01f      	beq.n	8002f08 <HAL_GPIO_Init+0x1f8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a4c      	ldr	r2, [pc, #304]	@ (8002ffc <HAL_GPIO_Init+0x2ec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d019      	beq.n	8002f04 <HAL_GPIO_Init+0x1f4>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a4b      	ldr	r2, [pc, #300]	@ (8003000 <HAL_GPIO_Init+0x2f0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_GPIO_Init+0x1f0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a4a      	ldr	r2, [pc, #296]	@ (8003004 <HAL_GPIO_Init+0x2f4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00d      	beq.n	8002efc <HAL_GPIO_Init+0x1ec>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a49      	ldr	r2, [pc, #292]	@ (8003008 <HAL_GPIO_Init+0x2f8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <HAL_GPIO_Init+0x1e8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a48      	ldr	r2, [pc, #288]	@ (800300c <HAL_GPIO_Init+0x2fc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_GPIO_Init+0x1e4>
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	e00a      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002ef4:	2306      	movs	r3, #6
 8002ef6:	e008      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e006      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002efc:	2303      	movs	r3, #3
 8002efe:	e004      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_GPIO_Init+0x1fa>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f1a:	4937      	ldr	r1, [pc, #220]	@ (8002ff8 <HAL_GPIO_Init+0x2e8>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f28:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f4c:	4a30      	ldr	r2, [pc, #192]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f52:	4b2f      	ldr	r3, [pc, #188]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f76:	4a26      	ldr	r2, [pc, #152]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f7c:	4b24      	ldr	r3, [pc, #144]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fca:	4a11      	ldr	r2, [pc, #68]	@ (8003010 <HAL_GPIO_Init+0x300>)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f47f ae9d 	bne.w	8002d20 <HAL_GPIO_Init+0x10>
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	48000400 	.word	0x48000400
 8003000:	48000800 	.word	0x48000800
 8003004:	48000c00 	.word	0x48000c00
 8003008:	48001000 	.word	0x48001000
 800300c:	48001400 	.word	0x48001400
 8003010:	40010400 	.word	0x40010400

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003030:	e002      	b.n	8003038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e08d      	b.n	8003172 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe fd56 	bl	8001b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	@ 0x24
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003094:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	e006      	b.n	80030cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80030ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d108      	bne.n	80030e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	e007      	b.n	80030f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003108:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003118:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69d9      	ldr	r1, [r3, #28]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af02      	add	r7, sp, #8
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	461a      	mov	r2, r3
 8003188:	460b      	mov	r3, r1
 800318a:	817b      	strh	r3, [r7, #10]
 800318c:	4613      	mov	r3, r2
 800318e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b20      	cmp	r3, #32
 800319a:	f040 80fd 	bne.w	8003398 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_I2C_Master_Transmit+0x30>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0f6      	b.n	800339a <HAL_I2C_Master_Transmit+0x21e>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031b4:	f7fe ff4a 	bl	800204c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2319      	movs	r3, #25
 80031c0:	2201      	movs	r2, #1
 80031c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f914 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0e1      	b.n	800339a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2221      	movs	r2, #33	@ 0x21
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2210      	movs	r2, #16
 80031e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	893a      	ldrh	r2, [r7, #8]
 80031f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	2bff      	cmp	r3, #255	@ 0xff
 8003206:	d906      	bls.n	8003216 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	22ff      	movs	r2, #255	@ 0xff
 800320c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800320e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e007      	b.n	8003226 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003220:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003224:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	2b00      	cmp	r3, #0
 800322c:	d024      	beq.n	8003278 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	781a      	ldrb	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003262:	b2db      	uxtb	r3, r3
 8003264:	3301      	adds	r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	4b4e      	ldr	r3, [pc, #312]	@ (80033a4 <HAL_I2C_Master_Transmit+0x228>)
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fa83 	bl	800377c <I2C_TransferConfig>
 8003276:	e066      	b.n	8003346 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327c:	b2da      	uxtb	r2, r3
 800327e:	8979      	ldrh	r1, [r7, #10]
 8003280:	4b48      	ldr	r3, [pc, #288]	@ (80033a4 <HAL_I2C_Master_Transmit+0x228>)
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fa78 	bl	800377c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800328c:	e05b      	b.n	8003346 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	6a39      	ldr	r1, [r7, #32]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f907 	bl	80034a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07b      	b.n	800339a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d034      	beq.n	8003346 <HAL_I2C_Master_Transmit+0x1ca>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d130      	bne.n	8003346 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2200      	movs	r2, #0
 80032ec:	2180      	movs	r1, #128	@ 0x80
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f880 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e04d      	b.n	800339a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	2bff      	cmp	r3, #255	@ 0xff
 8003306:	d90e      	bls.n	8003326 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	22ff      	movs	r2, #255	@ 0xff
 800330c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	b2da      	uxtb	r2, r3
 8003314:	8979      	ldrh	r1, [r7, #10]
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fa2c 	bl	800377c <I2C_TransferConfig>
 8003324:	e00f      	b.n	8003346 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003334:	b2da      	uxtb	r2, r3
 8003336:	8979      	ldrh	r1, [r7, #10]
 8003338:	2300      	movs	r3, #0
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa1b 	bl	800377c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d19e      	bne.n	800328e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	6a39      	ldr	r1, [r7, #32]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f8ed 	bl	8003534 <I2C_WaitOnSTOPFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e01a      	b.n	800339a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2220      	movs	r2, #32
 800336a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <HAL_I2C_Master_Transmit+0x22c>)
 8003378:	400b      	ands	r3, r1
 800337a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	80002000 	.word	0x80002000
 80033a8:	fe00e800 	.word	0xfe00e800

080033ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d103      	bne.n	80033ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d007      	beq.n	80033e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	619a      	str	r2, [r3, #24]
  }
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003404:	e03b      	b.n	800347e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	6839      	ldr	r1, [r7, #0]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f8d6 	bl	80035bc <I2C_IsErrorOccurred>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e041      	b.n	800349e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d02d      	beq.n	800347e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003422:	f7fe fe13 	bl	800204c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d122      	bne.n	800347e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	429a      	cmp	r2, r3
 8003454:	d113      	bne.n	800347e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699a      	ldr	r2, [r3, #24]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d0b4      	beq.n	8003406 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034b2:	e033      	b.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f87f 	bl	80035bc <I2C_IsErrorOccurred>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e031      	b.n	800352c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d025      	beq.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d0:	f7fe fdbc 	bl	800204c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d302      	bcc.n	80034e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11a      	bne.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d013      	beq.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e007      	b.n	800352c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d1c4      	bne.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003540:	e02f      	b.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f838 	bl	80035bc <I2C_IsErrorOccurred>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e02d      	b.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fe fd79 	bl	800204c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11a      	bne.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b20      	cmp	r3, #32
 8003578:	d013      	beq.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e007      	b.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d1c8      	bne.n	8003542 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d068      	beq.n	80036ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2210      	movs	r2, #16
 80035ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035f0:	e049      	b.n	8003686 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d045      	beq.n	8003686 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fe fd27 	bl	800204c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_IsErrorOccurred+0x54>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d13a      	bne.n	8003686 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800361a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003622:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800362e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003632:	d121      	bne.n	8003678 <I2C_IsErrorOccurred+0xbc>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800363a:	d01d      	beq.n	8003678 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	2b20      	cmp	r3, #32
 8003640:	d01a      	beq.n	8003678 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003650:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003652:	f7fe fcfb 	bl	800204c <HAL_GetTick>
 8003656:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003658:	e00e      	b.n	8003678 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800365a:	f7fe fcf7 	bl	800204c <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b19      	cmp	r3, #25
 8003666:	d907      	bls.n	8003678 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	f043 0320 	orr.w	r3, r3, #32
 800366e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003676:	e006      	b.n	8003686 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b20      	cmp	r3, #32
 8003684:	d1e9      	bne.n	800365a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b20      	cmp	r3, #32
 8003692:	d003      	beq.n	800369c <I2C_IsErrorOccurred+0xe0>
 8003694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0aa      	beq.n	80035f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800369c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2220      	movs	r2, #32
 80036aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	f043 0308 	orr.w	r3, r3, #8
 80036f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003720:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01c      	beq.n	800376a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff fe3b 	bl	80033ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b0d      	ldr	r3, [pc, #52]	@ (8003778 <I2C_IsErrorOccurred+0x1bc>)
 8003742:	400b      	ands	r3, r1
 8003744:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800376a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800376e:	4618      	mov	r0, r3
 8003770:	3728      	adds	r7, #40	@ 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	fe00e800 	.word	0xfe00e800

0800377c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	817b      	strh	r3, [r7, #10]
 800378a:	4613      	mov	r3, r2
 800378c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003794:	7a7b      	ldrb	r3, [r7, #9]
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800379c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	0d5b      	lsrs	r3, r3, #21
 80037b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80037ba:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <I2C_TransferConfig+0x60>)
 80037bc:	430b      	orrs	r3, r1
 80037be:	43db      	mvns	r3, r3
 80037c0:	ea02 0103 	and.w	r1, r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	03ff63ff 	.word	0x03ff63ff

080037e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d138      	bne.n	8003868 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003800:	2302      	movs	r3, #2
 8003802:	e032      	b.n	800386a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2224      	movs	r2, #36	@ 0x24
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003832:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6819      	ldr	r1, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b20      	cmp	r3, #32
 800388a:	d139      	bne.n	8003900 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003896:	2302      	movs	r3, #2
 8003898:	e033      	b.n	8003902 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2224      	movs	r2, #36	@ 0x24
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d141      	bne.n	80039a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800391e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800392a:	d131      	bne.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800392c:	4b47      	ldr	r3, [pc, #284]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003932:	4a46      	ldr	r2, [pc, #280]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003938:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800393c:	4b43      	ldr	r3, [pc, #268]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003944:	4a41      	ldr	r2, [pc, #260]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800394a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800394c:	4b40      	ldr	r3, [pc, #256]	@ (8003a50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2232      	movs	r2, #50	@ 0x32
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	4a3f      	ldr	r2, [pc, #252]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	0c9b      	lsrs	r3, r3, #18
 800395e:	3301      	adds	r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003962:	e002      	b.n	800396a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3b01      	subs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800396a:	4b38      	ldr	r3, [pc, #224]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003976:	d102      	bne.n	800397e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f2      	bne.n	8003964 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800397e:	4b33      	ldr	r3, [pc, #204]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398a:	d158      	bne.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e057      	b.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003990:	4b2e      	ldr	r3, [pc, #184]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003996:	4a2d      	ldr	r2, [pc, #180]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800399c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039a0:	e04d      	b.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a8:	d141      	bne.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039aa:	4b28      	ldr	r3, [pc, #160]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b6:	d131      	bne.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039b8:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039be:	4a23      	ldr	r2, [pc, #140]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c8:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039d0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2232      	movs	r2, #50	@ 0x32
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	0c9b      	lsrs	r3, r3, #18
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ee:	e002      	b.n	80039f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f6:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a02:	d102      	bne.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f2      	bne.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a0a:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a16:	d112      	bne.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e011      	b.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a22:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a2c:	e007      	b.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a2e:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a36:	4a05      	ldr	r2, [pc, #20]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	20000000 	.word	0x20000000
 8003a54:	431bde83 	.word	0x431bde83

08003a58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a5c:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a04      	ldr	r2, [pc, #16]	@ (8003a74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a66:	6093      	str	r3, [r2, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40007000 	.word	0x40007000

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e2fe      	b.n	8004088 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d075      	beq.n	8003b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a96:	4b97      	ldr	r3, [pc, #604]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa0:	4b94      	ldr	r3, [pc, #592]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x3e>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_OscConfig+0x44>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d10b      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	4b8d      	ldr	r3, [pc, #564]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05b      	beq.n	8003b80 <HAL_RCC_OscConfig+0x108>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d157      	bne.n	8003b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e2d9      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003adc:	d106      	bne.n	8003aec <HAL_RCC_OscConfig+0x74>
 8003ade:	4b85      	ldr	r3, [pc, #532]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a84      	ldr	r2, [pc, #528]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e01d      	b.n	8003b28 <HAL_RCC_OscConfig+0xb0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x98>
 8003af6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7e      	ldr	r2, [pc, #504]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b7c      	ldr	r3, [pc, #496]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7b      	ldr	r2, [pc, #492]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0xb0>
 8003b10:	4b78      	ldr	r3, [pc, #480]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a77      	ldr	r2, [pc, #476]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b75      	ldr	r3, [pc, #468]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a74      	ldr	r2, [pc, #464]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe fa8c 	bl	800204c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fe fa88 	bl	800204c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	@ 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e29e      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0xc0>
 8003b56:	e014      	b.n	8003b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe fa78 	bl	800204c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fe fa74 	bl	800204c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	@ 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e28a      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b72:	4b60      	ldr	r3, [pc, #384]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0xe8>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d075      	beq.n	8003c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8e:	4b59      	ldr	r3, [pc, #356]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b98:	4b56      	ldr	r3, [pc, #344]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	d102      	bne.n	8003bae <HAL_RCC_OscConfig+0x136>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d002      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x13c>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d11f      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_OscConfig+0x154>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e25d      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bcc:	4b49      	ldr	r3, [pc, #292]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	4946      	ldr	r1, [pc, #280]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003be0:	4b45      	ldr	r3, [pc, #276]	@ (8003cf8 <HAL_RCC_OscConfig+0x280>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe f9e5 	bl	8001fb4 <HAL_InitTick>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d043      	beq.n	8003c78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e249      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d023      	beq.n	8003c44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a3c      	ldr	r2, [pc, #240]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe fa20 	bl	800204c <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c10:	f7fe fa1c 	bl	800204c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e232      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c22:	4b34      	ldr	r3, [pc, #208]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b31      	ldr	r3, [pc, #196]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	061b      	lsls	r3, r3, #24
 8003c3c:	492d      	ldr	r1, [pc, #180]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
 8003c42:	e01a      	b.n	8003c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe f9fc 	bl	800204c <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fe f9f8 	bl	800204c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e20e      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6a:	4b22      	ldr	r3, [pc, #136]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x1e0>
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d041      	beq.n	8003d0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8e:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c94:	4a17      	ldr	r2, [pc, #92]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9e:	f7fe f9d5 	bl	800204c <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca6:	f7fe f9d1 	bl	800204c <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e1e7      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ef      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x22e>
 8003cc6:	e020      	b.n	8003d0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cce:	4a09      	ldr	r2, [pc, #36]	@ (8003cf4 <HAL_RCC_OscConfig+0x27c>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fe f9b8 	bl	800204c <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cde:	e00d      	b.n	8003cfc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fe f9b4 	bl	800204c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d906      	bls.n	8003cfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1ca      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ea      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80a6 	beq.w	8003e64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d1c:	4b84      	ldr	r3, [pc, #528]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_OscConfig+0x2b4>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x2b6>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b7f      	ldr	r3, [pc, #508]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	4a7e      	ldr	r2, [pc, #504]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	4b79      	ldr	r3, [pc, #484]	@ (8003f34 <HAL_RCC_OscConfig+0x4bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5a:	4b76      	ldr	r3, [pc, #472]	@ (8003f34 <HAL_RCC_OscConfig+0x4bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a75      	ldr	r2, [pc, #468]	@ (8003f34 <HAL_RCC_OscConfig+0x4bc>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7fe f971 	bl	800204c <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fe f96d 	bl	800204c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e183      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b6c      	ldr	r3, [pc, #432]	@ (8003f34 <HAL_RCC_OscConfig+0x4bc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d108      	bne.n	8003da6 <HAL_RCC_OscConfig+0x32e>
 8003d94:	4b66      	ldr	r3, [pc, #408]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9a:	4a65      	ldr	r2, [pc, #404]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003da4:	e024      	b.n	8003df0 <HAL_RCC_OscConfig+0x378>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d110      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x358>
 8003dae:	4b60      	ldr	r3, [pc, #384]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dce:	e00f      	b.n	8003df0 <HAL_RCC_OscConfig+0x378>
 8003dd0:	4b57      	ldr	r3, [pc, #348]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a56      	ldr	r2, [pc, #344]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de0:	4b53      	ldr	r3, [pc, #332]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	4a52      	ldr	r2, [pc, #328]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d016      	beq.n	8003e26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7fe f928 	bl	800204c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fe f924 	bl	800204c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e138      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e16:	4b46      	ldr	r3, [pc, #280]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ed      	beq.n	8003e00 <HAL_RCC_OscConfig+0x388>
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e26:	f7fe f911 	bl	800204c <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fe f90d 	bl	800204c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e121      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e44:	4b3a      	ldr	r3, [pc, #232]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ed      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e52:	7ffb      	ldrb	r3, [r7, #31]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e58:	4b35      	ldr	r3, [pc, #212]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5c:	4a34      	ldr	r2, [pc, #208]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d03c      	beq.n	8003eea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e78:	4b2d      	ldr	r3, [pc, #180]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fe f8e0 	bl	800204c <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e90:	f7fe f8dc 	bl	800204c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0f2      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ea2:	4b23      	ldr	r3, [pc, #140]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ef      	beq.n	8003e90 <HAL_RCC_OscConfig+0x418>
 8003eb0:	e01b      	b.n	8003eea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec2:	f7fe f8c3 	bl	800204c <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eca:	f7fe f8bf 	bl	800204c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0d5      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003edc:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ef      	bne.n	8003eca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80c9 	beq.w	8004086 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b0c      	cmp	r3, #12
 8003efe:	f000 8083 	beq.w	8004008 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d15e      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0a:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a08      	ldr	r2, [pc, #32]	@ (8003f30 <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fe f899 	bl	800204c <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f1c:	e00c      	b.n	8003f38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fe f895 	bl	800204c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d905      	bls.n	8003f38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0ab      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f38:	4b55      	ldr	r3, [pc, #340]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ec      	bne.n	8003f1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f44:	4b52      	ldr	r3, [pc, #328]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <HAL_RCC_OscConfig+0x61c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6a11      	ldr	r1, [r2, #32]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f54:	3a01      	subs	r2, #1
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	4311      	orrs	r1, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f5e:	0212      	lsls	r2, r2, #8
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f66:	0852      	lsrs	r2, r2, #1
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0552      	lsls	r2, r2, #21
 8003f6c:	4311      	orrs	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f72:	0852      	lsrs	r2, r2, #1
 8003f74:	3a01      	subs	r2, #1
 8003f76:	0652      	lsls	r2, r2, #25
 8003f78:	4311      	orrs	r1, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f7e:	06d2      	lsls	r2, r2, #27
 8003f80:	430a      	orrs	r2, r1
 8003f82:	4943      	ldr	r1, [pc, #268]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f88:	4b41      	ldr	r3, [pc, #260]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a40      	ldr	r2, [pc, #256]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f94:	4b3e      	ldr	r3, [pc, #248]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a3d      	ldr	r2, [pc, #244]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe f854 	bl	800204c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fe f850 	bl	800204c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e066      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	4b35      	ldr	r3, [pc, #212]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x530>
 8003fc6:	e05e      	b.n	8004086 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a30      	ldr	r2, [pc, #192]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f83a 	bl	800204c <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fe f836 	bl	800204c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e04c      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fee:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ffa:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	4924      	ldr	r1, [pc, #144]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8004000:	4b25      	ldr	r3, [pc, #148]	@ (8004098 <HAL_RCC_OscConfig+0x620>)
 8004002:	4013      	ands	r3, r2
 8004004:	60cb      	str	r3, [r1, #12]
 8004006:	e03e      	b.n	8004086 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e039      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004014:	4b1e      	ldr	r3, [pc, #120]	@ (8004090 <HAL_RCC_OscConfig+0x618>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0203 	and.w	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	429a      	cmp	r2, r3
 8004026:	d12c      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	3b01      	subs	r3, #1
 8004034:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d123      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d11b      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d113      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d109      	bne.n	8004082 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	019f800c 	.word	0x019f800c
 8004098:	feeefffc 	.word	0xfeeefffc

0800409c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e11e      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b91      	ldr	r3, [pc, #580]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b8e      	ldr	r3, [pc, #568]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 020f 	bic.w	r2, r3, #15
 80040ca:	498c      	ldr	r1, [pc, #560]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b8a      	ldr	r3, [pc, #552]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e106      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d073      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d129      	bne.n	800414c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f8:	4b81      	ldr	r3, [pc, #516]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0f4      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004108:	f000 f9e4 	bl	80044d4 <RCC_GetSysClockFreqFromPLLSource>
 800410c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4a7c      	ldr	r2, [pc, #496]	@ (8004304 <HAL_RCC_ClockConfig+0x268>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d93f      	bls.n	8004196 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004116:	4b7a      	ldr	r3, [pc, #488]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800412a:	2b00      	cmp	r3, #0
 800412c:	d033      	beq.n	8004196 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004132:	2b00      	cmp	r3, #0
 8004134:	d12f      	bne.n	8004196 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004136:	4b72      	ldr	r3, [pc, #456]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800413e:	4a70      	ldr	r2, [pc, #448]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004144:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004146:	2380      	movs	r3, #128	@ 0x80
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e024      	b.n	8004196 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d107      	bne.n	8004164 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004154:	4b6a      	ldr	r3, [pc, #424]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0c6      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004164:	4b66      	ldr	r3, [pc, #408]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0be      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004174:	f000 f914 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004178:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4a61      	ldr	r2, [pc, #388]	@ (8004304 <HAL_RCC_ClockConfig+0x268>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d909      	bls.n	8004196 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004182:	4b5f      	ldr	r3, [pc, #380]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800418a:	4a5d      	ldr	r2, [pc, #372]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 800418c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004190:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004196:	4b5a      	ldr	r3, [pc, #360]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 0203 	bic.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4957      	ldr	r1, [pc, #348]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fd ff50 	bl	800204c <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b0:	f7fd ff4c 	bl	800204c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e095      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 020c 	and.w	r2, r3, #12
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d1eb      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d023      	beq.n	800422c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f0:	4b43      	ldr	r3, [pc, #268]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a42      	ldr	r2, [pc, #264]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80041f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004208:	4b3d      	ldr	r3, [pc, #244]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004210:	4a3b      	ldr	r2, [pc, #236]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004212:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004216:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004218:	4b39      	ldr	r3, [pc, #228]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4936      	ldr	r1, [pc, #216]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
 800422a:	e008      	b.n	800423e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b80      	cmp	r3, #128	@ 0x80
 8004230:	d105      	bne.n	800423e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004232:	4b33      	ldr	r3, [pc, #204]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	4a32      	ldr	r2, [pc, #200]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004238:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800423c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800423e:	4b2f      	ldr	r3, [pc, #188]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d21d      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424c:	4b2b      	ldr	r3, [pc, #172]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 020f 	bic.w	r2, r3, #15
 8004254:	4929      	ldr	r1, [pc, #164]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800425c:	f7fd fef6 	bl	800204c <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	e00a      	b.n	800427a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004264:	f7fd fef2 	bl	800204c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e03b      	b.n	80042f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b20      	ldr	r3, [pc, #128]	@ (80042fc <HAL_RCC_ClockConfig+0x260>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d1ed      	bne.n	8004264 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004294:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4917      	ldr	r1, [pc, #92]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b2:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	490f      	ldr	r1, [pc, #60]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042c6:	f000 f86b 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 80042ca:	4602      	mov	r2, r0
 80042cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <HAL_RCC_ClockConfig+0x264>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	490c      	ldr	r1, [pc, #48]	@ (8004308 <HAL_RCC_ClockConfig+0x26c>)
 80042d8:	5ccb      	ldrb	r3, [r1, r3]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	4a0a      	ldr	r2, [pc, #40]	@ (800430c <HAL_RCC_ClockConfig+0x270>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <HAL_RCC_ClockConfig+0x274>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fd fe62 	bl	8001fb4 <HAL_InitTick>
 80042f0:	4603      	mov	r3, r0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40022000 	.word	0x40022000
 8004300:	40021000 	.word	0x40021000
 8004304:	04c4b400 	.word	0x04c4b400
 8004308:	080077d8 	.word	0x080077d8
 800430c:	20000000 	.word	0x20000000
 8004310:	20000004 	.word	0x20000004

08004314 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	@ 0x30
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004324:	2303      	movs	r3, #3
 8004326:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004332:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	0c1b      	lsrs	r3, r3, #16
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8004340:	029b      	lsls	r3, r3, #10
 8004342:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	0c1b      	lsrs	r3, r3, #16
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800434e:	4b13      	ldr	r3, [pc, #76]	@ (800439c <HAL_RCC_MCOConfig+0x88>)
 8004350:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004352:	2101      	movs	r1, #1
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	4910      	ldr	r1, [pc, #64]	@ (800439c <HAL_RCC_MCOConfig+0x88>)
 800435c:	4313      	orrs	r3, r2
 800435e:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	b29b      	uxth	r3, r3
 8004364:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	0d1b      	lsrs	r3, r3, #20
 800436a:	b2db      	uxtb	r3, r3
 800436c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800436e:	f107 0310 	add.w	r3, r7, #16
 8004372:	4619      	mov	r1, r3
 8004374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004376:	f7fe fccb 	bl	8002d10 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800437a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <HAL_RCC_MCOConfig+0x88>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	430b      	orrs	r3, r1
 800438e:	4903      	ldr	r1, [pc, #12]	@ (800439c <HAL_RCC_MCOConfig+0x88>)
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]
  }
}
 8004394:	bf00      	nop
 8004396:	3730      	adds	r7, #48	@ 0x30
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d102      	bne.n	80043b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043b2:	4b2a      	ldr	r3, [pc, #168]	@ (800445c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	e047      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043b8:	4b27      	ldr	r3, [pc, #156]	@ (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043c4:	4b26      	ldr	r3, [pc, #152]	@ (8004460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e03e      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043ca:	4b23      	ldr	r3, [pc, #140]	@ (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d136      	bne.n	8004444 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043d6:	4b20      	ldr	r3, [pc, #128]	@ (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	3301      	adds	r3, #1
 80043ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d10c      	bne.n	800440e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	4a16      	ldr	r2, [pc, #88]	@ (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043fe:	68d2      	ldr	r2, [r2, #12]
 8004400:	0a12      	lsrs	r2, r2, #8
 8004402:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	617b      	str	r3, [r7, #20]
      break;
 800440c:	e00c      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800440e:	4a13      	ldr	r2, [pc, #76]	@ (800445c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	4a10      	ldr	r2, [pc, #64]	@ (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004418:	68d2      	ldr	r2, [r2, #12]
 800441a:	0a12      	lsrs	r2, r2, #8
 800441c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004420:	fb02 f303 	mul.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
      break;
 8004426:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004428:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	0e5b      	lsrs	r3, r3, #25
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	3301      	adds	r3, #1
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	e001      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004448:	693b      	ldr	r3, [r7, #16]
}
 800444a:	4618      	mov	r0, r3
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	00f42400 	.word	0x00f42400
 8004460:	017d7840 	.word	0x017d7840

08004464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b03      	ldr	r3, [pc, #12]	@ (8004478 <HAL_RCC_GetHCLKFreq+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004480:	f7ff fff0 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4904      	ldr	r1, [pc, #16]	@ (80044a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000
 80044a4:	080077e8 	.word	0x080077e8

080044a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044ac:	f7ff ffda 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0adb      	lsrs	r3, r3, #11
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4904      	ldr	r1, [pc, #16]	@ (80044d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	080077e8 	.word	0x080077e8

080044d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044da:	4b1e      	ldr	r3, [pc, #120]	@ (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	3301      	adds	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d10c      	bne.n	8004512 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044f8:	4a17      	ldr	r2, [pc, #92]	@ (8004558 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	4a14      	ldr	r2, [pc, #80]	@ (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004502:	68d2      	ldr	r2, [r2, #12]
 8004504:	0a12      	lsrs	r2, r2, #8
 8004506:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	617b      	str	r3, [r7, #20]
    break;
 8004510:	e00c      	b.n	800452c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004512:	4a12      	ldr	r2, [pc, #72]	@ (800455c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	4a0e      	ldr	r2, [pc, #56]	@ (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800451c:	68d2      	ldr	r2, [r2, #12]
 800451e:	0a12      	lsrs	r2, r2, #8
 8004520:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
    break;
 800452a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800452c:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	0e5b      	lsrs	r3, r3, #25
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004546:	687b      	ldr	r3, [r7, #4]
}
 8004548:	4618      	mov	r0, r3
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40021000 	.word	0x40021000
 8004558:	017d7840 	.word	0x017d7840
 800455c:	00f42400 	.word	0x00f42400

08004560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004568:	2300      	movs	r3, #0
 800456a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800456c:	2300      	movs	r3, #0
 800456e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8098 	beq.w	80046ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457e:	2300      	movs	r3, #0
 8004580:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004582:	4b43      	ldr	r3, [pc, #268]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458e:	4b40      	ldr	r3, [pc, #256]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	4a3f      	ldr	r2, [pc, #252]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004598:	6593      	str	r3, [r2, #88]	@ 0x58
 800459a:	4b3d      	ldr	r3, [pc, #244]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a6:	2301      	movs	r3, #1
 80045a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a39      	ldr	r2, [pc, #228]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045b6:	f7fd fd49 	bl	800204c <HAL_GetTick>
 80045ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045bc:	e009      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045be:	f7fd fd45 	bl	800204c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d902      	bls.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	74fb      	strb	r3, [r7, #19]
        break;
 80045d0:	e005      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045d2:	4b30      	ldr	r3, [pc, #192]	@ (8004694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0ef      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d159      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01e      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d019      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004600:	4b23      	ldr	r3, [pc, #140]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800460c:	4b20      	ldr	r3, [pc, #128]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004612:	4a1f      	ldr	r2, [pc, #124]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800461c:	4b1c      	ldr	r3, [pc, #112]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004622:	4a1b      	ldr	r2, [pc, #108]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004624:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800462c:	4a18      	ldr	r2, [pc, #96]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463e:	f7fd fd05 	bl	800204c <HAL_GetTick>
 8004642:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004644:	e00b      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fd fd01 	bl	800204c <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d902      	bls.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	74fb      	strb	r3, [r7, #19]
            break;
 800465c:	e006      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465e:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ec      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004672:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004680:	4903      	ldr	r1, [pc, #12]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004688:	e008      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	74bb      	strb	r3, [r7, #18]
 800468e:	e005      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004690:	40021000 	.word	0x40021000
 8004694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469c:	7c7b      	ldrb	r3, [r7, #17]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d105      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a2:	4ba7      	ldr	r3, [pc, #668]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	4aa6      	ldr	r2, [pc, #664]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ba:	4ba1      	ldr	r3, [pc, #644]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c0:	f023 0203 	bic.w	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	499d      	ldr	r1, [pc, #628]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046dc:	4b98      	ldr	r3, [pc, #608]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f023 020c 	bic.w	r2, r3, #12
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	4995      	ldr	r1, [pc, #596]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046fe:	4b90      	ldr	r3, [pc, #576]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	498c      	ldr	r1, [pc, #560]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004720:	4b87      	ldr	r3, [pc, #540]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	4984      	ldr	r1, [pc, #528]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004742:	4b7f      	ldr	r3, [pc, #508]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	497b      	ldr	r1, [pc, #492]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004764:	4b76      	ldr	r3, [pc, #472]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	4973      	ldr	r1, [pc, #460]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004786:	4b6e      	ldr	r3, [pc, #440]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	496a      	ldr	r1, [pc, #424]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047a8:	4b65      	ldr	r3, [pc, #404]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4962      	ldr	r1, [pc, #392]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	4959      	ldr	r1, [pc, #356]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ec:	4b54      	ldr	r3, [pc, #336]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	4951      	ldr	r1, [pc, #324]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800480e:	4b4c      	ldr	r3, [pc, #304]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004814:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	4948      	ldr	r1, [pc, #288]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004830:	4b43      	ldr	r3, [pc, #268]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	4940      	ldr	r1, [pc, #256]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800484e:	d105      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004850:	4b3b      	ldr	r3, [pc, #236]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a3a      	ldr	r2, [pc, #232]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004864:	2b00      	cmp	r3, #0
 8004866:	d015      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004868:	4b35      	ldr	r3, [pc, #212]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004876:	4932      	ldr	r1, [pc, #200]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004882:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004886:	d105      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004888:	4b2d      	ldr	r3, [pc, #180]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4a2c      	ldr	r2, [pc, #176]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004892:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d015      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048a0:	4b27      	ldr	r3, [pc, #156]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ae:	4924      	ldr	r1, [pc, #144]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048be:	d105      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048d8:	4b19      	ldr	r3, [pc, #100]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e6:	4916      	ldr	r1, [pc, #88]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048f6:	d105      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f8:	4b11      	ldr	r3, [pc, #68]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a10      	ldr	r2, [pc, #64]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004902:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d019      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004910:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004916:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	4908      	ldr	r1, [pc, #32]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800492e:	d109      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004930:	4b03      	ldr	r3, [pc, #12]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a02      	ldr	r2, [pc, #8]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800493a:	60d3      	str	r3, [r2, #12]
 800493c:	e002      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004950:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	4926      	ldr	r1, [pc, #152]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800496e:	d105      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004970:	4b21      	ldr	r3, [pc, #132]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a20      	ldr	r2, [pc, #128]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004988:	4b1b      	ldr	r3, [pc, #108]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004996:	4918      	ldr	r1, [pc, #96]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a6:	d105      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80049a8:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4a12      	ldr	r2, [pc, #72]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049c0:	4b0d      	ldr	r3, [pc, #52]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ce:	490a      	ldr	r1, [pc, #40]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049de:	d105      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e0:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a04      	ldr	r2, [pc, #16]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000

080049fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e09d      	b.n	8004b4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1e:	d009      	beq.n	8004a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	61da      	str	r2, [r3, #28]
 8004a26:	e005      	b.n	8004a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fd f8da 	bl	8001c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a74:	d902      	bls.n	8004a7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	e002      	b.n	8004a82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a8a:	d007      	beq.n	8004a9c <HAL_SPI_Init+0xa0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ade:	ea42 0103 	orr.w	r1, r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	f003 0204 	and.w	r2, r3, #4
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b18:	ea42 0103 	orr.w	r1, r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b088      	sub	sp, #32
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_SPI_Transmit+0x22>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e15f      	b.n	8004e34 <HAL_SPI_Transmit+0x2e2>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b7c:	f7fd fa66 	bl	800204c <HAL_GetTick>
 8004b80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d002      	beq.n	8004b98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
 8004b94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b96:	e148      	b.n	8004e2a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit+0x52>
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ba8:	e13f      	b.n	8004e2a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2203      	movs	r2, #3
 8004bae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf4:	d10f      	bne.n	8004c16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c20:	2b40      	cmp	r3, #64	@ 0x40
 8004c22:	d007      	beq.n	8004c34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c3c:	d94f      	bls.n	8004cde <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Transmit+0xfa>
 8004c46:	8afb      	ldrh	r3, [r7, #22]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d142      	bne.n	8004cd2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	1c9a      	adds	r2, r3, #2
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c70:	e02f      	b.n	8004cd2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d112      	bne.n	8004ca6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	1c9a      	adds	r2, r3, #2
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ca4:	e015      	b.n	8004cd2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca6:	f7fd f9d1 	bl	800204c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d803      	bhi.n	8004cbe <HAL_SPI_Transmit+0x16c>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d102      	bne.n	8004cc4 <HAL_SPI_Transmit+0x172>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004cd0:	e0ab      	b.n	8004e2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ca      	bne.n	8004c72 <HAL_SPI_Transmit+0x120>
 8004cdc:	e080      	b.n	8004de0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_SPI_Transmit+0x19a>
 8004ce6:	8afb      	ldrh	r3, [r7, #22]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d174      	bne.n	8004dd6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d912      	bls.n	8004d1c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfa:	881a      	ldrh	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d06:	1c9a      	adds	r2, r3, #2
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b02      	subs	r3, #2
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d1a:	e05c      	b.n	8004dd6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d42:	e048      	b.n	8004dd6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d12b      	bne.n	8004daa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d912      	bls.n	8004d82 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d60:	881a      	ldrh	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	1c9a      	adds	r2, r3, #2
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b02      	subs	r3, #2
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d80:	e029      	b.n	8004dd6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	7812      	ldrb	r2, [r2, #0]
 8004d8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004da8:	e015      	b.n	8004dd6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004daa:	f7fd f94f 	bl	800204c <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d803      	bhi.n	8004dc2 <HAL_SPI_Transmit+0x270>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d102      	bne.n	8004dc8 <HAL_SPI_Transmit+0x276>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004dd4:	e029      	b.n	8004e2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1b1      	bne.n	8004d44 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	6839      	ldr	r1, [r7, #0]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f947 	bl	8005078 <SPI_EndRxTxTransaction>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e003      	b.n	8004e2a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e4c:	f7fd f8fe 	bl	800204c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	4413      	add	r3, r2
 8004e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e5c:	f7fd f8f6 	bl	800204c <HAL_GetTick>
 8004e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e62:	4b39      	ldr	r3, [pc, #228]	@ (8004f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	015b      	lsls	r3, r3, #5
 8004e68:	0d1b      	lsrs	r3, r3, #20
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e72:	e054      	b.n	8004f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d050      	beq.n	8004f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e7c:	f7fd f8e6 	bl	800204c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d902      	bls.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d13d      	bne.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eaa:	d111      	bne.n	8004ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb4:	d004      	beq.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ebe:	d107      	bne.n	8004ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed8:	d10f      	bne.n	8004efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e017      	b.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4013      	ands	r3, r2
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	bf0c      	ite	eq
 8004f2e:	2301      	moveq	r3, #1
 8004f30:	2300      	movne	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d19b      	bne.n	8004e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000000 	.word	0x20000000

08004f4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	@ 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f5e:	f7fd f875 	bl	800204c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f6e:	f7fd f86d 	bl	800204c <HAL_GetTick>
 8004f72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005074 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	00da      	lsls	r2, r3, #3
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	0d1b      	lsrs	r3, r3, #20
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f94:	e060      	b.n	8005058 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f9c:	d107      	bne.n	8004fae <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d050      	beq.n	8005058 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fb6:	f7fd f849 	bl	800204c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d902      	bls.n	8004fcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d13d      	bne.n	8005048 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe4:	d111      	bne.n	800500a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fee:	d004      	beq.n	8004ffa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff8:	d107      	bne.n	800500a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005008:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005012:	d10f      	bne.n	8005034 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005032:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e010      	b.n	800506a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	3b01      	subs	r3, #1
 8005056:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d196      	bne.n	8004f96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3728      	adds	r7, #40	@ 0x28
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000000 	.word	0x20000000

08005078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2200      	movs	r2, #0
 800508c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff ff5b 	bl	8004f4c <SPI_WaitFifoStateUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e027      	b.n	80050fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	2180      	movs	r1, #128	@ 0x80
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff fec0 	bl	8004e3c <SPI_WaitFlagStateUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c6:	f043 0220 	orr.w	r2, r3, #32
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e014      	b.n	80050fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2200      	movs	r2, #0
 80050da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff ff34 	bl	8004f4c <SPI_WaitFifoStateUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e000      	b.n	80050fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e049      	b.n	80051aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc fdb0 	bl	8001c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f000 fac0 	bl	80056c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e049      	b.n	8005258 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f841 	bl	8005260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f000 fa69 	bl	80056c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800528e:	2302      	movs	r3, #2
 8005290:	e0ff      	b.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b14      	cmp	r3, #20
 800529e:	f200 80f0 	bhi.w	8005482 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052a2:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052fd 	.word	0x080052fd
 80052ac:	08005483 	.word	0x08005483
 80052b0:	08005483 	.word	0x08005483
 80052b4:	08005483 	.word	0x08005483
 80052b8:	0800533d 	.word	0x0800533d
 80052bc:	08005483 	.word	0x08005483
 80052c0:	08005483 	.word	0x08005483
 80052c4:	08005483 	.word	0x08005483
 80052c8:	0800537f 	.word	0x0800537f
 80052cc:	08005483 	.word	0x08005483
 80052d0:	08005483 	.word	0x08005483
 80052d4:	08005483 	.word	0x08005483
 80052d8:	080053bf 	.word	0x080053bf
 80052dc:	08005483 	.word	0x08005483
 80052e0:	08005483 	.word	0x08005483
 80052e4:	08005483 	.word	0x08005483
 80052e8:	08005401 	.word	0x08005401
 80052ec:	08005483 	.word	0x08005483
 80052f0:	08005483 	.word	0x08005483
 80052f4:	08005483 	.word	0x08005483
 80052f8:	08005441 	.word	0x08005441
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fa94 	bl	8005830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0208 	orr.w	r2, r2, #8
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	619a      	str	r2, [r3, #24]
      break;
 800533a:	e0a5      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fb0e 	bl	8005964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6999      	ldr	r1, [r3, #24]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	021a      	lsls	r2, r3, #8
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	619a      	str	r2, [r3, #24]
      break;
 800537c:	e084      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fb81 	bl	8005a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0208 	orr.w	r2, r2, #8
 8005398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0204 	bic.w	r2, r2, #4
 80053a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	61da      	str	r2, [r3, #28]
      break;
 80053bc:	e064      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fbf3 	bl	8005bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69d9      	ldr	r1, [r3, #28]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	61da      	str	r2, [r3, #28]
      break;
 80053fe:	e043      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fc66 	bl	8005cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0208 	orr.w	r2, r2, #8
 800541a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0204 	bic.w	r2, r2, #4
 800542a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800543e:	e023      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fcb0 	bl	8005dac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800545a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	021a      	lsls	r2, r3, #8
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005480:	e002      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
      break;
 8005486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005490:	7dfb      	ldrb	r3, [r7, #23]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop

0800549c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_ConfigClockSource+0x1c>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0f6      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x20a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80054d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a6f      	ldr	r2, [pc, #444]	@ (80056b0 <HAL_TIM_ConfigClockSource+0x214>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	f000 80c1 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x1de>
 80054f8:	4a6d      	ldr	r2, [pc, #436]	@ (80056b0 <HAL_TIM_ConfigClockSource+0x214>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	f200 80c6 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 8005500:	4a6c      	ldr	r2, [pc, #432]	@ (80056b4 <HAL_TIM_ConfigClockSource+0x218>)
 8005502:	4293      	cmp	r3, r2
 8005504:	f000 80b9 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x1de>
 8005508:	4a6a      	ldr	r2, [pc, #424]	@ (80056b4 <HAL_TIM_ConfigClockSource+0x218>)
 800550a:	4293      	cmp	r3, r2
 800550c:	f200 80be 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 8005510:	4a69      	ldr	r2, [pc, #420]	@ (80056b8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	f000 80b1 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x1de>
 8005518:	4a67      	ldr	r2, [pc, #412]	@ (80056b8 <HAL_TIM_ConfigClockSource+0x21c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	f200 80b6 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 8005520:	4a66      	ldr	r2, [pc, #408]	@ (80056bc <HAL_TIM_ConfigClockSource+0x220>)
 8005522:	4293      	cmp	r3, r2
 8005524:	f000 80a9 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x1de>
 8005528:	4a64      	ldr	r2, [pc, #400]	@ (80056bc <HAL_TIM_ConfigClockSource+0x220>)
 800552a:	4293      	cmp	r3, r2
 800552c:	f200 80ae 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 8005530:	4a63      	ldr	r2, [pc, #396]	@ (80056c0 <HAL_TIM_ConfigClockSource+0x224>)
 8005532:	4293      	cmp	r3, r2
 8005534:	f000 80a1 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x1de>
 8005538:	4a61      	ldr	r2, [pc, #388]	@ (80056c0 <HAL_TIM_ConfigClockSource+0x224>)
 800553a:	4293      	cmp	r3, r2
 800553c:	f200 80a6 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 8005540:	4a60      	ldr	r2, [pc, #384]	@ (80056c4 <HAL_TIM_ConfigClockSource+0x228>)
 8005542:	4293      	cmp	r3, r2
 8005544:	f000 8099 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x1de>
 8005548:	4a5e      	ldr	r2, [pc, #376]	@ (80056c4 <HAL_TIM_ConfigClockSource+0x228>)
 800554a:	4293      	cmp	r3, r2
 800554c:	f200 809e 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 8005550:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005554:	f000 8091 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x1de>
 8005558:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800555c:	f200 8096 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 8005560:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005564:	f000 8089 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x1de>
 8005568:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800556c:	f200 808e 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005574:	d03e      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0x158>
 8005576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800557a:	f200 8087 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 800557e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005582:	f000 8086 	beq.w	8005692 <HAL_TIM_ConfigClockSource+0x1f6>
 8005586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558a:	d87f      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 800558c:	2b70      	cmp	r3, #112	@ 0x70
 800558e:	d01a      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x12a>
 8005590:	2b70      	cmp	r3, #112	@ 0x70
 8005592:	d87b      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 8005594:	2b60      	cmp	r3, #96	@ 0x60
 8005596:	d050      	beq.n	800563a <HAL_TIM_ConfigClockSource+0x19e>
 8005598:	2b60      	cmp	r3, #96	@ 0x60
 800559a:	d877      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 800559c:	2b50      	cmp	r3, #80	@ 0x50
 800559e:	d03c      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x17e>
 80055a0:	2b50      	cmp	r3, #80	@ 0x50
 80055a2:	d873      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 80055a4:	2b40      	cmp	r3, #64	@ 0x40
 80055a6:	d058      	beq.n	800565a <HAL_TIM_ConfigClockSource+0x1be>
 80055a8:	2b40      	cmp	r3, #64	@ 0x40
 80055aa:	d86f      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 80055ac:	2b30      	cmp	r3, #48	@ 0x30
 80055ae:	d064      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x1de>
 80055b0:	2b30      	cmp	r3, #48	@ 0x30
 80055b2:	d86b      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d060      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x1de>
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d867      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x1f0>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d05c      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x1de>
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d05a      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x1de>
 80055c4:	e062      	b.n	800568c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055d6:	f000 fcd1 	bl	8005f7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	609a      	str	r2, [r3, #8]
      break;
 80055f2:	e04f      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005604:	f000 fcba 	bl	8005f7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005616:	609a      	str	r2, [r3, #8]
      break;
 8005618:	e03c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005626:	461a      	mov	r2, r3
 8005628:	f000 fc2c 	bl	8005e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2150      	movs	r1, #80	@ 0x50
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fc85 	bl	8005f42 <TIM_ITRx_SetConfig>
      break;
 8005638:	e02c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005646:	461a      	mov	r2, r3
 8005648:	f000 fc4b 	bl	8005ee2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2160      	movs	r1, #96	@ 0x60
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fc75 	bl	8005f42 <TIM_ITRx_SetConfig>
      break;
 8005658:	e01c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005666:	461a      	mov	r2, r3
 8005668:	f000 fc0c 	bl	8005e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2140      	movs	r1, #64	@ 0x40
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fc65 	bl	8005f42 <TIM_ITRx_SetConfig>
      break;
 8005678:	e00c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f000 fc5c 	bl	8005f42 <TIM_ITRx_SetConfig>
      break;
 800568a:	e003      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
      break;
 8005690:	e000      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	00100070 	.word	0x00100070
 80056b4:	00100060 	.word	0x00100060
 80056b8:	00100050 	.word	0x00100050
 80056bc:	00100040 	.word	0x00100040
 80056c0:	00100030 	.word	0x00100030
 80056c4:	00100020 	.word	0x00100020

080056c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a4c      	ldr	r2, [pc, #304]	@ (800580c <TIM_Base_SetConfig+0x144>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d017      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e6:	d013      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a49      	ldr	r2, [pc, #292]	@ (8005810 <TIM_Base_SetConfig+0x148>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a48      	ldr	r2, [pc, #288]	@ (8005814 <TIM_Base_SetConfig+0x14c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a47      	ldr	r2, [pc, #284]	@ (8005818 <TIM_Base_SetConfig+0x150>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a46      	ldr	r2, [pc, #280]	@ (800581c <TIM_Base_SetConfig+0x154>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0x48>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a45      	ldr	r2, [pc, #276]	@ (8005820 <TIM_Base_SetConfig+0x158>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d108      	bne.n	8005722 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a39      	ldr	r2, [pc, #228]	@ (800580c <TIM_Base_SetConfig+0x144>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d023      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005730:	d01f      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a36      	ldr	r2, [pc, #216]	@ (8005810 <TIM_Base_SetConfig+0x148>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a35      	ldr	r2, [pc, #212]	@ (8005814 <TIM_Base_SetConfig+0x14c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a34      	ldr	r2, [pc, #208]	@ (8005818 <TIM_Base_SetConfig+0x150>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a33      	ldr	r2, [pc, #204]	@ (800581c <TIM_Base_SetConfig+0x154>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a33      	ldr	r2, [pc, #204]	@ (8005824 <TIM_Base_SetConfig+0x15c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a32      	ldr	r2, [pc, #200]	@ (8005828 <TIM_Base_SetConfig+0x160>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a31      	ldr	r2, [pc, #196]	@ (800582c <TIM_Base_SetConfig+0x164>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0xaa>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a2c      	ldr	r2, [pc, #176]	@ (8005820 <TIM_Base_SetConfig+0x158>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a18      	ldr	r2, [pc, #96]	@ (800580c <TIM_Base_SetConfig+0x144>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1a      	ldr	r2, [pc, #104]	@ (800581c <TIM_Base_SetConfig+0x154>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00f      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005824 <TIM_Base_SetConfig+0x15c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a19      	ldr	r2, [pc, #100]	@ (8005828 <TIM_Base_SetConfig+0x160>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a18      	ldr	r2, [pc, #96]	@ (800582c <TIM_Base_SetConfig+0x164>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x110>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a13      	ldr	r2, [pc, #76]	@ (8005820 <TIM_Base_SetConfig+0x158>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d103      	bne.n	80057e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d105      	bne.n	80057fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	611a      	str	r2, [r3, #16]
  }
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800
 8005818:	40000c00 	.word	0x40000c00
 800581c:	40013400 	.word	0x40013400
 8005820:	40015000 	.word	0x40015000
 8005824:	40014000 	.word	0x40014000
 8005828:	40014400 	.word	0x40014400
 800582c:	40014800 	.word	0x40014800

08005830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f023 0201 	bic.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800585e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 0302 	bic.w	r3, r3, #2
 800587c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a30      	ldr	r2, [pc, #192]	@ (800594c <TIM_OC1_SetConfig+0x11c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <TIM_OC1_SetConfig+0x88>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a2f      	ldr	r2, [pc, #188]	@ (8005950 <TIM_OC1_SetConfig+0x120>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00f      	beq.n	80058b8 <TIM_OC1_SetConfig+0x88>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a2e      	ldr	r2, [pc, #184]	@ (8005954 <TIM_OC1_SetConfig+0x124>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00b      	beq.n	80058b8 <TIM_OC1_SetConfig+0x88>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005958 <TIM_OC1_SetConfig+0x128>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_OC1_SetConfig+0x88>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a2c      	ldr	r2, [pc, #176]	@ (800595c <TIM_OC1_SetConfig+0x12c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC1_SetConfig+0x88>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a2b      	ldr	r2, [pc, #172]	@ (8005960 <TIM_OC1_SetConfig+0x130>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d10c      	bne.n	80058d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0308 	bic.w	r3, r3, #8
 80058be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 0304 	bic.w	r3, r3, #4
 80058d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1d      	ldr	r2, [pc, #116]	@ (800594c <TIM_OC1_SetConfig+0x11c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <TIM_OC1_SetConfig+0xd2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005950 <TIM_OC1_SetConfig+0x120>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00f      	beq.n	8005902 <TIM_OC1_SetConfig+0xd2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005954 <TIM_OC1_SetConfig+0x124>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00b      	beq.n	8005902 <TIM_OC1_SetConfig+0xd2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005958 <TIM_OC1_SetConfig+0x128>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d007      	beq.n	8005902 <TIM_OC1_SetConfig+0xd2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a19      	ldr	r2, [pc, #100]	@ (800595c <TIM_OC1_SetConfig+0x12c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_OC1_SetConfig+0xd2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <TIM_OC1_SetConfig+0x130>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d111      	bne.n	8005926 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40013400 	.word	0x40013400
 8005954:	40014000 	.word	0x40014000
 8005958:	40014400 	.word	0x40014400
 800595c:	40014800 	.word	0x40014800
 8005960:	40015000 	.word	0x40015000

08005964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f023 0210 	bic.w	r2, r3, #16
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800599e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f023 0320 	bic.w	r3, r3, #32
 80059b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a74 <TIM_OC2_SetConfig+0x110>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_OC2_SetConfig+0x74>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005a78 <TIM_OC2_SetConfig+0x114>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC2_SetConfig+0x74>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a7c <TIM_OC2_SetConfig+0x118>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d10d      	bne.n	80059f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a74 <TIM_OC2_SetConfig+0x110>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <TIM_OC2_SetConfig+0xc0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005a78 <TIM_OC2_SetConfig+0x114>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00f      	beq.n	8005a24 <TIM_OC2_SetConfig+0xc0>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a1e      	ldr	r2, [pc, #120]	@ (8005a80 <TIM_OC2_SetConfig+0x11c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_OC2_SetConfig+0xc0>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005a84 <TIM_OC2_SetConfig+0x120>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_OC2_SetConfig+0xc0>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a1c      	ldr	r2, [pc, #112]	@ (8005a88 <TIM_OC2_SetConfig+0x124>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC2_SetConfig+0xc0>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a17      	ldr	r2, [pc, #92]	@ (8005a7c <TIM_OC2_SetConfig+0x118>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d113      	bne.n	8005a4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40013400 	.word	0x40013400
 8005a7c:	40015000 	.word	0x40015000
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800

08005a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b98 <TIM_OC3_SetConfig+0x10c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d007      	beq.n	8005afe <TIM_OC3_SetConfig+0x72>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2a      	ldr	r2, [pc, #168]	@ (8005b9c <TIM_OC3_SetConfig+0x110>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_OC3_SetConfig+0x72>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a29      	ldr	r2, [pc, #164]	@ (8005ba0 <TIM_OC3_SetConfig+0x114>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10d      	bne.n	8005b1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005b98 <TIM_OC3_SetConfig+0x10c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <TIM_OC3_SetConfig+0xbe>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1d      	ldr	r2, [pc, #116]	@ (8005b9c <TIM_OC3_SetConfig+0x110>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00f      	beq.n	8005b4a <TIM_OC3_SetConfig+0xbe>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba4 <TIM_OC3_SetConfig+0x118>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <TIM_OC3_SetConfig+0xbe>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba8 <TIM_OC3_SetConfig+0x11c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_OC3_SetConfig+0xbe>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bac <TIM_OC3_SetConfig+0x120>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_OC3_SetConfig+0xbe>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a16      	ldr	r2, [pc, #88]	@ (8005ba0 <TIM_OC3_SetConfig+0x114>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d113      	bne.n	8005b72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	621a      	str	r2, [r3, #32]
}
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40013400 	.word	0x40013400
 8005ba0:	40015000 	.word	0x40015000
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800

08005bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc0 <TIM_OC4_SetConfig+0x110>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_OC4_SetConfig+0x74>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc4 <TIM_OC4_SetConfig+0x114>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC4_SetConfig+0x74>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc8 <TIM_OC4_SetConfig+0x118>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d10d      	bne.n	8005c40 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	031b      	lsls	r3, r3, #12
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc0 <TIM_OC4_SetConfig+0x110>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <TIM_OC4_SetConfig+0xc0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8005cc4 <TIM_OC4_SetConfig+0x114>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00f      	beq.n	8005c70 <TIM_OC4_SetConfig+0xc0>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a1e      	ldr	r2, [pc, #120]	@ (8005ccc <TIM_OC4_SetConfig+0x11c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00b      	beq.n	8005c70 <TIM_OC4_SetConfig+0xc0>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd0 <TIM_OC4_SetConfig+0x120>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d007      	beq.n	8005c70 <TIM_OC4_SetConfig+0xc0>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd4 <TIM_OC4_SetConfig+0x124>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_OC4_SetConfig+0xc0>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a17      	ldr	r2, [pc, #92]	@ (8005cc8 <TIM_OC4_SetConfig+0x118>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d113      	bne.n	8005c98 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	019b      	lsls	r3, r3, #6
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	019b      	lsls	r3, r3, #6
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40013400 	.word	0x40013400
 8005cc8:	40015000 	.word	0x40015000
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800

08005cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	041b      	lsls	r3, r3, #16
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a19      	ldr	r2, [pc, #100]	@ (8005d94 <TIM_OC5_SetConfig+0xbc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <TIM_OC5_SetConfig+0x82>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a18      	ldr	r2, [pc, #96]	@ (8005d98 <TIM_OC5_SetConfig+0xc0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00f      	beq.n	8005d5a <TIM_OC5_SetConfig+0x82>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a17      	ldr	r2, [pc, #92]	@ (8005d9c <TIM_OC5_SetConfig+0xc4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <TIM_OC5_SetConfig+0x82>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a16      	ldr	r2, [pc, #88]	@ (8005da0 <TIM_OC5_SetConfig+0xc8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d007      	beq.n	8005d5a <TIM_OC5_SetConfig+0x82>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <TIM_OC5_SetConfig+0xcc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_OC5_SetConfig+0x82>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a14      	ldr	r2, [pc, #80]	@ (8005da8 <TIM_OC5_SetConfig+0xd0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d109      	bne.n	8005d6e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	621a      	str	r2, [r3, #32]
}
 8005d88:	bf00      	nop
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40013400 	.word	0x40013400
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40014400 	.word	0x40014400
 8005da4:	40014800 	.word	0x40014800
 8005da8:	40015000 	.word	0x40015000

08005dac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	051b      	lsls	r3, r3, #20
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a1a      	ldr	r2, [pc, #104]	@ (8005e6c <TIM_OC6_SetConfig+0xc0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <TIM_OC6_SetConfig+0x84>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a19      	ldr	r2, [pc, #100]	@ (8005e70 <TIM_OC6_SetConfig+0xc4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00f      	beq.n	8005e30 <TIM_OC6_SetConfig+0x84>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a18      	ldr	r2, [pc, #96]	@ (8005e74 <TIM_OC6_SetConfig+0xc8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00b      	beq.n	8005e30 <TIM_OC6_SetConfig+0x84>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a17      	ldr	r2, [pc, #92]	@ (8005e78 <TIM_OC6_SetConfig+0xcc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d007      	beq.n	8005e30 <TIM_OC6_SetConfig+0x84>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a16      	ldr	r2, [pc, #88]	@ (8005e7c <TIM_OC6_SetConfig+0xd0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_OC6_SetConfig+0x84>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a15      	ldr	r2, [pc, #84]	@ (8005e80 <TIM_OC6_SetConfig+0xd4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d109      	bne.n	8005e44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	029b      	lsls	r3, r3, #10
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	621a      	str	r2, [r3, #32]
}
 8005e5e:	bf00      	nop
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40013400 	.word	0x40013400
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800
 8005e80:	40015000 	.word	0x40015000

08005e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 030a 	bic.w	r3, r3, #10
 8005ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b087      	sub	sp, #28
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f023 0210 	bic.w	r2, r3, #16
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	031b      	lsls	r3, r3, #12
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b085      	sub	sp, #20
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f043 0307 	orr.w	r3, r3, #7
 8005f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e074      	b.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a34      	ldr	r2, [pc, #208]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a33      	ldr	r2, [pc, #204]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a31      	ldr	r2, [pc, #196]	@ (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006018:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800602a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a21      	ldr	r2, [pc, #132]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d022      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006054:	d01d      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1f      	ldr	r2, [pc, #124]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d018      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1d      	ldr	r2, [pc, #116]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1c      	ldr	r2, [pc, #112]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a15      	ldr	r2, [pc, #84]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a18      	ldr	r2, [pc, #96]	@ (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a11      	ldr	r2, [pc, #68]	@ (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10c      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40015000 	.word	0x40015000
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40000c00 	.word	0x40000c00
 80060e4:	40014000 	.word	0x40014000

080060e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006100:	2302      	movs	r3, #2
 8006102:	e078      	b.n	80061f6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1c      	ldr	r2, [pc, #112]	@ (8006204 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1b      	ldr	r2, [pc, #108]	@ (8006208 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a19      	ldr	r2, [pc, #100]	@ (800620c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d11c      	bne.n	80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	051b      	lsls	r3, r3, #20
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40012c00 	.word	0x40012c00
 8006208:	40013400 	.word	0x40013400
 800620c:	40015000 	.word	0x40015000

08006210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e042      	b.n	80062a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fb fd97 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2224      	movs	r2, #36	@ 0x24
 800623e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fe86 	bl	8006f6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb87 	bl	8006974 <UART_SetConfig>
 8006266:	4603      	mov	r3, r0
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e01b      	b.n	80062a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800627e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800628e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 ff05 	bl	80070b0 <UART_CheckIdleState>
 80062a6:	4603      	mov	r3, r0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b0ba      	sub	sp, #232	@ 0xe8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80062da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80062de:	4013      	ands	r3, r2
 80062e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80062e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11b      	bne.n	8006324 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d015      	beq.n	8006324 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8300 	beq.w	800691a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
      }
      return;
 8006322:	e2fa      	b.n	800691a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8123 	beq.w	8006574 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800632e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006332:	4b8d      	ldr	r3, [pc, #564]	@ (8006568 <HAL_UART_IRQHandler+0x2b8>)
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800633a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800633e:	4b8b      	ldr	r3, [pc, #556]	@ (800656c <HAL_UART_IRQHandler+0x2bc>)
 8006340:	4013      	ands	r3, r2
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8116 	beq.w	8006574 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d011      	beq.n	8006378 <HAL_UART_IRQHandler+0xc8>
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2201      	movs	r2, #1
 8006366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636e:	f043 0201 	orr.w	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d011      	beq.n	80063a8 <HAL_UART_IRQHandler+0xf8>
 8006384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2202      	movs	r2, #2
 8006396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639e:	f043 0204 	orr.w	r2, r3, #4
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d011      	beq.n	80063d8 <HAL_UART_IRQHandler+0x128>
 80063b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2204      	movs	r2, #4
 80063c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ce:	f043 0202 	orr.w	r2, r3, #2
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d017      	beq.n	8006414 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d105      	bne.n	80063fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80063f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80063f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006568 <HAL_UART_IRQHandler+0x2b8>)
 80063f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2208      	movs	r2, #8
 8006402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640a:	f043 0208 	orr.w	r2, r3, #8
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800641c:	2b00      	cmp	r3, #0
 800641e:	d012      	beq.n	8006446 <HAL_UART_IRQHandler+0x196>
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00c      	beq.n	8006446 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643c:	f043 0220 	orr.w	r2, r3, #32
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8266 	beq.w	800691e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d013      	beq.n	8006486 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800645e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800646a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800646e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d007      	beq.n	8006486 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649a:	2b40      	cmp	r3, #64	@ 0x40
 800649c:	d005      	beq.n	80064aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800649e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d054      	beq.n	8006554 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 ff17 	bl	80072de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ba:	2b40      	cmp	r3, #64	@ 0x40
 80064bc:	d146      	bne.n	800654c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3308      	adds	r3, #8
 80064e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1d9      	bne.n	80064be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	d017      	beq.n	8006544 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651a:	4a15      	ldr	r2, [pc, #84]	@ (8006570 <HAL_UART_IRQHandler+0x2c0>)
 800651c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006524:	4618      	mov	r0, r3
 8006526:	f7fc fa7a 	bl	8002a1e <HAL_DMA_Abort_IT>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d019      	beq.n	8006564 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800653e:	4610      	mov	r0, r2
 8006540:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006542:	e00f      	b.n	8006564 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f9ff 	bl	8006948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654a:	e00b      	b.n	8006564 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f9fb 	bl	8006948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006552:	e007      	b.n	8006564 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f9f7 	bl	8006948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006562:	e1dc      	b.n	800691e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006564:	bf00      	nop
    return;
 8006566:	e1da      	b.n	800691e <HAL_UART_IRQHandler+0x66e>
 8006568:	10000001 	.word	0x10000001
 800656c:	04000120 	.word	0x04000120
 8006570:	080073ab 	.word	0x080073ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006578:	2b01      	cmp	r3, #1
 800657a:	f040 8170 	bne.w	800685e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800657e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 8169 	beq.w	800685e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800658c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8162 	beq.w	800685e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2210      	movs	r2, #16
 80065a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ac:	2b40      	cmp	r3, #64	@ 0x40
 80065ae:	f040 80d8 	bne.w	8006762 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80af 	beq.w	8006728 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d4:	429a      	cmp	r2, r3
 80065d6:	f080 80a7 	bcs.w	8006728 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f040 8087 	bne.w	8006706 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800660c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006622:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006626:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800662e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800663a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1da      	bne.n	80065f8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006652:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3308      	adds	r3, #8
 8006662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006666:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800666a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800666e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e1      	bne.n	8006642 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800668e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e3      	bne.n	800667e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d4:	f023 0310 	bic.w	r3, r3, #16
 80066d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e4      	bne.n	80066c4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006700:	4618      	mov	r0, r3
 8006702:	f7fc f933 	bl	800296c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2202      	movs	r2, #2
 800670a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006718:	b29b      	uxth	r3, r3
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	b29b      	uxth	r3, r3
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f91b 	bl	800695c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006726:	e0fc      	b.n	8006922 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800672e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006732:	429a      	cmp	r2, r3
 8006734:	f040 80f5 	bne.w	8006922 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b20      	cmp	r3, #32
 8006748:	f040 80eb 	bne.w	8006922 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f8fe 	bl	800695c <HAL_UARTEx_RxEventCallback>
      return;
 8006760:	e0df      	b.n	8006922 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800676e:	b29b      	uxth	r3, r3
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 80d1 	beq.w	8006926 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006784:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 80cc 	beq.w	8006926 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800679c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e4      	bne.n	800678e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3308      	adds	r3, #8
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	623b      	str	r3, [r7, #32]
   return(result);
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3308      	adds	r3, #8
 80067e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80067ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e1      	bne.n	80067c4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	60fb      	str	r3, [r7, #12]
   return(result);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f023 0310 	bic.w	r3, r3, #16
 8006828:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	69b9      	ldr	r1, [r7, #24]
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	617b      	str	r3, [r7, #20]
   return(result);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e4      	bne.n	8006814 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f880 	bl	800695c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800685c:	e063      	b.n	8006926 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00e      	beq.n	8006888 <HAL_UART_IRQHandler+0x5d8>
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800686e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800687e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fdd3 	bl	800742c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006886:	e051      	b.n	800692c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d014      	beq.n	80068be <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689c:	2b00      	cmp	r3, #0
 800689e:	d105      	bne.n	80068ac <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d03a      	beq.n	800692a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
    }
    return;
 80068bc:	e035      	b.n	800692a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_UART_IRQHandler+0x62e>
 80068ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fd7d 	bl	80073d6 <UART_EndTransmit_IT>
    return;
 80068dc:	e026      	b.n	800692c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <HAL_UART_IRQHandler+0x64e>
 80068ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fdac 	bl	8007454 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068fc:	e016      	b.n	800692c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80068fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006902:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d010      	beq.n	800692c <HAL_UART_IRQHandler+0x67c>
 800690a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690e:	2b00      	cmp	r3, #0
 8006910:	da0c      	bge.n	800692c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fd94 	bl	8007440 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006918:	e008      	b.n	800692c <HAL_UART_IRQHandler+0x67c>
      return;
 800691a:	bf00      	nop
 800691c:	e006      	b.n	800692c <HAL_UART_IRQHandler+0x67c>
    return;
 800691e:	bf00      	nop
 8006920:	e004      	b.n	800692c <HAL_UART_IRQHandler+0x67c>
      return;
 8006922:	bf00      	nop
 8006924:	e002      	b.n	800692c <HAL_UART_IRQHandler+0x67c>
      return;
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <HAL_UART_IRQHandler+0x67c>
    return;
 800692a:	bf00      	nop
  }
}
 800692c:	37e8      	adds	r7, #232	@ 0xe8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop

08006934 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006978:	b08c      	sub	sp, #48	@ 0x30
 800697a:	af00      	add	r7, sp, #0
 800697c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	431a      	orrs	r2, r3
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	431a      	orrs	r2, r3
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	4313      	orrs	r3, r2
 800699a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4baa      	ldr	r3, [pc, #680]	@ (8006c4c <UART_SetConfig+0x2d8>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a9f      	ldr	r2, [pc, #636]	@ (8006c50 <UART_SetConfig+0x2dc>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d004      	beq.n	80069e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069dc:	4313      	orrs	r3, r2
 80069de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069f4:	430b      	orrs	r3, r1
 80069f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	f023 010f 	bic.w	r1, r3, #15
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a90      	ldr	r2, [pc, #576]	@ (8006c54 <UART_SetConfig+0x2e0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d125      	bne.n	8006a64 <UART_SetConfig+0xf0>
 8006a18:	4b8f      	ldr	r3, [pc, #572]	@ (8006c58 <UART_SetConfig+0x2e4>)
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d81a      	bhi.n	8006a5c <UART_SetConfig+0xe8>
 8006a26:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <UART_SetConfig+0xb8>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a3d 	.word	0x08006a3d
 8006a30:	08006a4d 	.word	0x08006a4d
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a42:	e116      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006a44:	2302      	movs	r3, #2
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4a:	e112      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a52:	e10e      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006a54:	2308      	movs	r3, #8
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5a:	e10a      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a62:	e106      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a7c      	ldr	r2, [pc, #496]	@ (8006c5c <UART_SetConfig+0x2e8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d138      	bne.n	8006ae0 <UART_SetConfig+0x16c>
 8006a6e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c58 <UART_SetConfig+0x2e4>)
 8006a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a74:	f003 030c 	and.w	r3, r3, #12
 8006a78:	2b0c      	cmp	r3, #12
 8006a7a:	d82d      	bhi.n	8006ad8 <UART_SetConfig+0x164>
 8006a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a84 <UART_SetConfig+0x110>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006ab9 	.word	0x08006ab9
 8006a88:	08006ad9 	.word	0x08006ad9
 8006a8c:	08006ad9 	.word	0x08006ad9
 8006a90:	08006ad9 	.word	0x08006ad9
 8006a94:	08006ac9 	.word	0x08006ac9
 8006a98:	08006ad9 	.word	0x08006ad9
 8006a9c:	08006ad9 	.word	0x08006ad9
 8006aa0:	08006ad9 	.word	0x08006ad9
 8006aa4:	08006ac1 	.word	0x08006ac1
 8006aa8:	08006ad9 	.word	0x08006ad9
 8006aac:	08006ad9 	.word	0x08006ad9
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ad1 	.word	0x08006ad1
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006abe:	e0d8      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac6:	e0d4      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ace:	e0d0      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad6:	e0cc      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ade:	e0c8      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a5e      	ldr	r2, [pc, #376]	@ (8006c60 <UART_SetConfig+0x2ec>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d125      	bne.n	8006b36 <UART_SetConfig+0x1c2>
 8006aea:	4b5b      	ldr	r3, [pc, #364]	@ (8006c58 <UART_SetConfig+0x2e4>)
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006af4:	2b30      	cmp	r3, #48	@ 0x30
 8006af6:	d016      	beq.n	8006b26 <UART_SetConfig+0x1b2>
 8006af8:	2b30      	cmp	r3, #48	@ 0x30
 8006afa:	d818      	bhi.n	8006b2e <UART_SetConfig+0x1ba>
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d00a      	beq.n	8006b16 <UART_SetConfig+0x1a2>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d814      	bhi.n	8006b2e <UART_SetConfig+0x1ba>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <UART_SetConfig+0x19a>
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d008      	beq.n	8006b1e <UART_SetConfig+0x1aa>
 8006b0c:	e00f      	b.n	8006b2e <UART_SetConfig+0x1ba>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b14:	e0ad      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b16:	2302      	movs	r3, #2
 8006b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1c:	e0a9      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b1e:	2304      	movs	r3, #4
 8006b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b24:	e0a5      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b26:	2308      	movs	r3, #8
 8006b28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2c:	e0a1      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b2e:	2310      	movs	r3, #16
 8006b30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b34:	e09d      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006c64 <UART_SetConfig+0x2f0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d125      	bne.n	8006b8c <UART_SetConfig+0x218>
 8006b40:	4b45      	ldr	r3, [pc, #276]	@ (8006c58 <UART_SetConfig+0x2e4>)
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b4c:	d016      	beq.n	8006b7c <UART_SetConfig+0x208>
 8006b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b50:	d818      	bhi.n	8006b84 <UART_SetConfig+0x210>
 8006b52:	2b80      	cmp	r3, #128	@ 0x80
 8006b54:	d00a      	beq.n	8006b6c <UART_SetConfig+0x1f8>
 8006b56:	2b80      	cmp	r3, #128	@ 0x80
 8006b58:	d814      	bhi.n	8006b84 <UART_SetConfig+0x210>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <UART_SetConfig+0x1f0>
 8006b5e:	2b40      	cmp	r3, #64	@ 0x40
 8006b60:	d008      	beq.n	8006b74 <UART_SetConfig+0x200>
 8006b62:	e00f      	b.n	8006b84 <UART_SetConfig+0x210>
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6a:	e082      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b72:	e07e      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b74:	2304      	movs	r3, #4
 8006b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b7a:	e07a      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b82:	e076      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b84:	2310      	movs	r3, #16
 8006b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8a:	e072      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a35      	ldr	r2, [pc, #212]	@ (8006c68 <UART_SetConfig+0x2f4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d12a      	bne.n	8006bec <UART_SetConfig+0x278>
 8006b96:	4b30      	ldr	r3, [pc, #192]	@ (8006c58 <UART_SetConfig+0x2e4>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ba0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba4:	d01a      	beq.n	8006bdc <UART_SetConfig+0x268>
 8006ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006baa:	d81b      	bhi.n	8006be4 <UART_SetConfig+0x270>
 8006bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb0:	d00c      	beq.n	8006bcc <UART_SetConfig+0x258>
 8006bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb6:	d815      	bhi.n	8006be4 <UART_SetConfig+0x270>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <UART_SetConfig+0x250>
 8006bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc0:	d008      	beq.n	8006bd4 <UART_SetConfig+0x260>
 8006bc2:	e00f      	b.n	8006be4 <UART_SetConfig+0x270>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bca:	e052      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd2:	e04e      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bda:	e04a      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be2:	e046      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bea:	e042      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a17      	ldr	r2, [pc, #92]	@ (8006c50 <UART_SetConfig+0x2dc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d13a      	bne.n	8006c6c <UART_SetConfig+0x2f8>
 8006bf6:	4b18      	ldr	r3, [pc, #96]	@ (8006c58 <UART_SetConfig+0x2e4>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c04:	d01a      	beq.n	8006c3c <UART_SetConfig+0x2c8>
 8006c06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c0a:	d81b      	bhi.n	8006c44 <UART_SetConfig+0x2d0>
 8006c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c10:	d00c      	beq.n	8006c2c <UART_SetConfig+0x2b8>
 8006c12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c16:	d815      	bhi.n	8006c44 <UART_SetConfig+0x2d0>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <UART_SetConfig+0x2b0>
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c20:	d008      	beq.n	8006c34 <UART_SetConfig+0x2c0>
 8006c22:	e00f      	b.n	8006c44 <UART_SetConfig+0x2d0>
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2a:	e022      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c32:	e01e      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006c34:	2304      	movs	r3, #4
 8006c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c3a:	e01a      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c42:	e016      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006c44:	2310      	movs	r3, #16
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4a:	e012      	b.n	8006c72 <UART_SetConfig+0x2fe>
 8006c4c:	cfff69f3 	.word	0xcfff69f3
 8006c50:	40008000 	.word	0x40008000
 8006c54:	40013800 	.word	0x40013800
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	40004400 	.word	0x40004400
 8006c60:	40004800 	.word	0x40004800
 8006c64:	40004c00 	.word	0x40004c00
 8006c68:	40005000 	.word	0x40005000
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4aae      	ldr	r2, [pc, #696]	@ (8006f30 <UART_SetConfig+0x5bc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	f040 8097 	bne.w	8006dac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d823      	bhi.n	8006cce <UART_SetConfig+0x35a>
 8006c86:	a201      	add	r2, pc, #4	@ (adr r2, 8006c8c <UART_SetConfig+0x318>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006ccf 	.word	0x08006ccf
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006ccf 	.word	0x08006ccf
 8006c9c:	08006cbf 	.word	0x08006cbf
 8006ca0:	08006ccf 	.word	0x08006ccf
 8006ca4:	08006ccf 	.word	0x08006ccf
 8006ca8:	08006ccf 	.word	0x08006ccf
 8006cac:	08006cc7 	.word	0x08006cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7fd fbe4 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8006cb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cb6:	e010      	b.n	8006cda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb8:	4b9e      	ldr	r3, [pc, #632]	@ (8006f34 <UART_SetConfig+0x5c0>)
 8006cba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cbc:	e00d      	b.n	8006cda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cbe:	f7fd fb6f 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8006cc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cc4:	e009      	b.n	8006cda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ccc:	e005      	b.n	8006cda <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8130 	beq.w	8006f42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce6:	4a94      	ldr	r2, [pc, #592]	@ (8006f38 <UART_SetConfig+0x5c4>)
 8006ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cec:	461a      	mov	r2, r3
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	4413      	add	r3, r2
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d305      	bcc.n	8006d12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d903      	bls.n	8006d1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d18:	e113      	b.n	8006f42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	60fa      	str	r2, [r7, #12]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d26:	4a84      	ldr	r2, [pc, #528]	@ (8006f38 <UART_SetConfig+0x5c4>)
 8006d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2200      	movs	r2, #0
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d3c:	f7f9 ff3a 	bl	8000bb4 <__aeabi_uldivmod>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4610      	mov	r0, r2
 8006d46:	4619      	mov	r1, r3
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	020b      	lsls	r3, r1, #8
 8006d52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d56:	0202      	lsls	r2, r0, #8
 8006d58:	6979      	ldr	r1, [r7, #20]
 8006d5a:	6849      	ldr	r1, [r1, #4]
 8006d5c:	0849      	lsrs	r1, r1, #1
 8006d5e:	2000      	movs	r0, #0
 8006d60:	460c      	mov	r4, r1
 8006d62:	4605      	mov	r5, r0
 8006d64:	eb12 0804 	adds.w	r8, r2, r4
 8006d68:	eb43 0905 	adc.w	r9, r3, r5
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	469a      	mov	sl, r3
 8006d74:	4693      	mov	fp, r2
 8006d76:	4652      	mov	r2, sl
 8006d78:	465b      	mov	r3, fp
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	f7f9 ff19 	bl	8000bb4 <__aeabi_uldivmod>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4613      	mov	r3, r2
 8006d88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d90:	d308      	bcc.n	8006da4 <UART_SetConfig+0x430>
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d98:	d204      	bcs.n	8006da4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6a3a      	ldr	r2, [r7, #32]
 8006da0:	60da      	str	r2, [r3, #12]
 8006da2:	e0ce      	b.n	8006f42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006daa:	e0ca      	b.n	8006f42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006db4:	d166      	bne.n	8006e84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006db6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d827      	bhi.n	8006e0e <UART_SetConfig+0x49a>
 8006dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <UART_SetConfig+0x450>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006de9 	.word	0x08006de9
 8006dc8:	08006df1 	.word	0x08006df1
 8006dcc:	08006df9 	.word	0x08006df9
 8006dd0:	08006e0f 	.word	0x08006e0f
 8006dd4:	08006dff 	.word	0x08006dff
 8006dd8:	08006e0f 	.word	0x08006e0f
 8006ddc:	08006e0f 	.word	0x08006e0f
 8006de0:	08006e0f 	.word	0x08006e0f
 8006de4:	08006e07 	.word	0x08006e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de8:	f7fd fb48 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8006dec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dee:	e014      	b.n	8006e1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df0:	f7fd fb5a 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8006df4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006df6:	e010      	b.n	8006e1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006df8:	4b4e      	ldr	r3, [pc, #312]	@ (8006f34 <UART_SetConfig+0x5c0>)
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dfc:	e00d      	b.n	8006e1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dfe:	f7fd facf 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8006e02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e04:	e009      	b.n	8006e1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e0c:	e005      	b.n	8006e1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8090 	beq.w	8006f42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e26:	4a44      	ldr	r2, [pc, #272]	@ (8006f38 <UART_SetConfig+0x5c4>)
 8006e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e34:	005a      	lsls	r2, r3, #1
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	085b      	lsrs	r3, r3, #1
 8006e3c:	441a      	add	r2, r3
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	2b0f      	cmp	r3, #15
 8006e4c:	d916      	bls.n	8006e7c <UART_SetConfig+0x508>
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e54:	d212      	bcs.n	8006e7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f023 030f 	bic.w	r3, r3, #15
 8006e5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	8bfb      	ldrh	r3, [r7, #30]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	8bfa      	ldrh	r2, [r7, #30]
 8006e78:	60da      	str	r2, [r3, #12]
 8006e7a:	e062      	b.n	8006f42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e82:	e05e      	b.n	8006f42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d828      	bhi.n	8006ede <UART_SetConfig+0x56a>
 8006e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e94 <UART_SetConfig+0x520>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006eb9 	.word	0x08006eb9
 8006e98:	08006ec1 	.word	0x08006ec1
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	08006edf 	.word	0x08006edf
 8006ea4:	08006ecf 	.word	0x08006ecf
 8006ea8:	08006edf 	.word	0x08006edf
 8006eac:	08006edf 	.word	0x08006edf
 8006eb0:	08006edf 	.word	0x08006edf
 8006eb4:	08006ed7 	.word	0x08006ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb8:	f7fd fae0 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8006ebc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ebe:	e014      	b.n	8006eea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec0:	f7fd faf2 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8006ec4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ec6:	e010      	b.n	8006eea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f34 <UART_SetConfig+0x5c0>)
 8006eca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ecc:	e00d      	b.n	8006eea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ece:	f7fd fa67 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8006ed2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ed4:	e009      	b.n	8006eea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006edc:	e005      	b.n	8006eea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ee8:	bf00      	nop
    }

    if (pclk != 0U)
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d028      	beq.n	8006f42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef4:	4a10      	ldr	r2, [pc, #64]	@ (8006f38 <UART_SetConfig+0x5c4>)
 8006ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006efa:	461a      	mov	r2, r3
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	441a      	add	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	2b0f      	cmp	r3, #15
 8006f18:	d910      	bls.n	8006f3c <UART_SetConfig+0x5c8>
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f20:	d20c      	bcs.n	8006f3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60da      	str	r2, [r3, #12]
 8006f2c:	e009      	b.n	8006f42 <UART_SetConfig+0x5ce>
 8006f2e:	bf00      	nop
 8006f30:	40008000 	.word	0x40008000
 8006f34:	00f42400 	.word	0x00f42400
 8006f38:	080077f0 	.word	0x080077f0
      }
      else
      {
        ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2200      	movs	r2, #0
 8006f56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3730      	adds	r7, #48	@ 0x30
 8006f66:	46bd      	mov	sp, r7
 8006f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fde:	f003 0304 	and.w	r3, r3, #4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01a      	beq.n	8007082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800706a:	d10a      	bne.n	8007082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	605a      	str	r2, [r3, #4]
  }
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b098      	sub	sp, #96	@ 0x60
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070c0:	f7fa ffc4 	bl	800204c <HAL_GetTick>
 80070c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0308 	and.w	r3, r3, #8
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d12f      	bne.n	8007134 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070dc:	2200      	movs	r2, #0
 80070de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f88e 	bl	8007204 <UART_WaitOnFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d022      	beq.n	8007134 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007102:	653b      	str	r3, [r7, #80]	@ 0x50
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800710c:	647b      	str	r3, [r7, #68]	@ 0x44
 800710e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800711a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e6      	bne.n	80070ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e063      	b.n	80071fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b04      	cmp	r3, #4
 8007140:	d149      	bne.n	80071d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007142:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800714a:	2200      	movs	r2, #0
 800714c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f857 	bl	8007204 <UART_WaitOnFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d03c      	beq.n	80071d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	623b      	str	r3, [r7, #32]
   return(result);
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800717a:	633b      	str	r3, [r7, #48]	@ 0x30
 800717c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	60fb      	str	r3, [r7, #12]
   return(result);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071ae:	61fa      	str	r2, [r7, #28]
 80071b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	69b9      	ldr	r1, [r7, #24]
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	617b      	str	r3, [r7, #20]
   return(result);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e5      	bne.n	800718e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e012      	b.n	80071fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3758      	adds	r7, #88	@ 0x58
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007214:	e04f      	b.n	80072b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d04b      	beq.n	80072b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721e:	f7fa ff15 	bl	800204c <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	429a      	cmp	r2, r3
 800722c:	d302      	bcc.n	8007234 <UART_WaitOnFlagUntilTimeout+0x30>
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e04e      	b.n	80072d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d037      	beq.n	80072b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b80      	cmp	r3, #128	@ 0x80
 800724a:	d034      	beq.n	80072b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b40      	cmp	r3, #64	@ 0x40
 8007250:	d031      	beq.n	80072b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b08      	cmp	r3, #8
 800725e:	d110      	bne.n	8007282 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2208      	movs	r2, #8
 8007266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f838 	bl	80072de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2208      	movs	r2, #8
 8007272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e029      	b.n	80072d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800728c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007290:	d111      	bne.n	80072b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800729a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f81e 	bl	80072de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e00f      	b.n	80072d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69da      	ldr	r2, [r3, #28]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4013      	ands	r3, r2
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	bf0c      	ite	eq
 80072c6:	2301      	moveq	r3, #1
 80072c8:	2300      	movne	r3, #0
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d0a0      	beq.n	8007216 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072de:	b480      	push	{r7}
 80072e0:	b095      	sub	sp, #84	@ 0x54
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007304:	643b      	str	r3, [r7, #64]	@ 0x40
 8007306:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800730a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e6      	bne.n	80072e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	61fb      	str	r3, [r7, #28]
   return(result);
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800732e:	f023 0301 	bic.w	r3, r3, #1
 8007332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800733c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800733e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e3      	bne.n	8007318 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007354:	2b01      	cmp	r3, #1
 8007356:	d118      	bne.n	800738a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	60bb      	str	r3, [r7, #8]
   return(result);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f023 0310 	bic.w	r3, r3, #16
 800736c:	647b      	str	r3, [r7, #68]	@ 0x44
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007376:	61bb      	str	r3, [r7, #24]
 8007378:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6979      	ldr	r1, [r7, #20]
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	613b      	str	r3, [r7, #16]
   return(result);
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e6      	bne.n	8007358 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800739e:	bf00      	nop
 80073a0:	3754      	adds	r7, #84	@ 0x54
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7ff fabd 	bl	8006948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b088      	sub	sp, #32
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073f2:	61fb      	str	r3, [r7, #28]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6979      	ldr	r1, [r7, #20]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	613b      	str	r3, [r7, #16]
   return(result);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e6      	bne.n	80073de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff fa88 	bl	8006934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007424:	bf00      	nop
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_UARTEx_DisableFifoMode+0x16>
 800747a:	2302      	movs	r3, #2
 800747c:	e027      	b.n	80074ce <HAL_UARTEx_DisableFifoMode+0x66>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2224      	movs	r2, #36	@ 0x24
 800748a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80074ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e02d      	b.n	800754e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2224      	movs	r2, #36	@ 0x24
 80074fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0201 	bic.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f850 	bl	80075d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007566:	2b01      	cmp	r3, #1
 8007568:	d101      	bne.n	800756e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800756a:	2302      	movs	r3, #2
 800756c:	e02d      	b.n	80075ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2224      	movs	r2, #36	@ 0x24
 800757a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0201 	bic.w	r2, r2, #1
 8007594:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f812 	bl	80075d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d108      	bne.n	80075f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075f4:	e031      	b.n	800765a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075f6:	2308      	movs	r3, #8
 80075f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075fa:	2308      	movs	r3, #8
 80075fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	0e5b      	lsrs	r3, r3, #25
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	0f5b      	lsrs	r3, r3, #29
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	7b3a      	ldrb	r2, [r7, #12]
 8007622:	4911      	ldr	r1, [pc, #68]	@ (8007668 <UARTEx_SetNbDataToProcess+0x94>)
 8007624:	5c8a      	ldrb	r2, [r1, r2]
 8007626:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800762a:	7b3a      	ldrb	r2, [r7, #12]
 800762c:	490f      	ldr	r1, [pc, #60]	@ (800766c <UARTEx_SetNbDataToProcess+0x98>)
 800762e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007630:	fb93 f3f2 	sdiv	r3, r3, r2
 8007634:	b29a      	uxth	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	7b7a      	ldrb	r2, [r7, #13]
 8007640:	4909      	ldr	r1, [pc, #36]	@ (8007668 <UARTEx_SetNbDataToProcess+0x94>)
 8007642:	5c8a      	ldrb	r2, [r1, r2]
 8007644:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007648:	7b7a      	ldrb	r2, [r7, #13]
 800764a:	4908      	ldr	r1, [pc, #32]	@ (800766c <UARTEx_SetNbDataToProcess+0x98>)
 800764c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800764e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007652:	b29a      	uxth	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	08007808 	.word	0x08007808
 800766c:	08007810 	.word	0x08007810

08007670 <floor>:
 8007670:	ec51 0b10 	vmov	r0, r1, d0
 8007674:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007680:	2e13      	cmp	r6, #19
 8007682:	460c      	mov	r4, r1
 8007684:	4605      	mov	r5, r0
 8007686:	4680      	mov	r8, r0
 8007688:	dc34      	bgt.n	80076f4 <floor+0x84>
 800768a:	2e00      	cmp	r6, #0
 800768c:	da17      	bge.n	80076be <floor+0x4e>
 800768e:	a332      	add	r3, pc, #200	@ (adr r3, 8007758 <floor+0xe8>)
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	f7f8 fdc6 	bl	8000224 <__adddf3>
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	f7f9 fa08 	bl	8000ab0 <__aeabi_dcmpgt>
 80076a0:	b150      	cbz	r0, 80076b8 <floor+0x48>
 80076a2:	2c00      	cmp	r4, #0
 80076a4:	da55      	bge.n	8007752 <floor+0xe2>
 80076a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80076aa:	432c      	orrs	r4, r5
 80076ac:	2500      	movs	r5, #0
 80076ae:	42ac      	cmp	r4, r5
 80076b0:	4c2b      	ldr	r4, [pc, #172]	@ (8007760 <floor+0xf0>)
 80076b2:	bf08      	it	eq
 80076b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80076b8:	4621      	mov	r1, r4
 80076ba:	4628      	mov	r0, r5
 80076bc:	e023      	b.n	8007706 <floor+0x96>
 80076be:	4f29      	ldr	r7, [pc, #164]	@ (8007764 <floor+0xf4>)
 80076c0:	4137      	asrs	r7, r6
 80076c2:	ea01 0307 	and.w	r3, r1, r7
 80076c6:	4303      	orrs	r3, r0
 80076c8:	d01d      	beq.n	8007706 <floor+0x96>
 80076ca:	a323      	add	r3, pc, #140	@ (adr r3, 8007758 <floor+0xe8>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f7f8 fda8 	bl	8000224 <__adddf3>
 80076d4:	2200      	movs	r2, #0
 80076d6:	2300      	movs	r3, #0
 80076d8:	f7f9 f9ea 	bl	8000ab0 <__aeabi_dcmpgt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d0eb      	beq.n	80076b8 <floor+0x48>
 80076e0:	2c00      	cmp	r4, #0
 80076e2:	bfbe      	ittt	lt
 80076e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80076e8:	4133      	asrlt	r3, r6
 80076ea:	18e4      	addlt	r4, r4, r3
 80076ec:	ea24 0407 	bic.w	r4, r4, r7
 80076f0:	2500      	movs	r5, #0
 80076f2:	e7e1      	b.n	80076b8 <floor+0x48>
 80076f4:	2e33      	cmp	r6, #51	@ 0x33
 80076f6:	dd0a      	ble.n	800770e <floor+0x9e>
 80076f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80076fc:	d103      	bne.n	8007706 <floor+0x96>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	f7f8 fd8f 	bl	8000224 <__adddf3>
 8007706:	ec41 0b10 	vmov	d0, r0, r1
 800770a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007712:	f04f 37ff 	mov.w	r7, #4294967295
 8007716:	40df      	lsrs	r7, r3
 8007718:	4207      	tst	r7, r0
 800771a:	d0f4      	beq.n	8007706 <floor+0x96>
 800771c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007758 <floor+0xe8>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f7f8 fd7f 	bl	8000224 <__adddf3>
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	f7f9 f9c1 	bl	8000ab0 <__aeabi_dcmpgt>
 800772e:	2800      	cmp	r0, #0
 8007730:	d0c2      	beq.n	80076b8 <floor+0x48>
 8007732:	2c00      	cmp	r4, #0
 8007734:	da0a      	bge.n	800774c <floor+0xdc>
 8007736:	2e14      	cmp	r6, #20
 8007738:	d101      	bne.n	800773e <floor+0xce>
 800773a:	3401      	adds	r4, #1
 800773c:	e006      	b.n	800774c <floor+0xdc>
 800773e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007742:	2301      	movs	r3, #1
 8007744:	40b3      	lsls	r3, r6
 8007746:	441d      	add	r5, r3
 8007748:	4545      	cmp	r5, r8
 800774a:	d3f6      	bcc.n	800773a <floor+0xca>
 800774c:	ea25 0507 	bic.w	r5, r5, r7
 8007750:	e7b2      	b.n	80076b8 <floor+0x48>
 8007752:	2500      	movs	r5, #0
 8007754:	462c      	mov	r4, r5
 8007756:	e7af      	b.n	80076b8 <floor+0x48>
 8007758:	8800759c 	.word	0x8800759c
 800775c:	7e37e43c 	.word	0x7e37e43c
 8007760:	bff00000 	.word	0xbff00000
 8007764:	000fffff 	.word	0x000fffff

08007768 <memset>:
 8007768:	4402      	add	r2, r0
 800776a:	4603      	mov	r3, r0
 800776c:	4293      	cmp	r3, r2
 800776e:	d100      	bne.n	8007772 <memset+0xa>
 8007770:	4770      	bx	lr
 8007772:	f803 1b01 	strb.w	r1, [r3], #1
 8007776:	e7f9      	b.n	800776c <memset+0x4>

08007778 <__libc_init_array>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	4d0d      	ldr	r5, [pc, #52]	@ (80077b0 <__libc_init_array+0x38>)
 800777c:	4c0d      	ldr	r4, [pc, #52]	@ (80077b4 <__libc_init_array+0x3c>)
 800777e:	1b64      	subs	r4, r4, r5
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	2600      	movs	r6, #0
 8007784:	42a6      	cmp	r6, r4
 8007786:	d109      	bne.n	800779c <__libc_init_array+0x24>
 8007788:	4d0b      	ldr	r5, [pc, #44]	@ (80077b8 <__libc_init_array+0x40>)
 800778a:	4c0c      	ldr	r4, [pc, #48]	@ (80077bc <__libc_init_array+0x44>)
 800778c:	f000 f818 	bl	80077c0 <_init>
 8007790:	1b64      	subs	r4, r4, r5
 8007792:	10a4      	asrs	r4, r4, #2
 8007794:	2600      	movs	r6, #0
 8007796:	42a6      	cmp	r6, r4
 8007798:	d105      	bne.n	80077a6 <__libc_init_array+0x2e>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a0:	4798      	blx	r3
 80077a2:	3601      	adds	r6, #1
 80077a4:	e7ee      	b.n	8007784 <__libc_init_array+0xc>
 80077a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077aa:	4798      	blx	r3
 80077ac:	3601      	adds	r6, #1
 80077ae:	e7f2      	b.n	8007796 <__libc_init_array+0x1e>
 80077b0:	08007820 	.word	0x08007820
 80077b4:	08007820 	.word	0x08007820
 80077b8:	08007820 	.word	0x08007820
 80077bc:	08007824 	.word	0x08007824

080077c0 <_init>:
 80077c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c2:	bf00      	nop
 80077c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c6:	bc08      	pop	{r3}
 80077c8:	469e      	mov	lr, r3
 80077ca:	4770      	bx	lr

080077cc <_fini>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	bf00      	nop
 80077d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d2:	bc08      	pop	{r3}
 80077d4:	469e      	mov	lr, r3
 80077d6:	4770      	bx	lr
