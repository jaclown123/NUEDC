
ez_exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008498  08008498  00009498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084d8  080084d8  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  080084d8  080084d8  000094d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084e0  080084e0  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084e0  080084e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084e4  080084e4  000094e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080084e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  2000000c  080084f4  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080084f4  0000a380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c650  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003775  00000000  00000000  0002668c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00029e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b7  00000000  00000000  0002b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290c0  00000000  00000000  0002caef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020014  00000000  00000000  00055baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107dc2  00000000  00000000  00075bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d985  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e7c  00000000  00000000  0017d9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00184844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008480 	.word	0x08008480

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08008480 	.word	0x08008480

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_ldivmod>:
 8000b14:	b97b      	cbnz	r3, 8000b36 <__aeabi_ldivmod+0x22>
 8000b16:	b972      	cbnz	r2, 8000b36 <__aeabi_ldivmod+0x22>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bfbe      	ittt	lt
 8000b1c:	2000      	movlt	r0, #0
 8000b1e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b22:	e006      	blt.n	8000b32 <__aeabi_ldivmod+0x1e>
 8000b24:	bf08      	it	eq
 8000b26:	2800      	cmpeq	r0, #0
 8000b28:	bf1c      	itt	ne
 8000b2a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b2e:	f04f 30ff 	movne.w	r0, #4294967295
 8000b32:	f000 b9b5 	b.w	8000ea0 <__aeabi_idiv0>
 8000b36:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	db09      	blt.n	8000b56 <__aeabi_ldivmod+0x42>
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db1a      	blt.n	8000b7c <__aeabi_ldivmod+0x68>
 8000b46:	f000 f84d 	bl	8000be4 <__udivmoddi4>
 8000b4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b52:	b004      	add	sp, #16
 8000b54:	4770      	bx	lr
 8000b56:	4240      	negs	r0, r0
 8000b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db1b      	blt.n	8000b98 <__aeabi_ldivmod+0x84>
 8000b60:	f000 f840 	bl	8000be4 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4240      	negs	r0, r0
 8000b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b74:	4252      	negs	r2, r2
 8000b76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b7a:	4770      	bx	lr
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	f000 f82f 	bl	8000be4 <__udivmoddi4>
 8000b86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8e:	b004      	add	sp, #16
 8000b90:	4240      	negs	r0, r0
 8000b92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b96:	4770      	bx	lr
 8000b98:	4252      	negs	r2, r2
 8000b9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b9e:	f000 f821 	bl	8000be4 <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4252      	negs	r2, r2
 8000bae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <set_freq>:

#include <stdint.h>
#include <stdio.h>
//1为正弦波�????? 2为三角波 ,3为正弦波+方波 方波在sqr引脚输出
void set_freq(void (*send_data)(uint16_t), long long int freq,int c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	e9c7 2300 	strd	r2, r3, [r7]

	long long int temp = (freq * 268435456 / 100000000) ;
 8000eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eb8:	f04f 0000 	mov.w	r0, #0
 8000ebc:	f04f 0100 	mov.w	r1, #0
 8000ec0:	0719      	lsls	r1, r3, #28
 8000ec2:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8000ec6:	0710      	lsls	r0, r2, #28
 8000ec8:	a33d      	add	r3, pc, #244	@ (adr r3, 8000fc0 <set_freq+0x118>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff fe21 	bl	8000b14 <__aeabi_ldivmod>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t fr = temp;
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	617b      	str	r3, [r7, #20]
	uint16_t lsb = 0x4000;
 8000ede:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ee2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t msb = 0x4000;
 8000ee4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ee8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
 8000eee:	e029      	b.n	8000f44 <set_freq+0x9c>
	    // 对于lsb，直接取fr对应�?????
	    if (fr & (1 << i)) {
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d009      	beq.n	8000f16 <set_freq+0x6e>
	        lsb |= (1 << i);
 8000f02:	2201      	movs	r2, #1
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    }
	    if (fr & (1 << (i + 14))) {
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	330e      	adds	r3, #14
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d009      	beq.n	8000f3e <set_freq+0x96>
	        msb |= (1 << i);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < 14; ++i) {
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	3301      	adds	r3, #1
 8000f42:	623b      	str	r3, [r7, #32]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	2b0d      	cmp	r3, #13
 8000f48:	ddd2      	ble.n	8000ef0 <set_freq+0x48>
	    }
	}

	send_data(0x2100);//send_data(0x2300);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8000f50:	4798      	blx	r3
	send_data(lsb);//freq0
 8000f52:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4610      	mov	r0, r2
 8000f58:	4798      	blx	r3
	send_data(msb);
 8000f5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4798      	blx	r3
	send_data(0xc000);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000f68:	4798      	blx	r3
	send_data(0x2100);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8000f70:	4798      	blx	r3
	send_data(0x8000);//freq1
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f78:	4798      	blx	r3
	send_data(0x8432);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f248 4032 	movw	r0, #33842	@ 0x8432
 8000f80:	4798      	blx	r3

	//send_data(0x0028);
	switch(c)
 8000f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d011      	beq.n	8000fac <set_freq+0x104>
 8000f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	dc12      	bgt.n	8000fb4 <set_freq+0x10c>
 8000f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d003      	beq.n	8000f9c <set_freq+0xf4>
 8000f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d004      	beq.n	8000fa4 <set_freq+0xfc>
			case 1:send_data(0x0000);break;//send_data(0x0200);
			case 2:send_data(0x0002);break;
			case 3:send_data(0x0028); break;
		}
	//send_data(0x2200);
}
 8000f9a:	e00b      	b.n	8000fb4 <set_freq+0x10c>
			case 1:send_data(0x0000);break;//send_data(0x0200);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	4798      	blx	r3
 8000fa2:	e007      	b.n	8000fb4 <set_freq+0x10c>
			case 2:send_data(0x0002);break;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	4798      	blx	r3
 8000faa:	e003      	b.n	8000fb4 <set_freq+0x10c>
			case 3:send_data(0x0028); break;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2028      	movs	r0, #40	@ 0x28
 8000fb0:	4798      	blx	r3
 8000fb2:	bf00      	nop
}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	@ 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	05f5e100 	.word	0x05f5e100
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <send_data>:
		}
		//uart_transmit(i2c_buffer, length + 1);
	}
}
void send_data(uint16_t data)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, 1<<10, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fdc:	f002 fd04 	bl	80039e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&data, 1, 10);
 8000fe0:	1db9      	adds	r1, r7, #6
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4807      	ldr	r0, [pc, #28]	@ (8001004 <send_data+0x3c>)
 8000fe8:	f004 fb9f 	bl	800572a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, 1<<10, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff6:	f002 fcf7 	bl	80039e8 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000018c 	.word	0x2000018c

08001008 <i2c_write>:
void i2c_write(uint8_t * data, size_t size , uint16_t addr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af02      	add	r7, sp, #8
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	4613      	mov	r3, r2
 8001014:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_Master_Transmit(&hi2c1, addr, data , size , size) !=  HAL_OK)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	b29a      	uxth	r2, r3
 800101a:	88f9      	ldrh	r1, [r7, #6]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	4613      	mov	r3, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <i2c_write+0x2c>)
 8001026:	f002 fd93 	bl	8003b50 <HAL_I2C_Master_Transmit>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
		return;
}
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000fc 	.word	0x200000fc

08001038 <multisynth_program>:
	if (HAL_I2C_Master_Receive(&hi2c1, addr, i2c_buffer + 1, length , length + 1) != HAL_OK)
	{
		i2c_buffer[0] = -1;
	}
}
void multisynth_program(int intg, int num, int denom, int rdiv, uint8_t* data , uint8_t reg_addr) {
 8001038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800103c:	b08a      	sub	sp, #40	@ 0x28
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	603b      	str	r3, [r7, #0]
    int p1 = 128 * intg + floor(128*(double)num/denom) - 512;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	01db      	lsls	r3, r3, #7
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa35 	bl	80004bc <__aeabi_i2d>
 8001052:	4604      	mov	r4, r0
 8001054:	460d      	mov	r5, r1
 8001056:	68b8      	ldr	r0, [r7, #8]
 8001058:	f7ff fa30 	bl	80004bc <__aeabi_i2d>
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b89      	ldr	r3, [pc, #548]	@ (8001288 <multisynth_program+0x250>)
 8001062:	f7ff fa95 	bl	8000590 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4690      	mov	r8, r2
 800106c:	4699      	mov	r9, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fa24 	bl	80004bc <__aeabi_i2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4640      	mov	r0, r8
 800107a:	4649      	mov	r1, r9
 800107c:	f7ff fbb2 	bl	80007e4 <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	ec43 2b17 	vmov	d7, r2, r3
 8001088:	eeb0 0a47 	vmov.f32	s0, s14
 800108c:	eef0 0a67 	vmov.f32	s1, s15
 8001090:	f007 f94e 	bl	8008330 <floor>
 8001094:	ec53 2b10 	vmov	r2, r3, d0
 8001098:	4620      	mov	r0, r4
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff f8c2 	bl	8000224 <__adddf3>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80010b0:	f7ff f8b6 	bl	8000220 <__aeabi_dsub>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd02 	bl	8000ac4 <__aeabi_d2iz>
 80010c0:	4603      	mov	r3, r0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    int p2 = 128 * num - denom * floor(128*(double)num/denom);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	01db      	lsls	r3, r3, #7
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f9f7 	bl	80004bc <__aeabi_i2d>
 80010ce:	4604      	mov	r4, r0
 80010d0:	460d      	mov	r5, r1
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff f9f2 	bl	80004bc <__aeabi_i2d>
 80010d8:	4680      	mov	r8, r0
 80010da:	4689      	mov	r9, r1
 80010dc:	68b8      	ldr	r0, [r7, #8]
 80010de:	f7ff f9ed 	bl	80004bc <__aeabi_i2d>
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b68      	ldr	r3, [pc, #416]	@ (8001288 <multisynth_program+0x250>)
 80010e8:	f7ff fa52 	bl	8000590 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4692      	mov	sl, r2
 80010f2:	469b      	mov	fp, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff f9e1 	bl	80004bc <__aeabi_i2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4650      	mov	r0, sl
 8001100:	4659      	mov	r1, fp
 8001102:	f7ff fb6f 	bl	80007e4 <__aeabi_ddiv>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	ec43 2b17 	vmov	d7, r2, r3
 800110e:	eeb0 0a47 	vmov.f32	s0, s14
 8001112:	eef0 0a67 	vmov.f32	s1, s15
 8001116:	f007 f90b 	bl	8008330 <floor>
 800111a:	ec53 2b10 	vmov	r2, r3, d0
 800111e:	4640      	mov	r0, r8
 8001120:	4649      	mov	r1, r9
 8001122:	f7ff fa35 	bl	8000590 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff f877 	bl	8000220 <__aeabi_dsub>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fcc3 	bl	8000ac4 <__aeabi_d2iz>
 800113e:	4603      	mov	r3, r0
 8001140:	623b      	str	r3, [r7, #32]
    int p3 = denom;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	61fb      	str	r3, [r7, #28]

    int x, y, z;
    x = p3 / (256*256);
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2b00      	cmp	r3, #0
 800114a:	da02      	bge.n	8001152 <multisynth_program+0x11a>
 800114c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001150:	33ff      	adds	r3, #255	@ 0xff
 8001152:	141b      	asrs	r3, r3, #16
 8001154:	61bb      	str	r3, [r7, #24]
    p3 %= (256*256);
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	425a      	negs	r2, r3
 800115a:	b29b      	uxth	r3, r3
 800115c:	b292      	uxth	r2, r2
 800115e:	bf58      	it	pl
 8001160:	4253      	negpl	r3, r2
 8001162:	61fb      	str	r3, [r7, #28]
    y = p3 / 256;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b00      	cmp	r3, #0
 8001168:	da00      	bge.n	800116c <multisynth_program+0x134>
 800116a:	33ff      	adds	r3, #255	@ 0xff
 800116c:	121b      	asrs	r3, r3, #8
 800116e:	617b      	str	r3, [r7, #20]
    z = p3 % 256;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	425a      	negs	r2, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	bf58      	it	pl
 800117a:	4253      	negpl	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
    data[1] = y;
 800117e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001180:	3301      	adds	r3, #1
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	701a      	strb	r2, [r3, #0]
    data[2] = z;
 8001188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800118a:	3302      	adds	r3, #2
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
    data[6] = x << 4;
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001198:	3306      	adds	r3, #6
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	701a      	strb	r2, [r3, #0]

    x = p1 / (256*256);
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da02      	bge.n	80011ac <multisynth_program+0x174>
 80011a6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011aa:	33ff      	adds	r3, #255	@ 0xff
 80011ac:	141b      	asrs	r3, r3, #16
 80011ae:	61bb      	str	r3, [r7, #24]
    p1 %= (256*256);
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b2:	425a      	negs	r2, r3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	b292      	uxth	r2, r2
 80011b8:	bf58      	it	pl
 80011ba:	4253      	negpl	r3, r2
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    y = p1 / 256;
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da00      	bge.n	80011c6 <multisynth_program+0x18e>
 80011c4:	33ff      	adds	r3, #255	@ 0xff
 80011c6:	121b      	asrs	r3, r3, #8
 80011c8:	617b      	str	r3, [r7, #20]
    z = p1 % 256;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	425a      	negs	r2, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	bf58      	it	pl
 80011d4:	4253      	negpl	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
    data[3] = x;
 80011d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011da:	3303      	adds	r3, #3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]
    data[4] = y;
 80011e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011e4:	3304      	adds	r3, #4
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	701a      	strb	r2, [r3, #0]
    data[5] = z;
 80011ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011ee:	3305      	adds	r3, #5
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]

    x = p2 / (256*256);
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da02      	bge.n	8001202 <multisynth_program+0x1ca>
 80011fc:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001200:	33ff      	adds	r3, #255	@ 0xff
 8001202:	141b      	asrs	r3, r3, #16
 8001204:	61bb      	str	r3, [r7, #24]
    p2 %= (256*256);
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	425a      	negs	r2, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	b292      	uxth	r2, r2
 800120e:	bf58      	it	pl
 8001210:	4253      	negpl	r3, r2
 8001212:	623b      	str	r3, [r7, #32]
    y = p2 / 256;
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	2b00      	cmp	r3, #0
 8001218:	da00      	bge.n	800121c <multisynth_program+0x1e4>
 800121a:	33ff      	adds	r3, #255	@ 0xff
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	617b      	str	r3, [r7, #20]
    z = p2 % 256;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	425a      	negs	r2, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	bf58      	it	pl
 800122a:	4253      	negpl	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
    data[6] |= x;
 800122e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001230:	3306      	adds	r3, #6
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25a      	sxtb	r2, r3
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b25a      	sxtb	r2, r3
 800123e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001240:	3306      	adds	r3, #6
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
    data[7] = y;
 8001246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001248:	3307      	adds	r3, #7
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	701a      	strb	r2, [r3, #0]
    data[8] = z;
 8001250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001252:	3308      	adds	r3, #8
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]

    data[3] |= rdiv << 4;
 800125a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800125c:	3303      	adds	r3, #3
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25a      	sxtb	r2, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	b25b      	sxtb	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b25a      	sxtb	r2, r3
 800126c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800126e:	3303      	adds	r3, #3
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	701a      	strb	r2, [r3, #0]
    data[0] = reg_addr;
 8001274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001276:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	@ 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001286:	bf00      	nop
 8001288:	40600000 	.word	0x40600000

0800128c <pll_freq>:
void pll_freq(uint8_t x , uint8_t y)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af02      	add	r7, sp, #8
 8001292:	4603      	mov	r3, r0
 8001294:	460a      	mov	r2, r1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[9] = {0};
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	711a      	strb	r2, [r3, #4]
	for (int i = 0 ; i < 9 ;++ i )
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ae:	e008      	b.n	80012c2 <pll_freq+0x36>
		  	  {
		  		  data[i] = 0;
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < 9 ;++ i )
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	3301      	adds	r3, #1
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	ddf3      	ble.n	80012b0 <pll_freq+0x24>
		  	  }
		  data[0] = 3;
 80012c8:	2303      	movs	r3, #3
 80012ca:	723b      	strb	r3, [r7, #8]
		  data[1] = 255;
 80012cc:	23ff      	movs	r3, #255	@ 0xff
 80012ce:	727b      	strb	r3, [r7, #9]
		  i2c_write(data , 2  , 0xc0);
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	22c0      	movs	r2, #192	@ 0xc0
 80012d6:	2102      	movs	r1, #2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe95 	bl	8001008 <i2c_write>
		  for (int i = 0 ; i < 9 ;++ i )
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	e008      	b.n	80012f6 <pll_freq+0x6a>
		  {
			  data[i] = 0;
 80012e4:	f107 0208 	add.w	r2, r7, #8
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	4413      	add	r3, r2
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
		  for (int i = 0 ; i < 9 ;++ i )
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	3301      	adds	r3, #1
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	ddf3      	ble.n	80012e4 <pll_freq+0x58>
		  }
		  multisynth_program(x, 0, 500, 0, data , 26);
 80012fc:	79f8      	ldrb	r0, [r7, #7]
 80012fe:	231a      	movs	r3, #26
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800130e:	2100      	movs	r1, #0
 8001310:	f7ff fe92 	bl	8001038 <multisynth_program>
		i2c_write(data, 9 , 0xc0);
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	22c0      	movs	r2, #192	@ 0xc0
 800131a:	2109      	movs	r1, #9
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fe73 	bl	8001008 <i2c_write>
		for (int i = 0 ; i < 9 ;++ i )
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	e008      	b.n	800133a <pll_freq+0xae>
		  {
			  data[i] = 0;
 8001328:	f107 0208 	add.w	r2, r7, #8
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4413      	add	r3, r2
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
		for (int i = 0 ; i < 9 ;++ i )
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	3301      	adds	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	2b08      	cmp	r3, #8
 800133e:	ddf3      	ble.n	8001328 <pll_freq+0x9c>
		  }
		multisynth_program(y, 0, 1, 0, data , 42);
 8001340:	79b8      	ldrb	r0, [r7, #6]
 8001342:	232a      	movs	r3, #42	@ 0x2a
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	2201      	movs	r2, #1
 8001350:	2100      	movs	r1, #0
 8001352:	f7ff fe71 	bl	8001038 <multisynth_program>
		i2c_write(data, 9, 0xc0);
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	22c0      	movs	r2, #192	@ 0xc0
 800135c:	2109      	movs	r1, #9
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe52 	bl	8001008 <i2c_write>
		for (int i = 0 ; i < 9 ;++ i )
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	e008      	b.n	800137c <pll_freq+0xf0>
		  {
			  data[i] = 0;
 800136a:	f107 0208 	add.w	r2, r7, #8
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4413      	add	r3, r2
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
		for (int i = 0 ; i < 9 ;++ i )
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	3301      	adds	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b08      	cmp	r3, #8
 8001380:	ddf3      	ble.n	800136a <pll_freq+0xde>
		  }
		data[0] = 16;
 8001382:	2310      	movs	r3, #16
 8001384:	723b      	strb	r3, [r7, #8]
		data[1] = 0b11<<2 | 0b01;
 8001386:	230d      	movs	r3, #13
 8001388:	727b      	strb	r3, [r7, #9]
		i2c_write(data, 2, 0xc0);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	22c0      	movs	r2, #192	@ 0xc0
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe38 	bl	8001008 <i2c_write>
		for (int i = 0 ; i < 9 ;++ i )
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e008      	b.n	80013b0 <pll_freq+0x124>
		  {
			  data[i] = 0;
 800139e:	f107 0208 	add.w	r2, r7, #8
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
		for (int i = 0 ; i < 9 ;++ i )
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	ddf3      	ble.n	800139e <pll_freq+0x112>
		  }
		data[0] = 3;
 80013b6:	2303      	movs	r3, #3
 80013b8:	723b      	strb	r3, [r7, #8]
		data[1] = 255 - (1);
 80013ba:	23fe      	movs	r3, #254	@ 0xfe
 80013bc:	727b      	strb	r3, [r7, #9]
		i2c_write(data, 2, 0xc0);
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	22c0      	movs	r2, #192	@ 0xc0
 80013c4:	2102      	movs	r1, #2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe1e 	bl	8001008 <i2c_write>
}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	@ 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <set_dac>:
#define length 15
void set_dac(uint8_t offset)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b0ac      	sub	sp, #176	@ 0xb0
 80013d8:	af02      	add	r7, sp, #8
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]

	  uint32_t temp1[length];
	  uint32_t temp2[length];
	  uint16_t hsdac_buffer[length];
	  for (int i = 0; i < length; ++i)
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80013e4:	e015      	b.n	8001412 <set_dac+0x3e>
	  {
		  temp1[i] = (1llu<<32) / length * i;
 80013e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80013ea:	17da      	asrs	r2, r3, #31
 80013ec:	461c      	mov	r4, r3
 80013ee:	4615      	mov	r5, r2
 80013f0:	4622      	mov	r2, r4
 80013f2:	f04f 3311 	mov.w	r3, #286331153	@ 0x11111111
 80013f6:	fb03 f202 	mul.w	r2, r3, r2
 80013fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	33a8      	adds	r3, #168	@ 0xa8
 8001402:	443b      	add	r3, r7
 8001404:	f843 2c44 	str.w	r2, [r3, #-68]
	  for (int i = 0; i < length; ++i)
 8001408:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800140c:	3301      	adds	r3, #1
 800140e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001416:	2b0e      	cmp	r3, #14
 8001418:	dde5      	ble.n	80013e6 <set_dac+0x12>
	  }

	  HAL_CORDIC_CalculateZO(&hcordic, temp1, temp2, length,10);
 800141a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800141e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001422:	230a      	movs	r3, #10
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	230f      	movs	r3, #15
 8001428:	4823      	ldr	r0, [pc, #140]	@ (80014b8 <set_dac+0xe4>)
 800142a:	f001 f80a 	bl	8002442 <HAL_CORDIC_CalculateZO>
	  for (int i= 0 ; i < length; ++i)
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001434:	e028      	b.n	8001488 <set_dac+0xb4>
	  {
		  hsdac_buffer[i] = (temp2[i] + (1<< 31))>>21;
 8001436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	33a8      	adds	r3, #168	@ 0xa8
 800143e:	443b      	add	r3, r7
 8001440:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8001444:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001448:	0d5b      	lsrs	r3, r3, #21
 800144a:	b29a      	uxth	r2, r3
 800144c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	33a8      	adds	r3, #168	@ 0xa8
 8001454:	443b      	add	r3, r7
 8001456:	f823 2ca0 	strh.w	r2, [r3, #-160]
		  hsdac_buffer[i] += offset;
 800145a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	33a8      	adds	r3, #168	@ 0xa8
 8001462:	443b      	add	r3, r7
 8001464:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b29a      	uxth	r2, r3
 8001470:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	33a8      	adds	r3, #168	@ 0xa8
 8001478:	443b      	add	r3, r7
 800147a:	f823 2ca0 	strh.w	r2, [r3, #-160]
	  for (int i= 0 ; i < length; ++i)
 800147e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001482:	3301      	adds	r3, #1
 8001484:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800148c:	2b0e      	cmp	r3, #14
 800148e:	ddd2      	ble.n	8001436 <set_dac+0x62>
	  }
	  HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, hsdac_buffer, length / 2, DAC_ALIGN_12B_R);
 8001490:	f107 0208 	add.w	r2, r7, #8
 8001494:	2300      	movs	r3, #0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2307      	movs	r3, #7
 800149a:	2100      	movs	r1, #0
 800149c:	4807      	ldr	r0, [pc, #28]	@ (80014bc <set_dac+0xe8>)
 800149e:	f001 fabb 	bl	8002a18 <HAL_DAC_Start_DMA>
//	  }
//	  uint16_t dither[10] = {4,4,4,4,5,4,4,4,4,5};
//	  HAL_TIM_Base_Start_DMA(&htim15 ,dither , 1000 );
	  //(&htim15)->Instance->ARR = (uint32_t)(4);
//	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	  HAL_TIM_Base_Start(&htim15);
 80014a2:	4807      	ldr	r0, [pc, #28]	@ (80014c0 <set_dac+0xec>)
 80014a4:	f004 fc72 	bl	8005d8c <HAL_TIM_Base_Start>
	  HAL_OPAMP_Start(&hopamp1);
 80014a8:	4806      	ldr	r0, [pc, #24]	@ (80014c4 <set_dac+0xf0>)
 80014aa:	f002 ffeb 	bl	8004484 <HAL_OPAMP_Start>
}
 80014ae:	bf00      	nop
 80014b0:	37a8      	adds	r7, #168	@ 0xa8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bdb0      	pop	{r4, r5, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000028 	.word	0x20000028
 80014bc:	20000088 	.word	0x20000088
 80014c0:	2000023c 	.word	0x2000023c
 80014c4:	20000150 	.word	0x20000150

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f000 ff16 	bl	80022fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 f82d 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f000 fb57 	bl	8001b88 <MX_GPIO_Init>
  MX_DMA_Init();
 80014da:	f000 fb1f 	bl	8001b1c <MX_DMA_Init>
  MX_CRC_Init();
 80014de:	f000 f88d 	bl	80015fc <MX_CRC_Init>
  MX_USART2_UART_Init();
 80014e2:	f000 facf 	bl	8001a84 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014e6:	f000 f9cd 	bl	8001884 <MX_TIM1_Init>
  MX_I2C1_Init();
 80014ea:	f000 f927 	bl	800173c <MX_I2C1_Init>
  MX_SPI3_Init();
 80014ee:	f000 f98b 	bl	8001808 <MX_SPI3_Init>
  MX_DAC3_Init();
 80014f2:	f000 f8e9 	bl	80016c8 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 80014f6:	f000 f961 	bl	80017bc <MX_OPAMP1_Init>
  MX_TIM15_Init();
 80014fa:	f000 fa73 	bl	80019e4 <MX_TIM15_Init>
  MX_CORDIC_Init();
 80014fe:	f000 f869 	bl	80015d4 <MX_CORDIC_Init>
  MX_DAC2_Init();
 8001502:	f000 f8a7 	bl	8001654 <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t data[9] = {0};
  //HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
  //HAL_DAC_SetValue(&hdac2, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4000);
  pll_freq(40,10);
 8001506:	210a      	movs	r1, #10
 8001508:	2028      	movs	r0, #40	@ 0x28
 800150a:	f7ff febf 	bl	800128c <pll_freq>
  set_freq(send_data, 1000000, 1);
 800150e:	2301      	movs	r3, #1
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <main+0x60>)
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	4804      	ldr	r0, [pc, #16]	@ (800152c <main+0x64>)
 800151a:	f7ff fcc5 	bl	8000ea8 <set_freq>
  set_dac(512);
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff ff58 	bl	80013d4 <set_dac>
//  HAL_OPAMP_Start(&hopamp1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <main+0x5c>
 8001528:	000f4240 	.word	0x000f4240
 800152c:	08000fc9 	.word	0x08000fc9

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	@ 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0318 	add.w	r3, r7, #24
 800153a:	2238      	movs	r2, #56	@ 0x38
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f006 ff72 	bl	8008428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001552:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001556:	f002 ffc7 	bl	80044e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800155e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001562:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001564:	2302      	movs	r3, #2
 8001566:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001568:	2303      	movs	r3, #3
 800156a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 800156c:	2305      	movs	r3, #5
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001570:	233c      	movs	r3, #60	@ 0x3c
 8001572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001574:	2302      	movs	r3, #2
 8001576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800157c:	2302      	movs	r3, #2
 800157e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001580:	f107 0318 	add.w	r3, r7, #24
 8001584:	4618      	mov	r0, r3
 8001586:	f003 f863 	bl	8004650 <HAL_RCC_OscConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001590:	f000 fb64 	bl	8001c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001594:	230f      	movs	r3, #15
 8001596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001598:	2303      	movs	r3, #3
 800159a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2104      	movs	r1, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fb61 	bl	8004c74 <HAL_RCC_ClockConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015b8:	f000 fb50 	bl	8001c5c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80015bc:	2200      	movs	r2, #0
 80015be:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80015c2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015c6:	f003 fc91 	bl	8004eec <HAL_RCC_MCOConfig>
}
 80015ca:	bf00      	nop
 80015cc:	3750      	adds	r7, #80	@ 0x50
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_CORDIC_Init+0x20>)
 80015da:	4a07      	ldr	r2, [pc, #28]	@ (80015f8 <MX_CORDIC_Init+0x24>)
 80015dc:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_CORDIC_Init+0x20>)
 80015e0:	f000 fefe 	bl	80023e0 <HAL_CORDIC_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80015ea:	f000 fb37 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000028 	.word	0x20000028
 80015f8:	40020c00 	.word	0x40020c00

080015fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <MX_CRC_Init+0x50>)
 8001602:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <MX_CRC_Init+0x54>)
 8001604:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_CRC_Init+0x50>)
 8001608:	2201      	movs	r2, #1
 800160a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_CRC_Init+0x50>)
 800160e:	2201      	movs	r2, #1
 8001610:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_CRC_Init+0x50>)
 8001614:	f241 0221 	movw	r2, #4129	@ 0x1021
 8001618:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_CRC_Init+0x50>)
 800161c:	2208      	movs	r2, #8
 800161e:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <MX_CRC_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_CRC_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <MX_CRC_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_CRC_Init+0x50>)
 8001634:	2201      	movs	r2, #1
 8001636:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	@ (800164c <MX_CRC_Init+0x50>)
 800163a:	f001 f8d9 	bl	80027f0 <HAL_CRC_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8001644:	f000 fb0a 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000050 	.word	0x20000050
 8001650:	40023000 	.word	0x40023000

08001654 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	@ 0x30
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800165a:	463b      	mov	r3, r7
 800165c:	2230      	movs	r2, #48	@ 0x30
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f006 fee1 	bl	8008428 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <MX_DAC2_Init+0x6c>)
 8001668:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <MX_DAC2_Init+0x70>)
 800166a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800166c:	4814      	ldr	r0, [pc, #80]	@ (80016c0 <MX_DAC2_Init+0x6c>)
 800166e:	f001 f9b1 	bl	80029d4 <HAL_DAC_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001678:	f000 faf0 	bl	8001c5c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800167c:	2302      	movs	r3, #2
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4806      	ldr	r0, [pc, #24]	@ (80016c0 <MX_DAC2_Init+0x6c>)
 80016a8:	f001 faa8 	bl	8002bfc <HAL_DAC_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80016b2:	f000 fad3 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3730      	adds	r7, #48	@ 0x30
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000074 	.word	0x20000074
 80016c4:	50000c00 	.word	0x50000c00

080016c8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016ce:	463b      	mov	r3, r7
 80016d0:	2230      	movs	r2, #48	@ 0x30
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f006 fea7 	bl	8008428 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_DAC3_Init+0x6c>)
 80016dc:	4a16      	ldr	r2, [pc, #88]	@ (8001738 <MX_DAC3_Init+0x70>)
 80016de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80016e0:	4814      	ldr	r0, [pc, #80]	@ (8001734 <MX_DAC3_Init+0x6c>)
 80016e2:	f001 f977 	bl	80029d4 <HAL_DAC_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80016ec:	f000 fab6 	bl	8001c5c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80016f0:	2302      	movs	r3, #2
 80016f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = ENABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 8001700:	230e      	movs	r3, #14
 8001702:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001708:	2302      	movs	r3, #2
 800170a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	@ (8001734 <MX_DAC3_Init+0x6c>)
 800171c:	f001 fa6e 	bl	8002bfc <HAL_DAC_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8001726:	f000 fa99 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3730      	adds	r7, #48	@ 0x30
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000088 	.word	0x20000088
 8001738:	50001000 	.word	0x50001000

0800173c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_I2C1_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30D293D6;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <MX_I2C1_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001778:	f002 f94e 	bl	8003a18 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 fa6b 	bl	8001c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800178a:	f002 fd13 	bl	80041b4 <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 fa62 	bl	8001c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800179c:	f002 fd55 	bl	800424a <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fa59 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000fc 	.word	0x200000fc
 80017b4:	40005400 	.word	0x40005400
 80017b8:	30d293d6 	.word	0x30d293d6

080017bc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <MX_OPAMP1_Init+0x44>)
 80017c2:	4a10      	ldr	r2, [pc, #64]	@ (8001804 <MX_OPAMP1_Init+0x48>)
 80017c4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_OPAMP1_Init+0x44>)
 80017c8:	2280      	movs	r2, #128	@ 0x80
 80017ca:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <MX_OPAMP1_Init+0x44>)
 80017ce:	2260      	movs	r2, #96	@ 0x60
 80017d0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <MX_OPAMP1_Init+0x44>)
 80017d4:	220c      	movs	r2, #12
 80017d6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <MX_OPAMP1_Init+0x44>)
 80017da:	2200      	movs	r2, #0
 80017dc:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <MX_OPAMP1_Init+0x44>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <MX_OPAMP1_Init+0x44>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_OPAMP1_Init+0x44>)
 80017ec:	f002 fd7a 	bl	80042e4 <HAL_OPAMP_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 80017f6:	f000 fa31 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000150 	.word	0x20000150
 8001804:	40010300 	.word	0x40010300

08001808 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800180c:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <MX_SPI3_Init+0x74>)
 800180e:	4a1c      	ldr	r2, [pc, #112]	@ (8001880 <MX_SPI3_Init+0x78>)
 8001810:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <MX_SPI3_Init+0x74>)
 8001814:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001818:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <MX_SPI3_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <MX_SPI3_Init+0x74>)
 8001822:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001826:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001828:	4b14      	ldr	r3, [pc, #80]	@ (800187c <MX_SPI3_Init+0x74>)
 800182a:	2202      	movs	r2, #2
 800182c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <MX_SPI3_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <MX_SPI3_Init+0x74>)
 8001836:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800183a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800183c:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <MX_SPI3_Init+0x74>)
 800183e:	2218      	movs	r2, #24
 8001840:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <MX_SPI3_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <MX_SPI3_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <MX_SPI3_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001854:	4b09      	ldr	r3, [pc, #36]	@ (800187c <MX_SPI3_Init+0x74>)
 8001856:	2207      	movs	r2, #7
 8001858:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800185a:	4b08      	ldr	r3, [pc, #32]	@ (800187c <MX_SPI3_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <MX_SPI3_Init+0x74>)
 8001862:	2208      	movs	r2, #8
 8001864:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	@ (800187c <MX_SPI3_Init+0x74>)
 8001868:	f003 feb4 	bl	80055d4 <HAL_SPI_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001872:	f000 f9f3 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000018c 	.word	0x2000018c
 8001880:	40003c00 	.word	0x40003c00

08001884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b09c      	sub	sp, #112	@ 0x70
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	615a      	str	r2, [r3, #20]
 80018b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	2234      	movs	r2, #52	@ 0x34
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f006 fdb2 	bl	8008428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018c4:	4b45      	ldr	r3, [pc, #276]	@ (80019dc <MX_TIM1_Init+0x158>)
 80018c6:	4a46      	ldr	r2, [pc, #280]	@ (80019e0 <MX_TIM1_Init+0x15c>)
 80018c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018ca:	4b44      	ldr	r3, [pc, #272]	@ (80019dc <MX_TIM1_Init+0x158>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b42      	ldr	r3, [pc, #264]	@ (80019dc <MX_TIM1_Init+0x158>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 80018d6:	4b41      	ldr	r3, [pc, #260]	@ (80019dc <MX_TIM1_Init+0x158>)
 80018d8:	2218      	movs	r2, #24
 80018da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018dc:	4b3f      	ldr	r3, [pc, #252]	@ (80019dc <MX_TIM1_Init+0x158>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018e2:	4b3e      	ldr	r3, [pc, #248]	@ (80019dc <MX_TIM1_Init+0x158>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b3c      	ldr	r3, [pc, #240]	@ (80019dc <MX_TIM1_Init+0x158>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ee:	483b      	ldr	r0, [pc, #236]	@ (80019dc <MX_TIM1_Init+0x158>)
 80018f0:	f004 f9f4 	bl	8005cdc <HAL_TIM_Base_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018fa:	f000 f9af 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001902:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001904:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001908:	4619      	mov	r1, r3
 800190a:	4834      	ldr	r0, [pc, #208]	@ (80019dc <MX_TIM1_Init+0x158>)
 800190c:	f004 fc24 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001916:	f000 f9a1 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800191a:	4830      	ldr	r0, [pc, #192]	@ (80019dc <MX_TIM1_Init+0x158>)
 800191c:	f004 faa6 	bl	8005e6c <HAL_TIM_PWM_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001926:	f000 f999 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001936:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800193a:	4619      	mov	r1, r3
 800193c:	4827      	ldr	r0, [pc, #156]	@ (80019dc <MX_TIM1_Init+0x158>)
 800193e:	f005 f99b 	bl	8006c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001948:	f000 f988 	bl	8001c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194c:	2360      	movs	r3, #96	@ 0x60
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001954:	2300      	movs	r3, #0
 8001956:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001958:	2300      	movs	r3, #0
 800195a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001968:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	481a      	ldr	r0, [pc, #104]	@ (80019dc <MX_TIM1_Init+0x158>)
 8001972:	f004 fadd 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800197c:	f000 f96e 	bl	8001c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001998:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4807      	ldr	r0, [pc, #28]	@ (80019dc <MX_TIM1_Init+0x158>)
 80019be:	f005 f9f1 	bl	8006da4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80019c8:	f000 f948 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019cc:	4803      	ldr	r0, [pc, #12]	@ (80019dc <MX_TIM1_Init+0x158>)
 80019ce:	f000 fb51 	bl	8002074 <HAL_TIM_MspPostInit>

}
 80019d2:	bf00      	nop
 80019d4:	3770      	adds	r7, #112	@ 0x70
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200001f0 	.word	0x200001f0
 80019e0:	40012c00 	.word	0x40012c00

080019e4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a04:	4a1e      	ldr	r2, [pc, #120]	@ (8001a80 <MX_TIM15_Init+0x9c>)
 8001a06:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a16:	2204      	movs	r2, #4
 8001a18:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a20:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a2c:	4813      	ldr	r0, [pc, #76]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a2e:	f004 f955 	bl	8005cdc <HAL_TIM_Base_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001a38:	f000 f910 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a4a:	f004 fb85 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001a54:	f000 f902 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <MX_TIM15_Init+0x98>)
 8001a66:	f005 f907 	bl	8006c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001a70:	f000 f8f4 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000023c 	.word	0x2000023c
 8001a80:	40014000 	.word	0x40014000

08001a84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a88:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001a8a:	4a23      	ldr	r2, [pc, #140]	@ (8001b18 <MX_USART2_UART_Init+0x94>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001acc:	4811      	ldr	r0, [pc, #68]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ace:	f005 f9fd 	bl	8006ecc <HAL_UART_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ad8:	f000 f8c0 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001adc:	2100      	movs	r1, #0
 8001ade:	480d      	ldr	r0, [pc, #52]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001ae0:	f006 fb59 	bl	8008196 <HAL_UARTEx_SetTxFifoThreshold>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001aea:	f000 f8b7 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aee:	2100      	movs	r1, #0
 8001af0:	4808      	ldr	r0, [pc, #32]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001af2:	f006 fb8e 	bl	8008212 <HAL_UARTEx_SetRxFifoThreshold>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001afc:	f000 f8ae 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <MX_USART2_UART_Init+0x90>)
 8001b02:	f006 fb0f 	bl	8008124 <HAL_UARTEx_DisableFifoMode>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b0c:	f000 f8a6 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000288 	.word	0x20000288
 8001b18:	40004400 	.word	0x40004400

08001b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <MX_DMA_Init+0x68>)
 8001b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b26:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <MX_DMA_Init+0x68>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <MX_DMA_Init+0x68>)
 8001b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b3a:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <MX_DMA_Init+0x68>)
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3e:	4a11      	ldr	r2, [pc, #68]	@ (8001b84 <MX_DMA_Init+0x68>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <MX_DMA_Init+0x68>)
 8001b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b52:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <MX_DMA_Init+0x68>)
 8001b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b56:	4a0b      	ldr	r2, [pc, #44]	@ (8001b84 <MX_DMA_Init+0x68>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <MX_DMA_Init+0x68>)
 8001b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2063      	movs	r0, #99	@ 0x63
 8001b70:	f000 fe09 	bl	8002786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8001b74:	2063      	movs	r0, #99	@ 0x63
 8001b76:	f000 fe20 	bl	80027ba <HAL_NVIC_EnableIRQ>

}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000

08001b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001baa:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	4a27      	ldr	r2, [pc, #156]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc2:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	4a21      	ldr	r2, [pc, #132]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bda:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <MX_GPIO_Init+0xd0>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c08:	f001 feee 	bl	80039e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2c:	f001 fd5a 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4c:	f001 fd4a 	bl	80036e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	@ 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <Error_Handler+0x8>

08001c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_MspInit+0x44>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_MspInit+0x44>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_MspInit+0x44>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_MspInit+0x44>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	4a08      	ldr	r2, [pc, #32]	@ (8001cac <HAL_MspInit+0x44>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_MspInit+0x44>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c9e:	f002 fcc7 	bl	8004630 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <HAL_CORDIC_MspInit+0x38>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10b      	bne.n	8001cda <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_CORDIC_MspInit+0x3c>)
 8001cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc6:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <HAL_CORDIC_MspInit+0x3c>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <HAL_CORDIC_MspInit+0x3c>)
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40020c00 	.word	0x40020c00
 8001cec:	40021000 	.word	0x40021000

08001cf0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <HAL_CRC_MspInit+0x38>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10b      	bne.n	8001d1a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_CRC_MspInit+0x3c>)
 8001d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d06:	4a09      	ldr	r2, [pc, #36]	@ (8001d2c <HAL_CRC_MspInit+0x3c>)
 8001d08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <HAL_CRC_MspInit+0x3c>)
 8001d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023000 	.word	0x40023000
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a34      	ldr	r2, [pc, #208]	@ (8001e20 <HAL_DAC_MspInit+0xf0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d125      	bne.n	8001d9e <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001d52:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <HAL_DAC_MspInit+0xf4>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	4a33      	ldr	r2, [pc, #204]	@ (8001e24 <HAL_DAC_MspInit+0xf4>)
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5e:	4b31      	ldr	r3, [pc, #196]	@ (8001e24 <HAL_DAC_MspInit+0xf4>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <HAL_DAC_MspInit+0xf4>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e24 <HAL_DAC_MspInit+0xf4>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b2b      	ldr	r3, [pc, #172]	@ (8001e24 <HAL_DAC_MspInit+0xf4>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d82:	2340      	movs	r3, #64	@ 0x40
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d86:	2303      	movs	r3, #3
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d98:	f001 fca4 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001d9c:	e03b      	b.n	8001e16 <HAL_DAC_MspInit+0xe6>
  else if(hdac->Instance==DAC3)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a21      	ldr	r2, [pc, #132]	@ (8001e28 <HAL_DAC_MspInit+0xf8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d136      	bne.n	8001e16 <HAL_DAC_MspInit+0xe6>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001da8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <HAL_DAC_MspInit+0xf4>)
 8001daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dac:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <HAL_DAC_MspInit+0xf4>)
 8001dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <HAL_DAC_MspInit+0xf4>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e30 <HAL_DAC_MspInit+0x100>)
 8001dc4:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001dc8:	2266      	movs	r2, #102	@ 0x66
 8001dca:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001dce:	2210      	movs	r2, #16
 8001dd0:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001dda:	2280      	movs	r2, #128	@ 0x80
 8001ddc:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dde:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001de8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dec:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8001dee:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001df0:	2220      	movs	r2, #32
 8001df2:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8001dfa:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001dfc:	f001 f940 	bl	8003080 <HAL_DMA_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_DAC_MspInit+0xda>
      Error_Handler();
 8001e06:	f7ff ff29 	bl	8001c5c <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	4a06      	ldr	r2, [pc, #24]	@ (8001e2c <HAL_DAC_MspInit+0xfc>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	@ 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	50000c00 	.word	0x50000c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	50001000 	.word	0x50001000
 8001e2c:	2000009c 	.word	0x2000009c
 8001e30:	40020008 	.word	0x40020008

08001e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0a0      	sub	sp, #128	@ 0x80
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	2254      	movs	r2, #84	@ 0x54
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f006 fae7 	bl	8008428 <memset>
  if(hi2c->Instance==I2C1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f14 <HAL_I2C_MspInit+0xe0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d153      	bne.n	8001f0c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e64:	2340      	movs	r3, #64	@ 0x40
 8001e66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6c:	f107 0318 	add.w	r3, r7, #24
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 f961 	bl	8005138 <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e7c:	f7ff feee 	bl	8001c5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <HAL_I2C_MspInit+0xe4>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e84:	4a24      	ldr	r2, [pc, #144]	@ (8001f18 <HAL_I2C_MspInit+0xe4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8c:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <HAL_I2C_MspInit+0xe4>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <HAL_I2C_MspInit+0xe4>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001f18 <HAL_I2C_MspInit+0xe4>)
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <HAL_I2C_MspInit+0xe4>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb6:	2312      	movs	r3, #18
 8001eb8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ed0:	f001 fc08 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed8:	2312      	movs	r3, #18
 8001eda:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001eec:	4619      	mov	r1, r3
 8001eee:	480b      	ldr	r0, [pc, #44]	@ (8001f1c <HAL_I2C_MspInit+0xe8>)
 8001ef0:	f001 fbf8 	bl	80036e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <HAL_I2C_MspInit+0xe4>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <HAL_I2C_MspInit+0xe4>)
 8001efa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_I2C_MspInit+0xe4>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3780      	adds	r7, #128	@ 0x80
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40005400 	.word	0x40005400
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	48000400 	.word	0x48000400

08001f20 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f7c <HAL_OPAMP_MspInit+0x5c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d118      	bne.n	8001f74 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_OPAMP_MspInit+0x60>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	4a0e      	ldr	r2, [pc, #56]	@ (8001f80 <HAL_OPAMP_MspInit+0x60>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <HAL_OPAMP_MspInit+0x60>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f70:	f001 fbb8 	bl	80036e4 <HAL_GPIO_Init>

  /* USER CODE END OPAMP1_MspInit 1 */

  }

}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40010300 	.word	0x40010300
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <HAL_SPI_MspInit+0x7c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d128      	bne.n	8001ff8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fa6:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <HAL_SPI_MspInit+0x80>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	4a16      	ldr	r2, [pc, #88]	@ (8002004 <HAL_SPI_MspInit+0x80>)
 8001fac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb2:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <HAL_SPI_MspInit+0x80>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_SPI_MspInit+0x80>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	4a10      	ldr	r2, [pc, #64]	@ (8002004 <HAL_SPI_MspInit+0x80>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_SPI_MspInit+0x80>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001fd6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fe8:	2306      	movs	r3, #6
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <HAL_SPI_MspInit+0x84>)
 8001ff4:	f001 fb76 	bl	80036e4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	@ 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40003c00 	.word	0x40003c00
 8002004:	40021000 	.word	0x40021000
 8002008:	48000800 	.word	0x48000800

0800200c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a13      	ldr	r2, [pc, #76]	@ (8002068 <HAL_TIM_Base_MspInit+0x5c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10c      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800201e:	4b13      	ldr	r3, [pc, #76]	@ (800206c <HAL_TIM_Base_MspInit+0x60>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002022:	4a12      	ldr	r2, [pc, #72]	@ (800206c <HAL_TIM_Base_MspInit+0x60>)
 8002024:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002028:	6613      	str	r3, [r2, #96]	@ 0x60
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_TIM_Base_MspInit+0x60>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002036:	e010      	b.n	800205a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM15)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0c      	ldr	r2, [pc, #48]	@ (8002070 <HAL_TIM_Base_MspInit+0x64>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10b      	bne.n	800205a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_TIM_Base_MspInit+0x60>)
 8002044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002046:	4a09      	ldr	r2, [pc, #36]	@ (800206c <HAL_TIM_Base_MspInit+0x60>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204c:	6613      	str	r3, [r2, #96]	@ 0x60
 800204e:	4b07      	ldr	r3, [pc, #28]	@ (800206c <HAL_TIM_Base_MspInit+0x60>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40021000 	.word	0x40021000
 8002070:	40014000 	.word	0x40014000

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a11      	ldr	r2, [pc, #68]	@ (80020d8 <HAL_TIM_MspPostInit+0x64>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d11b      	bne.n	80020ce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_TIM_MspPostInit+0x68>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_TIM_MspPostInit+0x68>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_TIM_MspPostInit+0x68>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020ae:	2301      	movs	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80020be:	2302      	movs	r3, #2
 80020c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <HAL_TIM_MspPostInit+0x6c>)
 80020ca:	f001 fb0b 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	48000800 	.word	0x48000800

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b09e      	sub	sp, #120	@ 0x78
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	2254      	movs	r2, #84	@ 0x54
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f006 f98f 	bl	8008428 <memset>
  if(huart->Instance==USART2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a37      	ldr	r2, [pc, #220]	@ (80021ec <HAL_UART_MspInit+0x108>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d167      	bne.n	80021e4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002114:	2302      	movs	r3, #2
 8002116:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002118:	2304      	movs	r3, #4
 800211a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	4618      	mov	r0, r3
 8002122:	f003 f809 	bl	8005138 <HAL_RCCEx_PeriphCLKConfig>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800212c:	f7ff fd96 	bl	8001c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002130:	4b2f      	ldr	r3, [pc, #188]	@ (80021f0 <HAL_UART_MspInit+0x10c>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	4a2e      	ldr	r2, [pc, #184]	@ (80021f0 <HAL_UART_MspInit+0x10c>)
 8002136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800213a:	6593      	str	r3, [r2, #88]	@ 0x58
 800213c:	4b2c      	ldr	r3, [pc, #176]	@ (80021f0 <HAL_UART_MspInit+0x10c>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	4b29      	ldr	r3, [pc, #164]	@ (80021f0 <HAL_UART_MspInit+0x10c>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214c:	4a28      	ldr	r2, [pc, #160]	@ (80021f0 <HAL_UART_MspInit+0x10c>)
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002154:	4b26      	ldr	r3, [pc, #152]	@ (80021f0 <HAL_UART_MspInit+0x10c>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002160:	2318      	movs	r3, #24
 8002162:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002170:	2307      	movs	r3, #7
 8002172:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002178:	4619      	mov	r1, r3
 800217a:	481e      	ldr	r0, [pc, #120]	@ (80021f4 <HAL_UART_MspInit+0x110>)
 800217c:	f001 fab2 	bl	80036e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8002180:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 8002182:	4a1e      	ldr	r2, [pc, #120]	@ (80021fc <HAL_UART_MspInit+0x118>)
 8002184:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002186:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 8002188:	221a      	movs	r2, #26
 800218a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002192:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219e:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021aa:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021b6:	4810      	ldr	r0, [pc, #64]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 80021b8:	f000 ff62 	bl	8003080 <HAL_DMA_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80021c2:	f7ff fd4b 	bl	8001c5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a0b      	ldr	r2, [pc, #44]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 80021ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <HAL_UART_MspInit+0x114>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2100      	movs	r1, #0
 80021d8:	2026      	movs	r0, #38	@ 0x26
 80021da:	f000 fad4 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021de:	2026      	movs	r0, #38	@ 0x26
 80021e0:	f000 faeb 	bl	80027ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80021e4:	bf00      	nop
 80021e6:	3778      	adds	r7, #120	@ 0x78
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40004400 	.word	0x40004400
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48000400 	.word	0x48000400
 80021f8:	2000031c 	.word	0x2000031c
 80021fc:	40020494 	.word	0x40020494

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <NMI_Handler+0x4>

08002208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <HardFault_Handler+0x4>

08002210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <MemManage_Handler+0x4>

08002218 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <BusFault_Handler+0x4>

08002220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <UsageFault_Handler+0x4>

08002228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002256:	f000 f8a5 	bl	80023a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002264:	4802      	ldr	r0, [pc, #8]	@ (8002270 <USART2_IRQHandler+0x10>)
 8002266:	f004 fe81 	bl	8006f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000288 	.word	0x20000288

08002274 <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002278:	4802      	ldr	r0, [pc, #8]	@ (8002284 <DMA2_Channel8_IRQHandler+0x10>)
 800227a:	f001 f8e4 	bl	8003446 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000031c 	.word	0x2000031c

08002288 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <SystemInit+0x20>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <SystemInit+0x20>)
 8002294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022ac:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022b0:	f7ff ffea 	bl	8002288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b4:	480c      	ldr	r0, [pc, #48]	@ (80022e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80022b6:	490d      	ldr	r1, [pc, #52]	@ (80022ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80022b8:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <LoopForever+0xe>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022cc:	4c0a      	ldr	r4, [pc, #40]	@ (80022f8 <LoopForever+0x16>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022da:	f006 f8ad 	bl	8008438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022de:	f7ff f8f3 	bl	80014c8 <main>

080022e2 <LoopForever>:

LoopForever:
    b LoopForever
 80022e2:	e7fe      	b.n	80022e2 <LoopForever>
  ldr   r0, =_estack
 80022e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022f0:	080084e8 	.word	0x080084e8
  ldr r2, =_sbss
 80022f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022f8:	20000380 	.word	0x20000380

080022fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022fc:	e7fe      	b.n	80022fc <ADC1_2_IRQHandler>

080022fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002308:	2003      	movs	r0, #3
 800230a:	f000 fa31 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800230e:	200f      	movs	r0, #15
 8002310:	f000 f80e 	bl	8002330 <HAL_InitTick>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	e001      	b.n	8002324 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002320:	f7ff fca2 	bl	8001c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002324:	79fb      	ldrb	r3, [r7, #7]

}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800233c:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <HAL_InitTick+0x68>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d022      	beq.n	800238a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002344:	4b15      	ldr	r3, [pc, #84]	@ (800239c <HAL_InitTick+0x6c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <HAL_InitTick+0x68>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002350:	fbb1 f3f3 	udiv	r3, r1, r3
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fa3c 	bl	80027d6 <HAL_SYSTICK_Config>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10f      	bne.n	8002384 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	d809      	bhi.n	800237e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236a:	2200      	movs	r2, #0
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	f04f 30ff 	mov.w	r0, #4294967295
 8002372:	f000 fa08 	bl	8002786 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <HAL_InitTick+0x70>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e007      	b.n	800238e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	e004      	b.n	800238e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e001      	b.n	800238e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000008 	.word	0x20000008
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004

080023a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_IncTick+0x1c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_IncTick+0x20>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a03      	ldr	r2, [pc, #12]	@ (80023c0 <HAL_IncTick+0x1c>)
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	2000037c 	.word	0x2000037c
 80023c4:	20000008 	.word	0x20000008

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000037c 	.word	0x2000037c

080023e0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e023      	b.n	800243a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fc52 	bl	8001cb0 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_CORDIC_CalculateZO>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_CalculateZO(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                         uint32_t NbCalc, uint32_t Timeout)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b088      	sub	sp, #32
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_CORDIC_CalculateZO+0x28>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_CORDIC_CalculateZO+0x28>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <HAL_CORDIC_CalculateZO+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e053      	b.n	8002522 <HAL_CORDIC_CalculateZO+0xe0>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d146      	bne.n	8002514 <HAL_CORDIC_CalculateZO+0xd2>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8002494:	f7ff ff98 	bl	80023c8 <HAL_GetTick>
 8002498:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f842 	bl	800252a <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	e023      	b.n	80024f6 <HAL_CORDIC_CalculateZO+0xb4>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f838 	bl	800252a <CORDIC_WriteInDataIncrementPtr>

      /* Read output data from Read Data register, and increment output buffer pointer
         The reading is performed in Zero-Overhead mode:
         reading is ordered immediately without waiting result ready flag */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 80024ba:	f107 0310 	add.w	r3, r7, #16
 80024be:	4619      	mov	r1, r3
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f85b 	bl	800257c <CORDIC_ReadOutDataIncrementPtr>

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d010      	beq.n	80024f0 <HAL_CORDIC_CalculateZO+0xae>
      {
        if ((HAL_GetTick() - tickstart) > Timeout)
 80024ce:	f7ff ff7b 	bl	80023c8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024da:	429a      	cmp	r2, r3
 80024dc:	d208      	bcs.n	80024f0 <HAL_CORDIC_CalculateZO+0xae>
        {
          /* Set CORDIC error code */
          hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2204      	movs	r2, #4
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Change the CORDIC state */
          hcordic->State = HAL_CORDIC_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Return function status */
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e018      	b.n	8002522 <HAL_CORDIC_CalculateZO+0xe0>
    for (index = (NbCalc - 1U); index > 0U; index--)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1d8      	bne.n	80024ae <HAL_CORDIC_CalculateZO+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer
       The reading is performed in Zero-Overhead mode:
       reading is ordered immediately without waiting result ready flag */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	4619      	mov	r1, r3
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f83a 	bl	800257c <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e006      	b.n	8002522 <HAL_CORDIC_CalculateZO+0xe0>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	f043 0202 	orr.w	r2, r3, #2
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
  }
}
 8002522:	4618      	mov	r0, r3
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	1d1a      	adds	r2, r3, #4
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002554:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002558:	d10a      	bne.n	8002570 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	1d1a      	adds	r2, r3, #4
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	601a      	str	r2, [r3, #0]
  }
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1d1a      	adds	r2, r3, #4
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025aa:	d10a      	bne.n	80025c2 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	1d1a      	adds	r2, r3, #4
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	601a      	str	r2, [r3, #0]
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	@ (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff40 	bl	8002618 <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff90 	bl	80026c4 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5f 	bl	8002670 <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff33 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa4 	bl	800272c <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e054      	b.n	80028ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	7f5b      	ldrb	r3, [r3, #29]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff fa6c 	bl	8001cf0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10c      	bne.n	8002840 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a22      	ldr	r2, [pc, #136]	@ (80028b4 <HAL_CRC_Init+0xc4>)
 800282c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0218 	bic.w	r2, r2, #24
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	e00c      	b.n	800285a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f834 	bl	80028b8 <HAL_CRCEx_Polynomial_Set>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e028      	b.n	80028ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	795b      	ldrb	r3, [r3, #5]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f04f 32ff 	mov.w	r2, #4294967295
 800286a:	611a      	str	r2, [r3, #16]
 800286c:	e004      	b.n	8002878 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6912      	ldr	r2, [r2, #16]
 8002876:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	04c11db7 	.word	0x04c11db7

080028b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80028c8:	231f      	movs	r3, #31
 80028ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
 80028da:	e063      	b.n	80029a4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80028dc:	bf00      	nop
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	613a      	str	r2, [r7, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <HAL_CRCEx_Polynomial_Set+0x44>
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b18      	cmp	r3, #24
 8002900:	d846      	bhi.n	8002990 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002902:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002908:	08002997 	.word	0x08002997
 800290c:	08002991 	.word	0x08002991
 8002910:	08002991 	.word	0x08002991
 8002914:	08002991 	.word	0x08002991
 8002918:	08002991 	.word	0x08002991
 800291c:	08002991 	.word	0x08002991
 8002920:	08002991 	.word	0x08002991
 8002924:	08002991 	.word	0x08002991
 8002928:	08002985 	.word	0x08002985
 800292c:	08002991 	.word	0x08002991
 8002930:	08002991 	.word	0x08002991
 8002934:	08002991 	.word	0x08002991
 8002938:	08002991 	.word	0x08002991
 800293c:	08002991 	.word	0x08002991
 8002940:	08002991 	.word	0x08002991
 8002944:	08002991 	.word	0x08002991
 8002948:	08002979 	.word	0x08002979
 800294c:	08002991 	.word	0x08002991
 8002950:	08002991 	.word	0x08002991
 8002954:	08002991 	.word	0x08002991
 8002958:	08002991 	.word	0x08002991
 800295c:	08002991 	.word	0x08002991
 8002960:	08002991 	.word	0x08002991
 8002964:	08002991 	.word	0x08002991
 8002968:	0800296d 	.word	0x0800296d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b06      	cmp	r3, #6
 8002970:	d913      	bls.n	800299a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002976:	e010      	b.n	800299a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b07      	cmp	r3, #7
 800297c:	d90f      	bls.n	800299e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002982:	e00c      	b.n	800299e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	d90b      	bls.n	80029a2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800298e:	e008      	b.n	80029a2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
        break;
 8002994:	e006      	b.n	80029a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002996:	bf00      	nop
 8002998:	e004      	b.n	80029a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80029a2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 0118 	bic.w	r1, r3, #24
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e014      	b.n	8002a10 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	791b      	ldrb	r3, [r3, #4]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff f99a 	bl	8001d30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b2      	b.n	8002b96 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	795b      	ldrb	r3, [r3, #5]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_DAC_Start_DMA+0x24>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e0ac      	b.n	8002b96 <HAL_DAC_Start_DMA+0x17e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2202      	movs	r2, #2
 8002a46:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d129      	bne.n	8002aa2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4a53      	ldr	r2, [pc, #332]	@ (8002ba0 <HAL_DAC_Start_DMA+0x188>)
 8002a54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4a52      	ldr	r2, [pc, #328]	@ (8002ba4 <HAL_DAC_Start_DMA+0x18c>)
 8002a5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4a51      	ldr	r2, [pc, #324]	@ (8002ba8 <HAL_DAC_Start_DMA+0x190>)
 8002a64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a74:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_DAC_Start_DMA+0x6c>
 8002a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d005      	beq.n	8002a8e <HAL_DAC_Start_DMA+0x76>
 8002a82:	e009      	b.n	8002a98 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3308      	adds	r3, #8
 8002a8a:	61bb      	str	r3, [r7, #24]
        break;
 8002a8c:	e033      	b.n	8002af6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	61bb      	str	r3, [r7, #24]
        break;
 8002a96:	e02e      	b.n	8002af6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	61bb      	str	r3, [r7, #24]
        break;
 8002aa0:	e029      	b.n	8002af6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4a41      	ldr	r2, [pc, #260]	@ (8002bac <HAL_DAC_Start_DMA+0x194>)
 8002aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	4a40      	ldr	r2, [pc, #256]	@ (8002bb0 <HAL_DAC_Start_DMA+0x198>)
 8002ab0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8002bb4 <HAL_DAC_Start_DMA+0x19c>)
 8002ab8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002ac8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_DAC_Start_DMA+0xc0>
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d005      	beq.n	8002ae2 <HAL_DAC_Start_DMA+0xca>
 8002ad6:	e009      	b.n	8002aec <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	61bb      	str	r3, [r7, #24]
        break;
 8002ae0:	e009      	b.n	8002af6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	61bb      	str	r3, [r7, #24]
        break;
 8002aea:	e004      	b.n	8002af6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	331c      	adds	r3, #28
 8002af2:	61bb      	str	r3, [r7, #24]
        break;
 8002af4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d111      	bne.n	8002b20 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6898      	ldr	r0, [r3, #8]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	f000 fb5b 	bl	80031d0 <HAL_DMA_Start_IT>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e010      	b.n	8002b42 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68d8      	ldr	r0, [r3, #12]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	f000 fb49 	bl	80031d0 <HAL_DMA_Start_IT>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11c      	bne.n	8002b88 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b66:	4b14      	ldr	r3, [pc, #80]	@ (8002bb8 <HAL_DAC_Start_DMA+0x1a0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <HAL_DAC_Start_DMA+0x1a4>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002b78:	e002      	b.n	8002b80 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <HAL_DAC_Start_DMA+0x162>
 8002b86:	e005      	b.n	8002b94 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f043 0204 	orr.w	r2, r3, #4
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002b94:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	08002f6d 	.word	0x08002f6d
 8002ba4:	08002f8f 	.word	0x08002f8f
 8002ba8:	08002fab 	.word	0x08002fab
 8002bac:	08003015 	.word	0x08003015
 8002bb0:	08003037 	.word	0x08003037
 8002bb4:	08003053 	.word	0x08003053
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	053e2d63 	.word	0x053e2d63

08002bc0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	@ 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_DAC_ConfigChannel+0x1c>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e19e      	b.n	8002f5a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	795b      	ldrb	r3, [r3, #5]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_DAC_ConfigChannel+0x2c>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e198      	b.n	8002f5a <HAL_DAC_ConfigChannel+0x35e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2202      	movs	r2, #2
 8002c32:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d17a      	bne.n	8002d32 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c3c:	f7ff fbc4 	bl	80023c8 <HAL_GetTick>
 8002c40:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d13d      	bne.n	8002cc4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c48:	e018      	b.n	8002c7c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c4a:	f7ff fbbd 	bl	80023c8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d911      	bls.n	8002c7c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f043 0208 	orr.w	r2, r3, #8
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2203      	movs	r2, #3
 8002c76:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e16e      	b.n	8002f5a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1df      	bne.n	8002c4a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c92:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c94:	e020      	b.n	8002cd8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c96:	f7ff fb97 	bl	80023c8 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d90f      	bls.n	8002cc4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da0a      	bge.n	8002cc4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f043 0208 	orr.w	r2, r3, #8
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e14a      	b.n	8002f5a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	dbe3      	blt.n	8002c96 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cd6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	ea02 0103 	and.w	r1, r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	21ff      	movs	r1, #255	@ 0xff
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	ea02 0103 	and.w	r1, r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d11d      	bne.n	8002d76 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	221f      	movs	r2, #31
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d52:	4013      	ands	r3, r2
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d74:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2207      	movs	r2, #7
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8e:	4013      	ands	r3, r2
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	e00f      	b.n	8002dc0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d102      	bne.n	8002dae <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002da8:	2301      	movs	r3, #1
 8002daa:	623b      	str	r3, [r7, #32]
 8002dac:	e008      	b.n	8002dc0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002db6:	2301      	movs	r3, #1
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	e001      	b.n	8002dc0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	6a3a      	ldr	r2, [r7, #32]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de2:	4013      	ands	r3, r2
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	791b      	ldrb	r3, [r3, #4]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_DAC_ConfigChannel+0x1f8>
 8002dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002df2:	e000      	b.n	8002df6 <HAL_DAC_ConfigChannel+0x1fa>
 8002df4:	2300      	movs	r3, #0
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e0e:	4013      	ands	r3, r2
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	795b      	ldrb	r3, [r3, #5]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_DAC_ConfigChannel+0x224>
 8002e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e1e:	e000      	b.n	8002e22 <HAL_DAC_ConfigChannel+0x226>
 8002e20:	2300      	movs	r3, #0
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d114      	bne.n	8002e62 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e38:	f002 f900 	bl	800503c <HAL_RCC_GetHCLKFreq>
 8002e3c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4a48      	ldr	r2, [pc, #288]	@ (8002f64 <HAL_DAC_ConfigChannel+0x368>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d904      	bls.n	8002e50 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4e:	e00f      	b.n	8002e70 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4a45      	ldr	r2, [pc, #276]	@ (8002f68 <HAL_DAC_ConfigChannel+0x36c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d90a      	bls.n	8002e6e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e60:	e006      	b.n	8002e70 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6c:	e000      	b.n	8002e70 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002e6e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eda:	4313      	orrs	r3, r2
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	22c0      	movs	r2, #192	@ 0xc0
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	400a      	ands	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	ea02 0103 	and.w	r1, r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3728      	adds	r7, #40	@ 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	09896800 	.word	0x09896800
 8002f68:	04c4b400 	.word	0x04c4b400

08002f6c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff fe20 	bl	8002bc0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	711a      	strb	r2, [r3, #4]
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff fe19 	bl	8002bd4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f043 0204 	orr.w	r2, r3, #4
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fe0f 	bl	8002be8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	711a      	strb	r2, [r3, #4]
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff ffd8 	bl	8002fd8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	711a      	strb	r2, [r3, #4]
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff ffd1 	bl	8002fec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff ffc7 	bl	8003000 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	711a      	strb	r2, [r3, #4]
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e08d      	b.n	80031ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <HAL_DMA_Init+0x138>)
 800309a:	429a      	cmp	r2, r3
 800309c:	d80f      	bhi.n	80030be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b45      	ldr	r3, [pc, #276]	@ (80031bc <HAL_DMA_Init+0x13c>)
 80030a6:	4413      	add	r3, r2
 80030a8:	4a45      	ldr	r2, [pc, #276]	@ (80031c0 <HAL_DMA_Init+0x140>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	009a      	lsls	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a42      	ldr	r2, [pc, #264]	@ (80031c4 <HAL_DMA_Init+0x144>)
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80030bc:	e00e      	b.n	80030dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	4b40      	ldr	r3, [pc, #256]	@ (80031c8 <HAL_DMA_Init+0x148>)
 80030c6:	4413      	add	r3, r2
 80030c8:	4a3d      	ldr	r2, [pc, #244]	@ (80031c0 <HAL_DMA_Init+0x140>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	009a      	lsls	r2, r3, #2
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a3c      	ldr	r2, [pc, #240]	@ (80031cc <HAL_DMA_Init+0x14c>)
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80030f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa76 	bl	8003620 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800313c:	d102      	bne.n	8003144 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003158:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_DMA_Init+0x104>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d80c      	bhi.n	8003184 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa96 	bl	800369c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	e008      	b.n	8003196 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40020407 	.word	0x40020407
 80031bc:	bffdfff8 	.word	0xbffdfff8
 80031c0:	cccccccd 	.word	0xcccccccd
 80031c4:	40020000 	.word	0x40020000
 80031c8:	bffdfbf8 	.word	0xbffdfbf8
 80031cc:	40020400 	.word	0x40020400

080031d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_DMA_Start_IT+0x20>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e066      	b.n	80032be <HAL_DMA_Start_IT+0xee>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d155      	bne.n	80032b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f9bb 	bl	80035a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 020e 	orr.w	r2, r2, #14
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e00f      	b.n	8003268 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 020a 	orr.w	r2, r2, #10
 8003266:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003284:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800329c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e005      	b.n	80032bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
 80032ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d005      	beq.n	80032ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2204      	movs	r2, #4
 80032e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	e037      	b.n	800335a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 020e 	bic.w	r2, r2, #14
 80032f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003308:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331e:	f003 021f 	and.w	r2, r3, #31
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f202 	lsl.w	r2, r1, r2
 800332c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003336:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00c      	beq.n	800335a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800334e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003358:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d00d      	beq.n	80033ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2204      	movs	r2, #4
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e047      	b.n	800343c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 020e 	bic.w	r2, r2, #14
 80033ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	2101      	movs	r1, #1
 80033ea:	fa01 f202 	lsl.w	r2, r1, r2
 80033ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003410:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800341a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
    }
  }
  return status;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2204      	movs	r2, #4
 8003468:	409a      	lsls	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d026      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x7a>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d021      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d107      	bne.n	800349a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0204 	bic.w	r2, r2, #4
 8003498:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2104      	movs	r1, #4
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d071      	beq.n	800359a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034be:	e06c      	b.n	800359a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2202      	movs	r2, #2
 80034ca:	409a      	lsls	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02e      	beq.n	8003532 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d029      	beq.n	8003532 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 020a 	bic.w	r2, r2, #10
 80034fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	2102      	movs	r1, #2
 8003512:	fa01 f202 	lsl.w	r2, r1, r2
 8003516:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d038      	beq.n	800359a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003530:	e033      	b.n	800359a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2208      	movs	r2, #8
 800353c:	409a      	lsls	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d02a      	beq.n	800359c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d025      	beq.n	800359c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 020e 	bic.w	r2, r2, #14
 800355e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800359a:	bf00      	nop
 800359c:	bf00      	nop
}
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d2:	f003 021f 	and.w	r2, r3, #31
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d108      	bne.n	8003604 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003602:	e007      	b.n	8003614 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4b16      	ldr	r3, [pc, #88]	@ (8003688 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003630:	429a      	cmp	r2, r3
 8003632:	d802      	bhi.n	800363a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003634:	4b15      	ldr	r3, [pc, #84]	@ (800368c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	e001      	b.n	800363e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800363a:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800363c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3b08      	subs	r3, #8
 800364a:	4a12      	ldr	r2, [pc, #72]	@ (8003694 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	009a      	lsls	r2, r3, #2
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	461a      	mov	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a0b      	ldr	r2, [pc, #44]	@ (8003698 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800366a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2201      	movs	r2, #1
 8003674:	409a      	lsls	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40020407 	.word	0x40020407
 800368c:	40020800 	.word	0x40020800
 8003690:	40020820 	.word	0x40020820
 8003694:	cccccccd 	.word	0xcccccccd
 8003698:	40020880 	.word	0x40020880

0800369c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	461a      	mov	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a08      	ldr	r2, [pc, #32]	@ (80036e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80036be:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2201      	movs	r2, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	1000823f 	.word	0x1000823f
 80036e0:	40020940 	.word	0x40020940

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036f2:	e15a      	b.n	80039aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 814c 	beq.w	80039a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d005      	beq.n	8003724 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003720:	2b02      	cmp	r3, #2
 8003722:	d130      	bne.n	8003786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800375a:	2201      	movs	r2, #1
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f003 0201 	and.w	r2, r3, #1
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b03      	cmp	r3, #3
 8003790:	d017      	beq.n	80037c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d123      	bne.n	8003816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	08da      	lsrs	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3208      	adds	r2, #8
 80037d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	220f      	movs	r2, #15
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	08da      	lsrs	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3208      	adds	r2, #8
 8003810:	6939      	ldr	r1, [r7, #16]
 8003812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4013      	ands	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0203 	and.w	r2, r3, #3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80a6 	beq.w	80039a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003858:	4b5b      	ldr	r3, [pc, #364]	@ (80039c8 <HAL_GPIO_Init+0x2e4>)
 800385a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385c:	4a5a      	ldr	r2, [pc, #360]	@ (80039c8 <HAL_GPIO_Init+0x2e4>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6613      	str	r3, [r2, #96]	@ 0x60
 8003864:	4b58      	ldr	r3, [pc, #352]	@ (80039c8 <HAL_GPIO_Init+0x2e4>)
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003870:	4a56      	ldr	r2, [pc, #344]	@ (80039cc <HAL_GPIO_Init+0x2e8>)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	089b      	lsrs	r3, r3, #2
 8003876:	3302      	adds	r3, #2
 8003878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	220f      	movs	r2, #15
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800389a:	d01f      	beq.n	80038dc <HAL_GPIO_Init+0x1f8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a4c      	ldr	r2, [pc, #304]	@ (80039d0 <HAL_GPIO_Init+0x2ec>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d019      	beq.n	80038d8 <HAL_GPIO_Init+0x1f4>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a4b      	ldr	r2, [pc, #300]	@ (80039d4 <HAL_GPIO_Init+0x2f0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_GPIO_Init+0x1f0>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a4a      	ldr	r2, [pc, #296]	@ (80039d8 <HAL_GPIO_Init+0x2f4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00d      	beq.n	80038d0 <HAL_GPIO_Init+0x1ec>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a49      	ldr	r2, [pc, #292]	@ (80039dc <HAL_GPIO_Init+0x2f8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d007      	beq.n	80038cc <HAL_GPIO_Init+0x1e8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a48      	ldr	r2, [pc, #288]	@ (80039e0 <HAL_GPIO_Init+0x2fc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d101      	bne.n	80038c8 <HAL_GPIO_Init+0x1e4>
 80038c4:	2305      	movs	r3, #5
 80038c6:	e00a      	b.n	80038de <HAL_GPIO_Init+0x1fa>
 80038c8:	2306      	movs	r3, #6
 80038ca:	e008      	b.n	80038de <HAL_GPIO_Init+0x1fa>
 80038cc:	2304      	movs	r3, #4
 80038ce:	e006      	b.n	80038de <HAL_GPIO_Init+0x1fa>
 80038d0:	2303      	movs	r3, #3
 80038d2:	e004      	b.n	80038de <HAL_GPIO_Init+0x1fa>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e002      	b.n	80038de <HAL_GPIO_Init+0x1fa>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <HAL_GPIO_Init+0x1fa>
 80038dc:	2300      	movs	r3, #0
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	f002 0203 	and.w	r2, r2, #3
 80038e4:	0092      	lsls	r2, r2, #2
 80038e6:	4093      	lsls	r3, r2
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038ee:	4937      	ldr	r1, [pc, #220]	@ (80039cc <HAL_GPIO_Init+0x2e8>)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	3302      	adds	r3, #2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038fc:	4b39      	ldr	r3, [pc, #228]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003920:	4a30      	ldr	r2, [pc, #192]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003926:	4b2f      	ldr	r3, [pc, #188]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	43db      	mvns	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800394a:	4a26      	ldr	r2, [pc, #152]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003950:	4b24      	ldr	r3, [pc, #144]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	43db      	mvns	r3, r3
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003974:	4a1b      	ldr	r2, [pc, #108]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800397a:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	43db      	mvns	r3, r3
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800399e:	4a11      	ldr	r2, [pc, #68]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3301      	adds	r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f47f ae9d 	bne.w	80036f4 <HAL_GPIO_Init+0x10>
  }
}
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40010000 	.word	0x40010000
 80039d0:	48000400 	.word	0x48000400
 80039d4:	48000800 	.word	0x48000800
 80039d8:	48000c00 	.word	0x48000c00
 80039dc:	48001000 	.word	0x48001000
 80039e0:	48001400 	.word	0x48001400
 80039e4:	40010400 	.word	0x40010400

080039e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
 80039f4:	4613      	mov	r3, r2
 80039f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039f8:	787b      	ldrb	r3, [r7, #1]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a04:	e002      	b.n	8003a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a06:	887a      	ldrh	r2, [r7, #2]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e08d      	b.n	8003b46 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fe f9f8 	bl	8001e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	@ 0x24
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d107      	bne.n	8003a92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	e006      	b.n	8003aa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d108      	bne.n	8003aba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	e007      	b.n	8003aca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ac8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003adc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69d9      	ldr	r1, [r3, #28]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	817b      	strh	r3, [r7, #10]
 8003b60:	4613      	mov	r3, r2
 8003b62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	f040 80fd 	bne.w	8003d6c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2C_Master_Transmit+0x30>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0f6      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x21e>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b88:	f7fe fc1e 	bl	80023c8 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2319      	movs	r3, #25
 8003b94:	2201      	movs	r2, #1
 8003b96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f914 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0e1      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2221      	movs	r2, #33	@ 0x21
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	893a      	ldrh	r2, [r7, #8]
 8003bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2bff      	cmp	r3, #255	@ 0xff
 8003bda:	d906      	bls.n	8003bea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	22ff      	movs	r2, #255	@ 0xff
 8003be0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003be2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e007      	b.n	8003bfa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003bf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bf8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d024      	beq.n	8003c4c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d78 <HAL_I2C_Master_Transmit+0x228>)
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fa83 	bl	8004150 <I2C_TransferConfig>
 8003c4a:	e066      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	8979      	ldrh	r1, [r7, #10]
 8003c54:	4b48      	ldr	r3, [pc, #288]	@ (8003d78 <HAL_I2C_Master_Transmit+0x228>)
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fa78 	bl	8004150 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c60:	e05b      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	6a39      	ldr	r1, [r7, #32]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f907 	bl	8003e7a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e07b      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d034      	beq.n	8003d1a <HAL_I2C_Master_Transmit+0x1ca>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d130      	bne.n	8003d1a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2180      	movs	r1, #128	@ 0x80
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f880 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e04d      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2bff      	cmp	r3, #255	@ 0xff
 8003cda:	d90e      	bls.n	8003cfa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	22ff      	movs	r2, #255	@ 0xff
 8003ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	8979      	ldrh	r1, [r7, #10]
 8003cea:	2300      	movs	r3, #0
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fa2c 	bl	8004150 <I2C_TransferConfig>
 8003cf8:	e00f      	b.n	8003d1a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	8979      	ldrh	r1, [r7, #10]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fa1b 	bl	8004150 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d19e      	bne.n	8003c62 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	6a39      	ldr	r1, [r7, #32]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f8ed 	bl	8003f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e01a      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d7c <HAL_I2C_Master_Transmit+0x22c>)
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	80002000 	.word	0x80002000
 8003d7c:	fe00e800 	.word	0xfe00e800

08003d80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d103      	bne.n	8003d9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d007      	beq.n	8003dbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	619a      	str	r2, [r3, #24]
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd8:	e03b      	b.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	6839      	ldr	r1, [r7, #0]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f8d6 	bl	8003f90 <I2C_IsErrorOccurred>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e041      	b.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d02d      	beq.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df6:	f7fe fae7 	bl	80023c8 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d122      	bne.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d113      	bne.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f043 0220 	orr.w	r2, r3, #32
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e00f      	b.n	8003e72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d0b4      	beq.n	8003dda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e86:	e033      	b.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f87f 	bl	8003f90 <I2C_IsErrorOccurred>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e031      	b.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d025      	beq.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea4:	f7fe fa90 	bl	80023c8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d302      	bcc.n	8003eba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d11a      	bne.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d013      	beq.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e007      	b.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d1c4      	bne.n	8003e88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f14:	e02f      	b.n	8003f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f838 	bl	8003f90 <I2C_IsErrorOccurred>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e02d      	b.n	8003f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fe fa4d 	bl	80023c8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d11a      	bne.n	8003f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d013      	beq.n	8003f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e007      	b.n	8003f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d1c8      	bne.n	8003f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	@ 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d068      	beq.n	800408e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fc4:	e049      	b.n	800405a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d045      	beq.n	800405a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fce:	f7fe f9fb 	bl	80023c8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <I2C_IsErrorOccurred+0x54>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d13a      	bne.n	800405a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ff6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004006:	d121      	bne.n	800404c <I2C_IsErrorOccurred+0xbc>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800400e:	d01d      	beq.n	800404c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	2b20      	cmp	r3, #32
 8004014:	d01a      	beq.n	800404c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004024:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004026:	f7fe f9cf 	bl	80023c8 <HAL_GetTick>
 800402a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800402c:	e00e      	b.n	800404c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800402e:	f7fe f9cb 	bl	80023c8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b19      	cmp	r3, #25
 800403a:	d907      	bls.n	800404c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f043 0320 	orr.w	r3, r3, #32
 8004042:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800404a:	e006      	b.n	800405a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b20      	cmp	r3, #32
 8004058:	d1e9      	bne.n	800402e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b20      	cmp	r3, #32
 8004066:	d003      	beq.n	8004070 <I2C_IsErrorOccurred+0xe0>
 8004068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0aa      	beq.n	8003fc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2220      	movs	r2, #32
 800407e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00b      	beq.n	80040b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	f043 0308 	orr.w	r3, r3, #8
 80040c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f043 0302 	orr.w	r3, r3, #2
 80040ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01c      	beq.n	800413e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff fe3b 	bl	8003d80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <I2C_IsErrorOccurred+0x1bc>)
 8004116:	400b      	ands	r3, r1
 8004118:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	431a      	orrs	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800413e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004142:	4618      	mov	r0, r3
 8004144:	3728      	adds	r7, #40	@ 0x28
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	fe00e800 	.word	0xfe00e800

08004150 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	817b      	strh	r3, [r7, #10]
 800415e:	4613      	mov	r3, r2
 8004160:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004162:	897b      	ldrh	r3, [r7, #10]
 8004164:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004168:	7a7b      	ldrb	r3, [r7, #9]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004170:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	4313      	orrs	r3, r2
 800417a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800417e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	0d5b      	lsrs	r3, r3, #21
 800418a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800418e:	4b08      	ldr	r3, [pc, #32]	@ (80041b0 <I2C_TransferConfig+0x60>)
 8004190:	430b      	orrs	r3, r1
 8004192:	43db      	mvns	r3, r3
 8004194:	ea02 0103 	and.w	r1, r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	03ff63ff 	.word	0x03ff63ff

080041b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d138      	bne.n	800423c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e032      	b.n	800423e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	@ 0x24
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004206:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e000      	b.n	800423e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b20      	cmp	r3, #32
 800425e:	d139      	bne.n	80042d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800426a:	2302      	movs	r3, #2
 800426c:	e033      	b.n	80042d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2224      	movs	r2, #36	@ 0x24
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800429c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0bb      	b.n	8004472 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b05      	cmp	r3, #5
 8004304:	d101      	bne.n	800430a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0b3      	b.n	8004472 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d101      	bne.n	800431a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e0ab      	b.n	8004472 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431a:	4b58      	ldr	r3, [pc, #352]	@ (800447c <HAL_OPAMP_Init+0x198>)
 800431c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431e:	4a57      	ldr	r2, [pc, #348]	@ (800447c <HAL_OPAMP_Init+0x198>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6613      	str	r3, [r2, #96]	@ 0x60
 8004326:	4b55      	ldr	r3, [pc, #340]	@ (800447c <HAL_OPAMP_Init+0x198>)
 8004328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd fdea 	bl	8001f20 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	d003      	beq.n	800435c <HAL_OPAMP_Init+0x78>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b60      	cmp	r3, #96	@ 0x60
 800435a:	d133      	bne.n	80043c4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 0110 	bic.w	r1, r3, #16
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b41      	ldr	r3, [pc, #260]	@ (8004480 <HAL_OPAMP_Init+0x19c>)
 800437a:	4013      	ands	r3, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6851      	ldr	r1, [r2, #4]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6892      	ldr	r2, [r2, #8]
 8004384:	4311      	orrs	r1, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6912      	ldr	r2, [r2, #16]
 800438a:	430a      	orrs	r2, r1
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	7d09      	ldrb	r1, [r1, #20]
 8004390:	2901      	cmp	r1, #1
 8004392:	d102      	bne.n	800439a <HAL_OPAMP_Init+0xb6>
 8004394:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004398:	e000      	b.n	800439c <HAL_OPAMP_Init+0xb8>
 800439a:	2100      	movs	r1, #0
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80043a8:	4311      	orrs	r1, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043ae:	04d2      	lsls	r2, r2, #19
 80043b0:	4311      	orrs	r1, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043b6:	0612      	lsls	r2, r2, #24
 80043b8:	4311      	orrs	r1, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	430b      	orrs	r3, r1
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e035      	b.n	8004430 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 0110 	bic.w	r1, r3, #16
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b27      	ldr	r3, [pc, #156]	@ (8004480 <HAL_OPAMP_Init+0x19c>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6851      	ldr	r1, [r2, #4]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6892      	ldr	r2, [r2, #8]
 80043ec:	4311      	orrs	r1, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6912      	ldr	r2, [r2, #16]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	7d09      	ldrb	r1, [r1, #20]
 80043fe:	2901      	cmp	r1, #1
 8004400:	d102      	bne.n	8004408 <HAL_OPAMP_Init+0x124>
 8004402:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004406:	e000      	b.n	800440a <HAL_OPAMP_Init+0x126>
 8004408:	2100      	movs	r1, #0
 800440a:	4311      	orrs	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004416:	4311      	orrs	r1, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800441c:	04d2      	lsls	r2, r2, #19
 800441e:	4311      	orrs	r1, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004424:	0612      	lsls	r2, r2, #24
 8004426:	4311      	orrs	r1, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	430b      	orrs	r3, r1
 800442e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	db10      	blt.n	800445c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d103      	bne.n	8004470 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	e0003e11 	.word	0xe0003e11

08004484 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
 800449a:	e01d      	b.n	80044d8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d102      	bne.n	80044ae <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
 80044ac:	e014      	b.n	80044d8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10c      	bne.n	80044d4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2204      	movs	r2, #4
 80044ce:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80044d2:	e001      	b.n	80044d8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d141      	bne.n	800457a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004502:	d131      	bne.n	8004568 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004504:	4b47      	ldr	r3, [pc, #284]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800450a:	4a46      	ldr	r2, [pc, #280]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004514:	4b43      	ldr	r3, [pc, #268]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800451c:	4a41      	ldr	r2, [pc, #260]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004522:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004524:	4b40      	ldr	r3, [pc, #256]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2232      	movs	r2, #50	@ 0x32
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	4a3f      	ldr	r2, [pc, #252]	@ (800462c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	0c9b      	lsrs	r3, r3, #18
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800453a:	e002      	b.n	8004542 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3b01      	subs	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004542:	4b38      	ldr	r3, [pc, #224]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800454e:	d102      	bne.n	8004556 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f2      	bne.n	800453c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004556:	4b33      	ldr	r3, [pc, #204]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004562:	d158      	bne.n	8004616 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e057      	b.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004568:	4b2e      	ldr	r3, [pc, #184]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800456e:	4a2d      	ldr	r2, [pc, #180]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004574:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004578:	e04d      	b.n	8004616 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004580:	d141      	bne.n	8004606 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004582:	4b28      	ldr	r3, [pc, #160]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458e:	d131      	bne.n	80045f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004590:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004596:	4a23      	ldr	r2, [pc, #140]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045a0:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2232      	movs	r2, #50	@ 0x32
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	4a1c      	ldr	r2, [pc, #112]	@ (800462c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	0c9b      	lsrs	r3, r3, #18
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045c6:	e002      	b.n	80045ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ce:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045da:	d102      	bne.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f2      	bne.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045e2:	4b10      	ldr	r3, [pc, #64]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ee:	d112      	bne.n	8004616 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e011      	b.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004600:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004604:	e007      	b.n	8004616 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004606:	4b07      	ldr	r3, [pc, #28]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800460e:	4a05      	ldr	r2, [pc, #20]	@ (8004624 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004610:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004614:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40007000 	.word	0x40007000
 8004628:	20000000 	.word	0x20000000
 800462c:	431bde83 	.word	0x431bde83

08004630 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004634:	4b05      	ldr	r3, [pc, #20]	@ (800464c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a04      	ldr	r2, [pc, #16]	@ (800464c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800463a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800463e:	6093      	str	r3, [r2, #8]
}
 8004640:	bf00      	nop
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40007000 	.word	0x40007000

08004650 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e2fe      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d075      	beq.n	800475a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466e:	4b97      	ldr	r3, [pc, #604]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004678:	4b94      	ldr	r3, [pc, #592]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	d102      	bne.n	800468e <HAL_RCC_OscConfig+0x3e>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d002      	beq.n	8004694 <HAL_RCC_OscConfig+0x44>
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d10b      	bne.n	80046ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	4b8d      	ldr	r3, [pc, #564]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05b      	beq.n	8004758 <HAL_RCC_OscConfig+0x108>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d157      	bne.n	8004758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e2d9      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b4:	d106      	bne.n	80046c4 <HAL_RCC_OscConfig+0x74>
 80046b6:	4b85      	ldr	r3, [pc, #532]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a84      	ldr	r2, [pc, #528]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e01d      	b.n	8004700 <HAL_RCC_OscConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x98>
 80046ce:	4b7f      	ldr	r3, [pc, #508]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a7e      	ldr	r2, [pc, #504]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b7c      	ldr	r3, [pc, #496]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7b      	ldr	r2, [pc, #492]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0xb0>
 80046e8:	4b78      	ldr	r3, [pc, #480]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a77      	ldr	r2, [pc, #476]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b75      	ldr	r3, [pc, #468]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a74      	ldr	r2, [pc, #464]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fd fe5e 	bl	80023c8 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004710:	f7fd fe5a 	bl	80023c8 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	@ 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e29e      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004722:	4b6a      	ldr	r3, [pc, #424]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0xc0>
 800472e:	e014      	b.n	800475a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fd fe4a 	bl	80023c8 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004738:	f7fd fe46 	bl	80023c8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	@ 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e28a      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800474a:	4b60      	ldr	r3, [pc, #384]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0xe8>
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d075      	beq.n	8004852 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004766:	4b59      	ldr	r3, [pc, #356]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004770:	4b56      	ldr	r3, [pc, #344]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b0c      	cmp	r3, #12
 800477e:	d102      	bne.n	8004786 <HAL_RCC_OscConfig+0x136>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d002      	beq.n	800478c <HAL_RCC_OscConfig+0x13c>
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b04      	cmp	r3, #4
 800478a:	d11f      	bne.n	80047cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478c:	4b4f      	ldr	r3, [pc, #316]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x154>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e25d      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a4:	4b49      	ldr	r3, [pc, #292]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	4946      	ldr	r1, [pc, #280]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047b8:	4b45      	ldr	r3, [pc, #276]	@ (80048d0 <HAL_RCC_OscConfig+0x280>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fd fdb7 	bl	8002330 <HAL_InitTick>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d043      	beq.n	8004850 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e249      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d023      	beq.n	800481c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d4:	4b3d      	ldr	r3, [pc, #244]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a3c      	ldr	r2, [pc, #240]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80047da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fd fdf2 	bl	80023c8 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e8:	f7fd fdee 	bl	80023c8 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e232      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047fa:	4b34      	ldr	r3, [pc, #208]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004806:	4b31      	ldr	r3, [pc, #196]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	492d      	ldr	r1, [pc, #180]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
 800481a:	e01a      	b.n	8004852 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481c:	4b2b      	ldr	r3, [pc, #172]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2a      	ldr	r2, [pc, #168]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004822:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd fdce 	bl	80023c8 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004830:	f7fd fdca 	bl	80023c8 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e20e      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004842:	4b22      	ldr	r3, [pc, #136]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x1e0>
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004850:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d041      	beq.n	80048e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01c      	beq.n	80048a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004866:	4b19      	ldr	r3, [pc, #100]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800486c:	4a17      	ldr	r2, [pc, #92]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fd fda7 	bl	80023c8 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800487e:	f7fd fda3 	bl	80023c8 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e1e7      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004890:	4b0e      	ldr	r3, [pc, #56]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 8004892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ef      	beq.n	800487e <HAL_RCC_OscConfig+0x22e>
 800489e:	e020      	b.n	80048e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a0:	4b0a      	ldr	r3, [pc, #40]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80048a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a6:	4a09      	ldr	r2, [pc, #36]	@ (80048cc <HAL_RCC_OscConfig+0x27c>)
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fd fd8a 	bl	80023c8 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b6:	e00d      	b.n	80048d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b8:	f7fd fd86 	bl	80023c8 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d906      	bls.n	80048d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e1ca      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 80048d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ea      	bne.n	80048b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80a6 	beq.w	8004a3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f0:	2300      	movs	r3, #0
 80048f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048f4:	4b84      	ldr	r3, [pc, #528]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_OscConfig+0x2b4>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <HAL_RCC_OscConfig+0x2b6>
 8004904:	2300      	movs	r3, #0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00d      	beq.n	8004926 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004914:	6593      	str	r3, [r2, #88]	@ 0x58
 8004916:	4b7c      	ldr	r3, [pc, #496]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004922:	2301      	movs	r3, #1
 8004924:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004926:	4b79      	ldr	r3, [pc, #484]	@ (8004b0c <HAL_RCC_OscConfig+0x4bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d118      	bne.n	8004964 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004932:	4b76      	ldr	r3, [pc, #472]	@ (8004b0c <HAL_RCC_OscConfig+0x4bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	@ (8004b0c <HAL_RCC_OscConfig+0x4bc>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493e:	f7fd fd43 	bl	80023c8 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004946:	f7fd fd3f 	bl	80023c8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e183      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004958:	4b6c      	ldr	r3, [pc, #432]	@ (8004b0c <HAL_RCC_OscConfig+0x4bc>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d108      	bne.n	800497e <HAL_RCC_OscConfig+0x32e>
 800496c:	4b66      	ldr	r3, [pc, #408]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004972:	4a65      	ldr	r2, [pc, #404]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800497c:	e024      	b.n	80049c8 <HAL_RCC_OscConfig+0x378>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b05      	cmp	r3, #5
 8004984:	d110      	bne.n	80049a8 <HAL_RCC_OscConfig+0x358>
 8004986:	4b60      	ldr	r3, [pc, #384]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498c:	4a5e      	ldr	r2, [pc, #376]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 800498e:	f043 0304 	orr.w	r3, r3, #4
 8004992:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004996:	4b5c      	ldr	r3, [pc, #368]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499c:	4a5a      	ldr	r2, [pc, #360]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049a6:	e00f      	b.n	80049c8 <HAL_RCC_OscConfig+0x378>
 80049a8:	4b57      	ldr	r3, [pc, #348]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ae:	4a56      	ldr	r2, [pc, #344]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049b8:	4b53      	ldr	r3, [pc, #332]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049be:	4a52      	ldr	r2, [pc, #328]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 80049c0:	f023 0304 	bic.w	r3, r3, #4
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d016      	beq.n	80049fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd fcfa 	bl	80023c8 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fd fcf6 	bl	80023c8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e138      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ee:	4b46      	ldr	r3, [pc, #280]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ed      	beq.n	80049d8 <HAL_RCC_OscConfig+0x388>
 80049fc:	e015      	b.n	8004a2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fd fce3 	bl	80023c8 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fd fcdf 	bl	80023c8 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e121      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1ed      	bne.n	8004a06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a2a:	7ffb      	ldrb	r3, [r7, #31]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a30:	4b35      	ldr	r3, [pc, #212]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a34:	4a34      	ldr	r2, [pc, #208]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d03c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01c      	beq.n	8004a8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a50:	4b2d      	ldr	r3, [pc, #180]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a56:	4a2c      	ldr	r2, [pc, #176]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fd fcb2 	bl	80023c8 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a68:	f7fd fcae 	bl	80023c8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e0f2      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a7a:	4b23      	ldr	r3, [pc, #140]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0ef      	beq.n	8004a68 <HAL_RCC_OscConfig+0x418>
 8004a88:	e01b      	b.n	8004ac2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a90:	4a1d      	ldr	r2, [pc, #116]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9a:	f7fd fc95 	bl	80023c8 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aa2:	f7fd fc91 	bl	80023c8 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e0d5      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ab4:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1ef      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 80c9 	beq.w	8004c5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004acc:	4b0e      	ldr	r3, [pc, #56]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	f000 8083 	beq.w	8004be0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d15e      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae2:	4b09      	ldr	r3, [pc, #36]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a08      	ldr	r2, [pc, #32]	@ (8004b08 <HAL_RCC_OscConfig+0x4b8>)
 8004ae8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aee:	f7fd fc6b 	bl	80023c8 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	e00c      	b.n	8004b10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af6:	f7fd fc67 	bl	80023c8 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d905      	bls.n	8004b10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e0ab      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b10:	4b55      	ldr	r3, [pc, #340]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1ec      	bne.n	8004af6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b1c:	4b52      	ldr	r3, [pc, #328]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	4b52      	ldr	r3, [pc, #328]	@ (8004c6c <HAL_RCC_OscConfig+0x61c>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6a11      	ldr	r1, [r2, #32]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b2c:	3a01      	subs	r2, #1
 8004b2e:	0112      	lsls	r2, r2, #4
 8004b30:	4311      	orrs	r1, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b36:	0212      	lsls	r2, r2, #8
 8004b38:	4311      	orrs	r1, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b3e:	0852      	lsrs	r2, r2, #1
 8004b40:	3a01      	subs	r2, #1
 8004b42:	0552      	lsls	r2, r2, #21
 8004b44:	4311      	orrs	r1, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b4a:	0852      	lsrs	r2, r2, #1
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	0652      	lsls	r2, r2, #25
 8004b50:	4311      	orrs	r1, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b56:	06d2      	lsls	r2, r2, #27
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	4943      	ldr	r1, [pc, #268]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b60:	4b41      	ldr	r3, [pc, #260]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a40      	ldr	r2, [pc, #256]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a3d      	ldr	r2, [pc, #244]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fd fc26 	bl	80023c8 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fd fc22 	bl	80023c8 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e066      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b92:	4b35      	ldr	r3, [pc, #212]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x530>
 8004b9e:	e05e      	b.n	8004c5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba0:	4b31      	ldr	r3, [pc, #196]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a30      	ldr	r2, [pc, #192]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fd fc0c 	bl	80023c8 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb4:	f7fd fc08 	bl	80023c8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e04c      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc6:	4b28      	ldr	r3, [pc, #160]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004bd2:	4b25      	ldr	r3, [pc, #148]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	4924      	ldr	r1, [pc, #144]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004bd8:	4b25      	ldr	r3, [pc, #148]	@ (8004c70 <HAL_RCC_OscConfig+0x620>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	60cb      	str	r3, [r1, #12]
 8004bde:	e03e      	b.n	8004c5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e039      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004bec:	4b1e      	ldr	r3, [pc, #120]	@ (8004c68 <HAL_RCC_OscConfig+0x618>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0203 	and.w	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d12c      	bne.n	8004c5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d123      	bne.n	8004c5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d11b      	bne.n	8004c5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d113      	bne.n	8004c5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d109      	bne.n	8004c5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	3b01      	subs	r3, #1
 8004c54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3720      	adds	r7, #32
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	019f800c 	.word	0x019f800c
 8004c70:	feeefffc 	.word	0xfeeefffc

08004c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e11e      	b.n	8004eca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c8c:	4b91      	ldr	r3, [pc, #580]	@ (8004ed4 <HAL_RCC_ClockConfig+0x260>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d910      	bls.n	8004cbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9a:	4b8e      	ldr	r3, [pc, #568]	@ (8004ed4 <HAL_RCC_ClockConfig+0x260>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f023 020f 	bic.w	r2, r3, #15
 8004ca2:	498c      	ldr	r1, [pc, #560]	@ (8004ed4 <HAL_RCC_ClockConfig+0x260>)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004caa:	4b8a      	ldr	r3, [pc, #552]	@ (8004ed4 <HAL_RCC_ClockConfig+0x260>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e106      	b.n	8004eca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d073      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d129      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd0:	4b81      	ldr	r3, [pc, #516]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0f4      	b.n	8004eca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ce0:	f000 f9e4 	bl	80050ac <RCC_GetSysClockFreqFromPLLSource>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4a7c      	ldr	r2, [pc, #496]	@ (8004edc <HAL_RCC_ClockConfig+0x268>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d93f      	bls.n	8004d6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004cee:	4b7a      	ldr	r3, [pc, #488]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d033      	beq.n	8004d6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d12f      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d0e:	4b72      	ldr	r3, [pc, #456]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d16:	4a70      	ldr	r2, [pc, #448]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d1e:	2380      	movs	r3, #128	@ 0x80
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	e024      	b.n	8004d6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0c6      	b.n	8004eca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d3c:	4b66      	ldr	r3, [pc, #408]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0be      	b.n	8004eca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d4c:	f000 f914 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 8004d50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4a61      	ldr	r2, [pc, #388]	@ (8004edc <HAL_RCC_ClockConfig+0x268>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d909      	bls.n	8004d6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d62:	4a5d      	ldr	r2, [pc, #372]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d6a:	2380      	movs	r3, #128	@ 0x80
 8004d6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 0203 	bic.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4957      	ldr	r1, [pc, #348]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d80:	f7fd fb22 	bl	80023c8 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7fd fb1e 	bl	80023c8 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e095      	b.n	8004eca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 020c 	and.w	r2, r3, #12
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d1eb      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d023      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc8:	4b43      	ldr	r3, [pc, #268]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a42      	ldr	r2, [pc, #264]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004dce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004de0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004de8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004dea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df0:	4b39      	ldr	r3, [pc, #228]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4936      	ldr	r1, [pc, #216]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b80      	cmp	r3, #128	@ 0x80
 8004e08:	d105      	bne.n	8004e16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e0a:	4b33      	ldr	r3, [pc, #204]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	4a32      	ldr	r2, [pc, #200]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004e10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e16:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed4 <HAL_RCC_ClockConfig+0x260>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d21d      	bcs.n	8004e60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e24:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed4 <HAL_RCC_ClockConfig+0x260>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 020f 	bic.w	r2, r3, #15
 8004e2c:	4929      	ldr	r1, [pc, #164]	@ (8004ed4 <HAL_RCC_ClockConfig+0x260>)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e34:	f7fd fac8 	bl	80023c8 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3c:	f7fd fac4 	bl	80023c8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e03b      	b.n	8004eca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e52:	4b20      	ldr	r3, [pc, #128]	@ (8004ed4 <HAL_RCC_ClockConfig+0x260>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d1ed      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4917      	ldr	r1, [pc, #92]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d009      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e8a:	4b13      	ldr	r3, [pc, #76]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	490f      	ldr	r1, [pc, #60]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e9e:	f000 f86b 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <HAL_RCC_ClockConfig+0x264>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	490c      	ldr	r1, [pc, #48]	@ (8004ee0 <HAL_RCC_ClockConfig+0x26c>)
 8004eb0:	5ccb      	ldrb	r3, [r1, r3]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee4 <HAL_RCC_ClockConfig+0x270>)
 8004ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <HAL_RCC_ClockConfig+0x274>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fd fa34 	bl	8002330 <HAL_InitTick>
 8004ec8:	4603      	mov	r3, r0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40022000 	.word	0x40022000
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	04c4b400 	.word	0x04c4b400
 8004ee0:	08008498 	.word	0x08008498
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	20000004 	.word	0x20000004

08004eec <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	@ 0x30
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efc:	2303      	movs	r3, #3
 8004efe:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8004f26:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <HAL_RCC_MCOConfig+0x88>)
 8004f28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	4910      	ldr	r1, [pc, #64]	@ (8004f74 <HAL_RCC_MCOConfig+0x88>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	0d1b      	lsrs	r3, r3, #20
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8004f46:	f107 0310 	add.w	r3, r7, #16
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f4e:	f7fe fbc9 	bl	80036e4 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8004f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d109      	bne.n	8004f6c <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8004f58:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <HAL_RCC_MCOConfig+0x88>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	430b      	orrs	r3, r1
 8004f66:	4903      	ldr	r1, [pc, #12]	@ (8004f74 <HAL_RCC_MCOConfig+0x88>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	608b      	str	r3, [r1, #8]
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3730      	adds	r7, #48	@ 0x30
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000

08004f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d102      	bne.n	8004f90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e047      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f90:	4b27      	ldr	r3, [pc, #156]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f9c:	4b26      	ldr	r3, [pc, #152]	@ (8005038 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	e03e      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004fa2:	4b23      	ldr	r3, [pc, #140]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	d136      	bne.n	800501c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fae:	4b20      	ldr	r3, [pc, #128]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d10c      	bne.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8005038 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	4a16      	ldr	r2, [pc, #88]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fd6:	68d2      	ldr	r2, [r2, #12]
 8004fd8:	0a12      	lsrs	r2, r2, #8
 8004fda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	617b      	str	r3, [r7, #20]
      break;
 8004fe4:	e00c      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fe6:	4a13      	ldr	r2, [pc, #76]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fee:	4a10      	ldr	r2, [pc, #64]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ff0:	68d2      	ldr	r2, [r2, #12]
 8004ff2:	0a12      	lsrs	r2, r2, #8
 8004ff4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
      break;
 8004ffe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	0e5b      	lsrs	r3, r3, #25
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	3301      	adds	r3, #1
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	e001      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005020:	693b      	ldr	r3, [r7, #16]
}
 8005022:	4618      	mov	r0, r3
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	00f42400 	.word	0x00f42400
 8005038:	017d7840 	.word	0x017d7840

0800503c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005040:	4b03      	ldr	r3, [pc, #12]	@ (8005050 <HAL_RCC_GetHCLKFreq+0x14>)
 8005042:	681b      	ldr	r3, [r3, #0]
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000000 	.word	0x20000000

08005054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005058:	f7ff fff0 	bl	800503c <HAL_RCC_GetHCLKFreq>
 800505c:	4602      	mov	r2, r0
 800505e:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	4904      	ldr	r1, [pc, #16]	@ (800507c <HAL_RCC_GetPCLK1Freq+0x28>)
 800506a:	5ccb      	ldrb	r3, [r1, r3]
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005074:	4618      	mov	r0, r3
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40021000 	.word	0x40021000
 800507c:	080084a8 	.word	0x080084a8

08005080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005084:	f7ff ffda 	bl	800503c <HAL_RCC_GetHCLKFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0adb      	lsrs	r3, r3, #11
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4904      	ldr	r1, [pc, #16]	@ (80050a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	f003 031f 	and.w	r3, r3, #31
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	080084a8 	.word	0x080084a8

080050ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050b2:	4b1e      	ldr	r3, [pc, #120]	@ (800512c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050bc:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	3301      	adds	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d10c      	bne.n	80050ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050d0:	4a17      	ldr	r2, [pc, #92]	@ (8005130 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	4a14      	ldr	r2, [pc, #80]	@ (800512c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050da:	68d2      	ldr	r2, [r2, #12]
 80050dc:	0a12      	lsrs	r2, r2, #8
 80050de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	617b      	str	r3, [r7, #20]
    break;
 80050e8:	e00c      	b.n	8005104 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ea:	4a12      	ldr	r2, [pc, #72]	@ (8005134 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f2:	4a0e      	ldr	r2, [pc, #56]	@ (800512c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050f4:	68d2      	ldr	r2, [r2, #12]
 80050f6:	0a12      	lsrs	r2, r2, #8
 80050f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
    break;
 8005102:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005104:	4b09      	ldr	r3, [pc, #36]	@ (800512c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	0e5b      	lsrs	r3, r3, #25
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	3301      	adds	r3, #1
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800511e:	687b      	ldr	r3, [r7, #4]
}
 8005120:	4618      	mov	r0, r3
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40021000 	.word	0x40021000
 8005130:	017d7840 	.word	0x017d7840
 8005134:	00f42400 	.word	0x00f42400

08005138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005140:	2300      	movs	r3, #0
 8005142:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005144:	2300      	movs	r3, #0
 8005146:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8098 	beq.w	8005286 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005156:	2300      	movs	r3, #0
 8005158:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800515a:	4b43      	ldr	r3, [pc, #268]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10d      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005166:	4b40      	ldr	r3, [pc, #256]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516a:	4a3f      	ldr	r2, [pc, #252]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005170:	6593      	str	r3, [r2, #88]	@ 0x58
 8005172:	4b3d      	ldr	r3, [pc, #244]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517e:	2301      	movs	r3, #1
 8005180:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005182:	4b3a      	ldr	r3, [pc, #232]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a39      	ldr	r2, [pc, #228]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800518e:	f7fd f91b 	bl	80023c8 <HAL_GetTick>
 8005192:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005194:	e009      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005196:	f7fd f917 	bl	80023c8 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d902      	bls.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	74fb      	strb	r3, [r7, #19]
        break;
 80051a8:	e005      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051aa:	4b30      	ldr	r3, [pc, #192]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0ef      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d159      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01e      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d019      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051d8:	4b23      	ldr	r3, [pc, #140]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051e4:	4b20      	ldr	r3, [pc, #128]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005204:	4a18      	ldr	r2, [pc, #96]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005216:	f7fd f8d7 	bl	80023c8 <HAL_GetTick>
 800521a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800521c:	e00b      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521e:	f7fd f8d3 	bl	80023c8 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800522c:	4293      	cmp	r3, r2
 800522e:	d902      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	74fb      	strb	r3, [r7, #19]
            break;
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005236:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0ec      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005244:	7cfb      	ldrb	r3, [r7, #19]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800524a:	4b07      	ldr	r3, [pc, #28]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005258:	4903      	ldr	r1, [pc, #12]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005260:	e008      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005262:	7cfb      	ldrb	r3, [r7, #19]
 8005264:	74bb      	strb	r3, [r7, #18]
 8005266:	e005      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005268:	40021000 	.word	0x40021000
 800526c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005274:	7c7b      	ldrb	r3, [r7, #17]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d105      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800527a:	4ba7      	ldr	r3, [pc, #668]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527e:	4aa6      	ldr	r2, [pc, #664]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005284:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005292:	4ba1      	ldr	r3, [pc, #644]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005298:	f023 0203 	bic.w	r2, r3, #3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	499d      	ldr	r1, [pc, #628]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052b4:	4b98      	ldr	r3, [pc, #608]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ba:	f023 020c 	bic.w	r2, r3, #12
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4995      	ldr	r1, [pc, #596]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052d6:	4b90      	ldr	r3, [pc, #576]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	498c      	ldr	r1, [pc, #560]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052f8:	4b87      	ldr	r3, [pc, #540]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	4984      	ldr	r1, [pc, #528]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800531a:	4b7f      	ldr	r3, [pc, #508]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005320:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	497b      	ldr	r1, [pc, #492]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800533c:	4b76      	ldr	r3, [pc, #472]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005342:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	4973      	ldr	r1, [pc, #460]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800535e:	4b6e      	ldr	r3, [pc, #440]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005364:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	496a      	ldr	r1, [pc, #424]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005380:	4b65      	ldr	r3, [pc, #404]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005386:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	4962      	ldr	r1, [pc, #392]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	4959      	ldr	r1, [pc, #356]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053c4:	4b54      	ldr	r3, [pc, #336]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053ca:	f023 0203 	bic.w	r2, r3, #3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d2:	4951      	ldr	r1, [pc, #324]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	4948      	ldr	r1, [pc, #288]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005408:	4b43      	ldr	r3, [pc, #268]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005416:	4940      	ldr	r1, [pc, #256]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005426:	d105      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005428:	4b3b      	ldr	r3, [pc, #236]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4a3a      	ldr	r2, [pc, #232]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005432:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800543c:	2b00      	cmp	r3, #0
 800543e:	d015      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005440:	4b35      	ldr	r3, [pc, #212]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005446:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800544e:	4932      	ldr	r1, [pc, #200]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800545e:	d105      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005460:	4b2d      	ldr	r3, [pc, #180]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4a2c      	ldr	r2, [pc, #176]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800546a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d015      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005478:	4b27      	ldr	r3, [pc, #156]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005486:	4924      	ldr	r1, [pc, #144]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005492:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005496:	d105      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005498:	4b1f      	ldr	r3, [pc, #124]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4a1e      	ldr	r2, [pc, #120]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054b0:	4b19      	ldr	r3, [pc, #100]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054be:	4916      	ldr	r1, [pc, #88]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054ce:	d105      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d0:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a10      	ldr	r2, [pc, #64]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d019      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	4908      	ldr	r1, [pc, #32]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005506:	d109      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005508:	4b03      	ldr	r3, [pc, #12]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a02      	ldr	r2, [pc, #8]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005512:	60d3      	str	r3, [r2, #12]
 8005514:	e002      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005516:	bf00      	nop
 8005518:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d015      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005528:	4b29      	ldr	r3, [pc, #164]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	4926      	ldr	r1, [pc, #152]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005546:	d105      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005548:	4b21      	ldr	r3, [pc, #132]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a20      	ldr	r2, [pc, #128]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800554e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005552:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d015      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005560:	4b1b      	ldr	r3, [pc, #108]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005566:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800556e:	4918      	ldr	r1, [pc, #96]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557e:	d105      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005580:	4b13      	ldr	r3, [pc, #76]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4a12      	ldr	r2, [pc, #72]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800558a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005598:	4b0d      	ldr	r3, [pc, #52]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800559a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800559e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a6:	490a      	ldr	r1, [pc, #40]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055b6:	d105      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b8:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4a04      	ldr	r2, [pc, #16]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80055c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000

080055d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e09d      	b.n	8005722 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d108      	bne.n	8005600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f6:	d009      	beq.n	800560c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	61da      	str	r2, [r3, #28]
 80055fe:	e005      	b.n	800560c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fc fcac 	bl	8001f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005642:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800564c:	d902      	bls.n	8005654 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e002      	b.n	800565a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005658:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005662:	d007      	beq.n	8005674 <HAL_SPI_Init+0xa0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800566c:	d002      	beq.n	8005674 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b6:	ea42 0103 	orr.w	r1, r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056be:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	f003 0204 	and.w	r2, r3, #4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80056f0:	ea42 0103 	orr.w	r1, r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005710:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b088      	sub	sp, #32
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_SPI_Transmit+0x22>
 8005748:	2302      	movs	r3, #2
 800574a:	e15f      	b.n	8005a0c <HAL_SPI_Transmit+0x2e2>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005754:	f7fc fe38 	bl	80023c8 <HAL_GetTick>
 8005758:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	d002      	beq.n	8005770 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800576a:	2302      	movs	r3, #2
 800576c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800576e:	e148      	b.n	8005a02 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_Transmit+0x52>
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005780:	e13f      	b.n	8005a02 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2203      	movs	r2, #3
 8005786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	88fa      	ldrh	r2, [r7, #6]
 800579a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057cc:	d10f      	bne.n	80057ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f8:	2b40      	cmp	r3, #64	@ 0x40
 80057fa:	d007      	beq.n	800580c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005814:	d94f      	bls.n	80058b6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_SPI_Transmit+0xfa>
 800581e:	8afb      	ldrh	r3, [r7, #22]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d142      	bne.n	80058aa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005828:	881a      	ldrh	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005834:	1c9a      	adds	r2, r3, #2
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005848:	e02f      	b.n	80058aa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b02      	cmp	r3, #2
 8005856:	d112      	bne.n	800587e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800587c:	e015      	b.n	80058aa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800587e:	f7fc fda3 	bl	80023c8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d803      	bhi.n	8005896 <HAL_SPI_Transmit+0x16c>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d102      	bne.n	800589c <HAL_SPI_Transmit+0x172>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80058a8:	e0ab      	b.n	8005a02 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ca      	bne.n	800584a <HAL_SPI_Transmit+0x120>
 80058b4:	e080      	b.n	80059b8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_SPI_Transmit+0x19a>
 80058be:	8afb      	ldrh	r3, [r7, #22]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d174      	bne.n	80059ae <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d912      	bls.n	80058f4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058de:	1c9a      	adds	r2, r3, #2
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b02      	subs	r3, #2
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058f2:	e05c      	b.n	80059ae <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800591a:	e048      	b.n	80059ae <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b02      	cmp	r3, #2
 8005928:	d12b      	bne.n	8005982 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d912      	bls.n	800595a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005938:	881a      	ldrh	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b02      	subs	r3, #2
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005958:	e029      	b.n	80059ae <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005980:	e015      	b.n	80059ae <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005982:	f7fc fd21 	bl	80023c8 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d803      	bhi.n	800599a <HAL_SPI_Transmit+0x270>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d102      	bne.n	80059a0 <HAL_SPI_Transmit+0x276>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80059ac:	e029      	b.n	8005a02 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1b1      	bne.n	800591c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f947 	bl	8005c50 <SPI_EndRxTxTransaction>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e003      	b.n	8005a02 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005a0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a24:	f7fc fcd0 	bl	80023c8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	4413      	add	r3, r2
 8005a32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a34:	f7fc fcc8 	bl	80023c8 <HAL_GetTick>
 8005a38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a3a:	4b39      	ldr	r3, [pc, #228]	@ (8005b20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	015b      	lsls	r3, r3, #5
 8005a40:	0d1b      	lsrs	r3, r3, #20
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	fb02 f303 	mul.w	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a4a:	e054      	b.n	8005af6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d050      	beq.n	8005af6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a54:	f7fc fcb8 	bl	80023c8 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d902      	bls.n	8005a6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d13d      	bne.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a82:	d111      	bne.n	8005aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a8c:	d004      	beq.n	8005a98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a96:	d107      	bne.n	8005aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab0:	d10f      	bne.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ad0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e017      	b.n	8005b16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4013      	ands	r3, r2
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d19b      	bne.n	8005a4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3720      	adds	r7, #32
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000000 	.word	0x20000000

08005b24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	@ 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b36:	f7fc fc47 	bl	80023c8 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	4413      	add	r3, r2
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005b46:	f7fc fc3f 	bl	80023c8 <HAL_GetTick>
 8005b4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b54:	4b3d      	ldr	r3, [pc, #244]	@ (8005c4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00da      	lsls	r2, r3, #3
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	0d1b      	lsrs	r3, r3, #20
 8005b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b6c:	e060      	b.n	8005c30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005b74:	d107      	bne.n	8005b86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d104      	bne.n	8005b86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d050      	beq.n	8005c30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b8e:	f7fc fc1b 	bl	80023c8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d902      	bls.n	8005ba4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d13d      	bne.n	8005c20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bbc:	d111      	bne.n	8005be2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bc6:	d004      	beq.n	8005bd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd0:	d107      	bne.n	8005be2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005be0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bea:	d10f      	bne.n	8005c0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e010      	b.n	8005c42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d196      	bne.n	8005b6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3728      	adds	r7, #40	@ 0x28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000000 	.word	0x20000000

08005c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f7ff ff5b 	bl	8005b24 <SPI_WaitFifoStateUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c78:	f043 0220 	orr.w	r2, r3, #32
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e027      	b.n	8005cd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2180      	movs	r1, #128	@ 0x80
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff fec0 	bl	8005a14 <SPI_WaitFlagStateUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c9e:	f043 0220 	orr.w	r2, r3, #32
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e014      	b.n	8005cd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f7ff ff34 	bl	8005b24 <SPI_WaitFifoStateUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cc6:	f043 0220 	orr.w	r2, r3, #32
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e000      	b.n	8005cd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e049      	b.n	8005d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fc f982 	bl	800200c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f000 fb32 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d001      	beq.n	8005da4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e04c      	b.n	8005e3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a26      	ldr	r2, [pc, #152]	@ (8005e4c <HAL_TIM_Base_Start+0xc0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_TIM_Base_Start+0x70>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbe:	d01d      	beq.n	8005dfc <HAL_TIM_Base_Start+0x70>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a22      	ldr	r2, [pc, #136]	@ (8005e50 <HAL_TIM_Base_Start+0xc4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_TIM_Base_Start+0x70>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a21      	ldr	r2, [pc, #132]	@ (8005e54 <HAL_TIM_Base_Start+0xc8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_TIM_Base_Start+0x70>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e58 <HAL_TIM_Base_Start+0xcc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_TIM_Base_Start+0x70>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e5c <HAL_TIM_Base_Start+0xd0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_TIM_Base_Start+0x70>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1c      	ldr	r2, [pc, #112]	@ (8005e60 <HAL_TIM_Base_Start+0xd4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_TIM_Base_Start+0x70>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e64 <HAL_TIM_Base_Start+0xd8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d115      	bne.n	8005e28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	4b19      	ldr	r3, [pc, #100]	@ (8005e68 <HAL_TIM_Base_Start+0xdc>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b06      	cmp	r3, #6
 8005e0c:	d015      	beq.n	8005e3a <HAL_TIM_Base_Start+0xae>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e14:	d011      	beq.n	8005e3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0201 	orr.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e26:	e008      	b.n	8005e3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e000      	b.n	8005e3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40012c00 	.word	0x40012c00
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40013400 	.word	0x40013400
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40015000 	.word	0x40015000
 8005e68:	00010007 	.word	0x00010007

08005e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e049      	b.n	8005f12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f841 	bl	8005f1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f000 fa6a 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e0ff      	b.n	800614e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b14      	cmp	r3, #20
 8005f5a:	f200 80f0 	bhi.w	800613e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	0800613f 	.word	0x0800613f
 8005f6c:	0800613f 	.word	0x0800613f
 8005f70:	0800613f 	.word	0x0800613f
 8005f74:	08005ff9 	.word	0x08005ff9
 8005f78:	0800613f 	.word	0x0800613f
 8005f7c:	0800613f 	.word	0x0800613f
 8005f80:	0800613f 	.word	0x0800613f
 8005f84:	0800603b 	.word	0x0800603b
 8005f88:	0800613f 	.word	0x0800613f
 8005f8c:	0800613f 	.word	0x0800613f
 8005f90:	0800613f 	.word	0x0800613f
 8005f94:	0800607b 	.word	0x0800607b
 8005f98:	0800613f 	.word	0x0800613f
 8005f9c:	0800613f 	.word	0x0800613f
 8005fa0:	0800613f 	.word	0x0800613f
 8005fa4:	080060bd 	.word	0x080060bd
 8005fa8:	0800613f 	.word	0x0800613f
 8005fac:	0800613f 	.word	0x0800613f
 8005fb0:	0800613f 	.word	0x0800613f
 8005fb4:	080060fd 	.word	0x080060fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fa94 	bl	80064ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0204 	bic.w	r2, r2, #4
 8005fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6999      	ldr	r1, [r3, #24]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	619a      	str	r2, [r3, #24]
      break;
 8005ff6:	e0a5      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fb0e 	bl	8006620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6999      	ldr	r1, [r3, #24]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	619a      	str	r2, [r3, #24]
      break;
 8006038:	e084      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fb81 	bl	8006748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0208 	orr.w	r2, r2, #8
 8006054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0204 	bic.w	r2, r2, #4
 8006064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69d9      	ldr	r1, [r3, #28]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	61da      	str	r2, [r3, #28]
      break;
 8006078:	e064      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fbf3 	bl	800686c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	021a      	lsls	r2, r3, #8
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	61da      	str	r2, [r3, #28]
      break;
 80060ba:	e043      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fc66 	bl	8006994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80060fa:	e023      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fcb0 	bl	8006a68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006116:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006126:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800613c:	e002      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800614c:	7dfb      	ldrb	r3, [r7, #23]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIM_ConfigClockSource+0x1c>
 8006170:	2302      	movs	r3, #2
 8006172:	e0f6      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x20a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006192:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800619e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a6f      	ldr	r2, [pc, #444]	@ (800636c <HAL_TIM_ConfigClockSource+0x214>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	f000 80c1 	beq.w	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 80061b4:	4a6d      	ldr	r2, [pc, #436]	@ (800636c <HAL_TIM_ConfigClockSource+0x214>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	f200 80c6 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 80061bc:	4a6c      	ldr	r2, [pc, #432]	@ (8006370 <HAL_TIM_ConfigClockSource+0x218>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	f000 80b9 	beq.w	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 80061c4:	4a6a      	ldr	r2, [pc, #424]	@ (8006370 <HAL_TIM_ConfigClockSource+0x218>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	f200 80be 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 80061cc:	4a69      	ldr	r2, [pc, #420]	@ (8006374 <HAL_TIM_ConfigClockSource+0x21c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	f000 80b1 	beq.w	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 80061d4:	4a67      	ldr	r2, [pc, #412]	@ (8006374 <HAL_TIM_ConfigClockSource+0x21c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	f200 80b6 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 80061dc:	4a66      	ldr	r2, [pc, #408]	@ (8006378 <HAL_TIM_ConfigClockSource+0x220>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	f000 80a9 	beq.w	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 80061e4:	4a64      	ldr	r2, [pc, #400]	@ (8006378 <HAL_TIM_ConfigClockSource+0x220>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	f200 80ae 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 80061ec:	4a63      	ldr	r2, [pc, #396]	@ (800637c <HAL_TIM_ConfigClockSource+0x224>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	f000 80a1 	beq.w	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 80061f4:	4a61      	ldr	r2, [pc, #388]	@ (800637c <HAL_TIM_ConfigClockSource+0x224>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	f200 80a6 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 80061fc:	4a60      	ldr	r2, [pc, #384]	@ (8006380 <HAL_TIM_ConfigClockSource+0x228>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	f000 8099 	beq.w	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 8006204:	4a5e      	ldr	r2, [pc, #376]	@ (8006380 <HAL_TIM_ConfigClockSource+0x228>)
 8006206:	4293      	cmp	r3, r2
 8006208:	f200 809e 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 800620c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006210:	f000 8091 	beq.w	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 8006214:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006218:	f200 8096 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 800621c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006220:	f000 8089 	beq.w	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 8006224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006228:	f200 808e 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006230:	d03e      	beq.n	80062b0 <HAL_TIM_ConfigClockSource+0x158>
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006236:	f200 8087 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623e:	f000 8086 	beq.w	800634e <HAL_TIM_ConfigClockSource+0x1f6>
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006246:	d87f      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 8006248:	2b70      	cmp	r3, #112	@ 0x70
 800624a:	d01a      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0x12a>
 800624c:	2b70      	cmp	r3, #112	@ 0x70
 800624e:	d87b      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 8006250:	2b60      	cmp	r3, #96	@ 0x60
 8006252:	d050      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x19e>
 8006254:	2b60      	cmp	r3, #96	@ 0x60
 8006256:	d877      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 8006258:	2b50      	cmp	r3, #80	@ 0x50
 800625a:	d03c      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0x17e>
 800625c:	2b50      	cmp	r3, #80	@ 0x50
 800625e:	d873      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 8006260:	2b40      	cmp	r3, #64	@ 0x40
 8006262:	d058      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x1be>
 8006264:	2b40      	cmp	r3, #64	@ 0x40
 8006266:	d86f      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 8006268:	2b30      	cmp	r3, #48	@ 0x30
 800626a:	d064      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 800626c:	2b30      	cmp	r3, #48	@ 0x30
 800626e:	d86b      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 8006270:	2b20      	cmp	r3, #32
 8006272:	d060      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 8006274:	2b20      	cmp	r3, #32
 8006276:	d867      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d05c      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 800627c:	2b10      	cmp	r3, #16
 800627e:	d05a      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x1de>
 8006280:	e062      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006292:	f000 fcd1 	bl	8006c38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	609a      	str	r2, [r3, #8]
      break;
 80062ae:	e04f      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062c0:	f000 fcba 	bl	8006c38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062d2:	609a      	str	r2, [r3, #8]
      break;
 80062d4:	e03c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e2:	461a      	mov	r2, r3
 80062e4:	f000 fc2c 	bl	8006b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2150      	movs	r1, #80	@ 0x50
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fc85 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 80062f4:	e02c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006302:	461a      	mov	r2, r3
 8006304:	f000 fc4b 	bl	8006b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2160      	movs	r1, #96	@ 0x60
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fc75 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 8006314:	e01c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006322:	461a      	mov	r2, r3
 8006324:	f000 fc0c 	bl	8006b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2140      	movs	r1, #64	@ 0x40
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fc65 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 8006334:	e00c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f000 fc5c 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 8006346:	e003      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	73fb      	strb	r3, [r7, #15]
      break;
 800634c:	e000      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800634e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	00100070 	.word	0x00100070
 8006370:	00100060 	.word	0x00100060
 8006374:	00100050 	.word	0x00100050
 8006378:	00100040 	.word	0x00100040
 800637c:	00100030 	.word	0x00100030
 8006380:	00100020 	.word	0x00100020

08006384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a4c      	ldr	r2, [pc, #304]	@ (80064c8 <TIM_Base_SetConfig+0x144>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d017      	beq.n	80063cc <TIM_Base_SetConfig+0x48>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a2:	d013      	beq.n	80063cc <TIM_Base_SetConfig+0x48>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a49      	ldr	r2, [pc, #292]	@ (80064cc <TIM_Base_SetConfig+0x148>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00f      	beq.n	80063cc <TIM_Base_SetConfig+0x48>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a48      	ldr	r2, [pc, #288]	@ (80064d0 <TIM_Base_SetConfig+0x14c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00b      	beq.n	80063cc <TIM_Base_SetConfig+0x48>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a47      	ldr	r2, [pc, #284]	@ (80064d4 <TIM_Base_SetConfig+0x150>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_Base_SetConfig+0x48>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a46      	ldr	r2, [pc, #280]	@ (80064d8 <TIM_Base_SetConfig+0x154>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0x48>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a45      	ldr	r2, [pc, #276]	@ (80064dc <TIM_Base_SetConfig+0x158>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d108      	bne.n	80063de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a39      	ldr	r2, [pc, #228]	@ (80064c8 <TIM_Base_SetConfig+0x144>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d023      	beq.n	800642e <TIM_Base_SetConfig+0xaa>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ec:	d01f      	beq.n	800642e <TIM_Base_SetConfig+0xaa>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a36      	ldr	r2, [pc, #216]	@ (80064cc <TIM_Base_SetConfig+0x148>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01b      	beq.n	800642e <TIM_Base_SetConfig+0xaa>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a35      	ldr	r2, [pc, #212]	@ (80064d0 <TIM_Base_SetConfig+0x14c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d017      	beq.n	800642e <TIM_Base_SetConfig+0xaa>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a34      	ldr	r2, [pc, #208]	@ (80064d4 <TIM_Base_SetConfig+0x150>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <TIM_Base_SetConfig+0xaa>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a33      	ldr	r2, [pc, #204]	@ (80064d8 <TIM_Base_SetConfig+0x154>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00f      	beq.n	800642e <TIM_Base_SetConfig+0xaa>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a33      	ldr	r2, [pc, #204]	@ (80064e0 <TIM_Base_SetConfig+0x15c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00b      	beq.n	800642e <TIM_Base_SetConfig+0xaa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a32      	ldr	r2, [pc, #200]	@ (80064e4 <TIM_Base_SetConfig+0x160>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <TIM_Base_SetConfig+0xaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a31      	ldr	r2, [pc, #196]	@ (80064e8 <TIM_Base_SetConfig+0x164>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <TIM_Base_SetConfig+0xaa>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2c      	ldr	r2, [pc, #176]	@ (80064dc <TIM_Base_SetConfig+0x158>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d108      	bne.n	8006440 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a18      	ldr	r2, [pc, #96]	@ (80064c8 <TIM_Base_SetConfig+0x144>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d013      	beq.n	8006494 <TIM_Base_SetConfig+0x110>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a1a      	ldr	r2, [pc, #104]	@ (80064d8 <TIM_Base_SetConfig+0x154>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00f      	beq.n	8006494 <TIM_Base_SetConfig+0x110>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a1a      	ldr	r2, [pc, #104]	@ (80064e0 <TIM_Base_SetConfig+0x15c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00b      	beq.n	8006494 <TIM_Base_SetConfig+0x110>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a19      	ldr	r2, [pc, #100]	@ (80064e4 <TIM_Base_SetConfig+0x160>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_Base_SetConfig+0x110>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a18      	ldr	r2, [pc, #96]	@ (80064e8 <TIM_Base_SetConfig+0x164>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0x110>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a13      	ldr	r2, [pc, #76]	@ (80064dc <TIM_Base_SetConfig+0x158>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d103      	bne.n	800649c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d105      	bne.n	80064ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f023 0201 	bic.w	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	611a      	str	r2, [r3, #16]
  }
}
 80064ba:	bf00      	nop
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40012c00 	.word	0x40012c00
 80064cc:	40000400 	.word	0x40000400
 80064d0:	40000800 	.word	0x40000800
 80064d4:	40000c00 	.word	0x40000c00
 80064d8:	40013400 	.word	0x40013400
 80064dc:	40015000 	.word	0x40015000
 80064e0:	40014000 	.word	0x40014000
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800

080064ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f023 0201 	bic.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800651a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0303 	bic.w	r3, r3, #3
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f023 0302 	bic.w	r3, r3, #2
 8006538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a30      	ldr	r2, [pc, #192]	@ (8006608 <TIM_OC1_SetConfig+0x11c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <TIM_OC1_SetConfig+0x88>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a2f      	ldr	r2, [pc, #188]	@ (800660c <TIM_OC1_SetConfig+0x120>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00f      	beq.n	8006574 <TIM_OC1_SetConfig+0x88>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a2e      	ldr	r2, [pc, #184]	@ (8006610 <TIM_OC1_SetConfig+0x124>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00b      	beq.n	8006574 <TIM_OC1_SetConfig+0x88>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a2d      	ldr	r2, [pc, #180]	@ (8006614 <TIM_OC1_SetConfig+0x128>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d007      	beq.n	8006574 <TIM_OC1_SetConfig+0x88>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a2c      	ldr	r2, [pc, #176]	@ (8006618 <TIM_OC1_SetConfig+0x12c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_OC1_SetConfig+0x88>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a2b      	ldr	r2, [pc, #172]	@ (800661c <TIM_OC1_SetConfig+0x130>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d10c      	bne.n	800658e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0308 	bic.w	r3, r3, #8
 800657a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 0304 	bic.w	r3, r3, #4
 800658c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <TIM_OC1_SetConfig+0x11c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <TIM_OC1_SetConfig+0xd2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1c      	ldr	r2, [pc, #112]	@ (800660c <TIM_OC1_SetConfig+0x120>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00f      	beq.n	80065be <TIM_OC1_SetConfig+0xd2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006610 <TIM_OC1_SetConfig+0x124>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00b      	beq.n	80065be <TIM_OC1_SetConfig+0xd2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006614 <TIM_OC1_SetConfig+0x128>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d007      	beq.n	80065be <TIM_OC1_SetConfig+0xd2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a19      	ldr	r2, [pc, #100]	@ (8006618 <TIM_OC1_SetConfig+0x12c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_OC1_SetConfig+0xd2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a18      	ldr	r2, [pc, #96]	@ (800661c <TIM_OC1_SetConfig+0x130>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d111      	bne.n	80065e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	621a      	str	r2, [r3, #32]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40013400 	.word	0x40013400
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800
 800661c:	40015000 	.word	0x40015000

08006620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f023 0210 	bic.w	r2, r3, #16
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800665a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0320 	bic.w	r3, r3, #32
 800666e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a2c      	ldr	r2, [pc, #176]	@ (8006730 <TIM_OC2_SetConfig+0x110>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <TIM_OC2_SetConfig+0x74>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a2b      	ldr	r2, [pc, #172]	@ (8006734 <TIM_OC2_SetConfig+0x114>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC2_SetConfig+0x74>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a2a      	ldr	r2, [pc, #168]	@ (8006738 <TIM_OC2_SetConfig+0x118>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d10d      	bne.n	80066b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800669a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006730 <TIM_OC2_SetConfig+0x110>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <TIM_OC2_SetConfig+0xc0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006734 <TIM_OC2_SetConfig+0x114>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00f      	beq.n	80066e0 <TIM_OC2_SetConfig+0xc0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1e      	ldr	r2, [pc, #120]	@ (800673c <TIM_OC2_SetConfig+0x11c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00b      	beq.n	80066e0 <TIM_OC2_SetConfig+0xc0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006740 <TIM_OC2_SetConfig+0x120>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <TIM_OC2_SetConfig+0xc0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006744 <TIM_OC2_SetConfig+0x124>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC2_SetConfig+0xc0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a17      	ldr	r2, [pc, #92]	@ (8006738 <TIM_OC2_SetConfig+0x118>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d113      	bne.n	8006708 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40013400 	.word	0x40013400
 8006738:	40015000 	.word	0x40015000
 800673c:	40014000 	.word	0x40014000
 8006740:	40014400 	.word	0x40014400
 8006744:	40014800 	.word	0x40014800

08006748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006854 <TIM_OC3_SetConfig+0x10c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d007      	beq.n	80067ba <TIM_OC3_SetConfig+0x72>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006858 <TIM_OC3_SetConfig+0x110>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_OC3_SetConfig+0x72>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a29      	ldr	r2, [pc, #164]	@ (800685c <TIM_OC3_SetConfig+0x114>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d10d      	bne.n	80067d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006854 <TIM_OC3_SetConfig+0x10c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <TIM_OC3_SetConfig+0xbe>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006858 <TIM_OC3_SetConfig+0x110>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00f      	beq.n	8006806 <TIM_OC3_SetConfig+0xbe>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006860 <TIM_OC3_SetConfig+0x118>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00b      	beq.n	8006806 <TIM_OC3_SetConfig+0xbe>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006864 <TIM_OC3_SetConfig+0x11c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <TIM_OC3_SetConfig+0xbe>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006868 <TIM_OC3_SetConfig+0x120>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC3_SetConfig+0xbe>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a16      	ldr	r2, [pc, #88]	@ (800685c <TIM_OC3_SetConfig+0x114>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d113      	bne.n	800682e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800680c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	621a      	str	r2, [r3, #32]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40012c00 	.word	0x40012c00
 8006858:	40013400 	.word	0x40013400
 800685c:	40015000 	.word	0x40015000
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400
 8006868:	40014800 	.word	0x40014800

0800686c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800689a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800689e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	031b      	lsls	r3, r3, #12
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a2c      	ldr	r2, [pc, #176]	@ (800697c <TIM_OC4_SetConfig+0x110>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d007      	beq.n	80068e0 <TIM_OC4_SetConfig+0x74>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006980 <TIM_OC4_SetConfig+0x114>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC4_SetConfig+0x74>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a2a      	ldr	r2, [pc, #168]	@ (8006984 <TIM_OC4_SetConfig+0x118>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10d      	bne.n	80068fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	031b      	lsls	r3, r3, #12
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1f      	ldr	r2, [pc, #124]	@ (800697c <TIM_OC4_SetConfig+0x110>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <TIM_OC4_SetConfig+0xc0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a1e      	ldr	r2, [pc, #120]	@ (8006980 <TIM_OC4_SetConfig+0x114>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00f      	beq.n	800692c <TIM_OC4_SetConfig+0xc0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a1e      	ldr	r2, [pc, #120]	@ (8006988 <TIM_OC4_SetConfig+0x11c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00b      	beq.n	800692c <TIM_OC4_SetConfig+0xc0>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a1d      	ldr	r2, [pc, #116]	@ (800698c <TIM_OC4_SetConfig+0x120>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d007      	beq.n	800692c <TIM_OC4_SetConfig+0xc0>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a1c      	ldr	r2, [pc, #112]	@ (8006990 <TIM_OC4_SetConfig+0x124>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_OC4_SetConfig+0xc0>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a17      	ldr	r2, [pc, #92]	@ (8006984 <TIM_OC4_SetConfig+0x118>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d113      	bne.n	8006954 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006932:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800693a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	019b      	lsls	r3, r3, #6
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	019b      	lsls	r3, r3, #6
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40013400 	.word	0x40013400
 8006984:	40015000 	.word	0x40015000
 8006988:	40014000 	.word	0x40014000
 800698c:	40014400 	.word	0x40014400
 8006990:	40014800 	.word	0x40014800

08006994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	041b      	lsls	r3, r3, #16
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a19      	ldr	r2, [pc, #100]	@ (8006a50 <TIM_OC5_SetConfig+0xbc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <TIM_OC5_SetConfig+0x82>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a18      	ldr	r2, [pc, #96]	@ (8006a54 <TIM_OC5_SetConfig+0xc0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00f      	beq.n	8006a16 <TIM_OC5_SetConfig+0x82>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a17      	ldr	r2, [pc, #92]	@ (8006a58 <TIM_OC5_SetConfig+0xc4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00b      	beq.n	8006a16 <TIM_OC5_SetConfig+0x82>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a16      	ldr	r2, [pc, #88]	@ (8006a5c <TIM_OC5_SetConfig+0xc8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d007      	beq.n	8006a16 <TIM_OC5_SetConfig+0x82>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a15      	ldr	r2, [pc, #84]	@ (8006a60 <TIM_OC5_SetConfig+0xcc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d003      	beq.n	8006a16 <TIM_OC5_SetConfig+0x82>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a14      	ldr	r2, [pc, #80]	@ (8006a64 <TIM_OC5_SetConfig+0xd0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d109      	bne.n	8006a2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	621a      	str	r2, [r3, #32]
}
 8006a44:	bf00      	nop
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40013400 	.word	0x40013400
 8006a58:	40014000 	.word	0x40014000
 8006a5c:	40014400 	.word	0x40014400
 8006a60:	40014800 	.word	0x40014800
 8006a64:	40015000 	.word	0x40015000

08006a68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	051b      	lsls	r3, r3, #20
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a1a      	ldr	r2, [pc, #104]	@ (8006b28 <TIM_OC6_SetConfig+0xc0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d013      	beq.n	8006aec <TIM_OC6_SetConfig+0x84>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a19      	ldr	r2, [pc, #100]	@ (8006b2c <TIM_OC6_SetConfig+0xc4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d00f      	beq.n	8006aec <TIM_OC6_SetConfig+0x84>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a18      	ldr	r2, [pc, #96]	@ (8006b30 <TIM_OC6_SetConfig+0xc8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00b      	beq.n	8006aec <TIM_OC6_SetConfig+0x84>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a17      	ldr	r2, [pc, #92]	@ (8006b34 <TIM_OC6_SetConfig+0xcc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d007      	beq.n	8006aec <TIM_OC6_SetConfig+0x84>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a16      	ldr	r2, [pc, #88]	@ (8006b38 <TIM_OC6_SetConfig+0xd0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_OC6_SetConfig+0x84>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a15      	ldr	r2, [pc, #84]	@ (8006b3c <TIM_OC6_SetConfig+0xd4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d109      	bne.n	8006b00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	029b      	lsls	r3, r3, #10
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	621a      	str	r2, [r3, #32]
}
 8006b1a:	bf00      	nop
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40012c00 	.word	0x40012c00
 8006b2c:	40013400 	.word	0x40013400
 8006b30:	40014000 	.word	0x40014000
 8006b34:	40014400 	.word	0x40014400
 8006b38:	40014800 	.word	0x40014800
 8006b3c:	40015000 	.word	0x40015000

08006b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0201 	bic.w	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f023 030a 	bic.w	r3, r3, #10
 8006b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b087      	sub	sp, #28
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	f023 0210 	bic.w	r2, r3, #16
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	031b      	lsls	r3, r3, #12
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f043 0307 	orr.w	r3, r3, #7
 8006c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	021a      	lsls	r2, r3, #8
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	609a      	str	r2, [r3, #8]
}
 8006c6c:	bf00      	nop
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e074      	b.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a34      	ldr	r2, [pc, #208]	@ (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a33      	ldr	r2, [pc, #204]	@ (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d004      	beq.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a31      	ldr	r2, [pc, #196]	@ (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d108      	bne.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a21      	ldr	r2, [pc, #132]	@ (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d10:	d01d      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1f      	ldr	r2, [pc, #124]	@ (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1d      	ldr	r2, [pc, #116]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a15      	ldr	r2, [pc, #84]	@ (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a18      	ldr	r2, [pc, #96]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a11      	ldr	r2, [pc, #68]	@ (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10c      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	40013400 	.word	0x40013400
 8006d90:	40015000 	.word	0x40015000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40014000 	.word	0x40014000

08006da4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e078      	b.n	8006eb2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	041b      	lsls	r3, r3, #16
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a19      	ldr	r2, [pc, #100]	@ (8006ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d11c      	bne.n	8006ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e70:	051b      	lsls	r3, r3, #20
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40012c00 	.word	0x40012c00
 8006ec4:	40013400 	.word	0x40013400
 8006ec8:	40015000 	.word	0x40015000

08006ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e042      	b.n	8006f64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d106      	bne.n	8006ef6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7fb f8f7 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2224      	movs	r2, #36	@ 0x24
 8006efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fe86 	bl	8007c28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fb87 	bl	8007630 <UART_SetConfig>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e01b      	b.n	8006f64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 ff05 	bl	8007d6c <UART_CheckIdleState>
 8006f62:	4603      	mov	r3, r0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b0ba      	sub	sp, #232	@ 0xe8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006f96:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11b      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d015      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d009      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8300 	beq.w	80075d6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
      }
      return;
 8006fde:	e2fa      	b.n	80075d6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 8123 	beq.w	8007230 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006fea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006fee:	4b8d      	ldr	r3, [pc, #564]	@ (8007224 <HAL_UART_IRQHandler+0x2b8>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ff6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ffa:	4b8b      	ldr	r3, [pc, #556]	@ (8007228 <HAL_UART_IRQHandler+0x2bc>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8116 	beq.w	8007230 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d011      	beq.n	8007034 <HAL_UART_IRQHandler+0xc8>
 8007010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2201      	movs	r2, #1
 8007022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702a:	f043 0201 	orr.w	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d011      	beq.n	8007064 <HAL_UART_IRQHandler+0xf8>
 8007040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00b      	beq.n	8007064 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2202      	movs	r2, #2
 8007052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705a:	f043 0204 	orr.w	r2, r3, #4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	d011      	beq.n	8007094 <HAL_UART_IRQHandler+0x128>
 8007070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2204      	movs	r2, #4
 8007082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708a:	f043 0202 	orr.w	r2, r3, #2
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d017      	beq.n	80070d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80070a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d105      	bne.n	80070b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80070ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80070b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007224 <HAL_UART_IRQHandler+0x2b8>)
 80070b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2208      	movs	r2, #8
 80070be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c6:	f043 0208 	orr.w	r2, r3, #8
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d012      	beq.n	8007102 <HAL_UART_IRQHandler+0x196>
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00c      	beq.n	8007102 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f8:	f043 0220 	orr.w	r2, r3, #32
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8266 	beq.w	80075da <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d013      	beq.n	8007142 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800711a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d105      	bne.n	8007132 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800712a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007148:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007156:	2b40      	cmp	r3, #64	@ 0x40
 8007158:	d005      	beq.n	8007166 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800715a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800715e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007162:	2b00      	cmp	r3, #0
 8007164:	d054      	beq.n	8007210 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 ff17 	bl	8007f9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007176:	2b40      	cmp	r3, #64	@ 0x40
 8007178:	d146      	bne.n	8007208 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3308      	adds	r3, #8
 8007180:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3308      	adds	r3, #8
 80071a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1d9      	bne.n	800717a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d017      	beq.n	8007200 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d6:	4a15      	ldr	r2, [pc, #84]	@ (800722c <HAL_UART_IRQHandler+0x2c0>)
 80071d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fc f8c9 	bl	8003378 <HAL_DMA_Abort_IT>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d019      	beq.n	8007220 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80071fa:	4610      	mov	r0, r2
 80071fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fe:	e00f      	b.n	8007220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f9ff 	bl	8007604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007206:	e00b      	b.n	8007220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f9fb 	bl	8007604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720e:	e007      	b.n	8007220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f9f7 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800721e:	e1dc      	b.n	80075da <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007220:	bf00      	nop
    return;
 8007222:	e1da      	b.n	80075da <HAL_UART_IRQHandler+0x66e>
 8007224:	10000001 	.word	0x10000001
 8007228:	04000120 	.word	0x04000120
 800722c:	08008067 	.word	0x08008067

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007234:	2b01      	cmp	r3, #1
 8007236:	f040 8170 	bne.w	800751a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800723a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 8169 	beq.w	800751a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8162 	beq.w	800751a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2210      	movs	r2, #16
 800725c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007268:	2b40      	cmp	r3, #64	@ 0x40
 800726a:	f040 80d8 	bne.w	800741e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800727c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 80af 	beq.w	80073e4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800728c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007290:	429a      	cmp	r2, r3
 8007292:	f080 80a7 	bcs.w	80073e4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800729c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f040 8087 	bne.w	80073c2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1da      	bne.n	80072b4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3308      	adds	r3, #8
 8007304:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800730e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007322:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007326:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800732a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e1      	bne.n	80072fe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800734a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800734c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3308      	adds	r3, #8
 800735a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800735e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007360:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007364:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007366:	e841 2300 	strex	r3, r2, [r1]
 800736a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800736c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1e3      	bne.n	800733a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800738e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007390:	f023 0310 	bic.w	r3, r3, #16
 8007394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e4      	bne.n	8007380 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fb ff82 	bl	80032c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2202      	movs	r2, #2
 80073c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	b29b      	uxth	r3, r3
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f91b 	bl	8007618 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80073e2:	e0fc      	b.n	80075de <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073ee:	429a      	cmp	r2, r3
 80073f0:	f040 80f5 	bne.w	80075de <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b20      	cmp	r3, #32
 8007404:	f040 80eb 	bne.w	80075de <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f8fe 	bl	8007618 <HAL_UARTEx_RxEventCallback>
      return;
 800741c:	e0df      	b.n	80075de <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800742a:	b29b      	uxth	r3, r3
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 80d1 	beq.w	80075e2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80cc 	beq.w	80075e2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800745e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800746c:	647b      	str	r3, [r7, #68]	@ 0x44
 800746e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800747a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e4      	bne.n	800744a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3308      	adds	r3, #8
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	623b      	str	r3, [r7, #32]
   return(result);
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80074aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e1      	bne.n	8007480 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f023 0310 	bic.w	r3, r3, #16
 80074e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	69b9      	ldr	r1, [r7, #24]
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e4      	bne.n	80074d0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2202      	movs	r2, #2
 800750a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800750c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f880 	bl	8007618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007518:	e063      	b.n	80075e2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800751a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00e      	beq.n	8007544 <HAL_UART_IRQHandler+0x5d8>
 8007526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800752a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800753a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fdd3 	bl	80080e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007542:	e051      	b.n	80075e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754c:	2b00      	cmp	r3, #0
 800754e:	d014      	beq.n	800757a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007558:	2b00      	cmp	r3, #0
 800755a:	d105      	bne.n	8007568 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800755c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800756c:	2b00      	cmp	r3, #0
 800756e:	d03a      	beq.n	80075e6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
    }
    return;
 8007578:	e035      	b.n	80075e6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800757a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800757e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <HAL_UART_IRQHandler+0x62e>
 8007586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800758a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fd7d 	bl	8008092 <UART_EndTransmit_IT>
    return;
 8007598:	e026      	b.n	80075e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800759a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800759e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <HAL_UART_IRQHandler+0x64e>
 80075a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fdac 	bl	8008110 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075b8:	e016      	b.n	80075e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d010      	beq.n	80075e8 <HAL_UART_IRQHandler+0x67c>
 80075c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da0c      	bge.n	80075e8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fd94 	bl	80080fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075d4:	e008      	b.n	80075e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80075d6:	bf00      	nop
 80075d8:	e006      	b.n	80075e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80075da:	bf00      	nop
 80075dc:	e004      	b.n	80075e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80075de:	bf00      	nop
 80075e0:	e002      	b.n	80075e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80075e2:	bf00      	nop
 80075e4:	e000      	b.n	80075e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80075e6:	bf00      	nop
  }
}
 80075e8:	37e8      	adds	r7, #232	@ 0xe8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop

080075f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007634:	b08c      	sub	sp, #48	@ 0x30
 8007636:	af00      	add	r7, sp, #0
 8007638:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	431a      	orrs	r2, r3
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	431a      	orrs	r2, r3
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	4313      	orrs	r3, r2
 8007656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4baa      	ldr	r3, [pc, #680]	@ (8007908 <UART_SetConfig+0x2d8>)
 8007660:	4013      	ands	r3, r2
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007668:	430b      	orrs	r3, r1
 800766a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a9f      	ldr	r2, [pc, #636]	@ (800790c <UART_SetConfig+0x2dc>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007698:	4313      	orrs	r3, r2
 800769a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80076a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ba:	f023 010f 	bic.w	r1, r3, #15
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a90      	ldr	r2, [pc, #576]	@ (8007910 <UART_SetConfig+0x2e0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d125      	bne.n	8007720 <UART_SetConfig+0xf0>
 80076d4:	4b8f      	ldr	r3, [pc, #572]	@ (8007914 <UART_SetConfig+0x2e4>)
 80076d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d81a      	bhi.n	8007718 <UART_SetConfig+0xe8>
 80076e2:	a201      	add	r2, pc, #4	@ (adr r2, 80076e8 <UART_SetConfig+0xb8>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	080076f9 	.word	0x080076f9
 80076ec:	08007709 	.word	0x08007709
 80076f0:	08007701 	.word	0x08007701
 80076f4:	08007711 	.word	0x08007711
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076fe:	e116      	b.n	800792e <UART_SetConfig+0x2fe>
 8007700:	2302      	movs	r3, #2
 8007702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007706:	e112      	b.n	800792e <UART_SetConfig+0x2fe>
 8007708:	2304      	movs	r3, #4
 800770a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770e:	e10e      	b.n	800792e <UART_SetConfig+0x2fe>
 8007710:	2308      	movs	r3, #8
 8007712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007716:	e10a      	b.n	800792e <UART_SetConfig+0x2fe>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800771e:	e106      	b.n	800792e <UART_SetConfig+0x2fe>
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a7c      	ldr	r2, [pc, #496]	@ (8007918 <UART_SetConfig+0x2e8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d138      	bne.n	800779c <UART_SetConfig+0x16c>
 800772a:	4b7a      	ldr	r3, [pc, #488]	@ (8007914 <UART_SetConfig+0x2e4>)
 800772c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007730:	f003 030c 	and.w	r3, r3, #12
 8007734:	2b0c      	cmp	r3, #12
 8007736:	d82d      	bhi.n	8007794 <UART_SetConfig+0x164>
 8007738:	a201      	add	r2, pc, #4	@ (adr r2, 8007740 <UART_SetConfig+0x110>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007775 	.word	0x08007775
 8007744:	08007795 	.word	0x08007795
 8007748:	08007795 	.word	0x08007795
 800774c:	08007795 	.word	0x08007795
 8007750:	08007785 	.word	0x08007785
 8007754:	08007795 	.word	0x08007795
 8007758:	08007795 	.word	0x08007795
 800775c:	08007795 	.word	0x08007795
 8007760:	0800777d 	.word	0x0800777d
 8007764:	08007795 	.word	0x08007795
 8007768:	08007795 	.word	0x08007795
 800776c:	08007795 	.word	0x08007795
 8007770:	0800778d 	.word	0x0800778d
 8007774:	2300      	movs	r3, #0
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777a:	e0d8      	b.n	800792e <UART_SetConfig+0x2fe>
 800777c:	2302      	movs	r3, #2
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007782:	e0d4      	b.n	800792e <UART_SetConfig+0x2fe>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800778a:	e0d0      	b.n	800792e <UART_SetConfig+0x2fe>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007792:	e0cc      	b.n	800792e <UART_SetConfig+0x2fe>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800779a:	e0c8      	b.n	800792e <UART_SetConfig+0x2fe>
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a5e      	ldr	r2, [pc, #376]	@ (800791c <UART_SetConfig+0x2ec>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d125      	bne.n	80077f2 <UART_SetConfig+0x1c2>
 80077a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007914 <UART_SetConfig+0x2e4>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077b0:	2b30      	cmp	r3, #48	@ 0x30
 80077b2:	d016      	beq.n	80077e2 <UART_SetConfig+0x1b2>
 80077b4:	2b30      	cmp	r3, #48	@ 0x30
 80077b6:	d818      	bhi.n	80077ea <UART_SetConfig+0x1ba>
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d00a      	beq.n	80077d2 <UART_SetConfig+0x1a2>
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d814      	bhi.n	80077ea <UART_SetConfig+0x1ba>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <UART_SetConfig+0x19a>
 80077c4:	2b10      	cmp	r3, #16
 80077c6:	d008      	beq.n	80077da <UART_SetConfig+0x1aa>
 80077c8:	e00f      	b.n	80077ea <UART_SetConfig+0x1ba>
 80077ca:	2300      	movs	r3, #0
 80077cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d0:	e0ad      	b.n	800792e <UART_SetConfig+0x2fe>
 80077d2:	2302      	movs	r3, #2
 80077d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d8:	e0a9      	b.n	800792e <UART_SetConfig+0x2fe>
 80077da:	2304      	movs	r3, #4
 80077dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e0:	e0a5      	b.n	800792e <UART_SetConfig+0x2fe>
 80077e2:	2308      	movs	r3, #8
 80077e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e8:	e0a1      	b.n	800792e <UART_SetConfig+0x2fe>
 80077ea:	2310      	movs	r3, #16
 80077ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f0:	e09d      	b.n	800792e <UART_SetConfig+0x2fe>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a4a      	ldr	r2, [pc, #296]	@ (8007920 <UART_SetConfig+0x2f0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d125      	bne.n	8007848 <UART_SetConfig+0x218>
 80077fc:	4b45      	ldr	r3, [pc, #276]	@ (8007914 <UART_SetConfig+0x2e4>)
 80077fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007802:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007806:	2bc0      	cmp	r3, #192	@ 0xc0
 8007808:	d016      	beq.n	8007838 <UART_SetConfig+0x208>
 800780a:	2bc0      	cmp	r3, #192	@ 0xc0
 800780c:	d818      	bhi.n	8007840 <UART_SetConfig+0x210>
 800780e:	2b80      	cmp	r3, #128	@ 0x80
 8007810:	d00a      	beq.n	8007828 <UART_SetConfig+0x1f8>
 8007812:	2b80      	cmp	r3, #128	@ 0x80
 8007814:	d814      	bhi.n	8007840 <UART_SetConfig+0x210>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <UART_SetConfig+0x1f0>
 800781a:	2b40      	cmp	r3, #64	@ 0x40
 800781c:	d008      	beq.n	8007830 <UART_SetConfig+0x200>
 800781e:	e00f      	b.n	8007840 <UART_SetConfig+0x210>
 8007820:	2300      	movs	r3, #0
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007826:	e082      	b.n	800792e <UART_SetConfig+0x2fe>
 8007828:	2302      	movs	r3, #2
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800782e:	e07e      	b.n	800792e <UART_SetConfig+0x2fe>
 8007830:	2304      	movs	r3, #4
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007836:	e07a      	b.n	800792e <UART_SetConfig+0x2fe>
 8007838:	2308      	movs	r3, #8
 800783a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800783e:	e076      	b.n	800792e <UART_SetConfig+0x2fe>
 8007840:	2310      	movs	r3, #16
 8007842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007846:	e072      	b.n	800792e <UART_SetConfig+0x2fe>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a35      	ldr	r2, [pc, #212]	@ (8007924 <UART_SetConfig+0x2f4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d12a      	bne.n	80078a8 <UART_SetConfig+0x278>
 8007852:	4b30      	ldr	r3, [pc, #192]	@ (8007914 <UART_SetConfig+0x2e4>)
 8007854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800785c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007860:	d01a      	beq.n	8007898 <UART_SetConfig+0x268>
 8007862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007866:	d81b      	bhi.n	80078a0 <UART_SetConfig+0x270>
 8007868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800786c:	d00c      	beq.n	8007888 <UART_SetConfig+0x258>
 800786e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007872:	d815      	bhi.n	80078a0 <UART_SetConfig+0x270>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <UART_SetConfig+0x250>
 8007878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800787c:	d008      	beq.n	8007890 <UART_SetConfig+0x260>
 800787e:	e00f      	b.n	80078a0 <UART_SetConfig+0x270>
 8007880:	2300      	movs	r3, #0
 8007882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007886:	e052      	b.n	800792e <UART_SetConfig+0x2fe>
 8007888:	2302      	movs	r3, #2
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788e:	e04e      	b.n	800792e <UART_SetConfig+0x2fe>
 8007890:	2304      	movs	r3, #4
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007896:	e04a      	b.n	800792e <UART_SetConfig+0x2fe>
 8007898:	2308      	movs	r3, #8
 800789a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800789e:	e046      	b.n	800792e <UART_SetConfig+0x2fe>
 80078a0:	2310      	movs	r3, #16
 80078a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078a6:	e042      	b.n	800792e <UART_SetConfig+0x2fe>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a17      	ldr	r2, [pc, #92]	@ (800790c <UART_SetConfig+0x2dc>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d13a      	bne.n	8007928 <UART_SetConfig+0x2f8>
 80078b2:	4b18      	ldr	r3, [pc, #96]	@ (8007914 <UART_SetConfig+0x2e4>)
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078c0:	d01a      	beq.n	80078f8 <UART_SetConfig+0x2c8>
 80078c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078c6:	d81b      	bhi.n	8007900 <UART_SetConfig+0x2d0>
 80078c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078cc:	d00c      	beq.n	80078e8 <UART_SetConfig+0x2b8>
 80078ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078d2:	d815      	bhi.n	8007900 <UART_SetConfig+0x2d0>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <UART_SetConfig+0x2b0>
 80078d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078dc:	d008      	beq.n	80078f0 <UART_SetConfig+0x2c0>
 80078de:	e00f      	b.n	8007900 <UART_SetConfig+0x2d0>
 80078e0:	2300      	movs	r3, #0
 80078e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e6:	e022      	b.n	800792e <UART_SetConfig+0x2fe>
 80078e8:	2302      	movs	r3, #2
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ee:	e01e      	b.n	800792e <UART_SetConfig+0x2fe>
 80078f0:	2304      	movs	r3, #4
 80078f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f6:	e01a      	b.n	800792e <UART_SetConfig+0x2fe>
 80078f8:	2308      	movs	r3, #8
 80078fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078fe:	e016      	b.n	800792e <UART_SetConfig+0x2fe>
 8007900:	2310      	movs	r3, #16
 8007902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007906:	e012      	b.n	800792e <UART_SetConfig+0x2fe>
 8007908:	cfff69f3 	.word	0xcfff69f3
 800790c:	40008000 	.word	0x40008000
 8007910:	40013800 	.word	0x40013800
 8007914:	40021000 	.word	0x40021000
 8007918:	40004400 	.word	0x40004400
 800791c:	40004800 	.word	0x40004800
 8007920:	40004c00 	.word	0x40004c00
 8007924:	40005000 	.word	0x40005000
 8007928:	2310      	movs	r3, #16
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4aae      	ldr	r2, [pc, #696]	@ (8007bec <UART_SetConfig+0x5bc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	f040 8097 	bne.w	8007a68 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800793a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800793e:	2b08      	cmp	r3, #8
 8007940:	d823      	bhi.n	800798a <UART_SetConfig+0x35a>
 8007942:	a201      	add	r2, pc, #4	@ (adr r2, 8007948 <UART_SetConfig+0x318>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	0800796d 	.word	0x0800796d
 800794c:	0800798b 	.word	0x0800798b
 8007950:	08007975 	.word	0x08007975
 8007954:	0800798b 	.word	0x0800798b
 8007958:	0800797b 	.word	0x0800797b
 800795c:	0800798b 	.word	0x0800798b
 8007960:	0800798b 	.word	0x0800798b
 8007964:	0800798b 	.word	0x0800798b
 8007968:	08007983 	.word	0x08007983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800796c:	f7fd fb72 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8007970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007972:	e010      	b.n	8007996 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007974:	4b9e      	ldr	r3, [pc, #632]	@ (8007bf0 <UART_SetConfig+0x5c0>)
 8007976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007978:	e00d      	b.n	8007996 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797a:	f7fd fafd 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 800797e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007980:	e009      	b.n	8007996 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007988:	e005      	b.n	8007996 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007994:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 8130 	beq.w	8007bfe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a2:	4a94      	ldr	r2, [pc, #592]	@ (8007bf4 <UART_SetConfig+0x5c4>)
 80079a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d305      	bcc.n	80079ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d903      	bls.n	80079d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079d4:	e113      	b.n	8007bfe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d8:	2200      	movs	r2, #0
 80079da:	60bb      	str	r3, [r7, #8]
 80079dc:	60fa      	str	r2, [r7, #12]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e2:	4a84      	ldr	r2, [pc, #528]	@ (8007bf4 <UART_SetConfig+0x5c4>)
 80079e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2200      	movs	r2, #0
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079f8:	f7f9 f8dc 	bl	8000bb4 <__aeabi_uldivmod>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4610      	mov	r0, r2
 8007a02:	4619      	mov	r1, r3
 8007a04:	f04f 0200 	mov.w	r2, #0
 8007a08:	f04f 0300 	mov.w	r3, #0
 8007a0c:	020b      	lsls	r3, r1, #8
 8007a0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a12:	0202      	lsls	r2, r0, #8
 8007a14:	6979      	ldr	r1, [r7, #20]
 8007a16:	6849      	ldr	r1, [r1, #4]
 8007a18:	0849      	lsrs	r1, r1, #1
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	4605      	mov	r5, r0
 8007a20:	eb12 0804 	adds.w	r8, r2, r4
 8007a24:	eb43 0905 	adc.w	r9, r3, r5
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	469a      	mov	sl, r3
 8007a30:	4693      	mov	fp, r2
 8007a32:	4652      	mov	r2, sl
 8007a34:	465b      	mov	r3, fp
 8007a36:	4640      	mov	r0, r8
 8007a38:	4649      	mov	r1, r9
 8007a3a:	f7f9 f8bb 	bl	8000bb4 <__aeabi_uldivmod>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4613      	mov	r3, r2
 8007a44:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a4c:	d308      	bcc.n	8007a60 <UART_SetConfig+0x430>
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a54:	d204      	bcs.n	8007a60 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	60da      	str	r2, [r3, #12]
 8007a5e:	e0ce      	b.n	8007bfe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a66:	e0ca      	b.n	8007bfe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a70:	d166      	bne.n	8007b40 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007a72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d827      	bhi.n	8007aca <UART_SetConfig+0x49a>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <UART_SetConfig+0x450>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007aa5 	.word	0x08007aa5
 8007a84:	08007aad 	.word	0x08007aad
 8007a88:	08007ab5 	.word	0x08007ab5
 8007a8c:	08007acb 	.word	0x08007acb
 8007a90:	08007abb 	.word	0x08007abb
 8007a94:	08007acb 	.word	0x08007acb
 8007a98:	08007acb 	.word	0x08007acb
 8007a9c:	08007acb 	.word	0x08007acb
 8007aa0:	08007ac3 	.word	0x08007ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aa4:	f7fd fad6 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8007aa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007aaa:	e014      	b.n	8007ad6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aac:	f7fd fae8 	bl	8005080 <HAL_RCC_GetPCLK2Freq>
 8007ab0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ab2:	e010      	b.n	8007ad6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ab4:	4b4e      	ldr	r3, [pc, #312]	@ (8007bf0 <UART_SetConfig+0x5c0>)
 8007ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ab8:	e00d      	b.n	8007ad6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aba:	f7fd fa5d 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 8007abe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ac0:	e009      	b.n	8007ad6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ac8:	e005      	b.n	8007ad6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ad4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8090 	beq.w	8007bfe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae2:	4a44      	ldr	r2, [pc, #272]	@ (8007bf4 <UART_SetConfig+0x5c4>)
 8007ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007af0:	005a      	lsls	r2, r3, #1
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	441a      	add	r2, r3
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	2b0f      	cmp	r3, #15
 8007b08:	d916      	bls.n	8007b38 <UART_SetConfig+0x508>
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b10:	d212      	bcs.n	8007b38 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f023 030f 	bic.w	r3, r3, #15
 8007b1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	085b      	lsrs	r3, r3, #1
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	8bfb      	ldrh	r3, [r7, #30]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	8bfa      	ldrh	r2, [r7, #30]
 8007b34:	60da      	str	r2, [r3, #12]
 8007b36:	e062      	b.n	8007bfe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b3e:	e05e      	b.n	8007bfe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d828      	bhi.n	8007b9a <UART_SetConfig+0x56a>
 8007b48:	a201      	add	r2, pc, #4	@ (adr r2, 8007b50 <UART_SetConfig+0x520>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b75 	.word	0x08007b75
 8007b54:	08007b7d 	.word	0x08007b7d
 8007b58:	08007b85 	.word	0x08007b85
 8007b5c:	08007b9b 	.word	0x08007b9b
 8007b60:	08007b8b 	.word	0x08007b8b
 8007b64:	08007b9b 	.word	0x08007b9b
 8007b68:	08007b9b 	.word	0x08007b9b
 8007b6c:	08007b9b 	.word	0x08007b9b
 8007b70:	08007b93 	.word	0x08007b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b74:	f7fd fa6e 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8007b78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b7a:	e014      	b.n	8007ba6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b7c:	f7fd fa80 	bl	8005080 <HAL_RCC_GetPCLK2Freq>
 8007b80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b82:	e010      	b.n	8007ba6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b84:	4b1a      	ldr	r3, [pc, #104]	@ (8007bf0 <UART_SetConfig+0x5c0>)
 8007b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b88:	e00d      	b.n	8007ba6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b8a:	f7fd f9f5 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 8007b8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b90:	e009      	b.n	8007ba6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b98:	e005      	b.n	8007ba6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ba4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d028      	beq.n	8007bfe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb0:	4a10      	ldr	r2, [pc, #64]	@ (8007bf4 <UART_SetConfig+0x5c4>)
 8007bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	441a      	add	r2, r3
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2b0f      	cmp	r3, #15
 8007bd4:	d910      	bls.n	8007bf8 <UART_SetConfig+0x5c8>
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bdc:	d20c      	bcs.n	8007bf8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60da      	str	r2, [r3, #12]
 8007be8:	e009      	b.n	8007bfe <UART_SetConfig+0x5ce>
 8007bea:	bf00      	nop
 8007bec:	40008000 	.word	0x40008000
 8007bf0:	00f42400 	.word	0x00f42400
 8007bf4:	080084b0 	.word	0x080084b0
      }
      else
      {
        ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2200      	movs	r2, #0
 8007c12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2200      	movs	r2, #0
 8007c18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c1a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3730      	adds	r7, #48	@ 0x30
 8007c22:	46bd      	mov	sp, r7
 8007c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01a      	beq.n	8007d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d26:	d10a      	bne.n	8007d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]
  }
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b098      	sub	sp, #96	@ 0x60
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d7c:	f7fa fb24 	bl	80023c8 <HAL_GetTick>
 8007d80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0308 	and.w	r3, r3, #8
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d12f      	bne.n	8007df0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f88e 	bl	8007ec0 <UART_WaitOnFlagUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d022      	beq.n	8007df0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e6      	bne.n	8007daa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e063      	b.n	8007eb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d149      	bne.n	8007e92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e06:	2200      	movs	r2, #0
 8007e08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f857 	bl	8007ec0 <UART_WaitOnFlagUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d03c      	beq.n	8007e92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	623b      	str	r3, [r7, #32]
   return(result);
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e6      	bne.n	8007e18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f023 0301 	bic.w	r3, r3, #1
 8007e60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e6a:	61fa      	str	r2, [r7, #28]
 8007e6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	69b9      	ldr	r1, [r7, #24]
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	617b      	str	r3, [r7, #20]
   return(result);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e5      	bne.n	8007e4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e012      	b.n	8007eb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3758      	adds	r7, #88	@ 0x58
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ed0:	e04f      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed8:	d04b      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eda:	f7fa fa75 	bl	80023c8 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d302      	bcc.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e04e      	b.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d037      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b80      	cmp	r3, #128	@ 0x80
 8007f06:	d034      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b40      	cmp	r3, #64	@ 0x40
 8007f0c:	d031      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d110      	bne.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2208      	movs	r2, #8
 8007f22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 f838 	bl	8007f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2208      	movs	r2, #8
 8007f2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e029      	b.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f4c:	d111      	bne.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 f81e 	bl	8007f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e00f      	b.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69da      	ldr	r2, [r3, #28]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	bf0c      	ite	eq
 8007f82:	2301      	moveq	r3, #1
 8007f84:	2300      	movne	r3, #0
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	461a      	mov	r2, r3
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d0a0      	beq.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b095      	sub	sp, #84	@ 0x54
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007faa:	e853 3f00 	ldrex	r3, [r3]
 8007fae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e6      	bne.n	8007fa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fea:	f023 0301 	bic.w	r3, r3, #1
 8007fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ff8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e3      	bne.n	8007fd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d118      	bne.n	8008046 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	60bb      	str	r3, [r7, #8]
   return(result);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f023 0310 	bic.w	r3, r3, #16
 8008028:	647b      	str	r3, [r7, #68]	@ 0x44
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6979      	ldr	r1, [r7, #20]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	613b      	str	r3, [r7, #16]
   return(result);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e6      	bne.n	8008014 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800805a:	bf00      	nop
 800805c:	3754      	adds	r7, #84	@ 0x54
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fabd 	bl	8007604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b088      	sub	sp, #32
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	e853 3f00 	ldrex	r3, [r3]
 80080a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080ae:	61fb      	str	r3, [r7, #28]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	6979      	ldr	r1, [r7, #20]
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	e841 2300 	strex	r3, r2, [r1]
 80080c4:	613b      	str	r3, [r7, #16]
   return(result);
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e6      	bne.n	800809a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff fa88 	bl	80075f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e0:	bf00      	nop
 80080e2:	3720      	adds	r7, #32
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_UARTEx_DisableFifoMode+0x16>
 8008136:	2302      	movs	r3, #2
 8008138:	e027      	b.n	800818a <HAL_UARTEx_DisableFifoMode+0x66>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2224      	movs	r2, #36	@ 0x24
 8008146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0201 	bic.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008168:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d101      	bne.n	80081ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081aa:	2302      	movs	r3, #2
 80081ac:	e02d      	b.n	800820a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2224      	movs	r2, #36	@ 0x24
 80081ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0201 	bic.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f850 	bl	8008290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008222:	2b01      	cmp	r3, #1
 8008224:	d101      	bne.n	800822a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008226:	2302      	movs	r3, #2
 8008228:	e02d      	b.n	8008286 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2224      	movs	r2, #36	@ 0x24
 8008236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f812 	bl	8008290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800829c:	2b00      	cmp	r3, #0
 800829e:	d108      	bne.n	80082b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082b0:	e031      	b.n	8008316 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082b2:	2308      	movs	r3, #8
 80082b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082b6:	2308      	movs	r3, #8
 80082b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	0e5b      	lsrs	r3, r3, #25
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	0f5b      	lsrs	r3, r3, #29
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	7b3a      	ldrb	r2, [r7, #12]
 80082de:	4911      	ldr	r1, [pc, #68]	@ (8008324 <UARTEx_SetNbDataToProcess+0x94>)
 80082e0:	5c8a      	ldrb	r2, [r1, r2]
 80082e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082e6:	7b3a      	ldrb	r2, [r7, #12]
 80082e8:	490f      	ldr	r1, [pc, #60]	@ (8008328 <UARTEx_SetNbDataToProcess+0x98>)
 80082ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	7b7a      	ldrb	r2, [r7, #13]
 80082fc:	4909      	ldr	r1, [pc, #36]	@ (8008324 <UARTEx_SetNbDataToProcess+0x94>)
 80082fe:	5c8a      	ldrb	r2, [r1, r2]
 8008300:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008304:	7b7a      	ldrb	r2, [r7, #13]
 8008306:	4908      	ldr	r1, [pc, #32]	@ (8008328 <UARTEx_SetNbDataToProcess+0x98>)
 8008308:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800830a:	fb93 f3f2 	sdiv	r3, r3, r2
 800830e:	b29a      	uxth	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	080084c8 	.word	0x080084c8
 8008328:	080084d0 	.word	0x080084d0
 800832c:	00000000 	.word	0x00000000

08008330 <floor>:
 8008330:	ec51 0b10 	vmov	r0, r1, d0
 8008334:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008340:	2e13      	cmp	r6, #19
 8008342:	460c      	mov	r4, r1
 8008344:	4605      	mov	r5, r0
 8008346:	4680      	mov	r8, r0
 8008348:	dc34      	bgt.n	80083b4 <floor+0x84>
 800834a:	2e00      	cmp	r6, #0
 800834c:	da17      	bge.n	800837e <floor+0x4e>
 800834e:	a332      	add	r3, pc, #200	@ (adr r3, 8008418 <floor+0xe8>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f7f7 ff66 	bl	8000224 <__adddf3>
 8008358:	2200      	movs	r2, #0
 800835a:	2300      	movs	r3, #0
 800835c:	f7f8 fba8 	bl	8000ab0 <__aeabi_dcmpgt>
 8008360:	b150      	cbz	r0, 8008378 <floor+0x48>
 8008362:	2c00      	cmp	r4, #0
 8008364:	da55      	bge.n	8008412 <floor+0xe2>
 8008366:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800836a:	432c      	orrs	r4, r5
 800836c:	2500      	movs	r5, #0
 800836e:	42ac      	cmp	r4, r5
 8008370:	4c2b      	ldr	r4, [pc, #172]	@ (8008420 <floor+0xf0>)
 8008372:	bf08      	it	eq
 8008374:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008378:	4621      	mov	r1, r4
 800837a:	4628      	mov	r0, r5
 800837c:	e023      	b.n	80083c6 <floor+0x96>
 800837e:	4f29      	ldr	r7, [pc, #164]	@ (8008424 <floor+0xf4>)
 8008380:	4137      	asrs	r7, r6
 8008382:	ea01 0307 	and.w	r3, r1, r7
 8008386:	4303      	orrs	r3, r0
 8008388:	d01d      	beq.n	80083c6 <floor+0x96>
 800838a:	a323      	add	r3, pc, #140	@ (adr r3, 8008418 <floor+0xe8>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 ff48 	bl	8000224 <__adddf3>
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	f7f8 fb8a 	bl	8000ab0 <__aeabi_dcmpgt>
 800839c:	2800      	cmp	r0, #0
 800839e:	d0eb      	beq.n	8008378 <floor+0x48>
 80083a0:	2c00      	cmp	r4, #0
 80083a2:	bfbe      	ittt	lt
 80083a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80083a8:	4133      	asrlt	r3, r6
 80083aa:	18e4      	addlt	r4, r4, r3
 80083ac:	ea24 0407 	bic.w	r4, r4, r7
 80083b0:	2500      	movs	r5, #0
 80083b2:	e7e1      	b.n	8008378 <floor+0x48>
 80083b4:	2e33      	cmp	r6, #51	@ 0x33
 80083b6:	dd0a      	ble.n	80083ce <floor+0x9e>
 80083b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80083bc:	d103      	bne.n	80083c6 <floor+0x96>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	f7f7 ff2f 	bl	8000224 <__adddf3>
 80083c6:	ec41 0b10 	vmov	d0, r0, r1
 80083ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80083d2:	f04f 37ff 	mov.w	r7, #4294967295
 80083d6:	40df      	lsrs	r7, r3
 80083d8:	4207      	tst	r7, r0
 80083da:	d0f4      	beq.n	80083c6 <floor+0x96>
 80083dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8008418 <floor+0xe8>)
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f7f7 ff1f 	bl	8000224 <__adddf3>
 80083e6:	2200      	movs	r2, #0
 80083e8:	2300      	movs	r3, #0
 80083ea:	f7f8 fb61 	bl	8000ab0 <__aeabi_dcmpgt>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d0c2      	beq.n	8008378 <floor+0x48>
 80083f2:	2c00      	cmp	r4, #0
 80083f4:	da0a      	bge.n	800840c <floor+0xdc>
 80083f6:	2e14      	cmp	r6, #20
 80083f8:	d101      	bne.n	80083fe <floor+0xce>
 80083fa:	3401      	adds	r4, #1
 80083fc:	e006      	b.n	800840c <floor+0xdc>
 80083fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008402:	2301      	movs	r3, #1
 8008404:	40b3      	lsls	r3, r6
 8008406:	441d      	add	r5, r3
 8008408:	4545      	cmp	r5, r8
 800840a:	d3f6      	bcc.n	80083fa <floor+0xca>
 800840c:	ea25 0507 	bic.w	r5, r5, r7
 8008410:	e7b2      	b.n	8008378 <floor+0x48>
 8008412:	2500      	movs	r5, #0
 8008414:	462c      	mov	r4, r5
 8008416:	e7af      	b.n	8008378 <floor+0x48>
 8008418:	8800759c 	.word	0x8800759c
 800841c:	7e37e43c 	.word	0x7e37e43c
 8008420:	bff00000 	.word	0xbff00000
 8008424:	000fffff 	.word	0x000fffff

08008428 <memset>:
 8008428:	4402      	add	r2, r0
 800842a:	4603      	mov	r3, r0
 800842c:	4293      	cmp	r3, r2
 800842e:	d100      	bne.n	8008432 <memset+0xa>
 8008430:	4770      	bx	lr
 8008432:	f803 1b01 	strb.w	r1, [r3], #1
 8008436:	e7f9      	b.n	800842c <memset+0x4>

08008438 <__libc_init_array>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	4d0d      	ldr	r5, [pc, #52]	@ (8008470 <__libc_init_array+0x38>)
 800843c:	4c0d      	ldr	r4, [pc, #52]	@ (8008474 <__libc_init_array+0x3c>)
 800843e:	1b64      	subs	r4, r4, r5
 8008440:	10a4      	asrs	r4, r4, #2
 8008442:	2600      	movs	r6, #0
 8008444:	42a6      	cmp	r6, r4
 8008446:	d109      	bne.n	800845c <__libc_init_array+0x24>
 8008448:	4d0b      	ldr	r5, [pc, #44]	@ (8008478 <__libc_init_array+0x40>)
 800844a:	4c0c      	ldr	r4, [pc, #48]	@ (800847c <__libc_init_array+0x44>)
 800844c:	f000 f818 	bl	8008480 <_init>
 8008450:	1b64      	subs	r4, r4, r5
 8008452:	10a4      	asrs	r4, r4, #2
 8008454:	2600      	movs	r6, #0
 8008456:	42a6      	cmp	r6, r4
 8008458:	d105      	bne.n	8008466 <__libc_init_array+0x2e>
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008460:	4798      	blx	r3
 8008462:	3601      	adds	r6, #1
 8008464:	e7ee      	b.n	8008444 <__libc_init_array+0xc>
 8008466:	f855 3b04 	ldr.w	r3, [r5], #4
 800846a:	4798      	blx	r3
 800846c:	3601      	adds	r6, #1
 800846e:	e7f2      	b.n	8008456 <__libc_init_array+0x1e>
 8008470:	080084e0 	.word	0x080084e0
 8008474:	080084e0 	.word	0x080084e0
 8008478:	080084e0 	.word	0x080084e0
 800847c:	080084e4 	.word	0x080084e4

08008480 <_init>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr

0800848c <_fini>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	bf00      	nop
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr
