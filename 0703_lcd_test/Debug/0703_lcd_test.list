
0703_lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005700  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028b0  080058e0  080058e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008190  08008190  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008190  08008190  00009190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008198  08008198  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008198  08008198  00009198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080081a0  080081a0  000091a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080081a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000005c  08008204  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08008204  0000a314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023117  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f7d  00000000  00000000  0002d1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  00031120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002138  00000000  00000000  000326c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0cd  00000000  00000000  00034800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b735  00000000  00000000  0005f8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100706  00000000  00000000  0007b002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f5c  00000000  00000000  0017b74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001816a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000d36c  00000000  00000000  0018170d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080058c8 	.word	0x080058c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080058c8 	.word	0x080058c8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <_ZN12Adafruit_GFX9setCursorEss>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	807b      	strh	r3, [r7, #2]
 80002dc:	4613      	mov	r3, r2
 80002de:	803b      	strh	r3, [r7, #0]
    cursor_x = x;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	887a      	ldrh	r2, [r7, #2]
 80002e4:	821a      	strh	r2, [r3, #16]
    cursor_y = y;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	883a      	ldrh	r2, [r7, #0]
 80002ea:	825a      	strh	r2, [r3, #18]
  }
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <_ZN12Adafruit_GFX12setTextColorEtt>:
    @brief   Set text font color with custom background color
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	807b      	strh	r3, [r7, #2]
 8000304:	4613      	mov	r3, r2
 8000306:	803b      	strh	r3, [r7, #0]
    textcolor = c;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	887a      	ldrh	r2, [r7, #2]
 800030c:	829a      	strh	r2, [r3, #20]
    textbgcolor = bg;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	883a      	ldrh	r2, [r7, #0]
 8000312:	82da      	strh	r2, [r3, #22]
  }
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <_ZN15Adafruit_SPITFTD1Ev>:

  Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback);

  // DESTRUCTOR ----------------------------------------------------------

  ~Adafruit_SPITFT(){};
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <_ZN15Adafruit_SPITFTD1Ev+0x1c>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4618      	mov	r0, r3
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	08008024 	.word	0x08008024

08000340 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
//#include "Fonts/FreeSerif12pt7b.h"

using SpiCmd = Adafruit_SPITFT::SpiCmd;

void lcd_callback(SpiCmd cmd, uint8_t* pdata, size_t size)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
  auto spi = hspi1.Instance;
 800034c:	4b1c      	ldr	r3, [pc, #112]	@ (80003c0 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x80>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	617b      	str	r3, [r7, #20]
  switch (cmd)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b07      	cmp	r3, #7
 8000356:	d82e      	bhi.n	80003b6 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
 8000358:	a201      	add	r2, pc, #4	@ (adr r2, 8000360 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x20>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	080003b5 	.word	0x080003b5
 8000364:	080003b5 	.word	0x080003b5
 8000368:	080003b5 	.word	0x080003b5
 800036c:	080003b5 	.word	0x080003b5
 8000370:	08000381 	.word	0x08000381
 8000374:	0800038f 	.word	0x0800038f
 8000378:	0800039d 	.word	0x0800039d
 800037c:	080003ad 	.word	0x080003ad

  case SpiCmd::cs_high:
    break;

  case SpiCmd::dc_low:
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000386:	480f      	ldr	r0, [pc, #60]	@ (80003c4 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x84>)
 8000388:	f001 fe16 	bl	8001fb8 <HAL_GPIO_WritePin>
    break;
 800038c:	e013      	b.n	80003b6 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>

  case SpiCmd::dc_high:
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000394:	480b      	ldr	r0, [pc, #44]	@ (80003c4 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x84>)
 8000396:	f001 fe0f 	bl	8001fb8 <HAL_GPIO_WritePin>
    break;
 800039a:	e00c      	b.n	80003b6 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>

  case SpiCmd::transmit:
    HAL_SPI_Transmit(&hspi1, pdata, size, size);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	b29a      	uxth	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68b9      	ldr	r1, [r7, #8]
 80003a4:	4806      	ldr	r0, [pc, #24]	@ (80003c0 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x80>)
 80003a6:	f002 fcba 	bl	8002d1e <HAL_SPI_Transmit>
//    }
//    while (LL_SPI_IsActiveFlag_BSY(spi))
//      ;
//    LL_SPI_Disable(spi);

    break;
 80003aa:	e004      	b.n	80003b6 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
//      ;
//    LL_SPI_Disable(spi);
//    break;

  case SpiCmd::delay:
    HAL_Delay(size);
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f001 f97d 	bl	80016ac <HAL_Delay>
    break;
 80003b2:	e000      	b.n	80003b6 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
    break;
 80003b4:	bf00      	nop
  }
}
 80003b6:	bf00      	nop
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	200000b4 	.word	0x200000b4
 80003c4:	48000800 	.word	0x48000800

080003c8 <setup>:

Adafruit_ST7789 lcd(240, 320, lcd_callback);

void setup()
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af02      	add	r7, sp, #8
  HAL_Delay(500);
 80003ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003d2:	f001 f96b 	bl	80016ac <HAL_Delay>
  lcd.init(240, 320);
 80003d6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80003da:	21f0      	movs	r1, #240	@ 0xf0
 80003dc:	4848      	ldr	r0, [pc, #288]	@ (8000500 <setup+0x138>)
 80003de:	f004 fbed 	bl	8004bbc <_ZN15Adafruit_ST77894initEtt>
  lcd.setRotation(1);
 80003e2:	2101      	movs	r1, #1
 80003e4:	4846      	ldr	r0, [pc, #280]	@ (8000500 <setup+0x138>)
 80003e6:	f004 fb93 	bl	8004b10 <_ZN15Adafruit_ST778911setRotationEh>
  lcd.fillScreen(ST77XX_BLACK);
 80003ea:	2100      	movs	r1, #0
 80003ec:	4844      	ldr	r0, [pc, #272]	@ (8000500 <setup+0x138>)
 80003ee:	f003 fc95 	bl	8003d1c <_ZN12Adafruit_GFX10fillScreenEt>
  lcd_show_picture(0, 0, 50, 75, gImage_elec);
 80003f2:	4b44      	ldr	r3, [pc, #272]	@ (8000504 <setup+0x13c>)
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	234b      	movs	r3, #75	@ 0x4b
 80003f8:	2232      	movs	r2, #50	@ 0x32
 80003fa:	2100      	movs	r1, #0
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f893 	bl	8000528 <lcd_show_picture>
  lcd.setCursor(115, 5);
 8000402:	2205      	movs	r2, #5
 8000404:	2173      	movs	r1, #115	@ 0x73
 8000406:	483e      	ldr	r0, [pc, #248]	@ (8000500 <setup+0x138>)
 8000408:	f7ff ff62 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 800040c:	2200      	movs	r2, #0
 800040e:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000412:	483b      	ldr	r0, [pc, #236]	@ (8000500 <setup+0x138>)
 8000414:	f7ff ff70 	bl	80002f8 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.setTextSize(2);
 8000418:	2102      	movs	r1, #2
 800041a:	4839      	ldr	r0, [pc, #228]	@ (8000500 <setup+0x138>)
 800041c:	f003 ff76 	bl	800430c <_ZN12Adafruit_GFX11setTextSizeEh>
  lcd.printf("0.BASIC\n");
 8000420:	4939      	ldr	r1, [pc, #228]	@ (8000508 <setup+0x140>)
 8000422:	4837      	ldr	r0, [pc, #220]	@ (8000500 <setup+0x138>)
 8000424:	f004 fd18 	bl	8004e58 <_ZN5Print6printfEPKcz>
  lcd_show_picture(101, 25, 12, 20, MenuCursor16x16);
 8000428:	4b38      	ldr	r3, [pc, #224]	@ (800050c <setup+0x144>)
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2314      	movs	r3, #20
 800042e:	220c      	movs	r2, #12
 8000430:	2119      	movs	r1, #25
 8000432:	2065      	movs	r0, #101	@ 0x65
 8000434:	f000 f878 	bl	8000528 <lcd_show_picture>
  lcd.setCursor(115 , 25);
 8000438:	2219      	movs	r2, #25
 800043a:	2173      	movs	r1, #115	@ 0x73
 800043c:	4830      	ldr	r0, [pc, #192]	@ (8000500 <setup+0x138>)
 800043e:	f7ff ff47 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8000442:	2200      	movs	r2, #0
 8000444:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000448:	482d      	ldr	r0, [pc, #180]	@ (8000500 <setup+0x138>)
 800044a:	f7ff ff55 	bl	80002f8 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("1.AMPL\n");
 800044e:	4930      	ldr	r1, [pc, #192]	@ (8000510 <setup+0x148>)
 8000450:	482b      	ldr	r0, [pc, #172]	@ (8000500 <setup+0x138>)
 8000452:	f004 fd01 	bl	8004e58 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 45);
 8000456:	222d      	movs	r2, #45	@ 0x2d
 8000458:	2173      	movs	r1, #115	@ 0x73
 800045a:	4829      	ldr	r0, [pc, #164]	@ (8000500 <setup+0x138>)
 800045c:	f7ff ff38 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8000460:	2200      	movs	r2, #0
 8000462:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000466:	4826      	ldr	r0, [pc, #152]	@ (8000500 <setup+0x138>)
 8000468:	f7ff ff46 	bl	80002f8 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("2.MODULATION\n");
 800046c:	4929      	ldr	r1, [pc, #164]	@ (8000514 <setup+0x14c>)
 800046e:	4824      	ldr	r0, [pc, #144]	@ (8000500 <setup+0x138>)
 8000470:	f004 fcf2 	bl	8004e58 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 65);
 8000474:	2241      	movs	r2, #65	@ 0x41
 8000476:	2173      	movs	r1, #115	@ 0x73
 8000478:	4821      	ldr	r0, [pc, #132]	@ (8000500 <setup+0x138>)
 800047a:	f7ff ff29 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 800047e:	2200      	movs	r2, #0
 8000480:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000484:	481e      	ldr	r0, [pc, #120]	@ (8000500 <setup+0x138>)
 8000486:	f7ff ff37 	bl	80002f8 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("3.DELAY\n");
 800048a:	4923      	ldr	r1, [pc, #140]	@ (8000518 <setup+0x150>)
 800048c:	481c      	ldr	r0, [pc, #112]	@ (8000500 <setup+0x138>)
 800048e:	f004 fce3 	bl	8004e58 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 85);
 8000492:	2255      	movs	r2, #85	@ 0x55
 8000494:	2173      	movs	r1, #115	@ 0x73
 8000496:	481a      	ldr	r0, [pc, #104]	@ (8000500 <setup+0x138>)
 8000498:	f7ff ff1a 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 800049c:	2200      	movs	r2, #0
 800049e:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80004a2:	4817      	ldr	r0, [pc, #92]	@ (8000500 <setup+0x138>)
 80004a4:	f7ff ff28 	bl	80002f8 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("4.ATTENUATION\n");
 80004a8:	491c      	ldr	r1, [pc, #112]	@ (800051c <setup+0x154>)
 80004aa:	4815      	ldr	r0, [pc, #84]	@ (8000500 <setup+0x138>)
 80004ac:	f004 fcd4 	bl	8004e58 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 105);
 80004b0:	2269      	movs	r2, #105	@ 0x69
 80004b2:	2173      	movs	r1, #115	@ 0x73
 80004b4:	4812      	ldr	r0, [pc, #72]	@ (8000500 <setup+0x138>)
 80004b6:	f7ff ff0b 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80004c0:	480f      	ldr	r0, [pc, #60]	@ (8000500 <setup+0x138>)
 80004c2:	f7ff ff19 	bl	80002f8 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("5.FREQUENCY\n");
 80004c6:	4916      	ldr	r1, [pc, #88]	@ (8000520 <setup+0x158>)
 80004c8:	480d      	ldr	r0, [pc, #52]	@ (8000500 <setup+0x138>)
 80004ca:	f004 fcc5 	bl	8004e58 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 125);
 80004ce:	227d      	movs	r2, #125	@ 0x7d
 80004d0:	2173      	movs	r1, #115	@ 0x73
 80004d2:	480b      	ldr	r0, [pc, #44]	@ (8000500 <setup+0x138>)
 80004d4:	f7ff fefc 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 80004d8:	2200      	movs	r2, #0
 80004da:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80004de:	4808      	ldr	r0, [pc, #32]	@ (8000500 <setup+0x138>)
 80004e0:	f7ff ff0a 	bl	80002f8 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("6.INIT PHASE\n");
 80004e4:	490f      	ldr	r1, [pc, #60]	@ (8000524 <setup+0x15c>)
 80004e6:	4806      	ldr	r0, [pc, #24]	@ (8000500 <setup+0x138>)
 80004e8:	f004 fcb6 	bl	8004e58 <_ZN5Print6printfEPKcz>

  lcd.setTextColor(ST77XX_RED, ST77XX_BLACK);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80004f2:	4803      	ldr	r0, [pc, #12]	@ (8000500 <setup+0x138>)
 80004f4:	f7ff ff00 	bl	80002f8 <_ZN12Adafruit_GFX12setTextColorEtt>
//    lcd.drawFastHLine(i, 320-1-i, 240-2*i, ST77XX_YELLOW);
//    lcd.drawFastVLine(i, 80+i, 240-2*i, ST77XX_GREEN);
//    lcd.drawFastVLine(240-1-i, 80+i, 240-2*i, ST77XX_BLUE);
//    HAL_Delay(100);
//  }
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000078 	.word	0x20000078
 8000504:	080059b8 	.word	0x080059b8
 8000508:	080058e0 	.word	0x080058e0
 800050c:	08007704 	.word	0x08007704
 8000510:	080058ec 	.word	0x080058ec
 8000514:	080058f4 	.word	0x080058f4
 8000518:	08005904 	.word	0x08005904
 800051c:	08005910 	.word	0x08005910
 8000520:	08005920 	.word	0x08005920
 8000524:	08005930 	.word	0x08005930

08000528 <lcd_show_picture>:

void lcd_show_picture(uint16_t x, uint16_t y , uint16_t col , uint16_t row , const unsigned char * p)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
 800052e:	4604      	mov	r4, r0
 8000530:	4608      	mov	r0, r1
 8000532:	4611      	mov	r1, r2
 8000534:	461a      	mov	r2, r3
 8000536:	4623      	mov	r3, r4
 8000538:	80fb      	strh	r3, [r7, #6]
 800053a:	4603      	mov	r3, r0
 800053c:	80bb      	strh	r3, [r7, #4]
 800053e:	460b      	mov	r3, r1
 8000540:	807b      	strh	r3, [r7, #2]
 8000542:	4613      	mov	r3, r2
 8000544:	803b      	strh	r3, [r7, #0]
	uint16_t * data = (uint16_t *) p;
 8000546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000548:	617b      	str	r3, [r7, #20]
	for (int i = y ; i < row + y ; ++i)
 800054a:	88bb      	ldrh	r3, [r7, #4]
 800054c:	613b      	str	r3, [r7, #16]
 800054e:	e01a      	b.n	8000586 <lcd_show_picture+0x5e>
	{
		for ( int j = x ; j < col + x ; ++j)
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e00e      	b.n	8000574 <lcd_show_picture+0x4c>
		{
			lcd.drawPixel(j, i, *data++);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	b219      	sxth	r1, r3
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	b218      	sxth	r0, r3
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	1c9a      	adds	r2, r3, #2
 8000562:	617a      	str	r2, [r7, #20]
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	4602      	mov	r2, r0
 8000568:	480c      	ldr	r0, [pc, #48]	@ (800059c <lcd_show_picture+0x74>)
 800056a:	f003 ffe9 	bl	8004540 <_ZN15Adafruit_SPITFT9drawPixelEsst>
		for ( int j = x ; j < col + x ; ++j)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3301      	adds	r3, #1
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	887a      	ldrh	r2, [r7, #2]
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	4413      	add	r3, r2
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	429a      	cmp	r2, r3
 800057e:	dbea      	blt.n	8000556 <lcd_show_picture+0x2e>
	for (int i = y ; i < row + y ; ++i)
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	3301      	adds	r3, #1
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	883a      	ldrh	r2, [r7, #0]
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	4413      	add	r3, r2
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	429a      	cmp	r2, r3
 8000590:	dbde      	blt.n	8000550 <lcd_show_picture+0x28>
		}
	}
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	371c      	adds	r7, #28
 8000598:	46bd      	mov	sp, r7
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	20000078 	.word	0x20000078

080005a0 <lcd_show_num>:
void lcd_show_num(int n)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
	lcd.fillRect(150, 165, 230, 20, BLACK);
 80005a8:	2300      	movs	r3, #0
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	2314      	movs	r3, #20
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	23e6      	movs	r3, #230	@ 0xe6
 80005b2:	22a5      	movs	r2, #165	@ 0xa5
 80005b4:	2196      	movs	r1, #150	@ 0x96
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <lcd_show_num+0x4c>)
 80005b8:	f004 f962 	bl	8004880 <_ZN15Adafruit_SPITFT8fillRectEsssst>
	lcd.setCursor(150, 165);
 80005bc:	22a5      	movs	r2, #165	@ 0xa5
 80005be:	2196      	movs	r1, #150	@ 0x96
 80005c0:	480a      	ldr	r0, [pc, #40]	@ (80005ec <lcd_show_num+0x4c>)
 80005c2:	f7ff fe85 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
	lcd.printf("   ");
 80005c6:	490a      	ldr	r1, [pc, #40]	@ (80005f0 <lcd_show_num+0x50>)
 80005c8:	4808      	ldr	r0, [pc, #32]	@ (80005ec <lcd_show_num+0x4c>)
 80005ca:	f004 fc45 	bl	8004e58 <_ZN5Print6printfEPKcz>
	lcd.setCursor(150, 165);
 80005ce:	22a5      	movs	r2, #165	@ 0xa5
 80005d0:	2196      	movs	r1, #150	@ 0x96
 80005d2:	4806      	ldr	r0, [pc, #24]	@ (80005ec <lcd_show_num+0x4c>)
 80005d4:	f7ff fe7c 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
	lcd.print(n);
 80005d8:	220a      	movs	r2, #10
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <lcd_show_num+0x4c>)
 80005de:	f004 fcb1 	bl	8004f44 <_ZN5Print5printEii>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000078 	.word	0x20000078
 80005f0:	08005940 	.word	0x08005940

080005f4 <lcd_show_str>:
void lcd_show_str(int16_t x, int16_t y,const char * lmf)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	4603      	mov	r3, r0
 80005fc:	603a      	str	r2, [r7, #0]
 80005fe:	80fb      	strh	r3, [r7, #6]
 8000600:	460b      	mov	r3, r1
 8000602:	80bb      	strh	r3, [r7, #4]
	lcd.setCursor(x, y);
 8000604:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800060c:	4619      	mov	r1, r3
 800060e:	480b      	ldr	r0, [pc, #44]	@ (800063c <lcd_show_str+0x48>)
 8000610:	f7ff fe5e 	bl	80002d0 <_ZN12Adafruit_GFX9setCursorEss>
	lcd.fillRect(x, y, 230, 20, BLACK);
 8000614:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000618:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800061c:	2300      	movs	r3, #0
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2314      	movs	r3, #20
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	23e6      	movs	r3, #230	@ 0xe6
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <lcd_show_str+0x48>)
 8000628:	f004 f92a 	bl	8004880 <_ZN15Adafruit_SPITFT8fillRectEsssst>
	lcd.printf(lmf);
 800062c:	6839      	ldr	r1, [r7, #0]
 800062e:	4803      	ldr	r0, [pc, #12]	@ (800063c <lcd_show_str+0x48>)
 8000630:	f004 fc12 	bl	8004e58 <_ZN5Print6printfEPKcz>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000078 	.word	0x20000078

08000640 <lcd_show_black>:
void lcd_show_black(int16_t x, int16_t y , int16_t w, int16_t h)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b085      	sub	sp, #20
 8000644:	af02      	add	r7, sp, #8
 8000646:	4604      	mov	r4, r0
 8000648:	4608      	mov	r0, r1
 800064a:	4611      	mov	r1, r2
 800064c:	461a      	mov	r2, r3
 800064e:	4623      	mov	r3, r4
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	4603      	mov	r3, r0
 8000654:	80bb      	strh	r3, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	807b      	strh	r3, [r7, #2]
 800065a:	4613      	mov	r3, r2
 800065c:	803b      	strh	r3, [r7, #0]
	lcd.fillRect(x, y, w, h, BLACK);
 800065e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000662:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000666:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800066a:	2300      	movs	r3, #0
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4603      	mov	r3, r0
 8000676:	4803      	ldr	r0, [pc, #12]	@ (8000684 <lcd_show_black+0x44>)
 8000678:	f004 f902 	bl	8004880 <_ZN15Adafruit_SPITFT8fillRectEsssst>
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	20000078 	.word	0x20000078

08000688 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA 0xF81F
#define ST77XX_YELLOW 0xFFE0
#define ST77XX_ORANGE 0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4a05      	ldr	r2, [pc, #20]	@ (80006a8 <_ZN15Adafruit_ST77xxD1Ev+0x20>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fe41 	bl	8000320 <_ZN15Adafruit_SPITFTD1Ev>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	08008104 	.word	0x08008104

080006ac <_ZN15Adafruit_ST7789D1Ev>:
#define _ADAFRUIT_ST7789H_

#include "Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	4a05      	ldr	r2, [pc, #20]	@ (80006cc <_ZN15Adafruit_ST7789D1Ev+0x20>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffe3 	bl	8000688 <_ZN15Adafruit_ST77xxD1Ev>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08008084 	.word	0x08008084

080006d0 <_Z41__static_initialization_and_destruction_0ii>:
void loop()
{
  ;
}
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10b      	bne.n	80006f8 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <_Z41__static_initialization_and_destruction_0ii+0x28>
Adafruit_ST7789 lcd(240, 320, lcd_callback);
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80006ec:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006f0:	21f0      	movs	r1, #240	@ 0xf0
 80006f2:	480a      	ldr	r0, [pc, #40]	@ (800071c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80006f4:	f004 fa56 	bl	8004ba4 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d107      	bne.n	800070e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000704:	4293      	cmp	r3, r2
 8000706:	d102      	bne.n	800070e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800070a:	f7ff ffcf 	bl	80006ac <_ZN15Adafruit_ST7789D1Ev>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	08000341 	.word	0x08000341
 800071c:	20000078 	.word	0x20000078

08000720 <_GLOBAL__sub_I__Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
 8000724:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000728:	2001      	movs	r0, #1
 800072a:	f7ff ffd1 	bl	80006d0 <_Z41__static_initialization_and_destruction_0ii>
 800072e:	bd80      	pop	{r7, pc}

08000730 <_GLOBAL__sub_D__Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
 8000734:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ffc9 	bl	80006d0 <_Z41__static_initialization_and_destruction_0ii>
 800073e:	bd80      	pop	{r7, pc}

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b096      	sub	sp, #88	@ 0x58
 8000744:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 ff40 	bl	80015ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 fbfd 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 fd15 	bl	800117c <MX_GPIO_Init>
  MX_DMA_Init();
 8000752:	f000 fce9 	bl	8001128 <MX_DMA_Init>
  MX_SPI1_Init();
 8000756:	f000 fc4f 	bl	8000ff8 <MX_SPI1_Init>
  MX_TIM8_Init();
 800075a:	f000 fc8b 	bl	8001074 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800075e:	f7ff fe33 	bl	80003c8 <setup>
//  uint8_t Direction;
//  uint16_t pre_Capturenum;
//  uint16_t result = 0;
//  int result_2 = 0;

  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000762:	213c      	movs	r1, #60	@ 0x3c
 8000764:	48bc      	ldr	r0, [pc, #752]	@ (8000a58 <main+0x318>)
 8000766:	f002 fe59 	bl	800341c <HAL_TIM_Encoder_Start>
  GPIO_PinState prev = GPIO_PIN_SET;
 800076a:	2301      	movs	r3, #1
 800076c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  int flag = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int Direction =  __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);   //读取电机转动方向
 8000774:	4bb8      	ldr	r3, [pc, #736]	@ (8000a58 <main+0x318>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f003 0310 	and.w	r3, r3, #16
 800077e:	2b10      	cmp	r3, #16
 8000780:	bf0c      	ite	eq
 8000782:	2301      	moveq	r3, #1
 8000784:	2300      	movne	r3, #0
 8000786:	b2db      	uxtb	r3, r3
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
	  int CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 800078a:	4bb3      	ldr	r3, [pc, #716]	@ (8000a58 <main+0x318>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000790:	b21b      	sxth	r3, r3
 8000792:	64bb      	str	r3, [r7, #72]	@ 0x48
	  int counter = CaptureNumber / 4 % 7 ;
 8000794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000796:	2b00      	cmp	r3, #0
 8000798:	da00      	bge.n	800079c <main+0x5c>
 800079a:	3303      	adds	r3, #3
 800079c:	109b      	asrs	r3, r3, #2
 800079e:	461a      	mov	r2, r3
 80007a0:	4bae      	ldr	r3, [pc, #696]	@ (8000a5c <main+0x31c>)
 80007a2:	fb83 1302 	smull	r1, r3, r3, r2
 80007a6:	4413      	add	r3, r2
 80007a8:	1099      	asrs	r1, r3, #2
 80007aa:	17d3      	asrs	r3, r2, #31
 80007ac:	1ac9      	subs	r1, r1, r3
 80007ae:	460b      	mov	r3, r1
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	1a5b      	subs	r3, r3, r1
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	623b      	str	r3, [r7, #32]
	  int mode = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
	  int mode_t = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	647b      	str	r3, [r7, #68]	@ 0x44
	  int ampl = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
	  int ampl_t = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	643b      	str	r3, [r7, #64]	@ 0x40
	  int modual = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
	  int modual_t = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  int delay = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
	  int delay_t = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	  int atten = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
	  int atten_t = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	637b      	str	r3, [r7, #52]	@ 0x34
	  int freq = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
	  int freq_t = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
	  int phase = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
	  int phase_t = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  switch(counter)
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	f200 81aa 	bhi.w	8000b4c <main+0x40c>
 80007f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000800 <main+0xc0>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	0800081d 	.word	0x0800081d
 8000804:	0800088f 	.word	0x0800088f
 8000808:	08000901 	.word	0x08000901
 800080c:	08000973 	.word	0x08000973
 8000810:	080009e5 	.word	0x080009e5
 8000814:	08000a69 	.word	0x08000a69
 8000818:	08000adb 	.word	0x08000adb
	  {
	  case 0:
		  lcd_show_picture(101, 5 , 12, 20, MenuCursor16x16);
 800081c:	4b90      	ldr	r3, [pc, #576]	@ (8000a60 <main+0x320>)
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2314      	movs	r3, #20
 8000822:	220c      	movs	r2, #12
 8000824:	2105      	movs	r1, #5
 8000826:	2065      	movs	r0, #101	@ 0x65
 8000828:	f7ff fe7e 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 800082c:	4b8d      	ldr	r3, [pc, #564]	@ (8000a64 <main+0x324>)
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2314      	movs	r3, #20
 8000832:	220c      	movs	r2, #12
 8000834:	2119      	movs	r1, #25
 8000836:	2065      	movs	r0, #101	@ 0x65
 8000838:	f7ff fe76 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 800083c:	4b89      	ldr	r3, [pc, #548]	@ (8000a64 <main+0x324>)
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2314      	movs	r3, #20
 8000842:	220c      	movs	r2, #12
 8000844:	212d      	movs	r1, #45	@ 0x2d
 8000846:	2065      	movs	r0, #101	@ 0x65
 8000848:	f7ff fe6e 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 800084c:	4b85      	ldr	r3, [pc, #532]	@ (8000a64 <main+0x324>)
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2314      	movs	r3, #20
 8000852:	220c      	movs	r2, #12
 8000854:	2141      	movs	r1, #65	@ 0x41
 8000856:	2065      	movs	r0, #101	@ 0x65
 8000858:	f7ff fe66 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 800085c:	4b81      	ldr	r3, [pc, #516]	@ (8000a64 <main+0x324>)
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2314      	movs	r3, #20
 8000862:	220c      	movs	r2, #12
 8000864:	2155      	movs	r1, #85	@ 0x55
 8000866:	2065      	movs	r0, #101	@ 0x65
 8000868:	f7ff fe5e 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 800086c:	4b7d      	ldr	r3, [pc, #500]	@ (8000a64 <main+0x324>)
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2314      	movs	r3, #20
 8000872:	220c      	movs	r2, #12
 8000874:	2169      	movs	r1, #105	@ 0x69
 8000876:	2065      	movs	r0, #101	@ 0x65
 8000878:	f7ff fe56 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 800087c:	4b79      	ldr	r3, [pc, #484]	@ (8000a64 <main+0x324>)
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2314      	movs	r3, #20
 8000882:	220c      	movs	r2, #12
 8000884:	217d      	movs	r1, #125	@ 0x7d
 8000886:	2065      	movs	r0, #101	@ 0x65
 8000888:	f7ff fe4e 	bl	8000528 <lcd_show_picture>
		  break;
 800088c:	e15e      	b.n	8000b4c <main+0x40c>
	  case 1:
		  lcd_show_picture(101, 25 , 12, 20, MenuCursor16x16);
 800088e:	4b74      	ldr	r3, [pc, #464]	@ (8000a60 <main+0x320>)
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2314      	movs	r3, #20
 8000894:	220c      	movs	r2, #12
 8000896:	2119      	movs	r1, #25
 8000898:	2065      	movs	r0, #101	@ 0x65
 800089a:	f7ff fe45 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 800089e:	4b71      	ldr	r3, [pc, #452]	@ (8000a64 <main+0x324>)
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2314      	movs	r3, #20
 80008a4:	220c      	movs	r2, #12
 80008a6:	2105      	movs	r1, #5
 80008a8:	2065      	movs	r0, #101	@ 0x65
 80008aa:	f7ff fe3d 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 80008ae:	4b6d      	ldr	r3, [pc, #436]	@ (8000a64 <main+0x324>)
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2314      	movs	r3, #20
 80008b4:	220c      	movs	r2, #12
 80008b6:	212d      	movs	r1, #45	@ 0x2d
 80008b8:	2065      	movs	r0, #101	@ 0x65
 80008ba:	f7ff fe35 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 80008be:	4b69      	ldr	r3, [pc, #420]	@ (8000a64 <main+0x324>)
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2314      	movs	r3, #20
 80008c4:	220c      	movs	r2, #12
 80008c6:	2141      	movs	r1, #65	@ 0x41
 80008c8:	2065      	movs	r0, #101	@ 0x65
 80008ca:	f7ff fe2d 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 80008ce:	4b65      	ldr	r3, [pc, #404]	@ (8000a64 <main+0x324>)
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2314      	movs	r3, #20
 80008d4:	220c      	movs	r2, #12
 80008d6:	2155      	movs	r1, #85	@ 0x55
 80008d8:	2065      	movs	r0, #101	@ 0x65
 80008da:	f7ff fe25 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 80008de:	4b61      	ldr	r3, [pc, #388]	@ (8000a64 <main+0x324>)
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2314      	movs	r3, #20
 80008e4:	220c      	movs	r2, #12
 80008e6:	2169      	movs	r1, #105	@ 0x69
 80008e8:	2065      	movs	r0, #101	@ 0x65
 80008ea:	f7ff fe1d 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 80008ee:	4b5d      	ldr	r3, [pc, #372]	@ (8000a64 <main+0x324>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2314      	movs	r3, #20
 80008f4:	220c      	movs	r2, #12
 80008f6:	217d      	movs	r1, #125	@ 0x7d
 80008f8:	2065      	movs	r0, #101	@ 0x65
 80008fa:	f7ff fe15 	bl	8000528 <lcd_show_picture>
		  break;
 80008fe:	e125      	b.n	8000b4c <main+0x40c>
	  case 2:
		  lcd_show_picture(101, 45 , 12, 20, MenuCursor16x16);
 8000900:	4b57      	ldr	r3, [pc, #348]	@ (8000a60 <main+0x320>)
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2314      	movs	r3, #20
 8000906:	220c      	movs	r2, #12
 8000908:	212d      	movs	r1, #45	@ 0x2d
 800090a:	2065      	movs	r0, #101	@ 0x65
 800090c:	f7ff fe0c 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8000910:	4b54      	ldr	r3, [pc, #336]	@ (8000a64 <main+0x324>)
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2314      	movs	r3, #20
 8000916:	220c      	movs	r2, #12
 8000918:	2119      	movs	r1, #25
 800091a:	2065      	movs	r0, #101	@ 0x65
 800091c:	f7ff fe04 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8000920:	4b50      	ldr	r3, [pc, #320]	@ (8000a64 <main+0x324>)
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2314      	movs	r3, #20
 8000926:	220c      	movs	r2, #12
 8000928:	2105      	movs	r1, #5
 800092a:	2065      	movs	r0, #101	@ 0x65
 800092c:	f7ff fdfc 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8000930:	4b4c      	ldr	r3, [pc, #304]	@ (8000a64 <main+0x324>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2314      	movs	r3, #20
 8000936:	220c      	movs	r2, #12
 8000938:	2141      	movs	r1, #65	@ 0x41
 800093a:	2065      	movs	r0, #101	@ 0x65
 800093c:	f7ff fdf4 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8000940:	4b48      	ldr	r3, [pc, #288]	@ (8000a64 <main+0x324>)
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2314      	movs	r3, #20
 8000946:	220c      	movs	r2, #12
 8000948:	2155      	movs	r1, #85	@ 0x55
 800094a:	2065      	movs	r0, #101	@ 0x65
 800094c:	f7ff fdec 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8000950:	4b44      	ldr	r3, [pc, #272]	@ (8000a64 <main+0x324>)
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2314      	movs	r3, #20
 8000956:	220c      	movs	r2, #12
 8000958:	2169      	movs	r1, #105	@ 0x69
 800095a:	2065      	movs	r0, #101	@ 0x65
 800095c:	f7ff fde4 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8000960:	4b40      	ldr	r3, [pc, #256]	@ (8000a64 <main+0x324>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2314      	movs	r3, #20
 8000966:	220c      	movs	r2, #12
 8000968:	217d      	movs	r1, #125	@ 0x7d
 800096a:	2065      	movs	r0, #101	@ 0x65
 800096c:	f7ff fddc 	bl	8000528 <lcd_show_picture>
		  break;
 8000970:	e0ec      	b.n	8000b4c <main+0x40c>
	  case 3:
		  lcd_show_picture(101, 65 , 12, 20, MenuCursor16x16);
 8000972:	4b3b      	ldr	r3, [pc, #236]	@ (8000a60 <main+0x320>)
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2314      	movs	r3, #20
 8000978:	220c      	movs	r2, #12
 800097a:	2141      	movs	r1, #65	@ 0x41
 800097c:	2065      	movs	r0, #101	@ 0x65
 800097e:	f7ff fdd3 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8000982:	4b38      	ldr	r3, [pc, #224]	@ (8000a64 <main+0x324>)
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2314      	movs	r3, #20
 8000988:	220c      	movs	r2, #12
 800098a:	2119      	movs	r1, #25
 800098c:	2065      	movs	r0, #101	@ 0x65
 800098e:	f7ff fdcb 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8000992:	4b34      	ldr	r3, [pc, #208]	@ (8000a64 <main+0x324>)
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2314      	movs	r3, #20
 8000998:	220c      	movs	r2, #12
 800099a:	212d      	movs	r1, #45	@ 0x2d
 800099c:	2065      	movs	r0, #101	@ 0x65
 800099e:	f7ff fdc3 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 80009a2:	4b30      	ldr	r3, [pc, #192]	@ (8000a64 <main+0x324>)
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2314      	movs	r3, #20
 80009a8:	220c      	movs	r2, #12
 80009aa:	2105      	movs	r1, #5
 80009ac:	2065      	movs	r0, #101	@ 0x65
 80009ae:	f7ff fdbb 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 80009b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <main+0x324>)
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2314      	movs	r3, #20
 80009b8:	220c      	movs	r2, #12
 80009ba:	2155      	movs	r1, #85	@ 0x55
 80009bc:	2065      	movs	r0, #101	@ 0x65
 80009be:	f7ff fdb3 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 80009c2:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <main+0x324>)
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2314      	movs	r3, #20
 80009c8:	220c      	movs	r2, #12
 80009ca:	2169      	movs	r1, #105	@ 0x69
 80009cc:	2065      	movs	r0, #101	@ 0x65
 80009ce:	f7ff fdab 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 80009d2:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <main+0x324>)
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2314      	movs	r3, #20
 80009d8:	220c      	movs	r2, #12
 80009da:	217d      	movs	r1, #125	@ 0x7d
 80009dc:	2065      	movs	r0, #101	@ 0x65
 80009de:	f7ff fda3 	bl	8000528 <lcd_show_picture>
		  break;
 80009e2:	e0b3      	b.n	8000b4c <main+0x40c>
	  case 4:
		  lcd_show_picture(101, 85 , 12, 20, MenuCursor16x16);
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <main+0x320>)
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2314      	movs	r3, #20
 80009ea:	220c      	movs	r2, #12
 80009ec:	2155      	movs	r1, #85	@ 0x55
 80009ee:	2065      	movs	r0, #101	@ 0x65
 80009f0:	f7ff fd9a 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <main+0x324>)
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2314      	movs	r3, #20
 80009fa:	220c      	movs	r2, #12
 80009fc:	2119      	movs	r1, #25
 80009fe:	2065      	movs	r0, #101	@ 0x65
 8000a00:	f7ff fd92 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8000a04:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <main+0x324>)
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2314      	movs	r3, #20
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	212d      	movs	r1, #45	@ 0x2d
 8000a0e:	2065      	movs	r0, #101	@ 0x65
 8000a10:	f7ff fd8a 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <main+0x324>)
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2314      	movs	r3, #20
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	2141      	movs	r1, #65	@ 0x41
 8000a1e:	2065      	movs	r0, #101	@ 0x65
 8000a20:	f7ff fd82 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <main+0x324>)
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2314      	movs	r3, #20
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	2105      	movs	r1, #5
 8000a2e:	2065      	movs	r0, #101	@ 0x65
 8000a30:	f7ff fd7a 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <main+0x324>)
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2314      	movs	r3, #20
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	2169      	movs	r1, #105	@ 0x69
 8000a3e:	2065      	movs	r0, #101	@ 0x65
 8000a40:	f7ff fd72 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <main+0x324>)
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2314      	movs	r3, #20
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	217d      	movs	r1, #125	@ 0x7d
 8000a4e:	2065      	movs	r0, #101	@ 0x65
 8000a50:	f7ff fd6a 	bl	8000528 <lcd_show_picture>
		  break;
 8000a54:	e07a      	b.n	8000b4c <main+0x40c>
 8000a56:	bf00      	nop
 8000a58:	20000178 	.word	0x20000178
 8000a5c:	92492493 	.word	0x92492493
 8000a60:	08007704 	.word	0x08007704
 8000a64:	080078e4 	.word	0x080078e4
	  case 5:
		  lcd_show_picture(101, 105 , 12, 20, MenuCursor16x16);
 8000a68:	4ba3      	ldr	r3, [pc, #652]	@ (8000cf8 <main+0x5b8>)
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2314      	movs	r3, #20
 8000a6e:	220c      	movs	r2, #12
 8000a70:	2169      	movs	r1, #105	@ 0x69
 8000a72:	2065      	movs	r0, #101	@ 0x65
 8000a74:	f7ff fd58 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8000a78:	4ba0      	ldr	r3, [pc, #640]	@ (8000cfc <main+0x5bc>)
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2314      	movs	r3, #20
 8000a7e:	220c      	movs	r2, #12
 8000a80:	2119      	movs	r1, #25
 8000a82:	2065      	movs	r0, #101	@ 0x65
 8000a84:	f7ff fd50 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8000a88:	4b9c      	ldr	r3, [pc, #624]	@ (8000cfc <main+0x5bc>)
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	220c      	movs	r2, #12
 8000a90:	212d      	movs	r1, #45	@ 0x2d
 8000a92:	2065      	movs	r0, #101	@ 0x65
 8000a94:	f7ff fd48 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8000a98:	4b98      	ldr	r3, [pc, #608]	@ (8000cfc <main+0x5bc>)
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2314      	movs	r3, #20
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	2141      	movs	r1, #65	@ 0x41
 8000aa2:	2065      	movs	r0, #101	@ 0x65
 8000aa4:	f7ff fd40 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8000aa8:	4b94      	ldr	r3, [pc, #592]	@ (8000cfc <main+0x5bc>)
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2314      	movs	r3, #20
 8000aae:	220c      	movs	r2, #12
 8000ab0:	2155      	movs	r1, #85	@ 0x55
 8000ab2:	2065      	movs	r0, #101	@ 0x65
 8000ab4:	f7ff fd38 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8000ab8:	4b90      	ldr	r3, [pc, #576]	@ (8000cfc <main+0x5bc>)
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2314      	movs	r3, #20
 8000abe:	220c      	movs	r2, #12
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	2065      	movs	r0, #101	@ 0x65
 8000ac4:	f7ff fd30 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8000ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8000cfc <main+0x5bc>)
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2314      	movs	r3, #20
 8000ace:	220c      	movs	r2, #12
 8000ad0:	217d      	movs	r1, #125	@ 0x7d
 8000ad2:	2065      	movs	r0, #101	@ 0x65
 8000ad4:	f7ff fd28 	bl	8000528 <lcd_show_picture>
		  break;
 8000ad8:	e038      	b.n	8000b4c <main+0x40c>
	  case 6:
		  lcd_show_picture(101, 125 , 12, 20, MenuCursor16x16);
 8000ada:	4b87      	ldr	r3, [pc, #540]	@ (8000cf8 <main+0x5b8>)
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2314      	movs	r3, #20
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	217d      	movs	r1, #125	@ 0x7d
 8000ae4:	2065      	movs	r0, #101	@ 0x65
 8000ae6:	f7ff fd1f 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8000aea:	4b84      	ldr	r3, [pc, #528]	@ (8000cfc <main+0x5bc>)
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2314      	movs	r3, #20
 8000af0:	220c      	movs	r2, #12
 8000af2:	2119      	movs	r1, #25
 8000af4:	2065      	movs	r0, #101	@ 0x65
 8000af6:	f7ff fd17 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8000afa:	4b80      	ldr	r3, [pc, #512]	@ (8000cfc <main+0x5bc>)
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2314      	movs	r3, #20
 8000b00:	220c      	movs	r2, #12
 8000b02:	212d      	movs	r1, #45	@ 0x2d
 8000b04:	2065      	movs	r0, #101	@ 0x65
 8000b06:	f7ff fd0f 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8000b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8000cfc <main+0x5bc>)
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2314      	movs	r3, #20
 8000b10:	220c      	movs	r2, #12
 8000b12:	2141      	movs	r1, #65	@ 0x41
 8000b14:	2065      	movs	r0, #101	@ 0x65
 8000b16:	f7ff fd07 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8000b1a:	4b78      	ldr	r3, [pc, #480]	@ (8000cfc <main+0x5bc>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2314      	movs	r3, #20
 8000b20:	220c      	movs	r2, #12
 8000b22:	2155      	movs	r1, #85	@ 0x55
 8000b24:	2065      	movs	r0, #101	@ 0x65
 8000b26:	f7ff fcff 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8000b2a:	4b74      	ldr	r3, [pc, #464]	@ (8000cfc <main+0x5bc>)
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2314      	movs	r3, #20
 8000b30:	220c      	movs	r2, #12
 8000b32:	2169      	movs	r1, #105	@ 0x69
 8000b34:	2065      	movs	r0, #101	@ 0x65
 8000b36:	f7ff fcf7 	bl	8000528 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8000b3a:	4b70      	ldr	r3, [pc, #448]	@ (8000cfc <main+0x5bc>)
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2314      	movs	r3, #20
 8000b40:	220c      	movs	r2, #12
 8000b42:	2105      	movs	r1, #5
 8000b44:	2065      	movs	r0, #101	@ 0x65
 8000b46:	f7ff fcef 	bl	8000528 <lcd_show_picture>
		  break;
 8000b4a:	bf00      	nop
	  }
	  GPIO_PinState curr = HAL_GPIO_ReadPin(GPIOC, 1<<13);
 8000b4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b50:	486b      	ldr	r0, [pc, #428]	@ (8000d00 <main+0x5c0>)
 8000b52:	f001 fa19 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000b56:	4603      	mov	r3, r0
 8000b58:	70fb      	strb	r3, [r7, #3]
	  if (prev && !curr)
 8000b5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 81d7 	beq.w	8000f12 <main+0x7d2>
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 81d3 	bne.w	8000f12 <main+0x7d2>
	  {
		  switch(counter)
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	f200 81c0 	bhi.w	8000ef4 <main+0x7b4>
 8000b74:	a201      	add	r2, pc, #4	@ (adr r2, 8000b7c <main+0x43c>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b99 	.word	0x08000b99
 8000b80:	08000c0f 	.word	0x08000c0f
 8000b84:	08000c83 	.word	0x08000c83
 8000b88:	08000d2d 	.word	0x08000d2d
 8000b8c:	08000da1 	.word	0x08000da1
 8000b90:	08000e11 	.word	0x08000e11
 8000b94:	08000e83 	.word	0x08000e83
		  {
		  case 0:
			  lcd_show_str(100, 145,"MODE:\n");
 8000b98:	4a5a      	ldr	r2, [pc, #360]	@ (8000d04 <main+0x5c4>)
 8000b9a:	2191      	movs	r1, #145	@ 0x91
 8000b9c:	2064      	movs	r0, #100	@ 0x64
 8000b9e:	f7ff fd29 	bl	80005f4 <lcd_show_str>
			  while(1)
			  {
				  mode = abs((CaptureNumber) / 4 % 2 + 1);
 8000ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	da00      	bge.n	8000baa <main+0x46a>
 8000ba8:	3303      	adds	r3, #3
 8000baa:	109b      	asrs	r3, r3, #2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	bfb8      	it	lt
 8000bb4:	425b      	neglt	r3, r3
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	bfb8      	it	lt
 8000bbc:	425b      	neglt	r3, r3
 8000bbe:	61fb      	str	r3, [r7, #28]
				  //lcd_show_str(101,165,"CW");
				  if(mode != mode_t)
 8000bc0:	69fa      	ldr	r2, [r7, #28]
 8000bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d00f      	beq.n	8000be8 <main+0x4a8>
				  {
					  mode_t = mode;
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	647b      	str	r3, [r7, #68]	@ 0x44
					  if (mode < 2) lcd_show_str(101,165,"CW");
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	dc05      	bgt.n	8000bde <main+0x49e>
 8000bd2:	4a4d      	ldr	r2, [pc, #308]	@ (8000d08 <main+0x5c8>)
 8000bd4:	21a5      	movs	r1, #165	@ 0xa5
 8000bd6:	2065      	movs	r0, #101	@ 0x65
 8000bd8:	f7ff fd0c 	bl	80005f4 <lcd_show_str>
 8000bdc:	e004      	b.n	8000be8 <main+0x4a8>
					  else lcd_show_str(101,165,"AM");
 8000bde:	4a4b      	ldr	r2, [pc, #300]	@ (8000d0c <main+0x5cc>)
 8000be0:	21a5      	movs	r1, #165	@ 0xa5
 8000be2:	2065      	movs	r0, #101	@ 0x65
 8000be4:	f7ff fd06 	bl	80005f4 <lcd_show_str>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8000be8:	4b49      	ldr	r3, [pc, #292]	@ (8000d10 <main+0x5d0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	4847      	ldr	r0, [pc, #284]	@ (8000d14 <main+0x5d4>)
 8000bf6:	f001 f9c7 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1d0      	bne.n	8000ba2 <main+0x462>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8000c00:	4a45      	ldr	r2, [pc, #276]	@ (8000d18 <main+0x5d8>)
 8000c02:	21b9      	movs	r1, #185	@ 0xb9
 8000c04:	2065      	movs	r0, #101	@ 0x65
 8000c06:	f7ff fcf5 	bl	80005f4 <lcd_show_str>
					  break;
 8000c0a:	bf00      	nop
				  }
			  }
			  // api
			  break;
 8000c0c:	e172      	b.n	8000ef4 <main+0x7b4>
		  case 1:
			  lcd_show_str(100, 145,"AMPL:\n");
 8000c0e:	4a43      	ldr	r2, [pc, #268]	@ (8000d1c <main+0x5dc>)
 8000c10:	2191      	movs	r1, #145	@ 0x91
 8000c12:	2064      	movs	r0, #100	@ 0x64
 8000c14:	f7ff fcee 	bl	80005f4 <lcd_show_str>
			  while (1)
			  {
				  ampl = abs((CaptureNumber) / 4 % 10 * 100 + 100);
 8000c18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	da00      	bge.n	8000c20 <main+0x4e0>
 8000c1e:	3303      	adds	r3, #3
 8000c20:	109b      	asrs	r3, r3, #2
 8000c22:	4619      	mov	r1, r3
 8000c24:	4b3e      	ldr	r3, [pc, #248]	@ (8000d20 <main+0x5e0>)
 8000c26:	fb83 2301 	smull	r2, r3, r3, r1
 8000c2a:	109a      	asrs	r2, r3, #2
 8000c2c:	17cb      	asrs	r3, r1, #31
 8000c2e:	1ad2      	subs	r2, r2, r3
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	1aca      	subs	r2, r1, r3
 8000c3a:	1c53      	adds	r3, r2, #1
 8000c3c:	2264      	movs	r2, #100	@ 0x64
 8000c3e:	fb02 f303 	mul.w	r3, r2, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bfb8      	it	lt
 8000c46:	425b      	neglt	r3, r3
 8000c48:	61bb      	str	r3, [r7, #24]
				  if(ampl != ampl_t)
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d004      	beq.n	8000c5c <main+0x51c>
				  {
					  ampl_t = ampl;
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	643b      	str	r3, [r7, #64]	@ 0x40
					  lcd_show_num(ampl);
 8000c56:	69b8      	ldr	r0, [r7, #24]
 8000c58:	f7ff fca2 	bl	80005a0 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d10 <main+0x5d0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	64bb      	str	r3, [r7, #72]	@ 0x48
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8000c66:	2104      	movs	r1, #4
 8000c68:	482a      	ldr	r0, [pc, #168]	@ (8000d14 <main+0x5d4>)
 8000c6a:	f001 f98d 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1d1      	bne.n	8000c18 <main+0x4d8>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8000c74:	4a28      	ldr	r2, [pc, #160]	@ (8000d18 <main+0x5d8>)
 8000c76:	21b9      	movs	r1, #185	@ 0xb9
 8000c78:	2065      	movs	r0, #101	@ 0x65
 8000c7a:	f7ff fcbb 	bl	80005f4 <lcd_show_str>
					  break;
 8000c7e:	bf00      	nop
				  }
			  }
			  //need api
			  break;
 8000c80:	e138      	b.n	8000ef4 <main+0x7b4>
		  case 2:
			  lcd_show_str(100, 145,"MODULATION:\n");
 8000c82:	4a28      	ldr	r2, [pc, #160]	@ (8000d24 <main+0x5e4>)
 8000c84:	2191      	movs	r1, #145	@ 0x91
 8000c86:	2064      	movs	r0, #100	@ 0x64
 8000c88:	f7ff fcb4 	bl	80005f4 <lcd_show_str>
			  while (1)
			  {
				  modual = abs((((CaptureNumber) / 4 )% 7) * 10 + 30);
 8000c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	da00      	bge.n	8000c94 <main+0x554>
 8000c92:	3303      	adds	r3, #3
 8000c94:	109b      	asrs	r3, r3, #2
 8000c96:	4619      	mov	r1, r3
 8000c98:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <main+0x5e8>)
 8000c9a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c9e:	440b      	add	r3, r1
 8000ca0:	109a      	asrs	r2, r3, #2
 8000ca2:	17cb      	asrs	r3, r1, #31
 8000ca4:	1ad2      	subs	r2, r2, r3
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	1aca      	subs	r2, r1, r3
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	331e      	adds	r3, #30
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bfb8      	it	lt
 8000cbc:	425b      	neglt	r3, r3
 8000cbe:	617b      	str	r3, [r7, #20]
				  if(modual != modual_t)
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d004      	beq.n	8000cd2 <main+0x592>
				  {
					  modual_t = modual;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
					  lcd_show_num(modual);
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f7ff fc67 	bl	80005a0 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <main+0x5d0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	64bb      	str	r3, [r7, #72]	@ 0x48
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8000cdc:	2104      	movs	r1, #4
 8000cde:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <main+0x5d4>)
 8000ce0:	f001 f952 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1d0      	bne.n	8000c8c <main+0x54c>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8000cea:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <main+0x5d8>)
 8000cec:	21b9      	movs	r1, #185	@ 0xb9
 8000cee:	2065      	movs	r0, #101	@ 0x65
 8000cf0:	f7ff fc80 	bl	80005f4 <lcd_show_str>
					  break;
 8000cf4:	bf00      	nop
				  }
			  }
			  //need api
			  break;
 8000cf6:	e0fd      	b.n	8000ef4 <main+0x7b4>
 8000cf8:	08007704 	.word	0x08007704
 8000cfc:	080078e4 	.word	0x080078e4
 8000d00:	48000800 	.word	0x48000800
 8000d04:	08005944 	.word	0x08005944
 8000d08:	0800594c 	.word	0x0800594c
 8000d0c:	08005950 	.word	0x08005950
 8000d10:	20000178 	.word	0x20000178
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	08005954 	.word	0x08005954
 8000d1c:	08005960 	.word	0x08005960
 8000d20:	66666667 	.word	0x66666667
 8000d24:	08005968 	.word	0x08005968
 8000d28:	92492493 	.word	0x92492493
		  case 3:
			  lcd_show_str(100, 145,"DELAY:\n");
 8000d2c:	4a7b      	ldr	r2, [pc, #492]	@ (8000f1c <main+0x7dc>)
 8000d2e:	2191      	movs	r1, #145	@ 0x91
 8000d30:	2064      	movs	r0, #100	@ 0x64
 8000d32:	f7ff fc5f 	bl	80005f4 <lcd_show_str>
			  while (1)
			  {
				  delay = abs((CaptureNumber) / 4 % 6 * 30 + 50);
 8000d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da00      	bge.n	8000d3e <main+0x5fe>
 8000d3c:	3303      	adds	r3, #3
 8000d3e:	109b      	asrs	r3, r3, #2
 8000d40:	4619      	mov	r1, r3
 8000d42:	4b77      	ldr	r3, [pc, #476]	@ (8000f20 <main+0x7e0>)
 8000d44:	fb83 3201 	smull	r3, r2, r3, r1
 8000d48:	17cb      	asrs	r3, r1, #31
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	1aca      	subs	r2, r1, r3
 8000d56:	4613      	mov	r3, r2
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	3332      	adds	r3, #50	@ 0x32
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bfb8      	it	lt
 8000d64:	425b      	neglt	r3, r3
 8000d66:	613b      	str	r3, [r7, #16]
				  if(delay != delay_t)
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d004      	beq.n	8000d7a <main+0x63a>
				  {
					  delay_t = delay;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	63bb      	str	r3, [r7, #56]	@ 0x38
					  lcd_show_num(delay);
 8000d74:	6938      	ldr	r0, [r7, #16]
 8000d76:	f7ff fc13 	bl	80005a0 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8000d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8000f24 <main+0x7e4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	64bb      	str	r3, [r7, #72]	@ 0x48
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8000d84:	2104      	movs	r1, #4
 8000d86:	4868      	ldr	r0, [pc, #416]	@ (8000f28 <main+0x7e8>)
 8000d88:	f001 f8fe 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1d1      	bne.n	8000d36 <main+0x5f6>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8000d92:	4a66      	ldr	r2, [pc, #408]	@ (8000f2c <main+0x7ec>)
 8000d94:	21b9      	movs	r1, #185	@ 0xb9
 8000d96:	2065      	movs	r0, #101	@ 0x65
 8000d98:	f7ff fc2c 	bl	80005f4 <lcd_show_str>
					  break;
 8000d9c:	bf00      	nop
				  }
			  }
			  //need api
			  break;
 8000d9e:	e0a9      	b.n	8000ef4 <main+0x7b4>
		  case 4:
			  lcd_show_str(100, 145,"ATTENUATION:\n");
 8000da0:	4a63      	ldr	r2, [pc, #396]	@ (8000f30 <main+0x7f0>)
 8000da2:	2191      	movs	r1, #145	@ 0x91
 8000da4:	2064      	movs	r0, #100	@ 0x64
 8000da6:	f7ff fc25 	bl	80005f4 <lcd_show_str>
			  while (1)
			  {
				  atten = abs((CaptureNumber) / 4 % 11 * 2);
 8000daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	da00      	bge.n	8000db2 <main+0x672>
 8000db0:	3303      	adds	r3, #3
 8000db2:	109b      	asrs	r3, r3, #2
 8000db4:	4619      	mov	r1, r3
 8000db6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f34 <main+0x7f4>)
 8000db8:	fb83 2301 	smull	r2, r3, r3, r1
 8000dbc:	105a      	asrs	r2, r3, #1
 8000dbe:	17cb      	asrs	r3, r1, #31
 8000dc0:	1ad2      	subs	r2, r2, r3
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	1aca      	subs	r2, r1, r3
 8000dce:	0053      	lsls	r3, r2, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bfb8      	it	lt
 8000dd4:	425b      	neglt	r3, r3
 8000dd6:	60fb      	str	r3, [r7, #12]
				  if(atten != atten_t)
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d004      	beq.n	8000dea <main+0x6aa>
				  {
					  atten_t = atten;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
					  lcd_show_num(atten);
 8000de4:	68f8      	ldr	r0, [r7, #12]
 8000de6:	f7ff fbdb 	bl	80005a0 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8000dea:	4b4e      	ldr	r3, [pc, #312]	@ (8000f24 <main+0x7e4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	64bb      	str	r3, [r7, #72]	@ 0x48
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8000df4:	2104      	movs	r1, #4
 8000df6:	484c      	ldr	r0, [pc, #304]	@ (8000f28 <main+0x7e8>)
 8000df8:	f001 f8c6 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1d3      	bne.n	8000daa <main+0x66a>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8000e02:	4a4a      	ldr	r2, [pc, #296]	@ (8000f2c <main+0x7ec>)
 8000e04:	21b9      	movs	r1, #185	@ 0xb9
 8000e06:	2065      	movs	r0, #101	@ 0x65
 8000e08:	f7ff fbf4 	bl	80005f4 <lcd_show_str>
					  break;
 8000e0c:	bf00      	nop
				  }
			  }
			  //need api
			  break;
 8000e0e:	e071      	b.n	8000ef4 <main+0x7b4>
		  case 5:
			  lcd_show_str(100, 145,"FREQUENCY:\n");
 8000e10:	4a49      	ldr	r2, [pc, #292]	@ (8000f38 <main+0x7f8>)
 8000e12:	2191      	movs	r1, #145	@ 0x91
 8000e14:	2064      	movs	r0, #100	@ 0x64
 8000e16:	f7ff fbed 	bl	80005f4 <lcd_show_str>
			  while (1)
			  {
				  freq = abs((CaptureNumber) / 4 % 11 + 30);
 8000e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	da00      	bge.n	8000e22 <main+0x6e2>
 8000e20:	3303      	adds	r3, #3
 8000e22:	109b      	asrs	r3, r3, #2
 8000e24:	4619      	mov	r1, r3
 8000e26:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <main+0x7f4>)
 8000e28:	fb83 2301 	smull	r2, r3, r3, r1
 8000e2c:	105a      	asrs	r2, r3, #1
 8000e2e:	17cb      	asrs	r3, r1, #31
 8000e30:	1ad2      	subs	r2, r2, r3
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	1aca      	subs	r2, r1, r3
 8000e3e:	f102 031e 	add.w	r3, r2, #30
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bfb8      	it	lt
 8000e46:	425b      	neglt	r3, r3
 8000e48:	60bb      	str	r3, [r7, #8]
				  if(freq != freq_t)
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d004      	beq.n	8000e5c <main+0x71c>
				  {
					  freq_t = freq;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
					  lcd_show_num(freq);
 8000e56:	68b8      	ldr	r0, [r7, #8]
 8000e58:	f7ff fba2 	bl	80005a0 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8000e5c:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <main+0x7e4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	64bb      	str	r3, [r7, #72]	@ 0x48
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8000e66:	2104      	movs	r1, #4
 8000e68:	482f      	ldr	r0, [pc, #188]	@ (8000f28 <main+0x7e8>)
 8000e6a:	f001 f88d 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1d2      	bne.n	8000e1a <main+0x6da>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8000e74:	4a2d      	ldr	r2, [pc, #180]	@ (8000f2c <main+0x7ec>)
 8000e76:	21b9      	movs	r1, #185	@ 0xb9
 8000e78:	2065      	movs	r0, #101	@ 0x65
 8000e7a:	f7ff fbbb 	bl	80005f4 <lcd_show_str>
					  break;
 8000e7e:	bf00      	nop
				  }
			  }
			  //need api
			  break;
 8000e80:	e038      	b.n	8000ef4 <main+0x7b4>
		  case 6:
			  lcd_show_str(100, 145,"INIT PHASE\n");
 8000e82:	4a2e      	ldr	r2, [pc, #184]	@ (8000f3c <main+0x7fc>)
 8000e84:	2191      	movs	r1, #145	@ 0x91
 8000e86:	2064      	movs	r0, #100	@ 0x64
 8000e88:	f7ff fbb4 	bl	80005f4 <lcd_show_str>
			  while (1)
			  {
				  phase = abs((CaptureNumber) / 4 % 7 * 30);
 8000e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da00      	bge.n	8000e94 <main+0x754>
 8000e92:	3303      	adds	r3, #3
 8000e94:	109b      	asrs	r3, r3, #2
 8000e96:	4619      	mov	r1, r3
 8000e98:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <main+0x800>)
 8000e9a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e9e:	440b      	add	r3, r1
 8000ea0:	109a      	asrs	r2, r3, #2
 8000ea2:	17cb      	asrs	r3, r1, #31
 8000ea4:	1ad2      	subs	r2, r2, r3
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	1aca      	subs	r2, r1, r3
 8000eae:	4613      	mov	r3, r2
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bfb8      	it	lt
 8000eba:	425b      	neglt	r3, r3
 8000ebc:	607b      	str	r3, [r7, #4]
				  if(phase != phase_t)
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d004      	beq.n	8000ed0 <main+0x790>
				  {
					  phase_t = phase;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					  lcd_show_num(phase);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fb68 	bl	80005a0 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <main+0x7e4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8000eda:	2104      	movs	r1, #4
 8000edc:	4812      	ldr	r0, [pc, #72]	@ (8000f28 <main+0x7e8>)
 8000ede:	f001 f853 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1d1      	bne.n	8000e8c <main+0x74c>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8000ee8:	4a10      	ldr	r2, [pc, #64]	@ (8000f2c <main+0x7ec>)
 8000eea:	21b9      	movs	r1, #185	@ 0xb9
 8000eec:	2065      	movs	r0, #101	@ 0x65
 8000eee:	f7ff fb81 	bl	80005f4 <lcd_show_str>
					  break;
 8000ef2:	bf00      	nop
				  }
			  }
			  //need api
			  break;
		  }
		  while(HAL_GPIO_ReadPin(GPIOC, 1<<13) != 0)
 8000ef4:	bf00      	nop
 8000ef6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efa:	4812      	ldr	r0, [pc, #72]	@ (8000f44 <main+0x804>)
 8000efc:	f001 f844 	bl	8001f88 <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f7      	bne.n	8000ef6 <main+0x7b6>
			  ;
		  //lcd_show_picture(101, 105, 240, 100, gImage_black_big);
		  lcd_show_black(100, 145, 239, 100);
 8000f06:	2364      	movs	r3, #100	@ 0x64
 8000f08:	22ef      	movs	r2, #239	@ 0xef
 8000f0a:	2191      	movs	r1, #145	@ 0x91
 8000f0c:	2064      	movs	r0, #100	@ 0x64
 8000f0e:	f7ff fb97 	bl	8000640 <lcd_show_black>
	  }
	  prev = curr;
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  {
 8000f18:	e42c      	b.n	8000774 <main+0x34>
 8000f1a:	bf00      	nop
 8000f1c:	08005978 	.word	0x08005978
 8000f20:	2aaaaaab 	.word	0x2aaaaaab
 8000f24:	20000178 	.word	0x20000178
 8000f28:	48000c00 	.word	0x48000c00
 8000f2c:	08005954 	.word	0x08005954
 8000f30:	08005980 	.word	0x08005980
 8000f34:	2e8ba2e9 	.word	0x2e8ba2e9
 8000f38:	08005990 	.word	0x08005990
 8000f3c:	0800599c 	.word	0x0800599c
 8000f40:	92492493 	.word	0x92492493
 8000f44:	48000800 	.word	0x48000800

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	@ 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	2238      	movs	r2, #56	@ 0x38
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 f8e4 	bl	8005124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f6e:	f001 f83b 	bl	8001fe8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f72:	2303      	movs	r3, #3
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f82:	2340      	movs	r3, #64	@ 0x40
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000f92:	2318      	movs	r3, #24
 8000f94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 f8d2 	bl	8002150 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 f981 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fbd0 	bl	8002774 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fda:	f000 f96d 	bl	80012b8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8000fe4:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <SystemClock_Config+0xac>)
 8000fe6:	f001 fd01 	bl	80029ec <HAL_RCC_MCOConfig>
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	@ 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	00060400 	.word	0x00060400

08000ff8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <MX_SPI1_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <MX_SPI1_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <MX_SPI1_Init+0x74>)
 8001004:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <MX_SPI1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001010:	4b16      	ldr	r3, [pc, #88]	@ (800106c <MX_SPI1_Init+0x74>)
 8001012:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001016:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001018:	4b14      	ldr	r3, [pc, #80]	@ (800106c <MX_SPI1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101e:	4b13      	ldr	r3, [pc, #76]	@ (800106c <MX_SPI1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_SPI1_Init+0x74>)
 8001026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <MX_SPI1_Init+0x74>)
 800102e:	2210      	movs	r2, #16
 8001030:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <MX_SPI1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_SPI1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <MX_SPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_SPI1_Init+0x74>)
 8001046:	2207      	movs	r2, #7
 8001048:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <MX_SPI1_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_SPI1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_SPI1_Init+0x74>)
 8001058:	f001 fdb6 	bl	8002bc8 <HAL_SPI_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001062:	f000 f929 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200000b4 	.word	0x200000b4
 8001070:	40013000 	.word	0x40013000

08001074 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2224      	movs	r2, #36	@ 0x24
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 f84e 	bl	8005124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001092:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <MX_TIM8_Init+0xac>)
 8001094:	4a23      	ldr	r2, [pc, #140]	@ (8001124 <MX_TIM8_Init+0xb0>)
 8001096:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001098:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <MX_TIM8_Init+0xac>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <MX_TIM8_Init+0xac>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <MX_TIM8_Init+0xac>)
 80010a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <MX_TIM8_Init+0xac>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_TIM8_Init+0xac>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_TIM8_Init+0xac>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010be:	2303      	movs	r3, #3
 80010c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010d6:	2301      	movs	r3, #1
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	4619      	mov	r1, r3
 80010e8:	480d      	ldr	r0, [pc, #52]	@ (8001120 <MX_TIM8_Init+0xac>)
 80010ea:	f002 f8f1 	bl	80032d0 <HAL_TIM_Encoder_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80010f4:	f000 f8e0 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_TIM8_Init+0xac>)
 800110a:	f002 faef 	bl	80036ec <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001114:	f000 f8d0 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	@ 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000178 	.word	0x20000178
 8001124:	40013400 	.word	0x40013400

08001128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_DMA_Init+0x50>)
 8001130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001132:	4a11      	ldr	r2, [pc, #68]	@ (8001178 <MX_DMA_Init+0x50>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6493      	str	r3, [r2, #72]	@ 0x48
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_DMA_Init+0x50>)
 800113c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_DMA_Init+0x50>)
 8001148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800114a:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <MX_DMA_Init+0x50>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6493      	str	r3, [r2, #72]	@ 0x48
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_DMA_Init+0x50>)
 8001154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	200b      	movs	r0, #11
 8001164:	f000 fb9f 	bl	80018a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001168:	200b      	movs	r0, #11
 800116a:	f000 fbb6 	bl	80018da <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	@ 0x30
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b45      	ldr	r3, [pc, #276]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a44      	ldr	r2, [pc, #272]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b42      	ldr	r3, [pc, #264]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a3e      	ldr	r2, [pc, #248]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011c2:	4b39      	ldr	r3, [pc, #228]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a38      	ldr	r2, [pc, #224]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b36      	ldr	r3, [pc, #216]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b33      	ldr	r3, [pc, #204]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a32      	ldr	r2, [pc, #200]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b30      	ldr	r3, [pc, #192]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a2c      	ldr	r2, [pc, #176]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	4a26      	ldr	r2, [pc, #152]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001216:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <MX_GPIO_Init+0x12c>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001228:	4820      	ldr	r0, [pc, #128]	@ (80012ac <MX_GPIO_Init+0x130>)
 800122a:	f000 fec5 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800122e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001238:	2301      	movs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	481a      	ldr	r0, [pc, #104]	@ (80012ac <MX_GPIO_Init+0x130>)
 8001244:	f000 fd1e 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	4812      	ldr	r0, [pc, #72]	@ (80012b0 <MX_GPIO_Init+0x134>)
 8001266:	f000 fd0d 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800126a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	480a      	ldr	r0, [pc, #40]	@ (80012ac <MX_GPIO_Init+0x130>)
 8001284:	f000 fcfe 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001288:	2304      	movs	r3, #4
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001290:	2301      	movs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <MX_GPIO_Init+0x138>)
 800129c:	f000 fcf2 	bl	8001c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a0:	bf00      	nop
 80012a2:	3730      	adds	r7, #48	@ 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48001800 	.word	0x48001800
 80012b4:	48000c00 	.word	0x48000c00

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <Error_Handler+0x8>

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <HAL_MspInit+0x44>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <HAL_MspInit+0x44>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <HAL_MspInit+0x44>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <HAL_MspInit+0x44>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	4a08      	ldr	r2, [pc, #32]	@ (8001308 <HAL_MspInit+0x44>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_MspInit+0x44>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012fa:	f000 ff19 	bl	8002130 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2c      	ldr	r2, [pc, #176]	@ (80013dc <HAL_SPI_MspInit+0xd0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d151      	bne.n	80013d2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132e:	4b2c      	ldr	r3, [pc, #176]	@ (80013e0 <HAL_SPI_MspInit+0xd4>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001332:	4a2b      	ldr	r2, [pc, #172]	@ (80013e0 <HAL_SPI_MspInit+0xd4>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001338:	6613      	str	r3, [r2, #96]	@ 0x60
 800133a:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <HAL_SPI_MspInit+0xd4>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <HAL_SPI_MspInit+0xd4>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a25      	ldr	r2, [pc, #148]	@ (80013e0 <HAL_SPI_MspInit+0xd4>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <HAL_SPI_MspInit+0xd4>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800135e:	23a0      	movs	r3, #160	@ 0xa0
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136e:	2305      	movs	r3, #5
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137c:	f000 fc82 	bl	8001c84 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 8001382:	4a19      	ldr	r2, [pc, #100]	@ (80013e8 <HAL_SPI_MspInit+0xdc>)
 8001384:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 8001388:	220b      	movs	r2, #11
 800138a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 800138e:	2210      	movs	r2, #16
 8001390:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013b6:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 80013b8:	f000 faaa 	bl	8001910 <HAL_DMA_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80013c2:	f7ff ff79 	bl	80012b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a06      	ldr	r2, [pc, #24]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 80013ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80013cc:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <HAL_SPI_MspInit+0xd8>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40013000 	.word	0x40013000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	20000118 	.word	0x20000118
 80013e8:	40020008 	.word	0x40020008

080013ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <HAL_TIM_Encoder_MspInit+0x7c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d127      	bne.n	800145e <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <HAL_TIM_Encoder_MspInit+0x80>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001412:	4a16      	ldr	r2, [pc, #88]	@ (800146c <HAL_TIM_Encoder_MspInit+0x80>)
 8001414:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001418:	6613      	str	r3, [r2, #96]	@ 0x60
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <HAL_TIM_Encoder_MspInit+0x80>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_TIM_Encoder_MspInit+0x80>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	4a10      	ldr	r2, [pc, #64]	@ (800146c <HAL_TIM_Encoder_MspInit+0x80>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <HAL_TIM_Encoder_MspInit+0x80>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800143e:	23c0      	movs	r3, #192	@ 0xc0
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800144e:	2304      	movs	r3, #4
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	@ (8001470 <HAL_TIM_Encoder_MspInit+0x84>)
 800145a:	f000 fc13 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40013400 	.word	0x40013400
 800146c:	40021000 	.word	0x40021000
 8001470:	48000800 	.word	0x48000800

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <NMI_Handler+0x4>

0800147c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <MemManage_Handler+0x4>

0800148c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <UsageFault_Handler+0x4>

0800149c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ca:	f000 f8d1 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <DMA1_Channel1_IRQHandler+0x10>)
 80014da:	f000 fac1 	bl	8001a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000118 	.word	0x20000118

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f003 fe1c 	bl	8005154 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20020000 	.word	0x20020000
 8001548:	00000400 	.word	0x00000400
 800154c:	200001c4 	.word	0x200001c4
 8001550:	20000318 	.word	0x20000318

08001554 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001578:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800157a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800157c:	f7ff ffea 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	@ (80015b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <LoopForever+0xe>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	@ (80015c4 <LoopForever+0x16>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a6:	f003 fddb 	bl	8005160 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015aa:	f7ff f8c9 	bl	8000740 <main>

080015ae <LoopForever>:

LoopForever:
    b LoopForever
 80015ae:	e7fe      	b.n	80015ae <LoopForever>
  ldr   r0, =_estack
 80015b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015bc:	080081a8 	.word	0x080081a8
  ldr r2, =_sbss
 80015c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015c4:	20000314 	.word	0x20000314

080015c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC1_2_IRQHandler>

080015ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f95b 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015da:	200f      	movs	r0, #15
 80015dc:	f000 f80e 	bl	80015fc <HAL_InitTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	e001      	b.n	80015f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ec:	f7ff fe6a 	bl	80012c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f0:	79fb      	ldrb	r3, [r7, #7]

}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_InitTick+0x68>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d022      	beq.n	8001656 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_InitTick+0x6c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_InitTick+0x68>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800161c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f966 	bl	80018f6 <HAL_SYSTICK_Config>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10f      	bne.n	8001650 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b0f      	cmp	r3, #15
 8001634:	d809      	bhi.n	800164a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001636:	2200      	movs	r2, #0
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	f04f 30ff 	mov.w	r0, #4294967295
 800163e:	f000 f932 	bl	80018a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <HAL_InitTick+0x70>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e007      	b.n	800165a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e004      	b.n	800165a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	e001      	b.n	800165a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000008 	.word	0x20000008
 8001668:	20000000 	.word	0x20000000
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <HAL_IncTick+0x1c>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_IncTick+0x20>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4413      	add	r3, r2
 800167e:	4a03      	ldr	r2, [pc, #12]	@ (800168c <HAL_IncTick+0x1c>)
 8001680:	6013      	str	r3, [r2, #0]
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	200001c8 	.word	0x200001c8
 8001690:	20000008 	.word	0x20000008

08001694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200001c8 	.word	0x200001c8

080016ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7ff ffee 	bl	8001694 <HAL_GetTick>
 80016b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c4:	d004      	beq.n	80016d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <HAL_Delay+0x40>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4413      	add	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d0:	bf00      	nop
 80016d2:	f7ff ffdf 	bl	8001694 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d8f7      	bhi.n	80016d2 <HAL_Delay+0x26>
  {
  }
}
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000008 	.word	0x20000008

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	@ (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	@ (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	@ (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	@ 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	@ 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	@ (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	@ (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff40 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff90 	bl	80017e4 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5f 	bl	8001790 <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff33 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa4 	bl	800184c <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e08d      	b.n	8001a3e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <HAL_DMA_Init+0x138>)
 800192a:	429a      	cmp	r2, r3
 800192c:	d80f      	bhi.n	800194e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b45      	ldr	r3, [pc, #276]	@ (8001a4c <HAL_DMA_Init+0x13c>)
 8001936:	4413      	add	r3, r2
 8001938:	4a45      	ldr	r2, [pc, #276]	@ (8001a50 <HAL_DMA_Init+0x140>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	009a      	lsls	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a42      	ldr	r2, [pc, #264]	@ (8001a54 <HAL_DMA_Init+0x144>)
 800194a:	641a      	str	r2, [r3, #64]	@ 0x40
 800194c:	e00e      	b.n	800196c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	4b40      	ldr	r3, [pc, #256]	@ (8001a58 <HAL_DMA_Init+0x148>)
 8001956:	4413      	add	r3, r2
 8001958:	4a3d      	ldr	r2, [pc, #244]	@ (8001a50 <HAL_DMA_Init+0x140>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	009a      	lsls	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a3c      	ldr	r2, [pc, #240]	@ (8001a5c <HAL_DMA_Init+0x14c>)
 800196a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001986:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f8fe 	bl	8001bc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019cc:	d102      	bne.n	80019d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <HAL_DMA_Init+0x104>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d80c      	bhi.n	8001a14 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f91e 	bl	8001c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e008      	b.n	8001a26 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40020407 	.word	0x40020407
 8001a4c:	bffdfff8 	.word	0xbffdfff8
 8001a50:	cccccccd 	.word	0xcccccccd
 8001a54:	40020000 	.word	0x40020000
 8001a58:	bffdfbf8 	.word	0xbffdfbf8
 8001a5c:	40020400 	.word	0x40020400

08001a60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	2204      	movs	r2, #4
 8001a82:	409a      	lsls	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d026      	beq.n	8001ada <HAL_DMA_IRQHandler+0x7a>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d021      	beq.n	8001ada <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d107      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d071      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ad8:	e06c      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d02e      	beq.n	8001b4c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d029      	beq.n	8001b4c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 020a 	bic.w	r2, r2, #10
 8001b14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f003 021f 	and.w	r2, r3, #31
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d038      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b4a:	e033      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2208      	movs	r2, #8
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d02a      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d025      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 020e 	bic.w	r2, r2, #14
 8001b78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f003 021f 	and.w	r2, r3, #31
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
}
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d802      	bhi.n	8001bda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e001      	b.n	8001bde <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bdc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	3b08      	subs	r3, #8
 8001bea:	4a12      	ldr	r2, [pc, #72]	@ (8001c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	009a      	lsls	r2, r3, #2
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4413      	add	r3, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a0b      	ldr	r2, [pc, #44]	@ (8001c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2201      	movs	r2, #1
 8001c14:	409a      	lsls	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40020407 	.word	0x40020407
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020820 	.word	0x40020820
 8001c34:	cccccccd 	.word	0xcccccccd
 8001c38:	40020880 	.word	0x40020880

08001c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c5e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2201      	movs	r2, #1
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	1000823f 	.word	0x1000823f
 8001c80:	40020940 	.word	0x40020940

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c92:	e15a      	b.n	8001f4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 814c 	beq.w	8001f44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 0201 	and.w	r2, r3, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d017      	beq.n	8001d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d123      	bne.n	8001db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	6939      	ldr	r1, [r7, #16]
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0203 	and.w	r2, r3, #3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80a6 	beq.w	8001f44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e04:	4b58      	ldr	r3, [pc, #352]	@ (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e10:	4a56      	ldr	r2, [pc, #344]	@ (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e3a:	d01f      	beq.n	8001e7c <HAL_GPIO_Init+0x1f8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d019      	beq.n	8001e78 <HAL_GPIO_Init+0x1f4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4b      	ldr	r2, [pc, #300]	@ (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1f0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f78 <HAL_GPIO_Init+0x2f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1ec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a49      	ldr	r2, [pc, #292]	@ (8001f7c <HAL_GPIO_Init+0x2f8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1e8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a48      	ldr	r2, [pc, #288]	@ (8001f80 <HAL_GPIO_Init+0x2fc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1e4>
 8001e64:	2305      	movs	r3, #5
 8001e66:	e00a      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e68:	2306      	movs	r3, #6
 8001e6a:	e008      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0x1fa>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8e:	4937      	ldr	r1, [pc, #220]	@ (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e9c:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec0:	4a30      	ldr	r2, [pc, #192]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eea:	4a26      	ldr	r2, [pc, #152]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f14:	4a1b      	ldr	r2, [pc, #108]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3e:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <HAL_GPIO_Init+0x300>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f47f ae9d 	bne.w	8001c94 <HAL_GPIO_Init+0x10>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	48000400 	.word	0x48000400
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48000c00 	.word	0x48000c00
 8001f7c:	48001000 	.word	0x48001000
 8001f80:	48001400 	.word	0x48001400
 8001f84:	40010400 	.word	0x40010400

08001f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e001      	b.n	8001faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc8:	787b      	ldrb	r3, [r7, #1]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d141      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002002:	d131      	bne.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002004:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800200a:	4a46      	ldr	r2, [pc, #280]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002010:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002014:	4b43      	ldr	r3, [pc, #268]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800201c:	4a41      	ldr	r2, [pc, #260]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002024:	4b40      	ldr	r3, [pc, #256]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2232      	movs	r2, #50	@ 0x32
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	4a3f      	ldr	r2, [pc, #252]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	0c9b      	lsrs	r3, r3, #18
 8002036:	3301      	adds	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800203a:	e002      	b.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3b01      	subs	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002042:	4b38      	ldr	r3, [pc, #224]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204e:	d102      	bne.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f2      	bne.n	800203c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002056:	4b33      	ldr	r3, [pc, #204]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002062:	d158      	bne.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e057      	b.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002068:	4b2e      	ldr	r3, [pc, #184]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800206e:	4a2d      	ldr	r2, [pc, #180]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002078:	e04d      	b.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002080:	d141      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002082:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800208a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208e:	d131      	bne.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002090:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002096:	4a23      	ldr	r2, [pc, #140]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800209c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a0:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2232      	movs	r2, #50	@ 0x32
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	3301      	adds	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c6:	e002      	b.n	80020ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020da:	d102      	bne.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f2      	bne.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ee:	d112      	bne.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e011      	b.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002100:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002104:	e007      	b.n	8002116 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002114:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40007000 	.word	0x40007000
 8002128:	20000000 	.word	0x20000000
 800212c:	431bde83 	.word	0x431bde83

08002130 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a04      	ldr	r2, [pc, #16]	@ (800214c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800213e:	6093      	str	r3, [r2, #8]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40007000 	.word	0x40007000

08002150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e2fe      	b.n	8002760 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d075      	beq.n	800225a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216e:	4b97      	ldr	r3, [pc, #604]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002178:	4b94      	ldr	r3, [pc, #592]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d102      	bne.n	800218e <HAL_RCC_OscConfig+0x3e>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d002      	beq.n	8002194 <HAL_RCC_OscConfig+0x44>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b8d      	ldr	r3, [pc, #564]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05b      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d157      	bne.n	8002258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e2d9      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x74>
 80021b6:	4b85      	ldr	r3, [pc, #532]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a84      	ldr	r2, [pc, #528]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b7f      	ldr	r3, [pc, #508]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7e      	ldr	r2, [pc, #504]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b7c      	ldr	r3, [pc, #496]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7b      	ldr	r2, [pc, #492]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021e8:	4b78      	ldr	r3, [pc, #480]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a77      	ldr	r2, [pc, #476]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b75      	ldr	r3, [pc, #468]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a74      	ldr	r2, [pc, #464]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff fa44 	bl	8001694 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fa40 	bl	8001694 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e29e      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002222:	4b6a      	ldr	r3, [pc, #424]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xc0>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7ff fa30 	bl	8001694 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fa2c 	bl	8001694 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e28a      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224a:	4b60      	ldr	r3, [pc, #384]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0xe8>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d075      	beq.n	8002352 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002266:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002270:	4b56      	ldr	r3, [pc, #344]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d102      	bne.n	8002286 <HAL_RCC_OscConfig+0x136>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d002      	beq.n	800228c <HAL_RCC_OscConfig+0x13c>
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d11f      	bne.n	80022cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800228c:	4b4f      	ldr	r3, [pc, #316]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_OscConfig+0x154>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e25d      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b49      	ldr	r3, [pc, #292]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	4946      	ldr	r1, [pc, #280]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022b8:	4b45      	ldr	r3, [pc, #276]	@ (80023d0 <HAL_RCC_OscConfig+0x280>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f99d 	bl	80015fc <HAL_InitTick>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d043      	beq.n	8002350 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e249      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3c      	ldr	r2, [pc, #240]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff f9d8 	bl	8001694 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7ff f9d4 	bl	8001694 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e232      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fa:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b31      	ldr	r3, [pc, #196]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	061b      	lsls	r3, r3, #24
 8002314:	492d      	ldr	r1, [pc, #180]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
 800231a:	e01a      	b.n	8002352 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2a      	ldr	r2, [pc, #168]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002322:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff f9b4 	bl	8001694 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002330:	f7ff f9b0 	bl	8001694 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e20e      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002342:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x1e0>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d041      	beq.n	80023e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236c:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7ff f98d 	bl	8001694 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237e:	f7ff f989 	bl	8001694 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1e7      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002390:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ef      	beq.n	800237e <HAL_RCC_OscConfig+0x22e>
 800239e:	e020      	b.n	80023e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a6:	4a09      	ldr	r2, [pc, #36]	@ (80023cc <HAL_RCC_OscConfig+0x27c>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7ff f970 	bl	8001694 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b6:	e00d      	b.n	80023d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b8:	f7ff f96c 	bl	8001694 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d906      	bls.n	80023d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1ca      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ea      	bne.n	80023b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80a6 	beq.w	800253c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023f4:	4b84      	ldr	r3, [pc, #528]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x2b4>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x2b6>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b7f      	ldr	r3, [pc, #508]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240e:	4a7e      	ldr	r2, [pc, #504]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	6593      	str	r3, [r2, #88]	@ 0x58
 8002416:	4b7c      	ldr	r3, [pc, #496]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002426:	4b79      	ldr	r3, [pc, #484]	@ (800260c <HAL_RCC_OscConfig+0x4bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002432:	4b76      	ldr	r3, [pc, #472]	@ (800260c <HAL_RCC_OscConfig+0x4bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a75      	ldr	r2, [pc, #468]	@ (800260c <HAL_RCC_OscConfig+0x4bc>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7ff f929 	bl	8001694 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7ff f925 	bl	8001694 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e183      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002458:	4b6c      	ldr	r3, [pc, #432]	@ (800260c <HAL_RCC_OscConfig+0x4bc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_RCC_OscConfig+0x32e>
 800246c:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002472:	4a65      	ldr	r2, [pc, #404]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800247c:	e024      	b.n	80024c8 <HAL_RCC_OscConfig+0x378>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b05      	cmp	r3, #5
 8002484:	d110      	bne.n	80024a8 <HAL_RCC_OscConfig+0x358>
 8002486:	4b60      	ldr	r3, [pc, #384]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248c:	4a5e      	ldr	r2, [pc, #376]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002496:	4b5c      	ldr	r3, [pc, #368]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249c:	4a5a      	ldr	r2, [pc, #360]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a6:	e00f      	b.n	80024c8 <HAL_RCC_OscConfig+0x378>
 80024a8:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ae:	4a56      	ldr	r2, [pc, #344]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024b8:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024be:	4a52      	ldr	r2, [pc, #328]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7ff f8e0 	bl	8001694 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7ff f8dc 	bl	8001694 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e138      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ee:	4b46      	ldr	r3, [pc, #280]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ed      	beq.n	80024d8 <HAL_RCC_OscConfig+0x388>
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7ff f8c9 	bl	8001694 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7ff f8c5 	bl	8001694 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e121      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251c:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ed      	bne.n	8002506 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800252a:	7ffb      	ldrb	r3, [r7, #31]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4b35      	ldr	r3, [pc, #212]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	4a34      	ldr	r2, [pc, #208]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01c      	beq.n	800258a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002550:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002552:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002556:	4a2c      	ldr	r2, [pc, #176]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7ff f898 	bl	8001694 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002568:	f7ff f894 	bl	8001694 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0f2      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800257a:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800257c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ef      	beq.n	8002568 <HAL_RCC_OscConfig+0x418>
 8002588:	e01b      	b.n	80025c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800258a:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 800258c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002590:	4a1d      	ldr	r2, [pc, #116]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7ff f87b 	bl	8001694 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a2:	f7ff f877 	bl	8001694 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0d5      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ef      	bne.n	80025a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80c9 	beq.w	800275e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	f000 8083 	beq.w	80026e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d15e      	bne.n	80026a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a08      	ldr	r2, [pc, #32]	@ (8002608 <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7ff f851 	bl	8001694 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f4:	e00c      	b.n	8002610 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7ff f84d 	bl	8001694 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d905      	bls.n	8002610 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0ab      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
 8002608:	40021000 	.word	0x40021000
 800260c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	4b55      	ldr	r3, [pc, #340]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ec      	bne.n	80025f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b52      	ldr	r3, [pc, #328]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	4b52      	ldr	r3, [pc, #328]	@ (800276c <HAL_RCC_OscConfig+0x61c>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6a11      	ldr	r1, [r2, #32]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800262c:	3a01      	subs	r2, #1
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	4311      	orrs	r1, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002636:	0212      	lsls	r2, r2, #8
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800263e:	0852      	lsrs	r2, r2, #1
 8002640:	3a01      	subs	r2, #1
 8002642:	0552      	lsls	r2, r2, #21
 8002644:	4311      	orrs	r1, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800264a:	0852      	lsrs	r2, r2, #1
 800264c:	3a01      	subs	r2, #1
 800264e:	0652      	lsls	r2, r2, #25
 8002650:	4311      	orrs	r1, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002656:	06d2      	lsls	r2, r2, #27
 8002658:	430a      	orrs	r2, r1
 800265a:	4943      	ldr	r1, [pc, #268]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a40      	ldr	r2, [pc, #256]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a3d      	ldr	r2, [pc, #244]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7ff f80c 	bl	8001694 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7ff f808 	bl	8001694 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e066      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b35      	ldr	r3, [pc, #212]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x530>
 800269e:	e05e      	b.n	800275e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a0:	4b31      	ldr	r3, [pc, #196]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a30      	ldr	r2, [pc, #192]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fff2 	bl	8001694 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe ffee 	bl	8001694 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e04c      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c6:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026d2:	4b25      	ldr	r3, [pc, #148]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	4924      	ldr	r1, [pc, #144]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026d8:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <HAL_RCC_OscConfig+0x620>)
 80026da:	4013      	ands	r3, r2
 80026dc:	60cb      	str	r3, [r1, #12]
 80026de:	e03e      	b.n	800275e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e039      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <HAL_RCC_OscConfig+0x618>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 0203 	and.w	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d12c      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	3b01      	subs	r3, #1
 800270c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d123      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d11b      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d113      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	3b01      	subs	r3, #1
 8002740:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d109      	bne.n	800275a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	3b01      	subs	r3, #1
 8002754:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	019f800c 	.word	0x019f800c
 8002770:	feeefffc 	.word	0xfeeefffc

08002774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e11e      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b91      	ldr	r3, [pc, #580]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d910      	bls.n	80027bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b8e      	ldr	r3, [pc, #568]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 020f 	bic.w	r2, r3, #15
 80027a2:	498c      	ldr	r1, [pc, #560]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b8a      	ldr	r3, [pc, #552]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e106      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d073      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d129      	bne.n	8002824 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d0:	4b81      	ldr	r3, [pc, #516]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0f4      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027e0:	f000 f9ac 	bl	8002b3c <RCC_GetSysClockFreqFromPLLSource>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4a7c      	ldr	r2, [pc, #496]	@ (80029dc <HAL_RCC_ClockConfig+0x268>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d93f      	bls.n	800286e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027ee:	4b7a      	ldr	r3, [pc, #488]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002802:	2b00      	cmp	r3, #0
 8002804:	d033      	beq.n	800286e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	d12f      	bne.n	800286e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800280e:	4b72      	ldr	r3, [pc, #456]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002816:	4a70      	ldr	r2, [pc, #448]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800281c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e024      	b.n	800286e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d107      	bne.n	800283c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282c:	4b6a      	ldr	r3, [pc, #424]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0c6      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283c:	4b66      	ldr	r3, [pc, #408]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0be      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800284c:	f000 f914 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8002850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4a61      	ldr	r2, [pc, #388]	@ (80029dc <HAL_RCC_ClockConfig+0x268>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d909      	bls.n	800286e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800285a:	4b5f      	ldr	r3, [pc, #380]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002862:	4a5d      	ldr	r2, [pc, #372]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002868:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b5a      	ldr	r3, [pc, #360]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4957      	ldr	r1, [pc, #348]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7fe ff08 	bl	8001694 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fe ff04 	bl	8001694 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e095      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b4e      	ldr	r3, [pc, #312]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d023      	beq.n	8002904 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c8:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a42      	ldr	r2, [pc, #264]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028e0:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028e8:	4a3b      	ldr	r2, [pc, #236]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b39      	ldr	r3, [pc, #228]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4936      	ldr	r1, [pc, #216]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
 8002902:	e008      	b.n	8002916 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b80      	cmp	r3, #128	@ 0x80
 8002908:	d105      	bne.n	8002916 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800290a:	4b33      	ldr	r3, [pc, #204]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4a32      	ldr	r2, [pc, #200]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 8002910:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002914:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002916:	4b2f      	ldr	r3, [pc, #188]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d21d      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002924:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 020f 	bic.w	r2, r3, #15
 800292c:	4929      	ldr	r1, [pc, #164]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002934:	f7fe feae 	bl	8001694 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe feaa 	bl	8001694 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e03b      	b.n	80029ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_RCC_ClockConfig+0x260>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d1ed      	bne.n	800293c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4917      	ldr	r1, [pc, #92]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298a:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490f      	ldr	r1, [pc, #60]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800299e:	f000 f86b 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <HAL_RCC_ClockConfig+0x264>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <HAL_RCC_ClockConfig+0x26c>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a0a      	ldr	r2, [pc, #40]	@ (80029e4 <HAL_RCC_ClockConfig+0x270>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HAL_RCC_ClockConfig+0x274>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fe1a 	bl	80015fc <HAL_InitTick>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
 80029dc:	04c4b400 	.word	0x04c4b400
 80029e0:	080059a8 	.word	0x080059a8
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004

080029ec <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	@ 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8002a18:	029b      	lsls	r3, r3, #10
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <HAL_RCC_MCOConfig+0x88>)
 8002a28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	4910      	ldr	r1, [pc, #64]	@ (8002a74 <HAL_RCC_MCOConfig+0x88>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	0d1b      	lsrs	r3, r3, #20
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a4e:	f7ff f919 	bl	8001c84 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8002a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_RCC_MCOConfig+0x88>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	4903      	ldr	r1, [pc, #12]	@ (8002a74 <HAL_RCC_MCOConfig+0x88>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3730      	adds	r7, #48	@ 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d102      	bne.n	8002a90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	e047      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a90:	4b27      	ldr	r3, [pc, #156]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d102      	bne.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a9c:	4b26      	ldr	r3, [pc, #152]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e03e      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002aa2:	4b23      	ldr	r3, [pc, #140]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d136      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002acc:	4a1a      	ldr	r2, [pc, #104]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	4a16      	ldr	r2, [pc, #88]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad6:	68d2      	ldr	r2, [r2, #12]
 8002ad8:	0a12      	lsrs	r2, r2, #8
 8002ada:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	617b      	str	r3, [r7, #20]
      break;
 8002ae4:	e00c      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae6:	4a13      	ldr	r2, [pc, #76]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	4a10      	ldr	r2, [pc, #64]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af0:	68d2      	ldr	r2, [r2, #12]
 8002af2:	0a12      	lsrs	r2, r2, #8
 8002af4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
      break;
 8002afe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0e5b      	lsrs	r3, r3, #25
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	e001      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b20:	693b      	ldr	r3, [r7, #16]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	017d7840 	.word	0x017d7840

08002b3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b42:	4b1e      	ldr	r3, [pc, #120]	@ (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d10c      	bne.n	8002b7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b60:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b6a:	68d2      	ldr	r2, [r2, #12]
 8002b6c:	0a12      	lsrs	r2, r2, #8
 8002b6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
    break;
 8002b78:	e00c      	b.n	8002b94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b7a:	4a12      	ldr	r2, [pc, #72]	@ (8002bc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	4a0e      	ldr	r2, [pc, #56]	@ (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b84:	68d2      	ldr	r2, [r2, #12]
 8002b86:	0a12      	lsrs	r2, r2, #8
 8002b88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
    break;
 8002b92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b94:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0e5b      	lsrs	r3, r3, #25
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bae:	687b      	ldr	r3, [r7, #4]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	017d7840 	.word	0x017d7840
 8002bc4:	00f42400 	.word	0x00f42400

08002bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e09d      	b.n	8002d16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d108      	bne.n	8002bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bea:	d009      	beq.n	8002c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
 8002bf2:	e005      	b.n	8002c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fb76 	bl	800130c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c40:	d902      	bls.n	8002c48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e002      	b.n	8002c4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c56:	d007      	beq.n	8002c68 <HAL_SPI_Init+0xa0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002caa:	ea42 0103 	orr.w	r1, r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	f003 0204 	and.w	r2, r3, #4
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ce4:	ea42 0103 	orr.w	r1, r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b088      	sub	sp, #32
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_SPI_Transmit+0x22>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e15f      	b.n	8003000 <HAL_SPI_Transmit+0x2e2>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d48:	f7fe fca4 	bl	8001694 <HAL_GetTick>
 8002d4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d002      	beq.n	8002d64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d62:	e148      	b.n	8002ff6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_Transmit+0x52>
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d74:	e13f      	b.n	8002ff6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dc0:	d10f      	bne.n	8002de2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dec:	2b40      	cmp	r3, #64	@ 0x40
 8002dee:	d007      	beq.n	8002e00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e08:	d94f      	bls.n	8002eaa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_SPI_Transmit+0xfa>
 8002e12:	8afb      	ldrh	r3, [r7, #22]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d142      	bne.n	8002e9e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	881a      	ldrh	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	1c9a      	adds	r2, r3, #2
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e3c:	e02f      	b.n	8002e9e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d112      	bne.n	8002e72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e70:	e015      	b.n	8002e9e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e72:	f7fe fc0f 	bl	8001694 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d803      	bhi.n	8002e8a <HAL_SPI_Transmit+0x16c>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d102      	bne.n	8002e90 <HAL_SPI_Transmit+0x172>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e9c:	e0ab      	b.n	8002ff6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ca      	bne.n	8002e3e <HAL_SPI_Transmit+0x120>
 8002ea8:	e080      	b.n	8002fac <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_SPI_Transmit+0x19a>
 8002eb2:	8afb      	ldrh	r3, [r7, #22]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d174      	bne.n	8002fa2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d912      	bls.n	8002ee8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	881a      	ldrh	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed2:	1c9a      	adds	r2, r3, #2
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b02      	subs	r3, #2
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ee6:	e05c      	b.n	8002fa2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f0e:	e048      	b.n	8002fa2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d12b      	bne.n	8002f76 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d912      	bls.n	8002f4e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b02      	subs	r3, #2
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f4c:	e029      	b.n	8002fa2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f74:	e015      	b.n	8002fa2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f76:	f7fe fb8d 	bl	8001694 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d803      	bhi.n	8002f8e <HAL_SPI_Transmit+0x270>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d102      	bne.n	8002f94 <HAL_SPI_Transmit+0x276>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d106      	bne.n	8002fa2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002fa0:	e029      	b.n	8002ff6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1b1      	bne.n	8002f10 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	6839      	ldr	r1, [r7, #0]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f947 	bl	8003244 <SPI_EndRxTxTransaction>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e003      	b.n	8002ff6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002ffe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003018:	f7fe fb3c 	bl	8001694 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	4413      	add	r3, r2
 8003026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003028:	f7fe fb34 	bl	8001694 <HAL_GetTick>
 800302c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800302e:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	015b      	lsls	r3, r3, #5
 8003034:	0d1b      	lsrs	r3, r3, #20
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800303e:	e054      	b.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d050      	beq.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003048:	f7fe fb24 	bl	8001694 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	429a      	cmp	r2, r3
 8003056:	d902      	bls.n	800305e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d13d      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800306c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003076:	d111      	bne.n	800309c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003080:	d004      	beq.n	800308c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308a:	d107      	bne.n	800309c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800309a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030a4:	d10f      	bne.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e017      	b.n	800310a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d19b      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000000 	.word	0x20000000

08003118 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800312a:	f7fe fab3 	bl	8001694 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	4413      	add	r3, r2
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800313a:	f7fe faab 	bl	8001694 <HAL_GetTick>
 800313e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003148:	4b3d      	ldr	r3, [pc, #244]	@ (8003240 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00da      	lsls	r2, r3, #3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	0d1b      	lsrs	r3, r3, #20
 8003158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003160:	e060      	b.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003168:	d107      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003178:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d050      	beq.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003182:	f7fe fa87 	bl	8001694 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318e:	429a      	cmp	r2, r3
 8003190:	d902      	bls.n	8003198 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d13d      	bne.n	8003214 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b0:	d111      	bne.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ba:	d004      	beq.n	80031c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c4:	d107      	bne.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031de:	d10f      	bne.n	8003200 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e010      	b.n	8003236 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	3b01      	subs	r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d196      	bne.n	8003162 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3728      	adds	r7, #40	@ 0x28
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000

08003244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff ff5b 	bl	8003118 <SPI_WaitFifoStateUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e027      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	2180      	movs	r1, #128	@ 0x80
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff fec0 	bl	8003008 <SPI_WaitFlagStateUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e014      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff34 	bl	8003118 <SPI_WaitFifoStateUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e000      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e097      	b.n	8003414 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7fe f877 	bl	80013ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003314:	f023 0307 	bic.w	r3, r3, #7
 8003318:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f000 f907 	bl	8003538 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	4313      	orrs	r3, r2
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003370:	f023 030c 	bic.w	r3, r3, #12
 8003374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800337c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	4313      	orrs	r3, r2
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	011a      	lsls	r2, r3, #4
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	031b      	lsls	r3, r3, #12
 80033a0:	4313      	orrs	r3, r2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	4313      	orrs	r3, r2
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800342c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003434:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800343c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003444:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d110      	bne.n	800346e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003452:	7b7b      	ldrb	r3, [r7, #13]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d001      	beq.n	800345c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e069      	b.n	8003530 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800346c:	e031      	b.n	80034d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d110      	bne.n	8003496 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003474:	7bbb      	ldrb	r3, [r7, #14]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800347a:	7b3b      	ldrb	r3, [r7, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d001      	beq.n	8003484 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e055      	b.n	8003530 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003494:	e01d      	b.n	80034d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d108      	bne.n	80034ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800349c:	7bbb      	ldrb	r3, [r7, #14]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a2:	7b7b      	ldrb	r3, [r7, #13]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034a8:	7b3b      	ldrb	r3, [r7, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d001      	beq.n	80034b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e03e      	b.n	8003530 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_TIM_Encoder_Start+0xc4>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d008      	beq.n	80034f0 <HAL_TIM_Encoder_Start+0xd4>
 80034de:	e00f      	b.n	8003500 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2201      	movs	r2, #1
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f8d9 	bl	80036a0 <TIM_CCxChannelCmd>
      break;
 80034ee:	e016      	b.n	800351e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	2104      	movs	r1, #4
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f8d1 	bl	80036a0 <TIM_CCxChannelCmd>
      break;
 80034fe:	e00e      	b.n	800351e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f8c9 	bl	80036a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2201      	movs	r2, #1
 8003514:	2104      	movs	r1, #4
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f8c2 	bl	80036a0 <TIM_CCxChannelCmd>
      break;
 800351c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a4c      	ldr	r2, [pc, #304]	@ (800367c <TIM_Base_SetConfig+0x144>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d017      	beq.n	8003580 <TIM_Base_SetConfig+0x48>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003556:	d013      	beq.n	8003580 <TIM_Base_SetConfig+0x48>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a49      	ldr	r2, [pc, #292]	@ (8003680 <TIM_Base_SetConfig+0x148>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00f      	beq.n	8003580 <TIM_Base_SetConfig+0x48>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a48      	ldr	r2, [pc, #288]	@ (8003684 <TIM_Base_SetConfig+0x14c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00b      	beq.n	8003580 <TIM_Base_SetConfig+0x48>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a47      	ldr	r2, [pc, #284]	@ (8003688 <TIM_Base_SetConfig+0x150>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <TIM_Base_SetConfig+0x48>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a46      	ldr	r2, [pc, #280]	@ (800368c <TIM_Base_SetConfig+0x154>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_Base_SetConfig+0x48>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a45      	ldr	r2, [pc, #276]	@ (8003690 <TIM_Base_SetConfig+0x158>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d108      	bne.n	8003592 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a39      	ldr	r2, [pc, #228]	@ (800367c <TIM_Base_SetConfig+0x144>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d023      	beq.n	80035e2 <TIM_Base_SetConfig+0xaa>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a0:	d01f      	beq.n	80035e2 <TIM_Base_SetConfig+0xaa>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a36      	ldr	r2, [pc, #216]	@ (8003680 <TIM_Base_SetConfig+0x148>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01b      	beq.n	80035e2 <TIM_Base_SetConfig+0xaa>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a35      	ldr	r2, [pc, #212]	@ (8003684 <TIM_Base_SetConfig+0x14c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d017      	beq.n	80035e2 <TIM_Base_SetConfig+0xaa>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a34      	ldr	r2, [pc, #208]	@ (8003688 <TIM_Base_SetConfig+0x150>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <TIM_Base_SetConfig+0xaa>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a33      	ldr	r2, [pc, #204]	@ (800368c <TIM_Base_SetConfig+0x154>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00f      	beq.n	80035e2 <TIM_Base_SetConfig+0xaa>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a33      	ldr	r2, [pc, #204]	@ (8003694 <TIM_Base_SetConfig+0x15c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <TIM_Base_SetConfig+0xaa>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a32      	ldr	r2, [pc, #200]	@ (8003698 <TIM_Base_SetConfig+0x160>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <TIM_Base_SetConfig+0xaa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a31      	ldr	r2, [pc, #196]	@ (800369c <TIM_Base_SetConfig+0x164>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_Base_SetConfig+0xaa>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003690 <TIM_Base_SetConfig+0x158>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d108      	bne.n	80035f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a18      	ldr	r2, [pc, #96]	@ (800367c <TIM_Base_SetConfig+0x144>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d013      	beq.n	8003648 <TIM_Base_SetConfig+0x110>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a1a      	ldr	r2, [pc, #104]	@ (800368c <TIM_Base_SetConfig+0x154>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00f      	beq.n	8003648 <TIM_Base_SetConfig+0x110>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a1a      	ldr	r2, [pc, #104]	@ (8003694 <TIM_Base_SetConfig+0x15c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00b      	beq.n	8003648 <TIM_Base_SetConfig+0x110>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <TIM_Base_SetConfig+0x160>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_Base_SetConfig+0x110>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a18      	ldr	r2, [pc, #96]	@ (800369c <TIM_Base_SetConfig+0x164>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x110>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a13      	ldr	r2, [pc, #76]	@ (8003690 <TIM_Base_SetConfig+0x158>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d103      	bne.n	8003650 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d105      	bne.n	800366e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f023 0201 	bic.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	611a      	str	r2, [r3, #16]
  }
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40013400 	.word	0x40013400
 8003690:	40015000 	.word	0x40015000
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800

080036a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	2201      	movs	r2, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	401a      	ands	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003700:	2302      	movs	r3, #2
 8003702:	e074      	b.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a34      	ldr	r2, [pc, #208]	@ (80037fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a33      	ldr	r2, [pc, #204]	@ (8003800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a31      	ldr	r2, [pc, #196]	@ (8003804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d108      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003748:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800375a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a21      	ldr	r2, [pc, #132]	@ (80037fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003784:	d01d      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1f      	ldr	r2, [pc, #124]	@ (8003808 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d018      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1c      	ldr	r2, [pc, #112]	@ (8003810 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a15      	ldr	r2, [pc, #84]	@ (8003800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a18      	ldr	r2, [pc, #96]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a11      	ldr	r2, [pc, #68]	@ (8003804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10c      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40013400 	.word	0x40013400
 8003804:	40015000 	.word	0x40015000
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40000c00 	.word	0x40000c00
 8003814:	40014000 	.word	0x40014000

08003818 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 8003818:	2000      	movs	r0, #0
 800381a:	4770      	bx	lr

0800381c <_ZN5Print5flushEv>:
//    size_t println(const Printable&);
    size_t println(void);

    size_t printf(const char *, ...);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop

08003824 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 8003824:	b410      	push	{r4}
  drawPixel(x, y, color);
 8003826:	6804      	ldr	r4, [r0, #0]
 8003828:	6924      	ldr	r4, [r4, #16]
 800382a:	46a4      	mov	ip, r4
}
 800382c:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 8003830:	4760      	bx	ip
 8003832:	bf00      	nop

08003834 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 8003834:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 8003836:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
 8003838:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
 800383c:	9502      	str	r5, [sp, #8]
 800383e:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 8003840:	46a4      	mov	ip, r4
}
 8003842:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 8003844:	4760      	bx	ip
 8003846:	bf00      	nop

08003848 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 8003848:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 800384a:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
 800384c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
 8003850:	9502      	str	r5, [sp, #8]
 8003852:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8003854:	46a4      	mov	ip, r4
}
 8003856:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 8003858:	4760      	bx	ip
 800385a:	bf00      	nop

0800385c <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop

08003860 <_ZN12Adafruit_GFX11setRotationEh>:
    _height = HEIGHT;
 8003860:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    _width = WIDTH;
 8003864:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
  rotation = (x & 3);
 8003868:	f001 0303 	and.w	r3, r1, #3
  switch (rotation) {
 800386c:	07c9      	lsls	r1, r1, #31
 800386e:	bf48      	it	mi
 8003870:	b292      	uxthmi	r2, r2
  rotation = (x & 3);
 8003872:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 8003874:	6883      	ldr	r3, [r0, #8]
 8003876:	bf48      	it	mi
 8003878:	ea42 430c 	orrmi.w	r3, r2, ip, lsl #16
    _width = HEIGHT;
 800387c:	60c3      	str	r3, [r0, #12]
}
 800387e:	4770      	bx	lr

08003880 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
                                 uint16_t color) {
 8003880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003884:	461c      	mov	r4, r3
 8003886:	460b      	mov	r3, r1
  startWrite();
 8003888:	6801      	ldr	r1, [r0, #0]
 800388a:	4e12      	ldr	r6, [pc, #72]	@ (80038d4 <_ZN12Adafruit_GFX13drawFastVLineEssst+0x54>)
 800388c:	694f      	ldr	r7, [r1, #20]
                                 uint16_t color) {
 800388e:	b084      	sub	sp, #16
 8003890:	42b7      	cmp	r7, r6
 8003892:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
 8003896:	4605      	mov	r5, r0
 8003898:	d110      	bne.n	80038bc <_ZN12Adafruit_GFX13drawFastVLineEssst+0x3c>
  writeLine(x, y, x, y + h - 1, color);
 800389a:	3c01      	subs	r4, #1
 800389c:	4414      	add	r4, r2
 800389e:	b224      	sxth	r4, r4
 80038a0:	f8cd 8004 	str.w	r8, [sp, #4]
 80038a4:	9400      	str	r4, [sp, #0]
 80038a6:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80038a8:	4628      	mov	r0, r5
 80038aa:	4619      	mov	r1, r3
 80038ac:	47a0      	blx	r4
  endWrite();
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	42b3      	cmp	r3, r6
 80038b4:	d109      	bne.n	80038ca <_ZN12Adafruit_GFX13drawFastVLineEssst+0x4a>
}
 80038b6:	b004      	add	sp, #16
 80038b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038bc:	e9cd 3202 	strd	r3, r2, [sp, #8]
  startWrite();
 80038c0:	47b8      	blx	r7
  writeLine(x, y, x, y + h - 1, color);
 80038c2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80038c6:	6829      	ldr	r1, [r5, #0]
 80038c8:	e7e7      	b.n	800389a <_ZN12Adafruit_GFX13drawFastVLineEssst+0x1a>
  endWrite();
 80038ca:	4628      	mov	r0, r5
}
 80038cc:	b004      	add	sp, #16
 80038ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 80038d2:	4718      	bx	r3
 80038d4:	08003821 	.word	0x08003821

080038d8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
                                 uint16_t color) {
 80038d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  startWrite();
 80038dc:	6806      	ldr	r6, [r0, #0]
 80038de:	4f12      	ldr	r7, [pc, #72]	@ (8003928 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x50>)
                                 uint16_t color) {
 80038e0:	461c      	mov	r4, r3
  startWrite();
 80038e2:	6973      	ldr	r3, [r6, #20]
                                 uint16_t color) {
 80038e4:	b084      	sub	sp, #16
 80038e6:	42bb      	cmp	r3, r7
 80038e8:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
 80038ec:	4605      	mov	r5, r0
 80038ee:	d10f      	bne.n	8003910 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x38>
  writeLine(x, y, x + w - 1, y, color);
 80038f0:	1e63      	subs	r3, r4, #1
 80038f2:	f8cd 8004 	str.w	r8, [sp, #4]
 80038f6:	440b      	add	r3, r1
 80038f8:	9200      	str	r2, [sp, #0]
 80038fa:	b21b      	sxth	r3, r3
 80038fc:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 80038fe:	4628      	mov	r0, r5
 8003900:	47a0      	blx	r4
  endWrite();
 8003902:	682b      	ldr	r3, [r5, #0]
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	42bb      	cmp	r3, r7
 8003908:	d109      	bne.n	800391e <_ZN12Adafruit_GFX13drawFastHLineEssst+0x46>
}
 800390a:	b004      	add	sp, #16
 800390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003910:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
 8003914:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 8003916:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800391a:	682e      	ldr	r6, [r5, #0]
 800391c:	e7e8      	b.n	80038f0 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x18>
  endWrite();
 800391e:	4628      	mov	r0, r5
}
 8003920:	b004      	add	sp, #16
 8003922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 8003926:	4718      	bx	r3
 8003928:	08003821 	.word	0x08003821

0800392c <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
 800392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003930:	b086      	sub	sp, #24
  if (x0 == x1) {
 8003932:	4299      	cmp	r1, r3
                            uint16_t color) {
 8003934:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	@ 0x30
 8003938:	f8bd 6034 	ldrh.w	r6, [sp, #52]	@ 0x34
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800393c:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
 8003940:	4605      	mov	r5, r0
  if (x0 == x1) {
 8003942:	d021      	beq.n	8003988 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
  } else if (y0 == y1) {
 8003944:	42a2      	cmp	r2, r4
 8003946:	d011      	beq.n	800396c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    startWrite();
 8003948:	f8dc 8014 	ldr.w	r8, [ip, #20]
 800394c:	4f1d      	ldr	r7, [pc, #116]	@ (80039c4 <_ZN12Adafruit_GFX8drawLineEsssst+0x98>)
 800394e:	45b8      	cmp	r8, r7
 8003950:	d12e      	bne.n	80039b0 <_ZN12Adafruit_GFX8drawLineEsssst+0x84>
    writeLine(x0, y0, x1, y1, color);
 8003952:	e9cd 4600 	strd	r4, r6, [sp]
 8003956:	4628      	mov	r0, r5
 8003958:	f8dc 4028 	ldr.w	r4, [ip, #40]	@ 0x28
 800395c:	47a0      	blx	r4
    endWrite();
 800395e:	682b      	ldr	r3, [r5, #0]
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	42bb      	cmp	r3, r7
 8003964:	d11f      	bne.n	80039a6 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
}
 8003966:	b006      	add	sp, #24
 8003968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (x0 > x1)
 800396c:	4299      	cmp	r1, r3
 800396e:	dc16      	bgt.n	800399e <_ZN12Adafruit_GFX8drawLineEsssst+0x72>
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003970:	960c      	str	r6, [sp, #48]	@ 0x30
 8003972:	3301      	adds	r3, #1
 8003974:	f8dc 403c 	ldr.w	r4, [ip, #60]	@ 0x3c
 8003978:	1a5b      	subs	r3, r3, r1
 800397a:	b21b      	sxth	r3, r3
 800397c:	4628      	mov	r0, r5
 800397e:	46a4      	mov	ip, r4
}
 8003980:	b006      	add	sp, #24
 8003982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003986:	4760      	bx	ip
    if (y0 > y1)
 8003988:	42a2      	cmp	r2, r4
 800398a:	dd02      	ble.n	8003992 <_ZN12Adafruit_GFX8drawLineEsssst+0x66>
 800398c:	4613      	mov	r3, r2
 800398e:	4622      	mov	r2, r4
 8003990:	461c      	mov	r4, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003992:	1c63      	adds	r3, r4, #1
 8003994:	960c      	str	r6, [sp, #48]	@ 0x30
 8003996:	f8dc 4038 	ldr.w	r4, [ip, #56]	@ 0x38
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	e7ed      	b.n	800397a <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
    if (x0 > x1)
 800399e:	4608      	mov	r0, r1
 80039a0:	4619      	mov	r1, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	e7e4      	b.n	8003970 <_ZN12Adafruit_GFX8drawLineEsssst+0x44>
    endWrite();
 80039a6:	4628      	mov	r0, r5
}
 80039a8:	b006      	add	sp, #24
 80039aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 80039ae:	4718      	bx	r3
 80039b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039b4:	9103      	str	r1, [sp, #12]
    startWrite();
 80039b6:	47c0      	blx	r8
    writeLine(x0, y0, x1, y1, color);
 80039b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039bc:	f8d5 c000 	ldr.w	ip, [r5]
 80039c0:	9903      	ldr	r1, [sp, #12]
 80039c2:	e7c6      	b.n	8003952 <_ZN12Adafruit_GFX8drawLineEsssst+0x26>
 80039c4:	08003821 	.word	0x08003821

080039c8 <_ZN12Adafruit_GFX8fillRectEsssst>:
                            uint16_t color) {
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 80039cc:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
 80039d0:	4690      	mov	r8, r2
 80039d2:	461f      	mov	r7, r3
 80039d4:	4a20      	ldr	r2, [pc, #128]	@ (8003a58 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
  startWrite();
 80039d6:	f8dc 3014 	ldr.w	r3, [ip, #20]
                            uint16_t color) {
 80039da:	b083      	sub	sp, #12
 80039dc:	4293      	cmp	r3, r2
 80039de:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 80039e2:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80039e6:	4605      	mov	r5, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	d130      	bne.n	8003a4e <_ZN12Adafruit_GFX8fillRectEsssst+0x86>
  for (int16_t i = x; i < x + w; i++) {
 80039ec:	4427      	add	r7, r4
 80039ee:	42a7      	cmp	r7, r4
 80039f0:	dd14      	ble.n	8003a1c <_ZN12Adafruit_GFX8fillRectEsssst+0x54>
 80039f2:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8003a5c <_ZN12Adafruit_GFX8fillRectEsssst+0x94>
    writeFastVLine(i, y, h, color);
 80039f6:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 80039fa:	f8cd a000 	str.w	sl, [sp]
 80039fe:	455e      	cmp	r6, fp
 8003a00:	4621      	mov	r1, r4
 8003a02:	464b      	mov	r3, r9
 8003a04:	4642      	mov	r2, r8
 8003a06:	4628      	mov	r0, r5
 8003a08:	d110      	bne.n	8003a2c <_ZN12Adafruit_GFX8fillRectEsssst+0x64>
 8003a0a:	3401      	adds	r4, #1
 8003a0c:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
  for (int16_t i = x; i < x + w; i++) {
 8003a10:	b224      	sxth	r4, r4
  drawFastVLine(x, y, h, color);
 8003a12:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8003a14:	42bc      	cmp	r4, r7
  endWrite();
 8003a16:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8003a1a:	dbec      	blt.n	80039f6 <_ZN12Adafruit_GFX8fillRectEsssst+0x2e>
  endWrite();
 8003a1c:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8003a20:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10e      	bne.n	8003a44 <_ZN12Adafruit_GFX8fillRectEsssst+0x7c>
}
 8003a26:	b003      	add	sp, #12
 8003a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2c:	3401      	adds	r4, #1
  for (int16_t i = x; i < x + w; i++) {
 8003a2e:	b224      	sxth	r4, r4
    writeFastVLine(i, y, h, color);
 8003a30:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8003a32:	42a7      	cmp	r7, r4
  endWrite();
 8003a34:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8003a38:	dcdd      	bgt.n	80039f6 <_ZN12Adafruit_GFX8fillRectEsssst+0x2e>
  endWrite();
 8003a3a:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8003a3e:	4a06      	ldr	r2, [pc, #24]	@ (8003a58 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d0f0      	beq.n	8003a26 <_ZN12Adafruit_GFX8fillRectEsssst+0x5e>
 8003a44:	4628      	mov	r0, r5
}
 8003a46:	b003      	add	sp, #12
 8003a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8003a4c:	4718      	bx	r3
  startWrite();
 8003a4e:	4798      	blx	r3
  endWrite();
 8003a50:	f8d5 c000 	ldr.w	ip, [r5]
 8003a54:	e7ca      	b.n	80039ec <_ZN12Adafruit_GFX8fillRectEsssst+0x24>
 8003a56:	bf00      	nop
 8003a58:	08003821 	.word	0x08003821
 8003a5c:	08003835 	.word	0x08003835

08003a60 <_ZN12Adafruit_GFX9writeLineEsssst>:
                             uint16_t color) {
 8003a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a64:	b085      	sub	sp, #20
 8003a66:	461d      	mov	r5, r3
 8003a68:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8003a6c:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003a70:	1ab3      	subs	r3, r6, r2
 8003a72:	eba5 0c01 	sub.w	ip, r5, r1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	bfb8      	it	lt
 8003a7a:	425b      	neglt	r3, r3
 8003a7c:	f1bc 0f00 	cmp.w	ip, #0
 8003a80:	bfb8      	it	lt
 8003a82:	f1cc 0c00 	rsblt	ip, ip, #0
  if (steep) {
 8003a86:	4563      	cmp	r3, ip
                             uint16_t color) {
 8003a88:	460f      	mov	r7, r1
  if (steep) {
 8003a8a:	dd43      	ble.n	8003b14 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
 8003a8c:	46a8      	mov	r8, r5
    _swap_int16_t(x0, y0);
 8003a8e:	4617      	mov	r7, r2
  if (steep) {
 8003a90:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 8003a92:	4635      	mov	r5, r6
  if (x0 > x1) {
 8003a94:	42af      	cmp	r7, r5
    _swap_int16_t(x1, y1);
 8003a96:	4646      	mov	r6, r8
 8003a98:	468e      	mov	lr, r1
    _swap_int16_t(x0, y0);
 8003a9a:	460a      	mov	r2, r1
  if (steep) {
 8003a9c:	46e0      	mov	r8, ip
  if (x0 > x1) {
 8003a9e:	dd3e      	ble.n	8003b1e <_ZN12Adafruit_GFX9writeLineEsssst+0xbe>
  dy = abs(y1 - y0);
 8003aa0:	1b09      	subs	r1, r1, r4
 8003aa2:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
 8003aa6:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
  dx = x1 - x0;
 8003aaa:	1b79      	subs	r1, r7, r5
  int16_t err = dx / 2;
 8003aac:	f3c1 34c0 	ubfx	r4, r1, #15, #1
 8003ab0:	fa04 f481 	sxtah	r4, r4, r1
  if (y0 < y1) {
 8003ab4:	42b2      	cmp	r2, r6
  dx = x1 - x0;
 8003ab6:	b289      	uxth	r1, r1
 8003ab8:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 8003aba:	ea4f 0464 	mov.w	r4, r4, asr #1
  if (y0 < y1) {
 8003abe:	dd70      	ble.n	8003ba2 <_ZN12Adafruit_GFX9writeLineEsssst+0x142>
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	4563      	cmp	r3, ip
 8003ac4:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 8003ba8 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>
 8003ac8:	9203      	str	r2, [sp, #12]
    err -= dy;
 8003aca:	fa1f f888 	uxth.w	r8, r8
 8003ace:	dc3e      	bgt.n	8003b4e <_ZN12Adafruit_GFX9writeLineEsssst+0xee>
 8003ad0:	46bb      	mov	fp, r7
      writePixel(y0, x0, color);
 8003ad2:	f8d0 c000 	ldr.w	ip, [r0]
  drawPixel(x, y, color);
 8003ad6:	9002      	str	r0, [sp, #8]
      writePixel(y0, x0, color);
 8003ad8:	f8dc 7018 	ldr.w	r7, [ip, #24]
      writePixel(x0, y0, color);
 8003adc:	4557      	cmp	r7, sl
  drawPixel(x, y, color);
 8003ade:	bf08      	it	eq
 8003ae0:	f8dc 7010 	ldreq.w	r7, [ip, #16]
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	4632      	mov	r2, r6
 8003aea:	47b8      	blx	r7
    err -= dy;
 8003aec:	eba4 0308 	sub.w	r3, r4, r8
 8003af0:	b21c      	sxth	r4, r3
 8003af2:	3501      	adds	r5, #1
    if (err < 0) {
 8003af4:	2c00      	cmp	r4, #0
  drawPixel(x, y, color);
 8003af6:	9802      	ldr	r0, [sp, #8]
  for (; x0 <= x1; x0++) {
 8003af8:	b22d      	sxth	r5, r5
    err -= dy;
 8003afa:	b29b      	uxth	r3, r3
    if (err < 0) {
 8003afc:	da05      	bge.n	8003b0a <_ZN12Adafruit_GFX9writeLineEsssst+0xaa>
      err += dx;
 8003afe:	9a01      	ldr	r2, [sp, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	b21c      	sxth	r4, r3
      y0 += ystep;
 8003b04:	9b03      	ldr	r3, [sp, #12]
 8003b06:	441e      	add	r6, r3
 8003b08:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 8003b0a:	455d      	cmp	r5, fp
 8003b0c:	dde1      	ble.n	8003ad2 <_ZN12Adafruit_GFX9writeLineEsssst+0x72>
}
 8003b0e:	b005      	add	sp, #20
 8003b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (x0 > x1) {
 8003b14:	42af      	cmp	r7, r5
 8003b16:	4634      	mov	r4, r6
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4698      	mov	r8, r3
 8003b1c:	dcc0      	bgt.n	8003aa0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
  dx = x1 - x0;
 8003b1e:	1be9      	subs	r1, r5, r7
  int16_t err = dx / 2;
 8003b20:	f3c1 34c0 	ubfx	r4, r1, #15, #1
 8003b24:	fa04 f481 	sxtah	r4, r4, r1
  if (y0 < y1) {
 8003b28:	46ae      	mov	lr, r5
  dx = x1 - x0;
 8003b2a:	b289      	uxth	r1, r1
  if (y0 < y1) {
 8003b2c:	42b2      	cmp	r2, r6
 8003b2e:	463d      	mov	r5, r7
  dx = x1 - x0;
 8003b30:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 8003b32:	ea4f 0464 	mov.w	r4, r4, asr #1
  if (y0 < y1) {
 8003b36:	4616      	mov	r6, r2
 8003b38:	4677      	mov	r7, lr
 8003b3a:	db2c      	blt.n	8003b96 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
 8003b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b40:	4563      	cmp	r3, ip
 8003b42:	f8df a064 	ldr.w	sl, [pc, #100]	@ 8003ba8 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>
 8003b46:	9203      	str	r2, [sp, #12]
    err -= dy;
 8003b48:	fa1f f888 	uxth.w	r8, r8
 8003b4c:	ddc0      	ble.n	8003ad0 <_ZN12Adafruit_GFX9writeLineEsssst+0x70>
 8003b4e:	4683      	mov	fp, r0
 8003b50:	4631      	mov	r1, r6
 8003b52:	e014      	b.n	8003b7e <_ZN12Adafruit_GFX9writeLineEsssst+0x11e>
  drawPixel(x, y, color);
 8003b54:	6906      	ldr	r6, [r0, #16]
 8003b56:	9102      	str	r1, [sp, #8]
 8003b58:	4658      	mov	r0, fp
 8003b5a:	47b0      	blx	r6
}
 8003b5c:	9902      	ldr	r1, [sp, #8]
    err -= dy;
 8003b5e:	eba4 0308 	sub.w	r3, r4, r8
 8003b62:	b21c      	sxth	r4, r3
    if (err < 0) {
 8003b64:	3501      	adds	r5, #1
 8003b66:	2c00      	cmp	r4, #0
  for (; x0 <= x1; x0++) {
 8003b68:	b22d      	sxth	r5, r5
    err -= dy;
 8003b6a:	b29b      	uxth	r3, r3
    if (err < 0) {
 8003b6c:	da05      	bge.n	8003b7a <_ZN12Adafruit_GFX9writeLineEsssst+0x11a>
      err += dx;
 8003b6e:	9a01      	ldr	r2, [sp, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	b21c      	sxth	r4, r3
      y0 += ystep;
 8003b74:	9b03      	ldr	r3, [sp, #12]
 8003b76:	4419      	add	r1, r3
 8003b78:	b209      	sxth	r1, r1
  for (; x0 <= x1; x0++) {
 8003b7a:	42bd      	cmp	r5, r7
 8003b7c:	dcc7      	bgt.n	8003b0e <_ZN12Adafruit_GFX9writeLineEsssst+0xae>
      writePixel(y0, x0, color);
 8003b7e:	f8db 0000 	ldr.w	r0, [fp]
 8003b82:	6986      	ldr	r6, [r0, #24]
 8003b84:	4556      	cmp	r6, sl
  drawPixel(x, y, color);
 8003b86:	464b      	mov	r3, r9
 8003b88:	462a      	mov	r2, r5
 8003b8a:	d0e3      	beq.n	8003b54 <_ZN12Adafruit_GFX9writeLineEsssst+0xf4>
      writePixel(y0, x0, color);
 8003b8c:	9102      	str	r1, [sp, #8]
 8003b8e:	4658      	mov	r0, fp
 8003b90:	47b0      	blx	r6
 8003b92:	9902      	ldr	r1, [sp, #8]
 8003b94:	e7e3      	b.n	8003b5e <_ZN12Adafruit_GFX9writeLineEsssst+0xfe>
  if (y0 < y1) {
 8003b96:	2201      	movs	r2, #1
  for (; x0 <= x1; x0++) {
 8003b98:	42bd      	cmp	r5, r7
 8003b9a:	ddd1      	ble.n	8003b40 <_ZN12Adafruit_GFX9writeLineEsssst+0xe0>
}
 8003b9c:	b005      	add	sp, #20
 8003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (y0 < y1) {
 8003ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ba6:	e7f7      	b.n	8003b98 <_ZN12Adafruit_GFX9writeLineEsssst+0x138>
 8003ba8:	08003825 	.word	0x08003825

08003bac <_ZN12Adafruit_GFX8drawRectEsssst>:
                            uint16_t color) {
 8003bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	461d      	mov	r5, r3
  startWrite();
 8003bb2:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 8003bb4:	460f      	mov	r7, r1
 8003bb6:	4616      	mov	r6, r2
 8003bb8:	492e      	ldr	r1, [pc, #184]	@ (8003c74 <_ZN12Adafruit_GFX8drawRectEsssst+0xc8>)
  startWrite();
 8003bba:	695a      	ldr	r2, [r3, #20]
                            uint16_t color) {
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	428a      	cmp	r2, r1
 8003bc0:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8003bc4:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8003bc8:	4604      	mov	r4, r0
 8003bca:	d145      	bne.n	8003c58 <_ZN12Adafruit_GFX8drawRectEsssst+0xac>
  writeFastHLine(x, y, w, color);
 8003bcc:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
 8003bd0:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8003c78 <_ZN12Adafruit_GFX8drawRectEsssst+0xcc>
  drawFastHLine(x, y, w, color);
 8003bd4:	f8cd 8000 	str.w	r8, [sp]
 8003bd8:	45d3      	cmp	fp, sl
 8003bda:	bf08      	it	eq
 8003bdc:	f8d3 b03c 	ldreq.w	fp, [r3, #60]	@ 0x3c
  writeFastHLine(x, y, w, color);
 8003be0:	4632      	mov	r2, r6
 8003be2:	462b      	mov	r3, r5
 8003be4:	4639      	mov	r1, r7
 8003be6:	4620      	mov	r0, r4
 8003be8:	47d8      	blx	fp
  writeFastHLine(x, y + h - 1, w, color);
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
  drawFastHLine(x, y, w, color);
 8003bf0:	f8cd 8000 	str.w	r8, [sp]
  writeFastHLine(x, y + h - 1, w, color);
 8003bf4:	f109 32ff 	add.w	r2, r9, #4294967295
 8003bf8:	4432      	add	r2, r6
 8003bfa:	45d3      	cmp	fp, sl
 8003bfc:	b212      	sxth	r2, r2
 8003bfe:	d133      	bne.n	8003c68 <_ZN12Adafruit_GFX8drawRectEsssst+0xbc>
  drawFastHLine(x, y, w, color);
 8003c00:	f8d3 a03c 	ldr.w	sl, [r3, #60]	@ 0x3c
 8003c04:	4639      	mov	r1, r7
 8003c06:	462b      	mov	r3, r5
 8003c08:	4620      	mov	r0, r4
 8003c0a:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8003c7c <_ZN12Adafruit_GFX8drawRectEsssst+0xd0>
 8003c12:	f8d3 b020 	ldr.w	fp, [r3, #32]
  drawFastVLine(x, y, h, color);
 8003c16:	f8cd 8000 	str.w	r8, [sp]
 8003c1a:	45d3      	cmp	fp, sl
 8003c1c:	bf08      	it	eq
 8003c1e:	f8d3 b038 	ldreq.w	fp, [r3, #56]	@ 0x38
  writeFastVLine(x, y, h, color);
 8003c22:	4632      	mov	r2, r6
 8003c24:	464b      	mov	r3, r9
 8003c26:	4639      	mov	r1, r7
 8003c28:	4620      	mov	r0, r4
 8003c2a:	47d8      	blx	fp
  writeFastVLine(x + w - 1, y, h, color);
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	1e69      	subs	r1, r5, #1
 8003c30:	6a1d      	ldr	r5, [r3, #32]
  drawFastVLine(x, y, h, color);
 8003c32:	f8cd 8000 	str.w	r8, [sp]
 8003c36:	4555      	cmp	r5, sl
  writeFastVLine(x + w - 1, y, h, color);
 8003c38:	4439      	add	r1, r7
  drawFastVLine(x, y, h, color);
 8003c3a:	bf08      	it	eq
 8003c3c:	6b9d      	ldreq	r5, [r3, #56]	@ 0x38
  writeFastVLine(x + w - 1, y, h, color);
 8003c3e:	4632      	mov	r2, r6
 8003c40:	464b      	mov	r3, r9
 8003c42:	b209      	sxth	r1, r1
 8003c44:	4620      	mov	r0, r4
 8003c46:	47a8      	blx	r5
  endWrite();
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c74 <_ZN12Adafruit_GFX8drawRectEsssst+0xc8>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d105      	bne.n	8003c5e <_ZN12Adafruit_GFX8drawRectEsssst+0xb2>
}
 8003c52:	b003      	add	sp, #12
 8003c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 8003c58:	4790      	blx	r2
  writeFastHLine(x, y, w, color);
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	e7b6      	b.n	8003bcc <_ZN12Adafruit_GFX8drawRectEsssst+0x20>
  endWrite();
 8003c5e:	4620      	mov	r0, r4
}
 8003c60:	b003      	add	sp, #12
 8003c62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8003c66:	4718      	bx	r3
  writeFastHLine(x, y + h - 1, w, color);
 8003c68:	462b      	mov	r3, r5
 8003c6a:	4639      	mov	r1, r7
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	47d8      	blx	fp
 8003c70:	e7cc      	b.n	8003c0c <_ZN12Adafruit_GFX8drawRectEsssst+0x60>
 8003c72:	bf00      	nop
 8003c74:	08003821 	.word	0x08003821
 8003c78:	08003849 	.word	0x08003849
 8003c7c:	08003835 	.word	0x08003835

08003c80 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
                                 uint16_t color) {
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(x, y, w, h, color);
 8003c84:	f8d0 c000 	ldr.w	ip, [r0]
 8003c88:	f8df e088 	ldr.w	lr, [pc, #136]	@ 8003d14 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x94>
 8003c8c:	f8dc 6040 	ldr.w	r6, [ip, #64]	@ 0x40
                                 uint16_t color) {
 8003c90:	b083      	sub	sp, #12
 8003c92:	4576      	cmp	r6, lr
 8003c94:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8003c98:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8003c9c:	d128      	bne.n	8003cf0 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x70>
 8003c9e:	4690      	mov	r8, r2
 8003ca0:	461f      	mov	r7, r3
 8003ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d10 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x90>)
  startWrite();
 8003ca4:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	4605      	mov	r5, r0
 8003cac:	460c      	mov	r4, r1
 8003cae:	d12b      	bne.n	8003d08 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x88>
  for (int16_t i = x; i < x + w; i++) {
 8003cb0:	4427      	add	r7, r4
 8003cb2:	42bc      	cmp	r4, r7
 8003cb4:	da14      	bge.n	8003ce0 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x60>
 8003cb6:	f8df b060 	ldr.w	fp, [pc, #96]	@ 8003d18 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x98>
    writeFastVLine(i, y, h, color);
 8003cba:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 8003cbe:	f8cd a000 	str.w	sl, [sp]
 8003cc2:	455e      	cmp	r6, fp
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	4642      	mov	r2, r8
 8003cca:	4628      	mov	r0, r5
 8003ccc:	d101      	bne.n	8003cd2 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x52>
 8003cce:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
 8003cd2:	3401      	adds	r4, #1
  for (int16_t i = x; i < x + w; i++) {
 8003cd4:	b224      	sxth	r4, r4
    writeFastVLine(i, y, h, color);
 8003cd6:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8003cd8:	42bc      	cmp	r4, r7
  endWrite();
 8003cda:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8003cde:	dbec      	blt.n	8003cba <_ZN12Adafruit_GFX13writeFillRectEsssst+0x3a>
  endWrite();
 8003ce0:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x90>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d109      	bne.n	8003cfe <_ZN12Adafruit_GFX13writeFillRectEsssst+0x7e>
}
 8003cea:	b003      	add	sp, #12
 8003cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fillRect(x, y, w, h, color);
 8003cf0:	46b4      	mov	ip, r6
 8003cf2:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	@ 0x30
}
 8003cf6:	b003      	add	sp, #12
 8003cf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(x, y, w, h, color);
 8003cfc:	4760      	bx	ip
  endWrite();
 8003cfe:	4628      	mov	r0, r5
}
 8003d00:	b003      	add	sp, #12
 8003d02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8003d06:	4718      	bx	r3
  startWrite();
 8003d08:	4798      	blx	r3
  endWrite();
 8003d0a:	f8d5 c000 	ldr.w	ip, [r5]
 8003d0e:	e7cf      	b.n	8003cb0 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x30>
 8003d10:	08003821 	.word	0x08003821
 8003d14:	080039c9 	.word	0x080039c9
 8003d18:	08003835 	.word	0x08003835

08003d1c <_ZN12Adafruit_GFX10fillScreenEt>:
void Adafruit_GFX::fillScreen(uint16_t color) {
 8003d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(0, 0, _width, _height, color);
 8003d20:	f8d0 c000 	ldr.w	ip, [r0]
 8003d24:	4b27      	ldr	r3, [pc, #156]	@ (8003dc4 <_ZN12Adafruit_GFX10fillScreenEt+0xa8>)
 8003d26:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8003d2a:	f9b0 900c 	ldrsh.w	r9, [r0, #12]
 8003d2e:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 8003d32:	429c      	cmp	r4, r3
void Adafruit_GFX::fillScreen(uint16_t color) {
 8003d34:	b083      	sub	sp, #12
 8003d36:	460f      	mov	r7, r1
 8003d38:	d135      	bne.n	8003da6 <_ZN12Adafruit_GFX10fillScreenEt+0x8a>
  startWrite();
 8003d3a:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8003d3e:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8003dc8 <_ZN12Adafruit_GFX10fillScreenEt+0xac>
 8003d42:	455b      	cmp	r3, fp
 8003d44:	4605      	mov	r5, r0
 8003d46:	d138      	bne.n	8003dba <_ZN12Adafruit_GFX10fillScreenEt+0x9e>
  for (int16_t i = x; i < x + w; i++) {
 8003d48:	f1b9 0f00 	cmp.w	r9, #0
 8003d4c:	dd14      	ble.n	8003d78 <_ZN12Adafruit_GFX10fillScreenEt+0x5c>
 8003d4e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8003dcc <_ZN12Adafruit_GFX10fillScreenEt+0xb0>
 8003d52:	2400      	movs	r4, #0
    writeFastVLine(i, y, h, color);
 8003d54:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 8003d58:	9700      	str	r7, [sp, #0]
 8003d5a:	4556      	cmp	r6, sl
 8003d5c:	4643      	mov	r3, r8
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	4628      	mov	r0, r5
 8003d64:	b221      	sxth	r1, r4
 8003d66:	d10e      	bne.n	8003d86 <_ZN12Adafruit_GFX10fillScreenEt+0x6a>
 8003d68:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
  for (int16_t i = x; i < x + w; i++) {
 8003d6c:	3401      	adds	r4, #1
  drawFastVLine(x, y, h, color);
 8003d6e:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8003d70:	45a1      	cmp	r9, r4
  endWrite();
 8003d72:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8003d76:	d1ed      	bne.n	8003d54 <_ZN12Adafruit_GFX10fillScreenEt+0x38>
  endWrite();
 8003d78:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8003d7c:	455b      	cmp	r3, fp
 8003d7e:	d10d      	bne.n	8003d9c <_ZN12Adafruit_GFX10fillScreenEt+0x80>
}
 8003d80:	b003      	add	sp, #12
 8003d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int16_t i = x; i < x + w; i++) {
 8003d86:	3401      	adds	r4, #1
    writeFastVLine(i, y, h, color);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8003d8c:	454c      	cmp	r4, r9
  endWrite();
 8003d8e:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8003d92:	d1df      	bne.n	8003d54 <_ZN12Adafruit_GFX10fillScreenEt+0x38>
  endWrite();
 8003d94:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8003d98:	455b      	cmp	r3, fp
 8003d9a:	d0f1      	beq.n	8003d80 <_ZN12Adafruit_GFX10fillScreenEt+0x64>
 8003d9c:	4628      	mov	r0, r5
}
 8003d9e:	b003      	add	sp, #12
 8003da0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8003da4:	4718      	bx	r3
  fillRect(0, 0, _width, _height, color);
 8003da6:	2200      	movs	r2, #0
 8003da8:	9101      	str	r1, [sp, #4]
 8003daa:	f8cd 8000 	str.w	r8, [sp]
 8003dae:	464b      	mov	r3, r9
 8003db0:	4611      	mov	r1, r2
 8003db2:	47a0      	blx	r4
}
 8003db4:	b003      	add	sp, #12
 8003db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 8003dba:	4798      	blx	r3
  endWrite();
 8003dbc:	f8d5 c000 	ldr.w	ip, [r5]
 8003dc0:	e7c2      	b.n	8003d48 <_ZN12Adafruit_GFX10fillScreenEt+0x2c>
 8003dc2:	bf00      	nop
 8003dc4:	080039c9 	.word	0x080039c9
 8003dc8:	08003821 	.word	0x08003821
 8003dcc:	08003835 	.word	0x08003835

08003dd0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8003dd0:	b410      	push	{r4}
 8003dd2:	2400      	movs	r4, #0
 8003dd4:	f361 040f 	bfi	r4, r1, #0, #16
 8003dd8:	f362 441f 	bfi	r4, r2, #16, #16
    Print() : write_error(0) {}
 8003ddc:	2100      	movs	r1, #0
  textsize_x = textsize_y = 1;
 8003dde:	4a08      	ldr	r2, [pc, #32]	@ (8003e00 <_ZN12Adafruit_GFXC1Ess+0x30>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8003de0:	60c4      	str	r4, [r0, #12]
 8003de2:	e9c0 1401 	strd	r1, r4, [r0, #4]
  textsize_x = textsize_y = 1;
 8003de6:	6182      	str	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 8003de8:	f04f 34ff 	mov.w	r4, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8003dec:	4a05      	ldr	r2, [pc, #20]	@ (8003e04 <_ZN12Adafruit_GFXC1Ess+0x34>)
  wrap = true;
 8003dee:	7701      	strb	r1, [r0, #28]
  textcolor = textbgcolor = 0xFFFF;
 8003df0:	e9c0 1404 	strd	r1, r4, [r0, #16]
  gfxFont = NULL;
 8003df4:	6201      	str	r1, [r0, #32]
}
 8003df6:	f85d 4b04 	ldr.w	r4, [sp], #4
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8003dfa:	6002      	str	r2, [r0, #0]
}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	01000101 	.word	0x01000101
 8003e04:	08007acc 	.word	0x08007acc

08003e08 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 8003e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	4682      	mov	sl, r0
 8003e0e:	b097      	sub	sp, #92	@ 0x5c
 8003e10:	461d      	mov	r5, r3
 8003e12:	9211      	str	r2, [sp, #68]	@ 0x44
 8003e14:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
  if (!gfxFont) { // 'Classic' built-in font
 8003e18:	f8da 2020 	ldr.w	r2, [sl, #32]
                            uint8_t size_y) {
 8003e1c:	f8bd 0080 	ldrh.w	r0, [sp, #128]	@ 0x80
 8003e20:	9305      	str	r3, [sp, #20]
 8003e22:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8003e26:	f8bd 8084 	ldrh.w	r8, [sp, #132]	@ 0x84
 8003e2a:	9003      	str	r0, [sp, #12]
 8003e2c:	910a      	str	r1, [sp, #40]	@ 0x28
 8003e2e:	9307      	str	r3, [sp, #28]
  if (!gfxFont) { // 'Classic' built-in font
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	f000 80e4 	beq.w	8003ffe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f6>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8003e36:	7a13      	ldrb	r3, [r2, #8]
    startWrite();
 8003e38:	f8da c000 	ldr.w	ip, [sl]
  return gfxFont->bitmap;
 8003e3c:	e9d2 2100 	ldrd	r2, r1, [r2]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8003e40:	1aeb      	subs	r3, r5, r3
  return gfxFont->glyph + c;
 8003e42:	b2db      	uxtb	r3, r3
  return gfxFont->bitmap;
 8003e44:	9208      	str	r2, [sp, #32]
  return gfxFont->glyph + c;
 8003e46:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8003e4a:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8003e4e:	9306      	str	r3, [sp, #24]
    if (size_x > 1 || size_y > 1) {
 8003e50:	9907      	ldr	r1, [sp, #28]
 8003e52:	9b05      	ldr	r3, [sp, #20]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 8003e54:	78d4      	ldrb	r4, [r2, #3]
    if (size_x > 1 || size_y > 1) {
 8003e56:	430b      	orrs	r3, r1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 8003e58:	7891      	ldrb	r1, [r2, #2]
 8003e5a:	9104      	str	r1, [sp, #16]
    if (size_x > 1 || size_y > 1) {
 8003e5c:	2b01      	cmp	r3, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 8003e5e:	f992 1005 	ldrsb.w	r1, [r2, #5]
 8003e62:	4bad      	ldr	r3, [pc, #692]	@ (8004118 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x310>)
           yo = pgm_read_byte(&glyph->yOffset);
 8003e64:	f992 2006 	ldrsb.w	r2, [r2, #6]
 8003e68:	9215      	str	r2, [sp, #84]	@ 0x54
      yo16 = yo;
 8003e6a:	bf88      	it	hi
 8003e6c:	4693      	movhi	fp, r2
 8003e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e70:	461a      	mov	r2, r3
    startWrite();
 8003e72:	f8dc 3014 	ldr.w	r3, [ip, #20]
      xo16 = xo;
 8003e76:	bf8e      	itee	hi
 8003e78:	910d      	strhi	r1, [sp, #52]	@ 0x34
    int16_t xo16 = 0, yo16 = 0;
 8003e7a:	f04f 0b00 	movls.w	fp, #0
 8003e7e:	f8cd b034 	strls.w	fp, [sp, #52]	@ 0x34
 8003e82:	4293      	cmp	r3, r2
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 8003e84:	9114      	str	r1, [sp, #80]	@ 0x50
    startWrite();
 8003e86:	f040 812f 	bne.w	80040e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2e0>
    for (yy = 0; yy < h; yy++) {
 8003e8a:	2c00      	cmp	r4, #0
 8003e8c:	f000 80a9 	beq.w	8003fe2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1da>
 8003e90:	2700      	movs	r7, #0
 8003e92:	e9cd 4b12 	strd	r4, fp, [sp, #72]	@ 0x48
 8003e96:	9c03      	ldr	r4, [sp, #12]
 8003e98:	463e      	mov	r6, r7
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	463a      	mov	r2, r7
      for (xx = 0; xx < w; xx++) {
 8003e9e:	9b04      	ldr	r3, [sp, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8098 	beq.w	8003fd6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ce>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8003ea6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003ea8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
      for (xx = 0; xx < w; xx++) {
 8003eac:	900e      	str	r0, [sp, #56]	@ 0x38
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8003eae:	eb03 0800 	add.w	r8, r3, r0
 8003eb2:	9b07      	ldr	r3, [sp, #28]
 8003eb4:	fb08 1803 	mla	r8, r8, r3, r1
 8003eb8:	fa0f f388 	sxth.w	r3, r8
      for (xx = 0; xx < w; xx++) {
 8003ebc:	46a3      	mov	fp, r4
 8003ebe:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8003ec2:	9303      	str	r3, [sp, #12]
      for (xx = 0; xx < w; xx++) {
 8003ec4:	2500      	movs	r5, #0
 8003ec6:	4614      	mov	r4, r2
 8003ec8:	e006      	b.n	8003ed8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd0>
 8003eca:	9b04      	ldr	r3, [sp, #16]
 8003ecc:	3501      	adds	r5, #1
 8003ece:	b2ed      	uxtb	r5, r5
        bits <<= 1;
 8003ed0:	0076      	lsls	r6, r6, #1
      for (xx = 0; xx < w; xx++) {
 8003ed2:	42ab      	cmp	r3, r5
        bits <<= 1;
 8003ed4:	b2f6      	uxtb	r6, r6
      for (xx = 0; xx < w; xx++) {
 8003ed6:	d977      	bls.n	8003fc8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1c0>
        if (!(bit++ & 7)) {
 8003ed8:	4623      	mov	r3, r4
 8003eda:	1c62      	adds	r2, r4, #1
 8003edc:	b2d4      	uxtb	r4, r2
 8003ede:	075a      	lsls	r2, r3, #29
 8003ee0:	d105      	bne.n	8003eee <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe6>
          bits = pgm_read_byte(&bitmap[bo++]);
 8003ee2:	9a06      	ldr	r2, [sp, #24]
 8003ee4:	9908      	ldr	r1, [sp, #32]
 8003ee6:	1c53      	adds	r3, r2, #1
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	5c8e      	ldrb	r6, [r1, r2]
 8003eec:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 8003eee:	0633      	lsls	r3, r6, #24
 8003ef0:	d5eb      	bpl.n	8003eca <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
          if (size_x == 1 && size_y == 1) {
 8003ef2:	9b05      	ldr	r3, [sp, #20]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8003ef4:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
          if (size_x == 1 && size_y == 1) {
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d042      	beq.n	8003f82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x17a>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8003efc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003efe:	9a05      	ldr	r2, [sp, #20]
 8003f00:	f8dc 901c 	ldr.w	r9, [ip, #28]
 8003f04:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8003f08:	442b      	add	r3, r5
 8003f0a:	fb03 7702 	mla	r7, r3, r2, r7
 8003f0e:	b213      	sxth	r3, r2
 8003f10:	4a82      	ldr	r2, [pc, #520]	@ (800411c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x314>)
 8003f12:	4591      	cmp	r9, r2
 8003f14:	b23f      	sxth	r7, r7
 8003f16:	d14e      	bne.n	8003fb6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ae>
  fillRect(x, y, w, h, color);
 8003f18:	f8dc 9040 	ldr.w	r9, [ip, #64]	@ 0x40
 8003f1c:	4a80      	ldr	r2, [pc, #512]	@ (8004120 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x318>)
 8003f1e:	4591      	cmp	r9, r2
 8003f20:	d149      	bne.n	8003fb6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ae>
  startWrite();
 8003f22:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8003f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d163      	bne.n	8003ff4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ec>
  for (int16_t i = x; i < x + w; i++) {
 8003f2c:	9b05      	ldr	r3, [sp, #20]
 8003f2e:	eb03 0907 	add.w	r9, r3, r7
 8003f32:	45b9      	cmp	r9, r7
 8003f34:	dd1b      	ble.n	8003f6e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x166>
 8003f36:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
 8003f3a:	e00a      	b.n	8003f52 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x14a>
  drawFastVLine(x, y, h, color);
 8003f3c:	f8cd b000 	str.w	fp, [sp]
 8003f40:	f8dc 4038 	ldr.w	r4, [ip, #56]	@ 0x38
 8003f44:	3701      	adds	r7, #1
  for (int16_t i = x; i < x + w; i++) {
 8003f46:	b23f      	sxth	r7, r7
    writeFastVLine(i, y, h, color);
 8003f48:	47a0      	blx	r4
  for (int16_t i = x; i < x + w; i++) {
 8003f4a:	45b9      	cmp	r9, r7
  endWrite();
 8003f4c:	f8da c000 	ldr.w	ip, [sl]
  for (int16_t i = x; i < x + w; i++) {
 8003f50:	dd0b      	ble.n	8003f6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x162>
    writeFastVLine(i, y, h, color);
 8003f52:	f8dc 4020 	ldr.w	r4, [ip, #32]
 8003f56:	4d73      	ldr	r5, [pc, #460]	@ (8004124 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x31c>)
  drawFastVLine(x, y, h, color);
 8003f58:	9a03      	ldr	r2, [sp, #12]
 8003f5a:	42ac      	cmp	r4, r5
 8003f5c:	4639      	mov	r1, r7
 8003f5e:	4643      	mov	r3, r8
 8003f60:	4650      	mov	r0, sl
 8003f62:	d0eb      	beq.n	8003f3c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    writeFastVLine(i, y, h, color);
 8003f64:	f8cd b000 	str.w	fp, [sp]
 8003f68:	e7ec      	b.n	8003f44 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x13c>
 8003f6a:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
  endWrite();
 8003f6e:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8003f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d0a8      	beq.n	8003eca <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
 8003f78:	4650      	mov	r0, sl
 8003f7a:	4798      	blx	r3
    endWrite();
 8003f7c:	f8da c000 	ldr.w	ip, [sl]
 8003f80:	e7a3      	b.n	8003eca <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
          if (size_x == 1 && size_y == 1) {
 8003f82:	9b07      	ldr	r3, [sp, #28]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d1b9      	bne.n	8003efc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xf4>
            writePixel(x + xo + xx, y + yo + yy, color);
 8003f88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003f8a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003f8c:	18f9      	adds	r1, r7, r3
 8003f8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003f90:	f8dc 7018 	ldr.w	r7, [ip, #24]
 8003f94:	189a      	adds	r2, r3, r2
 8003f96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f98:	441a      	add	r2, r3
 8003f9a:	4b63      	ldr	r3, [pc, #396]	@ (8004128 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x320>)
 8003f9c:	4429      	add	r1, r5
 8003f9e:	429f      	cmp	r7, r3
  drawPixel(x, y, color);
 8003fa0:	bf08      	it	eq
 8003fa2:	f8dc 7010 	ldreq.w	r7, [ip, #16]
            writePixel(x + xo + xx, y + yo + yy, color);
 8003fa6:	b209      	sxth	r1, r1
 8003fa8:	b212      	sxth	r2, r2
 8003faa:	465b      	mov	r3, fp
 8003fac:	4650      	mov	r0, sl
 8003fae:	47b8      	blx	r7
    endWrite();
 8003fb0:	f8da c000 	ldr.w	ip, [sl]
 8003fb4:	e789      	b.n	8003eca <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8003fb6:	e9cd 8b00 	strd	r8, fp, [sp]
 8003fba:	9a03      	ldr	r2, [sp, #12]
 8003fbc:	4639      	mov	r1, r7
 8003fbe:	4650      	mov	r0, sl
 8003fc0:	47c8      	blx	r9
    endWrite();
 8003fc2:	f8da c000 	ldr.w	ip, [sl]
 8003fc6:	e780      	b.n	8003eca <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
        if (!(bit++ & 7)) {
 8003fc8:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	@ 0x38
 8003fcc:	eb02 0e03 	add.w	lr, r2, r3
 8003fd0:	465c      	mov	r4, fp
 8003fd2:	fa5f f28e 	uxtb.w	r2, lr
    for (yy = 0; yy < h; yy++) {
 8003fd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003fd8:	3001      	adds	r0, #1
 8003fda:	b2c0      	uxtb	r0, r0
 8003fdc:	4283      	cmp	r3, r0
 8003fde:	f63f af5e 	bhi.w	8003e9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x96>
    endWrite();
 8003fe2:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8003fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	f040 80d1 	bne.w	8004190 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x388>
}
 8003fee:	b017      	add	sp, #92	@ 0x5c
 8003ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	4798      	blx	r3
  endWrite();
 8003ff8:	f8da c000 	ldr.w	ip, [sl]
 8003ffc:	e796      	b.n	8003f2c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x124>
    if ((x >= _width) ||              // Clip right
 8003ffe:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 8004002:	428a      	cmp	r2, r1
 8004004:	460b      	mov	r3, r1
 8004006:	ddf2      	ble.n	8003fee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 8004008:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 800400c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800400e:	428a      	cmp	r2, r1
 8004010:	dded      	ble.n	8003fee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8004012:	9805      	ldr	r0, [sp, #20]
 8004014:	2206      	movs	r2, #6
 8004016:	fb12 3200 	smlabb	r2, r2, r0, r3
        (y >= _height) ||             // Clip bottom
 800401a:	2a00      	cmp	r2, #0
 800401c:	dde7      	ble.n	8003fee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 800401e:	9b07      	ldr	r3, [sp, #28]
 8004020:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8004024:	2a00      	cmp	r2, #0
 8004026:	dde2      	ble.n	8003fee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
    if (!_cp437 && (c >= 176))
 8004028:	f89a 201c 	ldrb.w	r2, [sl, #28]
 800402c:	2a00      	cmp	r2, #0
 800402e:	f000 80c7 	beq.w	80041c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3b8>
    startWrite();
 8004032:	f8da 0000 	ldr.w	r0, [sl]
 8004036:	4b38      	ldr	r3, [pc, #224]	@ (8004118 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x310>)
 8004038:	6942      	ldr	r2, [r0, #20]
 800403a:	9309      	str	r3, [sp, #36]	@ 0x24
 800403c:	429a      	cmp	r2, r3
 800403e:	f040 80d6 	bne.w	80041ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3e6>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8004042:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 8004046:	4a39      	ldr	r2, [pc, #228]	@ (800412c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x324>)
            writePixel(x + i, y + j, color);
 8004048:	f8bd b044 	ldrh.w	fp, [sp, #68]	@ 0x44
 800404c:	9f05      	ldr	r7, [sp, #20]
 800404e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8004052:	f8cd 8010 	str.w	r8, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8004056:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800405a:	1d61      	adds	r1, r4, #5
 800405c:	b289      	uxth	r1, r1
 800405e:	442a      	add	r2, r5
            writePixel(x + i, y + j, color);
 8004060:	910e      	str	r1, [sp, #56]	@ 0x38
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8004062:	46a4      	mov	ip, r4
            writePixel(x + i, y + j, color);
 8004064:	4611      	mov	r1, r2
 8004066:	940f      	str	r4, [sp, #60]	@ 0x3c
 8004068:	4603      	mov	r3, r0
 800406a:	46a0      	mov	r8, r4
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800406c:	fa0f f288 	sxth.w	r2, r8
 8004070:	9206      	str	r2, [sp, #24]
 8004072:	b23a      	sxth	r2, r7
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8004074:	f811 6b01 	ldrb.w	r6, [r1], #1
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8004078:	9208      	str	r2, [sp, #32]
 800407a:	fa0f f289 	sxth.w	r2, r9
 800407e:	920a      	str	r2, [sp, #40]	@ 0x28
 8004080:	463a      	mov	r2, r7
 8004082:	e9cd 810c 	strd	r8, r1, [sp, #48]	@ 0x30
 8004086:	4657      	mov	r7, sl
 8004088:	2408      	movs	r4, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800408a:	2500      	movs	r5, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800408c:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8004090:	4692      	mov	sl, r2
 8004092:	e01a      	b.n	80040ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c2>
          if (size_x == 1 && size_y == 1)
 8004094:	f1ba 0f01 	cmp.w	sl, #1
            writePixel(x + i, y + j, color);
 8004098:	b2aa      	uxth	r2, r5
          if (size_x == 1 && size_y == 1)
 800409a:	d02a      	beq.n	80040f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ea>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 800409c:	fb19 f202 	smulbb	r2, r9, r2
 80040a0:	9903      	ldr	r1, [sp, #12]
 80040a2:	445a      	add	r2, fp
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80040a4:	9101      	str	r1, [sp, #4]
 80040a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80040a8:	9100      	str	r1, [sp, #0]
 80040aa:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80040ae:	9906      	ldr	r1, [sp, #24]
 80040b0:	9b08      	ldr	r3, [sp, #32]
 80040b2:	b212      	sxth	r2, r2
 80040b4:	4638      	mov	r0, r7
 80040b6:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 80040b8:	683b      	ldr	r3, [r7, #0]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80040ba:	3c01      	subs	r4, #1
 80040bc:	3501      	adds	r5, #1
 80040be:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 80040c2:	b26d      	sxtb	r5, r5
 80040c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80040c8:	d032      	beq.n	8004130 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x328>
        if (line & 1) {
 80040ca:	07f1      	lsls	r1, r6, #31
 80040cc:	d4e2      	bmi.n	8004094 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x28c>
        } else if (bg != color) {
 80040ce:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80040d2:	428a      	cmp	r2, r1
 80040d4:	d0f1      	beq.n	80040ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
          if (size_x == 1 && size_y == 1)
 80040d6:	f1ba 0f01 	cmp.w	sl, #1
            writePixel(x + i, y + j, color);
 80040da:	b2aa      	uxth	r2, r5
          if (size_x == 1 && size_y == 1)
 80040dc:	d05d      	beq.n	800419a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x392>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80040de:	fb19 f202 	smulbb	r2, r9, r2
 80040e2:	9904      	ldr	r1, [sp, #16]
 80040e4:	445a      	add	r2, fp
 80040e6:	e7dd      	b.n	80040a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29c>
    startWrite();
 80040e8:	4650      	mov	r0, sl
 80040ea:	4798      	blx	r3
    endWrite();
 80040ec:	f8da c000 	ldr.w	ip, [sl]
 80040f0:	e6cb      	b.n	8003e8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
          if (size_x == 1 && size_y == 1)
 80040f2:	f1b9 0f01 	cmp.w	r9, #1
 80040f6:	d1d1      	bne.n	800409c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x294>
            writePixel(x + i, y + j, color);
 80040f8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80040fc:	480a      	ldr	r0, [pc, #40]	@ (8004128 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x320>)
 80040fe:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8004102:	4580      	cmp	r8, r0
 8004104:	445a      	add	r2, fp
  drawPixel(x, y, color);
 8004106:	bf08      	it	eq
 8004108:	f8d3 8010 	ldreq.w	r8, [r3, #16]
            writePixel(x + i, y + j, color);
 800410c:	9b03      	ldr	r3, [sp, #12]
 800410e:	b212      	sxth	r2, r2
 8004110:	4638      	mov	r0, r7
 8004112:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	e7d0      	b.n	80040ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
 8004118:	08003821 	.word	0x08003821
 800411c:	08003c81 	.word	0x08003c81
 8004120:	080039c9 	.word	0x080039c9
 8004124:	08003835 	.word	0x08003835
 8004128:	08003825 	.word	0x08003825
 800412c:	08007b1c 	.word	0x08007b1c
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8004130:	e9dd 810c 	ldrd	r8, r1, [sp, #48]	@ 0x30
 8004134:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 8004138:	4652      	mov	r2, sl
 800413a:	4490      	add	r8, r2
 800413c:	46ba      	mov	sl, r7
 800413e:	f10c 0c01 	add.w	ip, ip, #1
 8004142:	4617      	mov	r7, r2
 8004144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004146:	fa1f fc8c 	uxth.w	ip, ip
 800414a:	4562      	cmp	r2, ip
 800414c:	fa1f f888 	uxth.w	r8, r8
 8004150:	d18c      	bne.n	800406c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x264>
    if (bg != color) { // If opaque, draw vertical line for last column
 8004152:	4618      	mov	r0, r3
 8004154:	e9dd 3803 	ldrd	r3, r8, [sp, #12]
 8004158:	4543      	cmp	r3, r8
 800415a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800415c:	d013      	beq.n	8004186 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x37e>
      if (size_x == 1 && size_y == 1)
 800415e:	9b05      	ldr	r3, [sp, #20]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d032      	beq.n	80041ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3c2>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8004164:	9b07      	ldr	r3, [sp, #28]
 8004166:	f8cd 8004 	str.w	r8, [sp, #4]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	69c5      	ldr	r5, [r0, #28]
 8004170:	9805      	ldr	r0, [sp, #20]
 8004172:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004174:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004178:	18e1      	adds	r1, r4, r3
 800417a:	b209      	sxth	r1, r1
 800417c:	4603      	mov	r3, r0
 800417e:	4650      	mov	r0, sl
 8004180:	47a8      	blx	r5
    endWrite();
 8004182:	f8da 0000 	ldr.w	r0, [sl]
 8004186:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800418a:	4293      	cmp	r3, r2
 800418c:	f43f af2f 	beq.w	8003fee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
    endWrite();
 8004190:	4650      	mov	r0, sl
}
 8004192:	b017      	add	sp, #92	@ 0x5c
 8004194:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 8004198:	4718      	bx	r3
          if (size_x == 1 && size_y == 1)
 800419a:	f1b9 0f01 	cmp.w	r9, #1
 800419e:	d19e      	bne.n	80040de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d6>
            writePixel(x + i, y + j, bg);
 80041a0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80041a4:	4814      	ldr	r0, [pc, #80]	@ (80041f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f0>)
 80041a6:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80041aa:	4580      	cmp	r8, r0
 80041ac:	445a      	add	r2, fp
  drawPixel(x, y, color);
 80041ae:	bf08      	it	eq
 80041b0:	f8d3 8010 	ldreq.w	r8, [r3, #16]
            writePixel(x + i, y + j, bg);
 80041b4:	9b04      	ldr	r3, [sp, #16]
 80041b6:	b212      	sxth	r2, r2
 80041b8:	4638      	mov	r0, r7
 80041ba:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	e77c      	b.n	80040ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
    if (!_cp437 && (c >= 176))
 80041c0:	2daf      	cmp	r5, #175	@ 0xaf
      c++; // Handle 'classic' charset behavior
 80041c2:	bf84      	itt	hi
 80041c4:	3501      	addhi	r5, #1
 80041c6:	b2ed      	uxtbhi	r5, r5
 80041c8:	e733      	b.n	8004032 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x22a>
      if (size_x == 1 && size_y == 1)
 80041ca:	9b07      	ldr	r3, [sp, #28]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d1c9      	bne.n	8004164 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x35c>
        writeFastVLine(x + 5, y, 8, bg);
 80041d0:	6a04      	ldr	r4, [r0, #32]
  drawFastVLine(x, y, h, color);
 80041d2:	f8cd 8000 	str.w	r8, [sp]
        writeFastVLine(x + 5, y, 8, bg);
 80041d6:	b211      	sxth	r1, r2
 80041d8:	4a08      	ldr	r2, [pc, #32]	@ (80041fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>)
 80041da:	4294      	cmp	r4, r2
  drawFastVLine(x, y, h, color);
 80041dc:	bf08      	it	eq
 80041de:	6b84      	ldreq	r4, [r0, #56]	@ 0x38
        writeFastVLine(x + 5, y, 8, bg);
 80041e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80041e2:	4650      	mov	r0, sl
 80041e4:	2308      	movs	r3, #8
 80041e6:	47a0      	blx	r4
    endWrite();
 80041e8:	f8da 0000 	ldr.w	r0, [sl]
 80041ec:	e7cb      	b.n	8004186 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x37e>
    startWrite();
 80041ee:	4650      	mov	r0, sl
 80041f0:	4790      	blx	r2
            writePixel(x + i, y + j, color);
 80041f2:	f8da 0000 	ldr.w	r0, [sl]
 80041f6:	e724      	b.n	8004042 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x23a>
 80041f8:	08003825 	.word	0x08003825
 80041fc:	08003835 	.word	0x08003835

08004200 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 8004200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004202:	4604      	mov	r4, r0
  if (!gfxFont) { // 'Classic' built-in font
 8004204:	6a00      	ldr	r0, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 8004206:	b085      	sub	sp, #20
 8004208:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
 800420a:	2800      	cmp	r0, #0
 800420c:	d047      	beq.n	800429e <_ZN12Adafruit_GFX5writeEh+0x9e>
    if (c == '\n') {
 800420e:	290a      	cmp	r1, #10
 8004210:	d03a      	beq.n	8004288 <_ZN12Adafruit_GFX5writeEh+0x88>
    } else if (c != '\r') {
 8004212:	290d      	cmp	r1, #13
 8004214:	d040      	beq.n	8004298 <_ZN12Adafruit_GFX5writeEh+0x98>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 8004216:	7a02      	ldrb	r2, [r0, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8004218:	4291      	cmp	r1, r2
 800421a:	d33d      	bcc.n	8004298 <_ZN12Adafruit_GFX5writeEh+0x98>
 800421c:	7a81      	ldrb	r1, [r0, #10]
 800421e:	4299      	cmp	r1, r3
 8004220:	d33a      	bcc.n	8004298 <_ZN12Adafruit_GFX5writeEh+0x98>
  return gfxFont->glyph + c;
 8004222:	6845      	ldr	r5, [r0, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 8004224:	1a9a      	subs	r2, r3, r2
  return gfxFont->glyph + c;
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 800422c:	78ae      	ldrb	r6, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800422e:	b326      	cbz	r6, 800427a <_ZN12Adafruit_GFX5writeEh+0x7a>
 8004230:	78ea      	ldrb	r2, [r5, #3]
 8004232:	b312      	cbz	r2, 800427a <_ZN12Adafruit_GFX5writeEh+0x7a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8004234:	7ee7      	ldrb	r7, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8004236:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800423a:	f894 c018 	ldrb.w	ip, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 800423e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8004242:	f894 e019 	ldrb.w	lr, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8004246:	b17f      	cbz	r7, 8004268 <_ZN12Adafruit_GFX5writeEh+0x68>
 8004248:	f995 7005 	ldrsb.w	r7, [r5, #5]
 800424c:	443e      	add	r6, r7
 800424e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004252:	fb0c 1606 	mla	r6, ip, r6, r1
 8004256:	42be      	cmp	r6, r7
 8004258:	dd06      	ble.n	8004268 <_ZN12Adafruit_GFX5writeEh+0x68>
            cursor_x = 0;
 800425a:	2100      	movs	r1, #0
 800425c:	8221      	strh	r1, [r4, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800425e:	7b00      	ldrb	r0, [r0, #12]
            cursor_y += (int16_t)textsize_y *
 8004260:	fb00 200e 	mla	r0, r0, lr, r2
 8004264:	b202      	sxth	r2, r0
 8004266:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8004268:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800426c:	8ae0      	ldrh	r0, [r4, #22]
 800426e:	9001      	str	r0, [sp, #4]
 8004270:	8aa0      	ldrh	r0, [r4, #20]
 8004272:	9000      	str	r0, [sp, #0]
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff fdc7 	bl	8003e08 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 800427a:	7929      	ldrb	r1, [r5, #4]
        cursor_x +=
 800427c:	8a23      	ldrh	r3, [r4, #16]
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 800427e:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 8004280:	fb01 3302 	mla	r3, r1, r2, r3
 8004284:	8223      	strh	r3, [r4, #16]
 8004286:	e007      	b.n	8004298 <_ZN12Adafruit_GFX5writeEh+0x98>
      cursor_x = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	8223      	strh	r3, [r4, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800428c:	7b02      	ldrb	r2, [r0, #12]
      cursor_y +=
 800428e:	8a63      	ldrh	r3, [r4, #18]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004290:	7e61      	ldrb	r1, [r4, #25]
      cursor_y +=
 8004292:	fb01 3302 	mla	r3, r1, r2, r3
 8004296:	8263      	strh	r3, [r4, #18]
}
 8004298:	2001      	movs	r0, #1
 800429a:	b005      	add	sp, #20
 800429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c == '\n') {              // Newline?
 800429e:	290a      	cmp	r1, #10
 80042a0:	d02a      	beq.n	80042f8 <_ZN12Adafruit_GFX5writeEh+0xf8>
    } else if (c != '\r') {       // Ignore carriage returns
 80042a2:	290d      	cmp	r1, #13
 80042a4:	d0f8      	beq.n	8004298 <_ZN12Adafruit_GFX5writeEh+0x98>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80042a6:	7ee7      	ldrb	r7, [r4, #27]
 80042a8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80042ac:	7e25      	ldrb	r5, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 80042ae:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80042b2:	7e66      	ldrb	r6, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80042b4:	b16f      	cbz	r7, 80042d2 <_ZN12Adafruit_GFX5writeEh+0xd2>
 80042b6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80042ba:	f04f 0c06 	mov.w	ip, #6
 80042be:	fb1c 1c05 	smlabb	ip, ip, r5, r1
 80042c2:	45bc      	cmp	ip, r7
 80042c4:	dd05      	ble.n	80042d2 <_ZN12Adafruit_GFX5writeEh+0xd2>
        cursor_y += textsize_y * 8; // advance y one line
 80042c6:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 80042ca:	b212      	sxth	r2, r2
        cursor_x = 0;                                       // Reset x to zero,
 80042cc:	8220      	strh	r0, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 80042ce:	8262      	strh	r2, [r4, #18]
 80042d0:	4601      	mov	r1, r0
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80042d2:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80042d6:	8ae0      	ldrh	r0, [r4, #22]
 80042d8:	9001      	str	r0, [sp, #4]
 80042da:	8aa0      	ldrh	r0, [r4, #20]
 80042dc:	9000      	str	r0, [sp, #0]
 80042de:	4620      	mov	r0, r4
 80042e0:	f7ff fd92 	bl	8003e08 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 80042e4:	7e23      	ldrb	r3, [r4, #24]
 80042e6:	8a22      	ldrh	r2, [r4, #16]
 80042e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80042ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}
 80042f0:	2001      	movs	r0, #1
      cursor_x += textsize_x * 6; // Advance x one char
 80042f2:	8223      	strh	r3, [r4, #16]
}
 80042f4:	b005      	add	sp, #20
 80042f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cursor_y += textsize_y * 8; // advance y one line
 80042f8:	8a63      	ldrh	r3, [r4, #18]
 80042fa:	7e62      	ldrb	r2, [r4, #25]
      cursor_x = 0;               // Reset x to zero,
 80042fc:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 80042fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
}
 8004302:	2001      	movs	r0, #1
      cursor_y += textsize_y * 8; // advance y one line
 8004304:	8263      	strh	r3, [r4, #18]
}
 8004306:	b005      	add	sp, #20
 8004308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800430a:	bf00      	nop

0800430c <_ZN12Adafruit_GFX11setTextSizeEh>:
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 800430c:	2901      	cmp	r1, #1
 800430e:	bf38      	it	cc
 8004310:	2101      	movcc	r1, #1
  textsize_x = (s_x > 0) ? s_x : 1;
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	f361 0307 	bfi	r3, r1, #0, #8
 800431a:	f361 230f 	bfi	r3, r1, #8, #8
 800431e:	8303      	strh	r3, [r0, #24]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop

08004324 <_ZN15Adafruit_SPITFT10startWriteEv>:
#else  // !HAS_PORT_SET_CLR
    *csPort &= csPinMaskClr;
#endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
//    digitalWrite(_cs, LOW);
    callback(SpiCmd::cs_low, 0, 0);
 8004324:	2200      	movs	r2, #0
 8004326:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004328:	4611      	mov	r1, r2
 800432a:	2002      	movs	r0, #2
 800432c:	4718      	bx	r3
 800432e:	bf00      	nop

08004330 <_ZN15Adafruit_SPITFT8endWriteEv>:
    callback(SpiCmd::cs_high, 0, 0);
 8004330:	2200      	movs	r2, #0
 8004332:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004334:	4611      	mov	r1, r2
 8004336:	2003      	movs	r0, #3
 8004338:	4718      	bx	r3
 800433a:	bf00      	nop

0800433c <_ZN15Adafruit_SPITFT10writePixelEsst>:
    @param  x      Horizontal position (0 = left).
    @param  y      Vertical position   (0 = top).
    @param  color  16-bit pixel color in '565' RGB format.
*/
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 800433c:	2900      	cmp	r1, #0
 800433e:	db1e      	blt.n	800437e <_ZN15Adafruit_SPITFT10writePixelEsst+0x42>
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	461c      	mov	r4, r3
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004344:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8004348:	428b      	cmp	r3, r1
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 800434a:	b084      	sub	sp, #16
 800434c:	4605      	mov	r5, r0
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 800434e:	dd14      	ble.n	800437a <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
 8004350:	2a00      	cmp	r2, #0
 8004352:	db12      	blt.n	800437a <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
 8004354:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8004358:	4293      	cmp	r3, r2
 800435a:	dd0e      	ble.n	800437a <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
    setAddrWindow(x, y, 1, 1);
 800435c:	6806      	ldr	r6, [r0, #0]
 800435e:	2301      	movs	r3, #1
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	b292      	uxth	r2, r2
 8004364:	b289      	uxth	r1, r1
 8004366:	6d76      	ldr	r6, [r6, #84]	@ 0x54
 8004368:	47b0      	blx	r6
#endif
    TFT_WR_STROBE();
  }
#endif
  uint8_t data[2];
  data[0] = w >> 8;
 800436a:	ba63      	rev16	r3, r4
 800436c:	f8ad 300c 	strh.w	r3, [sp, #12]
  data[1] = w;
  callback(SpiCmd::transmit, data, 2);
 8004370:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8004372:	2202      	movs	r2, #2
 8004374:	a903      	add	r1, sp, #12
 8004376:	2006      	movs	r0, #6
 8004378:	47a0      	blx	r4
}
 800437a:	b004      	add	sp, #16
 800437c:	bd70      	pop	{r4, r5, r6, pc}
 800437e:	4770      	bx	lr

08004380 <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 8004380:	b530      	push	{r4, r5, lr}
  startWrite();
 8004382:	6803      	ldr	r3, [r0, #0]
 8004384:	4a1b      	ldr	r2, [pc, #108]	@ (80043f4 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x74>)
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	4293      	cmp	r3, r2
void Adafruit_SPITFT::invertDisplay(bool i) {
 800438a:	b083      	sub	sp, #12
 800438c:	4604      	mov	r4, r0
 800438e:	460d      	mov	r5, r1
 8004390:	d129      	bne.n	80043e6 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x66>
    callback(SpiCmd::cs_low, 0, 0);
 8004392:	2200      	movs	r2, #0
 8004394:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004396:	4611      	mov	r1, r2
 8004398:	2002      	movs	r0, #2
 800439a:	4798      	blx	r3
  writeCommand(i ? invertOnCommand : invertOffCommand);
 800439c:	b305      	cbz	r5, 80043e0 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x60>
 800439e:	f894 5028 	ldrb.w	r5, [r4, #40]	@ 0x28
#else  // !HAS_PORT_SET_CLR
    *dcPort &= dcPinMaskClr;
#endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
//    digitalWrite(_dc, LOW);
    callback(SpiCmd::dc_low, 0, 0);
 80043a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043a4:	2200      	movs	r2, #0
 80043a6:	4611      	mov	r1, r2
 80043a8:	2004      	movs	r0, #4
 80043aa:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 80043ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043ae:	f88d 5007 	strb.w	r5, [sp, #7]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f10d 0107 	add.w	r1, sp, #7
 80043b8:	2006      	movs	r0, #6
 80043ba:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 80043bc:	2200      	movs	r2, #0
 80043be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043c0:	4611      	mov	r1, r2
 80043c2:	2005      	movs	r0, #5
 80043c4:	4798      	blx	r3
  endWrite();
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	4a0b      	ldr	r2, [pc, #44]	@ (80043f8 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x78>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10c      	bne.n	80043ea <_ZN15Adafruit_SPITFT13invertDisplayEb+0x6a>
    callback(SpiCmd::cs_high, 0, 0);
 80043d0:	2200      	movs	r2, #0
 80043d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043d4:	4611      	mov	r1, r2
 80043d6:	2003      	movs	r0, #3
}
 80043d8:	b003      	add	sp, #12
 80043da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043de:	4718      	bx	r3
  writeCommand(i ? invertOnCommand : invertOffCommand);
 80043e0:	f894 5029 	ldrb.w	r5, [r4, #41]	@ 0x29
 80043e4:	e7dd      	b.n	80043a2 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x22>
  startWrite();
 80043e6:	4798      	blx	r3
 80043e8:	e7d8      	b.n	800439c <_ZN15Adafruit_SPITFT13invertDisplayEb+0x1c>
  endWrite();
 80043ea:	4620      	mov	r0, r4
}
 80043ec:	b003      	add	sp, #12
 80043ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  endWrite();
 80043f2:	4718      	bx	r3
 80043f4:	08004325 	.word	0x08004325
 80043f8:	08004331 	.word	0x08004331

080043fc <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
                                            uint16_t color) {
 80043fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004400:	b084      	sub	sp, #16
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8004402:	2900      	cmp	r1, #0
                                            uint16_t color) {
 8004404:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8004408:	db32      	blt.n	8004470 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 800440a:	4606      	mov	r6, r0
 800440c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8004410:	4288      	cmp	r0, r1
 8004412:	dd2d      	ble.n	8004470 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02b      	beq.n	8004470 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
    if (h < 0) {                       // If negative height...
 8004418:	da05      	bge.n	8004426 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x2a>
      y += h + 1;                      //   Move Y to top edge
 800441a:	b29b      	uxth	r3, r3
 800441c:	3201      	adds	r2, #1
 800441e:	441a      	add	r2, r3
      h = -h;                          //   Use positive height
 8004420:	425b      	negs	r3, r3
      y += h + 1;                      //   Move Y to top edge
 8004422:	b212      	sxth	r2, r2
      h = -h;                          //   Use positive height
 8004424:	b21b      	sxth	r3, r3
    if (y < _height) { // Not off bottom
 8004426:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
 800442a:	4290      	cmp	r0, r2
 800442c:	dd20      	ble.n	8004470 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
      int16_t y2 = y + h - 1;
 800442e:	fa1f fc82 	uxth.w	ip, r2
 8004432:	fa1f fe83 	uxth.w	lr, r3
 8004436:	eb0c 070e 	add.w	r7, ip, lr
 800443a:	b2bf      	uxth	r7, r7
 800443c:	1e7c      	subs	r4, r7, #1
 800443e:	b224      	sxth	r4, r4
      if (y2 >= 0) { // Not off top
 8004440:	2c00      	cmp	r4, #0
 8004442:	db15      	blt.n	8004470 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
        if (y < 0) {
 8004444:	2a00      	cmp	r2, #0
 8004446:	da03      	bge.n	8004450 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
          h = y2 + 1;
 8004448:	b23b      	sxth	r3, r7
 800444a:	46be      	mov	lr, r7
 800444c:	f04f 0c00 	mov.w	ip, #0
  setAddrWindow(x, y, w, h);
 8004450:	6832      	ldr	r2, [r6, #0]
        if (y2 >= _height) {
 8004452:	42a0      	cmp	r0, r4
  setAddrWindow(x, y, w, h);
 8004454:	f8d2 8054 	ldr.w	r8, [r2, #84]	@ 0x54
 8004458:	b289      	uxth	r1, r1
        if (y2 >= _height) {
 800445a:	dc0c      	bgt.n	8004476 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x7a>
          h = _height - y;
 800445c:	eba0 000c 	sub.w	r0, r0, ip
 8004460:	b287      	uxth	r7, r0
  setAddrWindow(x, y, w, h);
 8004462:	9700      	str	r7, [sp, #0]
 8004464:	4662      	mov	r2, ip
 8004466:	2301      	movs	r3, #1
 8004468:	4630      	mov	r0, r6
 800446a:	47c0      	blx	r8
  writeColor(color, (uint32_t)w * h);
 800446c:	b23c      	sxth	r4, r7
  if (!len)
 800446e:	b94f      	cbnz	r7, 8004484 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x88>
}
 8004470:	b004      	add	sp, #16
 8004472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  writeColor(color, (uint32_t)w * h);
 8004476:	461c      	mov	r4, r3
  setAddrWindow(x, y, w, h);
 8004478:	f8cd e000 	str.w	lr, [sp]
 800447c:	4662      	mov	r2, ip
 800447e:	2301      	movs	r3, #1
 8004480:	4630      	mov	r0, r6
 8004482:	47c0      	blx	r8
    while (len--) {
 8004484:	ba6d      	rev16	r5, r5
      callback(SpiCmd::transmit, data, 2);
 8004486:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8004488:	f8ad 500c 	strh.w	r5, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 800448c:	2202      	movs	r2, #2
 800448e:	a903      	add	r1, sp, #12
 8004490:	2006      	movs	r0, #6
 8004492:	4798      	blx	r3
    while (len--) {
 8004494:	3c01      	subs	r4, #1
 8004496:	d1f6      	bne.n	8004486 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x8a>
 8004498:	e7ea      	b.n	8004470 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 800449a:	bf00      	nop

0800449c <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
                                            uint16_t color) {
 800449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	b084      	sub	sp, #16
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 80044a2:	2a00      	cmp	r2, #0
                                            uint16_t color) {
 80044a4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 80044a8:	db36      	blt.n	8004518 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 80044aa:	461c      	mov	r4, r3
 80044ac:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80044b0:	4293      	cmp	r3, r2
 80044b2:	4606      	mov	r6, r0
 80044b4:	dd30      	ble.n	8004518 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 80044b6:	2c00      	cmp	r4, #0
 80044b8:	d02e      	beq.n	8004518 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
    if (w < 0) {                        // If negative width...
 80044ba:	da05      	bge.n	80044c8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x2c>
      x += w + 1;                       //   Move X to left edge
 80044bc:	b2a4      	uxth	r4, r4
 80044be:	3101      	adds	r1, #1
 80044c0:	4421      	add	r1, r4
      w = -w;                           //   Use positive width
 80044c2:	4264      	negs	r4, r4
      x += w + 1;                       //   Move X to left edge
 80044c4:	b209      	sxth	r1, r1
      w = -w;                           //   Use positive width
 80044c6:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 80044c8:	f9b6 000c 	ldrsh.w	r0, [r6, #12]
 80044cc:	4288      	cmp	r0, r1
 80044ce:	dd23      	ble.n	8004518 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
      int16_t x2 = x + w - 1;
 80044d0:	fa1f fc81 	uxth.w	ip, r1
 80044d4:	b2a3      	uxth	r3, r4
 80044d6:	eb0c 0e03 	add.w	lr, ip, r3
 80044da:	fa1f fe8e 	uxth.w	lr, lr
 80044de:	f10e 37ff 	add.w	r7, lr, #4294967295
 80044e2:	b23f      	sxth	r7, r7
      if (x2 >= 0) { // Not off left
 80044e4:	2f00      	cmp	r7, #0
 80044e6:	db17      	blt.n	8004518 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
        if (x < 0) {
 80044e8:	2900      	cmp	r1, #0
 80044ea:	da04      	bge.n	80044f6 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x5a>
          w = x2 + 1;
 80044ec:	fa0f f48e 	sxth.w	r4, lr
 80044f0:	4673      	mov	r3, lr
 80044f2:	f04f 0c00 	mov.w	ip, #0
  setAddrWindow(x, y, w, h);
 80044f6:	6831      	ldr	r1, [r6, #0]
        if (x2 >= _width) {
 80044f8:	42b8      	cmp	r0, r7
  setAddrWindow(x, y, w, h);
 80044fa:	f8d1 8054 	ldr.w	r8, [r1, #84]	@ 0x54
 80044fe:	b292      	uxth	r2, r2
        if (x2 >= _width) {
 8004500:	dc0d      	bgt.n	800451e <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x82>
          w = _width - x;
 8004502:	eba0 000c 	sub.w	r0, r0, ip
 8004506:	b287      	uxth	r7, r0
  setAddrWindow(x, y, w, h);
 8004508:	2301      	movs	r3, #1
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4661      	mov	r1, ip
 800450e:	463b      	mov	r3, r7
 8004510:	4630      	mov	r0, r6
 8004512:	47c0      	blx	r8
  writeColor(color, (uint32_t)w * h);
 8004514:	b23c      	sxth	r4, r7
  if (!len)
 8004516:	b93f      	cbnz	r7, 8004528 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x8c>
}
 8004518:	b004      	add	sp, #16
 800451a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  setAddrWindow(x, y, w, h);
 800451e:	2001      	movs	r0, #1
 8004520:	9000      	str	r0, [sp, #0]
 8004522:	4661      	mov	r1, ip
 8004524:	4630      	mov	r0, r6
 8004526:	47c0      	blx	r8
    while (len--) {
 8004528:	ba6d      	rev16	r5, r5
      callback(SpiCmd::transmit, data, 2);
 800452a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 800452c:	f8ad 500c 	strh.w	r5, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 8004530:	2202      	movs	r2, #2
 8004532:	a903      	add	r1, sp, #12
 8004534:	2006      	movs	r0, #6
 8004536:	4798      	blx	r3
    while (len--) {
 8004538:	3c01      	subs	r4, #1
 800453a:	d1f6      	bne.n	800452a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x8e>
 800453c:	e7ec      	b.n	8004518 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 800453e:	bf00      	nop

08004540 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8004540:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004542:	1e0c      	subs	r4, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8004544:	b085      	sub	sp, #20
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004546:	db33      	blt.n	80045b0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 8004548:	461f      	mov	r7, r3
 800454a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800454e:	42a3      	cmp	r3, r4
 8004550:	4605      	mov	r5, r0
 8004552:	dd2d      	ble.n	80045b0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 8004554:	2a00      	cmp	r2, #0
 8004556:	4616      	mov	r6, r2
 8004558:	db2a      	blt.n	80045b0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 800455a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800455e:	4293      	cmp	r3, r2
 8004560:	dd26      	ble.n	80045b0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
    startWrite();
 8004562:	6803      	ldr	r3, [r0, #0]
 8004564:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x84>)
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	4293      	cmp	r3, r2
 800456a:	d123      	bne.n	80045b4 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x74>
    callback(SpiCmd::cs_low, 0, 0);
 800456c:	2200      	movs	r2, #0
 800456e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004570:	4611      	mov	r1, r2
 8004572:	2002      	movs	r0, #2
 8004574:	4798      	blx	r3
    setAddrWindow(x, y, 1, 1);
 8004576:	6828      	ldr	r0, [r5, #0]
 8004578:	2301      	movs	r3, #1
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	b2a1      	uxth	r1, r4
 800457e:	b2b2      	uxth	r2, r6
 8004580:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8004582:	4628      	mov	r0, r5
 8004584:	47a0      	blx	r4
  data[0] = w >> 8;
 8004586:	ba7b      	rev16	r3, r7
 8004588:	f8ad 300c 	strh.w	r3, [sp, #12]
  callback(SpiCmd::transmit, data, 2);
 800458c:	2202      	movs	r2, #2
 800458e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8004590:	a903      	add	r1, sp, #12
 8004592:	2006      	movs	r0, #6
 8004594:	47a0      	blx	r4
    endWrite();
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	4a0b      	ldr	r2, [pc, #44]	@ (80045c8 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x88>)
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	4293      	cmp	r3, r2
 800459e:	d10b      	bne.n	80045b8 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x78>
    callback(SpiCmd::cs_high, 0, 0);
 80045a0:	2200      	movs	r2, #0
 80045a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80045a4:	4611      	mov	r1, r2
 80045a6:	2003      	movs	r0, #3
}
 80045a8:	b005      	add	sp, #20
 80045aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80045ae:	4718      	bx	r3
 80045b0:	b005      	add	sp, #20
 80045b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    startWrite();
 80045b4:	4798      	blx	r3
 80045b6:	e7de      	b.n	8004576 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x36>
    endWrite();
 80045b8:	4628      	mov	r0, r5
}
 80045ba:	b005      	add	sp, #20
 80045bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    endWrite();
 80045c0:	4718      	bx	r3
 80045c2:	bf00      	nop
 80045c4:	08004325 	.word	0x08004325
 80045c8:	08004331 	.word	0x08004331

080045cc <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
                                    uint16_t color) {
 80045cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	b087      	sub	sp, #28
 80045d2:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 80045d6:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
  if (w && h) {   // Nonzero width and height?
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d06a      	beq.n	80046b4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
 80045de:	2e00      	cmp	r6, #0
 80045e0:	d068      	beq.n	80046b4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
    if (w < 0) {  // If negative width...
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	4605      	mov	r5, r0
 80045e6:	461c      	mov	r4, r3
 80045e8:	db67      	blt.n	80046ba <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xee>
    if (x < _width) { // Not off right
 80045ea:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 80045ee:	4288      	cmp	r0, r1
 80045f0:	dd60      	ble.n	80046b4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
      if (h < 0) {    // If negative height...
 80045f2:	2e00      	cmp	r6, #0
 80045f4:	da05      	bge.n	8004602 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x36>
        y += h + 1;   //   Move Y to top edge
 80045f6:	b2b6      	uxth	r6, r6
 80045f8:	3201      	adds	r2, #1
 80045fa:	4432      	add	r2, r6
        h = -h;       //   Use positive height
 80045fc:	4276      	negs	r6, r6
        y += h + 1;   //   Move Y to top edge
 80045fe:	b212      	sxth	r2, r2
        h = -h;       //   Use positive height
 8004600:	b236      	sxth	r6, r6
      if (y < _height) { // Not off bottom
 8004602:	f9b5 c00e 	ldrsh.w	ip, [r5, #14]
 8004606:	4594      	cmp	ip, r2
 8004608:	dd54      	ble.n	80046b4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
        int16_t x2 = x + w - 1;
 800460a:	b2a3      	uxth	r3, r4
 800460c:	fa1f fa81 	uxth.w	sl, r1
 8004610:	eb0a 0803 	add.w	r8, sl, r3
 8004614:	fa1f f888 	uxth.w	r8, r8
 8004618:	f108 3eff 	add.w	lr, r8, #4294967295
 800461c:	fa0f fe8e 	sxth.w	lr, lr
        if (x2 >= 0) { // Not off left
 8004620:	f1be 0f00 	cmp.w	lr, #0
        int16_t x2 = x + w - 1;
 8004624:	9302      	str	r3, [sp, #8]
        if (x2 >= 0) { // Not off left
 8004626:	db45      	blt.n	80046b4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
          int16_t y2 = y + h - 1;
 8004628:	b2b3      	uxth	r3, r6
 800462a:	fa1f fb82 	uxth.w	fp, r2
 800462e:	eb0b 0903 	add.w	r9, fp, r3
 8004632:	9303      	str	r3, [sp, #12]
 8004634:	fa1f f389 	uxth.w	r3, r9
 8004638:	f103 39ff 	add.w	r9, r3, #4294967295
 800463c:	fa0f f989 	sxth.w	r9, r9
          if (y2 >= 0) { // Not off top
 8004640:	f1b9 0f00 	cmp.w	r9, #0
 8004644:	db36      	blt.n	80046b4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
            if (x < 0) {
 8004646:	2900      	cmp	r1, #0
 8004648:	da05      	bge.n	8004656 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x8a>
              w = x2 + 1;
 800464a:	fa0f f488 	sxth.w	r4, r8
 800464e:	f8cd 8008 	str.w	r8, [sp, #8]
 8004652:	f04f 0a00 	mov.w	sl, #0
            if (y < 0) {
 8004656:	2a00      	cmp	r2, #0
 8004658:	da03      	bge.n	8004662 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x96>
              h = y2 + 1;
 800465a:	b21e      	sxth	r6, r3
 800465c:	9303      	str	r3, [sp, #12]
 800465e:	f04f 0b00 	mov.w	fp, #0
            if (x2 >= _width) {
 8004662:	4570      	cmp	r0, lr
 8004664:	dc04      	bgt.n	8004670 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xa4>
              w = _width - x;
 8004666:	eba0 000a 	sub.w	r0, r0, sl
 800466a:	b283      	uxth	r3, r0
 800466c:	9302      	str	r3, [sp, #8]
 800466e:	b204      	sxth	r4, r0
            if (y2 >= _height) {
 8004670:	45cc      	cmp	ip, r9
 8004672:	dc06      	bgt.n	8004682 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xb6>
              h = _height - y;
 8004674:	ebac 0c0b 	sub.w	ip, ip, fp
 8004678:	fa1f f38c 	uxth.w	r3, ip
 800467c:	9303      	str	r3, [sp, #12]
 800467e:	fa0f f68c 	sxth.w	r6, ip
  setAddrWindow(x, y, w, h);
 8004682:	9b03      	ldr	r3, [sp, #12]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	6828      	ldr	r0, [r5, #0]
 8004688:	9b02      	ldr	r3, [sp, #8]
 800468a:	f8d0 8054 	ldr.w	r8, [r0, #84]	@ 0x54
 800468e:	465a      	mov	r2, fp
 8004690:	4651      	mov	r1, sl
 8004692:	4628      	mov	r0, r5
  writeColor(color, (uint32_t)w * h);
 8004694:	fb04 f606 	mul.w	r6, r4, r6
  setAddrWindow(x, y, w, h);
 8004698:	47c0      	blx	r8
  if (!len)
 800469a:	b15e      	cbz	r6, 80046b4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
    while (len--) {
 800469c:	3e01      	subs	r6, #1
 800469e:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 80046a0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 80046a2:	f8ad 7014 	strh.w	r7, [sp, #20]
    while (len--) {
 80046a6:	3e01      	subs	r6, #1
      callback(SpiCmd::transmit, data, 2);
 80046a8:	2202      	movs	r2, #2
 80046aa:	a905      	add	r1, sp, #20
 80046ac:	2006      	movs	r0, #6
 80046ae:	4798      	blx	r3
    while (len--) {
 80046b0:	1c73      	adds	r3, r6, #1
 80046b2:	d1f5      	bne.n	80046a0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xd4>
}
 80046b4:	b007      	add	sp, #28
 80046b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      x += w + 1; //   Move X to left edge
 80046ba:	b29c      	uxth	r4, r3
 80046bc:	3101      	adds	r1, #1
 80046be:	4421      	add	r1, r4
    if (x < _width) { // Not off right
 80046c0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
      x += w + 1; //   Move X to left edge
 80046c4:	b209      	sxth	r1, r1
      w = -w;     //   Use positive width
 80046c6:	4264      	negs	r4, r4
    if (x < _width) { // Not off right
 80046c8:	4288      	cmp	r0, r1
      w = -w;     //   Use positive width
 80046ca:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 80046cc:	ddf2      	ble.n	80046b4 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
 80046ce:	e790      	b.n	80045f2 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x26>

080046d0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
                                    uint16_t color) {
 80046d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046d4:	b085      	sub	sp, #20
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 80046d6:	1e0c      	subs	r4, r1, #0
                                    uint16_t color) {
 80046d8:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 80046dc:	db55      	blt.n	800478a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
 80046de:	461d      	mov	r5, r3
 80046e0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	4606      	mov	r6, r0
 80046e8:	dd4f      	ble.n	800478a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
 80046ea:	2d00      	cmp	r5, #0
 80046ec:	d04d      	beq.n	800478a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
    if (h < 0) {                       // If negative height...
 80046ee:	da05      	bge.n	80046fc <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
      y += h + 1;                      //   Move Y to top edge
 80046f0:	b2ab      	uxth	r3, r5
 80046f2:	3201      	adds	r2, #1
 80046f4:	441a      	add	r2, r3
      h = -h;                          //   Use positive height
 80046f6:	425b      	negs	r3, r3
      y += h + 1;                      //   Move Y to top edge
 80046f8:	b212      	sxth	r2, r2
      h = -h;                          //   Use positive height
 80046fa:	b21d      	sxth	r5, r3
    if (y < _height) { // Not off bottom
 80046fc:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8004700:	4293      	cmp	r3, r2
 8004702:	dd42      	ble.n	800478a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
      int16_t y2 = y + h - 1;
 8004704:	fa1f f882 	uxth.w	r8, r2
 8004708:	fa1f f985 	uxth.w	r9, r5
 800470c:	eb08 0009 	add.w	r0, r8, r9
 8004710:	b280      	uxth	r0, r0
 8004712:	1e41      	subs	r1, r0, #1
 8004714:	b209      	sxth	r1, r1
      if (y2 >= 0) { // Not off top
 8004716:	2900      	cmp	r1, #0
 8004718:	db37      	blt.n	800478a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
        if (y < 0) {
 800471a:	2a00      	cmp	r2, #0
 800471c:	da03      	bge.n	8004726 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x56>
          h = y2 + 1;
 800471e:	b205      	sxth	r5, r0
 8004720:	4681      	mov	r9, r0
 8004722:	f04f 0800 	mov.w	r8, #0
        if (y2 >= _height) {
 8004726:	428b      	cmp	r3, r1
 8004728:	dc04      	bgt.n	8004734 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x64>
          h = _height - y;
 800472a:	eba3 0308 	sub.w	r3, r3, r8
 800472e:	fa1f f983 	uxth.w	r9, r3
 8004732:	b21d      	sxth	r5, r3
        startWrite();
 8004734:	6833      	ldr	r3, [r6, #0]
 8004736:	4a1a      	ldr	r2, [pc, #104]	@ (80047a0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xd0>)
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	4293      	cmp	r3, r2
 800473c:	d128      	bne.n	8004790 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xc0>
    callback(SpiCmd::cs_low, 0, 0);
 800473e:	2200      	movs	r2, #0
 8004740:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8004742:	4611      	mov	r1, r2
 8004744:	2002      	movs	r0, #2
 8004746:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 8004748:	f8cd 9000 	str.w	r9, [sp]
 800474c:	6833      	ldr	r3, [r6, #0]
 800474e:	b2a1      	uxth	r1, r4
 8004750:	4642      	mov	r2, r8
 8004752:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8004754:	4630      	mov	r0, r6
 8004756:	2301      	movs	r3, #1
 8004758:	47a0      	blx	r4
  if (!len)
 800475a:	b14d      	cbz	r5, 8004770 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xa0>
 800475c:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 800475e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8004760:	f8ad 700c 	strh.w	r7, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 8004764:	2202      	movs	r2, #2
 8004766:	a903      	add	r1, sp, #12
 8004768:	2006      	movs	r0, #6
 800476a:	4798      	blx	r3
    while (len--) {
 800476c:	3d01      	subs	r5, #1
 800476e:	d1f6      	bne.n	800475e <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x8e>
        endWrite();
 8004770:	6833      	ldr	r3, [r6, #0]
 8004772:	4a0c      	ldr	r2, [pc, #48]	@ (80047a4 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xd4>)
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	4293      	cmp	r3, r2
 8004778:	d10d      	bne.n	8004796 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xc6>
    callback(SpiCmd::cs_high, 0, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800477e:	4611      	mov	r1, r2
 8004780:	2003      	movs	r0, #3
}
 8004782:	b005      	add	sp, #20
 8004784:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004788:	4718      	bx	r3
 800478a:	b005      	add	sp, #20
 800478c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        startWrite();
 8004790:	4630      	mov	r0, r6
 8004792:	4798      	blx	r3
 8004794:	e7d8      	b.n	8004748 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x78>
        endWrite();
 8004796:	4630      	mov	r0, r6
}
 8004798:	b005      	add	sp, #20
 800479a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 800479e:	4718      	bx	r3
 80047a0:	08004325 	.word	0x08004325
 80047a4:	08004331 	.word	0x08004331

080047a8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
                                    uint16_t color) {
 80047a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047ac:	b085      	sub	sp, #20
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 80047ae:	1e14      	subs	r4, r2, #0
                                    uint16_t color) {
 80047b0:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 80047b4:	db55      	blt.n	8004862 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
 80047b6:	461d      	mov	r5, r3
 80047b8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80047bc:	42a3      	cmp	r3, r4
 80047be:	4606      	mov	r6, r0
 80047c0:	dd4f      	ble.n	8004862 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
 80047c2:	2d00      	cmp	r5, #0
 80047c4:	d04d      	beq.n	8004862 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
    if (w < 0) {                        // If negative width...
 80047c6:	da05      	bge.n	80047d4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
      x += w + 1;                       //   Move X to left edge
 80047c8:	b2ab      	uxth	r3, r5
 80047ca:	3101      	adds	r1, #1
 80047cc:	4419      	add	r1, r3
      w = -w;                           //   Use positive width
 80047ce:	425b      	negs	r3, r3
      x += w + 1;                       //   Move X to left edge
 80047d0:	b209      	sxth	r1, r1
      w = -w;                           //   Use positive width
 80047d2:	b21d      	sxth	r5, r3
    if (x < _width) { // Not off right
 80047d4:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
 80047d8:	428a      	cmp	r2, r1
 80047da:	dd42      	ble.n	8004862 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
      int16_t x2 = x + w - 1;
 80047dc:	fa1f f881 	uxth.w	r8, r1
 80047e0:	fa1f f985 	uxth.w	r9, r5
 80047e4:	eb08 0009 	add.w	r0, r8, r9
 80047e8:	b280      	uxth	r0, r0
 80047ea:	1e43      	subs	r3, r0, #1
 80047ec:	b21b      	sxth	r3, r3
      if (x2 >= 0) { // Not off left
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	db37      	blt.n	8004862 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
        if (x < 0) {
 80047f2:	2900      	cmp	r1, #0
 80047f4:	da03      	bge.n	80047fe <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x56>
          w = x2 + 1;
 80047f6:	b205      	sxth	r5, r0
 80047f8:	4681      	mov	r9, r0
 80047fa:	f04f 0800 	mov.w	r8, #0
        if (x2 >= _width) {
 80047fe:	429a      	cmp	r2, r3
 8004800:	dc04      	bgt.n	800480c <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x64>
          w = _width - x;
 8004802:	eba2 0208 	sub.w	r2, r2, r8
 8004806:	fa1f f982 	uxth.w	r9, r2
 800480a:	b215      	sxth	r5, r2
        startWrite();
 800480c:	6833      	ldr	r3, [r6, #0]
 800480e:	4a1a      	ldr	r2, [pc, #104]	@ (8004878 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xd0>)
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	4293      	cmp	r3, r2
 8004814:	d128      	bne.n	8004868 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xc0>
    callback(SpiCmd::cs_low, 0, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800481a:	4611      	mov	r1, r2
 800481c:	2002      	movs	r0, #2
 800481e:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 8004820:	6830      	ldr	r0, [r6, #0]
 8004822:	b2a2      	uxth	r2, r4
 8004824:	2401      	movs	r4, #1
 8004826:	9400      	str	r4, [sp, #0]
 8004828:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 800482a:	464b      	mov	r3, r9
 800482c:	4641      	mov	r1, r8
 800482e:	4630      	mov	r0, r6
 8004830:	47a0      	blx	r4
  if (!len)
 8004832:	b14d      	cbz	r5, 8004848 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xa0>
 8004834:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 8004836:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8004838:	f8ad 700c 	strh.w	r7, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 800483c:	2202      	movs	r2, #2
 800483e:	a903      	add	r1, sp, #12
 8004840:	2006      	movs	r0, #6
 8004842:	4798      	blx	r3
    while (len--) {
 8004844:	3d01      	subs	r5, #1
 8004846:	d1f6      	bne.n	8004836 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x8e>
        endWrite();
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	4a0c      	ldr	r2, [pc, #48]	@ (800487c <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xd4>)
 800484c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484e:	4293      	cmp	r3, r2
 8004850:	d10d      	bne.n	800486e <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xc6>
    callback(SpiCmd::cs_high, 0, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8004856:	4611      	mov	r1, r2
 8004858:	2003      	movs	r0, #3
}
 800485a:	b005      	add	sp, #20
 800485c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004860:	4718      	bx	r3
 8004862:	b005      	add	sp, #20
 8004864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        startWrite();
 8004868:	4630      	mov	r0, r6
 800486a:	4798      	blx	r3
 800486c:	e7d8      	b.n	8004820 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x78>
        endWrite();
 800486e:	4630      	mov	r0, r6
}
 8004870:	b005      	add	sp, #20
 8004872:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 8004876:	4718      	bx	r3
 8004878:	08004325 	.word	0x08004325
 800487c:	08004331 	.word	0x08004331

08004880 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
                               uint16_t color) {
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004884:	b087      	sub	sp, #28
 8004886:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 800488a:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
  if (w && h) {   // Nonzero width and height?
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8081 	beq.w	8004996 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
 8004894:	2e00      	cmp	r6, #0
 8004896:	d07e      	beq.n	8004996 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
    if (w < 0) {  // If negative width...
 8004898:	2b00      	cmp	r3, #0
 800489a:	4605      	mov	r5, r0
 800489c:	461c      	mov	r4, r3
 800489e:	db7d      	blt.n	800499c <_ZN15Adafruit_SPITFT8fillRectEsssst+0x11c>
    if (x < _width) { // Not off right
 80048a0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80048a4:	428b      	cmp	r3, r1
 80048a6:	dd76      	ble.n	8004996 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
      if (h < 0) {    // If negative height...
 80048a8:	2e00      	cmp	r6, #0
 80048aa:	da05      	bge.n	80048b8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x38>
        y += h + 1;   //   Move Y to top edge
 80048ac:	b2b6      	uxth	r6, r6
 80048ae:	3201      	adds	r2, #1
 80048b0:	4432      	add	r2, r6
        h = -h;       //   Use positive height
 80048b2:	4276      	negs	r6, r6
        y += h + 1;   //   Move Y to top edge
 80048b4:	b212      	sxth	r2, r2
        h = -h;       //   Use positive height
 80048b6:	b236      	sxth	r6, r6
      if (y < _height) { // Not off bottom
 80048b8:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
 80048bc:	9002      	str	r0, [sp, #8]
 80048be:	4290      	cmp	r0, r2
 80048c0:	dd69      	ble.n	8004996 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
        int16_t x2 = x + w - 1;
 80048c2:	fa1f f881 	uxth.w	r8, r1
 80048c6:	fa1f fa84 	uxth.w	sl, r4
 80048ca:	eb08 0e0a 	add.w	lr, r8, sl
 80048ce:	fa1f fe8e 	uxth.w	lr, lr
 80048d2:	f10e 3cff 	add.w	ip, lr, #4294967295
 80048d6:	fa0f fc8c 	sxth.w	ip, ip
        if (x2 >= 0) { // Not off left
 80048da:	f1bc 0f00 	cmp.w	ip, #0
 80048de:	db5a      	blt.n	8004996 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
          int16_t y2 = y + h - 1;
 80048e0:	b2b0      	uxth	r0, r6
 80048e2:	fa1f f982 	uxth.w	r9, r2
 80048e6:	eb09 0b00 	add.w	fp, r9, r0
 80048ea:	9003      	str	r0, [sp, #12]
 80048ec:	fa1f f08b 	uxth.w	r0, fp
 80048f0:	f100 3bff 	add.w	fp, r0, #4294967295
 80048f4:	fa0f fb8b 	sxth.w	fp, fp
          if (y2 >= 0) { // Not off top
 80048f8:	f1bb 0f00 	cmp.w	fp, #0
 80048fc:	db4b      	blt.n	8004996 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
            if (x < 0) {
 80048fe:	2900      	cmp	r1, #0
 8004900:	da04      	bge.n	800490c <_ZN15Adafruit_SPITFT8fillRectEsssst+0x8c>
              w = x2 + 1;
 8004902:	fa0f f48e 	sxth.w	r4, lr
 8004906:	46f2      	mov	sl, lr
 8004908:	f04f 0800 	mov.w	r8, #0
            if (y < 0) {
 800490c:	2a00      	cmp	r2, #0
 800490e:	da03      	bge.n	8004918 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x98>
              h = y2 + 1;
 8004910:	b206      	sxth	r6, r0
 8004912:	9003      	str	r0, [sp, #12]
 8004914:	f04f 0900 	mov.w	r9, #0
            if (x2 >= _width) {
 8004918:	4563      	cmp	r3, ip
 800491a:	dc04      	bgt.n	8004926 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xa6>
              w = _width - x;
 800491c:	eba3 0308 	sub.w	r3, r3, r8
 8004920:	fa1f fa83 	uxth.w	sl, r3
 8004924:	b21c      	sxth	r4, r3
            if (y2 >= _height) {
 8004926:	9b02      	ldr	r3, [sp, #8]
 8004928:	455b      	cmp	r3, fp
 800492a:	dc04      	bgt.n	8004936 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xb6>
              h = _height - y;
 800492c:	eba3 0009 	sub.w	r0, r3, r9
 8004930:	b283      	uxth	r3, r0
 8004932:	9303      	str	r3, [sp, #12]
 8004934:	b206      	sxth	r6, r0
            startWrite();
 8004936:	682b      	ldr	r3, [r5, #0]
 8004938:	4a22      	ldr	r2, [pc, #136]	@ (80049c4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x144>)
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	4293      	cmp	r3, r2
 800493e:	d138      	bne.n	80049b2 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x132>
    callback(SpiCmd::cs_low, 0, 0);
 8004940:	2200      	movs	r2, #0
 8004942:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004944:	4611      	mov	r1, r2
 8004946:	2002      	movs	r0, #2
 8004948:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	6828      	ldr	r0, [r5, #0]
 8004950:	4641      	mov	r1, r8
 8004952:	4653      	mov	r3, sl
 8004954:	f8d0 8054 	ldr.w	r8, [r0, #84]	@ 0x54
 8004958:	464a      	mov	r2, r9
 800495a:	4628      	mov	r0, r5
  writeColor(color, (uint32_t)w * h);
 800495c:	fb04 f606 	mul.w	r6, r4, r6
  setAddrWindow(x, y, w, h);
 8004960:	47c0      	blx	r8
  if (!len)
 8004962:	b15e      	cbz	r6, 800497c <_ZN15Adafruit_SPITFT8fillRectEsssst+0xfc>
    while (len--) {
 8004964:	3e01      	subs	r6, #1
 8004966:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 8004968:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 800496a:	f8ad 7014 	strh.w	r7, [sp, #20]
    while (len--) {
 800496e:	3e01      	subs	r6, #1
      callback(SpiCmd::transmit, data, 2);
 8004970:	2202      	movs	r2, #2
 8004972:	a905      	add	r1, sp, #20
 8004974:	2006      	movs	r0, #6
 8004976:	4798      	blx	r3
    while (len--) {
 8004978:	1c73      	adds	r3, r6, #1
 800497a:	d1f5      	bne.n	8004968 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xe8>
            endWrite();
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	4a12      	ldr	r2, [pc, #72]	@ (80049c8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x148>)
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	4293      	cmp	r3, r2
 8004984:	d118      	bne.n	80049b8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x138>
    callback(SpiCmd::cs_high, 0, 0);
 8004986:	2200      	movs	r2, #0
 8004988:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800498a:	4611      	mov	r1, r2
 800498c:	2003      	movs	r0, #3
}
 800498e:	b007      	add	sp, #28
 8004990:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004994:	4718      	bx	r3
 8004996:	b007      	add	sp, #28
 8004998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      x += w + 1; //   Move X to left edge
 800499c:	b29c      	uxth	r4, r3
 800499e:	3101      	adds	r1, #1
 80049a0:	4421      	add	r1, r4
    if (x < _width) { // Not off right
 80049a2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
      x += w + 1; //   Move X to left edge
 80049a6:	b209      	sxth	r1, r1
      w = -w;     //   Use positive width
 80049a8:	4264      	negs	r4, r4
    if (x < _width) { // Not off right
 80049aa:	428b      	cmp	r3, r1
      w = -w;     //   Use positive width
 80049ac:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 80049ae:	ddf2      	ble.n	8004996 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
 80049b0:	e77a      	b.n	80048a8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x28>
            startWrite();
 80049b2:	4628      	mov	r0, r5
 80049b4:	4798      	blx	r3
 80049b6:	e7c8      	b.n	800494a <_ZN15Adafruit_SPITFT8fillRectEsssst+0xca>
            endWrite();
 80049b8:	4628      	mov	r0, r5
}
 80049ba:	b007      	add	sp, #28
 80049bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            endWrite();
 80049c0:	4718      	bx	r3
 80049c2:	bf00      	nop
 80049c4:	08004325 	.word	0x08004325
 80049c8:	08004331 	.word	0x08004331

080049cc <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 80049cc:	b538      	push	{r3, r4, r5, lr}
    : Adafruit_GFX(w, h), callback(callback)
 80049ce:	b212      	sxth	r2, r2
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 80049d0:	4604      	mov	r4, r0
    : Adafruit_GFX(w, h), callback(callback)
 80049d2:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 80049d4:	461d      	mov	r5, r3
    : Adafruit_GFX(w, h), callback(callback)
 80049d6:	f7ff f9fb 	bl	8003dd0 <_ZN12Adafruit_GFXC1Ess>
 80049da:	2300      	movs	r3, #0
 80049dc:	4a03      	ldr	r2, [pc, #12]	@ (80049ec <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE+0x20>)
 80049de:	8523      	strh	r3, [r4, #40]	@ 0x28
 80049e0:	e9c4 350b 	strd	r3, r5, [r4, #44]	@ 0x2c
 80049e4:	6022      	str	r2, [r4, #0]
 80049e6:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80049e8:	4620      	mov	r0, r4
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	08008024 	.word	0x08008024

080049f0 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>:
                                  uint8_t numDataBytes) {
 80049f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f2:	4605      	mov	r5, r0
 80049f4:	4614      	mov	r4, r2
    callback(SpiCmd::cs_low, 0, 0);
 80049f6:	2200      	movs	r2, #0
 80049f8:	b083      	sub	sp, #12
 80049fa:	460f      	mov	r7, r1
 80049fc:	461e      	mov	r6, r3
 80049fe:	4611      	mov	r1, r2
 8004a00:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a02:	2002      	movs	r0, #2
 8004a04:	4798      	blx	r3
    callback(SpiCmd::dc_low, 0, 0);
 8004a06:	2200      	movs	r2, #0
 8004a08:	4611      	mov	r1, r2
 8004a0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a0c:	2004      	movs	r0, #4
 8004a0e:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8004a10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a12:	f88d 7007 	strb.w	r7, [sp, #7]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f10d 0107 	add.w	r1, sp, #7
 8004a1c:	2006      	movs	r0, #6
 8004a1e:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8004a20:	2200      	movs	r2, #0
 8004a22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a24:	4611      	mov	r1, r2
 8004a26:	2005      	movs	r0, #5
 8004a28:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 8004a2a:	b166      	cbz	r6, 8004a46 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x56>
 8004a2c:	4426      	add	r6, r4
      spiWrite(*dataBytes); // Send the data bytes
 8004a2e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8004a32:	f88d 2007 	strb.w	r2, [sp, #7]
  callback(SpiCmd::transmit, &b, 1);
 8004a36:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f10d 0107 	add.w	r1, sp, #7
 8004a3e:	2006      	movs	r0, #6
 8004a40:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 8004a42:	42a6      	cmp	r6, r4
 8004a44:	d1f3      	bne.n	8004a2e <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x3e>
    callback(SpiCmd::cs_high, 0, 0);
 8004a46:	2200      	movs	r2, #0
 8004a48:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	2003      	movs	r0, #3
}
 8004a4e:	b003      	add	sp, #12
 8004a50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004a54:	4718      	bx	r3
 8004a56:	bf00      	nop

08004a58 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>:
                                  uint8_t numDataBytes) {
 8004a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	4614      	mov	r4, r2
    callback(SpiCmd::cs_low, 0, 0);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	b083      	sub	sp, #12
 8004a62:	460f      	mov	r7, r1
 8004a64:	461e      	mov	r6, r3
 8004a66:	4611      	mov	r1, r2
 8004a68:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a6a:	2002      	movs	r0, #2
 8004a6c:	4798      	blx	r3
    callback(SpiCmd::dc_low, 0, 0);
 8004a6e:	2200      	movs	r2, #0
 8004a70:	4611      	mov	r1, r2
 8004a72:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a74:	2004      	movs	r0, #4
 8004a76:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8004a78:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a7a:	f88d 7007 	strb.w	r7, [sp, #7]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f10d 0107 	add.w	r1, sp, #7
 8004a84:	2006      	movs	r0, #6
 8004a86:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8004a88:	2200      	movs	r2, #0
 8004a8a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	2005      	movs	r0, #5
 8004a90:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 8004a92:	b166      	cbz	r6, 8004aae <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x56>
 8004a94:	4426      	add	r6, r4
      spiWrite(pgm_read_byte(dataBytes++));
 8004a96:	f814 2b01 	ldrb.w	r2, [r4], #1
 8004a9a:	f88d 2007 	strb.w	r2, [sp, #7]
  callback(SpiCmd::transmit, &b, 1);
 8004a9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f10d 0107 	add.w	r1, sp, #7
 8004aa6:	2006      	movs	r0, #6
 8004aa8:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 8004aaa:	42a6      	cmp	r6, r4
 8004aac:	d1f3      	bne.n	8004a96 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x3e>
    callback(SpiCmd::cs_high, 0, 0);
 8004aae:	2200      	movs	r2, #0
 8004ab0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	2003      	movs	r0, #3
}
 8004ab6:	b003      	add	sp, #12
 8004ab8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004abc:	4718      	bx	r3
 8004abe:	bf00      	nop

08004ac0 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 8004ac0:	b530      	push	{r4, r5, lr}
 8004ac2:	4604      	mov	r4, r0
    callback(SpiCmd::dc_low, 0, 0);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004aca:	460d      	mov	r5, r1
 8004acc:	2004      	movs	r0, #4
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8004ad2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ad4:	f88d 5007 	strb.w	r5, [sp, #7]
 8004ad8:	f10d 0107 	add.w	r1, sp, #7
 8004adc:	2201      	movs	r2, #1
 8004ade:	2006      	movs	r0, #6
 8004ae0:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	2005      	movs	r0, #5
}
 8004aea:	b003      	add	sp, #12
 8004aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af0:	4718      	bx	r3
 8004af2:	bf00      	nop

08004af4 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
            parallel; name was maintaned for backward compatibility. Naming
            is also not consistent with the 8-bit version, spiWrite().
            Sorry about that. Again, staying compatible with outside code.
    @param  l  32-bit value to write.
*/
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 8004af4:	b500      	push	{lr}
 8004af6:	b083      	sub	sp, #12
  uint8_t data[4];
  data[0] = l >> 24;
  data[1] = l >> 16;
  data[2] = l >> 8;
  data[3] = l;
  callback(SpiCmd::transmit, data, 4);
 8004af8:	2204      	movs	r2, #4
 8004afa:	ba09      	rev	r1, r1
 8004afc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  data[0] = l >> 24;
 8004afe:	9101      	str	r1, [sp, #4]
  callback(SpiCmd::transmit, data, 4);
 8004b00:	2006      	movs	r0, #6
 8004b02:	eb0d 0102 	add.w	r1, sp, r2
 8004b06:	4798      	blx	r3
}
 8004b08:	b003      	add	sp, #12
 8004b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b0e:	bf00      	nop

08004b10 <_ZN15Adafruit_ST778911setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
 8004b10:	b510      	push	{r4, lr}
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 8004b12:	f001 0103 	and.w	r1, r1, #3
void Adafruit_ST7789::setRotation(uint8_t m) {
 8004b16:	b082      	sub	sp, #8
  uint8_t madctl = 0;
 8004b18:	2300      	movs	r3, #0

  switch (rotation) {
 8004b1a:	2902      	cmp	r1, #2
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
    _xstart = _colstart;
    _ystart = _rowstart;
    _width = windowWidth;
 8004b1c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004b1e:	f9b0 2038 	ldrsh.w	r2, [r0, #56]	@ 0x38
    _height = windowHeight;
 8004b22:	f9b0 c03a 	ldrsh.w	ip, [r0, #58]	@ 0x3a
  uint8_t madctl = 0;
 8004b26:	f88d 3007 	strb.w	r3, [sp, #7]
  rotation = m & 3; // can't be higher than 3
 8004b2a:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 8004b2c:	d015      	beq.n	8004b5a <_ZN15Adafruit_ST778911setRotationEh+0x4a>
 8004b2e:	2903      	cmp	r1, #3
 8004b30:	d028      	beq.n	8004b84 <_ZN15Adafruit_ST778911setRotationEh+0x74>
 8004b32:	2901      	cmp	r1, #1
 8004b34:	d019      	beq.n	8004b6a <_ZN15Adafruit_ST778911setRotationEh+0x5a>
    _xstart = _colstart;
 8004b36:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _ystart = _rowstart;
 8004b3a:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
    _xstart = _colstart;
 8004b3e:	8482      	strh	r2, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8004b40:	21c0      	movs	r1, #192	@ 0xc0
 8004b42:	f88d 1007 	strb.w	r1, [sp, #7]
    _ystart = _rowstart;
 8004b46:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _width = windowWidth;
 8004b48:	60c4      	str	r4, [r0, #12]
    _height = windowWidth;
    _width = windowHeight;
    break;
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f10d 0207 	add.w	r2, sp, #7
 8004b50:	2136      	movs	r1, #54	@ 0x36
 8004b52:	f7ff ff4d 	bl	80049f0 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 8004b56:	b002      	add	sp, #8
 8004b58:	bd10      	pop	{r4, pc}
    _xstart = _colstart2;
 8004b5a:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
    _ystart = _rowstart2;
 8004b5e:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
    _xstart = _colstart2;
 8004b62:	8482      	strh	r2, [r0, #36]	@ 0x24
    _ystart = _rowstart2;
 8004b64:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _width = windowWidth;
 8004b66:	60c4      	str	r4, [r0, #12]
    break;
 8004b68:	e7ef      	b.n	8004b4a <_ZN15Adafruit_ST778911setRotationEh+0x3a>
    _xstart = _rowstart;
 8004b6a:	f890 1035 	ldrb.w	r1, [r0, #53]	@ 0x35
    _ystart = _colstart2;
 8004b6e:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
    _xstart = _rowstart;
 8004b72:	8481      	strh	r1, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8004b74:	24a0      	movs	r4, #160	@ 0xa0
 8004b76:	f88d 4007 	strb.w	r4, [sp, #7]
    _ystart = _colstart2;
 8004b7a:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _height = windowWidth;
 8004b7c:	81c2      	strh	r2, [r0, #14]
    _width = windowHeight;
 8004b7e:	f8a0 c00c 	strh.w	ip, [r0, #12]
    break;
 8004b82:	e7e2      	b.n	8004b4a <_ZN15Adafruit_ST778911setRotationEh+0x3a>
    _width = windowHeight;
 8004b84:	f36c 030f 	bfi	r3, ip, #0, #16
 8004b88:	f362 431f 	bfi	r3, r2, #16, #16
    _xstart = _rowstart2;
 8004b8c:	f890 1037 	ldrb.w	r1, [r0, #55]	@ 0x37
    _ystart = _colstart;
 8004b90:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _xstart = _rowstart2;
 8004b94:	8481      	strh	r1, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8004b96:	2460      	movs	r4, #96	@ 0x60
 8004b98:	f88d 4007 	strb.w	r4, [sp, #7]
    _ystart = _colstart;
 8004b9c:	84c2      	strh	r2, [r0, #38]	@ 0x26
    _width = windowHeight;
 8004b9e:	60c3      	str	r3, [r0, #12]
    break;
 8004ba0:	e7d3      	b.n	8004b4a <_ZN15Adafruit_ST778911setRotationEh+0x3a>
 8004ba2:	bf00      	nop

08004ba4 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>:
Adafruit_ST7789::Adafruit_ST7789(uint16_t w, uint16_t h, Adafruit_SPITFT::CallbackType callback)
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4604      	mov	r4, r0
  : Adafruit_ST77xx(w, h, callback)
 8004ba8:	f000 f8cc 	bl	8004d44 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>
 8004bac:	2300      	movs	r3, #0
 8004bae:	4a02      	ldr	r2, [pc, #8]	@ (8004bb8 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE+0x14>)
 8004bb0:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8004bb2:	6022      	str	r2, [r4, #0]
}
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	bd10      	pop	{r4, pc}
 8004bb8:	08008084 	.word	0x08008084

08004bbc <_ZN15Adafruit_ST77894initEtt>:
    ) {
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	460d      	mov	r5, r1
 8004bc0:	b082      	sub	sp, #8
  commonInit(NULL);
 8004bc2:	2100      	movs	r1, #0
    ) {
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	4616      	mov	r6, r2
  commonInit(NULL);
 8004bc8:	f000 f8f2 	bl	8004db0 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  if (width == 240 && height == 240) {
 8004bcc:	2df0      	cmp	r5, #240	@ 0xf0
 8004bce:	d03a      	beq.n	8004c46 <_ZN15Adafruit_ST77894initEtt+0x8a>
  } else if (width == 135 && height == 240) {
 8004bd0:	2d87      	cmp	r5, #135	@ 0x87
 8004bd2:	d101      	bne.n	8004bd8 <_ZN15Adafruit_ST77894initEtt+0x1c>
 8004bd4:	2ef0      	cmp	r6, #240	@ 0xf0
 8004bd6:	d041      	beq.n	8004c5c <_ZN15Adafruit_ST77894initEtt+0xa0>
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8004bd8:	f1c5 00f0 	rsb	r0, r5, #240	@ 0xf0
    _rowstart = _rowstart2 = (int)((320 - height) / 2);
 8004bdc:	f5c6 73a0 	rsb	r3, r6, #320	@ 0x140
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8004be0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004be4:	f3c0 0047 	ubfx	r0, r0, #1, #8
    _rowstart = _rowstart2 = (int)((320 - height) / 2);
 8004be8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004bec:	2200      	movs	r2, #0
 8004bee:	f3c3 0347 	ubfx	r3, r3, #1, #8
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8004bf2:	f360 0207 	bfi	r2, r0, #0, #8
 8004bf6:	f363 220f 	bfi	r2, r3, #8, #8
 8004bfa:	f360 4217 	bfi	r2, r0, #16, #8
 8004bfe:	f363 621f 	bfi	r2, r3, #24, #8
    _colstart = _colstart2 = (240 - width);
 8004c02:	6362      	str	r2, [r4, #52]	@ 0x34
  displayInit(st7789_without_cs);
 8004c04:	4916      	ldr	r1, [pc, #88]	@ (8004c60 <_ZN15Adafruit_ST77894initEtt+0xa4>)
  windowWidth = width;
 8004c06:	8725      	strh	r5, [r4, #56]	@ 0x38
  windowHeight = height;
 8004c08:	8766      	strh	r6, [r4, #58]	@ 0x3a
  displayInit(st7789_without_cs);
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 f8a6 	bl	8004d5c <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	4a14      	ldr	r2, [pc, #80]	@ (8004c64 <_ZN15Adafruit_ST77894initEtt+0xa8>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d11a      	bne.n	8004c50 <_ZN15Adafruit_ST77894initEtt+0x94>
    _xstart = _colstart;
 8004c1a:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
    _ystart = _rowstart;
 8004c1e:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
    _width = windowWidth;
 8004c22:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    _xstart = _colstart;
 8004c24:	84a1      	strh	r1, [r4, #36]	@ 0x24
  rotation = m & 3; // can't be higher than 3
 8004c26:	2000      	movs	r0, #0
 8004c28:	76a0      	strb	r0, [r4, #26]
    _ystart = _rowstart;
 8004c2a:	84e2      	strh	r2, [r4, #38]	@ 0x26
    _width = windowWidth;
 8004c2c:	60e3      	str	r3, [r4, #12]
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8004c2e:	25c0      	movs	r5, #192	@ 0xc0
  sendCommand(ST77XX_MADCTL, &madctl, 1);
 8004c30:	2301      	movs	r3, #1
 8004c32:	f10d 0207 	add.w	r2, sp, #7
 8004c36:	2136      	movs	r1, #54	@ 0x36
 8004c38:	4620      	mov	r0, r4
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8004c3a:	f88d 5007 	strb.w	r5, [sp, #7]
  sendCommand(ST77XX_MADCTL, &madctl, 1);
 8004c3e:	f7ff fed7 	bl	80049f0 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 8004c42:	b002      	add	sp, #8
 8004c44:	bd70      	pop	{r4, r5, r6, pc}
  if (width == 240 && height == 240) {
 8004c46:	2ef0      	cmp	r6, #240	@ 0xf0
 8004c48:	d1c6      	bne.n	8004bd8 <_ZN15Adafruit_ST77894initEtt+0x1c>
 8004c4a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8004c4e:	e7d8      	b.n	8004c02 <_ZN15Adafruit_ST77894initEtt+0x46>
  setRotation(0);
 8004c50:	2100      	movs	r1, #0
 8004c52:	4620      	mov	r0, r4
}
 8004c54:	b002      	add	sp, #8
 8004c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
 8004c5a:	4718      	bx	r3
 8004c5c:	4a02      	ldr	r2, [pc, #8]	@ (8004c68 <_ZN15Adafruit_ST77894initEtt+0xac>)
 8004c5e:	e7d0      	b.n	8004c02 <_ZN15Adafruit_ST77894initEtt+0x46>
 8004c60:	080080dc 	.word	0x080080dc
 8004c64:	08004b11 	.word	0x08004b11
 8004c68:	28342835 	.word	0x28342835

08004c6c <_ZN15Adafruit_ST77xx5beginEm>:
    @param  freq  Desired SPI clock frequency
*/
/**************************************************************************/
void Adafruit_ST77xx::begin(uint32_t freq) {
  if (!freq) {
    freq = SPI_DEFAULT_FREQ;
 8004c6c:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <_ZN15Adafruit_ST77xx5beginEm+0x14>)
 8004c6e:	2900      	cmp	r1, #0
 8004c70:	bf14      	ite	ne
 8004c72:	460a      	movne	r2, r1
 8004c74:	461a      	moveq	r2, r3
  }
  _freq = freq;

  invertOnCommand = ST77XX_INVON;
 8004c76:	f242 0321 	movw	r3, #8225	@ 0x2021
  _freq = freq;
 8004c7a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  invertOnCommand = ST77XX_INVON;
 8004c7c:	8503      	strh	r3, [r0, #40]	@ 0x28
  invertOffCommand = ST77XX_INVOFF;

//  initSPI(freq, spiMode);
}
 8004c7e:	4770      	bx	lr
 8004c80:	01e84800 	.word	0x01e84800

08004c84 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  @param  w  Width of window
  @param  h  Height of window
*/
/**************************************************************************/
void Adafruit_ST77xx::setAddrWindow(uint16_t x, uint16_t y, uint16_t w,
                                    uint16_t h) {
 8004c84:	b570      	push	{r4, r5, r6, lr}
  x += _xstart;
 8004c86:	8c85      	ldrh	r5, [r0, #36]	@ 0x24
 8004c88:	4429      	add	r1, r5
 8004c8a:	b289      	uxth	r1, r1
  y += _ystart;
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 8004c8c:	18ce      	adds	r6, r1, r3
  y += _ystart;
 8004c8e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
                                    uint16_t h) {
 8004c90:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  y += _ystart;
 8004c94:	441a      	add	r2, r3
 8004c96:	b292      	uxth	r2, r2
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8004c98:	4415      	add	r5, r2
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 8004c9a:	3e01      	subs	r6, #1
                                    uint16_t h) {
 8004c9c:	4604      	mov	r4, r0
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 8004c9e:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8004ca2:	3d01      	subs	r5, #1

  writeCommand(ST77XX_CASET); // Column addr set
 8004ca4:	212a      	movs	r1, #42	@ 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8004ca6:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 8004caa:	f7ff ff09 	bl	8004ac0 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 8004cae:	4631      	mov	r1, r6
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7ff ff1f 	bl	8004af4 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RASET); // Row addr set
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	212b      	movs	r1, #43	@ 0x2b
 8004cba:	f7ff ff01 	bl	8004ac0 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7ff ff17 	bl	8004af4 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RAMWR); // write to RAM
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	212c      	movs	r1, #44	@ 0x2c
}
 8004cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 8004cce:	f7ff bef7 	b.w	8004ac0 <_ZN15Adafruit_SPITFT12writeCommandEh>
 8004cd2:	bf00      	nop

08004cd4 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 8004cd4:	b500      	push	{lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 8004cd6:	f001 0103 	and.w	r1, r1, #3
void Adafruit_ST77xx::setRotation(uint8_t m) {
 8004cda:	b083      	sub	sp, #12
  uint8_t madctl = 0;
 8004cdc:	2300      	movs	r3, #0

  switch (rotation) {
 8004cde:	2902      	cmp	r1, #2
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
    _xstart = _colstart;
 8004ce0:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _ystart = _rowstart;
 8004ce4:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
  uint8_t madctl = 0;
 8004ce8:	f88d 3007 	strb.w	r3, [sp, #7]
  rotation = m % 4; // can't be higher than 3
 8004cec:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 8004cee:	d014      	beq.n	8004d1a <_ZN15Adafruit_ST77xx11setRotationEh+0x46>
 8004cf0:	2903      	cmp	r1, #3
 8004cf2:	d01d      	beq.n	8004d30 <_ZN15Adafruit_ST77xx11setRotationEh+0x5c>
 8004cf4:	2901      	cmp	r1, #1
 8004cf6:	d014      	beq.n	8004d22 <_ZN15Adafruit_ST77xx11setRotationEh+0x4e>
    _xstart = _colstart;
 8004cf8:	f362 030f 	bfi	r3, r2, #0, #16
 8004cfc:	f36c 431f 	bfi	r3, ip, #16, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8004d00:	22c0      	movs	r2, #192	@ 0xc0
 8004d02:	f88d 2007 	strb.w	r2, [sp, #7]
    _xstart = _colstart;
 8004d06:	6243      	str	r3, [r0, #36]	@ 0x24
    _ystart = _colstart;
    _xstart = _rowstart;
    break;
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f10d 0207 	add.w	r2, sp, #7
 8004d0e:	2136      	movs	r1, #54	@ 0x36
 8004d10:	f7ff fe6e 	bl	80049f0 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 8004d14:	b003      	add	sp, #12
 8004d16:	f85d fb04 	ldr.w	pc, [sp], #4
    _xstart = _colstart;
 8004d1a:	8482      	strh	r2, [r0, #36]	@ 0x24
    _ystart = _rowstart;
 8004d1c:	f8a0 c026 	strh.w	ip, [r0, #38]	@ 0x26
    break;
 8004d20:	e7f2      	b.n	8004d08 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8004d22:	23a0      	movs	r3, #160	@ 0xa0
 8004d24:	f88d 3007 	strb.w	r3, [sp, #7]
    _ystart = _colstart;
 8004d28:	84c2      	strh	r2, [r0, #38]	@ 0x26
    _xstart = _rowstart;
 8004d2a:	f8a0 c024 	strh.w	ip, [r0, #36]	@ 0x24
    break;
 8004d2e:	e7eb      	b.n	8004d08 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
    _xstart = _rowstart;
 8004d30:	f36c 030f 	bfi	r3, ip, #0, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8004d34:	2160      	movs	r1, #96	@ 0x60
    _xstart = _rowstart;
 8004d36:	f362 431f 	bfi	r3, r2, #16, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8004d3a:	f88d 1007 	strb.w	r1, [sp, #7]
    _xstart = _rowstart;
 8004d3e:	6243      	str	r3, [r0, #36]	@ 0x24
    break;
 8004d40:	e7e2      	b.n	8004d08 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
 8004d42:	bf00      	nop

08004d44 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>:
Adafruit_ST77xx::Adafruit_ST77xx(uint16_t w, uint16_t h, Adafruit_SPITFT::CallbackType callback)
 8004d44:	b510      	push	{r4, lr}
 8004d46:	4604      	mov	r4, r0
  : Adafruit_SPITFT(w, h, callback)
 8004d48:	f7ff fe40 	bl	80049cc <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4a02      	ldr	r2, [pc, #8]	@ (8004d58 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE+0x14>)
 8004d50:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8004d52:	6022      	str	r2, [r4, #0]
}
 8004d54:	4620      	mov	r0, r4
 8004d56:	bd10      	pop	{r4, pc}
 8004d58:	08008104 	.word	0x08008104

08004d5c <_ZN15Adafruit_ST77xx11displayInitEPKh>:
  numCommands = pgm_read_byte(addr++); // Number of commands to follow
 8004d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (numCommands--) {              // For each command...
 8004d60:	b32b      	cbz	r3, 8004dae <_ZN15Adafruit_ST77xx11displayInitEPKh+0x52>
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 8004d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d66:	1e5d      	subs	r5, r3, #1
 8004d68:	4680      	mov	r8, r0
 8004d6a:	b2ed      	uxtb	r5, r5
    numArgs = pgm_read_byte(addr++);   // Number of args to follow
 8004d6c:	784f      	ldrb	r7, [r1, #1]
 8004d6e:	1c8e      	adds	r6, r1, #2
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
 8004d70:	f007 047f 	and.w	r4, r7, #127	@ 0x7f
    sendCommand(cmd, addr, numArgs);
 8004d74:	7809      	ldrb	r1, [r1, #0]
 8004d76:	4623      	mov	r3, r4
 8004d78:	4632      	mov	r2, r6
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	f7ff fe6c 	bl	8004a58 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>
    if (ms) {
 8004d80:	063b      	lsls	r3, r7, #24
    addr += numArgs;
 8004d82:	eb06 0104 	add.w	r1, r6, r4
    if (ms) {
 8004d86:	d50c      	bpl.n	8004da2 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x46>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8004d88:	5d32      	ldrb	r2, [r6, r4]
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8004d8a:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8004d8e:	2aff      	cmp	r2, #255	@ 0xff
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8004d90:	f101 0401 	add.w	r4, r1, #1
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8004d94:	bf08      	it	eq
 8004d96:	f44f 72fa 	moveq.w	r2, #500	@ 0x1f4
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	2007      	movs	r0, #7
 8004d9e:	4798      	blx	r3
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8004da0:	4621      	mov	r1, r4
  while (numCommands--) {              // For each command...
 8004da2:	3d01      	subs	r5, #1
 8004da4:	b2ed      	uxtb	r5, r5
 8004da6:	2dff      	cmp	r5, #255	@ 0xff
 8004da8:	d1e0      	bne.n	8004d6c <_ZN15Adafruit_ST77xx11displayInitEPKh+0x10>
}
 8004daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dae:	4770      	bx	lr

08004db0 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
  begin();
 8004db0:	6803      	ldr	r3, [r0, #0]
 8004db2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e24 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x74>)
 8004db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db6:	4293      	cmp	r3, r2
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 8004db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbc:	4607      	mov	r7, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	d12d      	bne.n	8004e1e <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6e>
  _freq = freq;
 8004dc2:	4a19      	ldr	r2, [pc, #100]	@ (8004e28 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x78>)
 8004dc4:	62c2      	str	r2, [r0, #44]	@ 0x2c
  invertOnCommand = ST77XX_INVON;
 8004dc6:	f242 0321 	movw	r3, #8225	@ 0x2021
 8004dca:	8503      	strh	r3, [r0, #40]	@ 0x28
  if (cmdList) {
 8004dcc:	b32c      	cbz	r4, 8004e1a <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6a>
  numCommands = pgm_read_byte(addr++); // Number of commands to follow
 8004dce:	4621      	mov	r1, r4
 8004dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (numCommands--) {              // For each command...
 8004dd4:	1e5d      	subs	r5, r3, #1
 8004dd6:	b2ed      	uxtb	r5, r5
 8004dd8:	b1fb      	cbz	r3, 8004e1a <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6a>
    numArgs = pgm_read_byte(addr++);   // Number of args to follow
 8004dda:	f891 8001 	ldrb.w	r8, [r1, #1]
 8004dde:	1c8e      	adds	r6, r1, #2
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
 8004de0:	f008 047f 	and.w	r4, r8, #127	@ 0x7f
    sendCommand(cmd, addr, numArgs);
 8004de4:	7809      	ldrb	r1, [r1, #0]
 8004de6:	4623      	mov	r3, r4
 8004de8:	4632      	mov	r2, r6
 8004dea:	4638      	mov	r0, r7
 8004dec:	f7ff fe34 	bl	8004a58 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>
    if (ms) {
 8004df0:	f018 0f80 	tst.w	r8, #128	@ 0x80
    addr += numArgs;
 8004df4:	eb06 0104 	add.w	r1, r6, r4
    if (ms) {
 8004df8:	d00b      	beq.n	8004e12 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x62>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8004dfa:	5d32      	ldrb	r2, [r6, r4]
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfe:	2aff      	cmp	r2, #255	@ 0xff
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8004e00:	f101 0401 	add.w	r4, r1, #1
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8004e04:	bf08      	it	eq
 8004e06:	f44f 72fa 	moveq.w	r2, #500	@ 0x1f4
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2007      	movs	r0, #7
 8004e0e:	4798      	blx	r3
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8004e10:	4621      	mov	r1, r4
  while (numCommands--) {              // For each command...
 8004e12:	3d01      	subs	r5, #1
 8004e14:	b2ed      	uxtb	r5, r5
 8004e16:	2dff      	cmp	r5, #255	@ 0xff
 8004e18:	d1df      	bne.n	8004dda <_ZN15Adafruit_ST77xx10commonInitEPKh+0x2a>
}
 8004e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  begin();
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4798      	blx	r3
 8004e22:	e7d3      	b.n	8004dcc <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
 8004e24:	08004c6d 	.word	0x08004c6d
 8004e28:	01e84800 	.word	0x01e84800

08004e2c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n = 0;
  while (size--) {
 8004e2e:	4617      	mov	r7, r2
 8004e30:	b17a      	cbz	r2, 8004e52 <_ZN5Print5writeEPKhj+0x26>
 8004e32:	4605      	mov	r5, r0
 8004e34:	460e      	mov	r6, r1
  size_t n = 0;
 8004e36:	2400      	movs	r4, #0
 8004e38:	e002      	b.n	8004e40 <_ZN5Print5writeEPKhj+0x14>
    if (write(*buffer++)) n++;
 8004e3a:	3401      	adds	r4, #1
  while (size--) {
 8004e3c:	42a7      	cmp	r7, r4
 8004e3e:	d008      	beq.n	8004e52 <_ZN5Print5writeEPKhj+0x26>
    if (write(*buffer++)) n++;
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4628      	mov	r0, r5
 8004e4a:	4798      	blx	r3
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d1f4      	bne.n	8004e3a <_ZN5Print5writeEPKhj+0xe>
 8004e50:	4627      	mov	r7, r4
    else break;
  }
  return n;
}
 8004e52:	4638      	mov	r0, r7
 8004e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e56:	bf00      	nop

08004e58 <_ZN5Print6printfEPKcz>:
//  n += println();
//  return n;
//}

size_t Print::printf(const char *fmt, ...)
{
 8004e58:	b40e      	push	{r1, r2, r3}
 8004e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e5c:	b08a      	sub	sp, #40	@ 0x28
 8004e5e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004e60:	4605      	mov	r5, r0
 8004e62:	f852 1b04 	ldr.w	r1, [r2], #4
  char buffer[30];
  va_list args;
  va_start(args, fmt);
 8004e66:	9201      	str	r2, [sp, #4]
  int n = vsprintf(buffer, fmt, args);
 8004e68:	a802      	add	r0, sp, #8
 8004e6a:	f000 f951 	bl	8005110 <vsiprintf>
  if (n < 0)
 8004e6e:	1e07      	subs	r7, r0, #0
 8004e70:	db19      	blt.n	8004ea6 <_ZN5Print6printfEPKcz+0x4e>
    return 0;
  auto ret = write((uint8_t*)buffer, n);
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	4a10      	ldr	r2, [pc, #64]	@ (8004eb8 <_ZN5Print6printfEPKcz+0x60>)
 8004e76:	685c      	ldr	r4, [r3, #4]
 8004e78:	4294      	cmp	r4, r2
 8004e7a:	d116      	bne.n	8004eaa <_ZN5Print6printfEPKcz+0x52>
  while (size--) {
 8004e7c:	b19f      	cbz	r7, 8004ea6 <_ZN5Print6printfEPKcz+0x4e>
  size_t n = 0;
 8004e7e:	2400      	movs	r4, #0
  while (size--) {
 8004e80:	ae02      	add	r6, sp, #8
 8004e82:	e003      	b.n	8004e8c <_ZN5Print6printfEPKcz+0x34>
    if (write(*buffer++)) n++;
 8004e84:	3401      	adds	r4, #1
  while (size--) {
 8004e86:	42a7      	cmp	r7, r4
 8004e88:	d007      	beq.n	8004e9a <_ZN5Print6printfEPKcz+0x42>
    if (write(*buffer++)) n++;
 8004e8a:	682b      	ldr	r3, [r5, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004e92:	4628      	mov	r0, r5
 8004e94:	4798      	blx	r3
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d1f4      	bne.n	8004e84 <_ZN5Print6printfEPKcz+0x2c>
  va_end(args);
  return ret;
}
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	b00a      	add	sp, #40	@ 0x28
 8004e9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004ea2:	b003      	add	sp, #12
 8004ea4:	4770      	bx	lr
    return 0;
 8004ea6:	2400      	movs	r4, #0
 8004ea8:	e7f7      	b.n	8004e9a <_ZN5Print6printfEPKcz+0x42>
  auto ret = write((uint8_t*)buffer, n);
 8004eaa:	463a      	mov	r2, r7
 8004eac:	a902      	add	r1, sp, #8
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47a0      	blx	r4
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	e7f1      	b.n	8004e9a <_ZN5Print6printfEPKcz+0x42>
 8004eb6:	bf00      	nop
 8004eb8:	08004e2d 	.word	0x08004e2d

08004ebc <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
 8004ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec0:	b08a      	sub	sp, #40	@ 0x28
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8004ec2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8004ec4:	2a01      	cmp	r2, #1
{
 8004ec6:	4605      	mov	r5, r0
  *str = '\0';
 8004ec8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
  if (base < 2) base = 10;
 8004ecc:	bf98      	it	ls
 8004ece:	220a      	movls	r2, #10
 8004ed0:	ac09      	add	r4, sp, #36	@ 0x24

  do {
    char c = n % base;
 8004ed2:	fbb1 fcf2 	udiv	ip, r1, r2
 8004ed6:	fb02 101c 	mls	r0, r2, ip, r1
 8004eda:	b2c3      	uxtb	r3, r0
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8004edc:	2809      	cmp	r0, #9
 8004ede:	468e      	mov	lr, r1
 8004ee0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8004ee4:	bf8a      	itet	hi
 8004ee6:	3337      	addhi	r3, #55	@ 0x37
 8004ee8:	b2c3      	uxtbls	r3, r0
 8004eea:	b2db      	uxtbhi	r3, r3
  } while(n);
 8004eec:	4596      	cmp	lr, r2
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8004eee:	f804 3d01 	strb.w	r3, [r4, #-1]!
    n /= base;
 8004ef2:	4661      	mov	r1, ip
  } while(n);
 8004ef4:	d2ed      	bcs.n	8004ed2 <_ZN5Print11printNumberEmh+0x16>
      return write((const uint8_t *)str, strlen(str));
 8004ef6:	682f      	ldr	r7, [r5, #0]
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f7fb f991 	bl	8000220 <strlen>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	@ (8004f40 <_ZN5Print11printNumberEmh+0x84>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	4680      	mov	r8, r0
 8004f06:	d112      	bne.n	8004f2e <_ZN5Print11printNumberEmh+0x72>
  while (size--) {
 8004f08:	b168      	cbz	r0, 8004f26 <_ZN5Print11printNumberEmh+0x6a>
  size_t n = 0;
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	e003      	b.n	8004f16 <_ZN5Print11printNumberEmh+0x5a>
    if (write(*buffer++)) n++;
 8004f0e:	3601      	adds	r6, #1
  while (size--) {
 8004f10:	45b0      	cmp	r8, r6
 8004f12:	d008      	beq.n	8004f26 <_ZN5Print11printNumberEmh+0x6a>
    if (write(*buffer++)) n++;
 8004f14:	682f      	ldr	r7, [r5, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	4798      	blx	r3
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d1f4      	bne.n	8004f0e <_ZN5Print11printNumberEmh+0x52>
 8004f24:	46b0      	mov	r8, r6

  return write(str);
}
 8004f26:	4640      	mov	r0, r8
 8004f28:	b00a      	add	sp, #40	@ 0x28
 8004f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4621      	mov	r1, r4
 8004f32:	4628      	mov	r0, r5
 8004f34:	4798      	blx	r3
 8004f36:	4680      	mov	r8, r0
 8004f38:	4640      	mov	r0, r8
 8004f3a:	b00a      	add	sp, #40	@ 0x28
 8004f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f40:	08004e2d 	.word	0x08004e2d

08004f44 <_ZN5Print5printEii>:
{
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	4606      	mov	r6, r0
 8004f48:	460d      	mov	r5, r1
  if (base == 0) {
 8004f4a:	b92a      	cbnz	r2, 8004f58 <_ZN5Print5printEii+0x14>
    return write(n);
 8004f4c:	6803      	ldr	r3, [r0, #0]
}
 8004f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return write(n);
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	b2c9      	uxtb	r1, r1
 8004f56:	4718      	bx	r3
  } else if (base == 10) {
 8004f58:	2a0a      	cmp	r2, #10
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	d10e      	bne.n	8004f7c <_ZN5Print5printEii+0x38>
    if (n < 0) {
 8004f5e:	2900      	cmp	r1, #0
 8004f60:	da0d      	bge.n	8004f7e <_ZN5Print5printEii+0x3a>
  return write(c);
 8004f62:	6803      	ldr	r3, [r0, #0]
 8004f64:	212d      	movs	r1, #45	@ 0x2d
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4798      	blx	r3
      return printNumber(n, 10) + t;
 8004f6a:	4622      	mov	r2, r4
  return write(c);
 8004f6c:	4603      	mov	r3, r0
      return printNumber(n, 10) + t;
 8004f6e:	4269      	negs	r1, r5
 8004f70:	4630      	mov	r0, r6
  return write(c);
 8004f72:	461c      	mov	r4, r3
      return printNumber(n, 10) + t;
 8004f74:	f7ff ffa2 	bl	8004ebc <_ZN5Print11printNumberEmh>
 8004f78:	4420      	add	r0, r4
}
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
    return printNumber(n, base);
 8004f7c:	b2d2      	uxtb	r2, r2
}
 8004f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return printNumber(n, base);
 8004f82:	f7ff bf9b 	b.w	8004ebc <_ZN5Print11printNumberEmh>
 8004f86:	bf00      	nop

08004f88 <sbrk_aligned>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4e0f      	ldr	r6, [pc, #60]	@ (8004fc8 <sbrk_aligned+0x40>)
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	6831      	ldr	r1, [r6, #0]
 8004f90:	4605      	mov	r5, r0
 8004f92:	b911      	cbnz	r1, 8004f9a <sbrk_aligned+0x12>
 8004f94:	f000 f8ce 	bl	8005134 <_sbrk_r>
 8004f98:	6030      	str	r0, [r6, #0]
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 f8c9 	bl	8005134 <_sbrk_r>
 8004fa2:	1c43      	adds	r3, r0, #1
 8004fa4:	d103      	bne.n	8004fae <sbrk_aligned+0x26>
 8004fa6:	f04f 34ff 	mov.w	r4, #4294967295
 8004faa:	4620      	mov	r0, r4
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
 8004fae:	1cc4      	adds	r4, r0, #3
 8004fb0:	f024 0403 	bic.w	r4, r4, #3
 8004fb4:	42a0      	cmp	r0, r4
 8004fb6:	d0f8      	beq.n	8004faa <sbrk_aligned+0x22>
 8004fb8:	1a21      	subs	r1, r4, r0
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 f8ba 	bl	8005134 <_sbrk_r>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d1f2      	bne.n	8004faa <sbrk_aligned+0x22>
 8004fc4:	e7ef      	b.n	8004fa6 <sbrk_aligned+0x1e>
 8004fc6:	bf00      	nop
 8004fc8:	200001cc 	.word	0x200001cc

08004fcc <_malloc_r>:
 8004fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd0:	1ccd      	adds	r5, r1, #3
 8004fd2:	f025 0503 	bic.w	r5, r5, #3
 8004fd6:	3508      	adds	r5, #8
 8004fd8:	2d0c      	cmp	r5, #12
 8004fda:	bf38      	it	cc
 8004fdc:	250c      	movcc	r5, #12
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	db01      	blt.n	8004fe8 <_malloc_r+0x1c>
 8004fe4:	42a9      	cmp	r1, r5
 8004fe6:	d904      	bls.n	8004ff2 <_malloc_r+0x26>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	6033      	str	r3, [r6, #0]
 8004fec:	2000      	movs	r0, #0
 8004fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050c8 <_malloc_r+0xfc>
 8004ff6:	f000 f869 	bl	80050cc <__malloc_lock>
 8004ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8004ffe:	461c      	mov	r4, r3
 8005000:	bb44      	cbnz	r4, 8005054 <_malloc_r+0x88>
 8005002:	4629      	mov	r1, r5
 8005004:	4630      	mov	r0, r6
 8005006:	f7ff ffbf 	bl	8004f88 <sbrk_aligned>
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	4604      	mov	r4, r0
 800500e:	d158      	bne.n	80050c2 <_malloc_r+0xf6>
 8005010:	f8d8 4000 	ldr.w	r4, [r8]
 8005014:	4627      	mov	r7, r4
 8005016:	2f00      	cmp	r7, #0
 8005018:	d143      	bne.n	80050a2 <_malloc_r+0xd6>
 800501a:	2c00      	cmp	r4, #0
 800501c:	d04b      	beq.n	80050b6 <_malloc_r+0xea>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	4639      	mov	r1, r7
 8005022:	4630      	mov	r0, r6
 8005024:	eb04 0903 	add.w	r9, r4, r3
 8005028:	f000 f884 	bl	8005134 <_sbrk_r>
 800502c:	4581      	cmp	r9, r0
 800502e:	d142      	bne.n	80050b6 <_malloc_r+0xea>
 8005030:	6821      	ldr	r1, [r4, #0]
 8005032:	1a6d      	subs	r5, r5, r1
 8005034:	4629      	mov	r1, r5
 8005036:	4630      	mov	r0, r6
 8005038:	f7ff ffa6 	bl	8004f88 <sbrk_aligned>
 800503c:	3001      	adds	r0, #1
 800503e:	d03a      	beq.n	80050b6 <_malloc_r+0xea>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	442b      	add	r3, r5
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	f8d8 3000 	ldr.w	r3, [r8]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	bb62      	cbnz	r2, 80050a8 <_malloc_r+0xdc>
 800504e:	f8c8 7000 	str.w	r7, [r8]
 8005052:	e00f      	b.n	8005074 <_malloc_r+0xa8>
 8005054:	6822      	ldr	r2, [r4, #0]
 8005056:	1b52      	subs	r2, r2, r5
 8005058:	d420      	bmi.n	800509c <_malloc_r+0xd0>
 800505a:	2a0b      	cmp	r2, #11
 800505c:	d917      	bls.n	800508e <_malloc_r+0xc2>
 800505e:	1961      	adds	r1, r4, r5
 8005060:	42a3      	cmp	r3, r4
 8005062:	6025      	str	r5, [r4, #0]
 8005064:	bf18      	it	ne
 8005066:	6059      	strne	r1, [r3, #4]
 8005068:	6863      	ldr	r3, [r4, #4]
 800506a:	bf08      	it	eq
 800506c:	f8c8 1000 	streq.w	r1, [r8]
 8005070:	5162      	str	r2, [r4, r5]
 8005072:	604b      	str	r3, [r1, #4]
 8005074:	4630      	mov	r0, r6
 8005076:	f000 f82f 	bl	80050d8 <__malloc_unlock>
 800507a:	f104 000b 	add.w	r0, r4, #11
 800507e:	1d23      	adds	r3, r4, #4
 8005080:	f020 0007 	bic.w	r0, r0, #7
 8005084:	1ac2      	subs	r2, r0, r3
 8005086:	bf1c      	itt	ne
 8005088:	1a1b      	subne	r3, r3, r0
 800508a:	50a3      	strne	r3, [r4, r2]
 800508c:	e7af      	b.n	8004fee <_malloc_r+0x22>
 800508e:	6862      	ldr	r2, [r4, #4]
 8005090:	42a3      	cmp	r3, r4
 8005092:	bf0c      	ite	eq
 8005094:	f8c8 2000 	streq.w	r2, [r8]
 8005098:	605a      	strne	r2, [r3, #4]
 800509a:	e7eb      	b.n	8005074 <_malloc_r+0xa8>
 800509c:	4623      	mov	r3, r4
 800509e:	6864      	ldr	r4, [r4, #4]
 80050a0:	e7ae      	b.n	8005000 <_malloc_r+0x34>
 80050a2:	463c      	mov	r4, r7
 80050a4:	687f      	ldr	r7, [r7, #4]
 80050a6:	e7b6      	b.n	8005016 <_malloc_r+0x4a>
 80050a8:	461a      	mov	r2, r3
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d1fb      	bne.n	80050a8 <_malloc_r+0xdc>
 80050b0:	2300      	movs	r3, #0
 80050b2:	6053      	str	r3, [r2, #4]
 80050b4:	e7de      	b.n	8005074 <_malloc_r+0xa8>
 80050b6:	230c      	movs	r3, #12
 80050b8:	6033      	str	r3, [r6, #0]
 80050ba:	4630      	mov	r0, r6
 80050bc:	f000 f80c 	bl	80050d8 <__malloc_unlock>
 80050c0:	e794      	b.n	8004fec <_malloc_r+0x20>
 80050c2:	6005      	str	r5, [r0, #0]
 80050c4:	e7d6      	b.n	8005074 <_malloc_r+0xa8>
 80050c6:	bf00      	nop
 80050c8:	200001d0 	.word	0x200001d0

080050cc <__malloc_lock>:
 80050cc:	4801      	ldr	r0, [pc, #4]	@ (80050d4 <__malloc_lock+0x8>)
 80050ce:	f000 b86b 	b.w	80051a8 <__retarget_lock_acquire_recursive>
 80050d2:	bf00      	nop
 80050d4:	20000310 	.word	0x20000310

080050d8 <__malloc_unlock>:
 80050d8:	4801      	ldr	r0, [pc, #4]	@ (80050e0 <__malloc_unlock+0x8>)
 80050da:	f000 b866 	b.w	80051aa <__retarget_lock_release_recursive>
 80050de:	bf00      	nop
 80050e0:	20000310 	.word	0x20000310

080050e4 <_vsiprintf_r>:
 80050e4:	b500      	push	{lr}
 80050e6:	b09b      	sub	sp, #108	@ 0x6c
 80050e8:	9100      	str	r1, [sp, #0]
 80050ea:	9104      	str	r1, [sp, #16]
 80050ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050f0:	9105      	str	r1, [sp, #20]
 80050f2:	9102      	str	r1, [sp, #8]
 80050f4:	4905      	ldr	r1, [pc, #20]	@ (800510c <_vsiprintf_r+0x28>)
 80050f6:	9103      	str	r1, [sp, #12]
 80050f8:	4669      	mov	r1, sp
 80050fa:	f000 f8fd 	bl	80052f8 <_svfiprintf_r>
 80050fe:	9b00      	ldr	r3, [sp, #0]
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	b01b      	add	sp, #108	@ 0x6c
 8005106:	f85d fb04 	ldr.w	pc, [sp], #4
 800510a:	bf00      	nop
 800510c:	ffff0208 	.word	0xffff0208

08005110 <vsiprintf>:
 8005110:	4613      	mov	r3, r2
 8005112:	460a      	mov	r2, r1
 8005114:	4601      	mov	r1, r0
 8005116:	4802      	ldr	r0, [pc, #8]	@ (8005120 <vsiprintf+0x10>)
 8005118:	6800      	ldr	r0, [r0, #0]
 800511a:	f7ff bfe3 	b.w	80050e4 <_vsiprintf_r>
 800511e:	bf00      	nop
 8005120:	2000000c 	.word	0x2000000c

08005124 <memset>:
 8005124:	4402      	add	r2, r0
 8005126:	4603      	mov	r3, r0
 8005128:	4293      	cmp	r3, r2
 800512a:	d100      	bne.n	800512e <memset+0xa>
 800512c:	4770      	bx	lr
 800512e:	f803 1b01 	strb.w	r1, [r3], #1
 8005132:	e7f9      	b.n	8005128 <memset+0x4>

08005134 <_sbrk_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d06      	ldr	r5, [pc, #24]	@ (8005150 <_sbrk_r+0x1c>)
 8005138:	2300      	movs	r3, #0
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	f7fc f9d2 	bl	80014e8 <_sbrk>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_sbrk_r+0x1a>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_sbrk_r+0x1a>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	2000030c 	.word	0x2000030c

08005154 <__errno>:
 8005154:	4b01      	ldr	r3, [pc, #4]	@ (800515c <__errno+0x8>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	2000000c 	.word	0x2000000c

08005160 <__libc_init_array>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	4d0d      	ldr	r5, [pc, #52]	@ (8005198 <__libc_init_array+0x38>)
 8005164:	4c0d      	ldr	r4, [pc, #52]	@ (800519c <__libc_init_array+0x3c>)
 8005166:	1b64      	subs	r4, r4, r5
 8005168:	10a4      	asrs	r4, r4, #2
 800516a:	2600      	movs	r6, #0
 800516c:	42a6      	cmp	r6, r4
 800516e:	d109      	bne.n	8005184 <__libc_init_array+0x24>
 8005170:	4d0b      	ldr	r5, [pc, #44]	@ (80051a0 <__libc_init_array+0x40>)
 8005172:	4c0c      	ldr	r4, [pc, #48]	@ (80051a4 <__libc_init_array+0x44>)
 8005174:	f000 fba8 	bl	80058c8 <_init>
 8005178:	1b64      	subs	r4, r4, r5
 800517a:	10a4      	asrs	r4, r4, #2
 800517c:	2600      	movs	r6, #0
 800517e:	42a6      	cmp	r6, r4
 8005180:	d105      	bne.n	800518e <__libc_init_array+0x2e>
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	f855 3b04 	ldr.w	r3, [r5], #4
 8005188:	4798      	blx	r3
 800518a:	3601      	adds	r6, #1
 800518c:	e7ee      	b.n	800516c <__libc_init_array+0xc>
 800518e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005192:	4798      	blx	r3
 8005194:	3601      	adds	r6, #1
 8005196:	e7f2      	b.n	800517e <__libc_init_array+0x1e>
 8005198:	08008198 	.word	0x08008198
 800519c:	08008198 	.word	0x08008198
 80051a0:	08008198 	.word	0x08008198
 80051a4:	080081a0 	.word	0x080081a0

080051a8 <__retarget_lock_acquire_recursive>:
 80051a8:	4770      	bx	lr

080051aa <__retarget_lock_release_recursive>:
 80051aa:	4770      	bx	lr

080051ac <_free_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4605      	mov	r5, r0
 80051b0:	2900      	cmp	r1, #0
 80051b2:	d041      	beq.n	8005238 <_free_r+0x8c>
 80051b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b8:	1f0c      	subs	r4, r1, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bfb8      	it	lt
 80051be:	18e4      	addlt	r4, r4, r3
 80051c0:	f7ff ff84 	bl	80050cc <__malloc_lock>
 80051c4:	4a1d      	ldr	r2, [pc, #116]	@ (800523c <_free_r+0x90>)
 80051c6:	6813      	ldr	r3, [r2, #0]
 80051c8:	b933      	cbnz	r3, 80051d8 <_free_r+0x2c>
 80051ca:	6063      	str	r3, [r4, #4]
 80051cc:	6014      	str	r4, [r2, #0]
 80051ce:	4628      	mov	r0, r5
 80051d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d4:	f7ff bf80 	b.w	80050d8 <__malloc_unlock>
 80051d8:	42a3      	cmp	r3, r4
 80051da:	d908      	bls.n	80051ee <_free_r+0x42>
 80051dc:	6820      	ldr	r0, [r4, #0]
 80051de:	1821      	adds	r1, r4, r0
 80051e0:	428b      	cmp	r3, r1
 80051e2:	bf01      	itttt	eq
 80051e4:	6819      	ldreq	r1, [r3, #0]
 80051e6:	685b      	ldreq	r3, [r3, #4]
 80051e8:	1809      	addeq	r1, r1, r0
 80051ea:	6021      	streq	r1, [r4, #0]
 80051ec:	e7ed      	b.n	80051ca <_free_r+0x1e>
 80051ee:	461a      	mov	r2, r3
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	b10b      	cbz	r3, 80051f8 <_free_r+0x4c>
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	d9fa      	bls.n	80051ee <_free_r+0x42>
 80051f8:	6811      	ldr	r1, [r2, #0]
 80051fa:	1850      	adds	r0, r2, r1
 80051fc:	42a0      	cmp	r0, r4
 80051fe:	d10b      	bne.n	8005218 <_free_r+0x6c>
 8005200:	6820      	ldr	r0, [r4, #0]
 8005202:	4401      	add	r1, r0
 8005204:	1850      	adds	r0, r2, r1
 8005206:	4283      	cmp	r3, r0
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	d1e0      	bne.n	80051ce <_free_r+0x22>
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	6053      	str	r3, [r2, #4]
 8005212:	4408      	add	r0, r1
 8005214:	6010      	str	r0, [r2, #0]
 8005216:	e7da      	b.n	80051ce <_free_r+0x22>
 8005218:	d902      	bls.n	8005220 <_free_r+0x74>
 800521a:	230c      	movs	r3, #12
 800521c:	602b      	str	r3, [r5, #0]
 800521e:	e7d6      	b.n	80051ce <_free_r+0x22>
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	1821      	adds	r1, r4, r0
 8005224:	428b      	cmp	r3, r1
 8005226:	bf04      	itt	eq
 8005228:	6819      	ldreq	r1, [r3, #0]
 800522a:	685b      	ldreq	r3, [r3, #4]
 800522c:	6063      	str	r3, [r4, #4]
 800522e:	bf04      	itt	eq
 8005230:	1809      	addeq	r1, r1, r0
 8005232:	6021      	streq	r1, [r4, #0]
 8005234:	6054      	str	r4, [r2, #4]
 8005236:	e7ca      	b.n	80051ce <_free_r+0x22>
 8005238:	bd38      	pop	{r3, r4, r5, pc}
 800523a:	bf00      	nop
 800523c:	200001d0 	.word	0x200001d0

08005240 <__ssputs_r>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	688e      	ldr	r6, [r1, #8]
 8005246:	461f      	mov	r7, r3
 8005248:	42be      	cmp	r6, r7
 800524a:	680b      	ldr	r3, [r1, #0]
 800524c:	4682      	mov	sl, r0
 800524e:	460c      	mov	r4, r1
 8005250:	4690      	mov	r8, r2
 8005252:	d82d      	bhi.n	80052b0 <__ssputs_r+0x70>
 8005254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005258:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800525c:	d026      	beq.n	80052ac <__ssputs_r+0x6c>
 800525e:	6965      	ldr	r5, [r4, #20]
 8005260:	6909      	ldr	r1, [r1, #16]
 8005262:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005266:	eba3 0901 	sub.w	r9, r3, r1
 800526a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800526e:	1c7b      	adds	r3, r7, #1
 8005270:	444b      	add	r3, r9
 8005272:	106d      	asrs	r5, r5, #1
 8005274:	429d      	cmp	r5, r3
 8005276:	bf38      	it	cc
 8005278:	461d      	movcc	r5, r3
 800527a:	0553      	lsls	r3, r2, #21
 800527c:	d527      	bpl.n	80052ce <__ssputs_r+0x8e>
 800527e:	4629      	mov	r1, r5
 8005280:	f7ff fea4 	bl	8004fcc <_malloc_r>
 8005284:	4606      	mov	r6, r0
 8005286:	b360      	cbz	r0, 80052e2 <__ssputs_r+0xa2>
 8005288:	6921      	ldr	r1, [r4, #16]
 800528a:	464a      	mov	r2, r9
 800528c:	f000 fad8 	bl	8005840 <memcpy>
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800529a:	81a3      	strh	r3, [r4, #12]
 800529c:	6126      	str	r6, [r4, #16]
 800529e:	6165      	str	r5, [r4, #20]
 80052a0:	444e      	add	r6, r9
 80052a2:	eba5 0509 	sub.w	r5, r5, r9
 80052a6:	6026      	str	r6, [r4, #0]
 80052a8:	60a5      	str	r5, [r4, #8]
 80052aa:	463e      	mov	r6, r7
 80052ac:	42be      	cmp	r6, r7
 80052ae:	d900      	bls.n	80052b2 <__ssputs_r+0x72>
 80052b0:	463e      	mov	r6, r7
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	4632      	mov	r2, r6
 80052b6:	4641      	mov	r1, r8
 80052b8:	f000 faa8 	bl	800580c <memmove>
 80052bc:	68a3      	ldr	r3, [r4, #8]
 80052be:	1b9b      	subs	r3, r3, r6
 80052c0:	60a3      	str	r3, [r4, #8]
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	4433      	add	r3, r6
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	2000      	movs	r0, #0
 80052ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ce:	462a      	mov	r2, r5
 80052d0:	f000 fac4 	bl	800585c <_realloc_r>
 80052d4:	4606      	mov	r6, r0
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d1e0      	bne.n	800529c <__ssputs_r+0x5c>
 80052da:	6921      	ldr	r1, [r4, #16]
 80052dc:	4650      	mov	r0, sl
 80052de:	f7ff ff65 	bl	80051ac <_free_r>
 80052e2:	230c      	movs	r3, #12
 80052e4:	f8ca 3000 	str.w	r3, [sl]
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ee:	81a3      	strh	r3, [r4, #12]
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	e7e9      	b.n	80052ca <__ssputs_r+0x8a>
	...

080052f8 <_svfiprintf_r>:
 80052f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fc:	4698      	mov	r8, r3
 80052fe:	898b      	ldrh	r3, [r1, #12]
 8005300:	061b      	lsls	r3, r3, #24
 8005302:	b09d      	sub	sp, #116	@ 0x74
 8005304:	4607      	mov	r7, r0
 8005306:	460d      	mov	r5, r1
 8005308:	4614      	mov	r4, r2
 800530a:	d510      	bpl.n	800532e <_svfiprintf_r+0x36>
 800530c:	690b      	ldr	r3, [r1, #16]
 800530e:	b973      	cbnz	r3, 800532e <_svfiprintf_r+0x36>
 8005310:	2140      	movs	r1, #64	@ 0x40
 8005312:	f7ff fe5b 	bl	8004fcc <_malloc_r>
 8005316:	6028      	str	r0, [r5, #0]
 8005318:	6128      	str	r0, [r5, #16]
 800531a:	b930      	cbnz	r0, 800532a <_svfiprintf_r+0x32>
 800531c:	230c      	movs	r3, #12
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	b01d      	add	sp, #116	@ 0x74
 8005326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	2340      	movs	r3, #64	@ 0x40
 800532c:	616b      	str	r3, [r5, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	9309      	str	r3, [sp, #36]	@ 0x24
 8005332:	2320      	movs	r3, #32
 8005334:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005338:	f8cd 800c 	str.w	r8, [sp, #12]
 800533c:	2330      	movs	r3, #48	@ 0x30
 800533e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054dc <_svfiprintf_r+0x1e4>
 8005342:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005346:	f04f 0901 	mov.w	r9, #1
 800534a:	4623      	mov	r3, r4
 800534c:	469a      	mov	sl, r3
 800534e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005352:	b10a      	cbz	r2, 8005358 <_svfiprintf_r+0x60>
 8005354:	2a25      	cmp	r2, #37	@ 0x25
 8005356:	d1f9      	bne.n	800534c <_svfiprintf_r+0x54>
 8005358:	ebba 0b04 	subs.w	fp, sl, r4
 800535c:	d00b      	beq.n	8005376 <_svfiprintf_r+0x7e>
 800535e:	465b      	mov	r3, fp
 8005360:	4622      	mov	r2, r4
 8005362:	4629      	mov	r1, r5
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ff6b 	bl	8005240 <__ssputs_r>
 800536a:	3001      	adds	r0, #1
 800536c:	f000 80a7 	beq.w	80054be <_svfiprintf_r+0x1c6>
 8005370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005372:	445a      	add	r2, fp
 8005374:	9209      	str	r2, [sp, #36]	@ 0x24
 8005376:	f89a 3000 	ldrb.w	r3, [sl]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 809f 	beq.w	80054be <_svfiprintf_r+0x1c6>
 8005380:	2300      	movs	r3, #0
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800538a:	f10a 0a01 	add.w	sl, sl, #1
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	9307      	str	r3, [sp, #28]
 8005392:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005396:	931a      	str	r3, [sp, #104]	@ 0x68
 8005398:	4654      	mov	r4, sl
 800539a:	2205      	movs	r2, #5
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	484e      	ldr	r0, [pc, #312]	@ (80054dc <_svfiprintf_r+0x1e4>)
 80053a2:	f7fa ff45 	bl	8000230 <memchr>
 80053a6:	9a04      	ldr	r2, [sp, #16]
 80053a8:	b9d8      	cbnz	r0, 80053e2 <_svfiprintf_r+0xea>
 80053aa:	06d0      	lsls	r0, r2, #27
 80053ac:	bf44      	itt	mi
 80053ae:	2320      	movmi	r3, #32
 80053b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053b4:	0711      	lsls	r1, r2, #28
 80053b6:	bf44      	itt	mi
 80053b8:	232b      	movmi	r3, #43	@ 0x2b
 80053ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053be:	f89a 3000 	ldrb.w	r3, [sl]
 80053c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80053c4:	d015      	beq.n	80053f2 <_svfiprintf_r+0xfa>
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	4654      	mov	r4, sl
 80053ca:	2000      	movs	r0, #0
 80053cc:	f04f 0c0a 	mov.w	ip, #10
 80053d0:	4621      	mov	r1, r4
 80053d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d6:	3b30      	subs	r3, #48	@ 0x30
 80053d8:	2b09      	cmp	r3, #9
 80053da:	d94b      	bls.n	8005474 <_svfiprintf_r+0x17c>
 80053dc:	b1b0      	cbz	r0, 800540c <_svfiprintf_r+0x114>
 80053de:	9207      	str	r2, [sp, #28]
 80053e0:	e014      	b.n	800540c <_svfiprintf_r+0x114>
 80053e2:	eba0 0308 	sub.w	r3, r0, r8
 80053e6:	fa09 f303 	lsl.w	r3, r9, r3
 80053ea:	4313      	orrs	r3, r2
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	46a2      	mov	sl, r4
 80053f0:	e7d2      	b.n	8005398 <_svfiprintf_r+0xa0>
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	1d19      	adds	r1, r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfbb      	ittet	lt
 80053fe:	425b      	neglt	r3, r3
 8005400:	f042 0202 	orrlt.w	r2, r2, #2
 8005404:	9307      	strge	r3, [sp, #28]
 8005406:	9307      	strlt	r3, [sp, #28]
 8005408:	bfb8      	it	lt
 800540a:	9204      	strlt	r2, [sp, #16]
 800540c:	7823      	ldrb	r3, [r4, #0]
 800540e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005410:	d10a      	bne.n	8005428 <_svfiprintf_r+0x130>
 8005412:	7863      	ldrb	r3, [r4, #1]
 8005414:	2b2a      	cmp	r3, #42	@ 0x2a
 8005416:	d132      	bne.n	800547e <_svfiprintf_r+0x186>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	9203      	str	r2, [sp, #12]
 8005420:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005424:	3402      	adds	r4, #2
 8005426:	9305      	str	r3, [sp, #20]
 8005428:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054ec <_svfiprintf_r+0x1f4>
 800542c:	7821      	ldrb	r1, [r4, #0]
 800542e:	2203      	movs	r2, #3
 8005430:	4650      	mov	r0, sl
 8005432:	f7fa fefd 	bl	8000230 <memchr>
 8005436:	b138      	cbz	r0, 8005448 <_svfiprintf_r+0x150>
 8005438:	9b04      	ldr	r3, [sp, #16]
 800543a:	eba0 000a 	sub.w	r0, r0, sl
 800543e:	2240      	movs	r2, #64	@ 0x40
 8005440:	4082      	lsls	r2, r0
 8005442:	4313      	orrs	r3, r2
 8005444:	3401      	adds	r4, #1
 8005446:	9304      	str	r3, [sp, #16]
 8005448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800544c:	4824      	ldr	r0, [pc, #144]	@ (80054e0 <_svfiprintf_r+0x1e8>)
 800544e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005452:	2206      	movs	r2, #6
 8005454:	f7fa feec 	bl	8000230 <memchr>
 8005458:	2800      	cmp	r0, #0
 800545a:	d036      	beq.n	80054ca <_svfiprintf_r+0x1d2>
 800545c:	4b21      	ldr	r3, [pc, #132]	@ (80054e4 <_svfiprintf_r+0x1ec>)
 800545e:	bb1b      	cbnz	r3, 80054a8 <_svfiprintf_r+0x1b0>
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	3307      	adds	r3, #7
 8005464:	f023 0307 	bic.w	r3, r3, #7
 8005468:	3308      	adds	r3, #8
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800546e:	4433      	add	r3, r6
 8005470:	9309      	str	r3, [sp, #36]	@ 0x24
 8005472:	e76a      	b.n	800534a <_svfiprintf_r+0x52>
 8005474:	fb0c 3202 	mla	r2, ip, r2, r3
 8005478:	460c      	mov	r4, r1
 800547a:	2001      	movs	r0, #1
 800547c:	e7a8      	b.n	80053d0 <_svfiprintf_r+0xd8>
 800547e:	2300      	movs	r3, #0
 8005480:	3401      	adds	r4, #1
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	4619      	mov	r1, r3
 8005486:	f04f 0c0a 	mov.w	ip, #10
 800548a:	4620      	mov	r0, r4
 800548c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005490:	3a30      	subs	r2, #48	@ 0x30
 8005492:	2a09      	cmp	r2, #9
 8005494:	d903      	bls.n	800549e <_svfiprintf_r+0x1a6>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0c6      	beq.n	8005428 <_svfiprintf_r+0x130>
 800549a:	9105      	str	r1, [sp, #20]
 800549c:	e7c4      	b.n	8005428 <_svfiprintf_r+0x130>
 800549e:	fb0c 2101 	mla	r1, ip, r1, r2
 80054a2:	4604      	mov	r4, r0
 80054a4:	2301      	movs	r3, #1
 80054a6:	e7f0      	b.n	800548a <_svfiprintf_r+0x192>
 80054a8:	ab03      	add	r3, sp, #12
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	462a      	mov	r2, r5
 80054ae:	4b0e      	ldr	r3, [pc, #56]	@ (80054e8 <_svfiprintf_r+0x1f0>)
 80054b0:	a904      	add	r1, sp, #16
 80054b2:	4638      	mov	r0, r7
 80054b4:	f3af 8000 	nop.w
 80054b8:	1c42      	adds	r2, r0, #1
 80054ba:	4606      	mov	r6, r0
 80054bc:	d1d6      	bne.n	800546c <_svfiprintf_r+0x174>
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	065b      	lsls	r3, r3, #25
 80054c2:	f53f af2d 	bmi.w	8005320 <_svfiprintf_r+0x28>
 80054c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054c8:	e72c      	b.n	8005324 <_svfiprintf_r+0x2c>
 80054ca:	ab03      	add	r3, sp, #12
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	462a      	mov	r2, r5
 80054d0:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <_svfiprintf_r+0x1f0>)
 80054d2:	a904      	add	r1, sp, #16
 80054d4:	4638      	mov	r0, r7
 80054d6:	f000 f879 	bl	80055cc <_printf_i>
 80054da:	e7ed      	b.n	80054b8 <_svfiprintf_r+0x1c0>
 80054dc:	0800815c 	.word	0x0800815c
 80054e0:	08008166 	.word	0x08008166
 80054e4:	00000000 	.word	0x00000000
 80054e8:	08005241 	.word	0x08005241
 80054ec:	08008162 	.word	0x08008162

080054f0 <_printf_common>:
 80054f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f4:	4616      	mov	r6, r2
 80054f6:	4698      	mov	r8, r3
 80054f8:	688a      	ldr	r2, [r1, #8]
 80054fa:	690b      	ldr	r3, [r1, #16]
 80054fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005500:	4293      	cmp	r3, r2
 8005502:	bfb8      	it	lt
 8005504:	4613      	movlt	r3, r2
 8005506:	6033      	str	r3, [r6, #0]
 8005508:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800550c:	4607      	mov	r7, r0
 800550e:	460c      	mov	r4, r1
 8005510:	b10a      	cbz	r2, 8005516 <_printf_common+0x26>
 8005512:	3301      	adds	r3, #1
 8005514:	6033      	str	r3, [r6, #0]
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	0699      	lsls	r1, r3, #26
 800551a:	bf42      	ittt	mi
 800551c:	6833      	ldrmi	r3, [r6, #0]
 800551e:	3302      	addmi	r3, #2
 8005520:	6033      	strmi	r3, [r6, #0]
 8005522:	6825      	ldr	r5, [r4, #0]
 8005524:	f015 0506 	ands.w	r5, r5, #6
 8005528:	d106      	bne.n	8005538 <_printf_common+0x48>
 800552a:	f104 0a19 	add.w	sl, r4, #25
 800552e:	68e3      	ldr	r3, [r4, #12]
 8005530:	6832      	ldr	r2, [r6, #0]
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	42ab      	cmp	r3, r5
 8005536:	dc26      	bgt.n	8005586 <_printf_common+0x96>
 8005538:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800553c:	6822      	ldr	r2, [r4, #0]
 800553e:	3b00      	subs	r3, #0
 8005540:	bf18      	it	ne
 8005542:	2301      	movne	r3, #1
 8005544:	0692      	lsls	r2, r2, #26
 8005546:	d42b      	bmi.n	80055a0 <_printf_common+0xb0>
 8005548:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800554c:	4641      	mov	r1, r8
 800554e:	4638      	mov	r0, r7
 8005550:	47c8      	blx	r9
 8005552:	3001      	adds	r0, #1
 8005554:	d01e      	beq.n	8005594 <_printf_common+0xa4>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	6922      	ldr	r2, [r4, #16]
 800555a:	f003 0306 	and.w	r3, r3, #6
 800555e:	2b04      	cmp	r3, #4
 8005560:	bf02      	ittt	eq
 8005562:	68e5      	ldreq	r5, [r4, #12]
 8005564:	6833      	ldreq	r3, [r6, #0]
 8005566:	1aed      	subeq	r5, r5, r3
 8005568:	68a3      	ldr	r3, [r4, #8]
 800556a:	bf0c      	ite	eq
 800556c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005570:	2500      	movne	r5, #0
 8005572:	4293      	cmp	r3, r2
 8005574:	bfc4      	itt	gt
 8005576:	1a9b      	subgt	r3, r3, r2
 8005578:	18ed      	addgt	r5, r5, r3
 800557a:	2600      	movs	r6, #0
 800557c:	341a      	adds	r4, #26
 800557e:	42b5      	cmp	r5, r6
 8005580:	d11a      	bne.n	80055b8 <_printf_common+0xc8>
 8005582:	2000      	movs	r0, #0
 8005584:	e008      	b.n	8005598 <_printf_common+0xa8>
 8005586:	2301      	movs	r3, #1
 8005588:	4652      	mov	r2, sl
 800558a:	4641      	mov	r1, r8
 800558c:	4638      	mov	r0, r7
 800558e:	47c8      	blx	r9
 8005590:	3001      	adds	r0, #1
 8005592:	d103      	bne.n	800559c <_printf_common+0xac>
 8005594:	f04f 30ff 	mov.w	r0, #4294967295
 8005598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559c:	3501      	adds	r5, #1
 800559e:	e7c6      	b.n	800552e <_printf_common+0x3e>
 80055a0:	18e1      	adds	r1, r4, r3
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	2030      	movs	r0, #48	@ 0x30
 80055a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055aa:	4422      	add	r2, r4
 80055ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055b4:	3302      	adds	r3, #2
 80055b6:	e7c7      	b.n	8005548 <_printf_common+0x58>
 80055b8:	2301      	movs	r3, #1
 80055ba:	4622      	mov	r2, r4
 80055bc:	4641      	mov	r1, r8
 80055be:	4638      	mov	r0, r7
 80055c0:	47c8      	blx	r9
 80055c2:	3001      	adds	r0, #1
 80055c4:	d0e6      	beq.n	8005594 <_printf_common+0xa4>
 80055c6:	3601      	adds	r6, #1
 80055c8:	e7d9      	b.n	800557e <_printf_common+0x8e>
	...

080055cc <_printf_i>:
 80055cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	7e0f      	ldrb	r7, [r1, #24]
 80055d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055d4:	2f78      	cmp	r7, #120	@ 0x78
 80055d6:	4691      	mov	r9, r2
 80055d8:	4680      	mov	r8, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	469a      	mov	sl, r3
 80055de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055e2:	d807      	bhi.n	80055f4 <_printf_i+0x28>
 80055e4:	2f62      	cmp	r7, #98	@ 0x62
 80055e6:	d80a      	bhi.n	80055fe <_printf_i+0x32>
 80055e8:	2f00      	cmp	r7, #0
 80055ea:	f000 80d2 	beq.w	8005792 <_printf_i+0x1c6>
 80055ee:	2f58      	cmp	r7, #88	@ 0x58
 80055f0:	f000 80b9 	beq.w	8005766 <_printf_i+0x19a>
 80055f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055fc:	e03a      	b.n	8005674 <_printf_i+0xa8>
 80055fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005602:	2b15      	cmp	r3, #21
 8005604:	d8f6      	bhi.n	80055f4 <_printf_i+0x28>
 8005606:	a101      	add	r1, pc, #4	@ (adr r1, 800560c <_printf_i+0x40>)
 8005608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800560c:	08005665 	.word	0x08005665
 8005610:	08005679 	.word	0x08005679
 8005614:	080055f5 	.word	0x080055f5
 8005618:	080055f5 	.word	0x080055f5
 800561c:	080055f5 	.word	0x080055f5
 8005620:	080055f5 	.word	0x080055f5
 8005624:	08005679 	.word	0x08005679
 8005628:	080055f5 	.word	0x080055f5
 800562c:	080055f5 	.word	0x080055f5
 8005630:	080055f5 	.word	0x080055f5
 8005634:	080055f5 	.word	0x080055f5
 8005638:	08005779 	.word	0x08005779
 800563c:	080056a3 	.word	0x080056a3
 8005640:	08005733 	.word	0x08005733
 8005644:	080055f5 	.word	0x080055f5
 8005648:	080055f5 	.word	0x080055f5
 800564c:	0800579b 	.word	0x0800579b
 8005650:	080055f5 	.word	0x080055f5
 8005654:	080056a3 	.word	0x080056a3
 8005658:	080055f5 	.word	0x080055f5
 800565c:	080055f5 	.word	0x080055f5
 8005660:	0800573b 	.word	0x0800573b
 8005664:	6833      	ldr	r3, [r6, #0]
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6032      	str	r2, [r6, #0]
 800566c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005670:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005674:	2301      	movs	r3, #1
 8005676:	e09d      	b.n	80057b4 <_printf_i+0x1e8>
 8005678:	6833      	ldr	r3, [r6, #0]
 800567a:	6820      	ldr	r0, [r4, #0]
 800567c:	1d19      	adds	r1, r3, #4
 800567e:	6031      	str	r1, [r6, #0]
 8005680:	0606      	lsls	r6, r0, #24
 8005682:	d501      	bpl.n	8005688 <_printf_i+0xbc>
 8005684:	681d      	ldr	r5, [r3, #0]
 8005686:	e003      	b.n	8005690 <_printf_i+0xc4>
 8005688:	0645      	lsls	r5, r0, #25
 800568a:	d5fb      	bpl.n	8005684 <_printf_i+0xb8>
 800568c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005690:	2d00      	cmp	r5, #0
 8005692:	da03      	bge.n	800569c <_printf_i+0xd0>
 8005694:	232d      	movs	r3, #45	@ 0x2d
 8005696:	426d      	negs	r5, r5
 8005698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800569c:	4859      	ldr	r0, [pc, #356]	@ (8005804 <_printf_i+0x238>)
 800569e:	230a      	movs	r3, #10
 80056a0:	e011      	b.n	80056c6 <_printf_i+0xfa>
 80056a2:	6821      	ldr	r1, [r4, #0]
 80056a4:	6833      	ldr	r3, [r6, #0]
 80056a6:	0608      	lsls	r0, r1, #24
 80056a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80056ac:	d402      	bmi.n	80056b4 <_printf_i+0xe8>
 80056ae:	0649      	lsls	r1, r1, #25
 80056b0:	bf48      	it	mi
 80056b2:	b2ad      	uxthmi	r5, r5
 80056b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80056b6:	4853      	ldr	r0, [pc, #332]	@ (8005804 <_printf_i+0x238>)
 80056b8:	6033      	str	r3, [r6, #0]
 80056ba:	bf14      	ite	ne
 80056bc:	230a      	movne	r3, #10
 80056be:	2308      	moveq	r3, #8
 80056c0:	2100      	movs	r1, #0
 80056c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056c6:	6866      	ldr	r6, [r4, #4]
 80056c8:	60a6      	str	r6, [r4, #8]
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	bfa2      	ittt	ge
 80056ce:	6821      	ldrge	r1, [r4, #0]
 80056d0:	f021 0104 	bicge.w	r1, r1, #4
 80056d4:	6021      	strge	r1, [r4, #0]
 80056d6:	b90d      	cbnz	r5, 80056dc <_printf_i+0x110>
 80056d8:	2e00      	cmp	r6, #0
 80056da:	d04b      	beq.n	8005774 <_printf_i+0x1a8>
 80056dc:	4616      	mov	r6, r2
 80056de:	fbb5 f1f3 	udiv	r1, r5, r3
 80056e2:	fb03 5711 	mls	r7, r3, r1, r5
 80056e6:	5dc7      	ldrb	r7, [r0, r7]
 80056e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056ec:	462f      	mov	r7, r5
 80056ee:	42bb      	cmp	r3, r7
 80056f0:	460d      	mov	r5, r1
 80056f2:	d9f4      	bls.n	80056de <_printf_i+0x112>
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d10b      	bne.n	8005710 <_printf_i+0x144>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	07df      	lsls	r7, r3, #31
 80056fc:	d508      	bpl.n	8005710 <_printf_i+0x144>
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	6861      	ldr	r1, [r4, #4]
 8005702:	4299      	cmp	r1, r3
 8005704:	bfde      	ittt	le
 8005706:	2330      	movle	r3, #48	@ 0x30
 8005708:	f806 3c01 	strble.w	r3, [r6, #-1]
 800570c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005710:	1b92      	subs	r2, r2, r6
 8005712:	6122      	str	r2, [r4, #16]
 8005714:	f8cd a000 	str.w	sl, [sp]
 8005718:	464b      	mov	r3, r9
 800571a:	aa03      	add	r2, sp, #12
 800571c:	4621      	mov	r1, r4
 800571e:	4640      	mov	r0, r8
 8005720:	f7ff fee6 	bl	80054f0 <_printf_common>
 8005724:	3001      	adds	r0, #1
 8005726:	d14a      	bne.n	80057be <_printf_i+0x1f2>
 8005728:	f04f 30ff 	mov.w	r0, #4294967295
 800572c:	b004      	add	sp, #16
 800572e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f043 0320 	orr.w	r3, r3, #32
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	4833      	ldr	r0, [pc, #204]	@ (8005808 <_printf_i+0x23c>)
 800573c:	2778      	movs	r7, #120	@ 0x78
 800573e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	6831      	ldr	r1, [r6, #0]
 8005746:	061f      	lsls	r7, r3, #24
 8005748:	f851 5b04 	ldr.w	r5, [r1], #4
 800574c:	d402      	bmi.n	8005754 <_printf_i+0x188>
 800574e:	065f      	lsls	r7, r3, #25
 8005750:	bf48      	it	mi
 8005752:	b2ad      	uxthmi	r5, r5
 8005754:	6031      	str	r1, [r6, #0]
 8005756:	07d9      	lsls	r1, r3, #31
 8005758:	bf44      	itt	mi
 800575a:	f043 0320 	orrmi.w	r3, r3, #32
 800575e:	6023      	strmi	r3, [r4, #0]
 8005760:	b11d      	cbz	r5, 800576a <_printf_i+0x19e>
 8005762:	2310      	movs	r3, #16
 8005764:	e7ac      	b.n	80056c0 <_printf_i+0xf4>
 8005766:	4827      	ldr	r0, [pc, #156]	@ (8005804 <_printf_i+0x238>)
 8005768:	e7e9      	b.n	800573e <_printf_i+0x172>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	f023 0320 	bic.w	r3, r3, #32
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	e7f6      	b.n	8005762 <_printf_i+0x196>
 8005774:	4616      	mov	r6, r2
 8005776:	e7bd      	b.n	80056f4 <_printf_i+0x128>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	6825      	ldr	r5, [r4, #0]
 800577c:	6961      	ldr	r1, [r4, #20]
 800577e:	1d18      	adds	r0, r3, #4
 8005780:	6030      	str	r0, [r6, #0]
 8005782:	062e      	lsls	r6, r5, #24
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	d501      	bpl.n	800578c <_printf_i+0x1c0>
 8005788:	6019      	str	r1, [r3, #0]
 800578a:	e002      	b.n	8005792 <_printf_i+0x1c6>
 800578c:	0668      	lsls	r0, r5, #25
 800578e:	d5fb      	bpl.n	8005788 <_printf_i+0x1bc>
 8005790:	8019      	strh	r1, [r3, #0]
 8005792:	2300      	movs	r3, #0
 8005794:	6123      	str	r3, [r4, #16]
 8005796:	4616      	mov	r6, r2
 8005798:	e7bc      	b.n	8005714 <_printf_i+0x148>
 800579a:	6833      	ldr	r3, [r6, #0]
 800579c:	1d1a      	adds	r2, r3, #4
 800579e:	6032      	str	r2, [r6, #0]
 80057a0:	681e      	ldr	r6, [r3, #0]
 80057a2:	6862      	ldr	r2, [r4, #4]
 80057a4:	2100      	movs	r1, #0
 80057a6:	4630      	mov	r0, r6
 80057a8:	f7fa fd42 	bl	8000230 <memchr>
 80057ac:	b108      	cbz	r0, 80057b2 <_printf_i+0x1e6>
 80057ae:	1b80      	subs	r0, r0, r6
 80057b0:	6060      	str	r0, [r4, #4]
 80057b2:	6863      	ldr	r3, [r4, #4]
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	2300      	movs	r3, #0
 80057b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057bc:	e7aa      	b.n	8005714 <_printf_i+0x148>
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	4632      	mov	r2, r6
 80057c2:	4649      	mov	r1, r9
 80057c4:	4640      	mov	r0, r8
 80057c6:	47d0      	blx	sl
 80057c8:	3001      	adds	r0, #1
 80057ca:	d0ad      	beq.n	8005728 <_printf_i+0x15c>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	079b      	lsls	r3, r3, #30
 80057d0:	d413      	bmi.n	80057fa <_printf_i+0x22e>
 80057d2:	68e0      	ldr	r0, [r4, #12]
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	4298      	cmp	r0, r3
 80057d8:	bfb8      	it	lt
 80057da:	4618      	movlt	r0, r3
 80057dc:	e7a6      	b.n	800572c <_printf_i+0x160>
 80057de:	2301      	movs	r3, #1
 80057e0:	4632      	mov	r2, r6
 80057e2:	4649      	mov	r1, r9
 80057e4:	4640      	mov	r0, r8
 80057e6:	47d0      	blx	sl
 80057e8:	3001      	adds	r0, #1
 80057ea:	d09d      	beq.n	8005728 <_printf_i+0x15c>
 80057ec:	3501      	adds	r5, #1
 80057ee:	68e3      	ldr	r3, [r4, #12]
 80057f0:	9903      	ldr	r1, [sp, #12]
 80057f2:	1a5b      	subs	r3, r3, r1
 80057f4:	42ab      	cmp	r3, r5
 80057f6:	dcf2      	bgt.n	80057de <_printf_i+0x212>
 80057f8:	e7eb      	b.n	80057d2 <_printf_i+0x206>
 80057fa:	2500      	movs	r5, #0
 80057fc:	f104 0619 	add.w	r6, r4, #25
 8005800:	e7f5      	b.n	80057ee <_printf_i+0x222>
 8005802:	bf00      	nop
 8005804:	0800816d 	.word	0x0800816d
 8005808:	0800817e 	.word	0x0800817e

0800580c <memmove>:
 800580c:	4288      	cmp	r0, r1
 800580e:	b510      	push	{r4, lr}
 8005810:	eb01 0402 	add.w	r4, r1, r2
 8005814:	d902      	bls.n	800581c <memmove+0x10>
 8005816:	4284      	cmp	r4, r0
 8005818:	4623      	mov	r3, r4
 800581a:	d807      	bhi.n	800582c <memmove+0x20>
 800581c:	1e43      	subs	r3, r0, #1
 800581e:	42a1      	cmp	r1, r4
 8005820:	d008      	beq.n	8005834 <memmove+0x28>
 8005822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800582a:	e7f8      	b.n	800581e <memmove+0x12>
 800582c:	4402      	add	r2, r0
 800582e:	4601      	mov	r1, r0
 8005830:	428a      	cmp	r2, r1
 8005832:	d100      	bne.n	8005836 <memmove+0x2a>
 8005834:	bd10      	pop	{r4, pc}
 8005836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800583a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800583e:	e7f7      	b.n	8005830 <memmove+0x24>

08005840 <memcpy>:
 8005840:	440a      	add	r2, r1
 8005842:	4291      	cmp	r1, r2
 8005844:	f100 33ff 	add.w	r3, r0, #4294967295
 8005848:	d100      	bne.n	800584c <memcpy+0xc>
 800584a:	4770      	bx	lr
 800584c:	b510      	push	{r4, lr}
 800584e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005856:	4291      	cmp	r1, r2
 8005858:	d1f9      	bne.n	800584e <memcpy+0xe>
 800585a:	bd10      	pop	{r4, pc}

0800585c <_realloc_r>:
 800585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	4680      	mov	r8, r0
 8005862:	4615      	mov	r5, r2
 8005864:	460c      	mov	r4, r1
 8005866:	b921      	cbnz	r1, 8005872 <_realloc_r+0x16>
 8005868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586c:	4611      	mov	r1, r2
 800586e:	f7ff bbad 	b.w	8004fcc <_malloc_r>
 8005872:	b92a      	cbnz	r2, 8005880 <_realloc_r+0x24>
 8005874:	f7ff fc9a 	bl	80051ac <_free_r>
 8005878:	2400      	movs	r4, #0
 800587a:	4620      	mov	r0, r4
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	f000 f81a 	bl	80058b8 <_malloc_usable_size_r>
 8005884:	4285      	cmp	r5, r0
 8005886:	4606      	mov	r6, r0
 8005888:	d802      	bhi.n	8005890 <_realloc_r+0x34>
 800588a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800588e:	d8f4      	bhi.n	800587a <_realloc_r+0x1e>
 8005890:	4629      	mov	r1, r5
 8005892:	4640      	mov	r0, r8
 8005894:	f7ff fb9a 	bl	8004fcc <_malloc_r>
 8005898:	4607      	mov	r7, r0
 800589a:	2800      	cmp	r0, #0
 800589c:	d0ec      	beq.n	8005878 <_realloc_r+0x1c>
 800589e:	42b5      	cmp	r5, r6
 80058a0:	462a      	mov	r2, r5
 80058a2:	4621      	mov	r1, r4
 80058a4:	bf28      	it	cs
 80058a6:	4632      	movcs	r2, r6
 80058a8:	f7ff ffca 	bl	8005840 <memcpy>
 80058ac:	4621      	mov	r1, r4
 80058ae:	4640      	mov	r0, r8
 80058b0:	f7ff fc7c 	bl	80051ac <_free_r>
 80058b4:	463c      	mov	r4, r7
 80058b6:	e7e0      	b.n	800587a <_realloc_r+0x1e>

080058b8 <_malloc_usable_size_r>:
 80058b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058bc:	1f18      	subs	r0, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bfbc      	itt	lt
 80058c2:	580b      	ldrlt	r3, [r1, r0]
 80058c4:	18c0      	addlt	r0, r0, r3
 80058c6:	4770      	bx	lr

080058c8 <_init>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr

080058d4 <_fini>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr
