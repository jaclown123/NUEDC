
0703_lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a04  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c88  08008be4  08008be4  00009be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b86c  0800b86c  0000d0a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b86c  0800b86c  0000c86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b874  0800b874  0000d0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b874  0800b874  0000c874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b87c  0800b87c  0000c87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800b884  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200000a0  0800b924  0000d0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  0800b924  0000d524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026339  00000000  00000000  0000d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ef  00000000  00000000  00033409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00037af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002338  00000000  00000000  00039340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c536  00000000  00000000  0003b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb36  00000000  00000000  00067bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001053cf  00000000  00000000  000866e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018bab3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d9c  00000000  00000000  0018baf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00192894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000d36c  00000000  00000000  001928e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008bcc 	.word	0x08008bcc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	08008bcc 	.word	0x08008bcc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_ldivmod>:
 8000b0c:	b97b      	cbnz	r3, 8000b2e <__aeabi_ldivmod+0x22>
 8000b0e:	b972      	cbnz	r2, 8000b2e <__aeabi_ldivmod+0x22>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bfbe      	ittt	lt
 8000b14:	2000      	movlt	r0, #0
 8000b16:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b1a:	e006      	blt.n	8000b2a <__aeabi_ldivmod+0x1e>
 8000b1c:	bf08      	it	eq
 8000b1e:	2800      	cmpeq	r0, #0
 8000b20:	bf1c      	itt	ne
 8000b22:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b26:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2a:	f000 b99d 	b.w	8000e68 <__aeabi_idiv0>
 8000b2e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b32:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b36:	2900      	cmp	r1, #0
 8000b38:	db09      	blt.n	8000b4e <__aeabi_ldivmod+0x42>
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db1a      	blt.n	8000b74 <__aeabi_ldivmod+0x68>
 8000b3e:	f000 f835 	bl	8000bac <__udivmoddi4>
 8000b42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4a:	b004      	add	sp, #16
 8000b4c:	4770      	bx	lr
 8000b4e:	4240      	negs	r0, r0
 8000b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db1b      	blt.n	8000b90 <__aeabi_ldivmod+0x84>
 8000b58:	f000 f828 	bl	8000bac <__udivmoddi4>
 8000b5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b64:	b004      	add	sp, #16
 8000b66:	4240      	negs	r0, r0
 8000b68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6c:	4252      	negs	r2, r2
 8000b6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b72:	4770      	bx	lr
 8000b74:	4252      	negs	r2, r2
 8000b76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b7a:	f000 f817 	bl	8000bac <__udivmoddi4>
 8000b7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b86:	b004      	add	sp, #16
 8000b88:	4240      	negs	r0, r0
 8000b8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8e:	4770      	bx	lr
 8000b90:	4252      	negs	r2, r2
 8000b92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b96:	f000 f809 	bl	8000bac <__udivmoddi4>
 8000b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <_ZN12Adafruit_GFX9setCursorEss>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	803b      	strh	r3, [r7, #0]
    cursor_x = x;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	821a      	strh	r2, [r3, #16]
    cursor_y = y;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	883a      	ldrh	r2, [r7, #0]
 8000e86:	825a      	strh	r2, [r3, #18]
  }
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_ZN12Adafruit_GFX12setTextColorEtt>:
    @brief   Set text font color with custom background color
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	803b      	strh	r3, [r7, #0]
    textcolor = c;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	829a      	strh	r2, [r3, #20]
    textbgcolor = bg;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	883a      	ldrh	r2, [r7, #0]
 8000eae:	82da      	strh	r2, [r3, #22]
  }
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_ZN15Adafruit_SPITFTD1Ev>:

  Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback);

  // DESTRUCTOR ----------------------------------------------------------

  ~Adafruit_SPITFT(){};
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <_ZN15Adafruit_SPITFTD1Ev+0x1c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	0800b330 	.word	0x0800b330

08000edc <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
//#include "Fonts/FreeSerif12pt7b.h"

using SpiCmd = Adafruit_SPITFT::SpiCmd;

void lcd_callback(SpiCmd cmd, uint8_t* pdata, size_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  auto spi = hspi1.Instance;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x80>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	617b      	str	r3, [r7, #20]
  switch (cmd)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d82e      	bhi.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
 8000ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8000efc <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x20>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08000f51 	.word	0x08000f51
 8000f00:	08000f51 	.word	0x08000f51
 8000f04:	08000f51 	.word	0x08000f51
 8000f08:	08000f51 	.word	0x08000f51
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f2b 	.word	0x08000f2b
 8000f14:	08000f39 	.word	0x08000f39
 8000f18:	08000f49 	.word	0x08000f49

  case SpiCmd::cs_high:
    break;

  case SpiCmd::dc_low:
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f22:	480f      	ldr	r0, [pc, #60]	@ (8000f60 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x84>)
 8000f24:	f003 f926 	bl	8004174 <HAL_GPIO_WritePin>
    break;
 8000f28:	e013      	b.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>

  case SpiCmd::dc_high:
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f30:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x84>)
 8000f32:	f003 f91f 	bl	8004174 <HAL_GPIO_WritePin>
    break;
 8000f36:	e00c      	b.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>

  case SpiCmd::transmit:
    HAL_SPI_Transmit(&hspi1, pdata, size, size);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	4806      	ldr	r0, [pc, #24]	@ (8000f5c <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x80>)
 8000f42:	f004 f892 	bl	800506a <HAL_SPI_Transmit>
//    }
//    while (LL_SPI_IsActiveFlag_BSY(spi))
//      ;
//    LL_SPI_Disable(spi);

    break;
 8000f46:	e004      	b.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
//      ;
//    LL_SPI_Disable(spi);
//    break;

  case SpiCmd::delay:
    HAL_Delay(size);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f001 ffd7 	bl	8002efc <HAL_Delay>
    break;
 8000f4e:	e000      	b.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
    break;
 8000f50:	bf00      	nop
  }
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000244 	.word	0x20000244
 8000f60:	48000800 	.word	0x48000800

08000f64 <setup>:

Adafruit_ST7789 lcd(240, 320, lcd_callback);

void setup()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af02      	add	r7, sp, #8
  HAL_Delay(500);
 8000f6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f6e:	f001 ffc5 	bl	8002efc <HAL_Delay>
  lcd.init(240, 320);
 8000f72:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f76:	21f0      	movs	r1, #240	@ 0xf0
 8000f78:	4848      	ldr	r0, [pc, #288]	@ (800109c <setup+0x138>)
 8000f7a:	f006 fa67 	bl	800744c <_ZN15Adafruit_ST77894initEtt>
  lcd.setRotation(1);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4846      	ldr	r0, [pc, #280]	@ (800109c <setup+0x138>)
 8000f82:	f006 fa0d 	bl	80073a0 <_ZN15Adafruit_ST778911setRotationEh>
  lcd.fillScreen(ST77XX_BLACK);
 8000f86:	2100      	movs	r1, #0
 8000f88:	4844      	ldr	r0, [pc, #272]	@ (800109c <setup+0x138>)
 8000f8a:	f005 fb0f 	bl	80065ac <_ZN12Adafruit_GFX10fillScreenEt>
  lcd_show_picture(0, 0, 50, 75, gImage_elec);
 8000f8e:	4b44      	ldr	r3, [pc, #272]	@ (80010a0 <setup+0x13c>)
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	234b      	movs	r3, #75	@ 0x4b
 8000f94:	2232      	movs	r2, #50	@ 0x32
 8000f96:	2100      	movs	r1, #0
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 f893 	bl	80010c4 <lcd_show_picture>
  lcd.setCursor(115, 5);
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	2173      	movs	r1, #115	@ 0x73
 8000fa2:	483e      	ldr	r0, [pc, #248]	@ (800109c <setup+0x138>)
 8000fa4:	f7ff ff62 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000fae:	483b      	ldr	r0, [pc, #236]	@ (800109c <setup+0x138>)
 8000fb0:	f7ff ff70 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.setTextSize(2);
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4839      	ldr	r0, [pc, #228]	@ (800109c <setup+0x138>)
 8000fb8:	f005 fdf0 	bl	8006b9c <_ZN12Adafruit_GFX11setTextSizeEh>
  lcd.printf("0.BASIC\n");
 8000fbc:	4939      	ldr	r1, [pc, #228]	@ (80010a4 <setup+0x140>)
 8000fbe:	4837      	ldr	r0, [pc, #220]	@ (800109c <setup+0x138>)
 8000fc0:	f006 fb92 	bl	80076e8 <_ZN5Print6printfEPKcz>
  lcd_show_picture(101, 25, 12, 20, MenuCursor16x16);
 8000fc4:	4b38      	ldr	r3, [pc, #224]	@ (80010a8 <setup+0x144>)
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2314      	movs	r3, #20
 8000fca:	220c      	movs	r2, #12
 8000fcc:	2119      	movs	r1, #25
 8000fce:	2065      	movs	r0, #101	@ 0x65
 8000fd0:	f000 f878 	bl	80010c4 <lcd_show_picture>
  lcd.setCursor(115 , 25);
 8000fd4:	2219      	movs	r2, #25
 8000fd6:	2173      	movs	r1, #115	@ 0x73
 8000fd8:	4830      	ldr	r0, [pc, #192]	@ (800109c <setup+0x138>)
 8000fda:	f7ff ff47 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000fe4:	482d      	ldr	r0, [pc, #180]	@ (800109c <setup+0x138>)
 8000fe6:	f7ff ff55 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("1.AMPL\n");
 8000fea:	4930      	ldr	r1, [pc, #192]	@ (80010ac <setup+0x148>)
 8000fec:	482b      	ldr	r0, [pc, #172]	@ (800109c <setup+0x138>)
 8000fee:	f006 fb7b 	bl	80076e8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 45);
 8000ff2:	222d      	movs	r2, #45	@ 0x2d
 8000ff4:	2173      	movs	r1, #115	@ 0x73
 8000ff6:	4829      	ldr	r0, [pc, #164]	@ (800109c <setup+0x138>)
 8000ff8:	f7ff ff38 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8001002:	4826      	ldr	r0, [pc, #152]	@ (800109c <setup+0x138>)
 8001004:	f7ff ff46 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("2.MODULATION\n");
 8001008:	4929      	ldr	r1, [pc, #164]	@ (80010b0 <setup+0x14c>)
 800100a:	4824      	ldr	r0, [pc, #144]	@ (800109c <setup+0x138>)
 800100c:	f006 fb6c 	bl	80076e8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 65);
 8001010:	2241      	movs	r2, #65	@ 0x41
 8001012:	2173      	movs	r1, #115	@ 0x73
 8001014:	4821      	ldr	r0, [pc, #132]	@ (800109c <setup+0x138>)
 8001016:	f7ff ff29 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 800101a:	2200      	movs	r2, #0
 800101c:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8001020:	481e      	ldr	r0, [pc, #120]	@ (800109c <setup+0x138>)
 8001022:	f7ff ff37 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("3.DELAY\n");
 8001026:	4923      	ldr	r1, [pc, #140]	@ (80010b4 <setup+0x150>)
 8001028:	481c      	ldr	r0, [pc, #112]	@ (800109c <setup+0x138>)
 800102a:	f006 fb5d 	bl	80076e8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 85);
 800102e:	2255      	movs	r2, #85	@ 0x55
 8001030:	2173      	movs	r1, #115	@ 0x73
 8001032:	481a      	ldr	r0, [pc, #104]	@ (800109c <setup+0x138>)
 8001034:	f7ff ff1a 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8001038:	2200      	movs	r2, #0
 800103a:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800103e:	4817      	ldr	r0, [pc, #92]	@ (800109c <setup+0x138>)
 8001040:	f7ff ff28 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("4.ATTENUATION\n");
 8001044:	491c      	ldr	r1, [pc, #112]	@ (80010b8 <setup+0x154>)
 8001046:	4815      	ldr	r0, [pc, #84]	@ (800109c <setup+0x138>)
 8001048:	f006 fb4e 	bl	80076e8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 105);
 800104c:	2269      	movs	r2, #105	@ 0x69
 800104e:	2173      	movs	r1, #115	@ 0x73
 8001050:	4812      	ldr	r0, [pc, #72]	@ (800109c <setup+0x138>)
 8001052:	f7ff ff0b 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8001056:	2200      	movs	r2, #0
 8001058:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800105c:	480f      	ldr	r0, [pc, #60]	@ (800109c <setup+0x138>)
 800105e:	f7ff ff19 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("5.FREQUENCY\n");
 8001062:	4916      	ldr	r1, [pc, #88]	@ (80010bc <setup+0x158>)
 8001064:	480d      	ldr	r0, [pc, #52]	@ (800109c <setup+0x138>)
 8001066:	f006 fb3f 	bl	80076e8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 125);
 800106a:	227d      	movs	r2, #125	@ 0x7d
 800106c:	2173      	movs	r1, #115	@ 0x73
 800106e:	480b      	ldr	r0, [pc, #44]	@ (800109c <setup+0x138>)
 8001070:	f7ff fefc 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8001074:	2200      	movs	r2, #0
 8001076:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800107a:	4808      	ldr	r0, [pc, #32]	@ (800109c <setup+0x138>)
 800107c:	f7ff ff0a 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("6.INIT PHASE\n");
 8001080:	490f      	ldr	r1, [pc, #60]	@ (80010c0 <setup+0x15c>)
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <setup+0x138>)
 8001084:	f006 fb30 	bl	80076e8 <_ZN5Print6printfEPKcz>

  lcd.setTextColor(ST77XX_RED, ST77XX_BLACK);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800108e:	4803      	ldr	r0, [pc, #12]	@ (800109c <setup+0x138>)
 8001090:	f7ff ff00 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
//    lcd.drawFastHLine(i, 320-1-i, 240-2*i, ST77XX_YELLOW);
//    lcd.drawFastVLine(i, 80+i, 240-2*i, ST77XX_GREEN);
//    lcd.drawFastVLine(240-1-i, 80+i, 240-2*i, ST77XX_BLUE);
//    HAL_Delay(100);
//  }
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000bc 	.word	0x200000bc
 80010a0:	08008cc4 	.word	0x08008cc4
 80010a4:	08008be4 	.word	0x08008be4
 80010a8:	0800aa10 	.word	0x0800aa10
 80010ac:	08008bf0 	.word	0x08008bf0
 80010b0:	08008bf8 	.word	0x08008bf8
 80010b4:	08008c08 	.word	0x08008c08
 80010b8:	08008c14 	.word	0x08008c14
 80010bc:	08008c24 	.word	0x08008c24
 80010c0:	08008c34 	.word	0x08008c34

080010c4 <lcd_show_picture>:

void lcd_show_picture(uint16_t x, uint16_t y , uint16_t col , uint16_t row , const unsigned char * p)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4604      	mov	r4, r0
 80010cc:	4608      	mov	r0, r1
 80010ce:	4611      	mov	r1, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	4623      	mov	r3, r4
 80010d4:	80fb      	strh	r3, [r7, #6]
 80010d6:	4603      	mov	r3, r0
 80010d8:	80bb      	strh	r3, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	807b      	strh	r3, [r7, #2]
 80010de:	4613      	mov	r3, r2
 80010e0:	803b      	strh	r3, [r7, #0]
	uint16_t * data = (uint16_t *) p;
 80010e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e4:	617b      	str	r3, [r7, #20]
	for (int i = y ; i < row + y ; ++i)
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	e01a      	b.n	8001122 <lcd_show_picture+0x5e>
	{
		for ( int j = x ; j < col + x ; ++j)
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e00e      	b.n	8001110 <lcd_show_picture+0x4c>
		{
			lcd.drawPixel(j, i, *data++);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	b219      	sxth	r1, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	b218      	sxth	r0, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	1c9a      	adds	r2, r3, #2
 80010fe:	617a      	str	r2, [r7, #20]
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	4602      	mov	r2, r0
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <lcd_show_picture+0x74>)
 8001106:	f005 fe63 	bl	8006dd0 <_ZN15Adafruit_SPITFT9drawPixelEsst>
		for ( int j = x ; j < col + x ; ++j)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	887a      	ldrh	r2, [r7, #2]
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	4413      	add	r3, r2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	dbea      	blt.n	80010f2 <lcd_show_picture+0x2e>
	for (int i = y ; i < row + y ; ++i)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	3301      	adds	r3, #1
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	883a      	ldrh	r2, [r7, #0]
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	429a      	cmp	r2, r3
 800112c:	dbde      	blt.n	80010ec <lcd_show_picture+0x28>
		}
	}
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}
 8001138:	200000bc 	.word	0x200000bc

0800113c <lcd_show_num>:
void lcd_show_num(int n)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
 8001142:	6078      	str	r0, [r7, #4]
	lcd.fillRect(150, 165, 230, 20, BLACK);
 8001144:	2300      	movs	r3, #0
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	2314      	movs	r3, #20
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	23e6      	movs	r3, #230	@ 0xe6
 800114e:	22a5      	movs	r2, #165	@ 0xa5
 8001150:	2196      	movs	r1, #150	@ 0x96
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <lcd_show_num+0x4c>)
 8001154:	f005 ffdc 	bl	8007110 <_ZN15Adafruit_SPITFT8fillRectEsssst>
	lcd.setCursor(150, 165);
 8001158:	22a5      	movs	r2, #165	@ 0xa5
 800115a:	2196      	movs	r1, #150	@ 0x96
 800115c:	480a      	ldr	r0, [pc, #40]	@ (8001188 <lcd_show_num+0x4c>)
 800115e:	f7ff fe85 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
	lcd.printf("   ");
 8001162:	490a      	ldr	r1, [pc, #40]	@ (800118c <lcd_show_num+0x50>)
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <lcd_show_num+0x4c>)
 8001166:	f006 fabf 	bl	80076e8 <_ZN5Print6printfEPKcz>
	lcd.setCursor(150, 165);
 800116a:	22a5      	movs	r2, #165	@ 0xa5
 800116c:	2196      	movs	r1, #150	@ 0x96
 800116e:	4806      	ldr	r0, [pc, #24]	@ (8001188 <lcd_show_num+0x4c>)
 8001170:	f7ff fe7c 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
	lcd.print(n);
 8001174:	220a      	movs	r2, #10
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <lcd_show_num+0x4c>)
 800117a:	f006 fb2b 	bl	80077d4 <_ZN5Print5printEii>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000bc 	.word	0x200000bc
 800118c:	08008c44 	.word	0x08008c44

08001190 <lcd_show_str>:
void lcd_show_str(int16_t x, int16_t y,const char * lmf)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	603a      	str	r2, [r7, #0]
 800119a:	80fb      	strh	r3, [r7, #6]
 800119c:	460b      	mov	r3, r1
 800119e:	80bb      	strh	r3, [r7, #4]
	lcd.setCursor(x, y);
 80011a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a8:	4619      	mov	r1, r3
 80011aa:	480b      	ldr	r0, [pc, #44]	@ (80011d8 <lcd_show_str+0x48>)
 80011ac:	f7ff fe5e 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
	lcd.fillRect(x, y, 230, 20, BLACK);
 80011b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80011b8:	2300      	movs	r3, #0
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	2314      	movs	r3, #20
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	23e6      	movs	r3, #230	@ 0xe6
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <lcd_show_str+0x48>)
 80011c4:	f005 ffa4 	bl	8007110 <_ZN15Adafruit_SPITFT8fillRectEsssst>
	lcd.printf(lmf);
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <lcd_show_str+0x48>)
 80011cc:	f006 fa8c 	bl	80076e8 <_ZN5Print6printfEPKcz>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200000bc 	.word	0x200000bc

080011dc <lcd_show_black>:
void lcd_show_black(int16_t x, int16_t y , int16_t w, int16_t h)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b085      	sub	sp, #20
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	4604      	mov	r4, r0
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4623      	mov	r3, r4
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	4603      	mov	r3, r0
 80011f0:	80bb      	strh	r3, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]
 80011f6:	4613      	mov	r3, r2
 80011f8:	803b      	strh	r3, [r7, #0]
	lcd.fillRect(x, y, w, h, BLACK);
 80011fa:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80011fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001202:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001206:	2300      	movs	r3, #0
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	4603      	mov	r3, r0
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <lcd_show_black+0x44>)
 8001214:	f005 ff7c 	bl	8007110 <_ZN15Adafruit_SPITFT8fillRectEsssst>
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	200000bc 	.word	0x200000bc

08001224 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA 0xF81F
#define ST77XX_YELLOW 0xFFE0
#define ST77XX_ORANGE 0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <_ZN15Adafruit_ST77xxD1Ev+0x20>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe41 	bl	8000ebc <_ZN15Adafruit_SPITFTD1Ev>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	0800b410 	.word	0x0800b410

08001248 <_ZN15Adafruit_ST7789D1Ev>:
#define _ADAFRUIT_ST7789H_

#include "Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <_ZN15Adafruit_ST7789D1Ev+0x20>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffe3 	bl	8001224 <_ZN15Adafruit_ST77xxD1Ev>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800b390 	.word	0x0800b390

0800126c <_Z41__static_initialization_and_destruction_0ii>:
void loop()
{
  ;
}
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d10b      	bne.n	8001294 <_Z41__static_initialization_and_destruction_0ii+0x28>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001282:	4293      	cmp	r3, r2
 8001284:	d106      	bne.n	8001294 <_Z41__static_initialization_and_destruction_0ii+0x28>
Adafruit_ST7789 lcd(240, 320, lcd_callback);
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001288:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800128c:	21f0      	movs	r1, #240	@ 0xf0
 800128e:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001290:	f006 f8d0 	bl	8007434 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d107      	bne.n	80012aa <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d102      	bne.n	80012aa <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80012a4:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80012a6:	f7ff ffcf 	bl	8001248 <_ZN15Adafruit_ST7789D1Ev>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	08000edd 	.word	0x08000edd
 80012b8:	200000bc 	.word	0x200000bc

080012bc <_GLOBAL__sub_I__Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
 80012c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff ffd1 	bl	800126c <_Z41__static_initialization_and_destruction_0ii>
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_GLOBAL__sub_D__Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff ffc9 	bl	800126c <_Z41__static_initialization_and_destruction_0ii>
 80012da:	bd80      	pop	{r7, pc}

080012dc <AD9959_WriteData>:
158,
126,
100 };

void AD9959_WriteData(uint8_t RegisterAddress, uint8_t NumberofRegisters, uint8_t *RegisterData)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	603a      	str	r2, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	460b      	mov	r3, r1
 80012ea:	71bb      	strb	r3, [r7, #6]
	uint8_t	ControlValue = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
	uint8_t	ValueToWrite = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73bb      	strb	r3, [r7, #14]
	uint8_t	RegisterIndex = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	737b      	strb	r3, [r7, #13]
	uint8_t	i = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	733b      	strb	r3, [r7, #12]
	ControlValue = RegisterAddress;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	73fb      	strb	r3, [r7, #15]
	SCLK_LOW;
 8001300:	2200      	movs	r2, #0
 8001302:	2101      	movs	r1, #1
 8001304:	4839      	ldr	r0, [pc, #228]	@ (80013ec <AD9959_WriteData+0x110>)
 8001306:	f002 ff35 	bl	8004174 <HAL_GPIO_WritePin>
	CS_LOW;
 800130a:	2200      	movs	r2, #0
 800130c:	2102      	movs	r1, #2
 800130e:	4837      	ldr	r0, [pc, #220]	@ (80013ec <AD9959_WriteData+0x110>)
 8001310:	f002 ff30 	bl	8004174 <HAL_GPIO_WritePin>
	for(i=0; i<8; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	733b      	strb	r3, [r7, #12]
 8001318:	e01e      	b.n	8001358 <AD9959_WriteData+0x7c>
	{
		SCLK_LOW;
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	4833      	ldr	r0, [pc, #204]	@ (80013ec <AD9959_WriteData+0x110>)
 8001320:	f002 ff28 	bl	8004174 <HAL_GPIO_WritePin>
		if(0x80 == (ControlValue & 0x80))
 8001324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001328:	2b00      	cmp	r3, #0
 800132a:	da05      	bge.n	8001338 <AD9959_WriteData+0x5c>
			SDIO0_HIGH;
 800132c:	2201      	movs	r2, #1
 800132e:	2104      	movs	r1, #4
 8001330:	482e      	ldr	r0, [pc, #184]	@ (80013ec <AD9959_WriteData+0x110>)
 8001332:	f002 ff1f 	bl	8004174 <HAL_GPIO_WritePin>
 8001336:	e004      	b.n	8001342 <AD9959_WriteData+0x66>
		else
			SDIO0_LOW;
 8001338:	2200      	movs	r2, #0
 800133a:	2104      	movs	r1, #4
 800133c:	482b      	ldr	r0, [pc, #172]	@ (80013ec <AD9959_WriteData+0x110>)
 800133e:	f002 ff19 	bl	8004174 <HAL_GPIO_WritePin>
		SCLK_HIGH;
 8001342:	2201      	movs	r2, #1
 8001344:	2101      	movs	r1, #1
 8001346:	4829      	ldr	r0, [pc, #164]	@ (80013ec <AD9959_WriteData+0x110>)
 8001348:	f002 ff14 	bl	8004174 <HAL_GPIO_WritePin>
		ControlValue <<= 1;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<8; i++)
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	3301      	adds	r3, #1
 8001356:	733b      	strb	r3, [r7, #12]
 8001358:	7b3b      	ldrb	r3, [r7, #12]
 800135a:	2b07      	cmp	r3, #7
 800135c:	d9dd      	bls.n	800131a <AD9959_WriteData+0x3e>
	}
	SCLK_LOW;
 800135e:	2200      	movs	r2, #0
 8001360:	2101      	movs	r1, #1
 8001362:	4822      	ldr	r0, [pc, #136]	@ (80013ec <AD9959_WriteData+0x110>)
 8001364:	f002 ff06 	bl	8004174 <HAL_GPIO_WritePin>
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 8001368:	2300      	movs	r3, #0
 800136a:	737b      	strb	r3, [r7, #13]
 800136c:	e031      	b.n	80013d2 <AD9959_WriteData+0xf6>
	{
		ValueToWrite = RegisterData[RegisterIndex];
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	733b      	strb	r3, [r7, #12]
 800137c:	e01e      	b.n	80013bc <AD9959_WriteData+0xe0>
		{
			SCLK_LOW;
 800137e:	2200      	movs	r2, #0
 8001380:	2101      	movs	r1, #1
 8001382:	481a      	ldr	r0, [pc, #104]	@ (80013ec <AD9959_WriteData+0x110>)
 8001384:	f002 fef6 	bl	8004174 <HAL_GPIO_WritePin>
			if(0x80 == (ValueToWrite & 0x80))
 8001388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800138c:	2b00      	cmp	r3, #0
 800138e:	da05      	bge.n	800139c <AD9959_WriteData+0xc0>
			SDIO0_HIGH;
 8001390:	2201      	movs	r2, #1
 8001392:	2104      	movs	r1, #4
 8001394:	4815      	ldr	r0, [pc, #84]	@ (80013ec <AD9959_WriteData+0x110>)
 8001396:	f002 feed 	bl	8004174 <HAL_GPIO_WritePin>
 800139a:	e004      	b.n	80013a6 <AD9959_WriteData+0xca>
			else
			SDIO0_LOW;
 800139c:	2200      	movs	r2, #0
 800139e:	2104      	movs	r1, #4
 80013a0:	4812      	ldr	r0, [pc, #72]	@ (80013ec <AD9959_WriteData+0x110>)
 80013a2:	f002 fee7 	bl	8004174 <HAL_GPIO_WritePin>
			SCLK_HIGH;
 80013a6:	2201      	movs	r2, #1
 80013a8:	2101      	movs	r1, #1
 80013aa:	4810      	ldr	r0, [pc, #64]	@ (80013ec <AD9959_WriteData+0x110>)
 80013ac:	f002 fee2 	bl	8004174 <HAL_GPIO_WritePin>
			ValueToWrite <<= 1;
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 80013b6:	7b3b      	ldrb	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	733b      	strb	r3, [r7, #12]
 80013bc:	7b3b      	ldrb	r3, [r7, #12]
 80013be:	2b07      	cmp	r3, #7
 80013c0:	d9dd      	bls.n	800137e <AD9959_WriteData+0xa2>
		}
		SCLK_LOW;
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	4809      	ldr	r0, [pc, #36]	@ (80013ec <AD9959_WriteData+0x110>)
 80013c8:	f002 fed4 	bl	8004174 <HAL_GPIO_WritePin>
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 80013cc:	7b7b      	ldrb	r3, [r7, #13]
 80013ce:	3301      	adds	r3, #1
 80013d0:	737b      	strb	r3, [r7, #13]
 80013d2:	7b7a      	ldrb	r2, [r7, #13]
 80013d4:	79bb      	ldrb	r3, [r7, #6]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3c9      	bcc.n	800136e <AD9959_WriteData+0x92>
	}
  CS_HIGH;
 80013da:	2201      	movs	r2, #1
 80013dc:	2102      	movs	r1, #2
 80013de:	4803      	ldr	r0, [pc, #12]	@ (80013ec <AD9959_WriteData+0x110>)
 80013e0:	f002 fec8 	bl	8004174 <HAL_GPIO_WritePin>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	48000800 	.word	0x48000800

080013f0 <Write_CFTW0>:
void Write_CFTW0(uint32_t fre)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	uint8_t CFTW0_DATA[4] ={0x00,0x00,0x00,0x00};
 80013f8:	2100      	movs	r1, #0
 80013fa:	60b9      	str	r1, [r7, #8]
	uint32_t Temp;
	Temp=(uint32_t)fre * 4294967296 / 500000000;
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	2000      	movs	r0, #0
 8001400:	460a      	mov	r2, r1
 8001402:	4603      	mov	r3, r0
 8001404:	f04f 0000 	mov.w	r0, #0
 8001408:	f04f 0100 	mov.w	r1, #0
 800140c:	0011      	movs	r1, r2
 800140e:	2000      	movs	r0, #0
 8001410:	a311      	add	r3, pc, #68	@ (adr r3, 8001458 <Write_CFTW0+0x68>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff fb79 	bl	8000b0c <__aeabi_ldivmod>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4613      	mov	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
	CFTW0_DATA[3]=(uint8_t)Temp;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	72fb      	strb	r3, [r7, #11]
	CFTW0_DATA[2]=(uint8_t)(Temp>>8);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b2db      	uxtb	r3, r3
 800142e:	72bb      	strb	r3, [r7, #10]
	CFTW0_DATA[1]=(uint8_t)(Temp>>16);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	0c1b      	lsrs	r3, r3, #16
 8001434:	b2db      	uxtb	r3, r3
 8001436:	727b      	strb	r3, [r7, #9]
	CFTW0_DATA[0]=(uint8_t)(Temp>>24);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	0e1b      	lsrs	r3, r3, #24
 800143c:	b2db      	uxtb	r3, r3
 800143e:	723b      	strb	r3, [r7, #8]
	AD9959_WriteData(0x04,4,CFTW0_DATA);//CTW0 address 0x04
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	461a      	mov	r2, r3
 8001446:	2104      	movs	r1, #4
 8001448:	2004      	movs	r0, #4
 800144a:	f7ff ff47 	bl	80012dc <AD9959_WriteData>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	1dcd6500 	.word	0x1dcd6500
 800145c:	00000000 	.word	0x00000000

08001460 <AD9959_Set_Freq>:
void AD9959_Set_Freq(uint8_t Channel,uint32_t Freq)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
	uint8_t CHANNEL[1] = {0x00};
 800146c:	2300      	movs	r3, #0
 800146e:	733b      	strb	r3, [r7, #12]
	CHANNEL[0]=Channel;
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	461a      	mov	r2, r3
 800147a:	2101      	movs	r1, #1
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ff2d 	bl	80012dc <AD9959_WriteData>
    Write_CFTW0(Freq);
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f7ff ffb4 	bl	80013f0 <Write_CFTW0>
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <Write_ACR>:

void Write_ACR(uint16_t Ampl)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
	uint32_t A_temp=0;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
	uint8_t ACR_DATA[3] = {0x00,0x00,0x00};//default Value = 0x--0000 Rest = 18.91/Iout
 800149e:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <Write_ACR+0x50>)
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	4611      	mov	r1, r2
 80014a8:	8019      	strh	r1, [r3, #0]
 80014aa:	3302      	adds	r3, #2
 80014ac:	0c12      	lsrs	r2, r2, #16
 80014ae:	701a      	strb	r2, [r3, #0]
    A_temp=Ampl|0x1000;
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	60fb      	str	r3, [r7, #12]
	ACR_DATA[1] = (uint8_t)(A_temp>>8); //高位数据
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	727b      	strb	r3, [r7, #9]
	ACR_DATA[2] = (uint8_t)A_temp;  //低位数据
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	72bb      	strb	r3, [r7, #10]
    AD9959_WriteData(0x06, 3, ACR_DATA); //ACR address 0x06.CHn设定幅度
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	461a      	mov	r2, r3
 80014ce:	2103      	movs	r1, #3
 80014d0:	2006      	movs	r0, #6
 80014d2:	f7ff ff03 	bl	80012dc <AD9959_WriteData>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	08008c48 	.word	0x08008c48

080014e4 <AD9959_Set_Ampl>:

void AD9959_Set_Ampl(uint8_t Channel, uint16_t Ampl)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	80bb      	strh	r3, [r7, #4]
	uint8_t CHANNEL[1] = {0x00};
 80014f4:	2300      	movs	r3, #0
 80014f6:	733b      	strb	r3, [r7, #12]
	CHANNEL[0]=Channel;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道�????
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	461a      	mov	r2, r3
 8001502:	2101      	movs	r1, #1
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fee9 	bl	80012dc <AD9959_WriteData>
	Write_ACR(Ampl);							//	CHn设定幅度
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ffbf 	bl	8001490 <Write_ACR>
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <Write_CPOW0>:
void Write_CPOW0(uint16_t Phase)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	80fb      	strh	r3, [r7, #6]
	uint8_t CPOW0_data[2] = {0x00,0x00};
 8001524:	2300      	movs	r3, #0
 8001526:	81bb      	strh	r3, [r7, #12]
	CPOW0_data[1]=(uint8_t)Phase;
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	737b      	strb	r3, [r7, #13]
	CPOW0_data[0]=(uint8_t)(Phase>>8);
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x05,2,CPOW0_data);//CPOW0 address 0x05.CHn设定相位
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	461a      	mov	r2, r3
 800153e:	2102      	movs	r1, #2
 8001540:	2005      	movs	r0, #5
 8001542:	f7ff fecb 	bl	80012dc <AD9959_WriteData>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <AD9959_Set_Phase>:

void AD9959_Set_Phase(uint8_t Channel,uint16_t Phase)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	460a      	mov	r2, r1
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	4613      	mov	r3, r2
 800155c:	80bb      	strh	r3, [r7, #4]
	uint8_t CHANNEL[1] = {0x00};
 800155e:	2300      	movs	r3, #0
 8001560:	733b      	strb	r3, [r7, #12]
	CHANNEL[0]=Channel;
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道�??
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	461a      	mov	r2, r3
 800156c:	2101      	movs	r1, #1
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff feb4 	bl	80012dc <AD9959_WriteData>
	Write_CPOW0(Phase);//CHn设定相位
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ffcf 	bl	800151a <Write_CPOW0>
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <AD9959_Init>:

void AD9959_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
  Intserve();  //IO口电平状态初始化
 800158a:	f000 f83b 	bl	8001604 <Intserve>
  IntReset();  //AD9959复位
 800158e:	f000 f81d 	bl	80015cc <IntReset>
	//初始化功能寄存器
  uint8_t FR1_DATA[3] = {0xD0,0x00,0x00};//VCO gain control[23]=1系统时钟高于255Mhz; PLL[22:18]=10100,20倍频,20*25M=500MHZ; Charge pump control = 75uA
 8001592:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <AD9959_Init+0x44>)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	4611      	mov	r1, r2
 800159a:	8019      	strh	r1, [r3, #0]
 800159c:	3302      	adds	r3, #2
 800159e:	0c12      	lsrs	r2, r2, #16
 80015a0:	701a      	strb	r2, [r3, #0]
  uint8_t FR2_DATA[2] = {0x00,0x00};	// 双方向扫描，即从起始值扫到结束�?�后，又从结束�?�扫到起始�??
 80015a2:	2300      	movs	r3, #0
 80015a4:	803b      	strh	r3, [r7, #0]
  AD9959_WriteData(0x01,3,FR1_DATA);//写功能寄存器1
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	461a      	mov	r2, r3
 80015aa:	2103      	movs	r1, #3
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff fe95 	bl	80012dc <AD9959_WriteData>
  AD9959_WriteData(0x02,2,FR2_DATA);
 80015b2:	463b      	mov	r3, r7
 80015b4:	461a      	mov	r2, r3
 80015b6:	2102      	movs	r1, #2
 80015b8:	2002      	movs	r0, #2
 80015ba:	f7ff fe8f 	bl	80012dc <AD9959_WriteData>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	08008c4c 	.word	0x08008c4c

080015cc <IntReset>:
void IntReset()
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 1<<1, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2102      	movs	r1, #2
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d8:	f002 fdcc 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015dc:	2001      	movs	r0, #1
 80015de:	f001 fc8d 	bl	8002efc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 1);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2102      	movs	r1, #2
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ea:	f002 fdc3 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f001 fc84 	bl	8002efc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2102      	movs	r1, #2
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fc:	f002 fdba 	bl	8004174 <HAL_GPIO_WritePin>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <Intserve>:
void Intserve(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2110      	movs	r1, #16
 800160c:	481f      	ldr	r0, [pc, #124]	@ (800168c <Intserve+0x88>)
 800160e:	f002 fdb1 	bl	8004174 <HAL_GPIO_WritePin>
    CS_HIGH;
 8001612:	2201      	movs	r2, #1
 8001614:	2102      	movs	r1, #2
 8001616:	481d      	ldr	r0, [pc, #116]	@ (800168c <Intserve+0x88>)
 8001618:	f002 fdac 	bl	8004174 <HAL_GPIO_WritePin>
    SCLK_LOW;
 800161c:	2200      	movs	r2, #0
 800161e:	2101      	movs	r1, #1
 8001620:	481a      	ldr	r0, [pc, #104]	@ (800168c <Intserve+0x88>)
 8001622:	f002 fda7 	bl	8004174 <HAL_GPIO_WritePin>
    UPDATE_LOW;
 8001626:	2200      	movs	r2, #0
 8001628:	2108      	movs	r1, #8
 800162a:	4818      	ldr	r0, [pc, #96]	@ (800168c <Intserve+0x88>)
 800162c:	f002 fda2 	bl	8004174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS0_GPIO_Port, PS0_Pin, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2120      	movs	r1, #32
 8001634:	4815      	ldr	r0, [pc, #84]	@ (800168c <Intserve+0x88>)
 8001636:	f002 fd9d 	bl	8004174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS1_GPIO_Port, PS1_Pin, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001644:	f002 fd96 	bl	8004174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS2_GPIO_Port, PS2_Pin, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800164e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001652:	f002 fd8f 	bl	8004174 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(PS3_GPIO_Port, PS3_Pin, 0);
    SDIO0_HIGH;
 8001656:	2201      	movs	r2, #1
 8001658:	2104      	movs	r1, #4
 800165a:	480c      	ldr	r0, [pc, #48]	@ (800168c <Intserve+0x88>)
 800165c:	f002 fd8a 	bl	8004174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO1_GPIO_Port, SDIO1_Pin, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001666:	4809      	ldr	r0, [pc, #36]	@ (800168c <Intserve+0x88>)
 8001668:	f002 fd84 	bl	8004174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO2_GPIO_Port, SDIO2_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001676:	f002 fd7d 	bl	8004174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO3_GPIO_Port, SDIO3_Pin, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001684:	f002 fd76 	bl	8004174 <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	48000800 	.word	0x48000800

08001690 <IO_Update>:
void IO_Update(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	UPDATE_LOW;
 8001694:	2200      	movs	r2, #0
 8001696:	2108      	movs	r1, #8
 8001698:	480a      	ldr	r0, [pc, #40]	@ (80016c4 <IO_Update+0x34>)
 800169a:	f002 fd6b 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f001 fc2c 	bl	8002efc <HAL_Delay>
	UPDATE_HIGH;
 80016a4:	2201      	movs	r2, #1
 80016a6:	2108      	movs	r1, #8
 80016a8:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <IO_Update+0x34>)
 80016aa:	f002 fd63 	bl	8004174 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80016ae:	2003      	movs	r0, #3
 80016b0:	f001 fc24 	bl	8002efc <HAL_Delay>
	UPDATE_LOW;
 80016b4:	2200      	movs	r2, #0
 80016b6:	2108      	movs	r1, #8
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <IO_Update+0x34>)
 80016ba:	f002 fd5b 	bl	8004174 <HAL_GPIO_WritePin>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	48000800 	.word	0x48000800

080016c8 <set_dac>:
#define offset 621
#define dac_length 4 //对应500mV，校准时可能�????要改
uint16_t scaled_sine_wave_table_Sd[dac_length];
uint16_t scaled_sine_wave_table_Sm[dac_length];
void set_dac(uint16_t modulation,int16_t phase)
{
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b090      	sub	sp, #64	@ 0x40
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	4603      	mov	r3, r0
 80016d0:	460a      	mov	r2, r1
 80016d2:	80fb      	strh	r3, [r7, #6]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80bb      	strh	r3, [r7, #4]
	HAL_TIM_Base_Stop(&htim15);
 80016d8:	488f      	ldr	r0, [pc, #572]	@ (8001918 <set_dac+0x250>)
 80016da:	f004 f867 	bl	80057ac <HAL_TIM_Base_Stop>
  HAL_DAC_Stop_DMA(&hdac3, DAC_CHANNEL_1);
 80016de:	2100      	movs	r1, #0
 80016e0:	488e      	ldr	r0, [pc, #568]	@ (800191c <set_dac+0x254>)
 80016e2:	f001 fe33 	bl	800334c <HAL_DAC_Stop_DMA>
  HAL_DAC_Stop_DMA(&hdac3, DAC_CHANNEL_2);
 80016e6:	2110      	movs	r1, #16
 80016e8:	488c      	ldr	r0, [pc, #560]	@ (800191c <set_dac+0x254>)
 80016ea:	f001 fe2f 	bl	800334c <HAL_DAC_Stop_DMA>

  uint16_t max_val;
  uint16_t min_val;
  phase -= 7;
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	3b07      	subs	r3, #7
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	80bb      	strh	r3, [r7, #4]
  if(phase < 0) phase += 360;
 80016f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	da04      	bge.n	8001708 <set_dac+0x40>
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001704:	b29b      	uxth	r3, r3
 8001706:	80bb      	strh	r3, [r7, #4]
  if(phase > 360) phase -= 360;
 8001708:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800170c:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001710:	dd04      	ble.n	800171c <set_dac+0x54>
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001718:	b29b      	uxth	r3, r3
 800171a:	80bb      	strh	r3, [r7, #4]
  max_val=(offset*modulation/100)+offset;
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	f240 226d 	movw	r2, #621	@ 0x26d
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	4a7e      	ldr	r2, [pc, #504]	@ (8001920 <set_dac+0x258>)
 8001728:	fb82 1203 	smull	r1, r2, r2, r3
 800172c:	1152      	asrs	r2, r2, #5
 800172e:	17db      	asrs	r3, r3, #31
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	b29b      	uxth	r3, r3
 8001734:	f203 236d 	addw	r3, r3, #621	@ 0x26d
 8001738:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  min_val=offset-(offset*modulation/100);
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	f240 226d 	movw	r2, #621	@ 0x26d
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	4a76      	ldr	r2, [pc, #472]	@ (8001920 <set_dac+0x258>)
 8001746:	fb82 1203 	smull	r1, r2, r2, r3
 800174a:	1152      	asrs	r2, r2, #5
 800174c:	17db      	asrs	r3, r3, #31
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	b29b      	uxth	r3, r3
 8001752:	f203 236d 	addw	r3, r3, #621	@ 0x26d
 8001756:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  float sine_wave_table[dac_length];
  float sine_wave_table_phase[dac_length];

  float step = 2 * M_PI / dac_length;
 8001758:	4b72      	ldr	r3, [pc, #456]	@ (8001924 <set_dac+0x25c>)
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (int i = 0; i < dac_length; i++) {
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001760:	e059      	b.n	8001816 <set_dac+0x14e>
    sine_wave_table[i] = sinf(i * step);
 8001762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800176c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	f006 f84e 	bl	8007818 <sinf>
 800177c:	eef0 7a40 	vmov.f32	s15, s0
 8001780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	3338      	adds	r3, #56	@ 0x38
 8001786:	443b      	add	r3, r7
 8001788:	3b20      	subs	r3, #32
 800178a:	edc3 7a00 	vstr	s15, [r3]
    sine_wave_table_phase[i] = sinf(i * step+ ((float)phase)* M_PI/180.0 );
 800178e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001798:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800179c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a0:	ee17 0a90 	vmov	r0, s15
 80017a4:	f7fe fef8 	bl	8000598 <__aeabi_f2d>
 80017a8:	4604      	mov	r4, r0
 80017aa:	460d      	mov	r5, r1
 80017ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b8:	ee17 0a90 	vmov	r0, s15
 80017bc:	f7fe feec 	bl	8000598 <__aeabi_f2d>
 80017c0:	a353      	add	r3, pc, #332	@ (adr r3, 8001910 <set_dac+0x248>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe ff3f 	bl	8000648 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b54      	ldr	r3, [pc, #336]	@ (8001928 <set_dac+0x260>)
 80017d8:	f7ff f860 	bl	800089c <__aeabi_ddiv>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe fd7a 	bl	80002dc <__adddf3>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f93c 	bl	8000a6c <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	ee00 3a10 	vmov	s0, r3
 80017fa:	f006 f80d 	bl	8007818 <sinf>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	3338      	adds	r3, #56	@ 0x38
 8001808:	443b      	add	r3, r7
 800180a:	3b30      	subs	r3, #48	@ 0x30
 800180c:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < dac_length; i++) {
 8001810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001812:	3301      	adds	r3, #1
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
 8001816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001818:	2b03      	cmp	r3, #3
 800181a:	dda2      	ble.n	8001762 <set_dac+0x9a>
  }
  for (int i = 0; i < dac_length; i++) {
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001820:	e052      	b.n	80018c8 <set_dac+0x200>
    scaled_sine_wave_table_Sd[i] = (uint16_t)((sine_wave_table[i] + 1) * (max_val - min_val) / 2 + min_val);
 8001822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	3338      	adds	r3, #56	@ 0x38
 8001828:	443b      	add	r3, r7
 800182a:	3b20      	subs	r3, #32
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001834:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001838:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800183a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800184e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001852:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001864:	ee17 3a90 	vmov	r3, s15
 8001868:	b299      	uxth	r1, r3
 800186a:	4a30      	ldr	r2, [pc, #192]	@ (800192c <set_dac+0x264>)
 800186c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800186e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    scaled_sine_wave_table_Sm[i] = (uint16_t)((sine_wave_table_phase[i] + 1) * (max_val - min_val) / 2 + min_val);
 8001872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	3338      	adds	r3, #56	@ 0x38
 8001878:	443b      	add	r3, r7
 800187a:	3b30      	subs	r3, #48	@ 0x30
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001888:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800188a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800189e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018a2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b4:	ee17 3a90 	vmov	r3, s15
 80018b8:	b299      	uxth	r1, r3
 80018ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001930 <set_dac+0x268>)
 80018bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < dac_length; i++) {
 80018c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c4:	3301      	adds	r3, #1
 80018c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80018c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	dda9      	ble.n	8001822 <set_dac+0x15a>
  }
  HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1,scaled_sine_wave_table_Sd, dac_length / 2, DAC_ALIGN_12B_R);
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2302      	movs	r3, #2
 80018d4:	4a15      	ldr	r2, [pc, #84]	@ (800192c <set_dac+0x264>)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4810      	ldr	r0, [pc, #64]	@ (800191c <set_dac+0x254>)
 80018da:	f001 fc63 	bl	80031a4 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_2,scaled_sine_wave_table_Sm, dac_length / 2, DAC_ALIGN_12B_R);
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2302      	movs	r3, #2
 80018e4:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <set_dac+0x268>)
 80018e6:	2110      	movs	r1, #16
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <set_dac+0x254>)
 80018ea:	f001 fc5b 	bl	80031a4 <HAL_DAC_Start_DMA>

  (&htim15)->Instance->ARR = (uint32_t)(19);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <set_dac+0x250>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2213      	movs	r2, #19
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_OPAMP_Start(&hopamp6);
 80018f6:	480f      	ldr	r0, [pc, #60]	@ (8001934 <set_dac+0x26c>)
 80018f8:	f002 fd24 	bl	8004344 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80018fc:	480e      	ldr	r0, [pc, #56]	@ (8001938 <set_dac+0x270>)
 80018fe:	f002 fd21 	bl	8004344 <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim15);
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <set_dac+0x250>)
 8001904:	f003 fee2 	bl	80056cc <HAL_TIM_Base_Start>
}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	@ 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bdb0      	pop	{r4, r5, r7, pc}
 8001910:	54442d18 	.word	0x54442d18
 8001914:	400921fb 	.word	0x400921fb
 8001918:	20000354 	.word	0x20000354
 800191c:	200000f8 	.word	0x200000f8
 8001920:	51eb851f 	.word	0x51eb851f
 8001924:	3fc90fdb 	.word	0x3fc90fdb
 8001928:	40668000 	.word	0x40668000
 800192c:	200003c4 	.word	0x200003c4
 8001930:	200003cc 	.word	0x200003cc
 8001934:	20000208 	.word	0x20000208
 8001938:	200001cc 	.word	0x200001cc

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	@ 0x30
 8001940:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001942:	f001 fa6a 	bl	8002e1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001946:	f000 fd6d 	bl	8002424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194a:	f000 ff57 	bl	80027fc <MX_GPIO_Init>
  MX_DMA_Init();
 800194e:	f000 ff2b 	bl	80027a8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001952:	f000 fe41 	bl	80025d8 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001956:	f000 fe7d 	bl	8002654 <MX_TIM8_Init>
  MX_DAC3_Init();
 800195a:	f000 fdad 	bl	80024b8 <MX_DAC3_Init>
  MX_OPAMP3_Init();
 800195e:	f000 fdef 	bl	8002540 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 8001962:	f000 fe13 	bl	800258c <MX_OPAMP6_Init>
  MX_TIM15_Init();
 8001966:	f000 fecf 	bl	8002708 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800196a:	f7ff fafb 	bl	8000f64 <setup>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800196e:	213c      	movs	r1, #60	@ 0x3c
 8001970:	48bb      	ldr	r0, [pc, #748]	@ (8001c60 <main+0x324>)
 8001972:	f003 ffe8 	bl	8005946 <HAL_TIM_Encoder_Start>
  GPIO_PinState prev = GPIO_PIN_SET;
 8001976:	2301      	movs	r3, #1
 8001978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  AD9959_Init();
 800197c:	f7ff fe02 	bl	8001584 <AD9959_Init>
  AD9959_Set_Ampl(0xF0, 1000);
 8001980:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001984:	20f0      	movs	r0, #240	@ 0xf0
 8001986:	f7ff fdad 	bl	80014e4 <AD9959_Set_Ampl>
  AD9959_Set_Phase(0xF0, 0);
 800198a:	2100      	movs	r1, #0
 800198c:	20f0      	movs	r0, #240	@ 0xf0
 800198e:	f7ff fdde 	bl	800154e <AD9959_Set_Phase>
  AD9959_Set_Freq(0xF0, freq);
 8001992:	4bb4      	ldr	r3, [pc, #720]	@ (8001c64 <main+0x328>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4619      	mov	r1, r3
 8001998:	20f0      	movs	r0, #240	@ 0xf0
 800199a:	f7ff fd61 	bl	8001460 <AD9959_Set_Freq>
  IO_Update();
 800199e:	f7ff fe77 	bl	8001690 <IO_Update>
  set_dac(modual, dac_phase_delay);
 80019a2:	4bb1      	ldr	r3, [pc, #708]	@ (8001c68 <main+0x32c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4ab0      	ldr	r2, [pc, #704]	@ (8001c6c <main+0x330>)
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	b212      	sxth	r2, r2
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fe89 	bl	80016c8 <set_dac>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int Direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);   //读取电机转动方向
 80019b6:	4baa      	ldr	r3, [pc, #680]	@ (8001c60 <main+0x324>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b10      	cmp	r3, #16
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	61fb      	str	r3, [r7, #28]
	  int CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 80019cc:	4ba4      	ldr	r3, [pc, #656]	@ (8001c60 <main+0x324>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	623b      	str	r3, [r7, #32]
	  int counter = CaptureNumber / 4 % 7 ;
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da00      	bge.n	80019de <main+0xa2>
 80019dc:	3303      	adds	r3, #3
 80019de:	109b      	asrs	r3, r3, #2
 80019e0:	461a      	mov	r2, r3
 80019e2:	4ba3      	ldr	r3, [pc, #652]	@ (8001c70 <main+0x334>)
 80019e4:	fb83 1302 	smull	r1, r3, r3, r2
 80019e8:	4413      	add	r3, r2
 80019ea:	1099      	asrs	r1, r3, #2
 80019ec:	17d3      	asrs	r3, r2, #31
 80019ee:	1ac9      	subs	r1, r1, r3
 80019f0:	460b      	mov	r3, r1
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	1a5b      	subs	r3, r3, r1
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	61bb      	str	r3, [r7, #24]

	  switch(counter)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b06      	cmp	r3, #6
 80019fe:	f200 81af 	bhi.w	8001d60 <main+0x424>
 8001a02:	a201      	add	r2, pc, #4	@ (adr r2, 8001a08 <main+0xcc>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a25 	.word	0x08001a25
 8001a0c:	08001a97 	.word	0x08001a97
 8001a10:	08001b09 	.word	0x08001b09
 8001a14:	08001b7b 	.word	0x08001b7b
 8001a18:	08001bed 	.word	0x08001bed
 8001a1c:	08001c7d 	.word	0x08001c7d
 8001a20:	08001cef 	.word	0x08001cef
	  {
	  case 0:
		  lcd_show_picture(101, 5 , 12, 20, MenuCursor16x16);
 8001a24:	4b93      	ldr	r3, [pc, #588]	@ (8001c74 <main+0x338>)
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2314      	movs	r3, #20
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	2065      	movs	r0, #101	@ 0x65
 8001a30:	f7ff fb48 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001a34:	4b90      	ldr	r3, [pc, #576]	@ (8001c78 <main+0x33c>)
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2314      	movs	r3, #20
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	2119      	movs	r1, #25
 8001a3e:	2065      	movs	r0, #101	@ 0x65
 8001a40:	f7ff fb40 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001a44:	4b8c      	ldr	r3, [pc, #560]	@ (8001c78 <main+0x33c>)
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2314      	movs	r3, #20
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	212d      	movs	r1, #45	@ 0x2d
 8001a4e:	2065      	movs	r0, #101	@ 0x65
 8001a50:	f7ff fb38 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001a54:	4b88      	ldr	r3, [pc, #544]	@ (8001c78 <main+0x33c>)
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2314      	movs	r3, #20
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	2141      	movs	r1, #65	@ 0x41
 8001a5e:	2065      	movs	r0, #101	@ 0x65
 8001a60:	f7ff fb30 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001a64:	4b84      	ldr	r3, [pc, #528]	@ (8001c78 <main+0x33c>)
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2314      	movs	r3, #20
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	2155      	movs	r1, #85	@ 0x55
 8001a6e:	2065      	movs	r0, #101	@ 0x65
 8001a70:	f7ff fb28 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001a74:	4b80      	ldr	r3, [pc, #512]	@ (8001c78 <main+0x33c>)
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2314      	movs	r3, #20
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	2169      	movs	r1, #105	@ 0x69
 8001a7e:	2065      	movs	r0, #101	@ 0x65
 8001a80:	f7ff fb20 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001a84:	4b7c      	ldr	r3, [pc, #496]	@ (8001c78 <main+0x33c>)
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2314      	movs	r3, #20
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	217d      	movs	r1, #125	@ 0x7d
 8001a8e:	2065      	movs	r0, #101	@ 0x65
 8001a90:	f7ff fb18 	bl	80010c4 <lcd_show_picture>
		  break;
 8001a94:	e164      	b.n	8001d60 <main+0x424>
	  case 1:
		  lcd_show_picture(101, 25 , 12, 20, MenuCursor16x16);
 8001a96:	4b77      	ldr	r3, [pc, #476]	@ (8001c74 <main+0x338>)
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2314      	movs	r3, #20
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	2119      	movs	r1, #25
 8001aa0:	2065      	movs	r0, #101	@ 0x65
 8001aa2:	f7ff fb0f 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001aa6:	4b74      	ldr	r3, [pc, #464]	@ (8001c78 <main+0x33c>)
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2314      	movs	r3, #20
 8001aac:	220c      	movs	r2, #12
 8001aae:	2105      	movs	r1, #5
 8001ab0:	2065      	movs	r0, #101	@ 0x65
 8001ab2:	f7ff fb07 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001ab6:	4b70      	ldr	r3, [pc, #448]	@ (8001c78 <main+0x33c>)
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2314      	movs	r3, #20
 8001abc:	220c      	movs	r2, #12
 8001abe:	212d      	movs	r1, #45	@ 0x2d
 8001ac0:	2065      	movs	r0, #101	@ 0x65
 8001ac2:	f7ff faff 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001ac6:	4b6c      	ldr	r3, [pc, #432]	@ (8001c78 <main+0x33c>)
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2314      	movs	r3, #20
 8001acc:	220c      	movs	r2, #12
 8001ace:	2141      	movs	r1, #65	@ 0x41
 8001ad0:	2065      	movs	r0, #101	@ 0x65
 8001ad2:	f7ff faf7 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001ad6:	4b68      	ldr	r3, [pc, #416]	@ (8001c78 <main+0x33c>)
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2314      	movs	r3, #20
 8001adc:	220c      	movs	r2, #12
 8001ade:	2155      	movs	r1, #85	@ 0x55
 8001ae0:	2065      	movs	r0, #101	@ 0x65
 8001ae2:	f7ff faef 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001ae6:	4b64      	ldr	r3, [pc, #400]	@ (8001c78 <main+0x33c>)
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2314      	movs	r3, #20
 8001aec:	220c      	movs	r2, #12
 8001aee:	2169      	movs	r1, #105	@ 0x69
 8001af0:	2065      	movs	r0, #101	@ 0x65
 8001af2:	f7ff fae7 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001af6:	4b60      	ldr	r3, [pc, #384]	@ (8001c78 <main+0x33c>)
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2314      	movs	r3, #20
 8001afc:	220c      	movs	r2, #12
 8001afe:	217d      	movs	r1, #125	@ 0x7d
 8001b00:	2065      	movs	r0, #101	@ 0x65
 8001b02:	f7ff fadf 	bl	80010c4 <lcd_show_picture>
		  break;
 8001b06:	e12b      	b.n	8001d60 <main+0x424>
	  case 2:
		  lcd_show_picture(101, 45 , 12, 20, MenuCursor16x16);
 8001b08:	4b5a      	ldr	r3, [pc, #360]	@ (8001c74 <main+0x338>)
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2314      	movs	r3, #20
 8001b0e:	220c      	movs	r2, #12
 8001b10:	212d      	movs	r1, #45	@ 0x2d
 8001b12:	2065      	movs	r0, #101	@ 0x65
 8001b14:	f7ff fad6 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001b18:	4b57      	ldr	r3, [pc, #348]	@ (8001c78 <main+0x33c>)
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2314      	movs	r3, #20
 8001b1e:	220c      	movs	r2, #12
 8001b20:	2119      	movs	r1, #25
 8001b22:	2065      	movs	r0, #101	@ 0x65
 8001b24:	f7ff face 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001b28:	4b53      	ldr	r3, [pc, #332]	@ (8001c78 <main+0x33c>)
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2314      	movs	r3, #20
 8001b2e:	220c      	movs	r2, #12
 8001b30:	2105      	movs	r1, #5
 8001b32:	2065      	movs	r0, #101	@ 0x65
 8001b34:	f7ff fac6 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001b38:	4b4f      	ldr	r3, [pc, #316]	@ (8001c78 <main+0x33c>)
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2314      	movs	r3, #20
 8001b3e:	220c      	movs	r2, #12
 8001b40:	2141      	movs	r1, #65	@ 0x41
 8001b42:	2065      	movs	r0, #101	@ 0x65
 8001b44:	f7ff fabe 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001b48:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <main+0x33c>)
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2314      	movs	r3, #20
 8001b4e:	220c      	movs	r2, #12
 8001b50:	2155      	movs	r1, #85	@ 0x55
 8001b52:	2065      	movs	r0, #101	@ 0x65
 8001b54:	f7ff fab6 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001b58:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <main+0x33c>)
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2314      	movs	r3, #20
 8001b5e:	220c      	movs	r2, #12
 8001b60:	2169      	movs	r1, #105	@ 0x69
 8001b62:	2065      	movs	r0, #101	@ 0x65
 8001b64:	f7ff faae 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001b68:	4b43      	ldr	r3, [pc, #268]	@ (8001c78 <main+0x33c>)
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2314      	movs	r3, #20
 8001b6e:	220c      	movs	r2, #12
 8001b70:	217d      	movs	r1, #125	@ 0x7d
 8001b72:	2065      	movs	r0, #101	@ 0x65
 8001b74:	f7ff faa6 	bl	80010c4 <lcd_show_picture>
		  break;
 8001b78:	e0f2      	b.n	8001d60 <main+0x424>
	  case 3:
		  lcd_show_picture(101, 65 , 12, 20, MenuCursor16x16);
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c74 <main+0x338>)
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2314      	movs	r3, #20
 8001b80:	220c      	movs	r2, #12
 8001b82:	2141      	movs	r1, #65	@ 0x41
 8001b84:	2065      	movs	r0, #101	@ 0x65
 8001b86:	f7ff fa9d 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <main+0x33c>)
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2314      	movs	r3, #20
 8001b90:	220c      	movs	r2, #12
 8001b92:	2119      	movs	r1, #25
 8001b94:	2065      	movs	r0, #101	@ 0x65
 8001b96:	f7ff fa95 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001b9a:	4b37      	ldr	r3, [pc, #220]	@ (8001c78 <main+0x33c>)
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2314      	movs	r3, #20
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	212d      	movs	r1, #45	@ 0x2d
 8001ba4:	2065      	movs	r0, #101	@ 0x65
 8001ba6:	f7ff fa8d 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001baa:	4b33      	ldr	r3, [pc, #204]	@ (8001c78 <main+0x33c>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2314      	movs	r3, #20
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	2105      	movs	r1, #5
 8001bb4:	2065      	movs	r0, #101	@ 0x65
 8001bb6:	f7ff fa85 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001bba:	4b2f      	ldr	r3, [pc, #188]	@ (8001c78 <main+0x33c>)
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2314      	movs	r3, #20
 8001bc0:	220c      	movs	r2, #12
 8001bc2:	2155      	movs	r1, #85	@ 0x55
 8001bc4:	2065      	movs	r0, #101	@ 0x65
 8001bc6:	f7ff fa7d 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001bca:	4b2b      	ldr	r3, [pc, #172]	@ (8001c78 <main+0x33c>)
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2314      	movs	r3, #20
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	2169      	movs	r1, #105	@ 0x69
 8001bd4:	2065      	movs	r0, #101	@ 0x65
 8001bd6:	f7ff fa75 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001bda:	4b27      	ldr	r3, [pc, #156]	@ (8001c78 <main+0x33c>)
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2314      	movs	r3, #20
 8001be0:	220c      	movs	r2, #12
 8001be2:	217d      	movs	r1, #125	@ 0x7d
 8001be4:	2065      	movs	r0, #101	@ 0x65
 8001be6:	f7ff fa6d 	bl	80010c4 <lcd_show_picture>
		  break;
 8001bea:	e0b9      	b.n	8001d60 <main+0x424>
	  case 4:
		  lcd_show_picture(101, 85 , 12, 20, MenuCursor16x16);
 8001bec:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <main+0x338>)
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2314      	movs	r3, #20
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	2155      	movs	r1, #85	@ 0x55
 8001bf6:	2065      	movs	r0, #101	@ 0x65
 8001bf8:	f7ff fa64 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <main+0x33c>)
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2314      	movs	r3, #20
 8001c02:	220c      	movs	r2, #12
 8001c04:	2119      	movs	r1, #25
 8001c06:	2065      	movs	r0, #101	@ 0x65
 8001c08:	f7ff fa5c 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <main+0x33c>)
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2314      	movs	r3, #20
 8001c12:	220c      	movs	r2, #12
 8001c14:	212d      	movs	r1, #45	@ 0x2d
 8001c16:	2065      	movs	r0, #101	@ 0x65
 8001c18:	f7ff fa54 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <main+0x33c>)
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2314      	movs	r3, #20
 8001c22:	220c      	movs	r2, #12
 8001c24:	2141      	movs	r1, #65	@ 0x41
 8001c26:	2065      	movs	r0, #101	@ 0x65
 8001c28:	f7ff fa4c 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <main+0x33c>)
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2314      	movs	r3, #20
 8001c32:	220c      	movs	r2, #12
 8001c34:	2105      	movs	r1, #5
 8001c36:	2065      	movs	r0, #101	@ 0x65
 8001c38:	f7ff fa44 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <main+0x33c>)
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2314      	movs	r3, #20
 8001c42:	220c      	movs	r2, #12
 8001c44:	2169      	movs	r1, #105	@ 0x69
 8001c46:	2065      	movs	r0, #101	@ 0x65
 8001c48:	f7ff fa3c 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <main+0x33c>)
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2314      	movs	r3, #20
 8001c52:	220c      	movs	r2, #12
 8001c54:	217d      	movs	r1, #125	@ 0x7d
 8001c56:	2065      	movs	r0, #101	@ 0x65
 8001c58:	f7ff fa34 	bl	80010c4 <lcd_show_picture>
		  break;
 8001c5c:	e080      	b.n	8001d60 <main+0x424>
 8001c5e:	bf00      	nop
 8001c60:	20000308 	.word	0x20000308
 8001c64:	20000010 	.word	0x20000010
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	200003c0 	.word	0x200003c0
 8001c70:	92492493 	.word	0x92492493
 8001c74:	0800aa10 	.word	0x0800aa10
 8001c78:	0800abf0 	.word	0x0800abf0
	  case 5:
		  lcd_show_picture(101, 105 , 12, 20, MenuCursor16x16);
 8001c7c:	4ba5      	ldr	r3, [pc, #660]	@ (8001f14 <main+0x5d8>)
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2314      	movs	r3, #20
 8001c82:	220c      	movs	r2, #12
 8001c84:	2169      	movs	r1, #105	@ 0x69
 8001c86:	2065      	movs	r0, #101	@ 0x65
 8001c88:	f7ff fa1c 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001c8c:	4ba2      	ldr	r3, [pc, #648]	@ (8001f18 <main+0x5dc>)
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2314      	movs	r3, #20
 8001c92:	220c      	movs	r2, #12
 8001c94:	2119      	movs	r1, #25
 8001c96:	2065      	movs	r0, #101	@ 0x65
 8001c98:	f7ff fa14 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001c9c:	4b9e      	ldr	r3, [pc, #632]	@ (8001f18 <main+0x5dc>)
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2314      	movs	r3, #20
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	212d      	movs	r1, #45	@ 0x2d
 8001ca6:	2065      	movs	r0, #101	@ 0x65
 8001ca8:	f7ff fa0c 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001cac:	4b9a      	ldr	r3, [pc, #616]	@ (8001f18 <main+0x5dc>)
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2314      	movs	r3, #20
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	2141      	movs	r1, #65	@ 0x41
 8001cb6:	2065      	movs	r0, #101	@ 0x65
 8001cb8:	f7ff fa04 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001cbc:	4b96      	ldr	r3, [pc, #600]	@ (8001f18 <main+0x5dc>)
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2314      	movs	r3, #20
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	2155      	movs	r1, #85	@ 0x55
 8001cc6:	2065      	movs	r0, #101	@ 0x65
 8001cc8:	f7ff f9fc 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001ccc:	4b92      	ldr	r3, [pc, #584]	@ (8001f18 <main+0x5dc>)
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2314      	movs	r3, #20
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	2065      	movs	r0, #101	@ 0x65
 8001cd8:	f7ff f9f4 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8001f18 <main+0x5dc>)
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2314      	movs	r3, #20
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	217d      	movs	r1, #125	@ 0x7d
 8001ce6:	2065      	movs	r0, #101	@ 0x65
 8001ce8:	f7ff f9ec 	bl	80010c4 <lcd_show_picture>
		  break;
 8001cec:	e038      	b.n	8001d60 <main+0x424>
	  case 6:
		  lcd_show_picture(101, 125 , 12, 20, MenuCursor16x16);
 8001cee:	4b89      	ldr	r3, [pc, #548]	@ (8001f14 <main+0x5d8>)
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2314      	movs	r3, #20
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	217d      	movs	r1, #125	@ 0x7d
 8001cf8:	2065      	movs	r0, #101	@ 0x65
 8001cfa:	f7ff f9e3 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001cfe:	4b86      	ldr	r3, [pc, #536]	@ (8001f18 <main+0x5dc>)
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2314      	movs	r3, #20
 8001d04:	220c      	movs	r2, #12
 8001d06:	2119      	movs	r1, #25
 8001d08:	2065      	movs	r0, #101	@ 0x65
 8001d0a:	f7ff f9db 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001d0e:	4b82      	ldr	r3, [pc, #520]	@ (8001f18 <main+0x5dc>)
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2314      	movs	r3, #20
 8001d14:	220c      	movs	r2, #12
 8001d16:	212d      	movs	r1, #45	@ 0x2d
 8001d18:	2065      	movs	r0, #101	@ 0x65
 8001d1a:	f7ff f9d3 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001d1e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f18 <main+0x5dc>)
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2314      	movs	r3, #20
 8001d24:	220c      	movs	r2, #12
 8001d26:	2141      	movs	r1, #65	@ 0x41
 8001d28:	2065      	movs	r0, #101	@ 0x65
 8001d2a:	f7ff f9cb 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f18 <main+0x5dc>)
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2314      	movs	r3, #20
 8001d34:	220c      	movs	r2, #12
 8001d36:	2155      	movs	r1, #85	@ 0x55
 8001d38:	2065      	movs	r0, #101	@ 0x65
 8001d3a:	f7ff f9c3 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001d3e:	4b76      	ldr	r3, [pc, #472]	@ (8001f18 <main+0x5dc>)
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2314      	movs	r3, #20
 8001d44:	220c      	movs	r2, #12
 8001d46:	2169      	movs	r1, #105	@ 0x69
 8001d48:	2065      	movs	r0, #101	@ 0x65
 8001d4a:	f7ff f9bb 	bl	80010c4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001d4e:	4b72      	ldr	r3, [pc, #456]	@ (8001f18 <main+0x5dc>)
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2314      	movs	r3, #20
 8001d54:	220c      	movs	r2, #12
 8001d56:	2105      	movs	r1, #5
 8001d58:	2065      	movs	r0, #101	@ 0x65
 8001d5a:	f7ff f9b3 	bl	80010c4 <lcd_show_picture>
		  break;
 8001d5e:	bf00      	nop
	  }
	  GPIO_PinState curr = HAL_GPIO_ReadPin(GPIOC, 1<<13);
 8001d60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d64:	486d      	ldr	r0, [pc, #436]	@ (8001f1c <main+0x5e0>)
 8001d66:	f002 f9ed 	bl	8004144 <HAL_GPIO_ReadPin>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	75fb      	strb	r3, [r7, #23]
	  if (prev && !curr)
 8001d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8335 	beq.w	80023e2 <main+0xaa6>
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8331 	bne.w	80023e2 <main+0xaa6>
	  {
		  switch(counter)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	f200 831e 	bhi.w	80023c4 <main+0xa88>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <main+0x454>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001dad 	.word	0x08001dad
 8001d94:	08001e6d 	.word	0x08001e6d
 8001d98:	08001f5d 	.word	0x08001f5d
 8001d9c:	08001ff5 	.word	0x08001ff5
 8001da0:	08002169 	.word	0x08002169
 8001da4:	08002289 	.word	0x08002289
 8001da8:	0800231f 	.word	0x0800231f
		  {
		  case 0:
			  lcd_show_str(100, 145,"MODE:\n");
 8001dac:	4a5c      	ldr	r2, [pc, #368]	@ (8001f20 <main+0x5e4>)
 8001dae:	2191      	movs	r1, #145	@ 0x91
 8001db0:	2064      	movs	r0, #100	@ 0x64
 8001db2:	f7ff f9ed 	bl	8001190 <lcd_show_str>
			  while(1)
			  {
				  mode = abs((CaptureNumber) / 4 % 2 + 1);
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	da00      	bge.n	8001dbe <main+0x482>
 8001dbc:	3303      	adds	r3, #3
 8001dbe:	109b      	asrs	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	bfb8      	it	lt
 8001dc8:	425b      	neglt	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bfb8      	it	lt
 8001dd0:	425b      	neglt	r3, r3
 8001dd2:	4a54      	ldr	r2, [pc, #336]	@ (8001f24 <main+0x5e8>)
 8001dd4:	6013      	str	r3, [r2, #0]
				  if(mode != mode_t)
 8001dd6:	4b53      	ldr	r3, [pc, #332]	@ (8001f24 <main+0x5e8>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4b53      	ldr	r3, [pc, #332]	@ (8001f28 <main+0x5ec>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d012      	beq.n	8001e08 <main+0x4cc>
				  {
					  mode_t = mode;
 8001de2:	4b50      	ldr	r3, [pc, #320]	@ (8001f24 <main+0x5e8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a50      	ldr	r2, [pc, #320]	@ (8001f28 <main+0x5ec>)
 8001de8:	6013      	str	r3, [r2, #0]
					  if (mode < 2) lcd_show_str(101,165,"CW");
 8001dea:	4b4e      	ldr	r3, [pc, #312]	@ (8001f24 <main+0x5e8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	dc05      	bgt.n	8001dfe <main+0x4c2>
 8001df2:	4a4e      	ldr	r2, [pc, #312]	@ (8001f2c <main+0x5f0>)
 8001df4:	21a5      	movs	r1, #165	@ 0xa5
 8001df6:	2065      	movs	r0, #101	@ 0x65
 8001df8:	f7ff f9ca 	bl	8001190 <lcd_show_str>
 8001dfc:	e004      	b.n	8001e08 <main+0x4cc>
					  else lcd_show_str(101,165,"AM");
 8001dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8001f30 <main+0x5f4>)
 8001e00:	21a5      	movs	r1, #165	@ 0xa5
 8001e02:	2065      	movs	r0, #101	@ 0x65
 8001e04:	f7ff f9c4 	bl	8001190 <lcd_show_str>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8001e08:	4b4a      	ldr	r3, [pc, #296]	@ (8001f34 <main+0x5f8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8001e12:	2104      	movs	r1, #4
 8001e14:	4848      	ldr	r0, [pc, #288]	@ (8001f38 <main+0x5fc>)
 8001e16:	f002 f995 	bl	8004144 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ca      	bne.n	8001db6 <main+0x47a>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8001e20:	4a46      	ldr	r2, [pc, #280]	@ (8001f3c <main+0x600>)
 8001e22:	21b9      	movs	r1, #185	@ 0xb9
 8001e24:	2065      	movs	r0, #101	@ 0x65
 8001e26:	f7ff f9b3 	bl	8001190 <lcd_show_str>
					  break;
 8001e2a:	bf00      	nop
				  }
			  }
              if(mode < 2)
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <main+0x5e8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	dc0d      	bgt.n	8001e50 <main+0x514>
			  {
            	  modual = 0;
 8001e34:	4b42      	ldr	r3, [pc, #264]	@ (8001f40 <main+0x604>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
            	  set_dac(modual,dac_phase_delay );
 8001e3a:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <main+0x604>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4a40      	ldr	r2, [pc, #256]	@ (8001f44 <main+0x608>)
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	b212      	sxth	r2, r2
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fc3d 	bl	80016c8 <set_dac>
              else
              {
            	  modual = 100;
            	  set_dac(modual,dac_phase_delay );
              }
			  break;
 8001e4e:	e2b9      	b.n	80023c4 <main+0xa88>
            	  modual = 100;
 8001e50:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <main+0x604>)
 8001e52:	2264      	movs	r2, #100	@ 0x64
 8001e54:	601a      	str	r2, [r3, #0]
            	  set_dac(modual,dac_phase_delay );
 8001e56:	4b3a      	ldr	r3, [pc, #232]	@ (8001f40 <main+0x604>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4a39      	ldr	r2, [pc, #228]	@ (8001f44 <main+0x608>)
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	b212      	sxth	r2, r2
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fc2f 	bl	80016c8 <set_dac>
			  break;
 8001e6a:	e2ab      	b.n	80023c4 <main+0xa88>
		  case 1:
			  lcd_show_str(100, 145,"AMPL:\n");
 8001e6c:	4a36      	ldr	r2, [pc, #216]	@ (8001f48 <main+0x60c>)
 8001e6e:	2191      	movs	r1, #145	@ 0x91
 8001e70:	2064      	movs	r0, #100	@ 0x64
 8001e72:	f7ff f98d 	bl	8001190 <lcd_show_str>
			  while (1)
			  {
				  ampl = abs((CaptureNumber) / 4 % 10 * 100 + 100);
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da00      	bge.n	8001e7e <main+0x542>
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	109b      	asrs	r3, r3, #2
 8001e80:	4619      	mov	r1, r3
 8001e82:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <main+0x610>)
 8001e84:	fb83 2301 	smull	r2, r3, r3, r1
 8001e88:	109a      	asrs	r2, r3, #2
 8001e8a:	17cb      	asrs	r3, r1, #31
 8001e8c:	1ad2      	subs	r2, r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	1aca      	subs	r2, r1, r3
 8001e98:	1c53      	adds	r3, r2, #1
 8001e9a:	2264      	movs	r2, #100	@ 0x64
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bfb8      	it	lt
 8001ea4:	425b      	neglt	r3, r3
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f50 <main+0x614>)
 8001ea8:	6013      	str	r3, [r2, #0]
				  if(ampl != ampl_t)
 8001eaa:	4b29      	ldr	r3, [pc, #164]	@ (8001f50 <main+0x614>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <main+0x618>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d008      	beq.n	8001ec8 <main+0x58c>
				  {
					  ampl_t = ampl;
 8001eb6:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <main+0x614>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a26      	ldr	r2, [pc, #152]	@ (8001f54 <main+0x618>)
 8001ebc:	6013      	str	r3, [r2, #0]
					  lcd_show_num(ampl);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <main+0x614>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f93a 	bl	800113c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <main+0x5f8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	4818      	ldr	r0, [pc, #96]	@ (8001f38 <main+0x5fc>)
 8001ed6:	f002 f935 	bl	8004144 <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ca      	bne.n	8001e76 <main+0x53a>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8001ee0:	4a16      	ldr	r2, [pc, #88]	@ (8001f3c <main+0x600>)
 8001ee2:	21b9      	movs	r1, #185	@ 0xb9
 8001ee4:	2065      	movs	r0, #101	@ 0x65
 8001ee6:	f7ff f953 	bl	8001190 <lcd_show_str>
					  break;
 8001eea:	bf00      	nop
				  }
			  }
			  AD9959_Set_Ampl(0xF0, ampl * 580 / 1000);
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <main+0x614>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <main+0x61c>)
 8001efa:	fb82 1203 	smull	r1, r2, r2, r3
 8001efe:	1192      	asrs	r2, r2, #6
 8001f00:	17db      	asrs	r3, r3, #31
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4619      	mov	r1, r3
 8001f08:	20f0      	movs	r0, #240	@ 0xf0
 8001f0a:	f7ff faeb 	bl	80014e4 <AD9959_Set_Ampl>
			  IO_Update();
 8001f0e:	f7ff fbbf 	bl	8001690 <IO_Update>
			  break;
 8001f12:	e257      	b.n	80023c4 <main+0xa88>
 8001f14:	0800aa10 	.word	0x0800aa10
 8001f18:	0800abf0 	.word	0x0800abf0
 8001f1c:	48000800 	.word	0x48000800
 8001f20:	08008c50 	.word	0x08008c50
 8001f24:	200003a0 	.word	0x200003a0
 8001f28:	200003a4 	.word	0x200003a4
 8001f2c:	08008c58 	.word	0x08008c58
 8001f30:	08008c5c 	.word	0x08008c5c
 8001f34:	20000308 	.word	0x20000308
 8001f38:	48000c00 	.word	0x48000c00
 8001f3c:	08008c60 	.word	0x08008c60
 8001f40:	20000008 	.word	0x20000008
 8001f44:	200003c0 	.word	0x200003c0
 8001f48:	08008c6c 	.word	0x08008c6c
 8001f4c:	66666667 	.word	0x66666667
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004
 8001f58:	10624dd3 	.word	0x10624dd3
		  case 2:
			  lcd_show_str(100, 145,"MODULATION:\n");
 8001f5c:	4ab2      	ldr	r2, [pc, #712]	@ (8002228 <main+0x8ec>)
 8001f5e:	2191      	movs	r1, #145	@ 0x91
 8001f60:	2064      	movs	r0, #100	@ 0x64
 8001f62:	f7ff f915 	bl	8001190 <lcd_show_str>
			  while (1)
			  {
				  modual = abs((((CaptureNumber) / 4 )% 7) * 10 + 30);
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da00      	bge.n	8001f6e <main+0x632>
 8001f6c:	3303      	adds	r3, #3
 8001f6e:	109b      	asrs	r3, r3, #2
 8001f70:	4619      	mov	r1, r3
 8001f72:	4bae      	ldr	r3, [pc, #696]	@ (800222c <main+0x8f0>)
 8001f74:	fb83 2301 	smull	r2, r3, r3, r1
 8001f78:	440b      	add	r3, r1
 8001f7a:	109a      	asrs	r2, r3, #2
 8001f7c:	17cb      	asrs	r3, r1, #31
 8001f7e:	1ad2      	subs	r2, r2, r3
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	1aca      	subs	r2, r1, r3
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	331e      	adds	r3, #30
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bfb8      	it	lt
 8001f96:	425b      	neglt	r3, r3
 8001f98:	4aa5      	ldr	r2, [pc, #660]	@ (8002230 <main+0x8f4>)
 8001f9a:	6013      	str	r3, [r2, #0]
				  if(modual != modual_t)
 8001f9c:	4ba4      	ldr	r3, [pc, #656]	@ (8002230 <main+0x8f4>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4ba4      	ldr	r3, [pc, #656]	@ (8002234 <main+0x8f8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d008      	beq.n	8001fba <main+0x67e>
				  {
					  modual_t = modual;
 8001fa8:	4ba1      	ldr	r3, [pc, #644]	@ (8002230 <main+0x8f4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4aa1      	ldr	r2, [pc, #644]	@ (8002234 <main+0x8f8>)
 8001fae:	6013      	str	r3, [r2, #0]
					  lcd_show_num(modual);
 8001fb0:	4b9f      	ldr	r3, [pc, #636]	@ (8002230 <main+0x8f4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f8c1 	bl	800113c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8001fba:	4b9f      	ldr	r3, [pc, #636]	@ (8002238 <main+0x8fc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	489d      	ldr	r0, [pc, #628]	@ (800223c <main+0x900>)
 8001fc8:	f002 f8bc 	bl	8004144 <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1c9      	bne.n	8001f66 <main+0x62a>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8001fd2:	4a9b      	ldr	r2, [pc, #620]	@ (8002240 <main+0x904>)
 8001fd4:	21b9      	movs	r1, #185	@ 0xb9
 8001fd6:	2065      	movs	r0, #101	@ 0x65
 8001fd8:	f7ff f8da 	bl	8001190 <lcd_show_str>
					  break;
 8001fdc:	bf00      	nop
				  }
			  }
			  set_dac(modual, dac_phase_delay);
 8001fde:	4b94      	ldr	r3, [pc, #592]	@ (8002230 <main+0x8f4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4a97      	ldr	r2, [pc, #604]	@ (8002244 <main+0x908>)
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	b212      	sxth	r2, r2
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fb6b 	bl	80016c8 <set_dac>
			  break;
 8001ff2:	e1e7      	b.n	80023c4 <main+0xa88>
		  case 3:
			  lcd_show_str(100, 145,"DELAY:\n");
 8001ff4:	4a94      	ldr	r2, [pc, #592]	@ (8002248 <main+0x90c>)
 8001ff6:	2191      	movs	r1, #145	@ 0x91
 8001ff8:	2064      	movs	r0, #100	@ 0x64
 8001ffa:	f7ff f8c9 	bl	8001190 <lcd_show_str>
			  while (1)
			  {
				  delay = abs((CaptureNumber) / 4 % 7 * 30 + 50);
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	2b00      	cmp	r3, #0
 8002002:	da00      	bge.n	8002006 <main+0x6ca>
 8002004:	3303      	adds	r3, #3
 8002006:	109b      	asrs	r3, r3, #2
 8002008:	4619      	mov	r1, r3
 800200a:	4b88      	ldr	r3, [pc, #544]	@ (800222c <main+0x8f0>)
 800200c:	fb83 2301 	smull	r2, r3, r3, r1
 8002010:	440b      	add	r3, r1
 8002012:	109a      	asrs	r2, r3, #2
 8002014:	17cb      	asrs	r3, r1, #31
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	1aca      	subs	r2, r1, r3
 8002020:	4613      	mov	r3, r2
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	3332      	adds	r3, #50	@ 0x32
 800202a:	2b00      	cmp	r3, #0
 800202c:	bfb8      	it	lt
 800202e:	425b      	neglt	r3, r3
 8002030:	4a86      	ldr	r2, [pc, #536]	@ (800224c <main+0x910>)
 8002032:	6013      	str	r3, [r2, #0]
				  if(delay == 230) delay = 0;
 8002034:	4b85      	ldr	r3, [pc, #532]	@ (800224c <main+0x910>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2be6      	cmp	r3, #230	@ 0xe6
 800203a:	d102      	bne.n	8002042 <main+0x706>
 800203c:	4b83      	ldr	r3, [pc, #524]	@ (800224c <main+0x910>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
				  if(delay != delay_t)
 8002042:	4b82      	ldr	r3, [pc, #520]	@ (800224c <main+0x910>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4b82      	ldr	r3, [pc, #520]	@ (8002250 <main+0x914>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d008      	beq.n	8002060 <main+0x724>
				  {
					  delay_t = delay;
 800204e:	4b7f      	ldr	r3, [pc, #508]	@ (800224c <main+0x910>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7f      	ldr	r2, [pc, #508]	@ (8002250 <main+0x914>)
 8002054:	6013      	str	r3, [r2, #0]
					  lcd_show_num(delay);
 8002056:	4b7d      	ldr	r3, [pc, #500]	@ (800224c <main+0x910>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f86e 	bl	800113c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8002060:	4b75      	ldr	r3, [pc, #468]	@ (8002238 <main+0x8fc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	b21b      	sxth	r3, r3
 8002068:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 800206a:	2104      	movs	r1, #4
 800206c:	4873      	ldr	r0, [pc, #460]	@ (800223c <main+0x900>)
 800206e:	f002 f869 	bl	8004144 <HAL_GPIO_ReadPin>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1c2      	bne.n	8001ffe <main+0x6c2>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8002078:	4a71      	ldr	r2, [pc, #452]	@ (8002240 <main+0x904>)
 800207a:	21b9      	movs	r1, #185	@ 0xb9
 800207c:	2065      	movs	r0, #101	@ 0x65
 800207e:	f7ff f887 	bl	8001190 <lcd_show_str>
					  break;
 8002082:	bf00      	nop
				  }
			  }
			  float final_phase = (float)delay * (float)1e-9 * (float)freq ;
 8002084:	4b71      	ldr	r3, [pc, #452]	@ (800224c <main+0x910>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002090:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8002254 <main+0x918>
 8002094:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002098:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <main+0x91c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a8:	edc7 7a04 	vstr	s15, [r7, #16]
			  int integer = final_phase;
 80020ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80020b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b4:	ee17 3a90 	vmov	r3, s15
 80020b8:	60fb      	str	r3, [r7, #12]
			  float set_phase = 1 - final_phase + (float)integer + (float)phase/360;
 80020ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020be:	edd7 7a04 	vldr	s15, [r7, #16]
 80020c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d4:	4b61      	ldr	r3, [pc, #388]	@ (800225c <main+0x920>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020e0:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 8002260 <main+0x924>
 80020e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	edc7 7a02 	vstr	s15, [r7, #8]
			  int set_phase_int = set_phase;
 80020f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80020f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f8:	ee17 3a90 	vmov	r3, s15
 80020fc:	607b      	str	r3, [r7, #4]
			  set_phase = (set_phase - (float)set_phase_int) * 16383;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002108:	ed97 7a02 	vldr	s14, [r7, #8]
 800210c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002110:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002264 <main+0x928>
 8002114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002118:	edc7 7a02 	vstr	s15, [r7, #8]
			  AD9959_Set_Phase(0x80, set_phase);
 800211c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002124:	ee17 3a90 	vmov	r3, s15
 8002128:	b29b      	uxth	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	2080      	movs	r0, #128	@ 0x80
 800212e:	f7ff fa0e 	bl	800154e <AD9959_Set_Phase>
			  IO_Update();
 8002132:	f7ff faad 	bl	8001690 <IO_Update>
			  dac_phase_delay = delay * 360 / 500 ;
 8002136:	4b45      	ldr	r3, [pc, #276]	@ (800224c <main+0x910>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	4a49      	ldr	r2, [pc, #292]	@ (8002268 <main+0x92c>)
 8002144:	fb82 1203 	smull	r1, r2, r2, r3
 8002148:	1152      	asrs	r2, r2, #5
 800214a:	17db      	asrs	r3, r3, #31
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	4a3d      	ldr	r2, [pc, #244]	@ (8002244 <main+0x908>)
 8002150:	6013      	str	r3, [r2, #0]
			  set_dac(modual, dac_phase_delay );
 8002152:	4b37      	ldr	r3, [pc, #220]	@ (8002230 <main+0x8f4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <main+0x908>)
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	b212      	sxth	r2, r2
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fab1 	bl	80016c8 <set_dac>
			  break;
 8002166:	e12d      	b.n	80023c4 <main+0xa88>
		  case 4:
			  lcd_show_str(100, 145,"ATTENUATION:\n");
 8002168:	4a40      	ldr	r2, [pc, #256]	@ (800226c <main+0x930>)
 800216a:	2191      	movs	r1, #145	@ 0x91
 800216c:	2064      	movs	r0, #100	@ 0x64
 800216e:	f7ff f80f 	bl	8001190 <lcd_show_str>
			  while (1)
			  {
				  atten = abs((CaptureNumber) / 4 % 11 * 2);
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	2b00      	cmp	r3, #0
 8002176:	da00      	bge.n	800217a <main+0x83e>
 8002178:	3303      	adds	r3, #3
 800217a:	109b      	asrs	r3, r3, #2
 800217c:	4619      	mov	r1, r3
 800217e:	4b3c      	ldr	r3, [pc, #240]	@ (8002270 <main+0x934>)
 8002180:	fb83 2301 	smull	r2, r3, r3, r1
 8002184:	105a      	asrs	r2, r3, #1
 8002186:	17cb      	asrs	r3, r1, #31
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	1aca      	subs	r2, r1, r3
 8002196:	0053      	lsls	r3, r2, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	bfb8      	it	lt
 800219c:	425b      	neglt	r3, r3
 800219e:	4a35      	ldr	r2, [pc, #212]	@ (8002274 <main+0x938>)
 80021a0:	6013      	str	r3, [r2, #0]
				  if(atten != atten_t)
 80021a2:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <main+0x938>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <main+0x93c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d008      	beq.n	80021c0 <main+0x884>
				  {
					  atten_t = atten;
 80021ae:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <main+0x938>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a31      	ldr	r2, [pc, #196]	@ (8002278 <main+0x93c>)
 80021b4:	6013      	str	r3, [r2, #0]
					  lcd_show_num(atten);
 80021b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <main+0x938>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe ffbe 	bl	800113c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 80021c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <main+0x8fc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 80021ca:	2104      	movs	r1, #4
 80021cc:	481b      	ldr	r0, [pc, #108]	@ (800223c <main+0x900>)
 80021ce:	f001 ffb9 	bl	8004144 <HAL_GPIO_ReadPin>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1cc      	bne.n	8002172 <main+0x836>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 80021d8:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <main+0x904>)
 80021da:	21b9      	movs	r1, #185	@ 0xb9
 80021dc:	2065      	movs	r0, #101	@ 0x65
 80021de:	f7fe ffd7 	bl	8001190 <lcd_show_str>
					  break;
 80021e2:	bf00      	nop
				  }
			  }
			  AD9959_Set_Ampl(0x80, DB[atten / 2] * ampl / 1000);
 80021e4:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <main+0x938>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0fda      	lsrs	r2, r3, #31
 80021ea:	4413      	add	r3, r2
 80021ec:	105b      	asrs	r3, r3, #1
 80021ee:	4a23      	ldr	r2, [pc, #140]	@ (800227c <main+0x940>)
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	ed93 7a00 	vldr	s14, [r3]
 80021f8:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <main+0x944>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002208:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002284 <main+0x948>
 800220c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	b29b      	uxth	r3, r3
 800221a:	4619      	mov	r1, r3
 800221c:	2080      	movs	r0, #128	@ 0x80
 800221e:	f7ff f961 	bl	80014e4 <AD9959_Set_Ampl>
			  IO_Update();
 8002222:	f7ff fa35 	bl	8001690 <IO_Update>
			  break;
 8002226:	e0cd      	b.n	80023c4 <main+0xa88>
 8002228:	08008c74 	.word	0x08008c74
 800222c:	92492493 	.word	0x92492493
 8002230:	20000008 	.word	0x20000008
 8002234:	2000000c 	.word	0x2000000c
 8002238:	20000308 	.word	0x20000308
 800223c:	48000c00 	.word	0x48000c00
 8002240:	08008c60 	.word	0x08008c60
 8002244:	200003c0 	.word	0x200003c0
 8002248:	08008c84 	.word	0x08008c84
 800224c:	200003a8 	.word	0x200003a8
 8002250:	200003ac 	.word	0x200003ac
 8002254:	3089705f 	.word	0x3089705f
 8002258:	20000010 	.word	0x20000010
 800225c:	200003b8 	.word	0x200003b8
 8002260:	43b40000 	.word	0x43b40000
 8002264:	467ffc00 	.word	0x467ffc00
 8002268:	10624dd3 	.word	0x10624dd3
 800226c:	08008c8c 	.word	0x08008c8c
 8002270:	2e8ba2e9 	.word	0x2e8ba2e9
 8002274:	200003b0 	.word	0x200003b0
 8002278:	200003b4 	.word	0x200003b4
 800227c:	20000018 	.word	0x20000018
 8002280:	20000000 	.word	0x20000000
 8002284:	447a0000 	.word	0x447a0000
		  case 5:
			  lcd_show_str(100, 145,"FREQUENCY:\n");
 8002288:	4a58      	ldr	r2, [pc, #352]	@ (80023ec <main+0xab0>)
 800228a:	2191      	movs	r1, #145	@ 0x91
 800228c:	2064      	movs	r0, #100	@ 0x64
 800228e:	f7fe ff7f 	bl	8001190 <lcd_show_str>
			  while (1)
			  {
				  freq = abs((CaptureNumber) / 4 % 11 + 30);
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	2b00      	cmp	r3, #0
 8002296:	da00      	bge.n	800229a <main+0x95e>
 8002298:	3303      	adds	r3, #3
 800229a:	109b      	asrs	r3, r3, #2
 800229c:	4619      	mov	r1, r3
 800229e:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <main+0xab4>)
 80022a0:	fb83 2301 	smull	r2, r3, r3, r1
 80022a4:	105a      	asrs	r2, r3, #1
 80022a6:	17cb      	asrs	r3, r1, #31
 80022a8:	1ad2      	subs	r2, r2, r3
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	1aca      	subs	r2, r1, r3
 80022b6:	f102 031e 	add.w	r3, r2, #30
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bfb8      	it	lt
 80022be:	425b      	neglt	r3, r3
 80022c0:	4a4c      	ldr	r2, [pc, #304]	@ (80023f4 <main+0xab8>)
 80022c2:	6013      	str	r3, [r2, #0]
				  if(freq != freq_t)
 80022c4:	4b4b      	ldr	r3, [pc, #300]	@ (80023f4 <main+0xab8>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b4b      	ldr	r3, [pc, #300]	@ (80023f8 <main+0xabc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d008      	beq.n	80022e2 <main+0x9a6>
				  {
					  freq_t = freq;
 80022d0:	4b48      	ldr	r3, [pc, #288]	@ (80023f4 <main+0xab8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a48      	ldr	r2, [pc, #288]	@ (80023f8 <main+0xabc>)
 80022d6:	6013      	str	r3, [r2, #0]
					  lcd_show_num(freq);
 80022d8:	4b46      	ldr	r3, [pc, #280]	@ (80023f4 <main+0xab8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe ff2d 	bl	800113c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 80022e2:	4b46      	ldr	r3, [pc, #280]	@ (80023fc <main+0xac0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 80022ec:	2104      	movs	r1, #4
 80022ee:	4844      	ldr	r0, [pc, #272]	@ (8002400 <main+0xac4>)
 80022f0:	f001 ff28 	bl	8004144 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1cb      	bne.n	8002292 <main+0x956>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 80022fa:	4a42      	ldr	r2, [pc, #264]	@ (8002404 <main+0xac8>)
 80022fc:	21b9      	movs	r1, #185	@ 0xb9
 80022fe:	2065      	movs	r0, #101	@ 0x65
 8002300:	f7fe ff46 	bl	8001190 <lcd_show_str>
					  break;
 8002304:	bf00      	nop
				  }
			  }
			  AD9959_Set_Freq(0xF0, freq * 1000000);
 8002306:	4b3b      	ldr	r3, [pc, #236]	@ (80023f4 <main+0xab8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a3f      	ldr	r2, [pc, #252]	@ (8002408 <main+0xacc>)
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	4619      	mov	r1, r3
 8002312:	20f0      	movs	r0, #240	@ 0xf0
 8002314:	f7ff f8a4 	bl	8001460 <AD9959_Set_Freq>
			  IO_Update();
 8002318:	f7ff f9ba 	bl	8001690 <IO_Update>
			  break;
 800231c:	e052      	b.n	80023c4 <main+0xa88>
		  case 6:
			  lcd_show_str(100, 145,"INIT PHASE\n");
 800231e:	4a3b      	ldr	r2, [pc, #236]	@ (800240c <main+0xad0>)
 8002320:	2191      	movs	r1, #145	@ 0x91
 8002322:	2064      	movs	r0, #100	@ 0x64
 8002324:	f7fe ff34 	bl	8001190 <lcd_show_str>
			  while (1)
			  {
				  phase = abs((CaptureNumber) / 4 % 7 * 30);
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	2b00      	cmp	r3, #0
 800232c:	da00      	bge.n	8002330 <main+0x9f4>
 800232e:	3303      	adds	r3, #3
 8002330:	109b      	asrs	r3, r3, #2
 8002332:	4619      	mov	r1, r3
 8002334:	4b36      	ldr	r3, [pc, #216]	@ (8002410 <main+0xad4>)
 8002336:	fb83 2301 	smull	r2, r3, r3, r1
 800233a:	440b      	add	r3, r1
 800233c:	109a      	asrs	r2, r3, #2
 800233e:	17cb      	asrs	r3, r1, #31
 8002340:	1ad2      	subs	r2, r2, r3
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	1aca      	subs	r2, r1, r3
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	bfb8      	it	lt
 8002356:	425b      	neglt	r3, r3
 8002358:	4a2e      	ldr	r2, [pc, #184]	@ (8002414 <main+0xad8>)
 800235a:	6013      	str	r3, [r2, #0]
				  if(phase != phase_t)
 800235c:	4b2d      	ldr	r3, [pc, #180]	@ (8002414 <main+0xad8>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <main+0xadc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d008      	beq.n	800237a <main+0xa3e>
				  {
					  phase_t = phase;
 8002368:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <main+0xad8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2a      	ldr	r2, [pc, #168]	@ (8002418 <main+0xadc>)
 800236e:	6013      	str	r3, [r2, #0]
					  lcd_show_num(phase);
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <main+0xad8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fee1 	bl	800113c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 800237a:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <main+0xac0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	b21b      	sxth	r3, r3
 8002382:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8002384:	2104      	movs	r1, #4
 8002386:	481e      	ldr	r0, [pc, #120]	@ (8002400 <main+0xac4>)
 8002388:	f001 fedc 	bl	8004144 <HAL_GPIO_ReadPin>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ca      	bne.n	8002328 <main+0x9ec>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8002392:	4a1c      	ldr	r2, [pc, #112]	@ (8002404 <main+0xac8>)
 8002394:	21b9      	movs	r1, #185	@ 0xb9
 8002396:	2065      	movs	r0, #101	@ 0x65
 8002398:	f7fe fefa 	bl	8001190 <lcd_show_str>
					  break;
 800239c:	bf00      	nop
				  }
			  }
			  AD9959_Set_Phase(0x80, phase * 16383 / 360);
 800239e:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <main+0xad8>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4613      	mov	r3, r2
 80023a4:	039b      	lsls	r3, r3, #14
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	4a1c      	ldr	r2, [pc, #112]	@ (800241c <main+0xae0>)
 80023aa:	fb82 1203 	smull	r1, r2, r2, r3
 80023ae:	441a      	add	r2, r3
 80023b0:	1212      	asrs	r2, r2, #8
 80023b2:	17db      	asrs	r3, r3, #31
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	2080      	movs	r0, #128	@ 0x80
 80023bc:	f7ff f8c7 	bl	800154e <AD9959_Set_Phase>
			  IO_Update();
 80023c0:	f7ff f966 	bl	8001690 <IO_Update>
			  break;
		  }
		  while(HAL_GPIO_ReadPin(GPIOC, 1<<13) != 0)		  ;
 80023c4:	bf00      	nop
 80023c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023ca:	4815      	ldr	r0, [pc, #84]	@ (8002420 <main+0xae4>)
 80023cc:	f001 feba 	bl	8004144 <HAL_GPIO_ReadPin>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f7      	bne.n	80023c6 <main+0xa8a>
		  //lcd_show_picture(101, 105, 240, 100, gImage_black_big);
		  lcd_show_black(100, 145, 239, 100);
 80023d6:	2364      	movs	r3, #100	@ 0x64
 80023d8:	22ef      	movs	r2, #239	@ 0xef
 80023da:	2191      	movs	r1, #145	@ 0x91
 80023dc:	2064      	movs	r0, #100	@ 0x64
 80023de:	f7fe fefd 	bl	80011dc <lcd_show_black>
	  }
	  prev = curr;
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  {
 80023e8:	f7ff bae5 	b.w	80019b6 <main+0x7a>
 80023ec:	08008c9c 	.word	0x08008c9c
 80023f0:	2e8ba2e9 	.word	0x2e8ba2e9
 80023f4:	20000010 	.word	0x20000010
 80023f8:	20000014 	.word	0x20000014
 80023fc:	20000308 	.word	0x20000308
 8002400:	48000c00 	.word	0x48000c00
 8002404:	08008c60 	.word	0x08008c60
 8002408:	000f4240 	.word	0x000f4240
 800240c:	08008ca8 	.word	0x08008ca8
 8002410:	92492493 	.word	0x92492493
 8002414:	200003b8 	.word	0x200003b8
 8002418:	200003bc 	.word	0x200003bc
 800241c:	b60b60b7 	.word	0xb60b60b7
 8002420:	48000800 	.word	0x48000800

08002424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b094      	sub	sp, #80	@ 0x50
 8002428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242a:	f107 0318 	add.w	r3, r7, #24
 800242e:	2238      	movs	r2, #56	@ 0x38
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f005 fff8 	bl	8008428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002446:	2000      	movs	r0, #0
 8002448:	f001 ffae 	bl	80043a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800244c:	2301      	movs	r3, #1
 800244e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002454:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002456:	2302      	movs	r3, #2
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800245a:	2303      	movs	r3, #3
 800245c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 800245e:	2305      	movs	r3, #5
 8002460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002462:	2340      	movs	r3, #64	@ 0x40
 8002464:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002466:	2302      	movs	r3, #2
 8002468:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800246a:	2302      	movs	r3, #2
 800246c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800246e:	2302      	movs	r3, #2
 8002470:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002472:	f107 0318 	add.w	r3, r7, #24
 8002476:	4618      	mov	r0, r3
 8002478:	f002 f84a 	bl	8004510 <HAL_RCC_OscConfig>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002482:	f000 fa51 	bl	8002928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002486:	230f      	movs	r3, #15
 8002488:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800248a:	2303      	movs	r3, #3
 800248c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2104      	movs	r1, #4
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fb48 	bl	8004b34 <HAL_RCC_ClockConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80024aa:	f000 fa3d 	bl	8002928 <Error_Handler>
  }
}
 80024ae:	bf00      	nop
 80024b0:	3750      	adds	r7, #80	@ 0x50
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	@ 0x30
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80024be:	463b      	mov	r3, r7
 80024c0:	2230      	movs	r2, #48	@ 0x30
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f005 ffaf 	bl	8008428 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80024ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002538 <MX_DAC3_Init+0x80>)
 80024cc:	4a1b      	ldr	r2, [pc, #108]	@ (800253c <MX_DAC3_Init+0x84>)
 80024ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80024d0:	4819      	ldr	r0, [pc, #100]	@ (8002538 <MX_DAC3_Init+0x80>)
 80024d2:	f000 fe44 	bl	800315e <HAL_DAC_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80024dc:	f000 fa24 	bl	8002928 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80024e0:	2302      	movs	r3, #2
 80024e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = ENABLE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 80024f0:	230e      	movs	r3, #14
 80024f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80024f8:	2302      	movs	r3, #2
 80024fa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80024fc:	2302      	movs	r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	2200      	movs	r2, #0
 8002508:	4619      	mov	r1, r3
 800250a:	480b      	ldr	r0, [pc, #44]	@ (8002538 <MX_DAC3_Init+0x80>)
 800250c:	f000 ff8a 	bl	8003424 <HAL_DAC_ConfigChannel>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8002516:	f000 fa07 	bl	8002928 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800251a:	463b      	mov	r3, r7
 800251c:	2210      	movs	r2, #16
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	@ (8002538 <MX_DAC3_Init+0x80>)
 8002522:	f000 ff7f 	bl	8003424 <HAL_DAC_ConfigChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 800252c:	f000 f9fc 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	3730      	adds	r7, #48	@ 0x30
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200000f8 	.word	0x200000f8
 800253c:	50001000 	.word	0x50001000

08002540 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <MX_OPAMP3_Init+0x44>)
 8002546:	4a10      	ldr	r2, [pc, #64]	@ (8002588 <MX_OPAMP3_Init+0x48>)
 8002548:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <MX_OPAMP3_Init+0x44>)
 800254c:	2280      	movs	r2, #128	@ 0x80
 800254e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002550:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <MX_OPAMP3_Init+0x44>)
 8002552:	2260      	movs	r2, #96	@ 0x60
 8002554:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8002556:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <MX_OPAMP3_Init+0x44>)
 8002558:	220c      	movs	r2, #12
 800255a:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 800255c:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <MX_OPAMP3_Init+0x44>)
 800255e:	2200      	movs	r2, #0
 8002560:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <MX_OPAMP3_Init+0x44>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <MX_OPAMP3_Init+0x44>)
 800256a:	2200      	movs	r2, #0
 800256c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800256e:	4805      	ldr	r0, [pc, #20]	@ (8002584 <MX_OPAMP3_Init+0x44>)
 8002570:	f001 fe18 	bl	80041a4 <HAL_OPAMP_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 800257a:	f000 f9d5 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200001cc 	.word	0x200001cc
 8002588:	40010308 	.word	0x40010308

0800258c <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8002590:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <MX_OPAMP6_Init+0x44>)
 8002592:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <MX_OPAMP6_Init+0x48>)
 8002594:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8002596:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <MX_OPAMP6_Init+0x44>)
 8002598:	2280      	movs	r2, #128	@ 0x80
 800259a:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 800259c:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <MX_OPAMP6_Init+0x44>)
 800259e:	2260      	movs	r2, #96	@ 0x60
 80025a0:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <MX_OPAMP6_Init+0x44>)
 80025a4:	220c      	movs	r2, #12
 80025a6:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 80025a8:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <MX_OPAMP6_Init+0x44>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80025ae:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <MX_OPAMP6_Init+0x44>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <MX_OPAMP6_Init+0x44>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80025ba:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <MX_OPAMP6_Init+0x44>)
 80025bc:	f001 fdf2 	bl	80041a4 <HAL_OPAMP_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 80025c6:	f000 f9af 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000208 	.word	0x20000208
 80025d4:	40010314 	.word	0x40010314

080025d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <MX_SPI1_Init+0x74>)
 80025de:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <MX_SPI1_Init+0x78>)
 80025e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <MX_SPI1_Init+0x74>)
 80025e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <MX_SPI1_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025f0:	4b16      	ldr	r3, [pc, #88]	@ (800264c <MX_SPI1_Init+0x74>)
 80025f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80025f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <MX_SPI1_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025fe:	4b13      	ldr	r3, [pc, #76]	@ (800264c <MX_SPI1_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <MX_SPI1_Init+0x74>)
 8002606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800260a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <MX_SPI1_Init+0x74>)
 800260e:	2210      	movs	r2, #16
 8002610:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <MX_SPI1_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <MX_SPI1_Init+0x74>)
 800261a:	2200      	movs	r2, #0
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <MX_SPI1_Init+0x74>)
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002624:	4b09      	ldr	r3, [pc, #36]	@ (800264c <MX_SPI1_Init+0x74>)
 8002626:	2207      	movs	r2, #7
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <MX_SPI1_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <MX_SPI1_Init+0x74>)
 8002632:	2200      	movs	r2, #0
 8002634:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002636:	4805      	ldr	r0, [pc, #20]	@ (800264c <MX_SPI1_Init+0x74>)
 8002638:	f002 fc6c 	bl	8004f14 <HAL_SPI_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002642:	f000 f971 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000244 	.word	0x20000244
 8002650:	40013000 	.word	0x40013000

08002654 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08c      	sub	sp, #48	@ 0x30
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800265a:	f107 030c 	add.w	r3, r7, #12
 800265e:	2224      	movs	r2, #36	@ 0x24
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f005 fee0 	bl	8008428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002668:	463b      	mov	r3, r7
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002672:	4b23      	ldr	r3, [pc, #140]	@ (8002700 <MX_TIM8_Init+0xac>)
 8002674:	4a23      	ldr	r2, [pc, #140]	@ (8002704 <MX_TIM8_Init+0xb0>)
 8002676:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002678:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <MX_TIM8_Init+0xac>)
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <MX_TIM8_Init+0xac>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002684:	4b1e      	ldr	r3, [pc, #120]	@ (8002700 <MX_TIM8_Init+0xac>)
 8002686:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800268a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268c:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <MX_TIM8_Init+0xac>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002692:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <MX_TIM8_Init+0xac>)
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002698:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <MX_TIM8_Init+0xac>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800269e:	2303      	movs	r3, #3
 80026a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026a6:	2301      	movs	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026b6:	2301      	movs	r3, #1
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	4619      	mov	r1, r3
 80026c8:	480d      	ldr	r0, [pc, #52]	@ (8002700 <MX_TIM8_Init+0xac>)
 80026ca:	f003 f896 	bl	80057fa <HAL_TIM_Encoder_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80026d4:	f000 f928 	bl	8002928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d8:	2300      	movs	r3, #0
 80026da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026dc:	2300      	movs	r3, #0
 80026de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026e4:	463b      	mov	r3, r7
 80026e6:	4619      	mov	r1, r3
 80026e8:	4805      	ldr	r0, [pc, #20]	@ (8002700 <MX_TIM8_Init+0xac>)
 80026ea:	f003 fc47 	bl	8005f7c <HAL_TIMEx_MasterConfigSynchronization>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80026f4:	f000 f918 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	3730      	adds	r7, #48	@ 0x30
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000308 	.word	0x20000308
 8002704:	40013400 	.word	0x40013400

08002708 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002726:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <MX_TIM15_Init+0x98>)
 8002728:	4a1e      	ldr	r2, [pc, #120]	@ (80027a4 <MX_TIM15_Init+0x9c>)
 800272a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800272c:	4b1c      	ldr	r3, [pc, #112]	@ (80027a0 <MX_TIM15_Init+0x98>)
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002732:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <MX_TIM15_Init+0x98>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19;
 8002738:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <MX_TIM15_Init+0x98>)
 800273a:	2213      	movs	r2, #19
 800273c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273e:	4b18      	ldr	r3, [pc, #96]	@ (80027a0 <MX_TIM15_Init+0x98>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002744:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <MX_TIM15_Init+0x98>)
 8002746:	2200      	movs	r2, #0
 8002748:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274a:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <MX_TIM15_Init+0x98>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002750:	4813      	ldr	r0, [pc, #76]	@ (80027a0 <MX_TIM15_Init+0x98>)
 8002752:	f002 ff63 	bl	800561c <HAL_TIM_Base_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 800275c:	f000 f8e4 	bl	8002928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002766:	f107 0310 	add.w	r3, r7, #16
 800276a:	4619      	mov	r1, r3
 800276c:	480c      	ldr	r0, [pc, #48]	@ (80027a0 <MX_TIM15_Init+0x98>)
 800276e:	f003 f979 	bl	8005a64 <HAL_TIM_ConfigClockSource>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8002778:	f000 f8d6 	bl	8002928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800277c:	2320      	movs	r3, #32
 800277e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <MX_TIM15_Init+0x98>)
 800278a:	f003 fbf7 	bl	8005f7c <HAL_TIMEx_MasterConfigSynchronization>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002794:	f000 f8c8 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000354 	.word	0x20000354
 80027a4:	40014000 	.word	0x40014000

080027a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80027ae:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <MX_DMA_Init+0x50>)
 80027b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b2:	4a11      	ldr	r2, [pc, #68]	@ (80027f8 <MX_DMA_Init+0x50>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80027ba:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <MX_DMA_Init+0x50>)
 80027bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027c6:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <MX_DMA_Init+0x50>)
 80027c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ca:	4a0b      	ldr	r2, [pc, #44]	@ (80027f8 <MX_DMA_Init+0x50>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <MX_DMA_Init+0x50>)
 80027d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	200b      	movs	r0, #11
 80027e4:	f000 fc87 	bl	80030f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027e8:	200b      	movs	r0, #11
 80027ea:	f000 fc9e 	bl	800312a <HAL_NVIC_EnableIRQ>

}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000

080027fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	@ 0x28
 8002800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002812:	4b42      	ldr	r3, [pc, #264]	@ (800291c <MX_GPIO_Init+0x120>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002816:	4a41      	ldr	r2, [pc, #260]	@ (800291c <MX_GPIO_Init+0x120>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800281e:	4b3f      	ldr	r3, [pc, #252]	@ (800291c <MX_GPIO_Init+0x120>)
 8002820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800282a:	4b3c      	ldr	r3, [pc, #240]	@ (800291c <MX_GPIO_Init+0x120>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282e:	4a3b      	ldr	r2, [pc, #236]	@ (800291c <MX_GPIO_Init+0x120>)
 8002830:	f043 0320 	orr.w	r3, r3, #32
 8002834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002836:	4b39      	ldr	r3, [pc, #228]	@ (800291c <MX_GPIO_Init+0x120>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b36      	ldr	r3, [pc, #216]	@ (800291c <MX_GPIO_Init+0x120>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002846:	4a35      	ldr	r2, [pc, #212]	@ (800291c <MX_GPIO_Init+0x120>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800284e:	4b33      	ldr	r3, [pc, #204]	@ (800291c <MX_GPIO_Init+0x120>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	4b30      	ldr	r3, [pc, #192]	@ (800291c <MX_GPIO_Init+0x120>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285e:	4a2f      	ldr	r2, [pc, #188]	@ (800291c <MX_GPIO_Init+0x120>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002866:	4b2d      	ldr	r3, [pc, #180]	@ (800291c <MX_GPIO_Init+0x120>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002872:	4b2a      	ldr	r3, [pc, #168]	@ (800291c <MX_GPIO_Init+0x120>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002876:	4a29      	ldr	r2, [pc, #164]	@ (800291c <MX_GPIO_Init+0x120>)
 8002878:	f043 0308 	orr.w	r3, r3, #8
 800287c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800287e:	4b27      	ldr	r3, [pc, #156]	@ (800291c <MX_GPIO_Init+0x120>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 800288a:	2200      	movs	r2, #0
 800288c:	f640 213f 	movw	r1, #2623	@ 0xa3f
 8002890:	4823      	ldr	r0, [pc, #140]	@ (8002920 <MX_GPIO_Init+0x124>)
 8002892:	f001 fc6f 	bl	8004174 <HAL_GPIO_WritePin>
                          |PWR_Pin|PS0_Pin|SDIO1_Pin|LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|SDIO2_Pin|SDIO3_Pin|PS1_Pin
 8002896:	2200      	movs	r2, #0
 8002898:	f641 3102 	movw	r1, #6914	@ 0x1b02
 800289c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a0:	f001 fc68 	bl	8004174 <HAL_GPIO_WritePin>
                          |PS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	4819      	ldr	r0, [pc, #100]	@ (8002920 <MX_GPIO_Init+0x124>)
 80028ba:	f001 fac1 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin CS_Pin SDIO0_Pin UPDATE_Pin
                           PWR_Pin PS0_Pin SDIO1_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 80028be:	f640 233f 	movw	r3, #2623	@ 0xa3f
 80028c2:	617b      	str	r3, [r7, #20]
                          |PWR_Pin|PS0_Pin|SDIO1_Pin|LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4619      	mov	r1, r3
 80028d6:	4812      	ldr	r0, [pc, #72]	@ (8002920 <MX_GPIO_Init+0x124>)
 80028d8:	f001 fab2 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin SDIO2_Pin SDIO3_Pin PS1_Pin
                           PS2_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|SDIO2_Pin|SDIO3_Pin|PS1_Pin
 80028dc:	f641 3302 	movw	r3, #6914	@ 0x1b02
 80028e0:	617b      	str	r3, [r7, #20]
                          |PS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e2:	2301      	movs	r3, #1
 80028e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	4619      	mov	r1, r3
 80028f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028f8:	f001 faa2 	bl	8003e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028fc:	2304      	movs	r3, #4
 80028fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002904:	2301      	movs	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	4805      	ldr	r0, [pc, #20]	@ (8002924 <MX_GPIO_Init+0x128>)
 8002910:	f001 fa96 	bl	8003e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002914:	bf00      	nop
 8002916:	3728      	adds	r7, #40	@ 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	48000800 	.word	0x48000800
 8002924:	48000c00 	.word	0x48000c00

08002928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800292c:	b672      	cpsid	i
}
 800292e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <Error_Handler+0x8>

08002934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	4b0f      	ldr	r3, [pc, #60]	@ (8002978 <HAL_MspInit+0x44>)
 800293c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293e:	4a0e      	ldr	r2, [pc, #56]	@ (8002978 <HAL_MspInit+0x44>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6613      	str	r3, [r2, #96]	@ 0x60
 8002946:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <HAL_MspInit+0x44>)
 8002948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_MspInit+0x44>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	4a08      	ldr	r2, [pc, #32]	@ (8002978 <HAL_MspInit+0x44>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800295c:	6593      	str	r3, [r2, #88]	@ 0x58
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_MspInit+0x44>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800296a:	f001 fdc1 	bl	80044f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a34      	ldr	r2, [pc, #208]	@ (8002a5c <HAL_DAC_MspInit+0xe0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d161      	bne.n	8002a52 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800298e:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_DAC_MspInit+0xe4>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	4a33      	ldr	r2, [pc, #204]	@ (8002a60 <HAL_DAC_MspInit+0xe4>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800299a:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <HAL_DAC_MspInit+0xe4>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel2;
 80029a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002a68 <HAL_DAC_MspInit+0xec>)
 80029aa:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029ae:	2266      	movs	r2, #102	@ 0x66
 80029b0:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029b4:	2210      	movs	r2, #16
 80029b6:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80029be:	4b29      	ldr	r3, [pc, #164]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029c0:	2280      	movs	r2, #128	@ 0x80
 80029c2:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029c4:	4b27      	ldr	r3, [pc, #156]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ca:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029cc:	4b25      	ldr	r3, [pc, #148]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029d2:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 80029d4:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029d6:	2220      	movs	r2, #32
 80029d8:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80029da:	4b22      	ldr	r3, [pc, #136]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 80029e0:	4820      	ldr	r0, [pc, #128]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029e2:	f000 ff61 	bl	80038a8 <HAL_DMA_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_DAC_MspInit+0x74>
    {
      Error_Handler();
 80029ec:	f7ff ff9c 	bl	8002928 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <HAL_DAC_MspInit+0xe8>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC3_CH2 Init */
    hdma_dac3_ch2.Instance = DMA1_Channel3;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 80029fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002a70 <HAL_DAC_MspInit+0xf4>)
 8002a00:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch2.Init.Request = DMA_REQUEST_DAC3_CHANNEL2;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a04:	2267      	movs	r2, #103	@ 0x67
 8002a06:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0e:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002a14:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a16:	2280      	movs	r2, #128	@ 0x80
 8002a18:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a1a:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a20:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a28:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch2.Init.Mode = DMA_CIRCULAR;
 8002a2a:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002a30:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch2) != HAL_OK)
 8002a36:	480d      	ldr	r0, [pc, #52]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a38:	f000 ff36 	bl	80038a8 <HAL_DMA_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002a42:	f7ff ff71 	bl	8002928 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac3_ch2);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a08      	ldr	r2, [pc, #32]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <HAL_DAC_MspInit+0xf0>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	50001000 	.word	0x50001000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	2000010c 	.word	0x2000010c
 8002a68:	4002001c 	.word	0x4002001c
 8002a6c:	2000016c 	.word	0x2000016c
 8002a70:	40020030 	.word	0x40020030

08002a74 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	@ 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1e      	ldr	r2, [pc, #120]	@ (8002b0c <HAL_OPAMP_MspInit+0x98>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d118      	bne.n	8002ac8 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a96:	4b1e      	ldr	r3, [pc, #120]	@ (8002b10 <HAL_OPAMP_MspInit+0x9c>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b10 <HAL_OPAMP_MspInit+0x9c>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_OPAMP_MspInit+0x9c>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
    /**OPAMP3 GPIO Configuration
    PB1     ------> OPAMP3_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4814      	ldr	r0, [pc, #80]	@ (8002b14 <HAL_OPAMP_MspInit+0xa0>)
 8002ac2:	f001 f9bd 	bl	8003e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8002ac6:	e01d      	b.n	8002b04 <HAL_OPAMP_MspInit+0x90>
  else if(hopamp->Instance==OPAMP6)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a12      	ldr	r2, [pc, #72]	@ (8002b18 <HAL_OPAMP_MspInit+0xa4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d118      	bne.n	8002b04 <HAL_OPAMP_MspInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <HAL_OPAMP_MspInit+0x9c>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8002b10 <HAL_OPAMP_MspInit+0x9c>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ade:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <HAL_OPAMP_MspInit+0x9c>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002aea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af0:	2303      	movs	r3, #3
 8002af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4619      	mov	r1, r3
 8002afe:	4805      	ldr	r0, [pc, #20]	@ (8002b14 <HAL_OPAMP_MspInit+0xa0>)
 8002b00:	f001 f99e 	bl	8003e40 <HAL_GPIO_Init>
}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	@ 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40010308 	.word	0x40010308
 8002b10:	40021000 	.word	0x40021000
 8002b14:	48000400 	.word	0x48000400
 8002b18:	40010314 	.word	0x40010314

08002b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2c      	ldr	r2, [pc, #176]	@ (8002bec <HAL_SPI_MspInit+0xd0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d151      	bne.n	8002be2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <HAL_SPI_MspInit+0xd4>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b42:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf0 <HAL_SPI_MspInit+0xd4>)
 8002b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b48:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b4a:	4b29      	ldr	r3, [pc, #164]	@ (8002bf0 <HAL_SPI_MspInit+0xd4>)
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	4b26      	ldr	r3, [pc, #152]	@ (8002bf0 <HAL_SPI_MspInit+0xd4>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	4a25      	ldr	r2, [pc, #148]	@ (8002bf0 <HAL_SPI_MspInit+0xd4>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b62:	4b23      	ldr	r3, [pc, #140]	@ (8002bf0 <HAL_SPI_MspInit+0xd4>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b6e:	23a0      	movs	r3, #160	@ 0xa0
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b7e:	2305      	movs	r3, #5
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4619      	mov	r1, r3
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b8c:	f001 f958 	bl	8003e40 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002b90:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002b92:	4a19      	ldr	r2, [pc, #100]	@ (8002bf8 <HAL_SPI_MspInit+0xdc>)
 8002b94:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002b96:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002b98:	220b      	movs	r2, #11
 8002b9a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b9c:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba2:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba8:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bae:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002bc6:	480b      	ldr	r0, [pc, #44]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002bc8:	f000 fe6e 	bl	80038a8 <HAL_DMA_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002bd2:	f7ff fea9 	bl	8002928 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a06      	ldr	r2, [pc, #24]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002bda:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bdc:	4a05      	ldr	r2, [pc, #20]	@ (8002bf4 <HAL_SPI_MspInit+0xd8>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002be2:	bf00      	nop
 8002be4:	3728      	adds	r7, #40	@ 0x28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40013000 	.word	0x40013000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	200002a8 	.word	0x200002a8
 8002bf8:	40020008 	.word	0x40020008

08002bfc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	@ 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a17      	ldr	r2, [pc, #92]	@ (8002c78 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d127      	bne.n	8002c6e <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c1e:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c22:	4a16      	ldr	r2, [pc, #88]	@ (8002c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002c24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c28:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c2a:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c36:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	4a10      	ldr	r2, [pc, #64]	@ (8002c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c42:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c4e:	23c0      	movs	r3, #192	@ 0xc0
 8002c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002c5e:	2304      	movs	r3, #4
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	4619      	mov	r1, r3
 8002c68:	4805      	ldr	r0, [pc, #20]	@ (8002c80 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c6a:	f001 f8e9 	bl	8003e40 <HAL_GPIO_Init>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8002c6e:	bf00      	nop
 8002c70:	3728      	adds	r7, #40	@ 0x28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40013400 	.word	0x40013400
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	48000800 	.word	0x48000800

08002c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <HAL_TIM_Base_MspInit+0x38>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10b      	bne.n	8002cae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c96:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9a:	4a09      	ldr	r2, [pc, #36]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40014000 	.word	0x40014000
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <NMI_Handler+0x4>

08002ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <HardFault_Handler+0x4>

08002cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <MemManage_Handler+0x4>

08002cdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <BusFault_Handler+0x4>

08002ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <UsageFault_Handler+0x4>

08002cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d1a:	f000 f8d1 	bl	8002ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002d28:	4802      	ldr	r0, [pc, #8]	@ (8002d34 <DMA1_Channel1_IRQHandler+0x10>)
 8002d2a:	f000 ff39 	bl	8003ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200002a8 	.word	0x200002a8

08002d38 <_sbrk>:
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	4a14      	ldr	r2, [pc, #80]	@ (8002d94 <_sbrk+0x5c>)
 8002d42:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <_sbrk+0x60>)
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	4b13      	ldr	r3, [pc, #76]	@ (8002d9c <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <_sbrk+0x22>
 8002d54:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <_sbrk+0x64>)
 8002d56:	4a12      	ldr	r2, [pc, #72]	@ (8002da0 <_sbrk+0x68>)
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	4b10      	ldr	r3, [pc, #64]	@ (8002d9c <_sbrk+0x64>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d207      	bcs.n	8002d78 <_sbrk+0x40>
 8002d68:	f005 fb76 	bl	8008458 <__errno>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	220c      	movs	r2, #12
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f04f 33ff 	mov.w	r3, #4294967295
 8002d76:	e009      	b.n	8002d8c <_sbrk+0x54>
 8002d78:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <_sbrk+0x64>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <_sbrk+0x64>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	4a05      	ldr	r2, [pc, #20]	@ (8002d9c <_sbrk+0x64>)
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20020000 	.word	0x20020000
 8002d98:	00000400 	.word	0x00000400
 8002d9c:	200003d4 	.word	0x200003d4
 8002da0:	20000528 	.word	0x20000528

08002da4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <SystemInit+0x20>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	4a05      	ldr	r2, [pc, #20]	@ (8002dc4 <SystemInit+0x20>)
 8002db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <Reset_Handler>:
 8002dc8:	480d      	ldr	r0, [pc, #52]	@ (8002e00 <LoopForever+0x2>)
 8002dca:	4685      	mov	sp, r0
 8002dcc:	f7ff ffea 	bl	8002da4 <SystemInit>
 8002dd0:	480c      	ldr	r0, [pc, #48]	@ (8002e04 <LoopForever+0x6>)
 8002dd2:	490d      	ldr	r1, [pc, #52]	@ (8002e08 <LoopForever+0xa>)
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e0c <LoopForever+0xe>)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e002      	b.n	8002de0 <LoopCopyDataInit>

08002dda <CopyDataInit>:
 8002dda:	58d4      	ldr	r4, [r2, r3]
 8002ddc:	50c4      	str	r4, [r0, r3]
 8002dde:	3304      	adds	r3, #4

08002de0 <LoopCopyDataInit>:
 8002de0:	18c4      	adds	r4, r0, r3
 8002de2:	428c      	cmp	r4, r1
 8002de4:	d3f9      	bcc.n	8002dda <CopyDataInit>
 8002de6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e10 <LoopForever+0x12>)
 8002de8:	4c0a      	ldr	r4, [pc, #40]	@ (8002e14 <LoopForever+0x16>)
 8002dea:	2300      	movs	r3, #0
 8002dec:	e001      	b.n	8002df2 <LoopFillZerobss>

08002dee <FillZerobss>:
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	3204      	adds	r2, #4

08002df2 <LoopFillZerobss>:
 8002df2:	42a2      	cmp	r2, r4
 8002df4:	d3fb      	bcc.n	8002dee <FillZerobss>
 8002df6:	f005 fb35 	bl	8008464 <__libc_init_array>
 8002dfa:	f7fe fd9f 	bl	800193c <main>

08002dfe <LoopForever>:
 8002dfe:	e7fe      	b.n	8002dfe <LoopForever>
 8002e00:	20020000 	.word	0x20020000
 8002e04:	20000000 	.word	0x20000000
 8002e08:	200000a0 	.word	0x200000a0
 8002e0c:	0800b884 	.word	0x0800b884
 8002e10:	200000a0 	.word	0x200000a0
 8002e14:	20000524 	.word	0x20000524

08002e18 <ADC1_2_IRQHandler>:
 8002e18:	e7fe      	b.n	8002e18 <ADC1_2_IRQHandler>

08002e1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e24:	2003      	movs	r0, #3
 8002e26:	f000 f95b 	bl	80030e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e2a:	200f      	movs	r0, #15
 8002e2c:	f000 f80e 	bl	8002e4c <HAL_InitTick>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	71fb      	strb	r3, [r7, #7]
 8002e3a:	e001      	b.n	8002e40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e3c:	f7ff fd7a 	bl	8002934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e40:	79fb      	ldrb	r3, [r7, #7]

}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e58:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <HAL_InitTick+0x68>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d022      	beq.n	8002ea6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002e60:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <HAL_InitTick+0x6c>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <HAL_InitTick+0x68>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 f966 	bl	8003146 <HAL_SYSTICK_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10f      	bne.n	8002ea0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	d809      	bhi.n	8002e9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e86:	2200      	movs	r2, #0
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8e:	f000 f932 	bl	80030f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e92:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <HAL_InitTick+0x70>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	e007      	b.n	8002eaa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
 8002e9e:	e004      	b.n	8002eaa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e001      	b.n	8002eaa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	2000004c 	.word	0x2000004c
 8002eb8:	20000044 	.word	0x20000044
 8002ebc:	20000048 	.word	0x20000048

08002ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_IncTick+0x1c>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <HAL_IncTick+0x20>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	4a03      	ldr	r2, [pc, #12]	@ (8002edc <HAL_IncTick+0x1c>)
 8002ed0:	6013      	str	r3, [r2, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	200003d8 	.word	0x200003d8
 8002ee0:	2000004c 	.word	0x2000004c

08002ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	@ (8002ef8 <HAL_GetTick+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	200003d8 	.word	0x200003d8

08002efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f04:	f7ff ffee 	bl	8002ee4 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d004      	beq.n	8002f20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f16:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_Delay+0x40>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f20:	bf00      	nop
 8002f22:	f7ff ffdf 	bl	8002ee4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d8f7      	bhi.n	8002f22 <HAL_Delay+0x26>
  {
  }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	2000004c 	.word	0x2000004c

08002f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f72:	4a04      	ldr	r2, [pc, #16]	@ (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	60d3      	str	r3, [r2, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 0307 	and.w	r3, r3, #7
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db0b      	blt.n	8002fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4907      	ldr	r1, [pc, #28]	@ (8002fdc <__NVIC_EnableIRQ+0x38>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db0a      	blt.n	800300a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	490c      	ldr	r1, [pc, #48]	@ (800302c <__NVIC_SetPriority+0x4c>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	440b      	add	r3, r1
 8003004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003008:	e00a      	b.n	8003020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4908      	ldr	r1, [pc, #32]	@ (8003030 <__NVIC_SetPriority+0x50>)
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	3b04      	subs	r3, #4
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	440b      	add	r3, r1
 800301e:	761a      	strb	r2, [r3, #24]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000e100 	.word	0xe000e100
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f1c3 0307 	rsb	r3, r3, #7
 800304e:	2b04      	cmp	r3, #4
 8003050:	bf28      	it	cs
 8003052:	2304      	movcs	r3, #4
 8003054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3304      	adds	r3, #4
 800305a:	2b06      	cmp	r3, #6
 800305c:	d902      	bls.n	8003064 <NVIC_EncodePriority+0x30>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3b03      	subs	r3, #3
 8003062:	e000      	b.n	8003066 <NVIC_EncodePriority+0x32>
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	f04f 32ff 	mov.w	r2, #4294967295
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	401a      	ands	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800307c:	f04f 31ff 	mov.w	r1, #4294967295
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43d9      	mvns	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	4313      	orrs	r3, r2
         );
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	@ 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030ac:	d301      	bcc.n	80030b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b2:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <SysTick_Config+0x40>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ba:	210f      	movs	r1, #15
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f7ff ff8e 	bl	8002fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c4:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <SysTick_Config+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ca:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <SysTick_Config+0x40>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000e010 	.word	0xe000e010

080030e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff29 	bl	8002f40 <__NVIC_SetPriorityGrouping>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003104:	f7ff ff40 	bl	8002f88 <__NVIC_GetPriorityGrouping>
 8003108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7ff ff90 	bl	8003034 <NVIC_EncodePriority>
 8003114:	4602      	mov	r2, r0
 8003116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff5f 	bl	8002fe0 <__NVIC_SetPriority>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff33 	bl	8002fa4 <__NVIC_EnableIRQ>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ffa4 	bl	800309c <SysTick_Config>
 8003154:	4603      	mov	r3, r0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e014      	b.n	800319a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	791b      	ldrb	r3, [r3, #4]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fbfb 	bl	800297c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0b2      	b.n	8003322 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	795b      	ldrb	r3, [r3, #5]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_DAC_Start_DMA+0x24>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e0ac      	b.n	8003322 <HAL_DAC_Start_DMA+0x17e>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2202      	movs	r2, #2
 80031d2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d129      	bne.n	800322e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4a53      	ldr	r2, [pc, #332]	@ (800332c <HAL_DAC_Start_DMA+0x188>)
 80031e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	4a52      	ldr	r2, [pc, #328]	@ (8003330 <HAL_DAC_Start_DMA+0x18c>)
 80031e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4a51      	ldr	r2, [pc, #324]	@ (8003334 <HAL_DAC_Start_DMA+0x190>)
 80031f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003200:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_DAC_Start_DMA+0x6c>
 8003208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320a:	2b04      	cmp	r3, #4
 800320c:	d005      	beq.n	800321a <HAL_DAC_Start_DMA+0x76>
 800320e:	e009      	b.n	8003224 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3308      	adds	r3, #8
 8003216:	61bb      	str	r3, [r7, #24]
        break;
 8003218:	e033      	b.n	8003282 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	61bb      	str	r3, [r7, #24]
        break;
 8003222:	e02e      	b.n	8003282 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3310      	adds	r3, #16
 800322a:	61bb      	str	r3, [r7, #24]
        break;
 800322c:	e029      	b.n	8003282 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	4a41      	ldr	r2, [pc, #260]	@ (8003338 <HAL_DAC_Start_DMA+0x194>)
 8003234:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4a40      	ldr	r2, [pc, #256]	@ (800333c <HAL_DAC_Start_DMA+0x198>)
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4a3f      	ldr	r2, [pc, #252]	@ (8003340 <HAL_DAC_Start_DMA+0x19c>)
 8003244:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003254:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_DAC_Start_DMA+0xc0>
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	2b04      	cmp	r3, #4
 8003260:	d005      	beq.n	800326e <HAL_DAC_Start_DMA+0xca>
 8003262:	e009      	b.n	8003278 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3314      	adds	r3, #20
 800326a:	61bb      	str	r3, [r7, #24]
        break;
 800326c:	e009      	b.n	8003282 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3318      	adds	r3, #24
 8003274:	61bb      	str	r3, [r7, #24]
        break;
 8003276:	e004      	b.n	8003282 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	331c      	adds	r3, #28
 800327e:	61bb      	str	r3, [r7, #24]
        break;
 8003280:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d111      	bne.n	80032ac <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003296:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6898      	ldr	r0, [r3, #8]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	f000 fba9 	bl	80039f8 <HAL_DMA_Start_IT>
 80032a6:	4603      	mov	r3, r0
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e010      	b.n	80032ce <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80032ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68d8      	ldr	r0, [r3, #12]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	f000 fb97 	bl	80039f8 <HAL_DMA_Start_IT>
 80032ca:	4603      	mov	r3, r0
 80032cc:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80032d4:	7ffb      	ldrb	r3, [r7, #31]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11c      	bne.n	8003314 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2201      	movs	r2, #1
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032f2:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <HAL_DAC_Start_DMA+0x1a0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	4a13      	ldr	r2, [pc, #76]	@ (8003348 <HAL_DAC_Start_DMA+0x1a4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	3301      	adds	r3, #1
 8003302:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003304:	e002      	b.n	800330c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3b01      	subs	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f9      	bne.n	8003306 <HAL_DAC_Start_DMA+0x162>
 8003312:	e005      	b.n	8003320 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003320:	7ffb      	ldrb	r3, [r7, #31]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	08003795 	.word	0x08003795
 8003330:	080037b7 	.word	0x080037b7
 8003334:	080037d3 	.word	0x080037d3
 8003338:	0800383d 	.word	0x0800383d
 800333c:	0800385f 	.word	0x0800385f
 8003340:	0800387b 	.word	0x0800387b
 8003344:	20000044 	.word	0x20000044
 8003348:	053e2d63 	.word	0x053e2d63

0800334c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e03e      	b.n	80033de <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43da      	mvns	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	400a      	ands	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2201      	movs	r2, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43da      	mvns	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	400a      	ands	r2, r1
 8003398:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fba2 	bl	8003aee <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e00c      	b.n	80033d6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fb94 	bl	8003aee <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80033d4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	@ 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_DAC_ConfigChannel+0x1c>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e19e      	b.n	8003782 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	795b      	ldrb	r3, [r3, #5]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_DAC_ConfigChannel+0x2c>
 800344c:	2302      	movs	r3, #2
 800344e:	e198      	b.n	8003782 <HAL_DAC_ConfigChannel+0x35e>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2202      	movs	r2, #2
 800345a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d17a      	bne.n	800355a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003464:	f7ff fd3e 	bl	8002ee4 <HAL_GetTick>
 8003468:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d13d      	bne.n	80034ec <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003470:	e018      	b.n	80034a4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003472:	f7ff fd37 	bl	8002ee4 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d911      	bls.n	80034a4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003486:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f043 0208 	orr.w	r2, r3, #8
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2203      	movs	r2, #3
 800349e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e16e      	b.n	8003782 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1df      	bne.n	8003472 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80034bc:	e020      	b.n	8003500 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034be:	f7ff fd11 	bl	8002ee4 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d90f      	bls.n	80034ec <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da0a      	bge.n	80034ec <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f043 0208 	orr.w	r2, r3, #8
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2203      	movs	r2, #3
 80034e6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e14a      	b.n	8003782 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	dbe3      	blt.n	80034be <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	ea02 0103 	and.w	r1, r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	409a      	lsls	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	21ff      	movs	r1, #255	@ 0xff
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	ea02 0103 	and.w	r1, r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d11d      	bne.n	800359e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	221f      	movs	r2, #31
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357a:	4013      	ands	r3, r2
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003592:	4313      	orrs	r3, r2
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2207      	movs	r2, #7
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	4013      	ands	r3, r2
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d102      	bne.n	80035c8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	e00f      	b.n	80035e8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d102      	bne.n	80035d6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80035d0:	2301      	movs	r3, #1
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	e008      	b.n	80035e8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80035de:	2301      	movs	r3, #1
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	e001      	b.n	80035e8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	6a3a      	ldr	r2, [r7, #32]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360a:	4013      	ands	r3, r2
 800360c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	791b      	ldrb	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d102      	bne.n	800361c <HAL_DAC_ConfigChannel+0x1f8>
 8003616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800361a:	e000      	b.n	800361e <HAL_DAC_ConfigChannel+0x1fa>
 800361c:	2300      	movs	r3, #0
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003636:	4013      	ands	r3, r2
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	795b      	ldrb	r3, [r3, #5]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_DAC_ConfigChannel+0x224>
 8003642:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003646:	e000      	b.n	800364a <HAL_DAC_ConfigChannel+0x226>
 8003648:	2300      	movs	r3, #0
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d114      	bne.n	800368a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003660:	f001 fc06 	bl	8004e70 <HAL_RCC_GetHCLKFreq>
 8003664:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4a48      	ldr	r2, [pc, #288]	@ (800378c <HAL_DAC_ConfigChannel+0x368>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d904      	bls.n	8003678 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
 8003676:	e00f      	b.n	8003698 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4a45      	ldr	r2, [pc, #276]	@ (8003790 <HAL_DAC_ConfigChannel+0x36c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d90a      	bls.n	8003696 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
 8003688:	e006      	b.n	8003698 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003690:	4313      	orrs	r3, r2
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
 8003694:	e000      	b.n	8003698 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003696:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a6:	4313      	orrs	r3, r2
 80036a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	400a      	ands	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ea:	4013      	ands	r3, r2
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003702:	4313      	orrs	r3, r2
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6819      	ldr	r1, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	22c0      	movs	r2, #192	@ 0xc0
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43da      	mvns	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	400a      	ands	r2, r1
 8003728:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	ea02 0103 	and.w	r1, r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003780:	7ffb      	ldrb	r3, [r7, #31]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3728      	adds	r7, #40	@ 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	09896800 	.word	0x09896800
 8003790:	04c4b400 	.word	0x04c4b400

08003794 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff fe1f 	bl	80033e6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	711a      	strb	r2, [r3, #4]
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7ff fe18 	bl	80033fa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff fe0e 	bl	800340e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	711a      	strb	r2, [r3, #4]
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff ffd8 	bl	8003800 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	711a      	strb	r2, [r3, #4]
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff ffd1 	bl	8003814 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f043 0204 	orr.w	r2, r3, #4
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff ffc7 	bl	8003828 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	711a      	strb	r2, [r3, #4]
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e08d      	b.n	80039d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_DMA_Init+0x138>)
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d80f      	bhi.n	80038e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b45      	ldr	r3, [pc, #276]	@ (80039e4 <HAL_DMA_Init+0x13c>)
 80038ce:	4413      	add	r3, r2
 80038d0:	4a45      	ldr	r2, [pc, #276]	@ (80039e8 <HAL_DMA_Init+0x140>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	009a      	lsls	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a42      	ldr	r2, [pc, #264]	@ (80039ec <HAL_DMA_Init+0x144>)
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80038e4:	e00e      	b.n	8003904 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b40      	ldr	r3, [pc, #256]	@ (80039f0 <HAL_DMA_Init+0x148>)
 80038ee:	4413      	add	r3, r2
 80038f0:	4a3d      	ldr	r2, [pc, #244]	@ (80039e8 <HAL_DMA_Init+0x140>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	009a      	lsls	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a3c      	ldr	r2, [pc, #240]	@ (80039f4 <HAL_DMA_Init+0x14c>)
 8003902:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800391a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003928:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa10 	bl	8003d7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003964:	d102      	bne.n	800396c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003980:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d010      	beq.n	80039ac <HAL_DMA_Init+0x104>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d80c      	bhi.n	80039ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa30 	bl	8003df8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	e008      	b.n	80039be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40020407 	.word	0x40020407
 80039e4:	bffdfff8 	.word	0xbffdfff8
 80039e8:	cccccccd 	.word	0xcccccccd
 80039ec:	40020000 	.word	0x40020000
 80039f0:	bffdfbf8 	.word	0xbffdfbf8
 80039f4:	40020400 	.word	0x40020400

080039f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_DMA_Start_IT+0x20>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e066      	b.n	8003ae6 <HAL_DMA_Start_IT+0xee>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d155      	bne.n	8003ad8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f954 	bl	8003cfe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 020e 	orr.w	r2, r2, #14
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e00f      	b.n	8003a90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 020a 	orr.w	r2, r2, #10
 8003a8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e005      	b.n	8003ae4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d005      	beq.n	8003b12 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e037      	b.n	8003b82 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 020e 	bic.w	r2, r2, #14
 8003b20:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b30:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f003 021f 	and.w	r2, r3, #31
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b5e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b76:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b80:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d026      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x7a>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d021      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d107      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0204 	bic.w	r2, r2, #4
 8003bf2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf8:	f003 021f 	and.w	r2, r3, #31
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c00:	2104      	movs	r1, #4
 8003c02:	fa01 f202 	lsl.w	r2, r1, r2
 8003c06:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d071      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c18:	e06c      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2202      	movs	r2, #2
 8003c24:	409a      	lsls	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d02e      	beq.n	8003c8c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d029      	beq.n	8003c8c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 020a 	bic.w	r2, r2, #10
 8003c54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f003 021f 	and.w	r2, r3, #31
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d038      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c8a:	e033      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2208      	movs	r2, #8
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d02a      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d025      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 020e 	bic.w	r2, r2, #14
 8003cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f003 021f 	and.w	r2, r3, #31
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ccc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
}
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d14:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d108      	bne.n	8003d5e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d5c:	e007      	b.n	8003d6e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	60da      	str	r2, [r3, #12]
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b16      	ldr	r3, [pc, #88]	@ (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d802      	bhi.n	8003d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d90:	4b15      	ldr	r3, [pc, #84]	@ (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e001      	b.n	8003d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003d96:	4b15      	ldr	r3, [pc, #84]	@ (8003dec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d98:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	3b08      	subs	r3, #8
 8003da6:	4a12      	ldr	r2, [pc, #72]	@ (8003df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	009a      	lsls	r2, r3, #2
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8003df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003dc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	2201      	movs	r2, #1
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40020407 	.word	0x40020407
 8003de8:	40020800 	.word	0x40020800
 8003dec:	40020820 	.word	0x40020820
 8003df0:	cccccccd 	.word	0xcccccccd
 8003df4:	40020880 	.word	0x40020880

08003df8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a08      	ldr	r2, [pc, #32]	@ (8003e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e1a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	2201      	movs	r2, #1
 8003e26:	409a      	lsls	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	1000823f 	.word	0x1000823f
 8003e3c:	40020940 	.word	0x40020940

08003e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e4e:	e15a      	b.n	8004106 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 814c 	beq.w	8004100 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d005      	beq.n	8003e80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d130      	bne.n	8003ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f003 0201 	and.w	r2, r3, #1
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d017      	beq.n	8003f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	2203      	movs	r2, #3
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d123      	bne.n	8003f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	08da      	lsrs	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3208      	adds	r2, #8
 8003f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	220f      	movs	r2, #15
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	08da      	lsrs	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3208      	adds	r2, #8
 8003f6c:	6939      	ldr	r1, [r7, #16]
 8003f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f003 0203 	and.w	r2, r3, #3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80a6 	beq.w	8004100 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8004124 <HAL_GPIO_Init+0x2e4>)
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb8:	4a5a      	ldr	r2, [pc, #360]	@ (8004124 <HAL_GPIO_Init+0x2e4>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fc0:	4b58      	ldr	r3, [pc, #352]	@ (8004124 <HAL_GPIO_Init+0x2e4>)
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fcc:	4a56      	ldr	r2, [pc, #344]	@ (8004128 <HAL_GPIO_Init+0x2e8>)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	220f      	movs	r2, #15
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ff6:	d01f      	beq.n	8004038 <HAL_GPIO_Init+0x1f8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a4c      	ldr	r2, [pc, #304]	@ (800412c <HAL_GPIO_Init+0x2ec>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d019      	beq.n	8004034 <HAL_GPIO_Init+0x1f4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a4b      	ldr	r2, [pc, #300]	@ (8004130 <HAL_GPIO_Init+0x2f0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_GPIO_Init+0x1f0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <HAL_GPIO_Init+0x2f4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00d      	beq.n	800402c <HAL_GPIO_Init+0x1ec>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a49      	ldr	r2, [pc, #292]	@ (8004138 <HAL_GPIO_Init+0x2f8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d007      	beq.n	8004028 <HAL_GPIO_Init+0x1e8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a48      	ldr	r2, [pc, #288]	@ (800413c <HAL_GPIO_Init+0x2fc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <HAL_GPIO_Init+0x1e4>
 8004020:	2305      	movs	r3, #5
 8004022:	e00a      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004024:	2306      	movs	r3, #6
 8004026:	e008      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004028:	2304      	movs	r3, #4
 800402a:	e006      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 800402c:	2303      	movs	r3, #3
 800402e:	e004      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004030:	2302      	movs	r3, #2
 8004032:	e002      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_GPIO_Init+0x1fa>
 8004038:	2300      	movs	r3, #0
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	f002 0203 	and.w	r2, r2, #3
 8004040:	0092      	lsls	r2, r2, #2
 8004042:	4093      	lsls	r3, r2
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800404a:	4937      	ldr	r1, [pc, #220]	@ (8004128 <HAL_GPIO_Init+0x2e8>)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004058:	4b39      	ldr	r3, [pc, #228]	@ (8004140 <HAL_GPIO_Init+0x300>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	43db      	mvns	r3, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800407c:	4a30      	ldr	r2, [pc, #192]	@ (8004140 <HAL_GPIO_Init+0x300>)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004082:	4b2f      	ldr	r3, [pc, #188]	@ (8004140 <HAL_GPIO_Init+0x300>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	43db      	mvns	r3, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040a6:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <HAL_GPIO_Init+0x300>)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80040ac:	4b24      	ldr	r3, [pc, #144]	@ (8004140 <HAL_GPIO_Init+0x300>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004140 <HAL_GPIO_Init+0x300>)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <HAL_GPIO_Init+0x300>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040fa:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <HAL_GPIO_Init+0x300>)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3301      	adds	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	f47f ae9d 	bne.w	8003e50 <HAL_GPIO_Init+0x10>
  }
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40021000 	.word	0x40021000
 8004128:	40010000 	.word	0x40010000
 800412c:	48000400 	.word	0x48000400
 8004130:	48000800 	.word	0x48000800
 8004134:	48000c00 	.word	0x48000c00
 8004138:	48001000 	.word	0x48001000
 800413c:	48001400 	.word	0x48001400
 8004140:	40010400 	.word	0x40010400

08004144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	887b      	ldrh	r3, [r7, #2]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e001      	b.n	8004166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004184:	787b      	ldrb	r3, [r7, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004190:	e002      	b.n	8004198 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e0bb      	b.n	8004332 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d101      	bne.n	80041ca <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e0b3      	b.n	8004332 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d101      	bne.n	80041da <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e0ab      	b.n	8004332 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041da:	4b58      	ldr	r3, [pc, #352]	@ (800433c <HAL_OPAMP_Init+0x198>)
 80041dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041de:	4a57      	ldr	r2, [pc, #348]	@ (800433c <HAL_OPAMP_Init+0x198>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80041e6:	4b55      	ldr	r3, [pc, #340]	@ (800433c <HAL_OPAMP_Init+0x198>)
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe fc34 	bl	8002a74 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b40      	cmp	r3, #64	@ 0x40
 8004212:	d003      	beq.n	800421c <HAL_OPAMP_Init+0x78>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b60      	cmp	r3, #96	@ 0x60
 800421a:	d133      	bne.n	8004284 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 0110 	bic.w	r1, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b41      	ldr	r3, [pc, #260]	@ (8004340 <HAL_OPAMP_Init+0x19c>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6851      	ldr	r1, [r2, #4]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6892      	ldr	r2, [r2, #8]
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6912      	ldr	r2, [r2, #16]
 800424a:	430a      	orrs	r2, r1
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	7d09      	ldrb	r1, [r1, #20]
 8004250:	2901      	cmp	r1, #1
 8004252:	d102      	bne.n	800425a <HAL_OPAMP_Init+0xb6>
 8004254:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004258:	e000      	b.n	800425c <HAL_OPAMP_Init+0xb8>
 800425a:	2100      	movs	r1, #0
 800425c:	4311      	orrs	r1, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004262:	4311      	orrs	r1, r2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800426e:	04d2      	lsls	r2, r2, #19
 8004270:	4311      	orrs	r1, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004276:	0612      	lsls	r2, r2, #24
 8004278:	4311      	orrs	r1, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	430b      	orrs	r3, r1
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e035      	b.n	80042f0 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 0110 	bic.w	r1, r3, #16
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <HAL_OPAMP_Init+0x19c>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6851      	ldr	r1, [r2, #4]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	4311      	orrs	r1, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6912      	ldr	r2, [r2, #16]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	7d09      	ldrb	r1, [r1, #20]
 80042be:	2901      	cmp	r1, #1
 80042c0:	d102      	bne.n	80042c8 <HAL_OPAMP_Init+0x124>
 80042c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042c6:	e000      	b.n	80042ca <HAL_OPAMP_Init+0x126>
 80042c8:	2100      	movs	r1, #0
 80042ca:	4311      	orrs	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042d6:	4311      	orrs	r1, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042dc:	04d2      	lsls	r2, r2, #19
 80042de:	4311      	orrs	r1, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042e4:	0612      	lsls	r2, r2, #24
 80042e6:	4311      	orrs	r1, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	db10      	blt.n	800431c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	e0003e11 	.word	0xe0003e11

08004344 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	e01d      	b.n	8004398 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b05      	cmp	r3, #5
 8004366:	d102      	bne.n	800436e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	e014      	b.n	8004398 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d10c      	bne.n	8004394 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2204      	movs	r2, #4
 800438e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004392:	e001      	b.n	8004398 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d141      	bne.n	800443a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043b6:	4b4b      	ldr	r3, [pc, #300]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c2:	d131      	bne.n	8004428 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c4:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ca:	4a46      	ldr	r2, [pc, #280]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d4:	4b43      	ldr	r3, [pc, #268]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043dc:	4a41      	ldr	r2, [pc, #260]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e4:	4b40      	ldr	r3, [pc, #256]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2232      	movs	r2, #50	@ 0x32
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	4a3f      	ldr	r2, [pc, #252]	@ (80044ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	0c9b      	lsrs	r3, r3, #18
 80043f6:	3301      	adds	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fa:	e002      	b.n	8004402 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3b01      	subs	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004402:	4b38      	ldr	r3, [pc, #224]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440e:	d102      	bne.n	8004416 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f2      	bne.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004416:	4b33      	ldr	r3, [pc, #204]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004422:	d158      	bne.n	80044d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e057      	b.n	80044d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004428:	4b2e      	ldr	r3, [pc, #184]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800442e:	4a2d      	ldr	r2, [pc, #180]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004434:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004438:	e04d      	b.n	80044d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004440:	d141      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004442:	4b28      	ldr	r3, [pc, #160]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444e:	d131      	bne.n	80044b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004450:	4b24      	ldr	r3, [pc, #144]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004456:	4a23      	ldr	r2, [pc, #140]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004460:	4b20      	ldr	r3, [pc, #128]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004468:	4a1e      	ldr	r2, [pc, #120]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800446e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004470:	4b1d      	ldr	r3, [pc, #116]	@ (80044e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2232      	movs	r2, #50	@ 0x32
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	4a1c      	ldr	r2, [pc, #112]	@ (80044ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	0c9b      	lsrs	r3, r3, #18
 8004482:	3301      	adds	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004486:	e002      	b.n	800448e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3b01      	subs	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800448e:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449a:	d102      	bne.n	80044a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f2      	bne.n	8004488 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ae:	d112      	bne.n	80044d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e011      	b.n	80044d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044b4:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ba:	4a0a      	ldr	r2, [pc, #40]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044c4:	e007      	b.n	80044d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044c6:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044ce:	4a05      	ldr	r2, [pc, #20]	@ (80044e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40007000 	.word	0x40007000
 80044e8:	20000044 	.word	0x20000044
 80044ec:	431bde83 	.word	0x431bde83

080044f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044f4:	4b05      	ldr	r3, [pc, #20]	@ (800450c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4a04      	ldr	r2, [pc, #16]	@ (800450c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044fe:	6093      	str	r3, [r2, #8]
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40007000 	.word	0x40007000

08004510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e2fe      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d075      	beq.n	800461a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452e:	4b97      	ldr	r3, [pc, #604]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004538:	4b94      	ldr	r3, [pc, #592]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b0c      	cmp	r3, #12
 8004546:	d102      	bne.n	800454e <HAL_RCC_OscConfig+0x3e>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d002      	beq.n	8004554 <HAL_RCC_OscConfig+0x44>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d10b      	bne.n	800456c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	4b8d      	ldr	r3, [pc, #564]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d05b      	beq.n	8004618 <HAL_RCC_OscConfig+0x108>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d157      	bne.n	8004618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e2d9      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004574:	d106      	bne.n	8004584 <HAL_RCC_OscConfig+0x74>
 8004576:	4b85      	ldr	r3, [pc, #532]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a84      	ldr	r2, [pc, #528]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e01d      	b.n	80045c0 <HAL_RCC_OscConfig+0xb0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x98>
 800458e:	4b7f      	ldr	r3, [pc, #508]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a7e      	ldr	r2, [pc, #504]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004594:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4b7c      	ldr	r3, [pc, #496]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7b      	ldr	r2, [pc, #492]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e00b      	b.n	80045c0 <HAL_RCC_OscConfig+0xb0>
 80045a8:	4b78      	ldr	r3, [pc, #480]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a77      	ldr	r2, [pc, #476]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4b75      	ldr	r3, [pc, #468]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a74      	ldr	r2, [pc, #464]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80045ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d013      	beq.n	80045f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe fc8c 	bl	8002ee4 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fe fc88 	bl	8002ee4 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	@ 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e29e      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e2:	4b6a      	ldr	r3, [pc, #424]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0xc0>
 80045ee:	e014      	b.n	800461a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe fc78 	bl	8002ee4 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f8:	f7fe fc74 	bl	8002ee4 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	@ 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e28a      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800460a:	4b60      	ldr	r3, [pc, #384]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0xe8>
 8004616:	e000      	b.n	800461a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d075      	beq.n	8004712 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004626:	4b59      	ldr	r3, [pc, #356]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004630:	4b56      	ldr	r3, [pc, #344]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d102      	bne.n	8004646 <HAL_RCC_OscConfig+0x136>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d002      	beq.n	800464c <HAL_RCC_OscConfig+0x13c>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b04      	cmp	r3, #4
 800464a:	d11f      	bne.n	800468c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800464c:	4b4f      	ldr	r3, [pc, #316]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_OscConfig+0x154>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e25d      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004664:	4b49      	ldr	r3, [pc, #292]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	061b      	lsls	r3, r3, #24
 8004672:	4946      	ldr	r1, [pc, #280]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004678:	4b45      	ldr	r3, [pc, #276]	@ (8004790 <HAL_RCC_OscConfig+0x280>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe fbe5 	bl	8002e4c <HAL_InitTick>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d043      	beq.n	8004710 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e249      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004694:	4b3d      	ldr	r3, [pc, #244]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a3c      	ldr	r2, [pc, #240]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 800469a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800469e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe fc20 	bl	8002ee4 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a8:	f7fe fc1c 	bl	8002ee4 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e232      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ba:	4b34      	ldr	r3, [pc, #208]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c6:	4b31      	ldr	r3, [pc, #196]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	061b      	lsls	r3, r3, #24
 80046d4:	492d      	ldr	r1, [pc, #180]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	604b      	str	r3, [r1, #4]
 80046da:	e01a      	b.n	8004712 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046dc:	4b2b      	ldr	r3, [pc, #172]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2a      	ldr	r2, [pc, #168]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 80046e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fe fbfc 	bl	8002ee4 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f0:	f7fe fbf8 	bl	8002ee4 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e20e      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004702:	4b22      	ldr	r3, [pc, #136]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x1e0>
 800470e:	e000      	b.n	8004712 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004710:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d041      	beq.n	80047a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01c      	beq.n	8004760 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004726:	4b19      	ldr	r3, [pc, #100]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472c:	4a17      	ldr	r2, [pc, #92]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004736:	f7fe fbd5 	bl	8002ee4 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473e:	f7fe fbd1 	bl	8002ee4 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e1e7      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004750:	4b0e      	ldr	r3, [pc, #56]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0ef      	beq.n	800473e <HAL_RCC_OscConfig+0x22e>
 800475e:	e020      	b.n	80047a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004760:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004766:	4a09      	ldr	r2, [pc, #36]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fe fbb8 	bl	8002ee4 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004776:	e00d      	b.n	8004794 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004778:	f7fe fbb4 	bl	8002ee4 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d906      	bls.n	8004794 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1ca      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
 8004790:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004794:	4b8c      	ldr	r3, [pc, #560]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1ea      	bne.n	8004778 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80a6 	beq.w	80048fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b0:	2300      	movs	r3, #0
 80047b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047b4:	4b84      	ldr	r3, [pc, #528]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_OscConfig+0x2b4>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x2b6>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00d      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	4b7f      	ldr	r3, [pc, #508]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ce:	4a7e      	ldr	r2, [pc, #504]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80047d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d6:	4b7c      	ldr	r3, [pc, #496]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80047d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047e2:	2301      	movs	r3, #1
 80047e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e6:	4b79      	ldr	r3, [pc, #484]	@ (80049cc <HAL_RCC_OscConfig+0x4bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d118      	bne.n	8004824 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f2:	4b76      	ldr	r3, [pc, #472]	@ (80049cc <HAL_RCC_OscConfig+0x4bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a75      	ldr	r2, [pc, #468]	@ (80049cc <HAL_RCC_OscConfig+0x4bc>)
 80047f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fe:	f7fe fb71 	bl	8002ee4 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004806:	f7fe fb6d 	bl	8002ee4 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e183      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004818:	4b6c      	ldr	r3, [pc, #432]	@ (80049cc <HAL_RCC_OscConfig+0x4bc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d108      	bne.n	800483e <HAL_RCC_OscConfig+0x32e>
 800482c:	4b66      	ldr	r3, [pc, #408]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	4a65      	ldr	r2, [pc, #404]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800483c:	e024      	b.n	8004888 <HAL_RCC_OscConfig+0x378>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b05      	cmp	r3, #5
 8004844:	d110      	bne.n	8004868 <HAL_RCC_OscConfig+0x358>
 8004846:	4b60      	ldr	r3, [pc, #384]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	4a5e      	ldr	r2, [pc, #376]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 800484e:	f043 0304 	orr.w	r3, r3, #4
 8004852:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004856:	4b5c      	ldr	r3, [pc, #368]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485c:	4a5a      	ldr	r2, [pc, #360]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004866:	e00f      	b.n	8004888 <HAL_RCC_OscConfig+0x378>
 8004868:	4b57      	ldr	r3, [pc, #348]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486e:	4a56      	ldr	r2, [pc, #344]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004878:	4b53      	ldr	r3, [pc, #332]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	4a52      	ldr	r2, [pc, #328]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d016      	beq.n	80048be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fe fb28 	bl	8002ee4 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fe fb24 	bl	8002ee4 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e138      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ae:	4b46      	ldr	r3, [pc, #280]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ed      	beq.n	8004898 <HAL_RCC_OscConfig+0x388>
 80048bc:	e015      	b.n	80048ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048be:	f7fe fb11 	bl	8002ee4 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c4:	e00a      	b.n	80048dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fe fb0d 	bl	8002ee4 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e121      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048dc:	4b3a      	ldr	r3, [pc, #232]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1ed      	bne.n	80048c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048ea:	7ffb      	ldrb	r3, [r7, #31]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f0:	4b35      	ldr	r3, [pc, #212]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f4:	4a34      	ldr	r2, [pc, #208]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d03c      	beq.n	8004982 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01c      	beq.n	800494a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004910:	4b2d      	ldr	r3, [pc, #180]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004916:	4a2c      	ldr	r2, [pc, #176]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fe fae0 	bl	8002ee4 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004928:	f7fe fadc 	bl	8002ee4 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e0f2      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800493a:	4b23      	ldr	r3, [pc, #140]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 800493c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ef      	beq.n	8004928 <HAL_RCC_OscConfig+0x418>
 8004948:	e01b      	b.n	8004982 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800494a:	4b1f      	ldr	r3, [pc, #124]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 800494c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004950:	4a1d      	ldr	r2, [pc, #116]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fe fac3 	bl	8002ee4 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004962:	f7fe fabf 	bl	8002ee4 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e0d5      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004974:	4b14      	ldr	r3, [pc, #80]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 8004976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ef      	bne.n	8004962 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80c9 	beq.w	8004b1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800498c:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b0c      	cmp	r3, #12
 8004996:	f000 8083 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d15e      	bne.n	8004a60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a2:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a08      	ldr	r2, [pc, #32]	@ (80049c8 <HAL_RCC_OscConfig+0x4b8>)
 80049a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fe fa99 	bl	8002ee4 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b4:	e00c      	b.n	80049d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fe fa95 	bl	8002ee4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d905      	bls.n	80049d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0ab      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d0:	4b55      	ldr	r3, [pc, #340]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ec      	bne.n	80049b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049dc:	4b52      	ldr	r3, [pc, #328]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	4b52      	ldr	r3, [pc, #328]	@ (8004b2c <HAL_RCC_OscConfig+0x61c>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6a11      	ldr	r1, [r2, #32]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049ec:	3a01      	subs	r2, #1
 80049ee:	0112      	lsls	r2, r2, #4
 80049f0:	4311      	orrs	r1, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049f6:	0212      	lsls	r2, r2, #8
 80049f8:	4311      	orrs	r1, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049fe:	0852      	lsrs	r2, r2, #1
 8004a00:	3a01      	subs	r2, #1
 8004a02:	0552      	lsls	r2, r2, #21
 8004a04:	4311      	orrs	r1, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a0a:	0852      	lsrs	r2, r2, #1
 8004a0c:	3a01      	subs	r2, #1
 8004a0e:	0652      	lsls	r2, r2, #25
 8004a10:	4311      	orrs	r1, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a16:	06d2      	lsls	r2, r2, #27
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	4943      	ldr	r1, [pc, #268]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a20:	4b41      	ldr	r3, [pc, #260]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a40      	ldr	r2, [pc, #256]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4a3d      	ldr	r2, [pc, #244]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fe fa54 	bl	8002ee4 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fe fa50 	bl	8002ee4 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e066      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a52:	4b35      	ldr	r3, [pc, #212]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x530>
 8004a5e:	e05e      	b.n	8004b1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a60:	4b31      	ldr	r3, [pc, #196]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a30      	ldr	r2, [pc, #192]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fa3a 	bl	8002ee4 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fe fa36 	bl	8002ee4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e04c      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a86:	4b28      	ldr	r3, [pc, #160]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a92:	4b25      	ldr	r3, [pc, #148]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	4924      	ldr	r1, [pc, #144]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004a98:	4b25      	ldr	r3, [pc, #148]	@ (8004b30 <HAL_RCC_OscConfig+0x620>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60cb      	str	r3, [r1, #12]
 8004a9e:	e03e      	b.n	8004b1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e039      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004aac:	4b1e      	ldr	r3, [pc, #120]	@ (8004b28 <HAL_RCC_OscConfig+0x618>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f003 0203 	and.w	r2, r3, #3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d12c      	bne.n	8004b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	3b01      	subs	r3, #1
 8004acc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d123      	bne.n	8004b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d11b      	bne.n	8004b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d113      	bne.n	8004b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	3b01      	subs	r3, #1
 8004b00:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d109      	bne.n	8004b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d001      	beq.n	8004b1e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	019f800c 	.word	0x019f800c
 8004b30:	feeefffc 	.word	0xfeeefffc

08004b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e11e      	b.n	8004d8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b91      	ldr	r3, [pc, #580]	@ (8004d94 <HAL_RCC_ClockConfig+0x260>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d910      	bls.n	8004b7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b8e      	ldr	r3, [pc, #568]	@ (8004d94 <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 020f 	bic.w	r2, r3, #15
 8004b62:	498c      	ldr	r1, [pc, #560]	@ (8004d94 <HAL_RCC_ClockConfig+0x260>)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b8a      	ldr	r3, [pc, #552]	@ (8004d94 <HAL_RCC_ClockConfig+0x260>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e106      	b.n	8004d8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d073      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d129      	bne.n	8004be4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b90:	4b81      	ldr	r3, [pc, #516]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0f4      	b.n	8004d8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ba0:	f000 f972 	bl	8004e88 <RCC_GetSysClockFreqFromPLLSource>
 8004ba4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4a7c      	ldr	r2, [pc, #496]	@ (8004d9c <HAL_RCC_ClockConfig+0x268>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d93f      	bls.n	8004c2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bae:	4b7a      	ldr	r3, [pc, #488]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d033      	beq.n	8004c2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d12f      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bce:	4b72      	ldr	r3, [pc, #456]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bd6:	4a70      	ldr	r2, [pc, #448]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bde:	2380      	movs	r3, #128	@ 0x80
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e024      	b.n	8004c2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bec:	4b6a      	ldr	r3, [pc, #424]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0c6      	b.n	8004d8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bfc:	4b66      	ldr	r3, [pc, #408]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0be      	b.n	8004d8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c0c:	f000 f8ce 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4a61      	ldr	r2, [pc, #388]	@ (8004d9c <HAL_RCC_ClockConfig+0x268>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d909      	bls.n	8004c2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c22:	4a5d      	ldr	r2, [pc, #372]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c2a:	2380      	movs	r3, #128	@ 0x80
 8004c2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c2e:	4b5a      	ldr	r3, [pc, #360]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f023 0203 	bic.w	r2, r3, #3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4957      	ldr	r1, [pc, #348]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c40:	f7fe f950 	bl	8002ee4 <HAL_GetTick>
 8004c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c48:	f7fe f94c 	bl	8002ee4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e095      	b.n	8004d8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 020c 	and.w	r2, r3, #12
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d1eb      	bne.n	8004c48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d023      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c88:	4b43      	ldr	r3, [pc, #268]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4a42      	ldr	r2, [pc, #264]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004c8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004caa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb0:	4b39      	ldr	r3, [pc, #228]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4936      	ldr	r1, [pc, #216]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b80      	cmp	r3, #128	@ 0x80
 8004cc8:	d105      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cca:	4b33      	ldr	r3, [pc, #204]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	4a32      	ldr	r2, [pc, #200]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004cd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cd4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d94 <HAL_RCC_ClockConfig+0x260>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d21d      	bcs.n	8004d20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d94 <HAL_RCC_ClockConfig+0x260>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f023 020f 	bic.w	r2, r3, #15
 8004cec:	4929      	ldr	r1, [pc, #164]	@ (8004d94 <HAL_RCC_ClockConfig+0x260>)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cf4:	f7fe f8f6 	bl	8002ee4 <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fe f8f2 	bl	8002ee4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e03b      	b.n	8004d8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	@ (8004d94 <HAL_RCC_ClockConfig+0x260>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d1ed      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4917      	ldr	r1, [pc, #92]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4a:	4b13      	ldr	r3, [pc, #76]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	490f      	ldr	r1, [pc, #60]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d5e:	f000 f825 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 8004d62:	4602      	mov	r2, r0
 8004d64:	4b0c      	ldr	r3, [pc, #48]	@ (8004d98 <HAL_RCC_ClockConfig+0x264>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	490c      	ldr	r1, [pc, #48]	@ (8004da0 <HAL_RCC_ClockConfig+0x26c>)
 8004d70:	5ccb      	ldrb	r3, [r1, r3]
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004da4 <HAL_RCC_ClockConfig+0x270>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <HAL_RCC_ClockConfig+0x274>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe f862 	bl	8002e4c <HAL_InitTick>
 8004d88:	4603      	mov	r3, r0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	04c4b400 	.word	0x04c4b400
 8004da0:	08008cb4 	.word	0x08008cb4
 8004da4:	20000044 	.word	0x20000044
 8004da8:	20000048 	.word	0x20000048

08004dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004db2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d102      	bne.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	e047      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004dc4:	4b27      	ldr	r3, [pc, #156]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 030c 	and.w	r3, r3, #12
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d102      	bne.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dd0:	4b26      	ldr	r3, [pc, #152]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	e03e      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dd6:	4b23      	ldr	r3, [pc, #140]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d136      	bne.n	8004e50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004de2:	4b20      	ldr	r3, [pc, #128]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dec:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	3301      	adds	r3, #1
 8004df8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d10c      	bne.n	8004e1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e00:	4a1a      	ldr	r2, [pc, #104]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	4a16      	ldr	r2, [pc, #88]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0a:	68d2      	ldr	r2, [r2, #12]
 8004e0c:	0a12      	lsrs	r2, r2, #8
 8004e0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	617b      	str	r3, [r7, #20]
      break;
 8004e18:	e00c      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e1a:	4a13      	ldr	r2, [pc, #76]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	4a10      	ldr	r2, [pc, #64]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e24:	68d2      	ldr	r2, [r2, #12]
 8004e26:	0a12      	lsrs	r2, r2, #8
 8004e28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e2c:	fb02 f303 	mul.w	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]
      break;
 8004e32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	0e5b      	lsrs	r3, r3, #25
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	3301      	adds	r3, #1
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	e001      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e54:	693b      	ldr	r3, [r7, #16]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000
 8004e68:	00f42400 	.word	0x00f42400
 8004e6c:	017d7840 	.word	0x017d7840

08004e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e74:	4b03      	ldr	r3, [pc, #12]	@ (8004e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e76:	681b      	ldr	r3, [r3, #0]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000044 	.word	0x20000044

08004e88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e98:	4b1b      	ldr	r3, [pc, #108]	@ (8004f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d10c      	bne.n	8004ec6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eac:	4a17      	ldr	r2, [pc, #92]	@ (8004f0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	4a14      	ldr	r2, [pc, #80]	@ (8004f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eb6:	68d2      	ldr	r2, [r2, #12]
 8004eb8:	0a12      	lsrs	r2, r2, #8
 8004eba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	617b      	str	r3, [r7, #20]
    break;
 8004ec4:	e00c      	b.n	8004ee0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ec6:	4a12      	ldr	r2, [pc, #72]	@ (8004f10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	4a0e      	ldr	r2, [pc, #56]	@ (8004f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ed0:	68d2      	ldr	r2, [r2, #12]
 8004ed2:	0a12      	lsrs	r2, r2, #8
 8004ed4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ed8:	fb02 f303 	mul.w	r3, r2, r3
 8004edc:	617b      	str	r3, [r7, #20]
    break;
 8004ede:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ee0:	4b09      	ldr	r3, [pc, #36]	@ (8004f08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	0e5b      	lsrs	r3, r3, #25
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	3301      	adds	r3, #1
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004efa:	687b      	ldr	r3, [r7, #4]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	017d7840 	.word	0x017d7840
 8004f10:	00f42400 	.word	0x00f42400

08004f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e09d      	b.n	8005062 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d108      	bne.n	8004f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f36:	d009      	beq.n	8004f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
 8004f3e:	e005      	b.n	8004f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fd fdd8 	bl	8002b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f8c:	d902      	bls.n	8004f94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e002      	b.n	8004f9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004fa2:	d007      	beq.n	8004fb4 <HAL_SPI_Init+0xa0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fac:	d002      	beq.n	8004fb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff6:	ea42 0103 	orr.w	r1, r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	f003 0204 	and.w	r2, r3, #4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005030:	ea42 0103 	orr.w	r1, r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b088      	sub	sp, #32
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_SPI_Transmit+0x22>
 8005088:	2302      	movs	r3, #2
 800508a:	e15f      	b.n	800534c <HAL_SPI_Transmit+0x2e2>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005094:	f7fd ff26 	bl	8002ee4 <HAL_GetTick>
 8005098:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d002      	beq.n	80050b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
 80050ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050ae:	e148      	b.n	8005342 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_SPI_Transmit+0x52>
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050c0:	e13f      	b.n	8005342 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2203      	movs	r2, #3
 80050c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	88fa      	ldrh	r2, [r7, #6]
 80050da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800510c:	d10f      	bne.n	800512e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800511c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800512c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005138:	2b40      	cmp	r3, #64	@ 0x40
 800513a:	d007      	beq.n	800514c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800514a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005154:	d94f      	bls.n	80051f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_SPI_Transmit+0xfa>
 800515e:	8afb      	ldrh	r3, [r7, #22]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d142      	bne.n	80051ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	881a      	ldrh	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	1c9a      	adds	r2, r3, #2
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005188:	e02f      	b.n	80051ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b02      	cmp	r3, #2
 8005196:	d112      	bne.n	80051be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519c:	881a      	ldrh	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	1c9a      	adds	r2, r3, #2
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051bc:	e015      	b.n	80051ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051be:	f7fd fe91 	bl	8002ee4 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d803      	bhi.n	80051d6 <HAL_SPI_Transmit+0x16c>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d102      	bne.n	80051dc <HAL_SPI_Transmit+0x172>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80051e8:	e0ab      	b.n	8005342 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ca      	bne.n	800518a <HAL_SPI_Transmit+0x120>
 80051f4:	e080      	b.n	80052f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_SPI_Transmit+0x19a>
 80051fe:	8afb      	ldrh	r3, [r7, #22]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d174      	bne.n	80052ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b01      	cmp	r3, #1
 800520c:	d912      	bls.n	8005234 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	881a      	ldrh	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521e:	1c9a      	adds	r2, r3, #2
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b02      	subs	r3, #2
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005232:	e05c      	b.n	80052ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800525a:	e048      	b.n	80052ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b02      	cmp	r3, #2
 8005268:	d12b      	bne.n	80052c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d912      	bls.n	800529a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005278:	881a      	ldrh	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	1c9a      	adds	r2, r3, #2
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b02      	subs	r3, #2
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005298:	e029      	b.n	80052ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052c0:	e015      	b.n	80052ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052c2:	f7fd fe0f 	bl	8002ee4 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d803      	bhi.n	80052da <HAL_SPI_Transmit+0x270>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d102      	bne.n	80052e0 <HAL_SPI_Transmit+0x276>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80052ec:	e029      	b.n	8005342 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1b1      	bne.n	800525c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f947 	bl	8005590 <SPI_EndRxTxTransaction>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e003      	b.n	8005342 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800534a:	7ffb      	ldrb	r3, [r7, #31]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005364:	f7fd fdbe 	bl	8002ee4 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	4413      	add	r3, r2
 8005372:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005374:	f7fd fdb6 	bl	8002ee4 <HAL_GetTick>
 8005378:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800537a:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	015b      	lsls	r3, r3, #5
 8005380:	0d1b      	lsrs	r3, r3, #20
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	fb02 f303 	mul.w	r3, r2, r3
 8005388:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800538a:	e054      	b.n	8005436 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d050      	beq.n	8005436 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005394:	f7fd fda6 	bl	8002ee4 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d902      	bls.n	80053aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d13d      	bne.n	8005426 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053c2:	d111      	bne.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053cc:	d004      	beq.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d6:	d107      	bne.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053f0:	d10f      	bne.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005410:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e017      	b.n	8005456 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	3b01      	subs	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	429a      	cmp	r2, r3
 8005452:	d19b      	bne.n	800538c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000044 	.word	0x20000044

08005464 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	@ 0x28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005476:	f7fd fd35 	bl	8002ee4 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	4413      	add	r3, r2
 8005484:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005486:	f7fd fd2d 	bl	8002ee4 <HAL_GetTick>
 800548a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	330c      	adds	r3, #12
 8005492:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005494:	4b3d      	ldr	r3, [pc, #244]	@ (800558c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00da      	lsls	r2, r3, #3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	0d1b      	lsrs	r3, r3, #20
 80054a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054ac:	e060      	b.n	8005570 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054b4:	d107      	bne.n	80054c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d104      	bne.n	80054c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d050      	beq.n	8005570 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054ce:	f7fd fd09 	bl	8002ee4 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054da:	429a      	cmp	r2, r3
 80054dc:	d902      	bls.n	80054e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d13d      	bne.n	8005560 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fc:	d111      	bne.n	8005522 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005506:	d004      	beq.n	8005512 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005510:	d107      	bne.n	8005522 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005520:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800552a:	d10f      	bne.n	800554c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800554a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e010      	b.n	8005582 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	3b01      	subs	r3, #1
 800556e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4013      	ands	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d196      	bne.n	80054ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3728      	adds	r7, #40	@ 0x28
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000044 	.word	0x20000044

08005590 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af02      	add	r7, sp, #8
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff ff5b 	bl	8005464 <SPI_WaitFifoStateUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b8:	f043 0220 	orr.w	r2, r3, #32
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e027      	b.n	8005614 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2200      	movs	r2, #0
 80055cc:	2180      	movs	r1, #128	@ 0x80
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f7ff fec0 	bl	8005354 <SPI_WaitFlagStateUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055de:	f043 0220 	orr.w	r2, r3, #32
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e014      	b.n	8005614 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff ff34 	bl	8005464 <SPI_WaitFifoStateUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e000      	b.n	8005614 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e049      	b.n	80056c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fd fb1e 	bl	8002c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f000 fb18 	bl	8005c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d001      	beq.n	80056e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e04c      	b.n	800577e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a26      	ldr	r2, [pc, #152]	@ (800578c <HAL_TIM_Base_Start+0xc0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d022      	beq.n	800573c <HAL_TIM_Base_Start+0x70>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056fe:	d01d      	beq.n	800573c <HAL_TIM_Base_Start+0x70>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a22      	ldr	r2, [pc, #136]	@ (8005790 <HAL_TIM_Base_Start+0xc4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d018      	beq.n	800573c <HAL_TIM_Base_Start+0x70>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a21      	ldr	r2, [pc, #132]	@ (8005794 <HAL_TIM_Base_Start+0xc8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d013      	beq.n	800573c <HAL_TIM_Base_Start+0x70>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1f      	ldr	r2, [pc, #124]	@ (8005798 <HAL_TIM_Base_Start+0xcc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00e      	beq.n	800573c <HAL_TIM_Base_Start+0x70>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1e      	ldr	r2, [pc, #120]	@ (800579c <HAL_TIM_Base_Start+0xd0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d009      	beq.n	800573c <HAL_TIM_Base_Start+0x70>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1c      	ldr	r2, [pc, #112]	@ (80057a0 <HAL_TIM_Base_Start+0xd4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_Base_Start+0x70>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1b      	ldr	r2, [pc, #108]	@ (80057a4 <HAL_TIM_Base_Start+0xd8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d115      	bne.n	8005768 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	4b19      	ldr	r3, [pc, #100]	@ (80057a8 <HAL_TIM_Base_Start+0xdc>)
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b06      	cmp	r3, #6
 800574c:	d015      	beq.n	800577a <HAL_TIM_Base_Start+0xae>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005754:	d011      	beq.n	800577a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	e008      	b.n	800577a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e000      	b.n	800577c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40000c00 	.word	0x40000c00
 800579c:	40013400 	.word	0x40013400
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40015000 	.word	0x40015000
 80057a8:	00010007 	.word	0x00010007

080057ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10f      	bne.n	80057e4 <HAL_TIM_Base_Stop+0x38>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	f244 4344 	movw	r3, #17476	@ 0x4444
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_Base_Stop+0x38>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e097      	b.n	800593e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fd f9ea 	bl	8002bfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800583e:	f023 0307 	bic.w	r3, r3, #7
 8005842:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f000 fa1e 	bl	8005c90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587c:	f023 0303 	bic.w	r3, r3, #3
 8005880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	4313      	orrs	r3, r2
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800589a:	f023 030c 	bic.w	r3, r3, #12
 800589e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	4313      	orrs	r3, r2
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	011a      	lsls	r2, r3, #4
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	031b      	lsls	r3, r3, #12
 80058ca:	4313      	orrs	r3, r2
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80058d8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80058e0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	4313      	orrs	r3, r2
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005956:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800595e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005966:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800596e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d110      	bne.n	8005998 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800597c:	7b7b      	ldrb	r3, [r7, #13]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d001      	beq.n	8005986 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e069      	b.n	8005a5a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005996:	e031      	b.n	80059fc <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b04      	cmp	r3, #4
 800599c:	d110      	bne.n	80059c0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800599e:	7bbb      	ldrb	r3, [r7, #14]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d102      	bne.n	80059aa <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059a4:	7b3b      	ldrb	r3, [r7, #12]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d001      	beq.n	80059ae <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e055      	b.n	8005a5a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059be:	e01d      	b.n	80059fc <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d108      	bne.n	80059d8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d105      	bne.n	80059d8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059cc:	7b7b      	ldrb	r3, [r7, #13]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d102      	bne.n	80059d8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059d2:	7b3b      	ldrb	r3, [r7, #12]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d001      	beq.n	80059dc <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e03e      	b.n	8005a5a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_Encoder_Start+0xc4>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d008      	beq.n	8005a1a <HAL_TIM_Encoder_Start+0xd4>
 8005a08:	e00f      	b.n	8005a2a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fa8c 	bl	8005f30 <TIM_CCxChannelCmd>
      break;
 8005a18:	e016      	b.n	8005a48 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	2104      	movs	r1, #4
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fa84 	bl	8005f30 <TIM_CCxChannelCmd>
      break;
 8005a28:	e00e      	b.n	8005a48 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	2100      	movs	r1, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fa7c 	bl	8005f30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	2104      	movs	r1, #4
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fa75 	bl	8005f30 <TIM_CCxChannelCmd>
      break;
 8005a46:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_ConfigClockSource+0x1c>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e0f6      	b.n	8005c6e <HAL_TIM_ConfigClockSource+0x20a>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005a9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a6f      	ldr	r2, [pc, #444]	@ (8005c78 <HAL_TIM_ConfigClockSource+0x214>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	f000 80c1 	beq.w	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005ac0:	4a6d      	ldr	r2, [pc, #436]	@ (8005c78 <HAL_TIM_ConfigClockSource+0x214>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	f200 80c6 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ac8:	4a6c      	ldr	r2, [pc, #432]	@ (8005c7c <HAL_TIM_ConfigClockSource+0x218>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	f000 80b9 	beq.w	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8005c7c <HAL_TIM_ConfigClockSource+0x218>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	f200 80be 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ad8:	4a69      	ldr	r2, [pc, #420]	@ (8005c80 <HAL_TIM_ConfigClockSource+0x21c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	f000 80b1 	beq.w	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005ae0:	4a67      	ldr	r2, [pc, #412]	@ (8005c80 <HAL_TIM_ConfigClockSource+0x21c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	f200 80b6 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ae8:	4a66      	ldr	r2, [pc, #408]	@ (8005c84 <HAL_TIM_ConfigClockSource+0x220>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	f000 80a9 	beq.w	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005af0:	4a64      	ldr	r2, [pc, #400]	@ (8005c84 <HAL_TIM_ConfigClockSource+0x220>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	f200 80ae 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005af8:	4a63      	ldr	r2, [pc, #396]	@ (8005c88 <HAL_TIM_ConfigClockSource+0x224>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	f000 80a1 	beq.w	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005b00:	4a61      	ldr	r2, [pc, #388]	@ (8005c88 <HAL_TIM_ConfigClockSource+0x224>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	f200 80a6 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b08:	4a60      	ldr	r2, [pc, #384]	@ (8005c8c <HAL_TIM_ConfigClockSource+0x228>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	f000 8099 	beq.w	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005b10:	4a5e      	ldr	r2, [pc, #376]	@ (8005c8c <HAL_TIM_ConfigClockSource+0x228>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	f200 809e 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b1c:	f000 8091 	beq.w	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005b20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b24:	f200 8096 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b2c:	f000 8089 	beq.w	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b34:	f200 808e 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b3c:	d03e      	beq.n	8005bbc <HAL_TIM_ConfigClockSource+0x158>
 8005b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b42:	f200 8087 	bhi.w	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b4a:	f000 8086 	beq.w	8005c5a <HAL_TIM_ConfigClockSource+0x1f6>
 8005b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b52:	d87f      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b54:	2b70      	cmp	r3, #112	@ 0x70
 8005b56:	d01a      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x12a>
 8005b58:	2b70      	cmp	r3, #112	@ 0x70
 8005b5a:	d87b      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b5c:	2b60      	cmp	r3, #96	@ 0x60
 8005b5e:	d050      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x19e>
 8005b60:	2b60      	cmp	r3, #96	@ 0x60
 8005b62:	d877      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b64:	2b50      	cmp	r3, #80	@ 0x50
 8005b66:	d03c      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0x17e>
 8005b68:	2b50      	cmp	r3, #80	@ 0x50
 8005b6a:	d873      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b6c:	2b40      	cmp	r3, #64	@ 0x40
 8005b6e:	d058      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x1be>
 8005b70:	2b40      	cmp	r3, #64	@ 0x40
 8005b72:	d86f      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b74:	2b30      	cmp	r3, #48	@ 0x30
 8005b76:	d064      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005b78:	2b30      	cmp	r3, #48	@ 0x30
 8005b7a:	d86b      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d060      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d867      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d05c      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d05a      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x1de>
 8005b8c:	e062      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b9e:	f000 f9a7 	bl	8005ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	609a      	str	r2, [r3, #8]
      break;
 8005bba:	e04f      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bcc:	f000 f990 	bl	8005ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bde:	609a      	str	r2, [r3, #8]
      break;
 8005be0:	e03c      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f000 f902 	bl	8005df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2150      	movs	r1, #80	@ 0x50
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 f95b 	bl	8005eb6 <TIM_ITRx_SetConfig>
      break;
 8005c00:	e02c      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f000 f921 	bl	8005e56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2160      	movs	r1, #96	@ 0x60
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 f94b 	bl	8005eb6 <TIM_ITRx_SetConfig>
      break;
 8005c20:	e01c      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f000 f8e2 	bl	8005df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2140      	movs	r1, #64	@ 0x40
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f93b 	bl	8005eb6 <TIM_ITRx_SetConfig>
      break;
 8005c40:	e00c      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f000 f932 	bl	8005eb6 <TIM_ITRx_SetConfig>
      break;
 8005c52:	e003      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      break;
 8005c58:	e000      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	00100070 	.word	0x00100070
 8005c7c:	00100060 	.word	0x00100060
 8005c80:	00100050 	.word	0x00100050
 8005c84:	00100040 	.word	0x00100040
 8005c88:	00100030 	.word	0x00100030
 8005c8c:	00100020 	.word	0x00100020

08005c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a4c      	ldr	r2, [pc, #304]	@ (8005dd4 <TIM_Base_SetConfig+0x144>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d017      	beq.n	8005cd8 <TIM_Base_SetConfig+0x48>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cae:	d013      	beq.n	8005cd8 <TIM_Base_SetConfig+0x48>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a49      	ldr	r2, [pc, #292]	@ (8005dd8 <TIM_Base_SetConfig+0x148>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00f      	beq.n	8005cd8 <TIM_Base_SetConfig+0x48>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a48      	ldr	r2, [pc, #288]	@ (8005ddc <TIM_Base_SetConfig+0x14c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00b      	beq.n	8005cd8 <TIM_Base_SetConfig+0x48>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a47      	ldr	r2, [pc, #284]	@ (8005de0 <TIM_Base_SetConfig+0x150>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d007      	beq.n	8005cd8 <TIM_Base_SetConfig+0x48>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a46      	ldr	r2, [pc, #280]	@ (8005de4 <TIM_Base_SetConfig+0x154>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_Base_SetConfig+0x48>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a45      	ldr	r2, [pc, #276]	@ (8005de8 <TIM_Base_SetConfig+0x158>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d108      	bne.n	8005cea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a39      	ldr	r2, [pc, #228]	@ (8005dd4 <TIM_Base_SetConfig+0x144>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d023      	beq.n	8005d3a <TIM_Base_SetConfig+0xaa>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf8:	d01f      	beq.n	8005d3a <TIM_Base_SetConfig+0xaa>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a36      	ldr	r2, [pc, #216]	@ (8005dd8 <TIM_Base_SetConfig+0x148>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01b      	beq.n	8005d3a <TIM_Base_SetConfig+0xaa>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a35      	ldr	r2, [pc, #212]	@ (8005ddc <TIM_Base_SetConfig+0x14c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d017      	beq.n	8005d3a <TIM_Base_SetConfig+0xaa>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a34      	ldr	r2, [pc, #208]	@ (8005de0 <TIM_Base_SetConfig+0x150>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <TIM_Base_SetConfig+0xaa>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a33      	ldr	r2, [pc, #204]	@ (8005de4 <TIM_Base_SetConfig+0x154>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00f      	beq.n	8005d3a <TIM_Base_SetConfig+0xaa>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a33      	ldr	r2, [pc, #204]	@ (8005dec <TIM_Base_SetConfig+0x15c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00b      	beq.n	8005d3a <TIM_Base_SetConfig+0xaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a32      	ldr	r2, [pc, #200]	@ (8005df0 <TIM_Base_SetConfig+0x160>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_Base_SetConfig+0xaa>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a31      	ldr	r2, [pc, #196]	@ (8005df4 <TIM_Base_SetConfig+0x164>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_Base_SetConfig+0xaa>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2c      	ldr	r2, [pc, #176]	@ (8005de8 <TIM_Base_SetConfig+0x158>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a18      	ldr	r2, [pc, #96]	@ (8005dd4 <TIM_Base_SetConfig+0x144>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <TIM_Base_SetConfig+0x110>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005de4 <TIM_Base_SetConfig+0x154>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00f      	beq.n	8005da0 <TIM_Base_SetConfig+0x110>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a1a      	ldr	r2, [pc, #104]	@ (8005dec <TIM_Base_SetConfig+0x15c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_Base_SetConfig+0x110>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a19      	ldr	r2, [pc, #100]	@ (8005df0 <TIM_Base_SetConfig+0x160>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0x110>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a18      	ldr	r2, [pc, #96]	@ (8005df4 <TIM_Base_SetConfig+0x164>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0x110>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	@ (8005de8 <TIM_Base_SetConfig+0x158>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d103      	bne.n	8005da8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f023 0201 	bic.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	611a      	str	r2, [r3, #16]
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40015000 	.word	0x40015000
 8005dec:	40014000 	.word	0x40014000
 8005df0:	40014400 	.word	0x40014400
 8005df4:	40014800 	.word	0x40014800

08005df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f023 0201 	bic.w	r2, r3, #1
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f023 030a 	bic.w	r3, r3, #10
 8005e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b087      	sub	sp, #28
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f023 0210 	bic.w	r2, r3, #16
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	031b      	lsls	r3, r3, #12
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f043 0307 	orr.w	r3, r3, #7
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	021a      	lsls	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2201      	movs	r2, #1
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1a      	ldr	r2, [r3, #32]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	401a      	ands	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1a      	ldr	r2, [r3, #32]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e074      	b.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a34      	ldr	r2, [pc, #208]	@ (800608c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a33      	ldr	r2, [pc, #204]	@ (8006090 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a31      	ldr	r2, [pc, #196]	@ (8006094 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005fd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a21      	ldr	r2, [pc, #132]	@ (800608c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d022      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006014:	d01d      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1f      	ldr	r2, [pc, #124]	@ (8006098 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1c      	ldr	r2, [pc, #112]	@ (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a15      	ldr	r2, [pc, #84]	@ (8006090 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a18      	ldr	r2, [pc, #96]	@ (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a11      	ldr	r2, [pc, #68]	@ (8006094 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d10c      	bne.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	4313      	orrs	r3, r2
 8006062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40012c00 	.word	0x40012c00
 8006090:	40013400 	.word	0x40013400
 8006094:	40015000 	.word	0x40015000
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40014000 	.word	0x40014000

080060a8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 80060a8:	2000      	movs	r0, #0
 80060aa:	4770      	bx	lr

080060ac <_ZN5Print5flushEv>:
//    size_t println(const Printable&);
    size_t println(void);

    size_t printf(const char *, ...);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop

080060b0 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop

080060b4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 80060b4:	b410      	push	{r4}
  drawPixel(x, y, color);
 80060b6:	6804      	ldr	r4, [r0, #0]
 80060b8:	6924      	ldr	r4, [r4, #16]
 80060ba:	46a4      	mov	ip, r4
}
 80060bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 80060c0:	4760      	bx	ip
 80060c2:	bf00      	nop

080060c4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 80060c4:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 80060c6:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
 80060c8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
 80060cc:	9502      	str	r5, [sp, #8]
 80060ce:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 80060d0:	46a4      	mov	ip, r4
}
 80060d2:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 80060d4:	4760      	bx	ip
 80060d6:	bf00      	nop

080060d8 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 80060d8:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 80060da:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
 80060dc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
 80060e0:	9502      	str	r5, [sp, #8]
 80060e2:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80060e4:	46a4      	mov	ip, r4
}
 80060e6:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 80060e8:	4760      	bx	ip
 80060ea:	bf00      	nop

080060ec <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop

080060f0 <_ZN12Adafruit_GFX11setRotationEh>:
    _height = HEIGHT;
 80060f0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    _width = WIDTH;
 80060f4:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
  rotation = (x & 3);
 80060f8:	f001 0303 	and.w	r3, r1, #3
  switch (rotation) {
 80060fc:	07c9      	lsls	r1, r1, #31
 80060fe:	bf48      	it	mi
 8006100:	b292      	uxthmi	r2, r2
  rotation = (x & 3);
 8006102:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 8006104:	6883      	ldr	r3, [r0, #8]
 8006106:	bf48      	it	mi
 8006108:	ea42 430c 	orrmi.w	r3, r2, ip, lsl #16
    _width = HEIGHT;
 800610c:	60c3      	str	r3, [r0, #12]
}
 800610e:	4770      	bx	lr

08006110 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
                                 uint16_t color) {
 8006110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006114:	461c      	mov	r4, r3
 8006116:	460b      	mov	r3, r1
  startWrite();
 8006118:	6801      	ldr	r1, [r0, #0]
 800611a:	4e12      	ldr	r6, [pc, #72]	@ (8006164 <_ZN12Adafruit_GFX13drawFastVLineEssst+0x54>)
 800611c:	694f      	ldr	r7, [r1, #20]
                                 uint16_t color) {
 800611e:	b084      	sub	sp, #16
 8006120:	42b7      	cmp	r7, r6
 8006122:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
 8006126:	4605      	mov	r5, r0
 8006128:	d110      	bne.n	800614c <_ZN12Adafruit_GFX13drawFastVLineEssst+0x3c>
  writeLine(x, y, x, y + h - 1, color);
 800612a:	3c01      	subs	r4, #1
 800612c:	4414      	add	r4, r2
 800612e:	b224      	sxth	r4, r4
 8006130:	f8cd 8004 	str.w	r8, [sp, #4]
 8006134:	9400      	str	r4, [sp, #0]
 8006136:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8006138:	4628      	mov	r0, r5
 800613a:	4619      	mov	r1, r3
 800613c:	47a0      	blx	r4
  endWrite();
 800613e:	682b      	ldr	r3, [r5, #0]
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	42b3      	cmp	r3, r6
 8006144:	d109      	bne.n	800615a <_ZN12Adafruit_GFX13drawFastVLineEssst+0x4a>
}
 8006146:	b004      	add	sp, #16
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	e9cd 3202 	strd	r3, r2, [sp, #8]
  startWrite();
 8006150:	47b8      	blx	r7
  writeLine(x, y, x, y + h - 1, color);
 8006152:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006156:	6829      	ldr	r1, [r5, #0]
 8006158:	e7e7      	b.n	800612a <_ZN12Adafruit_GFX13drawFastVLineEssst+0x1a>
  endWrite();
 800615a:	4628      	mov	r0, r5
}
 800615c:	b004      	add	sp, #16
 800615e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 8006162:	4718      	bx	r3
 8006164:	080060b1 	.word	0x080060b1

08006168 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
                                 uint16_t color) {
 8006168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  startWrite();
 800616c:	6806      	ldr	r6, [r0, #0]
 800616e:	4f12      	ldr	r7, [pc, #72]	@ (80061b8 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x50>)
                                 uint16_t color) {
 8006170:	461c      	mov	r4, r3
  startWrite();
 8006172:	6973      	ldr	r3, [r6, #20]
                                 uint16_t color) {
 8006174:	b084      	sub	sp, #16
 8006176:	42bb      	cmp	r3, r7
 8006178:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
 800617c:	4605      	mov	r5, r0
 800617e:	d10f      	bne.n	80061a0 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x38>
  writeLine(x, y, x + w - 1, y, color);
 8006180:	1e63      	subs	r3, r4, #1
 8006182:	f8cd 8004 	str.w	r8, [sp, #4]
 8006186:	440b      	add	r3, r1
 8006188:	9200      	str	r2, [sp, #0]
 800618a:	b21b      	sxth	r3, r3
 800618c:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 800618e:	4628      	mov	r0, r5
 8006190:	47a0      	blx	r4
  endWrite();
 8006192:	682b      	ldr	r3, [r5, #0]
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	42bb      	cmp	r3, r7
 8006198:	d109      	bne.n	80061ae <_ZN12Adafruit_GFX13drawFastHLineEssst+0x46>
}
 800619a:	b004      	add	sp, #16
 800619c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a0:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
 80061a4:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 80061a6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80061aa:	682e      	ldr	r6, [r5, #0]
 80061ac:	e7e8      	b.n	8006180 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x18>
  endWrite();
 80061ae:	4628      	mov	r0, r5
}
 80061b0:	b004      	add	sp, #16
 80061b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 80061b6:	4718      	bx	r3
 80061b8:	080060b1 	.word	0x080060b1

080061bc <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
 80061bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c0:	b086      	sub	sp, #24
  if (x0 == x1) {
 80061c2:	4299      	cmp	r1, r3
                            uint16_t color) {
 80061c4:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	@ 0x30
 80061c8:	f8bd 6034 	ldrh.w	r6, [sp, #52]	@ 0x34
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80061cc:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
 80061d0:	4605      	mov	r5, r0
  if (x0 == x1) {
 80061d2:	d021      	beq.n	8006218 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
  } else if (y0 == y1) {
 80061d4:	42a2      	cmp	r2, r4
 80061d6:	d011      	beq.n	80061fc <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    startWrite();
 80061d8:	f8dc 8014 	ldr.w	r8, [ip, #20]
 80061dc:	4f1d      	ldr	r7, [pc, #116]	@ (8006254 <_ZN12Adafruit_GFX8drawLineEsssst+0x98>)
 80061de:	45b8      	cmp	r8, r7
 80061e0:	d12e      	bne.n	8006240 <_ZN12Adafruit_GFX8drawLineEsssst+0x84>
    writeLine(x0, y0, x1, y1, color);
 80061e2:	e9cd 4600 	strd	r4, r6, [sp]
 80061e6:	4628      	mov	r0, r5
 80061e8:	f8dc 4028 	ldr.w	r4, [ip, #40]	@ 0x28
 80061ec:	47a0      	blx	r4
    endWrite();
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f2:	42bb      	cmp	r3, r7
 80061f4:	d11f      	bne.n	8006236 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
}
 80061f6:	b006      	add	sp, #24
 80061f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (x0 > x1)
 80061fc:	4299      	cmp	r1, r3
 80061fe:	dc16      	bgt.n	800622e <_ZN12Adafruit_GFX8drawLineEsssst+0x72>
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8006200:	960c      	str	r6, [sp, #48]	@ 0x30
 8006202:	3301      	adds	r3, #1
 8006204:	f8dc 403c 	ldr.w	r4, [ip, #60]	@ 0x3c
 8006208:	1a5b      	subs	r3, r3, r1
 800620a:	b21b      	sxth	r3, r3
 800620c:	4628      	mov	r0, r5
 800620e:	46a4      	mov	ip, r4
}
 8006210:	b006      	add	sp, #24
 8006212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8006216:	4760      	bx	ip
    if (y0 > y1)
 8006218:	42a2      	cmp	r2, r4
 800621a:	dd02      	ble.n	8006222 <_ZN12Adafruit_GFX8drawLineEsssst+0x66>
 800621c:	4613      	mov	r3, r2
 800621e:	4622      	mov	r2, r4
 8006220:	461c      	mov	r4, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8006222:	1c63      	adds	r3, r4, #1
 8006224:	960c      	str	r6, [sp, #48]	@ 0x30
 8006226:	f8dc 4038 	ldr.w	r4, [ip, #56]	@ 0x38
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	e7ed      	b.n	800620a <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
    if (x0 > x1)
 800622e:	4608      	mov	r0, r1
 8006230:	4619      	mov	r1, r3
 8006232:	4603      	mov	r3, r0
 8006234:	e7e4      	b.n	8006200 <_ZN12Adafruit_GFX8drawLineEsssst+0x44>
    endWrite();
 8006236:	4628      	mov	r0, r5
}
 8006238:	b006      	add	sp, #24
 800623a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 800623e:	4718      	bx	r3
 8006240:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006244:	9103      	str	r1, [sp, #12]
    startWrite();
 8006246:	47c0      	blx	r8
    writeLine(x0, y0, x1, y1, color);
 8006248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800624c:	f8d5 c000 	ldr.w	ip, [r5]
 8006250:	9903      	ldr	r1, [sp, #12]
 8006252:	e7c6      	b.n	80061e2 <_ZN12Adafruit_GFX8drawLineEsssst+0x26>
 8006254:	080060b1 	.word	0x080060b1

08006258 <_ZN12Adafruit_GFX8fillRectEsssst>:
                            uint16_t color) {
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 800625c:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
 8006260:	4690      	mov	r8, r2
 8006262:	461f      	mov	r7, r3
 8006264:	4a20      	ldr	r2, [pc, #128]	@ (80062e8 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
  startWrite();
 8006266:	f8dc 3014 	ldr.w	r3, [ip, #20]
                            uint16_t color) {
 800626a:	b083      	sub	sp, #12
 800626c:	4293      	cmp	r3, r2
 800626e:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8006272:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8006276:	4605      	mov	r5, r0
 8006278:	460c      	mov	r4, r1
 800627a:	d130      	bne.n	80062de <_ZN12Adafruit_GFX8fillRectEsssst+0x86>
  for (int16_t i = x; i < x + w; i++) {
 800627c:	4427      	add	r7, r4
 800627e:	42a7      	cmp	r7, r4
 8006280:	dd14      	ble.n	80062ac <_ZN12Adafruit_GFX8fillRectEsssst+0x54>
 8006282:	f8df b068 	ldr.w	fp, [pc, #104]	@ 80062ec <_ZN12Adafruit_GFX8fillRectEsssst+0x94>
    writeFastVLine(i, y, h, color);
 8006286:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 800628a:	f8cd a000 	str.w	sl, [sp]
 800628e:	455e      	cmp	r6, fp
 8006290:	4621      	mov	r1, r4
 8006292:	464b      	mov	r3, r9
 8006294:	4642      	mov	r2, r8
 8006296:	4628      	mov	r0, r5
 8006298:	d110      	bne.n	80062bc <_ZN12Adafruit_GFX8fillRectEsssst+0x64>
 800629a:	3401      	adds	r4, #1
 800629c:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
  for (int16_t i = x; i < x + w; i++) {
 80062a0:	b224      	sxth	r4, r4
  drawFastVLine(x, y, h, color);
 80062a2:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 80062a4:	42bc      	cmp	r4, r7
  endWrite();
 80062a6:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 80062aa:	dbec      	blt.n	8006286 <_ZN12Adafruit_GFX8fillRectEsssst+0x2e>
  endWrite();
 80062ac:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 80062b0:	4a0d      	ldr	r2, [pc, #52]	@ (80062e8 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d10e      	bne.n	80062d4 <_ZN12Adafruit_GFX8fillRectEsssst+0x7c>
}
 80062b6:	b003      	add	sp, #12
 80062b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062bc:	3401      	adds	r4, #1
  for (int16_t i = x; i < x + w; i++) {
 80062be:	b224      	sxth	r4, r4
    writeFastVLine(i, y, h, color);
 80062c0:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 80062c2:	42a7      	cmp	r7, r4
  endWrite();
 80062c4:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 80062c8:	dcdd      	bgt.n	8006286 <_ZN12Adafruit_GFX8fillRectEsssst+0x2e>
  endWrite();
 80062ca:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 80062ce:	4a06      	ldr	r2, [pc, #24]	@ (80062e8 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d0f0      	beq.n	80062b6 <_ZN12Adafruit_GFX8fillRectEsssst+0x5e>
 80062d4:	4628      	mov	r0, r5
}
 80062d6:	b003      	add	sp, #12
 80062d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 80062dc:	4718      	bx	r3
  startWrite();
 80062de:	4798      	blx	r3
  endWrite();
 80062e0:	f8d5 c000 	ldr.w	ip, [r5]
 80062e4:	e7ca      	b.n	800627c <_ZN12Adafruit_GFX8fillRectEsssst+0x24>
 80062e6:	bf00      	nop
 80062e8:	080060b1 	.word	0x080060b1
 80062ec:	080060c5 	.word	0x080060c5

080062f0 <_ZN12Adafruit_GFX9writeLineEsssst>:
                             uint16_t color) {
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	b085      	sub	sp, #20
 80062f6:	461d      	mov	r5, r3
 80062f8:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80062fc:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8006300:	1ab3      	subs	r3, r6, r2
 8006302:	eba5 0c01 	sub.w	ip, r5, r1
 8006306:	2b00      	cmp	r3, #0
 8006308:	bfb8      	it	lt
 800630a:	425b      	neglt	r3, r3
 800630c:	f1bc 0f00 	cmp.w	ip, #0
 8006310:	bfb8      	it	lt
 8006312:	f1cc 0c00 	rsblt	ip, ip, #0
  if (steep) {
 8006316:	4563      	cmp	r3, ip
                             uint16_t color) {
 8006318:	460f      	mov	r7, r1
  if (steep) {
 800631a:	dd43      	ble.n	80063a4 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
 800631c:	46a8      	mov	r8, r5
    _swap_int16_t(x0, y0);
 800631e:	4617      	mov	r7, r2
  if (steep) {
 8006320:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 8006322:	4635      	mov	r5, r6
  if (x0 > x1) {
 8006324:	42af      	cmp	r7, r5
    _swap_int16_t(x1, y1);
 8006326:	4646      	mov	r6, r8
 8006328:	468e      	mov	lr, r1
    _swap_int16_t(x0, y0);
 800632a:	460a      	mov	r2, r1
  if (steep) {
 800632c:	46e0      	mov	r8, ip
  if (x0 > x1) {
 800632e:	dd3e      	ble.n	80063ae <_ZN12Adafruit_GFX9writeLineEsssst+0xbe>
  dy = abs(y1 - y0);
 8006330:	1b09      	subs	r1, r1, r4
 8006332:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
 8006336:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
  dx = x1 - x0;
 800633a:	1b79      	subs	r1, r7, r5
  int16_t err = dx / 2;
 800633c:	f3c1 34c0 	ubfx	r4, r1, #15, #1
 8006340:	fa04 f481 	sxtah	r4, r4, r1
  if (y0 < y1) {
 8006344:	42b2      	cmp	r2, r6
  dx = x1 - x0;
 8006346:	b289      	uxth	r1, r1
 8006348:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 800634a:	ea4f 0464 	mov.w	r4, r4, asr #1
  if (y0 < y1) {
 800634e:	dd70      	ble.n	8006432 <_ZN12Adafruit_GFX9writeLineEsssst+0x142>
 8006350:	2201      	movs	r2, #1
 8006352:	4563      	cmp	r3, ip
 8006354:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 8006438 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>
 8006358:	9203      	str	r2, [sp, #12]
    err -= dy;
 800635a:	fa1f f888 	uxth.w	r8, r8
 800635e:	dc3e      	bgt.n	80063de <_ZN12Adafruit_GFX9writeLineEsssst+0xee>
 8006360:	46bb      	mov	fp, r7
      writePixel(y0, x0, color);
 8006362:	f8d0 c000 	ldr.w	ip, [r0]
  drawPixel(x, y, color);
 8006366:	9002      	str	r0, [sp, #8]
      writePixel(y0, x0, color);
 8006368:	f8dc 7018 	ldr.w	r7, [ip, #24]
      writePixel(x0, y0, color);
 800636c:	4557      	cmp	r7, sl
  drawPixel(x, y, color);
 800636e:	bf08      	it	eq
 8006370:	f8dc 7010 	ldreq.w	r7, [ip, #16]
 8006374:	4629      	mov	r1, r5
 8006376:	464b      	mov	r3, r9
 8006378:	4632      	mov	r2, r6
 800637a:	47b8      	blx	r7
    err -= dy;
 800637c:	eba4 0308 	sub.w	r3, r4, r8
 8006380:	b21c      	sxth	r4, r3
 8006382:	3501      	adds	r5, #1
    if (err < 0) {
 8006384:	2c00      	cmp	r4, #0
  drawPixel(x, y, color);
 8006386:	9802      	ldr	r0, [sp, #8]
  for (; x0 <= x1; x0++) {
 8006388:	b22d      	sxth	r5, r5
    err -= dy;
 800638a:	b29b      	uxth	r3, r3
    if (err < 0) {
 800638c:	da05      	bge.n	800639a <_ZN12Adafruit_GFX9writeLineEsssst+0xaa>
      err += dx;
 800638e:	9a01      	ldr	r2, [sp, #4]
 8006390:	4413      	add	r3, r2
 8006392:	b21c      	sxth	r4, r3
      y0 += ystep;
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	441e      	add	r6, r3
 8006398:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 800639a:	455d      	cmp	r5, fp
 800639c:	dde1      	ble.n	8006362 <_ZN12Adafruit_GFX9writeLineEsssst+0x72>
}
 800639e:	b005      	add	sp, #20
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (x0 > x1) {
 80063a4:	42af      	cmp	r7, r5
 80063a6:	4634      	mov	r4, r6
 80063a8:	4611      	mov	r1, r2
 80063aa:	4698      	mov	r8, r3
 80063ac:	dcc0      	bgt.n	8006330 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
  dx = x1 - x0;
 80063ae:	1be9      	subs	r1, r5, r7
  int16_t err = dx / 2;
 80063b0:	f3c1 34c0 	ubfx	r4, r1, #15, #1
 80063b4:	fa04 f481 	sxtah	r4, r4, r1
  if (y0 < y1) {
 80063b8:	46ae      	mov	lr, r5
  dx = x1 - x0;
 80063ba:	b289      	uxth	r1, r1
  if (y0 < y1) {
 80063bc:	42b2      	cmp	r2, r6
 80063be:	463d      	mov	r5, r7
  dx = x1 - x0;
 80063c0:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 80063c2:	ea4f 0464 	mov.w	r4, r4, asr #1
  if (y0 < y1) {
 80063c6:	4616      	mov	r6, r2
 80063c8:	4677      	mov	r7, lr
 80063ca:	db2c      	blt.n	8006426 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
 80063cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80063d0:	4563      	cmp	r3, ip
 80063d2:	f8df a064 	ldr.w	sl, [pc, #100]	@ 8006438 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>
 80063d6:	9203      	str	r2, [sp, #12]
    err -= dy;
 80063d8:	fa1f f888 	uxth.w	r8, r8
 80063dc:	ddc0      	ble.n	8006360 <_ZN12Adafruit_GFX9writeLineEsssst+0x70>
 80063de:	4683      	mov	fp, r0
 80063e0:	4631      	mov	r1, r6
 80063e2:	e014      	b.n	800640e <_ZN12Adafruit_GFX9writeLineEsssst+0x11e>
  drawPixel(x, y, color);
 80063e4:	6906      	ldr	r6, [r0, #16]
 80063e6:	9102      	str	r1, [sp, #8]
 80063e8:	4658      	mov	r0, fp
 80063ea:	47b0      	blx	r6
}
 80063ec:	9902      	ldr	r1, [sp, #8]
    err -= dy;
 80063ee:	eba4 0308 	sub.w	r3, r4, r8
 80063f2:	b21c      	sxth	r4, r3
    if (err < 0) {
 80063f4:	3501      	adds	r5, #1
 80063f6:	2c00      	cmp	r4, #0
  for (; x0 <= x1; x0++) {
 80063f8:	b22d      	sxth	r5, r5
    err -= dy;
 80063fa:	b29b      	uxth	r3, r3
    if (err < 0) {
 80063fc:	da05      	bge.n	800640a <_ZN12Adafruit_GFX9writeLineEsssst+0x11a>
      err += dx;
 80063fe:	9a01      	ldr	r2, [sp, #4]
 8006400:	4413      	add	r3, r2
 8006402:	b21c      	sxth	r4, r3
      y0 += ystep;
 8006404:	9b03      	ldr	r3, [sp, #12]
 8006406:	4419      	add	r1, r3
 8006408:	b209      	sxth	r1, r1
  for (; x0 <= x1; x0++) {
 800640a:	42bd      	cmp	r5, r7
 800640c:	dcc7      	bgt.n	800639e <_ZN12Adafruit_GFX9writeLineEsssst+0xae>
      writePixel(y0, x0, color);
 800640e:	f8db 0000 	ldr.w	r0, [fp]
 8006412:	6986      	ldr	r6, [r0, #24]
 8006414:	4556      	cmp	r6, sl
  drawPixel(x, y, color);
 8006416:	464b      	mov	r3, r9
 8006418:	462a      	mov	r2, r5
 800641a:	d0e3      	beq.n	80063e4 <_ZN12Adafruit_GFX9writeLineEsssst+0xf4>
      writePixel(y0, x0, color);
 800641c:	9102      	str	r1, [sp, #8]
 800641e:	4658      	mov	r0, fp
 8006420:	47b0      	blx	r6
 8006422:	9902      	ldr	r1, [sp, #8]
 8006424:	e7e3      	b.n	80063ee <_ZN12Adafruit_GFX9writeLineEsssst+0xfe>
  if (y0 < y1) {
 8006426:	2201      	movs	r2, #1
  for (; x0 <= x1; x0++) {
 8006428:	42bd      	cmp	r5, r7
 800642a:	ddd1      	ble.n	80063d0 <_ZN12Adafruit_GFX9writeLineEsssst+0xe0>
}
 800642c:	b005      	add	sp, #20
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (y0 < y1) {
 8006432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006436:	e7f7      	b.n	8006428 <_ZN12Adafruit_GFX9writeLineEsssst+0x138>
 8006438:	080060b5 	.word	0x080060b5

0800643c <_ZN12Adafruit_GFX8drawRectEsssst>:
                            uint16_t color) {
 800643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	461d      	mov	r5, r3
  startWrite();
 8006442:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 8006444:	460f      	mov	r7, r1
 8006446:	4616      	mov	r6, r2
 8006448:	492e      	ldr	r1, [pc, #184]	@ (8006504 <_ZN12Adafruit_GFX8drawRectEsssst+0xc8>)
  startWrite();
 800644a:	695a      	ldr	r2, [r3, #20]
                            uint16_t color) {
 800644c:	b083      	sub	sp, #12
 800644e:	428a      	cmp	r2, r1
 8006450:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8006454:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8006458:	4604      	mov	r4, r0
 800645a:	d145      	bne.n	80064e8 <_ZN12Adafruit_GFX8drawRectEsssst+0xac>
  writeFastHLine(x, y, w, color);
 800645c:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
 8006460:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8006508 <_ZN12Adafruit_GFX8drawRectEsssst+0xcc>
  drawFastHLine(x, y, w, color);
 8006464:	f8cd 8000 	str.w	r8, [sp]
 8006468:	45d3      	cmp	fp, sl
 800646a:	bf08      	it	eq
 800646c:	f8d3 b03c 	ldreq.w	fp, [r3, #60]	@ 0x3c
  writeFastHLine(x, y, w, color);
 8006470:	4632      	mov	r2, r6
 8006472:	462b      	mov	r3, r5
 8006474:	4639      	mov	r1, r7
 8006476:	4620      	mov	r0, r4
 8006478:	47d8      	blx	fp
  writeFastHLine(x, y + h - 1, w, color);
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
  drawFastHLine(x, y, w, color);
 8006480:	f8cd 8000 	str.w	r8, [sp]
  writeFastHLine(x, y + h - 1, w, color);
 8006484:	f109 32ff 	add.w	r2, r9, #4294967295
 8006488:	4432      	add	r2, r6
 800648a:	45d3      	cmp	fp, sl
 800648c:	b212      	sxth	r2, r2
 800648e:	d133      	bne.n	80064f8 <_ZN12Adafruit_GFX8drawRectEsssst+0xbc>
  drawFastHLine(x, y, w, color);
 8006490:	f8d3 a03c 	ldr.w	sl, [r3, #60]	@ 0x3c
 8006494:	4639      	mov	r1, r7
 8006496:	462b      	mov	r3, r5
 8006498:	4620      	mov	r0, r4
 800649a:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800650c <_ZN12Adafruit_GFX8drawRectEsssst+0xd0>
 80064a2:	f8d3 b020 	ldr.w	fp, [r3, #32]
  drawFastVLine(x, y, h, color);
 80064a6:	f8cd 8000 	str.w	r8, [sp]
 80064aa:	45d3      	cmp	fp, sl
 80064ac:	bf08      	it	eq
 80064ae:	f8d3 b038 	ldreq.w	fp, [r3, #56]	@ 0x38
  writeFastVLine(x, y, h, color);
 80064b2:	4632      	mov	r2, r6
 80064b4:	464b      	mov	r3, r9
 80064b6:	4639      	mov	r1, r7
 80064b8:	4620      	mov	r0, r4
 80064ba:	47d8      	blx	fp
  writeFastVLine(x + w - 1, y, h, color);
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	1e69      	subs	r1, r5, #1
 80064c0:	6a1d      	ldr	r5, [r3, #32]
  drawFastVLine(x, y, h, color);
 80064c2:	f8cd 8000 	str.w	r8, [sp]
 80064c6:	4555      	cmp	r5, sl
  writeFastVLine(x + w - 1, y, h, color);
 80064c8:	4439      	add	r1, r7
  drawFastVLine(x, y, h, color);
 80064ca:	bf08      	it	eq
 80064cc:	6b9d      	ldreq	r5, [r3, #56]	@ 0x38
  writeFastVLine(x + w - 1, y, h, color);
 80064ce:	4632      	mov	r2, r6
 80064d0:	464b      	mov	r3, r9
 80064d2:	b209      	sxth	r1, r1
 80064d4:	4620      	mov	r0, r4
 80064d6:	47a8      	blx	r5
  endWrite();
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	4a0a      	ldr	r2, [pc, #40]	@ (8006504 <_ZN12Adafruit_GFX8drawRectEsssst+0xc8>)
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	4293      	cmp	r3, r2
 80064e0:	d105      	bne.n	80064ee <_ZN12Adafruit_GFX8drawRectEsssst+0xb2>
}
 80064e2:	b003      	add	sp, #12
 80064e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 80064e8:	4790      	blx	r2
  writeFastHLine(x, y, w, color);
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	e7b6      	b.n	800645c <_ZN12Adafruit_GFX8drawRectEsssst+0x20>
  endWrite();
 80064ee:	4620      	mov	r0, r4
}
 80064f0:	b003      	add	sp, #12
 80064f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 80064f6:	4718      	bx	r3
  writeFastHLine(x, y + h - 1, w, color);
 80064f8:	462b      	mov	r3, r5
 80064fa:	4639      	mov	r1, r7
 80064fc:	4620      	mov	r0, r4
 80064fe:	47d8      	blx	fp
 8006500:	e7cc      	b.n	800649c <_ZN12Adafruit_GFX8drawRectEsssst+0x60>
 8006502:	bf00      	nop
 8006504:	080060b1 	.word	0x080060b1
 8006508:	080060d9 	.word	0x080060d9
 800650c:	080060c5 	.word	0x080060c5

08006510 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
                                 uint16_t color) {
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(x, y, w, h, color);
 8006514:	f8d0 c000 	ldr.w	ip, [r0]
 8006518:	f8df e088 	ldr.w	lr, [pc, #136]	@ 80065a4 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x94>
 800651c:	f8dc 6040 	ldr.w	r6, [ip, #64]	@ 0x40
                                 uint16_t color) {
 8006520:	b083      	sub	sp, #12
 8006522:	4576      	cmp	r6, lr
 8006524:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8006528:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800652c:	d128      	bne.n	8006580 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x70>
 800652e:	4690      	mov	r8, r2
 8006530:	461f      	mov	r7, r3
 8006532:	4a1b      	ldr	r2, [pc, #108]	@ (80065a0 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x90>)
  startWrite();
 8006534:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8006538:	4293      	cmp	r3, r2
 800653a:	4605      	mov	r5, r0
 800653c:	460c      	mov	r4, r1
 800653e:	d12b      	bne.n	8006598 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x88>
  for (int16_t i = x; i < x + w; i++) {
 8006540:	4427      	add	r7, r4
 8006542:	42bc      	cmp	r4, r7
 8006544:	da14      	bge.n	8006570 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x60>
 8006546:	f8df b060 	ldr.w	fp, [pc, #96]	@ 80065a8 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x98>
    writeFastVLine(i, y, h, color);
 800654a:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 800654e:	f8cd a000 	str.w	sl, [sp]
 8006552:	455e      	cmp	r6, fp
 8006554:	4621      	mov	r1, r4
 8006556:	464b      	mov	r3, r9
 8006558:	4642      	mov	r2, r8
 800655a:	4628      	mov	r0, r5
 800655c:	d101      	bne.n	8006562 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x52>
 800655e:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
 8006562:	3401      	adds	r4, #1
  for (int16_t i = x; i < x + w; i++) {
 8006564:	b224      	sxth	r4, r4
    writeFastVLine(i, y, h, color);
 8006566:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8006568:	42bc      	cmp	r4, r7
  endWrite();
 800656a:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 800656e:	dbec      	blt.n	800654a <_ZN12Adafruit_GFX13writeFillRectEsssst+0x3a>
  endWrite();
 8006570:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006574:	4a0a      	ldr	r2, [pc, #40]	@ (80065a0 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x90>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d109      	bne.n	800658e <_ZN12Adafruit_GFX13writeFillRectEsssst+0x7e>
}
 800657a:	b003      	add	sp, #12
 800657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fillRect(x, y, w, h, color);
 8006580:	46b4      	mov	ip, r6
 8006582:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	@ 0x30
}
 8006586:	b003      	add	sp, #12
 8006588:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(x, y, w, h, color);
 800658c:	4760      	bx	ip
  endWrite();
 800658e:	4628      	mov	r0, r5
}
 8006590:	b003      	add	sp, #12
 8006592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8006596:	4718      	bx	r3
  startWrite();
 8006598:	4798      	blx	r3
  endWrite();
 800659a:	f8d5 c000 	ldr.w	ip, [r5]
 800659e:	e7cf      	b.n	8006540 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x30>
 80065a0:	080060b1 	.word	0x080060b1
 80065a4:	08006259 	.word	0x08006259
 80065a8:	080060c5 	.word	0x080060c5

080065ac <_ZN12Adafruit_GFX10fillScreenEt>:
void Adafruit_GFX::fillScreen(uint16_t color) {
 80065ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(0, 0, _width, _height, color);
 80065b0:	f8d0 c000 	ldr.w	ip, [r0]
 80065b4:	4b27      	ldr	r3, [pc, #156]	@ (8006654 <_ZN12Adafruit_GFX10fillScreenEt+0xa8>)
 80065b6:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 80065ba:	f9b0 900c 	ldrsh.w	r9, [r0, #12]
 80065be:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 80065c2:	429c      	cmp	r4, r3
void Adafruit_GFX::fillScreen(uint16_t color) {
 80065c4:	b083      	sub	sp, #12
 80065c6:	460f      	mov	r7, r1
 80065c8:	d135      	bne.n	8006636 <_ZN12Adafruit_GFX10fillScreenEt+0x8a>
  startWrite();
 80065ca:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80065ce:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8006658 <_ZN12Adafruit_GFX10fillScreenEt+0xac>
 80065d2:	455b      	cmp	r3, fp
 80065d4:	4605      	mov	r5, r0
 80065d6:	d138      	bne.n	800664a <_ZN12Adafruit_GFX10fillScreenEt+0x9e>
  for (int16_t i = x; i < x + w; i++) {
 80065d8:	f1b9 0f00 	cmp.w	r9, #0
 80065dc:	dd14      	ble.n	8006608 <_ZN12Adafruit_GFX10fillScreenEt+0x5c>
 80065de:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800665c <_ZN12Adafruit_GFX10fillScreenEt+0xb0>
 80065e2:	2400      	movs	r4, #0
    writeFastVLine(i, y, h, color);
 80065e4:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 80065e8:	9700      	str	r7, [sp, #0]
 80065ea:	4556      	cmp	r6, sl
 80065ec:	4643      	mov	r3, r8
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	4628      	mov	r0, r5
 80065f4:	b221      	sxth	r1, r4
 80065f6:	d10e      	bne.n	8006616 <_ZN12Adafruit_GFX10fillScreenEt+0x6a>
 80065f8:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
  for (int16_t i = x; i < x + w; i++) {
 80065fc:	3401      	adds	r4, #1
  drawFastVLine(x, y, h, color);
 80065fe:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8006600:	45a1      	cmp	r9, r4
  endWrite();
 8006602:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8006606:	d1ed      	bne.n	80065e4 <_ZN12Adafruit_GFX10fillScreenEt+0x38>
  endWrite();
 8006608:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 800660c:	455b      	cmp	r3, fp
 800660e:	d10d      	bne.n	800662c <_ZN12Adafruit_GFX10fillScreenEt+0x80>
}
 8006610:	b003      	add	sp, #12
 8006612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int16_t i = x; i < x + w; i++) {
 8006616:	3401      	adds	r4, #1
    writeFastVLine(i, y, h, color);
 8006618:	2200      	movs	r2, #0
 800661a:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 800661c:	454c      	cmp	r4, r9
  endWrite();
 800661e:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8006622:	d1df      	bne.n	80065e4 <_ZN12Adafruit_GFX10fillScreenEt+0x38>
  endWrite();
 8006624:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006628:	455b      	cmp	r3, fp
 800662a:	d0f1      	beq.n	8006610 <_ZN12Adafruit_GFX10fillScreenEt+0x64>
 800662c:	4628      	mov	r0, r5
}
 800662e:	b003      	add	sp, #12
 8006630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8006634:	4718      	bx	r3
  fillRect(0, 0, _width, _height, color);
 8006636:	2200      	movs	r2, #0
 8006638:	9101      	str	r1, [sp, #4]
 800663a:	f8cd 8000 	str.w	r8, [sp]
 800663e:	464b      	mov	r3, r9
 8006640:	4611      	mov	r1, r2
 8006642:	47a0      	blx	r4
}
 8006644:	b003      	add	sp, #12
 8006646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 800664a:	4798      	blx	r3
  endWrite();
 800664c:	f8d5 c000 	ldr.w	ip, [r5]
 8006650:	e7c2      	b.n	80065d8 <_ZN12Adafruit_GFX10fillScreenEt+0x2c>
 8006652:	bf00      	nop
 8006654:	08006259 	.word	0x08006259
 8006658:	080060b1 	.word	0x080060b1
 800665c:	080060c5 	.word	0x080060c5

08006660 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8006660:	b410      	push	{r4}
 8006662:	2400      	movs	r4, #0
 8006664:	f361 040f 	bfi	r4, r1, #0, #16
 8006668:	f362 441f 	bfi	r4, r2, #16, #16
    Print() : write_error(0) {}
 800666c:	2100      	movs	r1, #0
  textsize_x = textsize_y = 1;
 800666e:	4a08      	ldr	r2, [pc, #32]	@ (8006690 <_ZN12Adafruit_GFXC1Ess+0x30>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8006670:	60c4      	str	r4, [r0, #12]
 8006672:	e9c0 1401 	strd	r1, r4, [r0, #4]
  textsize_x = textsize_y = 1;
 8006676:	6182      	str	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 8006678:	f04f 34ff 	mov.w	r4, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 800667c:	4a05      	ldr	r2, [pc, #20]	@ (8006694 <_ZN12Adafruit_GFXC1Ess+0x34>)
  wrap = true;
 800667e:	7701      	strb	r1, [r0, #28]
  textcolor = textbgcolor = 0xFFFF;
 8006680:	e9c0 1404 	strd	r1, r4, [r0, #16]
  gfxFont = NULL;
 8006684:	6201      	str	r1, [r0, #32]
}
 8006686:	f85d 4b04 	ldr.w	r4, [sp], #4
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 800668a:	6002      	str	r2, [r0, #0]
}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	01000101 	.word	0x01000101
 8006694:	0800add8 	.word	0x0800add8

08006698 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	4682      	mov	sl, r0
 800669e:	b097      	sub	sp, #92	@ 0x5c
 80066a0:	461d      	mov	r5, r3
 80066a2:	9211      	str	r2, [sp, #68]	@ 0x44
 80066a4:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
  if (!gfxFont) { // 'Classic' built-in font
 80066a8:	f8da 2020 	ldr.w	r2, [sl, #32]
                            uint8_t size_y) {
 80066ac:	f8bd 0080 	ldrh.w	r0, [sp, #128]	@ 0x80
 80066b0:	9305      	str	r3, [sp, #20]
 80066b2:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 80066b6:	f8bd 8084 	ldrh.w	r8, [sp, #132]	@ 0x84
 80066ba:	9003      	str	r0, [sp, #12]
 80066bc:	910a      	str	r1, [sp, #40]	@ 0x28
 80066be:	9307      	str	r3, [sp, #28]
  if (!gfxFont) { // 'Classic' built-in font
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	f000 80e4 	beq.w	800688e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f6>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80066c6:	7a13      	ldrb	r3, [r2, #8]
    startWrite();
 80066c8:	f8da c000 	ldr.w	ip, [sl]
  return gfxFont->bitmap;
 80066cc:	e9d2 2100 	ldrd	r2, r1, [r2]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80066d0:	1aeb      	subs	r3, r5, r3
  return gfxFont->glyph + c;
 80066d2:	b2db      	uxtb	r3, r3
  return gfxFont->bitmap;
 80066d4:	9208      	str	r2, [sp, #32]
  return gfxFont->glyph + c;
 80066d6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80066da:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80066de:	9306      	str	r3, [sp, #24]
    if (size_x > 1 || size_y > 1) {
 80066e0:	9907      	ldr	r1, [sp, #28]
 80066e2:	9b05      	ldr	r3, [sp, #20]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80066e4:	78d4      	ldrb	r4, [r2, #3]
    if (size_x > 1 || size_y > 1) {
 80066e6:	430b      	orrs	r3, r1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80066e8:	7891      	ldrb	r1, [r2, #2]
 80066ea:	9104      	str	r1, [sp, #16]
    if (size_x > 1 || size_y > 1) {
 80066ec:	2b01      	cmp	r3, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 80066ee:	f992 1005 	ldrsb.w	r1, [r2, #5]
 80066f2:	4bad      	ldr	r3, [pc, #692]	@ (80069a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x310>)
           yo = pgm_read_byte(&glyph->yOffset);
 80066f4:	f992 2006 	ldrsb.w	r2, [r2, #6]
 80066f8:	9215      	str	r2, [sp, #84]	@ 0x54
      yo16 = yo;
 80066fa:	bf88      	it	hi
 80066fc:	4693      	movhi	fp, r2
 80066fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006700:	461a      	mov	r2, r3
    startWrite();
 8006702:	f8dc 3014 	ldr.w	r3, [ip, #20]
      xo16 = xo;
 8006706:	bf8e      	itee	hi
 8006708:	910d      	strhi	r1, [sp, #52]	@ 0x34
    int16_t xo16 = 0, yo16 = 0;
 800670a:	f04f 0b00 	movls.w	fp, #0
 800670e:	f8cd b034 	strls.w	fp, [sp, #52]	@ 0x34
 8006712:	4293      	cmp	r3, r2
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 8006714:	9114      	str	r1, [sp, #80]	@ 0x50
    startWrite();
 8006716:	f040 812f 	bne.w	8006978 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2e0>
    for (yy = 0; yy < h; yy++) {
 800671a:	2c00      	cmp	r4, #0
 800671c:	f000 80a9 	beq.w	8006872 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1da>
 8006720:	2700      	movs	r7, #0
 8006722:	e9cd 4b12 	strd	r4, fp, [sp, #72]	@ 0x48
 8006726:	9c03      	ldr	r4, [sp, #12]
 8006728:	463e      	mov	r6, r7
 800672a:	4638      	mov	r0, r7
 800672c:	463a      	mov	r2, r7
      for (xx = 0; xx < w; xx++) {
 800672e:	9b04      	ldr	r3, [sp, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8098 	beq.w	8006866 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ce>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8006736:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006738:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
      for (xx = 0; xx < w; xx++) {
 800673c:	900e      	str	r0, [sp, #56]	@ 0x38
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 800673e:	eb03 0800 	add.w	r8, r3, r0
 8006742:	9b07      	ldr	r3, [sp, #28]
 8006744:	fb08 1803 	mla	r8, r8, r3, r1
 8006748:	fa0f f388 	sxth.w	r3, r8
      for (xx = 0; xx < w; xx++) {
 800674c:	46a3      	mov	fp, r4
 800674e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8006752:	9303      	str	r3, [sp, #12]
      for (xx = 0; xx < w; xx++) {
 8006754:	2500      	movs	r5, #0
 8006756:	4614      	mov	r4, r2
 8006758:	e006      	b.n	8006768 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd0>
 800675a:	9b04      	ldr	r3, [sp, #16]
 800675c:	3501      	adds	r5, #1
 800675e:	b2ed      	uxtb	r5, r5
        bits <<= 1;
 8006760:	0076      	lsls	r6, r6, #1
      for (xx = 0; xx < w; xx++) {
 8006762:	42ab      	cmp	r3, r5
        bits <<= 1;
 8006764:	b2f6      	uxtb	r6, r6
      for (xx = 0; xx < w; xx++) {
 8006766:	d977      	bls.n	8006858 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1c0>
        if (!(bit++ & 7)) {
 8006768:	4623      	mov	r3, r4
 800676a:	1c62      	adds	r2, r4, #1
 800676c:	b2d4      	uxtb	r4, r2
 800676e:	075a      	lsls	r2, r3, #29
 8006770:	d105      	bne.n	800677e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe6>
          bits = pgm_read_byte(&bitmap[bo++]);
 8006772:	9a06      	ldr	r2, [sp, #24]
 8006774:	9908      	ldr	r1, [sp, #32]
 8006776:	1c53      	adds	r3, r2, #1
 8006778:	b29b      	uxth	r3, r3
 800677a:	5c8e      	ldrb	r6, [r1, r2]
 800677c:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 800677e:	0633      	lsls	r3, r6, #24
 8006780:	d5eb      	bpl.n	800675a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
          if (size_x == 1 && size_y == 1) {
 8006782:	9b05      	ldr	r3, [sp, #20]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006784:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
          if (size_x == 1 && size_y == 1) {
 8006788:	2b01      	cmp	r3, #1
 800678a:	d042      	beq.n	8006812 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x17a>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 800678c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800678e:	9a05      	ldr	r2, [sp, #20]
 8006790:	f8dc 901c 	ldr.w	r9, [ip, #28]
 8006794:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8006798:	442b      	add	r3, r5
 800679a:	fb03 7702 	mla	r7, r3, r2, r7
 800679e:	b213      	sxth	r3, r2
 80067a0:	4a82      	ldr	r2, [pc, #520]	@ (80069ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x314>)
 80067a2:	4591      	cmp	r9, r2
 80067a4:	b23f      	sxth	r7, r7
 80067a6:	d14e      	bne.n	8006846 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ae>
  fillRect(x, y, w, h, color);
 80067a8:	f8dc 9040 	ldr.w	r9, [ip, #64]	@ 0x40
 80067ac:	4a80      	ldr	r2, [pc, #512]	@ (80069b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x318>)
 80067ae:	4591      	cmp	r9, r2
 80067b0:	d149      	bne.n	8006846 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ae>
  startWrite();
 80067b2:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80067b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d163      	bne.n	8006884 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ec>
  for (int16_t i = x; i < x + w; i++) {
 80067bc:	9b05      	ldr	r3, [sp, #20]
 80067be:	eb03 0907 	add.w	r9, r3, r7
 80067c2:	45b9      	cmp	r9, r7
 80067c4:	dd1b      	ble.n	80067fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x166>
 80067c6:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
 80067ca:	e00a      	b.n	80067e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x14a>
  drawFastVLine(x, y, h, color);
 80067cc:	f8cd b000 	str.w	fp, [sp]
 80067d0:	f8dc 4038 	ldr.w	r4, [ip, #56]	@ 0x38
 80067d4:	3701      	adds	r7, #1
  for (int16_t i = x; i < x + w; i++) {
 80067d6:	b23f      	sxth	r7, r7
    writeFastVLine(i, y, h, color);
 80067d8:	47a0      	blx	r4
  for (int16_t i = x; i < x + w; i++) {
 80067da:	45b9      	cmp	r9, r7
  endWrite();
 80067dc:	f8da c000 	ldr.w	ip, [sl]
  for (int16_t i = x; i < x + w; i++) {
 80067e0:	dd0b      	ble.n	80067fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x162>
    writeFastVLine(i, y, h, color);
 80067e2:	f8dc 4020 	ldr.w	r4, [ip, #32]
 80067e6:	4d73      	ldr	r5, [pc, #460]	@ (80069b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x31c>)
  drawFastVLine(x, y, h, color);
 80067e8:	9a03      	ldr	r2, [sp, #12]
 80067ea:	42ac      	cmp	r4, r5
 80067ec:	4639      	mov	r1, r7
 80067ee:	4643      	mov	r3, r8
 80067f0:	4650      	mov	r0, sl
 80067f2:	d0eb      	beq.n	80067cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    writeFastVLine(i, y, h, color);
 80067f4:	f8cd b000 	str.w	fp, [sp]
 80067f8:	e7ec      	b.n	80067d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x13c>
 80067fa:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
  endWrite();
 80067fe:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006804:	4293      	cmp	r3, r2
 8006806:	d0a8      	beq.n	800675a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
 8006808:	4650      	mov	r0, sl
 800680a:	4798      	blx	r3
    endWrite();
 800680c:	f8da c000 	ldr.w	ip, [sl]
 8006810:	e7a3      	b.n	800675a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
          if (size_x == 1 && size_y == 1) {
 8006812:	9b07      	ldr	r3, [sp, #28]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d1b9      	bne.n	800678c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xf4>
            writePixel(x + xo + xx, y + yo + yy, color);
 8006818:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800681a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800681c:	18f9      	adds	r1, r7, r3
 800681e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006820:	f8dc 7018 	ldr.w	r7, [ip, #24]
 8006824:	189a      	adds	r2, r3, r2
 8006826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006828:	441a      	add	r2, r3
 800682a:	4b63      	ldr	r3, [pc, #396]	@ (80069b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x320>)
 800682c:	4429      	add	r1, r5
 800682e:	429f      	cmp	r7, r3
  drawPixel(x, y, color);
 8006830:	bf08      	it	eq
 8006832:	f8dc 7010 	ldreq.w	r7, [ip, #16]
            writePixel(x + xo + xx, y + yo + yy, color);
 8006836:	b209      	sxth	r1, r1
 8006838:	b212      	sxth	r2, r2
 800683a:	465b      	mov	r3, fp
 800683c:	4650      	mov	r0, sl
 800683e:	47b8      	blx	r7
    endWrite();
 8006840:	f8da c000 	ldr.w	ip, [sl]
 8006844:	e789      	b.n	800675a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8006846:	e9cd 8b00 	strd	r8, fp, [sp]
 800684a:	9a03      	ldr	r2, [sp, #12]
 800684c:	4639      	mov	r1, r7
 800684e:	4650      	mov	r0, sl
 8006850:	47c8      	blx	r9
    endWrite();
 8006852:	f8da c000 	ldr.w	ip, [sl]
 8006856:	e780      	b.n	800675a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
        if (!(bit++ & 7)) {
 8006858:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	@ 0x38
 800685c:	eb02 0e03 	add.w	lr, r2, r3
 8006860:	465c      	mov	r4, fp
 8006862:	fa5f f28e 	uxtb.w	r2, lr
    for (yy = 0; yy < h; yy++) {
 8006866:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006868:	3001      	adds	r0, #1
 800686a:	b2c0      	uxtb	r0, r0
 800686c:	4283      	cmp	r3, r0
 800686e:	f63f af5e 	bhi.w	800672e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x96>
    endWrite();
 8006872:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006878:	4293      	cmp	r3, r2
 800687a:	f040 80d1 	bne.w	8006a20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x388>
}
 800687e:	b017      	add	sp, #92	@ 0x5c
 8006880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 8006884:	4650      	mov	r0, sl
 8006886:	4798      	blx	r3
  endWrite();
 8006888:	f8da c000 	ldr.w	ip, [sl]
 800688c:	e796      	b.n	80067bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x124>
    if ((x >= _width) ||              // Clip right
 800688e:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 8006892:	428a      	cmp	r2, r1
 8006894:	460b      	mov	r3, r1
 8006896:	ddf2      	ble.n	800687e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 8006898:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 800689c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800689e:	428a      	cmp	r2, r1
 80068a0:	dded      	ble.n	800687e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80068a2:	9805      	ldr	r0, [sp, #20]
 80068a4:	2206      	movs	r2, #6
 80068a6:	fb12 3200 	smlabb	r2, r2, r0, r3
        (y >= _height) ||             // Clip bottom
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	dde7      	ble.n	800687e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 80068ae:	9b07      	ldr	r3, [sp, #28]
 80068b0:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	dde2      	ble.n	800687e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
    if (!_cp437 && (c >= 176))
 80068b8:	f89a 201c 	ldrb.w	r2, [sl, #28]
 80068bc:	2a00      	cmp	r2, #0
 80068be:	f000 80c7 	beq.w	8006a50 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3b8>
    startWrite();
 80068c2:	f8da 0000 	ldr.w	r0, [sl]
 80068c6:	4b38      	ldr	r3, [pc, #224]	@ (80069a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x310>)
 80068c8:	6942      	ldr	r2, [r0, #20]
 80068ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80068cc:	429a      	cmp	r2, r3
 80068ce:	f040 80d6 	bne.w	8006a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3e6>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80068d2:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 80068d6:	4a39      	ldr	r2, [pc, #228]	@ (80069bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x324>)
            writePixel(x + i, y + j, color);
 80068d8:	f8bd b044 	ldrh.w	fp, [sp, #68]	@ 0x44
 80068dc:	9f05      	ldr	r7, [sp, #20]
 80068de:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80068e2:	f8cd 8010 	str.w	r8, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80068e6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80068ea:	1d61      	adds	r1, r4, #5
 80068ec:	b289      	uxth	r1, r1
 80068ee:	442a      	add	r2, r5
            writePixel(x + i, y + j, color);
 80068f0:	910e      	str	r1, [sp, #56]	@ 0x38
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80068f2:	46a4      	mov	ip, r4
            writePixel(x + i, y + j, color);
 80068f4:	4611      	mov	r1, r2
 80068f6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80068f8:	4603      	mov	r3, r0
 80068fa:	46a0      	mov	r8, r4
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80068fc:	fa0f f288 	sxth.w	r2, r8
 8006900:	9206      	str	r2, [sp, #24]
 8006902:	b23a      	sxth	r2, r7
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8006904:	f811 6b01 	ldrb.w	r6, [r1], #1
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006908:	9208      	str	r2, [sp, #32]
 800690a:	fa0f f289 	sxth.w	r2, r9
 800690e:	920a      	str	r2, [sp, #40]	@ 0x28
 8006910:	463a      	mov	r2, r7
 8006912:	e9cd 810c 	strd	r8, r1, [sp, #48]	@ 0x30
 8006916:	4657      	mov	r7, sl
 8006918:	2408      	movs	r4, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800691a:	2500      	movs	r5, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800691c:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8006920:	4692      	mov	sl, r2
 8006922:	e01a      	b.n	800695a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c2>
          if (size_x == 1 && size_y == 1)
 8006924:	f1ba 0f01 	cmp.w	sl, #1
            writePixel(x + i, y + j, color);
 8006928:	b2aa      	uxth	r2, r5
          if (size_x == 1 && size_y == 1)
 800692a:	d02a      	beq.n	8006982 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ea>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 800692c:	fb19 f202 	smulbb	r2, r9, r2
 8006930:	9903      	ldr	r1, [sp, #12]
 8006932:	445a      	add	r2, fp
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006934:	9101      	str	r1, [sp, #4]
 8006936:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006938:	9100      	str	r1, [sp, #0]
 800693a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800693e:	9906      	ldr	r1, [sp, #24]
 8006940:	9b08      	ldr	r3, [sp, #32]
 8006942:	b212      	sxth	r2, r2
 8006944:	4638      	mov	r0, r7
 8006946:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 8006948:	683b      	ldr	r3, [r7, #0]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800694a:	3c01      	subs	r4, #1
 800694c:	3501      	adds	r5, #1
 800694e:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8006952:	b26d      	sxtb	r5, r5
 8006954:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006958:	d032      	beq.n	80069c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x328>
        if (line & 1) {
 800695a:	07f1      	lsls	r1, r6, #31
 800695c:	d4e2      	bmi.n	8006924 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x28c>
        } else if (bg != color) {
 800695e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8006962:	428a      	cmp	r2, r1
 8006964:	d0f1      	beq.n	800694a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
          if (size_x == 1 && size_y == 1)
 8006966:	f1ba 0f01 	cmp.w	sl, #1
            writePixel(x + i, y + j, color);
 800696a:	b2aa      	uxth	r2, r5
          if (size_x == 1 && size_y == 1)
 800696c:	d05d      	beq.n	8006a2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x392>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800696e:	fb19 f202 	smulbb	r2, r9, r2
 8006972:	9904      	ldr	r1, [sp, #16]
 8006974:	445a      	add	r2, fp
 8006976:	e7dd      	b.n	8006934 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29c>
    startWrite();
 8006978:	4650      	mov	r0, sl
 800697a:	4798      	blx	r3
    endWrite();
 800697c:	f8da c000 	ldr.w	ip, [sl]
 8006980:	e6cb      	b.n	800671a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
          if (size_x == 1 && size_y == 1)
 8006982:	f1b9 0f01 	cmp.w	r9, #1
 8006986:	d1d1      	bne.n	800692c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x294>
            writePixel(x + i, y + j, color);
 8006988:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800698c:	480a      	ldr	r0, [pc, #40]	@ (80069b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x320>)
 800698e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8006992:	4580      	cmp	r8, r0
 8006994:	445a      	add	r2, fp
  drawPixel(x, y, color);
 8006996:	bf08      	it	eq
 8006998:	f8d3 8010 	ldreq.w	r8, [r3, #16]
            writePixel(x + i, y + j, color);
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	b212      	sxth	r2, r2
 80069a0:	4638      	mov	r0, r7
 80069a2:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	e7d0      	b.n	800694a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
 80069a8:	080060b1 	.word	0x080060b1
 80069ac:	08006511 	.word	0x08006511
 80069b0:	08006259 	.word	0x08006259
 80069b4:	080060c5 	.word	0x080060c5
 80069b8:	080060b5 	.word	0x080060b5
 80069bc:	0800ae28 	.word	0x0800ae28
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80069c0:	e9dd 810c 	ldrd	r8, r1, [sp, #48]	@ 0x30
 80069c4:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 80069c8:	4652      	mov	r2, sl
 80069ca:	4490      	add	r8, r2
 80069cc:	46ba      	mov	sl, r7
 80069ce:	f10c 0c01 	add.w	ip, ip, #1
 80069d2:	4617      	mov	r7, r2
 80069d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069d6:	fa1f fc8c 	uxth.w	ip, ip
 80069da:	4562      	cmp	r2, ip
 80069dc:	fa1f f888 	uxth.w	r8, r8
 80069e0:	d18c      	bne.n	80068fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x264>
    if (bg != color) { // If opaque, draw vertical line for last column
 80069e2:	4618      	mov	r0, r3
 80069e4:	e9dd 3803 	ldrd	r3, r8, [sp, #12]
 80069e8:	4543      	cmp	r3, r8
 80069ea:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80069ec:	d013      	beq.n	8006a16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x37e>
      if (size_x == 1 && size_y == 1)
 80069ee:	9b05      	ldr	r3, [sp, #20]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d032      	beq.n	8006a5a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3c2>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80069f4:	9b07      	ldr	r3, [sp, #28]
 80069f6:	f8cd 8004 	str.w	r8, [sp, #4]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	69c5      	ldr	r5, [r0, #28]
 8006a00:	9805      	ldr	r0, [sp, #20]
 8006a02:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006a04:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8006a08:	18e1      	adds	r1, r4, r3
 8006a0a:	b209      	sxth	r1, r1
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	4650      	mov	r0, sl
 8006a10:	47a8      	blx	r5
    endWrite();
 8006a12:	f8da 0000 	ldr.w	r0, [sl]
 8006a16:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006a18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	f43f af2f 	beq.w	800687e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
    endWrite();
 8006a20:	4650      	mov	r0, sl
}
 8006a22:	b017      	add	sp, #92	@ 0x5c
 8006a24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 8006a28:	4718      	bx	r3
          if (size_x == 1 && size_y == 1)
 8006a2a:	f1b9 0f01 	cmp.w	r9, #1
 8006a2e:	d19e      	bne.n	800696e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d6>
            writePixel(x + i, y + j, bg);
 8006a30:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8006a34:	4814      	ldr	r0, [pc, #80]	@ (8006a88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f0>)
 8006a36:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8006a3a:	4580      	cmp	r8, r0
 8006a3c:	445a      	add	r2, fp
  drawPixel(x, y, color);
 8006a3e:	bf08      	it	eq
 8006a40:	f8d3 8010 	ldreq.w	r8, [r3, #16]
            writePixel(x + i, y + j, bg);
 8006a44:	9b04      	ldr	r3, [sp, #16]
 8006a46:	b212      	sxth	r2, r2
 8006a48:	4638      	mov	r0, r7
 8006a4a:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	e77c      	b.n	800694a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
    if (!_cp437 && (c >= 176))
 8006a50:	2daf      	cmp	r5, #175	@ 0xaf
      c++; // Handle 'classic' charset behavior
 8006a52:	bf84      	itt	hi
 8006a54:	3501      	addhi	r5, #1
 8006a56:	b2ed      	uxtbhi	r5, r5
 8006a58:	e733      	b.n	80068c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x22a>
      if (size_x == 1 && size_y == 1)
 8006a5a:	9b07      	ldr	r3, [sp, #28]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d1c9      	bne.n	80069f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x35c>
        writeFastVLine(x + 5, y, 8, bg);
 8006a60:	6a04      	ldr	r4, [r0, #32]
  drawFastVLine(x, y, h, color);
 8006a62:	f8cd 8000 	str.w	r8, [sp]
        writeFastVLine(x + 5, y, 8, bg);
 8006a66:	b211      	sxth	r1, r2
 8006a68:	4a08      	ldr	r2, [pc, #32]	@ (8006a8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>)
 8006a6a:	4294      	cmp	r4, r2
  drawFastVLine(x, y, h, color);
 8006a6c:	bf08      	it	eq
 8006a6e:	6b84      	ldreq	r4, [r0, #56]	@ 0x38
        writeFastVLine(x + 5, y, 8, bg);
 8006a70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006a72:	4650      	mov	r0, sl
 8006a74:	2308      	movs	r3, #8
 8006a76:	47a0      	blx	r4
    endWrite();
 8006a78:	f8da 0000 	ldr.w	r0, [sl]
 8006a7c:	e7cb      	b.n	8006a16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x37e>
    startWrite();
 8006a7e:	4650      	mov	r0, sl
 8006a80:	4790      	blx	r2
            writePixel(x + i, y + j, color);
 8006a82:	f8da 0000 	ldr.w	r0, [sl]
 8006a86:	e724      	b.n	80068d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x23a>
 8006a88:	080060b5 	.word	0x080060b5
 8006a8c:	080060c5 	.word	0x080060c5

08006a90 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 8006a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a92:	4604      	mov	r4, r0
  if (!gfxFont) { // 'Classic' built-in font
 8006a94:	6a00      	ldr	r0, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 8006a96:	b085      	sub	sp, #20
 8006a98:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d047      	beq.n	8006b2e <_ZN12Adafruit_GFX5writeEh+0x9e>
    if (c == '\n') {
 8006a9e:	290a      	cmp	r1, #10
 8006aa0:	d03a      	beq.n	8006b18 <_ZN12Adafruit_GFX5writeEh+0x88>
    } else if (c != '\r') {
 8006aa2:	290d      	cmp	r1, #13
 8006aa4:	d040      	beq.n	8006b28 <_ZN12Adafruit_GFX5writeEh+0x98>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 8006aa6:	7a02      	ldrb	r2, [r0, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8006aa8:	4291      	cmp	r1, r2
 8006aaa:	d33d      	bcc.n	8006b28 <_ZN12Adafruit_GFX5writeEh+0x98>
 8006aac:	7a81      	ldrb	r1, [r0, #10]
 8006aae:	4299      	cmp	r1, r3
 8006ab0:	d33a      	bcc.n	8006b28 <_ZN12Adafruit_GFX5writeEh+0x98>
  return gfxFont->glyph + c;
 8006ab2:	6845      	ldr	r5, [r0, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 8006ab4:	1a9a      	subs	r2, r3, r2
  return gfxFont->glyph + c;
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 8006abc:	78ae      	ldrb	r6, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8006abe:	b326      	cbz	r6, 8006b0a <_ZN12Adafruit_GFX5writeEh+0x7a>
 8006ac0:	78ea      	ldrb	r2, [r5, #3]
 8006ac2:	b312      	cbz	r2, 8006b0a <_ZN12Adafruit_GFX5writeEh+0x7a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8006ac4:	7ee7      	ldrb	r7, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8006ac6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8006aca:	f894 c018 	ldrb.w	ip, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 8006ace:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8006ad2:	f894 e019 	ldrb.w	lr, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8006ad6:	b17f      	cbz	r7, 8006af8 <_ZN12Adafruit_GFX5writeEh+0x68>
 8006ad8:	f995 7005 	ldrsb.w	r7, [r5, #5]
 8006adc:	443e      	add	r6, r7
 8006ade:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006ae2:	fb0c 1606 	mla	r6, ip, r6, r1
 8006ae6:	42be      	cmp	r6, r7
 8006ae8:	dd06      	ble.n	8006af8 <_ZN12Adafruit_GFX5writeEh+0x68>
            cursor_x = 0;
 8006aea:	2100      	movs	r1, #0
 8006aec:	8221      	strh	r1, [r4, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8006aee:	7b00      	ldrb	r0, [r0, #12]
            cursor_y += (int16_t)textsize_y *
 8006af0:	fb00 200e 	mla	r0, r0, lr, r2
 8006af4:	b202      	sxth	r2, r0
 8006af6:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8006af8:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8006afc:	8ae0      	ldrh	r0, [r4, #22]
 8006afe:	9001      	str	r0, [sp, #4]
 8006b00:	8aa0      	ldrh	r0, [r4, #20]
 8006b02:	9000      	str	r0, [sp, #0]
 8006b04:	4620      	mov	r0, r4
 8006b06:	f7ff fdc7 	bl	8006698 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8006b0a:	7929      	ldrb	r1, [r5, #4]
        cursor_x +=
 8006b0c:	8a23      	ldrh	r3, [r4, #16]
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8006b0e:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 8006b10:	fb01 3302 	mla	r3, r1, r2, r3
 8006b14:	8223      	strh	r3, [r4, #16]
 8006b16:	e007      	b.n	8006b28 <_ZN12Adafruit_GFX5writeEh+0x98>
      cursor_x = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	8223      	strh	r3, [r4, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8006b1c:	7b02      	ldrb	r2, [r0, #12]
      cursor_y +=
 8006b1e:	8a63      	ldrh	r3, [r4, #18]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8006b20:	7e61      	ldrb	r1, [r4, #25]
      cursor_y +=
 8006b22:	fb01 3302 	mla	r3, r1, r2, r3
 8006b26:	8263      	strh	r3, [r4, #18]
}
 8006b28:	2001      	movs	r0, #1
 8006b2a:	b005      	add	sp, #20
 8006b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c == '\n') {              // Newline?
 8006b2e:	290a      	cmp	r1, #10
 8006b30:	d02a      	beq.n	8006b88 <_ZN12Adafruit_GFX5writeEh+0xf8>
    } else if (c != '\r') {       // Ignore carriage returns
 8006b32:	290d      	cmp	r1, #13
 8006b34:	d0f8      	beq.n	8006b28 <_ZN12Adafruit_GFX5writeEh+0x98>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8006b36:	7ee7      	ldrb	r7, [r4, #27]
 8006b38:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8006b3c:	7e25      	ldrb	r5, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 8006b3e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8006b42:	7e66      	ldrb	r6, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8006b44:	b16f      	cbz	r7, 8006b62 <_ZN12Adafruit_GFX5writeEh+0xd2>
 8006b46:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006b4a:	f04f 0c06 	mov.w	ip, #6
 8006b4e:	fb1c 1c05 	smlabb	ip, ip, r5, r1
 8006b52:	45bc      	cmp	ip, r7
 8006b54:	dd05      	ble.n	8006b62 <_ZN12Adafruit_GFX5writeEh+0xd2>
        cursor_y += textsize_y * 8; // advance y one line
 8006b56:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8006b5a:	b212      	sxth	r2, r2
        cursor_x = 0;                                       // Reset x to zero,
 8006b5c:	8220      	strh	r0, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 8006b5e:	8262      	strh	r2, [r4, #18]
 8006b60:	4601      	mov	r1, r0
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8006b62:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8006b66:	8ae0      	ldrh	r0, [r4, #22]
 8006b68:	9001      	str	r0, [sp, #4]
 8006b6a:	8aa0      	ldrh	r0, [r4, #20]
 8006b6c:	9000      	str	r0, [sp, #0]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f7ff fd92 	bl	8006698 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 8006b74:	7e23      	ldrb	r3, [r4, #24]
 8006b76:	8a22      	ldrh	r2, [r4, #16]
 8006b78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b7c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}
 8006b80:	2001      	movs	r0, #1
      cursor_x += textsize_x * 6; // Advance x one char
 8006b82:	8223      	strh	r3, [r4, #16]
}
 8006b84:	b005      	add	sp, #20
 8006b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cursor_y += textsize_y * 8; // advance y one line
 8006b88:	8a63      	ldrh	r3, [r4, #18]
 8006b8a:	7e62      	ldrb	r2, [r4, #25]
      cursor_x = 0;               // Reset x to zero,
 8006b8c:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 8006b8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
}
 8006b92:	2001      	movs	r0, #1
      cursor_y += textsize_y * 8; // advance y one line
 8006b94:	8263      	strh	r3, [r4, #18]
}
 8006b96:	b005      	add	sp, #20
 8006b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b9a:	bf00      	nop

08006b9c <_ZN12Adafruit_GFX11setTextSizeEh>:
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8006b9c:	2901      	cmp	r1, #1
 8006b9e:	bf38      	it	cc
 8006ba0:	2101      	movcc	r1, #1
  textsize_x = (s_x > 0) ? s_x : 1;
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	f361 0307 	bfi	r3, r1, #0, #8
 8006baa:	f361 230f 	bfi	r3, r1, #8, #8
 8006bae:	8303      	strh	r3, [r0, #24]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop

08006bb4 <_ZN15Adafruit_SPITFT10startWriteEv>:
#else  // !HAS_PORT_SET_CLR
    *csPort &= csPinMaskClr;
#endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
//    digitalWrite(_cs, LOW);
    callback(SpiCmd::cs_low, 0, 0);
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2002      	movs	r0, #2
 8006bbc:	4718      	bx	r3
 8006bbe:	bf00      	nop

08006bc0 <_ZN15Adafruit_SPITFT8endWriteEv>:
    callback(SpiCmd::cs_high, 0, 0);
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	2003      	movs	r0, #3
 8006bc8:	4718      	bx	r3
 8006bca:	bf00      	nop

08006bcc <_ZN15Adafruit_SPITFT10writePixelEsst>:
    @param  x      Horizontal position (0 = left).
    @param  y      Vertical position   (0 = top).
    @param  color  16-bit pixel color in '565' RGB format.
*/
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	db1e      	blt.n	8006c0e <_ZN15Adafruit_SPITFT10writePixelEsst+0x42>
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	461c      	mov	r4, r3
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8006bd4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8006bd8:	428b      	cmp	r3, r1
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 8006bda:	b084      	sub	sp, #16
 8006bdc:	4605      	mov	r5, r0
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8006bde:	dd14      	ble.n	8006c0a <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	db12      	blt.n	8006c0a <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
 8006be4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8006be8:	4293      	cmp	r3, r2
 8006bea:	dd0e      	ble.n	8006c0a <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
    setAddrWindow(x, y, 1, 1);
 8006bec:	6806      	ldr	r6, [r0, #0]
 8006bee:	2301      	movs	r3, #1
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	b292      	uxth	r2, r2
 8006bf4:	b289      	uxth	r1, r1
 8006bf6:	6d76      	ldr	r6, [r6, #84]	@ 0x54
 8006bf8:	47b0      	blx	r6
#endif
    TFT_WR_STROBE();
  }
#endif
  uint8_t data[2];
  data[0] = w >> 8;
 8006bfa:	ba63      	rev16	r3, r4
 8006bfc:	f8ad 300c 	strh.w	r3, [sp, #12]
  data[1] = w;
  callback(SpiCmd::transmit, data, 2);
 8006c00:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8006c02:	2202      	movs	r2, #2
 8006c04:	a903      	add	r1, sp, #12
 8006c06:	2006      	movs	r0, #6
 8006c08:	47a0      	blx	r4
}
 8006c0a:	b004      	add	sp, #16
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	4770      	bx	lr

08006c10 <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 8006c10:	b530      	push	{r4, r5, lr}
  startWrite();
 8006c12:	6803      	ldr	r3, [r0, #0]
 8006c14:	4a1b      	ldr	r2, [pc, #108]	@ (8006c84 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x74>)
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	4293      	cmp	r3, r2
void Adafruit_SPITFT::invertDisplay(bool i) {
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	460d      	mov	r5, r1
 8006c20:	d129      	bne.n	8006c76 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x66>
    callback(SpiCmd::cs_low, 0, 0);
 8006c22:	2200      	movs	r2, #0
 8006c24:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006c26:	4611      	mov	r1, r2
 8006c28:	2002      	movs	r0, #2
 8006c2a:	4798      	blx	r3
  writeCommand(i ? invertOnCommand : invertOffCommand);
 8006c2c:	b305      	cbz	r5, 8006c70 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x60>
 8006c2e:	f894 5028 	ldrb.w	r5, [r4, #40]	@ 0x28
#else  // !HAS_PORT_SET_CLR
    *dcPort &= dcPinMaskClr;
#endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
//    digitalWrite(_dc, LOW);
    callback(SpiCmd::dc_low, 0, 0);
 8006c32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c34:	2200      	movs	r2, #0
 8006c36:	4611      	mov	r1, r2
 8006c38:	2004      	movs	r0, #4
 8006c3a:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8006c3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c3e:	f88d 5007 	strb.w	r5, [sp, #7]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f10d 0107 	add.w	r1, sp, #7
 8006c48:	2006      	movs	r0, #6
 8006c4a:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c50:	4611      	mov	r1, r2
 8006c52:	2005      	movs	r0, #5
 8006c54:	4798      	blx	r3
  endWrite();
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	4a0b      	ldr	r2, [pc, #44]	@ (8006c88 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x78>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10c      	bne.n	8006c7a <_ZN15Adafruit_SPITFT13invertDisplayEb+0x6a>
    callback(SpiCmd::cs_high, 0, 0);
 8006c60:	2200      	movs	r2, #0
 8006c62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c64:	4611      	mov	r1, r2
 8006c66:	2003      	movs	r0, #3
}
 8006c68:	b003      	add	sp, #12
 8006c6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c6e:	4718      	bx	r3
  writeCommand(i ? invertOnCommand : invertOffCommand);
 8006c70:	f894 5029 	ldrb.w	r5, [r4, #41]	@ 0x29
 8006c74:	e7dd      	b.n	8006c32 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x22>
  startWrite();
 8006c76:	4798      	blx	r3
 8006c78:	e7d8      	b.n	8006c2c <_ZN15Adafruit_SPITFT13invertDisplayEb+0x1c>
  endWrite();
 8006c7a:	4620      	mov	r0, r4
}
 8006c7c:	b003      	add	sp, #12
 8006c7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  endWrite();
 8006c82:	4718      	bx	r3
 8006c84:	08006bb5 	.word	0x08006bb5
 8006c88:	08006bc1 	.word	0x08006bc1

08006c8c <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
                                            uint16_t color) {
 8006c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c90:	b084      	sub	sp, #16
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8006c92:	2900      	cmp	r1, #0
                                            uint16_t color) {
 8006c94:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8006c98:	db32      	blt.n	8006d00 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006ca0:	4288      	cmp	r0, r1
 8006ca2:	dd2d      	ble.n	8006d00 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d02b      	beq.n	8006d00 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
    if (h < 0) {                       // If negative height...
 8006ca8:	da05      	bge.n	8006cb6 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x2a>
      y += h + 1;                      //   Move Y to top edge
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3201      	adds	r2, #1
 8006cae:	441a      	add	r2, r3
      h = -h;                          //   Use positive height
 8006cb0:	425b      	negs	r3, r3
      y += h + 1;                      //   Move Y to top edge
 8006cb2:	b212      	sxth	r2, r2
      h = -h;                          //   Use positive height
 8006cb4:	b21b      	sxth	r3, r3
    if (y < _height) { // Not off bottom
 8006cb6:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
 8006cba:	4290      	cmp	r0, r2
 8006cbc:	dd20      	ble.n	8006d00 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
      int16_t y2 = y + h - 1;
 8006cbe:	fa1f fc82 	uxth.w	ip, r2
 8006cc2:	fa1f fe83 	uxth.w	lr, r3
 8006cc6:	eb0c 070e 	add.w	r7, ip, lr
 8006cca:	b2bf      	uxth	r7, r7
 8006ccc:	1e7c      	subs	r4, r7, #1
 8006cce:	b224      	sxth	r4, r4
      if (y2 >= 0) { // Not off top
 8006cd0:	2c00      	cmp	r4, #0
 8006cd2:	db15      	blt.n	8006d00 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
        if (y < 0) {
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	da03      	bge.n	8006ce0 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
          h = y2 + 1;
 8006cd8:	b23b      	sxth	r3, r7
 8006cda:	46be      	mov	lr, r7
 8006cdc:	f04f 0c00 	mov.w	ip, #0
  setAddrWindow(x, y, w, h);
 8006ce0:	6832      	ldr	r2, [r6, #0]
        if (y2 >= _height) {
 8006ce2:	42a0      	cmp	r0, r4
  setAddrWindow(x, y, w, h);
 8006ce4:	f8d2 8054 	ldr.w	r8, [r2, #84]	@ 0x54
 8006ce8:	b289      	uxth	r1, r1
        if (y2 >= _height) {
 8006cea:	dc0c      	bgt.n	8006d06 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x7a>
          h = _height - y;
 8006cec:	eba0 000c 	sub.w	r0, r0, ip
 8006cf0:	b287      	uxth	r7, r0
  setAddrWindow(x, y, w, h);
 8006cf2:	9700      	str	r7, [sp, #0]
 8006cf4:	4662      	mov	r2, ip
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	47c0      	blx	r8
  writeColor(color, (uint32_t)w * h);
 8006cfc:	b23c      	sxth	r4, r7
  if (!len)
 8006cfe:	b94f      	cbnz	r7, 8006d14 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x88>
}
 8006d00:	b004      	add	sp, #16
 8006d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  writeColor(color, (uint32_t)w * h);
 8006d06:	461c      	mov	r4, r3
  setAddrWindow(x, y, w, h);
 8006d08:	f8cd e000 	str.w	lr, [sp]
 8006d0c:	4662      	mov	r2, ip
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4630      	mov	r0, r6
 8006d12:	47c0      	blx	r8
    while (len--) {
 8006d14:	ba6d      	rev16	r5, r5
      callback(SpiCmd::transmit, data, 2);
 8006d16:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8006d18:	f8ad 500c 	strh.w	r5, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	a903      	add	r1, sp, #12
 8006d20:	2006      	movs	r0, #6
 8006d22:	4798      	blx	r3
    while (len--) {
 8006d24:	3c01      	subs	r4, #1
 8006d26:	d1f6      	bne.n	8006d16 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x8a>
 8006d28:	e7ea      	b.n	8006d00 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 8006d2a:	bf00      	nop

08006d2c <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
                                            uint16_t color) {
 8006d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	b084      	sub	sp, #16
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8006d32:	2a00      	cmp	r2, #0
                                            uint16_t color) {
 8006d34:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8006d38:	db36      	blt.n	8006da8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 8006d3a:	461c      	mov	r4, r3
 8006d3c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	4606      	mov	r6, r0
 8006d44:	dd30      	ble.n	8006da8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 8006d46:	2c00      	cmp	r4, #0
 8006d48:	d02e      	beq.n	8006da8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
    if (w < 0) {                        // If negative width...
 8006d4a:	da05      	bge.n	8006d58 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x2c>
      x += w + 1;                       //   Move X to left edge
 8006d4c:	b2a4      	uxth	r4, r4
 8006d4e:	3101      	adds	r1, #1
 8006d50:	4421      	add	r1, r4
      w = -w;                           //   Use positive width
 8006d52:	4264      	negs	r4, r4
      x += w + 1;                       //   Move X to left edge
 8006d54:	b209      	sxth	r1, r1
      w = -w;                           //   Use positive width
 8006d56:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 8006d58:	f9b6 000c 	ldrsh.w	r0, [r6, #12]
 8006d5c:	4288      	cmp	r0, r1
 8006d5e:	dd23      	ble.n	8006da8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
      int16_t x2 = x + w - 1;
 8006d60:	fa1f fc81 	uxth.w	ip, r1
 8006d64:	b2a3      	uxth	r3, r4
 8006d66:	eb0c 0e03 	add.w	lr, ip, r3
 8006d6a:	fa1f fe8e 	uxth.w	lr, lr
 8006d6e:	f10e 37ff 	add.w	r7, lr, #4294967295
 8006d72:	b23f      	sxth	r7, r7
      if (x2 >= 0) { // Not off left
 8006d74:	2f00      	cmp	r7, #0
 8006d76:	db17      	blt.n	8006da8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
        if (x < 0) {
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	da04      	bge.n	8006d86 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x5a>
          w = x2 + 1;
 8006d7c:	fa0f f48e 	sxth.w	r4, lr
 8006d80:	4673      	mov	r3, lr
 8006d82:	f04f 0c00 	mov.w	ip, #0
  setAddrWindow(x, y, w, h);
 8006d86:	6831      	ldr	r1, [r6, #0]
        if (x2 >= _width) {
 8006d88:	42b8      	cmp	r0, r7
  setAddrWindow(x, y, w, h);
 8006d8a:	f8d1 8054 	ldr.w	r8, [r1, #84]	@ 0x54
 8006d8e:	b292      	uxth	r2, r2
        if (x2 >= _width) {
 8006d90:	dc0d      	bgt.n	8006dae <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x82>
          w = _width - x;
 8006d92:	eba0 000c 	sub.w	r0, r0, ip
 8006d96:	b287      	uxth	r7, r0
  setAddrWindow(x, y, w, h);
 8006d98:	2301      	movs	r3, #1
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4661      	mov	r1, ip
 8006d9e:	463b      	mov	r3, r7
 8006da0:	4630      	mov	r0, r6
 8006da2:	47c0      	blx	r8
  writeColor(color, (uint32_t)w * h);
 8006da4:	b23c      	sxth	r4, r7
  if (!len)
 8006da6:	b93f      	cbnz	r7, 8006db8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x8c>
}
 8006da8:	b004      	add	sp, #16
 8006daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  setAddrWindow(x, y, w, h);
 8006dae:	2001      	movs	r0, #1
 8006db0:	9000      	str	r0, [sp, #0]
 8006db2:	4661      	mov	r1, ip
 8006db4:	4630      	mov	r0, r6
 8006db6:	47c0      	blx	r8
    while (len--) {
 8006db8:	ba6d      	rev16	r5, r5
      callback(SpiCmd::transmit, data, 2);
 8006dba:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8006dbc:	f8ad 500c 	strh.w	r5, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	a903      	add	r1, sp, #12
 8006dc4:	2006      	movs	r0, #6
 8006dc6:	4798      	blx	r3
    while (len--) {
 8006dc8:	3c01      	subs	r4, #1
 8006dca:	d1f6      	bne.n	8006dba <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x8e>
 8006dcc:	e7ec      	b.n	8006da8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 8006dce:	bf00      	nop

08006dd0 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8006dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8006dd2:	1e0c      	subs	r4, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8006dd4:	b085      	sub	sp, #20
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8006dd6:	db33      	blt.n	8006e40 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 8006dd8:	461f      	mov	r7, r3
 8006dda:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8006dde:	42a3      	cmp	r3, r4
 8006de0:	4605      	mov	r5, r0
 8006de2:	dd2d      	ble.n	8006e40 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 8006de4:	2a00      	cmp	r2, #0
 8006de6:	4616      	mov	r6, r2
 8006de8:	db2a      	blt.n	8006e40 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 8006dea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	dd26      	ble.n	8006e40 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
    startWrite();
 8006df2:	6803      	ldr	r3, [r0, #0]
 8006df4:	4a17      	ldr	r2, [pc, #92]	@ (8006e54 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x84>)
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d123      	bne.n	8006e44 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x74>
    callback(SpiCmd::cs_low, 0, 0);
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006e00:	4611      	mov	r1, r2
 8006e02:	2002      	movs	r0, #2
 8006e04:	4798      	blx	r3
    setAddrWindow(x, y, 1, 1);
 8006e06:	6828      	ldr	r0, [r5, #0]
 8006e08:	2301      	movs	r3, #1
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	b2a1      	uxth	r1, r4
 8006e0e:	b2b2      	uxth	r2, r6
 8006e10:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8006e12:	4628      	mov	r0, r5
 8006e14:	47a0      	blx	r4
  data[0] = w >> 8;
 8006e16:	ba7b      	rev16	r3, r7
 8006e18:	f8ad 300c 	strh.w	r3, [sp, #12]
  callback(SpiCmd::transmit, data, 2);
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8006e20:	a903      	add	r1, sp, #12
 8006e22:	2006      	movs	r0, #6
 8006e24:	47a0      	blx	r4
    endWrite();
 8006e26:	682b      	ldr	r3, [r5, #0]
 8006e28:	4a0b      	ldr	r2, [pc, #44]	@ (8006e58 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x88>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d10b      	bne.n	8006e48 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x78>
    callback(SpiCmd::cs_high, 0, 0);
 8006e30:	2200      	movs	r2, #0
 8006e32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006e34:	4611      	mov	r1, r2
 8006e36:	2003      	movs	r0, #3
}
 8006e38:	b005      	add	sp, #20
 8006e3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006e3e:	4718      	bx	r3
 8006e40:	b005      	add	sp, #20
 8006e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    startWrite();
 8006e44:	4798      	blx	r3
 8006e46:	e7de      	b.n	8006e06 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x36>
    endWrite();
 8006e48:	4628      	mov	r0, r5
}
 8006e4a:	b005      	add	sp, #20
 8006e4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    endWrite();
 8006e50:	4718      	bx	r3
 8006e52:	bf00      	nop
 8006e54:	08006bb5 	.word	0x08006bb5
 8006e58:	08006bc1 	.word	0x08006bc1

08006e5c <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
                                    uint16_t color) {
 8006e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	b087      	sub	sp, #28
 8006e62:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 8006e66:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
  if (w && h) {   // Nonzero width and height?
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d06a      	beq.n	8006f44 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
 8006e6e:	2e00      	cmp	r6, #0
 8006e70:	d068      	beq.n	8006f44 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
    if (w < 0) {  // If negative width...
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	4605      	mov	r5, r0
 8006e76:	461c      	mov	r4, r3
 8006e78:	db67      	blt.n	8006f4a <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xee>
    if (x < _width) { // Not off right
 8006e7a:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8006e7e:	4288      	cmp	r0, r1
 8006e80:	dd60      	ble.n	8006f44 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
      if (h < 0) {    // If negative height...
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	da05      	bge.n	8006e92 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x36>
        y += h + 1;   //   Move Y to top edge
 8006e86:	b2b6      	uxth	r6, r6
 8006e88:	3201      	adds	r2, #1
 8006e8a:	4432      	add	r2, r6
        h = -h;       //   Use positive height
 8006e8c:	4276      	negs	r6, r6
        y += h + 1;   //   Move Y to top edge
 8006e8e:	b212      	sxth	r2, r2
        h = -h;       //   Use positive height
 8006e90:	b236      	sxth	r6, r6
      if (y < _height) { // Not off bottom
 8006e92:	f9b5 c00e 	ldrsh.w	ip, [r5, #14]
 8006e96:	4594      	cmp	ip, r2
 8006e98:	dd54      	ble.n	8006f44 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
        int16_t x2 = x + w - 1;
 8006e9a:	b2a3      	uxth	r3, r4
 8006e9c:	fa1f fa81 	uxth.w	sl, r1
 8006ea0:	eb0a 0803 	add.w	r8, sl, r3
 8006ea4:	fa1f f888 	uxth.w	r8, r8
 8006ea8:	f108 3eff 	add.w	lr, r8, #4294967295
 8006eac:	fa0f fe8e 	sxth.w	lr, lr
        if (x2 >= 0) { // Not off left
 8006eb0:	f1be 0f00 	cmp.w	lr, #0
        int16_t x2 = x + w - 1;
 8006eb4:	9302      	str	r3, [sp, #8]
        if (x2 >= 0) { // Not off left
 8006eb6:	db45      	blt.n	8006f44 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
          int16_t y2 = y + h - 1;
 8006eb8:	b2b3      	uxth	r3, r6
 8006eba:	fa1f fb82 	uxth.w	fp, r2
 8006ebe:	eb0b 0903 	add.w	r9, fp, r3
 8006ec2:	9303      	str	r3, [sp, #12]
 8006ec4:	fa1f f389 	uxth.w	r3, r9
 8006ec8:	f103 39ff 	add.w	r9, r3, #4294967295
 8006ecc:	fa0f f989 	sxth.w	r9, r9
          if (y2 >= 0) { // Not off top
 8006ed0:	f1b9 0f00 	cmp.w	r9, #0
 8006ed4:	db36      	blt.n	8006f44 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
            if (x < 0) {
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	da05      	bge.n	8006ee6 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x8a>
              w = x2 + 1;
 8006eda:	fa0f f488 	sxth.w	r4, r8
 8006ede:	f8cd 8008 	str.w	r8, [sp, #8]
 8006ee2:	f04f 0a00 	mov.w	sl, #0
            if (y < 0) {
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	da03      	bge.n	8006ef2 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x96>
              h = y2 + 1;
 8006eea:	b21e      	sxth	r6, r3
 8006eec:	9303      	str	r3, [sp, #12]
 8006eee:	f04f 0b00 	mov.w	fp, #0
            if (x2 >= _width) {
 8006ef2:	4570      	cmp	r0, lr
 8006ef4:	dc04      	bgt.n	8006f00 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xa4>
              w = _width - x;
 8006ef6:	eba0 000a 	sub.w	r0, r0, sl
 8006efa:	b283      	uxth	r3, r0
 8006efc:	9302      	str	r3, [sp, #8]
 8006efe:	b204      	sxth	r4, r0
            if (y2 >= _height) {
 8006f00:	45cc      	cmp	ip, r9
 8006f02:	dc06      	bgt.n	8006f12 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xb6>
              h = _height - y;
 8006f04:	ebac 0c0b 	sub.w	ip, ip, fp
 8006f08:	fa1f f38c 	uxth.w	r3, ip
 8006f0c:	9303      	str	r3, [sp, #12]
 8006f0e:	fa0f f68c 	sxth.w	r6, ip
  setAddrWindow(x, y, w, h);
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	6828      	ldr	r0, [r5, #0]
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	f8d0 8054 	ldr.w	r8, [r0, #84]	@ 0x54
 8006f1e:	465a      	mov	r2, fp
 8006f20:	4651      	mov	r1, sl
 8006f22:	4628      	mov	r0, r5
  writeColor(color, (uint32_t)w * h);
 8006f24:	fb04 f606 	mul.w	r6, r4, r6
  setAddrWindow(x, y, w, h);
 8006f28:	47c0      	blx	r8
  if (!len)
 8006f2a:	b15e      	cbz	r6, 8006f44 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
    while (len--) {
 8006f2c:	3e01      	subs	r6, #1
 8006f2e:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 8006f30:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8006f32:	f8ad 7014 	strh.w	r7, [sp, #20]
    while (len--) {
 8006f36:	3e01      	subs	r6, #1
      callback(SpiCmd::transmit, data, 2);
 8006f38:	2202      	movs	r2, #2
 8006f3a:	a905      	add	r1, sp, #20
 8006f3c:	2006      	movs	r0, #6
 8006f3e:	4798      	blx	r3
    while (len--) {
 8006f40:	1c73      	adds	r3, r6, #1
 8006f42:	d1f5      	bne.n	8006f30 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xd4>
}
 8006f44:	b007      	add	sp, #28
 8006f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      x += w + 1; //   Move X to left edge
 8006f4a:	b29c      	uxth	r4, r3
 8006f4c:	3101      	adds	r1, #1
 8006f4e:	4421      	add	r1, r4
    if (x < _width) { // Not off right
 8006f50:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
      x += w + 1; //   Move X to left edge
 8006f54:	b209      	sxth	r1, r1
      w = -w;     //   Use positive width
 8006f56:	4264      	negs	r4, r4
    if (x < _width) { // Not off right
 8006f58:	4288      	cmp	r0, r1
      w = -w;     //   Use positive width
 8006f5a:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 8006f5c:	ddf2      	ble.n	8006f44 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
 8006f5e:	e790      	b.n	8006e82 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x26>

08006f60 <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
                                    uint16_t color) {
 8006f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f64:	b085      	sub	sp, #20
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8006f66:	1e0c      	subs	r4, r1, #0
                                    uint16_t color) {
 8006f68:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8006f6c:	db55      	blt.n	800701a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
 8006f6e:	461d      	mov	r5, r3
 8006f70:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	4606      	mov	r6, r0
 8006f78:	dd4f      	ble.n	800701a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
 8006f7a:	2d00      	cmp	r5, #0
 8006f7c:	d04d      	beq.n	800701a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
    if (h < 0) {                       // If negative height...
 8006f7e:	da05      	bge.n	8006f8c <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
      y += h + 1;                      //   Move Y to top edge
 8006f80:	b2ab      	uxth	r3, r5
 8006f82:	3201      	adds	r2, #1
 8006f84:	441a      	add	r2, r3
      h = -h;                          //   Use positive height
 8006f86:	425b      	negs	r3, r3
      y += h + 1;                      //   Move Y to top edge
 8006f88:	b212      	sxth	r2, r2
      h = -h;                          //   Use positive height
 8006f8a:	b21d      	sxth	r5, r3
    if (y < _height) { // Not off bottom
 8006f8c:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	dd42      	ble.n	800701a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
      int16_t y2 = y + h - 1;
 8006f94:	fa1f f882 	uxth.w	r8, r2
 8006f98:	fa1f f985 	uxth.w	r9, r5
 8006f9c:	eb08 0009 	add.w	r0, r8, r9
 8006fa0:	b280      	uxth	r0, r0
 8006fa2:	1e41      	subs	r1, r0, #1
 8006fa4:	b209      	sxth	r1, r1
      if (y2 >= 0) { // Not off top
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	db37      	blt.n	800701a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
        if (y < 0) {
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	da03      	bge.n	8006fb6 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x56>
          h = y2 + 1;
 8006fae:	b205      	sxth	r5, r0
 8006fb0:	4681      	mov	r9, r0
 8006fb2:	f04f 0800 	mov.w	r8, #0
        if (y2 >= _height) {
 8006fb6:	428b      	cmp	r3, r1
 8006fb8:	dc04      	bgt.n	8006fc4 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x64>
          h = _height - y;
 8006fba:	eba3 0308 	sub.w	r3, r3, r8
 8006fbe:	fa1f f983 	uxth.w	r9, r3
 8006fc2:	b21d      	sxth	r5, r3
        startWrite();
 8006fc4:	6833      	ldr	r3, [r6, #0]
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8007030 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xd0>)
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d128      	bne.n	8007020 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xc0>
    callback(SpiCmd::cs_low, 0, 0);
 8006fce:	2200      	movs	r2, #0
 8006fd0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	2002      	movs	r0, #2
 8006fd6:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 8006fd8:	f8cd 9000 	str.w	r9, [sp]
 8006fdc:	6833      	ldr	r3, [r6, #0]
 8006fde:	b2a1      	uxth	r1, r4
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	47a0      	blx	r4
  if (!len)
 8006fea:	b14d      	cbz	r5, 8007000 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xa0>
 8006fec:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 8006fee:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8006ff0:	f8ad 700c 	strh.w	r7, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	a903      	add	r1, sp, #12
 8006ff8:	2006      	movs	r0, #6
 8006ffa:	4798      	blx	r3
    while (len--) {
 8006ffc:	3d01      	subs	r5, #1
 8006ffe:	d1f6      	bne.n	8006fee <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x8e>
        endWrite();
 8007000:	6833      	ldr	r3, [r6, #0]
 8007002:	4a0c      	ldr	r2, [pc, #48]	@ (8007034 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xd4>)
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	4293      	cmp	r3, r2
 8007008:	d10d      	bne.n	8007026 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xc6>
    callback(SpiCmd::cs_high, 0, 0);
 800700a:	2200      	movs	r2, #0
 800700c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800700e:	4611      	mov	r1, r2
 8007010:	2003      	movs	r0, #3
}
 8007012:	b005      	add	sp, #20
 8007014:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007018:	4718      	bx	r3
 800701a:	b005      	add	sp, #20
 800701c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        startWrite();
 8007020:	4630      	mov	r0, r6
 8007022:	4798      	blx	r3
 8007024:	e7d8      	b.n	8006fd8 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x78>
        endWrite();
 8007026:	4630      	mov	r0, r6
}
 8007028:	b005      	add	sp, #20
 800702a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 800702e:	4718      	bx	r3
 8007030:	08006bb5 	.word	0x08006bb5
 8007034:	08006bc1 	.word	0x08006bc1

08007038 <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
                                    uint16_t color) {
 8007038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800703c:	b085      	sub	sp, #20
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 800703e:	1e14      	subs	r4, r2, #0
                                    uint16_t color) {
 8007040:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8007044:	db55      	blt.n	80070f2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
 8007046:	461d      	mov	r5, r3
 8007048:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800704c:	42a3      	cmp	r3, r4
 800704e:	4606      	mov	r6, r0
 8007050:	dd4f      	ble.n	80070f2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
 8007052:	2d00      	cmp	r5, #0
 8007054:	d04d      	beq.n	80070f2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
    if (w < 0) {                        // If negative width...
 8007056:	da05      	bge.n	8007064 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
      x += w + 1;                       //   Move X to left edge
 8007058:	b2ab      	uxth	r3, r5
 800705a:	3101      	adds	r1, #1
 800705c:	4419      	add	r1, r3
      w = -w;                           //   Use positive width
 800705e:	425b      	negs	r3, r3
      x += w + 1;                       //   Move X to left edge
 8007060:	b209      	sxth	r1, r1
      w = -w;                           //   Use positive width
 8007062:	b21d      	sxth	r5, r3
    if (x < _width) { // Not off right
 8007064:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
 8007068:	428a      	cmp	r2, r1
 800706a:	dd42      	ble.n	80070f2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
      int16_t x2 = x + w - 1;
 800706c:	fa1f f881 	uxth.w	r8, r1
 8007070:	fa1f f985 	uxth.w	r9, r5
 8007074:	eb08 0009 	add.w	r0, r8, r9
 8007078:	b280      	uxth	r0, r0
 800707a:	1e43      	subs	r3, r0, #1
 800707c:	b21b      	sxth	r3, r3
      if (x2 >= 0) { // Not off left
 800707e:	2b00      	cmp	r3, #0
 8007080:	db37      	blt.n	80070f2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
        if (x < 0) {
 8007082:	2900      	cmp	r1, #0
 8007084:	da03      	bge.n	800708e <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x56>
          w = x2 + 1;
 8007086:	b205      	sxth	r5, r0
 8007088:	4681      	mov	r9, r0
 800708a:	f04f 0800 	mov.w	r8, #0
        if (x2 >= _width) {
 800708e:	429a      	cmp	r2, r3
 8007090:	dc04      	bgt.n	800709c <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x64>
          w = _width - x;
 8007092:	eba2 0208 	sub.w	r2, r2, r8
 8007096:	fa1f f982 	uxth.w	r9, r2
 800709a:	b215      	sxth	r5, r2
        startWrite();
 800709c:	6833      	ldr	r3, [r6, #0]
 800709e:	4a1a      	ldr	r2, [pc, #104]	@ (8007108 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xd0>)
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d128      	bne.n	80070f8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xc0>
    callback(SpiCmd::cs_low, 0, 0);
 80070a6:	2200      	movs	r2, #0
 80070a8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80070aa:	4611      	mov	r1, r2
 80070ac:	2002      	movs	r0, #2
 80070ae:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 80070b0:	6830      	ldr	r0, [r6, #0]
 80070b2:	b2a2      	uxth	r2, r4
 80070b4:	2401      	movs	r4, #1
 80070b6:	9400      	str	r4, [sp, #0]
 80070b8:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80070ba:	464b      	mov	r3, r9
 80070bc:	4641      	mov	r1, r8
 80070be:	4630      	mov	r0, r6
 80070c0:	47a0      	blx	r4
  if (!len)
 80070c2:	b14d      	cbz	r5, 80070d8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xa0>
 80070c4:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 80070c6:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 80070c8:	f8ad 700c 	strh.w	r7, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 80070cc:	2202      	movs	r2, #2
 80070ce:	a903      	add	r1, sp, #12
 80070d0:	2006      	movs	r0, #6
 80070d2:	4798      	blx	r3
    while (len--) {
 80070d4:	3d01      	subs	r5, #1
 80070d6:	d1f6      	bne.n	80070c6 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x8e>
        endWrite();
 80070d8:	6833      	ldr	r3, [r6, #0]
 80070da:	4a0c      	ldr	r2, [pc, #48]	@ (800710c <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xd4>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	4293      	cmp	r3, r2
 80070e0:	d10d      	bne.n	80070fe <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xc6>
    callback(SpiCmd::cs_high, 0, 0);
 80070e2:	2200      	movs	r2, #0
 80070e4:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80070e6:	4611      	mov	r1, r2
 80070e8:	2003      	movs	r0, #3
}
 80070ea:	b005      	add	sp, #20
 80070ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070f0:	4718      	bx	r3
 80070f2:	b005      	add	sp, #20
 80070f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        startWrite();
 80070f8:	4630      	mov	r0, r6
 80070fa:	4798      	blx	r3
 80070fc:	e7d8      	b.n	80070b0 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x78>
        endWrite();
 80070fe:	4630      	mov	r0, r6
}
 8007100:	b005      	add	sp, #20
 8007102:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 8007106:	4718      	bx	r3
 8007108:	08006bb5 	.word	0x08006bb5
 800710c:	08006bc1 	.word	0x08006bc1

08007110 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
                               uint16_t color) {
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	b087      	sub	sp, #28
 8007116:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 800711a:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
  if (w && h) {   // Nonzero width and height?
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 8081 	beq.w	8007226 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
 8007124:	2e00      	cmp	r6, #0
 8007126:	d07e      	beq.n	8007226 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
    if (w < 0) {  // If negative width...
 8007128:	2b00      	cmp	r3, #0
 800712a:	4605      	mov	r5, r0
 800712c:	461c      	mov	r4, r3
 800712e:	db7d      	blt.n	800722c <_ZN15Adafruit_SPITFT8fillRectEsssst+0x11c>
    if (x < _width) { // Not off right
 8007130:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8007134:	428b      	cmp	r3, r1
 8007136:	dd76      	ble.n	8007226 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
      if (h < 0) {    // If negative height...
 8007138:	2e00      	cmp	r6, #0
 800713a:	da05      	bge.n	8007148 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x38>
        y += h + 1;   //   Move Y to top edge
 800713c:	b2b6      	uxth	r6, r6
 800713e:	3201      	adds	r2, #1
 8007140:	4432      	add	r2, r6
        h = -h;       //   Use positive height
 8007142:	4276      	negs	r6, r6
        y += h + 1;   //   Move Y to top edge
 8007144:	b212      	sxth	r2, r2
        h = -h;       //   Use positive height
 8007146:	b236      	sxth	r6, r6
      if (y < _height) { // Not off bottom
 8007148:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
 800714c:	9002      	str	r0, [sp, #8]
 800714e:	4290      	cmp	r0, r2
 8007150:	dd69      	ble.n	8007226 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
        int16_t x2 = x + w - 1;
 8007152:	fa1f f881 	uxth.w	r8, r1
 8007156:	fa1f fa84 	uxth.w	sl, r4
 800715a:	eb08 0e0a 	add.w	lr, r8, sl
 800715e:	fa1f fe8e 	uxth.w	lr, lr
 8007162:	f10e 3cff 	add.w	ip, lr, #4294967295
 8007166:	fa0f fc8c 	sxth.w	ip, ip
        if (x2 >= 0) { // Not off left
 800716a:	f1bc 0f00 	cmp.w	ip, #0
 800716e:	db5a      	blt.n	8007226 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
          int16_t y2 = y + h - 1;
 8007170:	b2b0      	uxth	r0, r6
 8007172:	fa1f f982 	uxth.w	r9, r2
 8007176:	eb09 0b00 	add.w	fp, r9, r0
 800717a:	9003      	str	r0, [sp, #12]
 800717c:	fa1f f08b 	uxth.w	r0, fp
 8007180:	f100 3bff 	add.w	fp, r0, #4294967295
 8007184:	fa0f fb8b 	sxth.w	fp, fp
          if (y2 >= 0) { // Not off top
 8007188:	f1bb 0f00 	cmp.w	fp, #0
 800718c:	db4b      	blt.n	8007226 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
            if (x < 0) {
 800718e:	2900      	cmp	r1, #0
 8007190:	da04      	bge.n	800719c <_ZN15Adafruit_SPITFT8fillRectEsssst+0x8c>
              w = x2 + 1;
 8007192:	fa0f f48e 	sxth.w	r4, lr
 8007196:	46f2      	mov	sl, lr
 8007198:	f04f 0800 	mov.w	r8, #0
            if (y < 0) {
 800719c:	2a00      	cmp	r2, #0
 800719e:	da03      	bge.n	80071a8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x98>
              h = y2 + 1;
 80071a0:	b206      	sxth	r6, r0
 80071a2:	9003      	str	r0, [sp, #12]
 80071a4:	f04f 0900 	mov.w	r9, #0
            if (x2 >= _width) {
 80071a8:	4563      	cmp	r3, ip
 80071aa:	dc04      	bgt.n	80071b6 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xa6>
              w = _width - x;
 80071ac:	eba3 0308 	sub.w	r3, r3, r8
 80071b0:	fa1f fa83 	uxth.w	sl, r3
 80071b4:	b21c      	sxth	r4, r3
            if (y2 >= _height) {
 80071b6:	9b02      	ldr	r3, [sp, #8]
 80071b8:	455b      	cmp	r3, fp
 80071ba:	dc04      	bgt.n	80071c6 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xb6>
              h = _height - y;
 80071bc:	eba3 0009 	sub.w	r0, r3, r9
 80071c0:	b283      	uxth	r3, r0
 80071c2:	9303      	str	r3, [sp, #12]
 80071c4:	b206      	sxth	r6, r0
            startWrite();
 80071c6:	682b      	ldr	r3, [r5, #0]
 80071c8:	4a22      	ldr	r2, [pc, #136]	@ (8007254 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x144>)
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d138      	bne.n	8007242 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x132>
    callback(SpiCmd::cs_low, 0, 0);
 80071d0:	2200      	movs	r2, #0
 80071d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80071d4:	4611      	mov	r1, r2
 80071d6:	2002      	movs	r0, #2
 80071d8:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 80071da:	9b03      	ldr	r3, [sp, #12]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	6828      	ldr	r0, [r5, #0]
 80071e0:	4641      	mov	r1, r8
 80071e2:	4653      	mov	r3, sl
 80071e4:	f8d0 8054 	ldr.w	r8, [r0, #84]	@ 0x54
 80071e8:	464a      	mov	r2, r9
 80071ea:	4628      	mov	r0, r5
  writeColor(color, (uint32_t)w * h);
 80071ec:	fb04 f606 	mul.w	r6, r4, r6
  setAddrWindow(x, y, w, h);
 80071f0:	47c0      	blx	r8
  if (!len)
 80071f2:	b15e      	cbz	r6, 800720c <_ZN15Adafruit_SPITFT8fillRectEsssst+0xfc>
    while (len--) {
 80071f4:	3e01      	subs	r6, #1
 80071f6:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 80071f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 80071fa:	f8ad 7014 	strh.w	r7, [sp, #20]
    while (len--) {
 80071fe:	3e01      	subs	r6, #1
      callback(SpiCmd::transmit, data, 2);
 8007200:	2202      	movs	r2, #2
 8007202:	a905      	add	r1, sp, #20
 8007204:	2006      	movs	r0, #6
 8007206:	4798      	blx	r3
    while (len--) {
 8007208:	1c73      	adds	r3, r6, #1
 800720a:	d1f5      	bne.n	80071f8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xe8>
            endWrite();
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	4a12      	ldr	r2, [pc, #72]	@ (8007258 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x148>)
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	4293      	cmp	r3, r2
 8007214:	d118      	bne.n	8007248 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x138>
    callback(SpiCmd::cs_high, 0, 0);
 8007216:	2200      	movs	r2, #0
 8007218:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800721a:	4611      	mov	r1, r2
 800721c:	2003      	movs	r0, #3
}
 800721e:	b007      	add	sp, #28
 8007220:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	4718      	bx	r3
 8007226:	b007      	add	sp, #28
 8007228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      x += w + 1; //   Move X to left edge
 800722c:	b29c      	uxth	r4, r3
 800722e:	3101      	adds	r1, #1
 8007230:	4421      	add	r1, r4
    if (x < _width) { // Not off right
 8007232:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
      x += w + 1; //   Move X to left edge
 8007236:	b209      	sxth	r1, r1
      w = -w;     //   Use positive width
 8007238:	4264      	negs	r4, r4
    if (x < _width) { // Not off right
 800723a:	428b      	cmp	r3, r1
      w = -w;     //   Use positive width
 800723c:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 800723e:	ddf2      	ble.n	8007226 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
 8007240:	e77a      	b.n	8007138 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x28>
            startWrite();
 8007242:	4628      	mov	r0, r5
 8007244:	4798      	blx	r3
 8007246:	e7c8      	b.n	80071da <_ZN15Adafruit_SPITFT8fillRectEsssst+0xca>
            endWrite();
 8007248:	4628      	mov	r0, r5
}
 800724a:	b007      	add	sp, #28
 800724c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            endWrite();
 8007250:	4718      	bx	r3
 8007252:	bf00      	nop
 8007254:	08006bb5 	.word	0x08006bb5
 8007258:	08006bc1 	.word	0x08006bc1

0800725c <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 800725c:	b538      	push	{r3, r4, r5, lr}
    : Adafruit_GFX(w, h), callback(callback)
 800725e:	b212      	sxth	r2, r2
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 8007260:	4604      	mov	r4, r0
    : Adafruit_GFX(w, h), callback(callback)
 8007262:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 8007264:	461d      	mov	r5, r3
    : Adafruit_GFX(w, h), callback(callback)
 8007266:	f7ff f9fb 	bl	8006660 <_ZN12Adafruit_GFXC1Ess>
 800726a:	2300      	movs	r3, #0
 800726c:	4a03      	ldr	r2, [pc, #12]	@ (800727c <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE+0x20>)
 800726e:	8523      	strh	r3, [r4, #40]	@ 0x28
 8007270:	e9c4 350b 	strd	r3, r5, [r4, #44]	@ 0x2c
 8007274:	6022      	str	r2, [r4, #0]
 8007276:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8007278:	4620      	mov	r0, r4
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	0800b330 	.word	0x0800b330

08007280 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>:
                                  uint8_t numDataBytes) {
 8007280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007282:	4605      	mov	r5, r0
 8007284:	4614      	mov	r4, r2
    callback(SpiCmd::cs_low, 0, 0);
 8007286:	2200      	movs	r2, #0
 8007288:	b083      	sub	sp, #12
 800728a:	460f      	mov	r7, r1
 800728c:	461e      	mov	r6, r3
 800728e:	4611      	mov	r1, r2
 8007290:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007292:	2002      	movs	r0, #2
 8007294:	4798      	blx	r3
    callback(SpiCmd::dc_low, 0, 0);
 8007296:	2200      	movs	r2, #0
 8007298:	4611      	mov	r1, r2
 800729a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800729c:	2004      	movs	r0, #4
 800729e:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 80072a0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80072a2:	f88d 7007 	strb.w	r7, [sp, #7]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f10d 0107 	add.w	r1, sp, #7
 80072ac:	2006      	movs	r0, #6
 80072ae:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 80072b0:	2200      	movs	r2, #0
 80072b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80072b4:	4611      	mov	r1, r2
 80072b6:	2005      	movs	r0, #5
 80072b8:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 80072ba:	b166      	cbz	r6, 80072d6 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x56>
 80072bc:	4426      	add	r6, r4
      spiWrite(*dataBytes); // Send the data bytes
 80072be:	f814 2b01 	ldrb.w	r2, [r4], #1
 80072c2:	f88d 2007 	strb.w	r2, [sp, #7]
  callback(SpiCmd::transmit, &b, 1);
 80072c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80072c8:	2201      	movs	r2, #1
 80072ca:	f10d 0107 	add.w	r1, sp, #7
 80072ce:	2006      	movs	r0, #6
 80072d0:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 80072d2:	42a6      	cmp	r6, r4
 80072d4:	d1f3      	bne.n	80072be <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x3e>
    callback(SpiCmd::cs_high, 0, 0);
 80072d6:	2200      	movs	r2, #0
 80072d8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80072da:	4611      	mov	r1, r2
 80072dc:	2003      	movs	r0, #3
}
 80072de:	b003      	add	sp, #12
 80072e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80072e4:	4718      	bx	r3
 80072e6:	bf00      	nop

080072e8 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>:
                                  uint8_t numDataBytes) {
 80072e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ea:	4605      	mov	r5, r0
 80072ec:	4614      	mov	r4, r2
    callback(SpiCmd::cs_low, 0, 0);
 80072ee:	2200      	movs	r2, #0
 80072f0:	b083      	sub	sp, #12
 80072f2:	460f      	mov	r7, r1
 80072f4:	461e      	mov	r6, r3
 80072f6:	4611      	mov	r1, r2
 80072f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80072fa:	2002      	movs	r0, #2
 80072fc:	4798      	blx	r3
    callback(SpiCmd::dc_low, 0, 0);
 80072fe:	2200      	movs	r2, #0
 8007300:	4611      	mov	r1, r2
 8007302:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007304:	2004      	movs	r0, #4
 8007306:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8007308:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800730a:	f88d 7007 	strb.w	r7, [sp, #7]
 800730e:	2201      	movs	r2, #1
 8007310:	f10d 0107 	add.w	r1, sp, #7
 8007314:	2006      	movs	r0, #6
 8007316:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8007318:	2200      	movs	r2, #0
 800731a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800731c:	4611      	mov	r1, r2
 800731e:	2005      	movs	r0, #5
 8007320:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 8007322:	b166      	cbz	r6, 800733e <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x56>
 8007324:	4426      	add	r6, r4
      spiWrite(pgm_read_byte(dataBytes++));
 8007326:	f814 2b01 	ldrb.w	r2, [r4], #1
 800732a:	f88d 2007 	strb.w	r2, [sp, #7]
  callback(SpiCmd::transmit, &b, 1);
 800732e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007330:	2201      	movs	r2, #1
 8007332:	f10d 0107 	add.w	r1, sp, #7
 8007336:	2006      	movs	r0, #6
 8007338:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 800733a:	42a6      	cmp	r6, r4
 800733c:	d1f3      	bne.n	8007326 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x3e>
    callback(SpiCmd::cs_high, 0, 0);
 800733e:	2200      	movs	r2, #0
 8007340:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007342:	4611      	mov	r1, r2
 8007344:	2003      	movs	r0, #3
}
 8007346:	b003      	add	sp, #12
 8007348:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800734c:	4718      	bx	r3
 800734e:	bf00      	nop

08007350 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 8007350:	b530      	push	{r4, r5, lr}
 8007352:	4604      	mov	r4, r0
    callback(SpiCmd::dc_low, 0, 0);
 8007354:	2200      	movs	r2, #0
 8007356:	b083      	sub	sp, #12
 8007358:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800735a:	460d      	mov	r5, r1
 800735c:	2004      	movs	r0, #4
 800735e:	4611      	mov	r1, r2
 8007360:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8007362:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007364:	f88d 5007 	strb.w	r5, [sp, #7]
 8007368:	f10d 0107 	add.w	r1, sp, #7
 800736c:	2201      	movs	r2, #1
 800736e:	2006      	movs	r0, #6
 8007370:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8007372:	2200      	movs	r2, #0
 8007374:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007376:	4611      	mov	r1, r2
 8007378:	2005      	movs	r0, #5
}
 800737a:	b003      	add	sp, #12
 800737c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007380:	4718      	bx	r3
 8007382:	bf00      	nop

08007384 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
            parallel; name was maintaned for backward compatibility. Naming
            is also not consistent with the 8-bit version, spiWrite().
            Sorry about that. Again, staying compatible with outside code.
    @param  l  32-bit value to write.
*/
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 8007384:	b500      	push	{lr}
 8007386:	b083      	sub	sp, #12
  uint8_t data[4];
  data[0] = l >> 24;
  data[1] = l >> 16;
  data[2] = l >> 8;
  data[3] = l;
  callback(SpiCmd::transmit, data, 4);
 8007388:	2204      	movs	r2, #4
 800738a:	ba09      	rev	r1, r1
 800738c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  data[0] = l >> 24;
 800738e:	9101      	str	r1, [sp, #4]
  callback(SpiCmd::transmit, data, 4);
 8007390:	2006      	movs	r0, #6
 8007392:	eb0d 0102 	add.w	r1, sp, r2
 8007396:	4798      	blx	r3
}
 8007398:	b003      	add	sp, #12
 800739a:	f85d fb04 	ldr.w	pc, [sp], #4
 800739e:	bf00      	nop

080073a0 <_ZN15Adafruit_ST778911setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
 80073a0:	b510      	push	{r4, lr}
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 80073a2:	f001 0103 	and.w	r1, r1, #3
void Adafruit_ST7789::setRotation(uint8_t m) {
 80073a6:	b082      	sub	sp, #8
  uint8_t madctl = 0;
 80073a8:	2300      	movs	r3, #0

  switch (rotation) {
 80073aa:	2902      	cmp	r1, #2
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
    _xstart = _colstart;
    _ystart = _rowstart;
    _width = windowWidth;
 80073ac:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80073ae:	f9b0 2038 	ldrsh.w	r2, [r0, #56]	@ 0x38
    _height = windowHeight;
 80073b2:	f9b0 c03a 	ldrsh.w	ip, [r0, #58]	@ 0x3a
  uint8_t madctl = 0;
 80073b6:	f88d 3007 	strb.w	r3, [sp, #7]
  rotation = m & 3; // can't be higher than 3
 80073ba:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 80073bc:	d015      	beq.n	80073ea <_ZN15Adafruit_ST778911setRotationEh+0x4a>
 80073be:	2903      	cmp	r1, #3
 80073c0:	d028      	beq.n	8007414 <_ZN15Adafruit_ST778911setRotationEh+0x74>
 80073c2:	2901      	cmp	r1, #1
 80073c4:	d019      	beq.n	80073fa <_ZN15Adafruit_ST778911setRotationEh+0x5a>
    _xstart = _colstart;
 80073c6:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _ystart = _rowstart;
 80073ca:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
    _xstart = _colstart;
 80073ce:	8482      	strh	r2, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80073d0:	21c0      	movs	r1, #192	@ 0xc0
 80073d2:	f88d 1007 	strb.w	r1, [sp, #7]
    _ystart = _rowstart;
 80073d6:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _width = windowWidth;
 80073d8:	60c4      	str	r4, [r0, #12]
    _height = windowWidth;
    _width = windowHeight;
    break;
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80073da:	2301      	movs	r3, #1
 80073dc:	f10d 0207 	add.w	r2, sp, #7
 80073e0:	2136      	movs	r1, #54	@ 0x36
 80073e2:	f7ff ff4d 	bl	8007280 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 80073e6:	b002      	add	sp, #8
 80073e8:	bd10      	pop	{r4, pc}
    _xstart = _colstart2;
 80073ea:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
    _ystart = _rowstart2;
 80073ee:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
    _xstart = _colstart2;
 80073f2:	8482      	strh	r2, [r0, #36]	@ 0x24
    _ystart = _rowstart2;
 80073f4:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _width = windowWidth;
 80073f6:	60c4      	str	r4, [r0, #12]
    break;
 80073f8:	e7ef      	b.n	80073da <_ZN15Adafruit_ST778911setRotationEh+0x3a>
    _xstart = _rowstart;
 80073fa:	f890 1035 	ldrb.w	r1, [r0, #53]	@ 0x35
    _ystart = _colstart2;
 80073fe:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
    _xstart = _rowstart;
 8007402:	8481      	strh	r1, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8007404:	24a0      	movs	r4, #160	@ 0xa0
 8007406:	f88d 4007 	strb.w	r4, [sp, #7]
    _ystart = _colstart2;
 800740a:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _height = windowWidth;
 800740c:	81c2      	strh	r2, [r0, #14]
    _width = windowHeight;
 800740e:	f8a0 c00c 	strh.w	ip, [r0, #12]
    break;
 8007412:	e7e2      	b.n	80073da <_ZN15Adafruit_ST778911setRotationEh+0x3a>
    _width = windowHeight;
 8007414:	f36c 030f 	bfi	r3, ip, #0, #16
 8007418:	f362 431f 	bfi	r3, r2, #16, #16
    _xstart = _rowstart2;
 800741c:	f890 1037 	ldrb.w	r1, [r0, #55]	@ 0x37
    _ystart = _colstart;
 8007420:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _xstart = _rowstart2;
 8007424:	8481      	strh	r1, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8007426:	2460      	movs	r4, #96	@ 0x60
 8007428:	f88d 4007 	strb.w	r4, [sp, #7]
    _ystart = _colstart;
 800742c:	84c2      	strh	r2, [r0, #38]	@ 0x26
    _width = windowHeight;
 800742e:	60c3      	str	r3, [r0, #12]
    break;
 8007430:	e7d3      	b.n	80073da <_ZN15Adafruit_ST778911setRotationEh+0x3a>
 8007432:	bf00      	nop

08007434 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>:
Adafruit_ST7789::Adafruit_ST7789(uint16_t w, uint16_t h, Adafruit_SPITFT::CallbackType callback)
 8007434:	b510      	push	{r4, lr}
 8007436:	4604      	mov	r4, r0
  : Adafruit_ST77xx(w, h, callback)
 8007438:	f000 f8cc 	bl	80075d4 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>
 800743c:	2300      	movs	r3, #0
 800743e:	4a02      	ldr	r2, [pc, #8]	@ (8007448 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE+0x14>)
 8007440:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8007442:	6022      	str	r2, [r4, #0]
}
 8007444:	4620      	mov	r0, r4
 8007446:	bd10      	pop	{r4, pc}
 8007448:	0800b390 	.word	0x0800b390

0800744c <_ZN15Adafruit_ST77894initEtt>:
    ) {
 800744c:	b570      	push	{r4, r5, r6, lr}
 800744e:	460d      	mov	r5, r1
 8007450:	b082      	sub	sp, #8
  commonInit(NULL);
 8007452:	2100      	movs	r1, #0
    ) {
 8007454:	4604      	mov	r4, r0
 8007456:	4616      	mov	r6, r2
  commonInit(NULL);
 8007458:	f000 f8f2 	bl	8007640 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  if (width == 240 && height == 240) {
 800745c:	2df0      	cmp	r5, #240	@ 0xf0
 800745e:	d03a      	beq.n	80074d6 <_ZN15Adafruit_ST77894initEtt+0x8a>
  } else if (width == 135 && height == 240) {
 8007460:	2d87      	cmp	r5, #135	@ 0x87
 8007462:	d101      	bne.n	8007468 <_ZN15Adafruit_ST77894initEtt+0x1c>
 8007464:	2ef0      	cmp	r6, #240	@ 0xf0
 8007466:	d041      	beq.n	80074ec <_ZN15Adafruit_ST77894initEtt+0xa0>
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8007468:	f1c5 00f0 	rsb	r0, r5, #240	@ 0xf0
    _rowstart = _rowstart2 = (int)((320 - height) / 2);
 800746c:	f5c6 73a0 	rsb	r3, r6, #320	@ 0x140
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8007470:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007474:	f3c0 0047 	ubfx	r0, r0, #1, #8
    _rowstart = _rowstart2 = (int)((320 - height) / 2);
 8007478:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800747c:	2200      	movs	r2, #0
 800747e:	f3c3 0347 	ubfx	r3, r3, #1, #8
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8007482:	f360 0207 	bfi	r2, r0, #0, #8
 8007486:	f363 220f 	bfi	r2, r3, #8, #8
 800748a:	f360 4217 	bfi	r2, r0, #16, #8
 800748e:	f363 621f 	bfi	r2, r3, #24, #8
    _colstart = _colstart2 = (240 - width);
 8007492:	6362      	str	r2, [r4, #52]	@ 0x34
  displayInit(st7789_without_cs);
 8007494:	4916      	ldr	r1, [pc, #88]	@ (80074f0 <_ZN15Adafruit_ST77894initEtt+0xa4>)
  windowWidth = width;
 8007496:	8725      	strh	r5, [r4, #56]	@ 0x38
  windowHeight = height;
 8007498:	8766      	strh	r6, [r4, #58]	@ 0x3a
  displayInit(st7789_without_cs);
 800749a:	4620      	mov	r0, r4
 800749c:	f000 f8a6 	bl	80075ec <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	4a14      	ldr	r2, [pc, #80]	@ (80074f4 <_ZN15Adafruit_ST77894initEtt+0xa8>)
 80074a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d11a      	bne.n	80074e0 <_ZN15Adafruit_ST77894initEtt+0x94>
    _xstart = _colstart;
 80074aa:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
    _ystart = _rowstart;
 80074ae:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
    _width = windowWidth;
 80074b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    _xstart = _colstart;
 80074b4:	84a1      	strh	r1, [r4, #36]	@ 0x24
  rotation = m & 3; // can't be higher than 3
 80074b6:	2000      	movs	r0, #0
 80074b8:	76a0      	strb	r0, [r4, #26]
    _ystart = _rowstart;
 80074ba:	84e2      	strh	r2, [r4, #38]	@ 0x26
    _width = windowWidth;
 80074bc:	60e3      	str	r3, [r4, #12]
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80074be:	25c0      	movs	r5, #192	@ 0xc0
  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80074c0:	2301      	movs	r3, #1
 80074c2:	f10d 0207 	add.w	r2, sp, #7
 80074c6:	2136      	movs	r1, #54	@ 0x36
 80074c8:	4620      	mov	r0, r4
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80074ca:	f88d 5007 	strb.w	r5, [sp, #7]
  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80074ce:	f7ff fed7 	bl	8007280 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 80074d2:	b002      	add	sp, #8
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
  if (width == 240 && height == 240) {
 80074d6:	2ef0      	cmp	r6, #240	@ 0xf0
 80074d8:	d1c6      	bne.n	8007468 <_ZN15Adafruit_ST77894initEtt+0x1c>
 80074da:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80074de:	e7d8      	b.n	8007492 <_ZN15Adafruit_ST77894initEtt+0x46>
  setRotation(0);
 80074e0:	2100      	movs	r1, #0
 80074e2:	4620      	mov	r0, r4
}
 80074e4:	b002      	add	sp, #8
 80074e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
 80074ea:	4718      	bx	r3
 80074ec:	4a02      	ldr	r2, [pc, #8]	@ (80074f8 <_ZN15Adafruit_ST77894initEtt+0xac>)
 80074ee:	e7d0      	b.n	8007492 <_ZN15Adafruit_ST77894initEtt+0x46>
 80074f0:	0800b3e8 	.word	0x0800b3e8
 80074f4:	080073a1 	.word	0x080073a1
 80074f8:	28342835 	.word	0x28342835

080074fc <_ZN15Adafruit_ST77xx5beginEm>:
    @param  freq  Desired SPI clock frequency
*/
/**************************************************************************/
void Adafruit_ST77xx::begin(uint32_t freq) {
  if (!freq) {
    freq = SPI_DEFAULT_FREQ;
 80074fc:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <_ZN15Adafruit_ST77xx5beginEm+0x14>)
 80074fe:	2900      	cmp	r1, #0
 8007500:	bf14      	ite	ne
 8007502:	460a      	movne	r2, r1
 8007504:	461a      	moveq	r2, r3
  }
  _freq = freq;

  invertOnCommand = ST77XX_INVON;
 8007506:	f242 0321 	movw	r3, #8225	@ 0x2021
  _freq = freq;
 800750a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  invertOnCommand = ST77XX_INVON;
 800750c:	8503      	strh	r3, [r0, #40]	@ 0x28
  invertOffCommand = ST77XX_INVOFF;

//  initSPI(freq, spiMode);
}
 800750e:	4770      	bx	lr
 8007510:	01e84800 	.word	0x01e84800

08007514 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  @param  w  Width of window
  @param  h  Height of window
*/
/**************************************************************************/
void Adafruit_ST77xx::setAddrWindow(uint16_t x, uint16_t y, uint16_t w,
                                    uint16_t h) {
 8007514:	b570      	push	{r4, r5, r6, lr}
  x += _xstart;
 8007516:	8c85      	ldrh	r5, [r0, #36]	@ 0x24
 8007518:	4429      	add	r1, r5
 800751a:	b289      	uxth	r1, r1
  y += _ystart;
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 800751c:	18ce      	adds	r6, r1, r3
  y += _ystart;
 800751e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
                                    uint16_t h) {
 8007520:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  y += _ystart;
 8007524:	441a      	add	r2, r3
 8007526:	b292      	uxth	r2, r2
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8007528:	4415      	add	r5, r2
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 800752a:	3e01      	subs	r6, #1
                                    uint16_t h) {
 800752c:	4604      	mov	r4, r0
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 800752e:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8007532:	3d01      	subs	r5, #1

  writeCommand(ST77XX_CASET); // Column addr set
 8007534:	212a      	movs	r1, #42	@ 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8007536:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 800753a:	f7ff ff09 	bl	8007350 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 800753e:	4631      	mov	r1, r6
 8007540:	4620      	mov	r0, r4
 8007542:	f7ff ff1f 	bl	8007384 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RASET); // Row addr set
 8007546:	4620      	mov	r0, r4
 8007548:	212b      	movs	r1, #43	@ 0x2b
 800754a:	f7ff ff01 	bl	8007350 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 800754e:	4629      	mov	r1, r5
 8007550:	4620      	mov	r0, r4
 8007552:	f7ff ff17 	bl	8007384 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RAMWR); // write to RAM
 8007556:	4620      	mov	r0, r4
 8007558:	212c      	movs	r1, #44	@ 0x2c
}
 800755a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 800755e:	f7ff bef7 	b.w	8007350 <_ZN15Adafruit_SPITFT12writeCommandEh>
 8007562:	bf00      	nop

08007564 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 8007564:	b500      	push	{lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 8007566:	f001 0103 	and.w	r1, r1, #3
void Adafruit_ST77xx::setRotation(uint8_t m) {
 800756a:	b083      	sub	sp, #12
  uint8_t madctl = 0;
 800756c:	2300      	movs	r3, #0

  switch (rotation) {
 800756e:	2902      	cmp	r1, #2
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
    _xstart = _colstart;
 8007570:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _ystart = _rowstart;
 8007574:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
  uint8_t madctl = 0;
 8007578:	f88d 3007 	strb.w	r3, [sp, #7]
  rotation = m % 4; // can't be higher than 3
 800757c:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 800757e:	d014      	beq.n	80075aa <_ZN15Adafruit_ST77xx11setRotationEh+0x46>
 8007580:	2903      	cmp	r1, #3
 8007582:	d01d      	beq.n	80075c0 <_ZN15Adafruit_ST77xx11setRotationEh+0x5c>
 8007584:	2901      	cmp	r1, #1
 8007586:	d014      	beq.n	80075b2 <_ZN15Adafruit_ST77xx11setRotationEh+0x4e>
    _xstart = _colstart;
 8007588:	f362 030f 	bfi	r3, r2, #0, #16
 800758c:	f36c 431f 	bfi	r3, ip, #16, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8007590:	22c0      	movs	r2, #192	@ 0xc0
 8007592:	f88d 2007 	strb.w	r2, [sp, #7]
    _xstart = _colstart;
 8007596:	6243      	str	r3, [r0, #36]	@ 0x24
    _ystart = _colstart;
    _xstart = _rowstart;
    break;
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 8007598:	2301      	movs	r3, #1
 800759a:	f10d 0207 	add.w	r2, sp, #7
 800759e:	2136      	movs	r1, #54	@ 0x36
 80075a0:	f7ff fe6e 	bl	8007280 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 80075a4:	b003      	add	sp, #12
 80075a6:	f85d fb04 	ldr.w	pc, [sp], #4
    _xstart = _colstart;
 80075aa:	8482      	strh	r2, [r0, #36]	@ 0x24
    _ystart = _rowstart;
 80075ac:	f8a0 c026 	strh.w	ip, [r0, #38]	@ 0x26
    break;
 80075b0:	e7f2      	b.n	8007598 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80075b2:	23a0      	movs	r3, #160	@ 0xa0
 80075b4:	f88d 3007 	strb.w	r3, [sp, #7]
    _ystart = _colstart;
 80075b8:	84c2      	strh	r2, [r0, #38]	@ 0x26
    _xstart = _rowstart;
 80075ba:	f8a0 c024 	strh.w	ip, [r0, #36]	@ 0x24
    break;
 80075be:	e7eb      	b.n	8007598 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
    _xstart = _rowstart;
 80075c0:	f36c 030f 	bfi	r3, ip, #0, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80075c4:	2160      	movs	r1, #96	@ 0x60
    _xstart = _rowstart;
 80075c6:	f362 431f 	bfi	r3, r2, #16, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80075ca:	f88d 1007 	strb.w	r1, [sp, #7]
    _xstart = _rowstart;
 80075ce:	6243      	str	r3, [r0, #36]	@ 0x24
    break;
 80075d0:	e7e2      	b.n	8007598 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
 80075d2:	bf00      	nop

080075d4 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>:
Adafruit_ST77xx::Adafruit_ST77xx(uint16_t w, uint16_t h, Adafruit_SPITFT::CallbackType callback)
 80075d4:	b510      	push	{r4, lr}
 80075d6:	4604      	mov	r4, r0
  : Adafruit_SPITFT(w, h, callback)
 80075d8:	f7ff fe40 	bl	800725c <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE>
 80075dc:	2300      	movs	r3, #0
 80075de:	4a02      	ldr	r2, [pc, #8]	@ (80075e8 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE+0x14>)
 80075e0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80075e2:	6022      	str	r2, [r4, #0]
}
 80075e4:	4620      	mov	r0, r4
 80075e6:	bd10      	pop	{r4, pc}
 80075e8:	0800b410 	.word	0x0800b410

080075ec <_ZN15Adafruit_ST77xx11displayInitEPKh>:
  numCommands = pgm_read_byte(addr++); // Number of commands to follow
 80075ec:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (numCommands--) {              // For each command...
 80075f0:	b32b      	cbz	r3, 800763e <_ZN15Adafruit_ST77xx11displayInitEPKh+0x52>
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 80075f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f6:	1e5d      	subs	r5, r3, #1
 80075f8:	4680      	mov	r8, r0
 80075fa:	b2ed      	uxtb	r5, r5
    numArgs = pgm_read_byte(addr++);   // Number of args to follow
 80075fc:	784f      	ldrb	r7, [r1, #1]
 80075fe:	1c8e      	adds	r6, r1, #2
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
 8007600:	f007 047f 	and.w	r4, r7, #127	@ 0x7f
    sendCommand(cmd, addr, numArgs);
 8007604:	7809      	ldrb	r1, [r1, #0]
 8007606:	4623      	mov	r3, r4
 8007608:	4632      	mov	r2, r6
 800760a:	4640      	mov	r0, r8
 800760c:	f7ff fe6c 	bl	80072e8 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>
    if (ms) {
 8007610:	063b      	lsls	r3, r7, #24
    addr += numArgs;
 8007612:	eb06 0104 	add.w	r1, r6, r4
    if (ms) {
 8007616:	d50c      	bpl.n	8007632 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x46>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007618:	5d32      	ldrb	r2, [r6, r4]
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 800761a:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800761e:	2aff      	cmp	r2, #255	@ 0xff
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007620:	f101 0401 	add.w	r4, r1, #1
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8007624:	bf08      	it	eq
 8007626:	f44f 72fa 	moveq.w	r2, #500	@ 0x1f4
 800762a:	2100      	movs	r1, #0
 800762c:	2007      	movs	r0, #7
 800762e:	4798      	blx	r3
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007630:	4621      	mov	r1, r4
  while (numCommands--) {              // For each command...
 8007632:	3d01      	subs	r5, #1
 8007634:	b2ed      	uxtb	r5, r5
 8007636:	2dff      	cmp	r5, #255	@ 0xff
 8007638:	d1e0      	bne.n	80075fc <_ZN15Adafruit_ST77xx11displayInitEPKh+0x10>
}
 800763a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763e:	4770      	bx	lr

08007640 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
  begin();
 8007640:	6803      	ldr	r3, [r0, #0]
 8007642:	4a1c      	ldr	r2, [pc, #112]	@ (80076b4 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x74>)
 8007644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007646:	4293      	cmp	r3, r2
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 8007648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800764c:	4607      	mov	r7, r0
 800764e:	460c      	mov	r4, r1
 8007650:	d12d      	bne.n	80076ae <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6e>
  _freq = freq;
 8007652:	4a19      	ldr	r2, [pc, #100]	@ (80076b8 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x78>)
 8007654:	62c2      	str	r2, [r0, #44]	@ 0x2c
  invertOnCommand = ST77XX_INVON;
 8007656:	f242 0321 	movw	r3, #8225	@ 0x2021
 800765a:	8503      	strh	r3, [r0, #40]	@ 0x28
  if (cmdList) {
 800765c:	b32c      	cbz	r4, 80076aa <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6a>
  numCommands = pgm_read_byte(addr++); // Number of commands to follow
 800765e:	4621      	mov	r1, r4
 8007660:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (numCommands--) {              // For each command...
 8007664:	1e5d      	subs	r5, r3, #1
 8007666:	b2ed      	uxtb	r5, r5
 8007668:	b1fb      	cbz	r3, 80076aa <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6a>
    numArgs = pgm_read_byte(addr++);   // Number of args to follow
 800766a:	f891 8001 	ldrb.w	r8, [r1, #1]
 800766e:	1c8e      	adds	r6, r1, #2
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
 8007670:	f008 047f 	and.w	r4, r8, #127	@ 0x7f
    sendCommand(cmd, addr, numArgs);
 8007674:	7809      	ldrb	r1, [r1, #0]
 8007676:	4623      	mov	r3, r4
 8007678:	4632      	mov	r2, r6
 800767a:	4638      	mov	r0, r7
 800767c:	f7ff fe34 	bl	80072e8 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>
    if (ms) {
 8007680:	f018 0f80 	tst.w	r8, #128	@ 0x80
    addr += numArgs;
 8007684:	eb06 0104 	add.w	r1, r6, r4
    if (ms) {
 8007688:	d00b      	beq.n	80076a2 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x62>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 800768a:	5d32      	ldrb	r2, [r6, r4]
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	2aff      	cmp	r2, #255	@ 0xff
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007690:	f101 0401 	add.w	r4, r1, #1
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8007694:	bf08      	it	eq
 8007696:	f44f 72fa 	moveq.w	r2, #500	@ 0x1f4
 800769a:	2100      	movs	r1, #0
 800769c:	2007      	movs	r0, #7
 800769e:	4798      	blx	r3
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 80076a0:	4621      	mov	r1, r4
  while (numCommands--) {              // For each command...
 80076a2:	3d01      	subs	r5, #1
 80076a4:	b2ed      	uxtb	r5, r5
 80076a6:	2dff      	cmp	r5, #255	@ 0xff
 80076a8:	d1df      	bne.n	800766a <_ZN15Adafruit_ST77xx10commonInitEPKh+0x2a>
}
 80076aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  begin();
 80076ae:	2100      	movs	r1, #0
 80076b0:	4798      	blx	r3
 80076b2:	e7d3      	b.n	800765c <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
 80076b4:	080074fd 	.word	0x080074fd
 80076b8:	01e84800 	.word	0x01e84800

080076bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n = 0;
  while (size--) {
 80076be:	4617      	mov	r7, r2
 80076c0:	b17a      	cbz	r2, 80076e2 <_ZN5Print5writeEPKhj+0x26>
 80076c2:	4605      	mov	r5, r0
 80076c4:	460e      	mov	r6, r1
  size_t n = 0;
 80076c6:	2400      	movs	r4, #0
 80076c8:	e002      	b.n	80076d0 <_ZN5Print5writeEPKhj+0x14>
    if (write(*buffer++)) n++;
 80076ca:	3401      	adds	r4, #1
  while (size--) {
 80076cc:	42a7      	cmp	r7, r4
 80076ce:	d008      	beq.n	80076e2 <_ZN5Print5writeEPKhj+0x26>
    if (write(*buffer++)) n++;
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	f816 1b01 	ldrb.w	r1, [r6], #1
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4628      	mov	r0, r5
 80076da:	4798      	blx	r3
 80076dc:	2800      	cmp	r0, #0
 80076de:	d1f4      	bne.n	80076ca <_ZN5Print5writeEPKhj+0xe>
 80076e0:	4627      	mov	r7, r4
    else break;
  }
  return n;
}
 80076e2:	4638      	mov	r0, r7
 80076e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e6:	bf00      	nop

080076e8 <_ZN5Print6printfEPKcz>:
//  n += println();
//  return n;
//}

size_t Print::printf(const char *fmt, ...)
{
 80076e8:	b40e      	push	{r1, r2, r3}
 80076ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ec:	b08a      	sub	sp, #40	@ 0x28
 80076ee:	aa0f      	add	r2, sp, #60	@ 0x3c
 80076f0:	4605      	mov	r5, r0
 80076f2:	f852 1b04 	ldr.w	r1, [r2], #4
  char buffer[30];
  va_list args;
  va_start(args, fmt);
 80076f6:	9201      	str	r2, [sp, #4]
  int n = vsprintf(buffer, fmt, args);
 80076f8:	a802      	add	r0, sp, #8
 80076fa:	f000 fe8b 	bl	8008414 <vsiprintf>
  if (n < 0)
 80076fe:	1e07      	subs	r7, r0, #0
 8007700:	db19      	blt.n	8007736 <_ZN5Print6printfEPKcz+0x4e>
    return 0;
  auto ret = write((uint8_t*)buffer, n);
 8007702:	682b      	ldr	r3, [r5, #0]
 8007704:	4a10      	ldr	r2, [pc, #64]	@ (8007748 <_ZN5Print6printfEPKcz+0x60>)
 8007706:	685c      	ldr	r4, [r3, #4]
 8007708:	4294      	cmp	r4, r2
 800770a:	d116      	bne.n	800773a <_ZN5Print6printfEPKcz+0x52>
  while (size--) {
 800770c:	b19f      	cbz	r7, 8007736 <_ZN5Print6printfEPKcz+0x4e>
  size_t n = 0;
 800770e:	2400      	movs	r4, #0
  while (size--) {
 8007710:	ae02      	add	r6, sp, #8
 8007712:	e003      	b.n	800771c <_ZN5Print6printfEPKcz+0x34>
    if (write(*buffer++)) n++;
 8007714:	3401      	adds	r4, #1
  while (size--) {
 8007716:	42a7      	cmp	r7, r4
 8007718:	d007      	beq.n	800772a <_ZN5Print6printfEPKcz+0x42>
    if (write(*buffer++)) n++;
 800771a:	682b      	ldr	r3, [r5, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8007722:	4628      	mov	r0, r5
 8007724:	4798      	blx	r3
 8007726:	2800      	cmp	r0, #0
 8007728:	d1f4      	bne.n	8007714 <_ZN5Print6printfEPKcz+0x2c>
  va_end(args);
  return ret;
}
 800772a:	4620      	mov	r0, r4
 800772c:	b00a      	add	sp, #40	@ 0x28
 800772e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007732:	b003      	add	sp, #12
 8007734:	4770      	bx	lr
    return 0;
 8007736:	2400      	movs	r4, #0
 8007738:	e7f7      	b.n	800772a <_ZN5Print6printfEPKcz+0x42>
  auto ret = write((uint8_t*)buffer, n);
 800773a:	463a      	mov	r2, r7
 800773c:	a902      	add	r1, sp, #8
 800773e:	4628      	mov	r0, r5
 8007740:	47a0      	blx	r4
 8007742:	4604      	mov	r4, r0
 8007744:	e7f1      	b.n	800772a <_ZN5Print6printfEPKcz+0x42>
 8007746:	bf00      	nop
 8007748:	080076bd 	.word	0x080076bd

0800774c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	b08a      	sub	sp, #40	@ 0x28
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8007752:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8007754:	2a01      	cmp	r2, #1
{
 8007756:	4605      	mov	r5, r0
  *str = '\0';
 8007758:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
  if (base < 2) base = 10;
 800775c:	bf98      	it	ls
 800775e:	220a      	movls	r2, #10
 8007760:	ac09      	add	r4, sp, #36	@ 0x24

  do {
    char c = n % base;
 8007762:	fbb1 fcf2 	udiv	ip, r1, r2
 8007766:	fb02 101c 	mls	r0, r2, ip, r1
 800776a:	b2c3      	uxtb	r3, r0
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 800776c:	2809      	cmp	r0, #9
 800776e:	468e      	mov	lr, r1
 8007770:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007774:	bf8a      	itet	hi
 8007776:	3337      	addhi	r3, #55	@ 0x37
 8007778:	b2c3      	uxtbls	r3, r0
 800777a:	b2db      	uxtbhi	r3, r3
  } while(n);
 800777c:	4596      	cmp	lr, r2
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 800777e:	f804 3d01 	strb.w	r3, [r4, #-1]!
    n /= base;
 8007782:	4661      	mov	r1, ip
  } while(n);
 8007784:	d2ed      	bcs.n	8007762 <_ZN5Print11printNumberEmh+0x16>
      return write((const uint8_t *)str, strlen(str));
 8007786:	682f      	ldr	r7, [r5, #0]
 8007788:	4620      	mov	r0, r4
 800778a:	f7f8 fd49 	bl	8000220 <strlen>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a0f      	ldr	r2, [pc, #60]	@ (80077d0 <_ZN5Print11printNumberEmh+0x84>)
 8007792:	4293      	cmp	r3, r2
 8007794:	4680      	mov	r8, r0
 8007796:	d112      	bne.n	80077be <_ZN5Print11printNumberEmh+0x72>
  while (size--) {
 8007798:	b168      	cbz	r0, 80077b6 <_ZN5Print11printNumberEmh+0x6a>
  size_t n = 0;
 800779a:	2600      	movs	r6, #0
 800779c:	e003      	b.n	80077a6 <_ZN5Print11printNumberEmh+0x5a>
    if (write(*buffer++)) n++;
 800779e:	3601      	adds	r6, #1
  while (size--) {
 80077a0:	45b0      	cmp	r8, r6
 80077a2:	d008      	beq.n	80077b6 <_ZN5Print11printNumberEmh+0x6a>
    if (write(*buffer++)) n++;
 80077a4:	682f      	ldr	r7, [r5, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ac:	4628      	mov	r0, r5
 80077ae:	4798      	blx	r3
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d1f4      	bne.n	800779e <_ZN5Print11printNumberEmh+0x52>
 80077b4:	46b0      	mov	r8, r6

  return write(str);
}
 80077b6:	4640      	mov	r0, r8
 80077b8:	b00a      	add	sp, #40	@ 0x28
 80077ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077be:	4602      	mov	r2, r0
 80077c0:	4621      	mov	r1, r4
 80077c2:	4628      	mov	r0, r5
 80077c4:	4798      	blx	r3
 80077c6:	4680      	mov	r8, r0
 80077c8:	4640      	mov	r0, r8
 80077ca:	b00a      	add	sp, #40	@ 0x28
 80077cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d0:	080076bd 	.word	0x080076bd

080077d4 <_ZN5Print5printEii>:
{
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4606      	mov	r6, r0
 80077d8:	460d      	mov	r5, r1
  if (base == 0) {
 80077da:	b92a      	cbnz	r2, 80077e8 <_ZN5Print5printEii+0x14>
    return write(n);
 80077dc:	6803      	ldr	r3, [r0, #0]
}
 80077de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return write(n);
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	b2c9      	uxtb	r1, r1
 80077e6:	4718      	bx	r3
  } else if (base == 10) {
 80077e8:	2a0a      	cmp	r2, #10
 80077ea:	4614      	mov	r4, r2
 80077ec:	d10e      	bne.n	800780c <_ZN5Print5printEii+0x38>
    if (n < 0) {
 80077ee:	2900      	cmp	r1, #0
 80077f0:	da0d      	bge.n	800780e <_ZN5Print5printEii+0x3a>
  return write(c);
 80077f2:	6803      	ldr	r3, [r0, #0]
 80077f4:	212d      	movs	r1, #45	@ 0x2d
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4798      	blx	r3
      return printNumber(n, 10) + t;
 80077fa:	4622      	mov	r2, r4
  return write(c);
 80077fc:	4603      	mov	r3, r0
      return printNumber(n, 10) + t;
 80077fe:	4269      	negs	r1, r5
 8007800:	4630      	mov	r0, r6
  return write(c);
 8007802:	461c      	mov	r4, r3
      return printNumber(n, 10) + t;
 8007804:	f7ff ffa2 	bl	800774c <_ZN5Print11printNumberEmh>
 8007808:	4420      	add	r0, r4
}
 800780a:	bd70      	pop	{r4, r5, r6, pc}
    return printNumber(n, base);
 800780c:	b2d2      	uxtb	r2, r2
}
 800780e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return printNumber(n, base);
 8007812:	f7ff bf9b 	b.w	800774c <_ZN5Print11printNumberEmh>
 8007816:	bf00      	nop

08007818 <sinf>:
 8007818:	ee10 3a10 	vmov	r3, s0
 800781c:	b507      	push	{r0, r1, r2, lr}
 800781e:	4a1f      	ldr	r2, [pc, #124]	@ (800789c <sinf+0x84>)
 8007820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007824:	4293      	cmp	r3, r2
 8007826:	d807      	bhi.n	8007838 <sinf+0x20>
 8007828:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80078a0 <sinf+0x88>
 800782c:	2000      	movs	r0, #0
 800782e:	b003      	add	sp, #12
 8007830:	f85d eb04 	ldr.w	lr, [sp], #4
 8007834:	f000 b88e 	b.w	8007954 <__kernel_sinf>
 8007838:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800783c:	d304      	bcc.n	8007848 <sinf+0x30>
 800783e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007842:	b003      	add	sp, #12
 8007844:	f85d fb04 	ldr.w	pc, [sp], #4
 8007848:	4668      	mov	r0, sp
 800784a:	f000 f8cb 	bl	80079e4 <__ieee754_rem_pio2f>
 800784e:	f000 0003 	and.w	r0, r0, #3
 8007852:	2801      	cmp	r0, #1
 8007854:	d00a      	beq.n	800786c <sinf+0x54>
 8007856:	2802      	cmp	r0, #2
 8007858:	d00f      	beq.n	800787a <sinf+0x62>
 800785a:	b9c0      	cbnz	r0, 800788e <sinf+0x76>
 800785c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007860:	ed9d 0a00 	vldr	s0, [sp]
 8007864:	2001      	movs	r0, #1
 8007866:	f000 f875 	bl	8007954 <__kernel_sinf>
 800786a:	e7ea      	b.n	8007842 <sinf+0x2a>
 800786c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007870:	ed9d 0a00 	vldr	s0, [sp]
 8007874:	f000 f816 	bl	80078a4 <__kernel_cosf>
 8007878:	e7e3      	b.n	8007842 <sinf+0x2a>
 800787a:	eddd 0a01 	vldr	s1, [sp, #4]
 800787e:	ed9d 0a00 	vldr	s0, [sp]
 8007882:	2001      	movs	r0, #1
 8007884:	f000 f866 	bl	8007954 <__kernel_sinf>
 8007888:	eeb1 0a40 	vneg.f32	s0, s0
 800788c:	e7d9      	b.n	8007842 <sinf+0x2a>
 800788e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007892:	ed9d 0a00 	vldr	s0, [sp]
 8007896:	f000 f805 	bl	80078a4 <__kernel_cosf>
 800789a:	e7f5      	b.n	8007888 <sinf+0x70>
 800789c:	3f490fd8 	.word	0x3f490fd8
 80078a0:	00000000 	.word	0x00000000

080078a4 <__kernel_cosf>:
 80078a4:	ee10 3a10 	vmov	r3, s0
 80078a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078ac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80078b0:	eef0 6a40 	vmov.f32	s13, s0
 80078b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80078b8:	d204      	bcs.n	80078c4 <__kernel_cosf+0x20>
 80078ba:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80078be:	ee17 2a90 	vmov	r2, s15
 80078c2:	b342      	cbz	r2, 8007916 <__kernel_cosf+0x72>
 80078c4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80078c8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8007934 <__kernel_cosf+0x90>
 80078cc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007938 <__kernel_cosf+0x94>
 80078d0:	4a1a      	ldr	r2, [pc, #104]	@ (800793c <__kernel_cosf+0x98>)
 80078d2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80078d6:	4293      	cmp	r3, r2
 80078d8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007940 <__kernel_cosf+0x9c>
 80078dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80078e0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8007944 <__kernel_cosf+0xa0>
 80078e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80078e8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8007948 <__kernel_cosf+0xa4>
 80078ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80078f0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800794c <__kernel_cosf+0xa8>
 80078f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80078f8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80078fc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007900:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007904:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790c:	d804      	bhi.n	8007918 <__kernel_cosf+0x74>
 800790e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007912:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007916:	4770      	bx	lr
 8007918:	4a0d      	ldr	r2, [pc, #52]	@ (8007950 <__kernel_cosf+0xac>)
 800791a:	4293      	cmp	r3, r2
 800791c:	bf9a      	itte	ls
 800791e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8007922:	ee07 3a10 	vmovls	s14, r3
 8007926:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800792a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800792e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007932:	e7ec      	b.n	800790e <__kernel_cosf+0x6a>
 8007934:	ad47d74e 	.word	0xad47d74e
 8007938:	310f74f6 	.word	0x310f74f6
 800793c:	3e999999 	.word	0x3e999999
 8007940:	b493f27c 	.word	0xb493f27c
 8007944:	37d00d01 	.word	0x37d00d01
 8007948:	bab60b61 	.word	0xbab60b61
 800794c:	3d2aaaab 	.word	0x3d2aaaab
 8007950:	3f480000 	.word	0x3f480000

08007954 <__kernel_sinf>:
 8007954:	ee10 3a10 	vmov	r3, s0
 8007958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800795c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007960:	d204      	bcs.n	800796c <__kernel_sinf+0x18>
 8007962:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007966:	ee17 3a90 	vmov	r3, s15
 800796a:	b35b      	cbz	r3, 80079c4 <__kernel_sinf+0x70>
 800796c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007970:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80079c8 <__kernel_sinf+0x74>
 8007974:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80079cc <__kernel_sinf+0x78>
 8007978:	eea7 6a27 	vfma.f32	s12, s14, s15
 800797c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80079d0 <__kernel_sinf+0x7c>
 8007980:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007984:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80079d4 <__kernel_sinf+0x80>
 8007988:	eea7 6a87 	vfma.f32	s12, s15, s14
 800798c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80079d8 <__kernel_sinf+0x84>
 8007990:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007994:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007998:	b930      	cbnz	r0, 80079a8 <__kernel_sinf+0x54>
 800799a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80079dc <__kernel_sinf+0x88>
 800799e:	eea7 6a27 	vfma.f32	s12, s14, s15
 80079a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80079a6:	4770      	bx	lr
 80079a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80079ac:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80079b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80079b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80079b8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80079e0 <__kernel_sinf+0x8c>
 80079bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80079c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	2f2ec9d3 	.word	0x2f2ec9d3
 80079cc:	b2d72f34 	.word	0xb2d72f34
 80079d0:	3638ef1b 	.word	0x3638ef1b
 80079d4:	b9500d01 	.word	0xb9500d01
 80079d8:	3c088889 	.word	0x3c088889
 80079dc:	be2aaaab 	.word	0xbe2aaaab
 80079e0:	3e2aaaab 	.word	0x3e2aaaab

080079e4 <__ieee754_rem_pio2f>:
 80079e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e6:	ee10 6a10 	vmov	r6, s0
 80079ea:	4b88      	ldr	r3, [pc, #544]	@ (8007c0c <__ieee754_rem_pio2f+0x228>)
 80079ec:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80079f0:	429d      	cmp	r5, r3
 80079f2:	b087      	sub	sp, #28
 80079f4:	4604      	mov	r4, r0
 80079f6:	d805      	bhi.n	8007a04 <__ieee754_rem_pio2f+0x20>
 80079f8:	2300      	movs	r3, #0
 80079fa:	ed80 0a00 	vstr	s0, [r0]
 80079fe:	6043      	str	r3, [r0, #4]
 8007a00:	2000      	movs	r0, #0
 8007a02:	e022      	b.n	8007a4a <__ieee754_rem_pio2f+0x66>
 8007a04:	4b82      	ldr	r3, [pc, #520]	@ (8007c10 <__ieee754_rem_pio2f+0x22c>)
 8007a06:	429d      	cmp	r5, r3
 8007a08:	d83a      	bhi.n	8007a80 <__ieee754_rem_pio2f+0x9c>
 8007a0a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007a0e:	2e00      	cmp	r6, #0
 8007a10:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007c14 <__ieee754_rem_pio2f+0x230>
 8007a14:	4a80      	ldr	r2, [pc, #512]	@ (8007c18 <__ieee754_rem_pio2f+0x234>)
 8007a16:	f023 030f 	bic.w	r3, r3, #15
 8007a1a:	dd18      	ble.n	8007a4e <__ieee754_rem_pio2f+0x6a>
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007a22:	bf09      	itett	eq
 8007a24:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8007c1c <__ieee754_rem_pio2f+0x238>
 8007a28:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8007c20 <__ieee754_rem_pio2f+0x23c>
 8007a2c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8007c24 <__ieee754_rem_pio2f+0x240>
 8007a30:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007a34:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8007a38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a3c:	ed80 7a00 	vstr	s14, [r0]
 8007a40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a44:	edc0 7a01 	vstr	s15, [r0, #4]
 8007a48:	2001      	movs	r0, #1
 8007a4a:	b007      	add	sp, #28
 8007a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007a54:	bf09      	itett	eq
 8007a56:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8007c1c <__ieee754_rem_pio2f+0x238>
 8007a5a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8007c20 <__ieee754_rem_pio2f+0x23c>
 8007a5e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8007c24 <__ieee754_rem_pio2f+0x240>
 8007a62:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007a66:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a6e:	ed80 7a00 	vstr	s14, [r0]
 8007a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a76:	edc0 7a01 	vstr	s15, [r0, #4]
 8007a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7e:	e7e4      	b.n	8007a4a <__ieee754_rem_pio2f+0x66>
 8007a80:	4b69      	ldr	r3, [pc, #420]	@ (8007c28 <__ieee754_rem_pio2f+0x244>)
 8007a82:	429d      	cmp	r5, r3
 8007a84:	d873      	bhi.n	8007b6e <__ieee754_rem_pio2f+0x18a>
 8007a86:	f000 f8dd 	bl	8007c44 <fabsf>
 8007a8a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8007c2c <__ieee754_rem_pio2f+0x248>
 8007a8e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007a92:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a9e:	ee17 0a90 	vmov	r0, s15
 8007aa2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007c14 <__ieee754_rem_pio2f+0x230>
 8007aa6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007aaa:	281f      	cmp	r0, #31
 8007aac:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007c20 <__ieee754_rem_pio2f+0x23c>
 8007ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab4:	eeb1 6a47 	vneg.f32	s12, s14
 8007ab8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007abc:	ee16 1a90 	vmov	r1, s13
 8007ac0:	dc09      	bgt.n	8007ad6 <__ieee754_rem_pio2f+0xf2>
 8007ac2:	4a5b      	ldr	r2, [pc, #364]	@ (8007c30 <__ieee754_rem_pio2f+0x24c>)
 8007ac4:	1e47      	subs	r7, r0, #1
 8007ac6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007aca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8007ace:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d107      	bne.n	8007ae6 <__ieee754_rem_pio2f+0x102>
 8007ad6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8007ada:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8007ade:	2a08      	cmp	r2, #8
 8007ae0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007ae4:	dc14      	bgt.n	8007b10 <__ieee754_rem_pio2f+0x12c>
 8007ae6:	6021      	str	r1, [r4, #0]
 8007ae8:	ed94 7a00 	vldr	s14, [r4]
 8007aec:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007af0:	2e00      	cmp	r6, #0
 8007af2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007af6:	ed84 0a01 	vstr	s0, [r4, #4]
 8007afa:	daa6      	bge.n	8007a4a <__ieee754_rem_pio2f+0x66>
 8007afc:	eeb1 7a47 	vneg.f32	s14, s14
 8007b00:	eeb1 0a40 	vneg.f32	s0, s0
 8007b04:	ed84 7a00 	vstr	s14, [r4]
 8007b08:	ed84 0a01 	vstr	s0, [r4, #4]
 8007b0c:	4240      	negs	r0, r0
 8007b0e:	e79c      	b.n	8007a4a <__ieee754_rem_pio2f+0x66>
 8007b10:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8007c1c <__ieee754_rem_pio2f+0x238>
 8007b14:	eef0 6a40 	vmov.f32	s13, s0
 8007b18:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007b1c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007b20:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007b24:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c24 <__ieee754_rem_pio2f+0x240>
 8007b28:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007b2c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007b30:	ee15 2a90 	vmov	r2, s11
 8007b34:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007b38:	1a5b      	subs	r3, r3, r1
 8007b3a:	2b19      	cmp	r3, #25
 8007b3c:	dc04      	bgt.n	8007b48 <__ieee754_rem_pio2f+0x164>
 8007b3e:	edc4 5a00 	vstr	s11, [r4]
 8007b42:	eeb0 0a66 	vmov.f32	s0, s13
 8007b46:	e7cf      	b.n	8007ae8 <__ieee754_rem_pio2f+0x104>
 8007b48:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8007c34 <__ieee754_rem_pio2f+0x250>
 8007b4c:	eeb0 0a66 	vmov.f32	s0, s13
 8007b50:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007b54:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007b58:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007c38 <__ieee754_rem_pio2f+0x254>
 8007b5c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007b60:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007b64:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007b68:	ed84 7a00 	vstr	s14, [r4]
 8007b6c:	e7bc      	b.n	8007ae8 <__ieee754_rem_pio2f+0x104>
 8007b6e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007b72:	d306      	bcc.n	8007b82 <__ieee754_rem_pio2f+0x19e>
 8007b74:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007b78:	edc0 7a01 	vstr	s15, [r0, #4]
 8007b7c:	edc0 7a00 	vstr	s15, [r0]
 8007b80:	e73e      	b.n	8007a00 <__ieee754_rem_pio2f+0x1c>
 8007b82:	15ea      	asrs	r2, r5, #23
 8007b84:	3a86      	subs	r2, #134	@ 0x86
 8007b86:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b92:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8007c3c <__ieee754_rem_pio2f+0x258>
 8007b96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b9e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007ba2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ba6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007baa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bb2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007bb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007bba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc2:	edcd 7a05 	vstr	s15, [sp, #20]
 8007bc6:	d11e      	bne.n	8007c06 <__ieee754_rem_pio2f+0x222>
 8007bc8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd0:	bf0c      	ite	eq
 8007bd2:	2301      	moveq	r3, #1
 8007bd4:	2302      	movne	r3, #2
 8007bd6:	491a      	ldr	r1, [pc, #104]	@ (8007c40 <__ieee754_rem_pio2f+0x25c>)
 8007bd8:	9101      	str	r1, [sp, #4]
 8007bda:	2102      	movs	r1, #2
 8007bdc:	9100      	str	r1, [sp, #0]
 8007bde:	a803      	add	r0, sp, #12
 8007be0:	4621      	mov	r1, r4
 8007be2:	f000 f837 	bl	8007c54 <__kernel_rem_pio2f>
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	f6bf af2f 	bge.w	8007a4a <__ieee754_rem_pio2f+0x66>
 8007bec:	edd4 7a00 	vldr	s15, [r4]
 8007bf0:	eef1 7a67 	vneg.f32	s15, s15
 8007bf4:	edc4 7a00 	vstr	s15, [r4]
 8007bf8:	edd4 7a01 	vldr	s15, [r4, #4]
 8007bfc:	eef1 7a67 	vneg.f32	s15, s15
 8007c00:	edc4 7a01 	vstr	s15, [r4, #4]
 8007c04:	e782      	b.n	8007b0c <__ieee754_rem_pio2f+0x128>
 8007c06:	2303      	movs	r3, #3
 8007c08:	e7e5      	b.n	8007bd6 <__ieee754_rem_pio2f+0x1f2>
 8007c0a:	bf00      	nop
 8007c0c:	3f490fd8 	.word	0x3f490fd8
 8007c10:	4016cbe3 	.word	0x4016cbe3
 8007c14:	3fc90f80 	.word	0x3fc90f80
 8007c18:	3fc90fd0 	.word	0x3fc90fd0
 8007c1c:	37354400 	.word	0x37354400
 8007c20:	37354443 	.word	0x37354443
 8007c24:	2e85a308 	.word	0x2e85a308
 8007c28:	43490f80 	.word	0x43490f80
 8007c2c:	3f22f984 	.word	0x3f22f984
 8007c30:	0800b468 	.word	0x0800b468
 8007c34:	2e85a300 	.word	0x2e85a300
 8007c38:	248d3132 	.word	0x248d3132
 8007c3c:	43800000 	.word	0x43800000
 8007c40:	0800b4e8 	.word	0x0800b4e8

08007c44 <fabsf>:
 8007c44:	ee10 3a10 	vmov	r3, s0
 8007c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c4c:	ee00 3a10 	vmov	s0, r3
 8007c50:	4770      	bx	lr
	...

08007c54 <__kernel_rem_pio2f>:
 8007c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	ed2d 8b04 	vpush	{d8-d9}
 8007c5c:	b0d9      	sub	sp, #356	@ 0x164
 8007c5e:	4690      	mov	r8, r2
 8007c60:	9001      	str	r0, [sp, #4]
 8007c62:	4ab9      	ldr	r2, [pc, #740]	@ (8007f48 <__kernel_rem_pio2f+0x2f4>)
 8007c64:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8007c66:	f118 0f04 	cmn.w	r8, #4
 8007c6a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8007c6e:	460f      	mov	r7, r1
 8007c70:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c74:	db27      	blt.n	8007cc6 <__kernel_rem_pio2f+0x72>
 8007c76:	f1b8 0203 	subs.w	r2, r8, #3
 8007c7a:	bf48      	it	mi
 8007c7c:	f108 0204 	addmi.w	r2, r8, #4
 8007c80:	10d2      	asrs	r2, r2, #3
 8007c82:	1c55      	adds	r5, r2, #1
 8007c84:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007c86:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007f58 <__kernel_rem_pio2f+0x304>
 8007c8a:	00e8      	lsls	r0, r5, #3
 8007c8c:	eba2 060b 	sub.w	r6, r2, fp
 8007c90:	9002      	str	r0, [sp, #8]
 8007c92:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8007c96:	eb0a 0c0b 	add.w	ip, sl, fp
 8007c9a:	ac1c      	add	r4, sp, #112	@ 0x70
 8007c9c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	4560      	cmp	r0, ip
 8007ca4:	dd11      	ble.n	8007cca <__kernel_rem_pio2f+0x76>
 8007ca6:	a91c      	add	r1, sp, #112	@ 0x70
 8007ca8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007cac:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8007cb0:	f04f 0c00 	mov.w	ip, #0
 8007cb4:	45d4      	cmp	ip, sl
 8007cb6:	dc27      	bgt.n	8007d08 <__kernel_rem_pio2f+0xb4>
 8007cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007cbc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8007f58 <__kernel_rem_pio2f+0x304>
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	2400      	movs	r4, #0
 8007cc4:	e016      	b.n	8007cf4 <__kernel_rem_pio2f+0xa0>
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	e7db      	b.n	8007c82 <__kernel_rem_pio2f+0x2e>
 8007cca:	42c6      	cmn	r6, r0
 8007ccc:	bf5d      	ittte	pl
 8007cce:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8007cd2:	ee07 1a90 	vmovpl	s15, r1
 8007cd6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007cda:	eef0 7a47 	vmovmi.f32	s15, s14
 8007cde:	ece4 7a01 	vstmia	r4!, {s15}
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	e7dd      	b.n	8007ca2 <__kernel_rem_pio2f+0x4e>
 8007ce6:	ecfe 6a01 	vldmia	lr!, {s13}
 8007cea:	ed96 7a00 	vldr	s14, [r6]
 8007cee:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007cf2:	3401      	adds	r4, #1
 8007cf4:	455c      	cmp	r4, fp
 8007cf6:	f1a6 0604 	sub.w	r6, r6, #4
 8007cfa:	ddf4      	ble.n	8007ce6 <__kernel_rem_pio2f+0x92>
 8007cfc:	ece9 7a01 	vstmia	r9!, {s15}
 8007d00:	f10c 0c01 	add.w	ip, ip, #1
 8007d04:	3004      	adds	r0, #4
 8007d06:	e7d5      	b.n	8007cb4 <__kernel_rem_pio2f+0x60>
 8007d08:	a908      	add	r1, sp, #32
 8007d0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d0e:	9104      	str	r1, [sp, #16]
 8007d10:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007d12:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8007f54 <__kernel_rem_pio2f+0x300>
 8007d16:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8007f50 <__kernel_rem_pio2f+0x2fc>
 8007d1a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007d1e:	9203      	str	r2, [sp, #12]
 8007d20:	4654      	mov	r4, sl
 8007d22:	00a2      	lsls	r2, r4, #2
 8007d24:	9205      	str	r2, [sp, #20]
 8007d26:	aa58      	add	r2, sp, #352	@ 0x160
 8007d28:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007d2c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8007d30:	a944      	add	r1, sp, #272	@ 0x110
 8007d32:	aa08      	add	r2, sp, #32
 8007d34:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007d38:	4694      	mov	ip, r2
 8007d3a:	4626      	mov	r6, r4
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	f1a0 0004 	sub.w	r0, r0, #4
 8007d42:	dc4c      	bgt.n	8007dde <__kernel_rem_pio2f+0x18a>
 8007d44:	4628      	mov	r0, r5
 8007d46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d4a:	f000 f9f5 	bl	8008138 <scalbnf>
 8007d4e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d52:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8007d56:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007d5a:	f000 fa53 	bl	8008204 <floorf>
 8007d5e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8007d62:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d6c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007d70:	ee17 9a90 	vmov	r9, s15
 8007d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d78:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007d7c:	dd41      	ble.n	8007e02 <__kernel_rem_pio2f+0x1ae>
 8007d7e:	f104 3cff 	add.w	ip, r4, #4294967295
 8007d82:	a908      	add	r1, sp, #32
 8007d84:	f1c5 0e08 	rsb	lr, r5, #8
 8007d88:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8007d8c:	fa46 f00e 	asr.w	r0, r6, lr
 8007d90:	4481      	add	r9, r0
 8007d92:	fa00 f00e 	lsl.w	r0, r0, lr
 8007d96:	1a36      	subs	r6, r6, r0
 8007d98:	f1c5 0007 	rsb	r0, r5, #7
 8007d9c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8007da0:	4106      	asrs	r6, r0
 8007da2:	2e00      	cmp	r6, #0
 8007da4:	dd3c      	ble.n	8007e20 <__kernel_rem_pio2f+0x1cc>
 8007da6:	f04f 0e00 	mov.w	lr, #0
 8007daa:	f109 0901 	add.w	r9, r9, #1
 8007dae:	4670      	mov	r0, lr
 8007db0:	4574      	cmp	r4, lr
 8007db2:	dc68      	bgt.n	8007e86 <__kernel_rem_pio2f+0x232>
 8007db4:	2d00      	cmp	r5, #0
 8007db6:	dd03      	ble.n	8007dc0 <__kernel_rem_pio2f+0x16c>
 8007db8:	2d01      	cmp	r5, #1
 8007dba:	d074      	beq.n	8007ea6 <__kernel_rem_pio2f+0x252>
 8007dbc:	2d02      	cmp	r5, #2
 8007dbe:	d07d      	beq.n	8007ebc <__kernel_rem_pio2f+0x268>
 8007dc0:	2e02      	cmp	r6, #2
 8007dc2:	d12d      	bne.n	8007e20 <__kernel_rem_pio2f+0x1cc>
 8007dc4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007dc8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007dcc:	b340      	cbz	r0, 8007e20 <__kernel_rem_pio2f+0x1cc>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	9306      	str	r3, [sp, #24]
 8007dd2:	f000 f9b1 	bl	8008138 <scalbnf>
 8007dd6:	9b06      	ldr	r3, [sp, #24]
 8007dd8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007ddc:	e020      	b.n	8007e20 <__kernel_rem_pio2f+0x1cc>
 8007dde:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007de2:	3e01      	subs	r6, #1
 8007de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dec:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007df0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007df4:	ecac 0a01 	vstmia	ip!, {s0}
 8007df8:	ed90 0a00 	vldr	s0, [r0]
 8007dfc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007e00:	e79c      	b.n	8007d3c <__kernel_rem_pio2f+0xe8>
 8007e02:	d105      	bne.n	8007e10 <__kernel_rem_pio2f+0x1bc>
 8007e04:	1e60      	subs	r0, r4, #1
 8007e06:	a908      	add	r1, sp, #32
 8007e08:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007e0c:	11f6      	asrs	r6, r6, #7
 8007e0e:	e7c8      	b.n	8007da2 <__kernel_rem_pio2f+0x14e>
 8007e10:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007e14:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1c:	da31      	bge.n	8007e82 <__kernel_rem_pio2f+0x22e>
 8007e1e:	2600      	movs	r6, #0
 8007e20:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e28:	f040 8098 	bne.w	8007f5c <__kernel_rem_pio2f+0x308>
 8007e2c:	1e60      	subs	r0, r4, #1
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4550      	cmp	r0, sl
 8007e32:	da4b      	bge.n	8007ecc <__kernel_rem_pio2f+0x278>
 8007e34:	2a00      	cmp	r2, #0
 8007e36:	d065      	beq.n	8007f04 <__kernel_rem_pio2f+0x2b0>
 8007e38:	3c01      	subs	r4, #1
 8007e3a:	ab08      	add	r3, sp, #32
 8007e3c:	3d08      	subs	r5, #8
 8007e3e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f8      	beq.n	8007e38 <__kernel_rem_pio2f+0x1e4>
 8007e46:	4628      	mov	r0, r5
 8007e48:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007e4c:	f000 f974 	bl	8008138 <scalbnf>
 8007e50:	1c63      	adds	r3, r4, #1
 8007e52:	aa44      	add	r2, sp, #272	@ 0x110
 8007e54:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007f54 <__kernel_rem_pio2f+0x300>
 8007e58:	0099      	lsls	r1, r3, #2
 8007e5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007e5e:	4623      	mov	r3, r4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f280 80a9 	bge.w	8007fb8 <__kernel_rem_pio2f+0x364>
 8007e66:	4623      	mov	r3, r4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f2c0 80c7 	blt.w	8007ffc <__kernel_rem_pio2f+0x3a8>
 8007e6e:	aa44      	add	r2, sp, #272	@ 0x110
 8007e70:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007e74:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8007f4c <__kernel_rem_pio2f+0x2f8>
 8007e78:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8007f58 <__kernel_rem_pio2f+0x304>
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	1ae2      	subs	r2, r4, r3
 8007e80:	e0b1      	b.n	8007fe6 <__kernel_rem_pio2f+0x392>
 8007e82:	2602      	movs	r6, #2
 8007e84:	e78f      	b.n	8007da6 <__kernel_rem_pio2f+0x152>
 8007e86:	f852 1b04 	ldr.w	r1, [r2], #4
 8007e8a:	b948      	cbnz	r0, 8007ea0 <__kernel_rem_pio2f+0x24c>
 8007e8c:	b121      	cbz	r1, 8007e98 <__kernel_rem_pio2f+0x244>
 8007e8e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8007e92:	f842 1c04 	str.w	r1, [r2, #-4]
 8007e96:	2101      	movs	r1, #1
 8007e98:	f10e 0e01 	add.w	lr, lr, #1
 8007e9c:	4608      	mov	r0, r1
 8007e9e:	e787      	b.n	8007db0 <__kernel_rem_pio2f+0x15c>
 8007ea0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8007ea4:	e7f5      	b.n	8007e92 <__kernel_rem_pio2f+0x23e>
 8007ea6:	f104 3cff 	add.w	ip, r4, #4294967295
 8007eaa:	aa08      	add	r2, sp, #32
 8007eac:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007eb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007eb4:	a908      	add	r1, sp, #32
 8007eb6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007eba:	e781      	b.n	8007dc0 <__kernel_rem_pio2f+0x16c>
 8007ebc:	f104 3cff 	add.w	ip, r4, #4294967295
 8007ec0:	aa08      	add	r2, sp, #32
 8007ec2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007ec6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007eca:	e7f3      	b.n	8007eb4 <__kernel_rem_pio2f+0x260>
 8007ecc:	a908      	add	r1, sp, #32
 8007ece:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007ed2:	3801      	subs	r0, #1
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	e7ab      	b.n	8007e30 <__kernel_rem_pio2f+0x1dc>
 8007ed8:	3201      	adds	r2, #1
 8007eda:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8007ede:	2e00      	cmp	r6, #0
 8007ee0:	d0fa      	beq.n	8007ed8 <__kernel_rem_pio2f+0x284>
 8007ee2:	9905      	ldr	r1, [sp, #20]
 8007ee4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8007ee8:	eb0d 0001 	add.w	r0, sp, r1
 8007eec:	18e6      	adds	r6, r4, r3
 8007eee:	a91c      	add	r1, sp, #112	@ 0x70
 8007ef0:	f104 0c01 	add.w	ip, r4, #1
 8007ef4:	384c      	subs	r0, #76	@ 0x4c
 8007ef6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8007efa:	4422      	add	r2, r4
 8007efc:	4562      	cmp	r2, ip
 8007efe:	da04      	bge.n	8007f0a <__kernel_rem_pio2f+0x2b6>
 8007f00:	4614      	mov	r4, r2
 8007f02:	e70e      	b.n	8007d22 <__kernel_rem_pio2f+0xce>
 8007f04:	9804      	ldr	r0, [sp, #16]
 8007f06:	2201      	movs	r2, #1
 8007f08:	e7e7      	b.n	8007eda <__kernel_rem_pio2f+0x286>
 8007f0a:	9903      	ldr	r1, [sp, #12]
 8007f0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007f10:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007f14:	9105      	str	r1, [sp, #20]
 8007f16:	ee07 1a90 	vmov	s15, r1
 8007f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f1e:	2400      	movs	r4, #0
 8007f20:	ece6 7a01 	vstmia	r6!, {s15}
 8007f24:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8007f58 <__kernel_rem_pio2f+0x304>
 8007f28:	46b1      	mov	r9, r6
 8007f2a:	455c      	cmp	r4, fp
 8007f2c:	dd04      	ble.n	8007f38 <__kernel_rem_pio2f+0x2e4>
 8007f2e:	ece0 7a01 	vstmia	r0!, {s15}
 8007f32:	f10c 0c01 	add.w	ip, ip, #1
 8007f36:	e7e1      	b.n	8007efc <__kernel_rem_pio2f+0x2a8>
 8007f38:	ecfe 6a01 	vldmia	lr!, {s13}
 8007f3c:	ed39 7a01 	vldmdb	r9!, {s14}
 8007f40:	3401      	adds	r4, #1
 8007f42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007f46:	e7f0      	b.n	8007f2a <__kernel_rem_pio2f+0x2d6>
 8007f48:	0800b82c 	.word	0x0800b82c
 8007f4c:	0800b800 	.word	0x0800b800
 8007f50:	43800000 	.word	0x43800000
 8007f54:	3b800000 	.word	0x3b800000
 8007f58:	00000000 	.word	0x00000000
 8007f5c:	9b02      	ldr	r3, [sp, #8]
 8007f5e:	eeb0 0a48 	vmov.f32	s0, s16
 8007f62:	eba3 0008 	sub.w	r0, r3, r8
 8007f66:	f000 f8e7 	bl	8008138 <scalbnf>
 8007f6a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8007f50 <__kernel_rem_pio2f+0x2fc>
 8007f6e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f76:	db19      	blt.n	8007fac <__kernel_rem_pio2f+0x358>
 8007f78:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8007f54 <__kernel_rem_pio2f+0x300>
 8007f7c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007f80:	aa08      	add	r2, sp, #32
 8007f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f86:	3508      	adds	r5, #8
 8007f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f8c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007f98:	ee10 3a10 	vmov	r3, s0
 8007f9c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007fa0:	ee17 3a90 	vmov	r3, s15
 8007fa4:	3401      	adds	r4, #1
 8007fa6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007faa:	e74c      	b.n	8007e46 <__kernel_rem_pio2f+0x1f2>
 8007fac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007fb0:	aa08      	add	r2, sp, #32
 8007fb2:	ee10 3a10 	vmov	r3, s0
 8007fb6:	e7f6      	b.n	8007fa6 <__kernel_rem_pio2f+0x352>
 8007fb8:	a808      	add	r0, sp, #32
 8007fba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007fbe:	9001      	str	r0, [sp, #4]
 8007fc0:	ee07 0a90 	vmov	s15, r0
 8007fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007fce:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007fd2:	ed62 7a01 	vstmdb	r2!, {s15}
 8007fd6:	e743      	b.n	8007e60 <__kernel_rem_pio2f+0x20c>
 8007fd8:	ecfc 6a01 	vldmia	ip!, {s13}
 8007fdc:	ecb5 7a01 	vldmia	r5!, {s14}
 8007fe0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	4550      	cmp	r0, sl
 8007fe8:	dc01      	bgt.n	8007fee <__kernel_rem_pio2f+0x39a>
 8007fea:	4282      	cmp	r2, r0
 8007fec:	daf4      	bge.n	8007fd8 <__kernel_rem_pio2f+0x384>
 8007fee:	a858      	add	r0, sp, #352	@ 0x160
 8007ff0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007ff4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	e735      	b.n	8007e68 <__kernel_rem_pio2f+0x214>
 8007ffc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	dc09      	bgt.n	8008016 <__kernel_rem_pio2f+0x3c2>
 8008002:	2b00      	cmp	r3, #0
 8008004:	dc2b      	bgt.n	800805e <__kernel_rem_pio2f+0x40a>
 8008006:	d044      	beq.n	8008092 <__kernel_rem_pio2f+0x43e>
 8008008:	f009 0007 	and.w	r0, r9, #7
 800800c:	b059      	add	sp, #356	@ 0x164
 800800e:	ecbd 8b04 	vpop	{d8-d9}
 8008012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008018:	2b03      	cmp	r3, #3
 800801a:	d1f5      	bne.n	8008008 <__kernel_rem_pio2f+0x3b4>
 800801c:	aa30      	add	r2, sp, #192	@ 0xc0
 800801e:	1f0b      	subs	r3, r1, #4
 8008020:	4413      	add	r3, r2
 8008022:	461a      	mov	r2, r3
 8008024:	4620      	mov	r0, r4
 8008026:	2800      	cmp	r0, #0
 8008028:	f1a2 0204 	sub.w	r2, r2, #4
 800802c:	dc52      	bgt.n	80080d4 <__kernel_rem_pio2f+0x480>
 800802e:	4622      	mov	r2, r4
 8008030:	2a01      	cmp	r2, #1
 8008032:	f1a3 0304 	sub.w	r3, r3, #4
 8008036:	dc5d      	bgt.n	80080f4 <__kernel_rem_pio2f+0x4a0>
 8008038:	ab30      	add	r3, sp, #192	@ 0xc0
 800803a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8007f58 <__kernel_rem_pio2f+0x304>
 800803e:	440b      	add	r3, r1
 8008040:	2c01      	cmp	r4, #1
 8008042:	dc67      	bgt.n	8008114 <__kernel_rem_pio2f+0x4c0>
 8008044:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8008048:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800804c:	2e00      	cmp	r6, #0
 800804e:	d167      	bne.n	8008120 <__kernel_rem_pio2f+0x4cc>
 8008050:	edc7 6a00 	vstr	s13, [r7]
 8008054:	ed87 7a01 	vstr	s14, [r7, #4]
 8008058:	edc7 7a02 	vstr	s15, [r7, #8]
 800805c:	e7d4      	b.n	8008008 <__kernel_rem_pio2f+0x3b4>
 800805e:	ab30      	add	r3, sp, #192	@ 0xc0
 8008060:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8007f58 <__kernel_rem_pio2f+0x304>
 8008064:	440b      	add	r3, r1
 8008066:	4622      	mov	r2, r4
 8008068:	2a00      	cmp	r2, #0
 800806a:	da24      	bge.n	80080b6 <__kernel_rem_pio2f+0x462>
 800806c:	b34e      	cbz	r6, 80080c2 <__kernel_rem_pio2f+0x46e>
 800806e:	eef1 7a47 	vneg.f32	s15, s14
 8008072:	edc7 7a00 	vstr	s15, [r7]
 8008076:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800807a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800807e:	aa31      	add	r2, sp, #196	@ 0xc4
 8008080:	2301      	movs	r3, #1
 8008082:	429c      	cmp	r4, r3
 8008084:	da20      	bge.n	80080c8 <__kernel_rem_pio2f+0x474>
 8008086:	b10e      	cbz	r6, 800808c <__kernel_rem_pio2f+0x438>
 8008088:	eef1 7a67 	vneg.f32	s15, s15
 800808c:	edc7 7a01 	vstr	s15, [r7, #4]
 8008090:	e7ba      	b.n	8008008 <__kernel_rem_pio2f+0x3b4>
 8008092:	ab30      	add	r3, sp, #192	@ 0xc0
 8008094:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8007f58 <__kernel_rem_pio2f+0x304>
 8008098:	440b      	add	r3, r1
 800809a:	2c00      	cmp	r4, #0
 800809c:	da05      	bge.n	80080aa <__kernel_rem_pio2f+0x456>
 800809e:	b10e      	cbz	r6, 80080a4 <__kernel_rem_pio2f+0x450>
 80080a0:	eef1 7a67 	vneg.f32	s15, s15
 80080a4:	edc7 7a00 	vstr	s15, [r7]
 80080a8:	e7ae      	b.n	8008008 <__kernel_rem_pio2f+0x3b4>
 80080aa:	ed33 7a01 	vldmdb	r3!, {s14}
 80080ae:	3c01      	subs	r4, #1
 80080b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080b4:	e7f1      	b.n	800809a <__kernel_rem_pio2f+0x446>
 80080b6:	ed73 7a01 	vldmdb	r3!, {s15}
 80080ba:	3a01      	subs	r2, #1
 80080bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080c0:	e7d2      	b.n	8008068 <__kernel_rem_pio2f+0x414>
 80080c2:	eef0 7a47 	vmov.f32	s15, s14
 80080c6:	e7d4      	b.n	8008072 <__kernel_rem_pio2f+0x41e>
 80080c8:	ecb2 7a01 	vldmia	r2!, {s14}
 80080cc:	3301      	adds	r3, #1
 80080ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080d2:	e7d6      	b.n	8008082 <__kernel_rem_pio2f+0x42e>
 80080d4:	edd2 7a00 	vldr	s15, [r2]
 80080d8:	edd2 6a01 	vldr	s13, [r2, #4]
 80080dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80080e0:	3801      	subs	r0, #1
 80080e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080e6:	ed82 7a00 	vstr	s14, [r2]
 80080ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ee:	edc2 7a01 	vstr	s15, [r2, #4]
 80080f2:	e798      	b.n	8008026 <__kernel_rem_pio2f+0x3d2>
 80080f4:	edd3 7a00 	vldr	s15, [r3]
 80080f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80080fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008100:	3a01      	subs	r2, #1
 8008102:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008106:	ed83 7a00 	vstr	s14, [r3]
 800810a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800810e:	edc3 7a01 	vstr	s15, [r3, #4]
 8008112:	e78d      	b.n	8008030 <__kernel_rem_pio2f+0x3dc>
 8008114:	ed33 7a01 	vldmdb	r3!, {s14}
 8008118:	3c01      	subs	r4, #1
 800811a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800811e:	e78f      	b.n	8008040 <__kernel_rem_pio2f+0x3ec>
 8008120:	eef1 6a66 	vneg.f32	s13, s13
 8008124:	eeb1 7a47 	vneg.f32	s14, s14
 8008128:	edc7 6a00 	vstr	s13, [r7]
 800812c:	ed87 7a01 	vstr	s14, [r7, #4]
 8008130:	eef1 7a67 	vneg.f32	s15, s15
 8008134:	e790      	b.n	8008058 <__kernel_rem_pio2f+0x404>
 8008136:	bf00      	nop

08008138 <scalbnf>:
 8008138:	ee10 3a10 	vmov	r3, s0
 800813c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008140:	d02b      	beq.n	800819a <scalbnf+0x62>
 8008142:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008146:	d302      	bcc.n	800814e <scalbnf+0x16>
 8008148:	ee30 0a00 	vadd.f32	s0, s0, s0
 800814c:	4770      	bx	lr
 800814e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008152:	d123      	bne.n	800819c <scalbnf+0x64>
 8008154:	4b24      	ldr	r3, [pc, #144]	@ (80081e8 <scalbnf+0xb0>)
 8008156:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80081ec <scalbnf+0xb4>
 800815a:	4298      	cmp	r0, r3
 800815c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008160:	db17      	blt.n	8008192 <scalbnf+0x5a>
 8008162:	ee10 3a10 	vmov	r3, s0
 8008166:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800816a:	3a19      	subs	r2, #25
 800816c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008170:	4288      	cmp	r0, r1
 8008172:	dd15      	ble.n	80081a0 <scalbnf+0x68>
 8008174:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80081f0 <scalbnf+0xb8>
 8008178:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80081f4 <scalbnf+0xbc>
 800817c:	ee10 3a10 	vmov	r3, s0
 8008180:	eeb0 7a67 	vmov.f32	s14, s15
 8008184:	2b00      	cmp	r3, #0
 8008186:	bfb8      	it	lt
 8008188:	eef0 7a66 	vmovlt.f32	s15, s13
 800818c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008190:	4770      	bx	lr
 8008192:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80081f8 <scalbnf+0xc0>
 8008196:	ee27 0a80 	vmul.f32	s0, s15, s0
 800819a:	4770      	bx	lr
 800819c:	0dd2      	lsrs	r2, r2, #23
 800819e:	e7e5      	b.n	800816c <scalbnf+0x34>
 80081a0:	4410      	add	r0, r2
 80081a2:	28fe      	cmp	r0, #254	@ 0xfe
 80081a4:	dce6      	bgt.n	8008174 <scalbnf+0x3c>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	dd06      	ble.n	80081b8 <scalbnf+0x80>
 80081aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80081ae:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80081b2:	ee00 3a10 	vmov	s0, r3
 80081b6:	4770      	bx	lr
 80081b8:	f110 0f16 	cmn.w	r0, #22
 80081bc:	da09      	bge.n	80081d2 <scalbnf+0x9a>
 80081be:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80081f8 <scalbnf+0xc0>
 80081c2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80081fc <scalbnf+0xc4>
 80081c6:	ee10 3a10 	vmov	r3, s0
 80081ca:	eeb0 7a67 	vmov.f32	s14, s15
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	e7d9      	b.n	8008186 <scalbnf+0x4e>
 80081d2:	3019      	adds	r0, #25
 80081d4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80081d8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80081dc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008200 <scalbnf+0xc8>
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	e7d7      	b.n	8008196 <scalbnf+0x5e>
 80081e6:	bf00      	nop
 80081e8:	ffff3cb0 	.word	0xffff3cb0
 80081ec:	4c000000 	.word	0x4c000000
 80081f0:	7149f2ca 	.word	0x7149f2ca
 80081f4:	f149f2ca 	.word	0xf149f2ca
 80081f8:	0da24260 	.word	0x0da24260
 80081fc:	8da24260 	.word	0x8da24260
 8008200:	33000000 	.word	0x33000000

08008204 <floorf>:
 8008204:	ee10 3a10 	vmov	r3, s0
 8008208:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800820c:	3a7f      	subs	r2, #127	@ 0x7f
 800820e:	2a16      	cmp	r2, #22
 8008210:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008214:	dc2b      	bgt.n	800826e <floorf+0x6a>
 8008216:	2a00      	cmp	r2, #0
 8008218:	da12      	bge.n	8008240 <floorf+0x3c>
 800821a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008280 <floorf+0x7c>
 800821e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008222:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822a:	dd06      	ble.n	800823a <floorf+0x36>
 800822c:	2b00      	cmp	r3, #0
 800822e:	da24      	bge.n	800827a <floorf+0x76>
 8008230:	2900      	cmp	r1, #0
 8008232:	4b14      	ldr	r3, [pc, #80]	@ (8008284 <floorf+0x80>)
 8008234:	bf08      	it	eq
 8008236:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800823a:	ee00 3a10 	vmov	s0, r3
 800823e:	4770      	bx	lr
 8008240:	4911      	ldr	r1, [pc, #68]	@ (8008288 <floorf+0x84>)
 8008242:	4111      	asrs	r1, r2
 8008244:	420b      	tst	r3, r1
 8008246:	d0fa      	beq.n	800823e <floorf+0x3a>
 8008248:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8008280 <floorf+0x7c>
 800824c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008250:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008258:	ddef      	ble.n	800823a <floorf+0x36>
 800825a:	2b00      	cmp	r3, #0
 800825c:	bfbe      	ittt	lt
 800825e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8008262:	fa40 f202 	asrlt.w	r2, r0, r2
 8008266:	189b      	addlt	r3, r3, r2
 8008268:	ea23 0301 	bic.w	r3, r3, r1
 800826c:	e7e5      	b.n	800823a <floorf+0x36>
 800826e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008272:	d3e4      	bcc.n	800823e <floorf+0x3a>
 8008274:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008278:	4770      	bx	lr
 800827a:	2300      	movs	r3, #0
 800827c:	e7dd      	b.n	800823a <floorf+0x36>
 800827e:	bf00      	nop
 8008280:	7149f2ca 	.word	0x7149f2ca
 8008284:	bf800000 	.word	0xbf800000
 8008288:	007fffff 	.word	0x007fffff

0800828c <sbrk_aligned>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	4e0f      	ldr	r6, [pc, #60]	@ (80082cc <sbrk_aligned+0x40>)
 8008290:	460c      	mov	r4, r1
 8008292:	6831      	ldr	r1, [r6, #0]
 8008294:	4605      	mov	r5, r0
 8008296:	b911      	cbnz	r1, 800829e <sbrk_aligned+0x12>
 8008298:	f000 f8ce 	bl	8008438 <_sbrk_r>
 800829c:	6030      	str	r0, [r6, #0]
 800829e:	4621      	mov	r1, r4
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 f8c9 	bl	8008438 <_sbrk_r>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	d103      	bne.n	80082b2 <sbrk_aligned+0x26>
 80082aa:	f04f 34ff 	mov.w	r4, #4294967295
 80082ae:	4620      	mov	r0, r4
 80082b0:	bd70      	pop	{r4, r5, r6, pc}
 80082b2:	1cc4      	adds	r4, r0, #3
 80082b4:	f024 0403 	bic.w	r4, r4, #3
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d0f8      	beq.n	80082ae <sbrk_aligned+0x22>
 80082bc:	1a21      	subs	r1, r4, r0
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 f8ba 	bl	8008438 <_sbrk_r>
 80082c4:	3001      	adds	r0, #1
 80082c6:	d1f2      	bne.n	80082ae <sbrk_aligned+0x22>
 80082c8:	e7ef      	b.n	80082aa <sbrk_aligned+0x1e>
 80082ca:	bf00      	nop
 80082cc:	200003dc 	.word	0x200003dc

080082d0 <_malloc_r>:
 80082d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d4:	1ccd      	adds	r5, r1, #3
 80082d6:	f025 0503 	bic.w	r5, r5, #3
 80082da:	3508      	adds	r5, #8
 80082dc:	2d0c      	cmp	r5, #12
 80082de:	bf38      	it	cc
 80082e0:	250c      	movcc	r5, #12
 80082e2:	2d00      	cmp	r5, #0
 80082e4:	4606      	mov	r6, r0
 80082e6:	db01      	blt.n	80082ec <_malloc_r+0x1c>
 80082e8:	42a9      	cmp	r1, r5
 80082ea:	d904      	bls.n	80082f6 <_malloc_r+0x26>
 80082ec:	230c      	movs	r3, #12
 80082ee:	6033      	str	r3, [r6, #0]
 80082f0:	2000      	movs	r0, #0
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083cc <_malloc_r+0xfc>
 80082fa:	f000 f869 	bl	80083d0 <__malloc_lock>
 80082fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008302:	461c      	mov	r4, r3
 8008304:	bb44      	cbnz	r4, 8008358 <_malloc_r+0x88>
 8008306:	4629      	mov	r1, r5
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff ffbf 	bl	800828c <sbrk_aligned>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	4604      	mov	r4, r0
 8008312:	d158      	bne.n	80083c6 <_malloc_r+0xf6>
 8008314:	f8d8 4000 	ldr.w	r4, [r8]
 8008318:	4627      	mov	r7, r4
 800831a:	2f00      	cmp	r7, #0
 800831c:	d143      	bne.n	80083a6 <_malloc_r+0xd6>
 800831e:	2c00      	cmp	r4, #0
 8008320:	d04b      	beq.n	80083ba <_malloc_r+0xea>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	4639      	mov	r1, r7
 8008326:	4630      	mov	r0, r6
 8008328:	eb04 0903 	add.w	r9, r4, r3
 800832c:	f000 f884 	bl	8008438 <_sbrk_r>
 8008330:	4581      	cmp	r9, r0
 8008332:	d142      	bne.n	80083ba <_malloc_r+0xea>
 8008334:	6821      	ldr	r1, [r4, #0]
 8008336:	1a6d      	subs	r5, r5, r1
 8008338:	4629      	mov	r1, r5
 800833a:	4630      	mov	r0, r6
 800833c:	f7ff ffa6 	bl	800828c <sbrk_aligned>
 8008340:	3001      	adds	r0, #1
 8008342:	d03a      	beq.n	80083ba <_malloc_r+0xea>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	442b      	add	r3, r5
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	f8d8 3000 	ldr.w	r3, [r8]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	bb62      	cbnz	r2, 80083ac <_malloc_r+0xdc>
 8008352:	f8c8 7000 	str.w	r7, [r8]
 8008356:	e00f      	b.n	8008378 <_malloc_r+0xa8>
 8008358:	6822      	ldr	r2, [r4, #0]
 800835a:	1b52      	subs	r2, r2, r5
 800835c:	d420      	bmi.n	80083a0 <_malloc_r+0xd0>
 800835e:	2a0b      	cmp	r2, #11
 8008360:	d917      	bls.n	8008392 <_malloc_r+0xc2>
 8008362:	1961      	adds	r1, r4, r5
 8008364:	42a3      	cmp	r3, r4
 8008366:	6025      	str	r5, [r4, #0]
 8008368:	bf18      	it	ne
 800836a:	6059      	strne	r1, [r3, #4]
 800836c:	6863      	ldr	r3, [r4, #4]
 800836e:	bf08      	it	eq
 8008370:	f8c8 1000 	streq.w	r1, [r8]
 8008374:	5162      	str	r2, [r4, r5]
 8008376:	604b      	str	r3, [r1, #4]
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f82f 	bl	80083dc <__malloc_unlock>
 800837e:	f104 000b 	add.w	r0, r4, #11
 8008382:	1d23      	adds	r3, r4, #4
 8008384:	f020 0007 	bic.w	r0, r0, #7
 8008388:	1ac2      	subs	r2, r0, r3
 800838a:	bf1c      	itt	ne
 800838c:	1a1b      	subne	r3, r3, r0
 800838e:	50a3      	strne	r3, [r4, r2]
 8008390:	e7af      	b.n	80082f2 <_malloc_r+0x22>
 8008392:	6862      	ldr	r2, [r4, #4]
 8008394:	42a3      	cmp	r3, r4
 8008396:	bf0c      	ite	eq
 8008398:	f8c8 2000 	streq.w	r2, [r8]
 800839c:	605a      	strne	r2, [r3, #4]
 800839e:	e7eb      	b.n	8008378 <_malloc_r+0xa8>
 80083a0:	4623      	mov	r3, r4
 80083a2:	6864      	ldr	r4, [r4, #4]
 80083a4:	e7ae      	b.n	8008304 <_malloc_r+0x34>
 80083a6:	463c      	mov	r4, r7
 80083a8:	687f      	ldr	r7, [r7, #4]
 80083aa:	e7b6      	b.n	800831a <_malloc_r+0x4a>
 80083ac:	461a      	mov	r2, r3
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d1fb      	bne.n	80083ac <_malloc_r+0xdc>
 80083b4:	2300      	movs	r3, #0
 80083b6:	6053      	str	r3, [r2, #4]
 80083b8:	e7de      	b.n	8008378 <_malloc_r+0xa8>
 80083ba:	230c      	movs	r3, #12
 80083bc:	6033      	str	r3, [r6, #0]
 80083be:	4630      	mov	r0, r6
 80083c0:	f000 f80c 	bl	80083dc <__malloc_unlock>
 80083c4:	e794      	b.n	80082f0 <_malloc_r+0x20>
 80083c6:	6005      	str	r5, [r0, #0]
 80083c8:	e7d6      	b.n	8008378 <_malloc_r+0xa8>
 80083ca:	bf00      	nop
 80083cc:	200003e0 	.word	0x200003e0

080083d0 <__malloc_lock>:
 80083d0:	4801      	ldr	r0, [pc, #4]	@ (80083d8 <__malloc_lock+0x8>)
 80083d2:	f000 b86b 	b.w	80084ac <__retarget_lock_acquire_recursive>
 80083d6:	bf00      	nop
 80083d8:	20000520 	.word	0x20000520

080083dc <__malloc_unlock>:
 80083dc:	4801      	ldr	r0, [pc, #4]	@ (80083e4 <__malloc_unlock+0x8>)
 80083de:	f000 b866 	b.w	80084ae <__retarget_lock_release_recursive>
 80083e2:	bf00      	nop
 80083e4:	20000520 	.word	0x20000520

080083e8 <_vsiprintf_r>:
 80083e8:	b500      	push	{lr}
 80083ea:	b09b      	sub	sp, #108	@ 0x6c
 80083ec:	9100      	str	r1, [sp, #0]
 80083ee:	9104      	str	r1, [sp, #16]
 80083f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083f4:	9105      	str	r1, [sp, #20]
 80083f6:	9102      	str	r1, [sp, #8]
 80083f8:	4905      	ldr	r1, [pc, #20]	@ (8008410 <_vsiprintf_r+0x28>)
 80083fa:	9103      	str	r1, [sp, #12]
 80083fc:	4669      	mov	r1, sp
 80083fe:	f000 f8fd 	bl	80085fc <_svfiprintf_r>
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	b01b      	add	sp, #108	@ 0x6c
 800840a:	f85d fb04 	ldr.w	pc, [sp], #4
 800840e:	bf00      	nop
 8008410:	ffff0208 	.word	0xffff0208

08008414 <vsiprintf>:
 8008414:	4613      	mov	r3, r2
 8008416:	460a      	mov	r2, r1
 8008418:	4601      	mov	r1, r0
 800841a:	4802      	ldr	r0, [pc, #8]	@ (8008424 <vsiprintf+0x10>)
 800841c:	6800      	ldr	r0, [r0, #0]
 800841e:	f7ff bfe3 	b.w	80083e8 <_vsiprintf_r>
 8008422:	bf00      	nop
 8008424:	20000050 	.word	0x20000050

08008428 <memset>:
 8008428:	4402      	add	r2, r0
 800842a:	4603      	mov	r3, r0
 800842c:	4293      	cmp	r3, r2
 800842e:	d100      	bne.n	8008432 <memset+0xa>
 8008430:	4770      	bx	lr
 8008432:	f803 1b01 	strb.w	r1, [r3], #1
 8008436:	e7f9      	b.n	800842c <memset+0x4>

08008438 <_sbrk_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d06      	ldr	r5, [pc, #24]	@ (8008454 <_sbrk_r+0x1c>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	f7fa fc78 	bl	8002d38 <_sbrk>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_sbrk_r+0x1a>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_sbrk_r+0x1a>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	2000051c 	.word	0x2000051c

08008458 <__errno>:
 8008458:	4b01      	ldr	r3, [pc, #4]	@ (8008460 <__errno+0x8>)
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20000050 	.word	0x20000050

08008464 <__libc_init_array>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	4d0d      	ldr	r5, [pc, #52]	@ (800849c <__libc_init_array+0x38>)
 8008468:	4c0d      	ldr	r4, [pc, #52]	@ (80084a0 <__libc_init_array+0x3c>)
 800846a:	1b64      	subs	r4, r4, r5
 800846c:	10a4      	asrs	r4, r4, #2
 800846e:	2600      	movs	r6, #0
 8008470:	42a6      	cmp	r6, r4
 8008472:	d109      	bne.n	8008488 <__libc_init_array+0x24>
 8008474:	4d0b      	ldr	r5, [pc, #44]	@ (80084a4 <__libc_init_array+0x40>)
 8008476:	4c0c      	ldr	r4, [pc, #48]	@ (80084a8 <__libc_init_array+0x44>)
 8008478:	f000 fba8 	bl	8008bcc <_init>
 800847c:	1b64      	subs	r4, r4, r5
 800847e:	10a4      	asrs	r4, r4, #2
 8008480:	2600      	movs	r6, #0
 8008482:	42a6      	cmp	r6, r4
 8008484:	d105      	bne.n	8008492 <__libc_init_array+0x2e>
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	f855 3b04 	ldr.w	r3, [r5], #4
 800848c:	4798      	blx	r3
 800848e:	3601      	adds	r6, #1
 8008490:	e7ee      	b.n	8008470 <__libc_init_array+0xc>
 8008492:	f855 3b04 	ldr.w	r3, [r5], #4
 8008496:	4798      	blx	r3
 8008498:	3601      	adds	r6, #1
 800849a:	e7f2      	b.n	8008482 <__libc_init_array+0x1e>
 800849c:	0800b874 	.word	0x0800b874
 80084a0:	0800b874 	.word	0x0800b874
 80084a4:	0800b874 	.word	0x0800b874
 80084a8:	0800b87c 	.word	0x0800b87c

080084ac <__retarget_lock_acquire_recursive>:
 80084ac:	4770      	bx	lr

080084ae <__retarget_lock_release_recursive>:
 80084ae:	4770      	bx	lr

080084b0 <_free_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4605      	mov	r5, r0
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d041      	beq.n	800853c <_free_r+0x8c>
 80084b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084bc:	1f0c      	subs	r4, r1, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bfb8      	it	lt
 80084c2:	18e4      	addlt	r4, r4, r3
 80084c4:	f7ff ff84 	bl	80083d0 <__malloc_lock>
 80084c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008540 <_free_r+0x90>)
 80084ca:	6813      	ldr	r3, [r2, #0]
 80084cc:	b933      	cbnz	r3, 80084dc <_free_r+0x2c>
 80084ce:	6063      	str	r3, [r4, #4]
 80084d0:	6014      	str	r4, [r2, #0]
 80084d2:	4628      	mov	r0, r5
 80084d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d8:	f7ff bf80 	b.w	80083dc <__malloc_unlock>
 80084dc:	42a3      	cmp	r3, r4
 80084de:	d908      	bls.n	80084f2 <_free_r+0x42>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	1821      	adds	r1, r4, r0
 80084e4:	428b      	cmp	r3, r1
 80084e6:	bf01      	itttt	eq
 80084e8:	6819      	ldreq	r1, [r3, #0]
 80084ea:	685b      	ldreq	r3, [r3, #4]
 80084ec:	1809      	addeq	r1, r1, r0
 80084ee:	6021      	streq	r1, [r4, #0]
 80084f0:	e7ed      	b.n	80084ce <_free_r+0x1e>
 80084f2:	461a      	mov	r2, r3
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	b10b      	cbz	r3, 80084fc <_free_r+0x4c>
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	d9fa      	bls.n	80084f2 <_free_r+0x42>
 80084fc:	6811      	ldr	r1, [r2, #0]
 80084fe:	1850      	adds	r0, r2, r1
 8008500:	42a0      	cmp	r0, r4
 8008502:	d10b      	bne.n	800851c <_free_r+0x6c>
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	4401      	add	r1, r0
 8008508:	1850      	adds	r0, r2, r1
 800850a:	4283      	cmp	r3, r0
 800850c:	6011      	str	r1, [r2, #0]
 800850e:	d1e0      	bne.n	80084d2 <_free_r+0x22>
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	6053      	str	r3, [r2, #4]
 8008516:	4408      	add	r0, r1
 8008518:	6010      	str	r0, [r2, #0]
 800851a:	e7da      	b.n	80084d2 <_free_r+0x22>
 800851c:	d902      	bls.n	8008524 <_free_r+0x74>
 800851e:	230c      	movs	r3, #12
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	e7d6      	b.n	80084d2 <_free_r+0x22>
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	1821      	adds	r1, r4, r0
 8008528:	428b      	cmp	r3, r1
 800852a:	bf04      	itt	eq
 800852c:	6819      	ldreq	r1, [r3, #0]
 800852e:	685b      	ldreq	r3, [r3, #4]
 8008530:	6063      	str	r3, [r4, #4]
 8008532:	bf04      	itt	eq
 8008534:	1809      	addeq	r1, r1, r0
 8008536:	6021      	streq	r1, [r4, #0]
 8008538:	6054      	str	r4, [r2, #4]
 800853a:	e7ca      	b.n	80084d2 <_free_r+0x22>
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	bf00      	nop
 8008540:	200003e0 	.word	0x200003e0

08008544 <__ssputs_r>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	688e      	ldr	r6, [r1, #8]
 800854a:	461f      	mov	r7, r3
 800854c:	42be      	cmp	r6, r7
 800854e:	680b      	ldr	r3, [r1, #0]
 8008550:	4682      	mov	sl, r0
 8008552:	460c      	mov	r4, r1
 8008554:	4690      	mov	r8, r2
 8008556:	d82d      	bhi.n	80085b4 <__ssputs_r+0x70>
 8008558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800855c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008560:	d026      	beq.n	80085b0 <__ssputs_r+0x6c>
 8008562:	6965      	ldr	r5, [r4, #20]
 8008564:	6909      	ldr	r1, [r1, #16]
 8008566:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800856a:	eba3 0901 	sub.w	r9, r3, r1
 800856e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008572:	1c7b      	adds	r3, r7, #1
 8008574:	444b      	add	r3, r9
 8008576:	106d      	asrs	r5, r5, #1
 8008578:	429d      	cmp	r5, r3
 800857a:	bf38      	it	cc
 800857c:	461d      	movcc	r5, r3
 800857e:	0553      	lsls	r3, r2, #21
 8008580:	d527      	bpl.n	80085d2 <__ssputs_r+0x8e>
 8008582:	4629      	mov	r1, r5
 8008584:	f7ff fea4 	bl	80082d0 <_malloc_r>
 8008588:	4606      	mov	r6, r0
 800858a:	b360      	cbz	r0, 80085e6 <__ssputs_r+0xa2>
 800858c:	6921      	ldr	r1, [r4, #16]
 800858e:	464a      	mov	r2, r9
 8008590:	f000 fad8 	bl	8008b44 <memcpy>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800859a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800859e:	81a3      	strh	r3, [r4, #12]
 80085a0:	6126      	str	r6, [r4, #16]
 80085a2:	6165      	str	r5, [r4, #20]
 80085a4:	444e      	add	r6, r9
 80085a6:	eba5 0509 	sub.w	r5, r5, r9
 80085aa:	6026      	str	r6, [r4, #0]
 80085ac:	60a5      	str	r5, [r4, #8]
 80085ae:	463e      	mov	r6, r7
 80085b0:	42be      	cmp	r6, r7
 80085b2:	d900      	bls.n	80085b6 <__ssputs_r+0x72>
 80085b4:	463e      	mov	r6, r7
 80085b6:	6820      	ldr	r0, [r4, #0]
 80085b8:	4632      	mov	r2, r6
 80085ba:	4641      	mov	r1, r8
 80085bc:	f000 faa8 	bl	8008b10 <memmove>
 80085c0:	68a3      	ldr	r3, [r4, #8]
 80085c2:	1b9b      	subs	r3, r3, r6
 80085c4:	60a3      	str	r3, [r4, #8]
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	4433      	add	r3, r6
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	2000      	movs	r0, #0
 80085ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d2:	462a      	mov	r2, r5
 80085d4:	f000 fac4 	bl	8008b60 <_realloc_r>
 80085d8:	4606      	mov	r6, r0
 80085da:	2800      	cmp	r0, #0
 80085dc:	d1e0      	bne.n	80085a0 <__ssputs_r+0x5c>
 80085de:	6921      	ldr	r1, [r4, #16]
 80085e0:	4650      	mov	r0, sl
 80085e2:	f7ff ff65 	bl	80084b0 <_free_r>
 80085e6:	230c      	movs	r3, #12
 80085e8:	f8ca 3000 	str.w	r3, [sl]
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f2:	81a3      	strh	r3, [r4, #12]
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	e7e9      	b.n	80085ce <__ssputs_r+0x8a>
	...

080085fc <_svfiprintf_r>:
 80085fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	4698      	mov	r8, r3
 8008602:	898b      	ldrh	r3, [r1, #12]
 8008604:	061b      	lsls	r3, r3, #24
 8008606:	b09d      	sub	sp, #116	@ 0x74
 8008608:	4607      	mov	r7, r0
 800860a:	460d      	mov	r5, r1
 800860c:	4614      	mov	r4, r2
 800860e:	d510      	bpl.n	8008632 <_svfiprintf_r+0x36>
 8008610:	690b      	ldr	r3, [r1, #16]
 8008612:	b973      	cbnz	r3, 8008632 <_svfiprintf_r+0x36>
 8008614:	2140      	movs	r1, #64	@ 0x40
 8008616:	f7ff fe5b 	bl	80082d0 <_malloc_r>
 800861a:	6028      	str	r0, [r5, #0]
 800861c:	6128      	str	r0, [r5, #16]
 800861e:	b930      	cbnz	r0, 800862e <_svfiprintf_r+0x32>
 8008620:	230c      	movs	r3, #12
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	b01d      	add	sp, #116	@ 0x74
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862e:	2340      	movs	r3, #64	@ 0x40
 8008630:	616b      	str	r3, [r5, #20]
 8008632:	2300      	movs	r3, #0
 8008634:	9309      	str	r3, [sp, #36]	@ 0x24
 8008636:	2320      	movs	r3, #32
 8008638:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800863c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008640:	2330      	movs	r3, #48	@ 0x30
 8008642:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087e0 <_svfiprintf_r+0x1e4>
 8008646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800864a:	f04f 0901 	mov.w	r9, #1
 800864e:	4623      	mov	r3, r4
 8008650:	469a      	mov	sl, r3
 8008652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008656:	b10a      	cbz	r2, 800865c <_svfiprintf_r+0x60>
 8008658:	2a25      	cmp	r2, #37	@ 0x25
 800865a:	d1f9      	bne.n	8008650 <_svfiprintf_r+0x54>
 800865c:	ebba 0b04 	subs.w	fp, sl, r4
 8008660:	d00b      	beq.n	800867a <_svfiprintf_r+0x7e>
 8008662:	465b      	mov	r3, fp
 8008664:	4622      	mov	r2, r4
 8008666:	4629      	mov	r1, r5
 8008668:	4638      	mov	r0, r7
 800866a:	f7ff ff6b 	bl	8008544 <__ssputs_r>
 800866e:	3001      	adds	r0, #1
 8008670:	f000 80a7 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008676:	445a      	add	r2, fp
 8008678:	9209      	str	r2, [sp, #36]	@ 0x24
 800867a:	f89a 3000 	ldrb.w	r3, [sl]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 809f 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008684:	2300      	movs	r3, #0
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800868e:	f10a 0a01 	add.w	sl, sl, #1
 8008692:	9304      	str	r3, [sp, #16]
 8008694:	9307      	str	r3, [sp, #28]
 8008696:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800869a:	931a      	str	r3, [sp, #104]	@ 0x68
 800869c:	4654      	mov	r4, sl
 800869e:	2205      	movs	r2, #5
 80086a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a4:	484e      	ldr	r0, [pc, #312]	@ (80087e0 <_svfiprintf_r+0x1e4>)
 80086a6:	f7f7 fdc3 	bl	8000230 <memchr>
 80086aa:	9a04      	ldr	r2, [sp, #16]
 80086ac:	b9d8      	cbnz	r0, 80086e6 <_svfiprintf_r+0xea>
 80086ae:	06d0      	lsls	r0, r2, #27
 80086b0:	bf44      	itt	mi
 80086b2:	2320      	movmi	r3, #32
 80086b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086b8:	0711      	lsls	r1, r2, #28
 80086ba:	bf44      	itt	mi
 80086bc:	232b      	movmi	r3, #43	@ 0x2b
 80086be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086c2:	f89a 3000 	ldrb.w	r3, [sl]
 80086c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086c8:	d015      	beq.n	80086f6 <_svfiprintf_r+0xfa>
 80086ca:	9a07      	ldr	r2, [sp, #28]
 80086cc:	4654      	mov	r4, sl
 80086ce:	2000      	movs	r0, #0
 80086d0:	f04f 0c0a 	mov.w	ip, #10
 80086d4:	4621      	mov	r1, r4
 80086d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086da:	3b30      	subs	r3, #48	@ 0x30
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d94b      	bls.n	8008778 <_svfiprintf_r+0x17c>
 80086e0:	b1b0      	cbz	r0, 8008710 <_svfiprintf_r+0x114>
 80086e2:	9207      	str	r2, [sp, #28]
 80086e4:	e014      	b.n	8008710 <_svfiprintf_r+0x114>
 80086e6:	eba0 0308 	sub.w	r3, r0, r8
 80086ea:	fa09 f303 	lsl.w	r3, r9, r3
 80086ee:	4313      	orrs	r3, r2
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	46a2      	mov	sl, r4
 80086f4:	e7d2      	b.n	800869c <_svfiprintf_r+0xa0>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	1d19      	adds	r1, r3, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	9103      	str	r1, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfbb      	ittet	lt
 8008702:	425b      	neglt	r3, r3
 8008704:	f042 0202 	orrlt.w	r2, r2, #2
 8008708:	9307      	strge	r3, [sp, #28]
 800870a:	9307      	strlt	r3, [sp, #28]
 800870c:	bfb8      	it	lt
 800870e:	9204      	strlt	r2, [sp, #16]
 8008710:	7823      	ldrb	r3, [r4, #0]
 8008712:	2b2e      	cmp	r3, #46	@ 0x2e
 8008714:	d10a      	bne.n	800872c <_svfiprintf_r+0x130>
 8008716:	7863      	ldrb	r3, [r4, #1]
 8008718:	2b2a      	cmp	r3, #42	@ 0x2a
 800871a:	d132      	bne.n	8008782 <_svfiprintf_r+0x186>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	1d1a      	adds	r2, r3, #4
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	9203      	str	r2, [sp, #12]
 8008724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008728:	3402      	adds	r4, #2
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087f0 <_svfiprintf_r+0x1f4>
 8008730:	7821      	ldrb	r1, [r4, #0]
 8008732:	2203      	movs	r2, #3
 8008734:	4650      	mov	r0, sl
 8008736:	f7f7 fd7b 	bl	8000230 <memchr>
 800873a:	b138      	cbz	r0, 800874c <_svfiprintf_r+0x150>
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	eba0 000a 	sub.w	r0, r0, sl
 8008742:	2240      	movs	r2, #64	@ 0x40
 8008744:	4082      	lsls	r2, r0
 8008746:	4313      	orrs	r3, r2
 8008748:	3401      	adds	r4, #1
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008750:	4824      	ldr	r0, [pc, #144]	@ (80087e4 <_svfiprintf_r+0x1e8>)
 8008752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008756:	2206      	movs	r2, #6
 8008758:	f7f7 fd6a 	bl	8000230 <memchr>
 800875c:	2800      	cmp	r0, #0
 800875e:	d036      	beq.n	80087ce <_svfiprintf_r+0x1d2>
 8008760:	4b21      	ldr	r3, [pc, #132]	@ (80087e8 <_svfiprintf_r+0x1ec>)
 8008762:	bb1b      	cbnz	r3, 80087ac <_svfiprintf_r+0x1b0>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	3307      	adds	r3, #7
 8008768:	f023 0307 	bic.w	r3, r3, #7
 800876c:	3308      	adds	r3, #8
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008772:	4433      	add	r3, r6
 8008774:	9309      	str	r3, [sp, #36]	@ 0x24
 8008776:	e76a      	b.n	800864e <_svfiprintf_r+0x52>
 8008778:	fb0c 3202 	mla	r2, ip, r2, r3
 800877c:	460c      	mov	r4, r1
 800877e:	2001      	movs	r0, #1
 8008780:	e7a8      	b.n	80086d4 <_svfiprintf_r+0xd8>
 8008782:	2300      	movs	r3, #0
 8008784:	3401      	adds	r4, #1
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	4619      	mov	r1, r3
 800878a:	f04f 0c0a 	mov.w	ip, #10
 800878e:	4620      	mov	r0, r4
 8008790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008794:	3a30      	subs	r2, #48	@ 0x30
 8008796:	2a09      	cmp	r2, #9
 8008798:	d903      	bls.n	80087a2 <_svfiprintf_r+0x1a6>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0c6      	beq.n	800872c <_svfiprintf_r+0x130>
 800879e:	9105      	str	r1, [sp, #20]
 80087a0:	e7c4      	b.n	800872c <_svfiprintf_r+0x130>
 80087a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a6:	4604      	mov	r4, r0
 80087a8:	2301      	movs	r3, #1
 80087aa:	e7f0      	b.n	800878e <_svfiprintf_r+0x192>
 80087ac:	ab03      	add	r3, sp, #12
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	462a      	mov	r2, r5
 80087b2:	4b0e      	ldr	r3, [pc, #56]	@ (80087ec <_svfiprintf_r+0x1f0>)
 80087b4:	a904      	add	r1, sp, #16
 80087b6:	4638      	mov	r0, r7
 80087b8:	f3af 8000 	nop.w
 80087bc:	1c42      	adds	r2, r0, #1
 80087be:	4606      	mov	r6, r0
 80087c0:	d1d6      	bne.n	8008770 <_svfiprintf_r+0x174>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	065b      	lsls	r3, r3, #25
 80087c6:	f53f af2d 	bmi.w	8008624 <_svfiprintf_r+0x28>
 80087ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087cc:	e72c      	b.n	8008628 <_svfiprintf_r+0x2c>
 80087ce:	ab03      	add	r3, sp, #12
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	462a      	mov	r2, r5
 80087d4:	4b05      	ldr	r3, [pc, #20]	@ (80087ec <_svfiprintf_r+0x1f0>)
 80087d6:	a904      	add	r1, sp, #16
 80087d8:	4638      	mov	r0, r7
 80087da:	f000 f879 	bl	80088d0 <_printf_i>
 80087de:	e7ed      	b.n	80087bc <_svfiprintf_r+0x1c0>
 80087e0:	0800b838 	.word	0x0800b838
 80087e4:	0800b842 	.word	0x0800b842
 80087e8:	00000000 	.word	0x00000000
 80087ec:	08008545 	.word	0x08008545
 80087f0:	0800b83e 	.word	0x0800b83e

080087f4 <_printf_common>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	4616      	mov	r6, r2
 80087fa:	4698      	mov	r8, r3
 80087fc:	688a      	ldr	r2, [r1, #8]
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008804:	4293      	cmp	r3, r2
 8008806:	bfb8      	it	lt
 8008808:	4613      	movlt	r3, r2
 800880a:	6033      	str	r3, [r6, #0]
 800880c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008810:	4607      	mov	r7, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b10a      	cbz	r2, 800881a <_printf_common+0x26>
 8008816:	3301      	adds	r3, #1
 8008818:	6033      	str	r3, [r6, #0]
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	0699      	lsls	r1, r3, #26
 800881e:	bf42      	ittt	mi
 8008820:	6833      	ldrmi	r3, [r6, #0]
 8008822:	3302      	addmi	r3, #2
 8008824:	6033      	strmi	r3, [r6, #0]
 8008826:	6825      	ldr	r5, [r4, #0]
 8008828:	f015 0506 	ands.w	r5, r5, #6
 800882c:	d106      	bne.n	800883c <_printf_common+0x48>
 800882e:	f104 0a19 	add.w	sl, r4, #25
 8008832:	68e3      	ldr	r3, [r4, #12]
 8008834:	6832      	ldr	r2, [r6, #0]
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	42ab      	cmp	r3, r5
 800883a:	dc26      	bgt.n	800888a <_printf_common+0x96>
 800883c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008840:	6822      	ldr	r2, [r4, #0]
 8008842:	3b00      	subs	r3, #0
 8008844:	bf18      	it	ne
 8008846:	2301      	movne	r3, #1
 8008848:	0692      	lsls	r2, r2, #26
 800884a:	d42b      	bmi.n	80088a4 <_printf_common+0xb0>
 800884c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008850:	4641      	mov	r1, r8
 8008852:	4638      	mov	r0, r7
 8008854:	47c8      	blx	r9
 8008856:	3001      	adds	r0, #1
 8008858:	d01e      	beq.n	8008898 <_printf_common+0xa4>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	6922      	ldr	r2, [r4, #16]
 800885e:	f003 0306 	and.w	r3, r3, #6
 8008862:	2b04      	cmp	r3, #4
 8008864:	bf02      	ittt	eq
 8008866:	68e5      	ldreq	r5, [r4, #12]
 8008868:	6833      	ldreq	r3, [r6, #0]
 800886a:	1aed      	subeq	r5, r5, r3
 800886c:	68a3      	ldr	r3, [r4, #8]
 800886e:	bf0c      	ite	eq
 8008870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008874:	2500      	movne	r5, #0
 8008876:	4293      	cmp	r3, r2
 8008878:	bfc4      	itt	gt
 800887a:	1a9b      	subgt	r3, r3, r2
 800887c:	18ed      	addgt	r5, r5, r3
 800887e:	2600      	movs	r6, #0
 8008880:	341a      	adds	r4, #26
 8008882:	42b5      	cmp	r5, r6
 8008884:	d11a      	bne.n	80088bc <_printf_common+0xc8>
 8008886:	2000      	movs	r0, #0
 8008888:	e008      	b.n	800889c <_printf_common+0xa8>
 800888a:	2301      	movs	r3, #1
 800888c:	4652      	mov	r2, sl
 800888e:	4641      	mov	r1, r8
 8008890:	4638      	mov	r0, r7
 8008892:	47c8      	blx	r9
 8008894:	3001      	adds	r0, #1
 8008896:	d103      	bne.n	80088a0 <_printf_common+0xac>
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a0:	3501      	adds	r5, #1
 80088a2:	e7c6      	b.n	8008832 <_printf_common+0x3e>
 80088a4:	18e1      	adds	r1, r4, r3
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	2030      	movs	r0, #48	@ 0x30
 80088aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80088ae:	4422      	add	r2, r4
 80088b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088b8:	3302      	adds	r3, #2
 80088ba:	e7c7      	b.n	800884c <_printf_common+0x58>
 80088bc:	2301      	movs	r3, #1
 80088be:	4622      	mov	r2, r4
 80088c0:	4641      	mov	r1, r8
 80088c2:	4638      	mov	r0, r7
 80088c4:	47c8      	blx	r9
 80088c6:	3001      	adds	r0, #1
 80088c8:	d0e6      	beq.n	8008898 <_printf_common+0xa4>
 80088ca:	3601      	adds	r6, #1
 80088cc:	e7d9      	b.n	8008882 <_printf_common+0x8e>
	...

080088d0 <_printf_i>:
 80088d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d4:	7e0f      	ldrb	r7, [r1, #24]
 80088d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088d8:	2f78      	cmp	r7, #120	@ 0x78
 80088da:	4691      	mov	r9, r2
 80088dc:	4680      	mov	r8, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	469a      	mov	sl, r3
 80088e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088e6:	d807      	bhi.n	80088f8 <_printf_i+0x28>
 80088e8:	2f62      	cmp	r7, #98	@ 0x62
 80088ea:	d80a      	bhi.n	8008902 <_printf_i+0x32>
 80088ec:	2f00      	cmp	r7, #0
 80088ee:	f000 80d2 	beq.w	8008a96 <_printf_i+0x1c6>
 80088f2:	2f58      	cmp	r7, #88	@ 0x58
 80088f4:	f000 80b9 	beq.w	8008a6a <_printf_i+0x19a>
 80088f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008900:	e03a      	b.n	8008978 <_printf_i+0xa8>
 8008902:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008906:	2b15      	cmp	r3, #21
 8008908:	d8f6      	bhi.n	80088f8 <_printf_i+0x28>
 800890a:	a101      	add	r1, pc, #4	@ (adr r1, 8008910 <_printf_i+0x40>)
 800890c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008910:	08008969 	.word	0x08008969
 8008914:	0800897d 	.word	0x0800897d
 8008918:	080088f9 	.word	0x080088f9
 800891c:	080088f9 	.word	0x080088f9
 8008920:	080088f9 	.word	0x080088f9
 8008924:	080088f9 	.word	0x080088f9
 8008928:	0800897d 	.word	0x0800897d
 800892c:	080088f9 	.word	0x080088f9
 8008930:	080088f9 	.word	0x080088f9
 8008934:	080088f9 	.word	0x080088f9
 8008938:	080088f9 	.word	0x080088f9
 800893c:	08008a7d 	.word	0x08008a7d
 8008940:	080089a7 	.word	0x080089a7
 8008944:	08008a37 	.word	0x08008a37
 8008948:	080088f9 	.word	0x080088f9
 800894c:	080088f9 	.word	0x080088f9
 8008950:	08008a9f 	.word	0x08008a9f
 8008954:	080088f9 	.word	0x080088f9
 8008958:	080089a7 	.word	0x080089a7
 800895c:	080088f9 	.word	0x080088f9
 8008960:	080088f9 	.word	0x080088f9
 8008964:	08008a3f 	.word	0x08008a3f
 8008968:	6833      	ldr	r3, [r6, #0]
 800896a:	1d1a      	adds	r2, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6032      	str	r2, [r6, #0]
 8008970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008978:	2301      	movs	r3, #1
 800897a:	e09d      	b.n	8008ab8 <_printf_i+0x1e8>
 800897c:	6833      	ldr	r3, [r6, #0]
 800897e:	6820      	ldr	r0, [r4, #0]
 8008980:	1d19      	adds	r1, r3, #4
 8008982:	6031      	str	r1, [r6, #0]
 8008984:	0606      	lsls	r6, r0, #24
 8008986:	d501      	bpl.n	800898c <_printf_i+0xbc>
 8008988:	681d      	ldr	r5, [r3, #0]
 800898a:	e003      	b.n	8008994 <_printf_i+0xc4>
 800898c:	0645      	lsls	r5, r0, #25
 800898e:	d5fb      	bpl.n	8008988 <_printf_i+0xb8>
 8008990:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008994:	2d00      	cmp	r5, #0
 8008996:	da03      	bge.n	80089a0 <_printf_i+0xd0>
 8008998:	232d      	movs	r3, #45	@ 0x2d
 800899a:	426d      	negs	r5, r5
 800899c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089a0:	4859      	ldr	r0, [pc, #356]	@ (8008b08 <_printf_i+0x238>)
 80089a2:	230a      	movs	r3, #10
 80089a4:	e011      	b.n	80089ca <_printf_i+0xfa>
 80089a6:	6821      	ldr	r1, [r4, #0]
 80089a8:	6833      	ldr	r3, [r6, #0]
 80089aa:	0608      	lsls	r0, r1, #24
 80089ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80089b0:	d402      	bmi.n	80089b8 <_printf_i+0xe8>
 80089b2:	0649      	lsls	r1, r1, #25
 80089b4:	bf48      	it	mi
 80089b6:	b2ad      	uxthmi	r5, r5
 80089b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80089ba:	4853      	ldr	r0, [pc, #332]	@ (8008b08 <_printf_i+0x238>)
 80089bc:	6033      	str	r3, [r6, #0]
 80089be:	bf14      	ite	ne
 80089c0:	230a      	movne	r3, #10
 80089c2:	2308      	moveq	r3, #8
 80089c4:	2100      	movs	r1, #0
 80089c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089ca:	6866      	ldr	r6, [r4, #4]
 80089cc:	60a6      	str	r6, [r4, #8]
 80089ce:	2e00      	cmp	r6, #0
 80089d0:	bfa2      	ittt	ge
 80089d2:	6821      	ldrge	r1, [r4, #0]
 80089d4:	f021 0104 	bicge.w	r1, r1, #4
 80089d8:	6021      	strge	r1, [r4, #0]
 80089da:	b90d      	cbnz	r5, 80089e0 <_printf_i+0x110>
 80089dc:	2e00      	cmp	r6, #0
 80089de:	d04b      	beq.n	8008a78 <_printf_i+0x1a8>
 80089e0:	4616      	mov	r6, r2
 80089e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80089e6:	fb03 5711 	mls	r7, r3, r1, r5
 80089ea:	5dc7      	ldrb	r7, [r0, r7]
 80089ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089f0:	462f      	mov	r7, r5
 80089f2:	42bb      	cmp	r3, r7
 80089f4:	460d      	mov	r5, r1
 80089f6:	d9f4      	bls.n	80089e2 <_printf_i+0x112>
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d10b      	bne.n	8008a14 <_printf_i+0x144>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	07df      	lsls	r7, r3, #31
 8008a00:	d508      	bpl.n	8008a14 <_printf_i+0x144>
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	6861      	ldr	r1, [r4, #4]
 8008a06:	4299      	cmp	r1, r3
 8008a08:	bfde      	ittt	le
 8008a0a:	2330      	movle	r3, #48	@ 0x30
 8008a0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a14:	1b92      	subs	r2, r2, r6
 8008a16:	6122      	str	r2, [r4, #16]
 8008a18:	f8cd a000 	str.w	sl, [sp]
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	aa03      	add	r2, sp, #12
 8008a20:	4621      	mov	r1, r4
 8008a22:	4640      	mov	r0, r8
 8008a24:	f7ff fee6 	bl	80087f4 <_printf_common>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d14a      	bne.n	8008ac2 <_printf_i+0x1f2>
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	b004      	add	sp, #16
 8008a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	f043 0320 	orr.w	r3, r3, #32
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	4833      	ldr	r0, [pc, #204]	@ (8008b0c <_printf_i+0x23c>)
 8008a40:	2778      	movs	r7, #120	@ 0x78
 8008a42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	6831      	ldr	r1, [r6, #0]
 8008a4a:	061f      	lsls	r7, r3, #24
 8008a4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a50:	d402      	bmi.n	8008a58 <_printf_i+0x188>
 8008a52:	065f      	lsls	r7, r3, #25
 8008a54:	bf48      	it	mi
 8008a56:	b2ad      	uxthmi	r5, r5
 8008a58:	6031      	str	r1, [r6, #0]
 8008a5a:	07d9      	lsls	r1, r3, #31
 8008a5c:	bf44      	itt	mi
 8008a5e:	f043 0320 	orrmi.w	r3, r3, #32
 8008a62:	6023      	strmi	r3, [r4, #0]
 8008a64:	b11d      	cbz	r5, 8008a6e <_printf_i+0x19e>
 8008a66:	2310      	movs	r3, #16
 8008a68:	e7ac      	b.n	80089c4 <_printf_i+0xf4>
 8008a6a:	4827      	ldr	r0, [pc, #156]	@ (8008b08 <_printf_i+0x238>)
 8008a6c:	e7e9      	b.n	8008a42 <_printf_i+0x172>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	f023 0320 	bic.w	r3, r3, #32
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	e7f6      	b.n	8008a66 <_printf_i+0x196>
 8008a78:	4616      	mov	r6, r2
 8008a7a:	e7bd      	b.n	80089f8 <_printf_i+0x128>
 8008a7c:	6833      	ldr	r3, [r6, #0]
 8008a7e:	6825      	ldr	r5, [r4, #0]
 8008a80:	6961      	ldr	r1, [r4, #20]
 8008a82:	1d18      	adds	r0, r3, #4
 8008a84:	6030      	str	r0, [r6, #0]
 8008a86:	062e      	lsls	r6, r5, #24
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	d501      	bpl.n	8008a90 <_printf_i+0x1c0>
 8008a8c:	6019      	str	r1, [r3, #0]
 8008a8e:	e002      	b.n	8008a96 <_printf_i+0x1c6>
 8008a90:	0668      	lsls	r0, r5, #25
 8008a92:	d5fb      	bpl.n	8008a8c <_printf_i+0x1bc>
 8008a94:	8019      	strh	r1, [r3, #0]
 8008a96:	2300      	movs	r3, #0
 8008a98:	6123      	str	r3, [r4, #16]
 8008a9a:	4616      	mov	r6, r2
 8008a9c:	e7bc      	b.n	8008a18 <_printf_i+0x148>
 8008a9e:	6833      	ldr	r3, [r6, #0]
 8008aa0:	1d1a      	adds	r2, r3, #4
 8008aa2:	6032      	str	r2, [r6, #0]
 8008aa4:	681e      	ldr	r6, [r3, #0]
 8008aa6:	6862      	ldr	r2, [r4, #4]
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7f7 fbc0 	bl	8000230 <memchr>
 8008ab0:	b108      	cbz	r0, 8008ab6 <_printf_i+0x1e6>
 8008ab2:	1b80      	subs	r0, r0, r6
 8008ab4:	6060      	str	r0, [r4, #4]
 8008ab6:	6863      	ldr	r3, [r4, #4]
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	2300      	movs	r3, #0
 8008abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ac0:	e7aa      	b.n	8008a18 <_printf_i+0x148>
 8008ac2:	6923      	ldr	r3, [r4, #16]
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	4640      	mov	r0, r8
 8008aca:	47d0      	blx	sl
 8008acc:	3001      	adds	r0, #1
 8008ace:	d0ad      	beq.n	8008a2c <_printf_i+0x15c>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	079b      	lsls	r3, r3, #30
 8008ad4:	d413      	bmi.n	8008afe <_printf_i+0x22e>
 8008ad6:	68e0      	ldr	r0, [r4, #12]
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	4298      	cmp	r0, r3
 8008adc:	bfb8      	it	lt
 8008ade:	4618      	movlt	r0, r3
 8008ae0:	e7a6      	b.n	8008a30 <_printf_i+0x160>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	4640      	mov	r0, r8
 8008aea:	47d0      	blx	sl
 8008aec:	3001      	adds	r0, #1
 8008aee:	d09d      	beq.n	8008a2c <_printf_i+0x15c>
 8008af0:	3501      	adds	r5, #1
 8008af2:	68e3      	ldr	r3, [r4, #12]
 8008af4:	9903      	ldr	r1, [sp, #12]
 8008af6:	1a5b      	subs	r3, r3, r1
 8008af8:	42ab      	cmp	r3, r5
 8008afa:	dcf2      	bgt.n	8008ae2 <_printf_i+0x212>
 8008afc:	e7eb      	b.n	8008ad6 <_printf_i+0x206>
 8008afe:	2500      	movs	r5, #0
 8008b00:	f104 0619 	add.w	r6, r4, #25
 8008b04:	e7f5      	b.n	8008af2 <_printf_i+0x222>
 8008b06:	bf00      	nop
 8008b08:	0800b849 	.word	0x0800b849
 8008b0c:	0800b85a 	.word	0x0800b85a

08008b10 <memmove>:
 8008b10:	4288      	cmp	r0, r1
 8008b12:	b510      	push	{r4, lr}
 8008b14:	eb01 0402 	add.w	r4, r1, r2
 8008b18:	d902      	bls.n	8008b20 <memmove+0x10>
 8008b1a:	4284      	cmp	r4, r0
 8008b1c:	4623      	mov	r3, r4
 8008b1e:	d807      	bhi.n	8008b30 <memmove+0x20>
 8008b20:	1e43      	subs	r3, r0, #1
 8008b22:	42a1      	cmp	r1, r4
 8008b24:	d008      	beq.n	8008b38 <memmove+0x28>
 8008b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b2e:	e7f8      	b.n	8008b22 <memmove+0x12>
 8008b30:	4402      	add	r2, r0
 8008b32:	4601      	mov	r1, r0
 8008b34:	428a      	cmp	r2, r1
 8008b36:	d100      	bne.n	8008b3a <memmove+0x2a>
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b42:	e7f7      	b.n	8008b34 <memmove+0x24>

08008b44 <memcpy>:
 8008b44:	440a      	add	r2, r1
 8008b46:	4291      	cmp	r1, r2
 8008b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b4c:	d100      	bne.n	8008b50 <memcpy+0xc>
 8008b4e:	4770      	bx	lr
 8008b50:	b510      	push	{r4, lr}
 8008b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b5a:	4291      	cmp	r1, r2
 8008b5c:	d1f9      	bne.n	8008b52 <memcpy+0xe>
 8008b5e:	bd10      	pop	{r4, pc}

08008b60 <_realloc_r>:
 8008b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b64:	4680      	mov	r8, r0
 8008b66:	4615      	mov	r5, r2
 8008b68:	460c      	mov	r4, r1
 8008b6a:	b921      	cbnz	r1, 8008b76 <_realloc_r+0x16>
 8008b6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b70:	4611      	mov	r1, r2
 8008b72:	f7ff bbad 	b.w	80082d0 <_malloc_r>
 8008b76:	b92a      	cbnz	r2, 8008b84 <_realloc_r+0x24>
 8008b78:	f7ff fc9a 	bl	80084b0 <_free_r>
 8008b7c:	2400      	movs	r4, #0
 8008b7e:	4620      	mov	r0, r4
 8008b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b84:	f000 f81a 	bl	8008bbc <_malloc_usable_size_r>
 8008b88:	4285      	cmp	r5, r0
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	d802      	bhi.n	8008b94 <_realloc_r+0x34>
 8008b8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b92:	d8f4      	bhi.n	8008b7e <_realloc_r+0x1e>
 8008b94:	4629      	mov	r1, r5
 8008b96:	4640      	mov	r0, r8
 8008b98:	f7ff fb9a 	bl	80082d0 <_malloc_r>
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d0ec      	beq.n	8008b7c <_realloc_r+0x1c>
 8008ba2:	42b5      	cmp	r5, r6
 8008ba4:	462a      	mov	r2, r5
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	bf28      	it	cs
 8008baa:	4632      	movcs	r2, r6
 8008bac:	f7ff ffca 	bl	8008b44 <memcpy>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f7ff fc7c 	bl	80084b0 <_free_r>
 8008bb8:	463c      	mov	r4, r7
 8008bba:	e7e0      	b.n	8008b7e <_realloc_r+0x1e>

08008bbc <_malloc_usable_size_r>:
 8008bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc0:	1f18      	subs	r0, r3, #4
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	bfbc      	itt	lt
 8008bc6:	580b      	ldrlt	r3, [r1, r0]
 8008bc8:	18c0      	addlt	r0, r0, r3
 8008bca:	4770      	bx	lr

08008bcc <_init>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr

08008bd8 <_fini>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr
