
0703_lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f70  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028bc  08006150  08006150  00007150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a0c  08008a0c  0000a090  2**0
                  CONTENTS
  4 .ARM          00000008  08008a0c  08008a0c  00009a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a14  08008a14  0000a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008a14  08008a14  00009a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008a1c  08008a1c  00009a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008a24  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000090  08008ab4  0000a090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08008ab4  0000a378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023421  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004029  00000000  00000000  0002d4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00031510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000217c  00000000  00000000  00032b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b18d  00000000  00000000  00034c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9ca  00000000  00000000  0005fe19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100be4  00000000  00000000  0007b7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c3c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006148  00000000  00000000  0017c40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00182554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000d36c  00000000  00000000  001825a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000090 	.word	0x20000090
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006138 	.word	0x08006138

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000094 	.word	0x20000094
 800021c:	08006138 	.word	0x08006138

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_ldivmod>:
 80002d0:	b97b      	cbnz	r3, 80002f2 <__aeabi_ldivmod+0x22>
 80002d2:	b972      	cbnz	r2, 80002f2 <__aeabi_ldivmod+0x22>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bfbe      	ittt	lt
 80002d8:	2000      	movlt	r0, #0
 80002da:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002de:	e006      	blt.n	80002ee <__aeabi_ldivmod+0x1e>
 80002e0:	bf08      	it	eq
 80002e2:	2800      	cmpeq	r0, #0
 80002e4:	bf1c      	itt	ne
 80002e6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ea:	f04f 30ff 	movne.w	r0, #4294967295
 80002ee:	f000 b99d 	b.w	800062c <__aeabi_idiv0>
 80002f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002fa:	2900      	cmp	r1, #0
 80002fc:	db09      	blt.n	8000312 <__aeabi_ldivmod+0x42>
 80002fe:	2b00      	cmp	r3, #0
 8000300:	db1a      	blt.n	8000338 <__aeabi_ldivmod+0x68>
 8000302:	f000 f835 	bl	8000370 <__udivmoddi4>
 8000306:	f8dd e004 	ldr.w	lr, [sp, #4]
 800030a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030e:	b004      	add	sp, #16
 8000310:	4770      	bx	lr
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	2b00      	cmp	r3, #0
 800031a:	db1b      	blt.n	8000354 <__aeabi_ldivmod+0x84>
 800031c:	f000 f828 	bl	8000370 <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	4252      	negs	r2, r2
 8000332:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000336:	4770      	bx	lr
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	f000 f817 	bl	8000370 <__udivmoddi4>
 8000342:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034a:	b004      	add	sp, #16
 800034c:	4240      	negs	r0, r0
 800034e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000352:	4770      	bx	lr
 8000354:	4252      	negs	r2, r2
 8000356:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035a:	f000 f809 	bl	8000370 <__udivmoddi4>
 800035e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000366:	b004      	add	sp, #16
 8000368:	4252      	negs	r2, r2
 800036a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <_ZN12Adafruit_GFX9setCursorEss>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
 800063c:	4613      	mov	r3, r2
 800063e:	803b      	strh	r3, [r7, #0]
    cursor_x = x;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	887a      	ldrh	r2, [r7, #2]
 8000644:	821a      	strh	r2, [r3, #16]
    cursor_y = y;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	883a      	ldrh	r2, [r7, #0]
 800064a:	825a      	strh	r2, [r3, #18]
  }
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <_ZN12Adafruit_GFX12setTextColorEtt>:
    @brief   Set text font color with custom background color
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
 8000664:	4613      	mov	r3, r2
 8000666:	803b      	strh	r3, [r7, #0]
    textcolor = c;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	887a      	ldrh	r2, [r7, #2]
 800066c:	829a      	strh	r2, [r3, #20]
    textbgcolor = bg;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	883a      	ldrh	r2, [r7, #0]
 8000672:	82da      	strh	r2, [r3, #22]
  }
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <_ZN15Adafruit_SPITFTD1Ev>:

  Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback);

  // DESTRUCTOR ----------------------------------------------------------

  ~Adafruit_SPITFT(){};
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <_ZN15Adafruit_SPITFTD1Ev+0x1c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	080088a0 	.word	0x080088a0

080006a0 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
//#include "Fonts/FreeSerif12pt7b.h"

using SpiCmd = Adafruit_SPITFT::SpiCmd;

void lcd_callback(SpiCmd cmd, uint8_t* pdata, size_t size)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  auto spi = hspi1.Instance;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x80>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	617b      	str	r3, [r7, #20]
  switch (cmd)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b07      	cmp	r3, #7
 80006b6:	d82e      	bhi.n	8000716 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
 80006b8:	a201      	add	r2, pc, #4	@ (adr r2, 80006c0 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x20>)
 80006ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006be:	bf00      	nop
 80006c0:	08000715 	.word	0x08000715
 80006c4:	08000715 	.word	0x08000715
 80006c8:	08000715 	.word	0x08000715
 80006cc:	08000715 	.word	0x08000715
 80006d0:	080006e1 	.word	0x080006e1
 80006d4:	080006ef 	.word	0x080006ef
 80006d8:	080006fd 	.word	0x080006fd
 80006dc:	0800070d 	.word	0x0800070d

  case SpiCmd::cs_high:
    break;

  case SpiCmd::dc_low:
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e6:	480f      	ldr	r0, [pc, #60]	@ (8000724 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x84>)
 80006e8:	f002 f8e4 	bl	80028b4 <HAL_GPIO_WritePin>
    break;
 80006ec:	e013      	b.n	8000716 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>

  case SpiCmd::dc_high:
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006f4:	480b      	ldr	r0, [pc, #44]	@ (8000724 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x84>)
 80006f6:	f002 f8dd 	bl	80028b4 <HAL_GPIO_WritePin>
    break;
 80006fa:	e00c      	b.n	8000716 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>

  case SpiCmd::transmit:
    HAL_SPI_Transmit(&hspi1, pdata, size, size);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	68b9      	ldr	r1, [r7, #8]
 8000704:	4806      	ldr	r0, [pc, #24]	@ (8000720 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x80>)
 8000706:	f002 ff42 	bl	800358e <HAL_SPI_Transmit>
//    }
//    while (LL_SPI_IsActiveFlag_BSY(spi))
//      ;
//    LL_SPI_Disable(spi);

    break;
 800070a:	e004      	b.n	8000716 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
//      ;
//    LL_SPI_Disable(spi);
//    break;

  case SpiCmd::delay:
    HAL_Delay(size);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f001 fc4b 	bl	8001fa8 <HAL_Delay>
    break;
 8000712:	e000      	b.n	8000716 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
    break;
 8000714:	bf00      	nop
  }
}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000e8 	.word	0x200000e8
 8000724:	48000800 	.word	0x48000800

08000728 <setup>:

Adafruit_ST7789 lcd(240, 320, lcd_callback);

void setup()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af02      	add	r7, sp, #8
  HAL_Delay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000732:	f001 fc39 	bl	8001fa8 <HAL_Delay>
  lcd.init(240, 320);
 8000736:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800073a:	21f0      	movs	r1, #240	@ 0xf0
 800073c:	4848      	ldr	r0, [pc, #288]	@ (8000860 <setup+0x138>)
 800073e:	f004 fe75 	bl	800542c <_ZN15Adafruit_ST77894initEtt>
  lcd.setRotation(1);
 8000742:	2101      	movs	r1, #1
 8000744:	4846      	ldr	r0, [pc, #280]	@ (8000860 <setup+0x138>)
 8000746:	f004 fe1b 	bl	8005380 <_ZN15Adafruit_ST778911setRotationEh>
  lcd.fillScreen(ST77XX_BLACK);
 800074a:	2100      	movs	r1, #0
 800074c:	4844      	ldr	r0, [pc, #272]	@ (8000860 <setup+0x138>)
 800074e:	f003 ff1d 	bl	800458c <_ZN12Adafruit_GFX10fillScreenEt>
  lcd_show_picture(0, 0, 50, 75, gImage_elec);
 8000752:	4b44      	ldr	r3, [pc, #272]	@ (8000864 <setup+0x13c>)
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	234b      	movs	r3, #75	@ 0x4b
 8000758:	2232      	movs	r2, #50	@ 0x32
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f000 f893 	bl	8000888 <lcd_show_picture>
  lcd.setCursor(115, 5);
 8000762:	2205      	movs	r2, #5
 8000764:	2173      	movs	r1, #115	@ 0x73
 8000766:	483e      	ldr	r0, [pc, #248]	@ (8000860 <setup+0x138>)
 8000768:	f7ff ff62 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 800076c:	2200      	movs	r2, #0
 800076e:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000772:	483b      	ldr	r0, [pc, #236]	@ (8000860 <setup+0x138>)
 8000774:	f7ff ff70 	bl	8000658 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.setTextSize(2);
 8000778:	2102      	movs	r1, #2
 800077a:	4839      	ldr	r0, [pc, #228]	@ (8000860 <setup+0x138>)
 800077c:	f004 f9fe 	bl	8004b7c <_ZN12Adafruit_GFX11setTextSizeEh>
  lcd.printf("0.BASIC\n");
 8000780:	4939      	ldr	r1, [pc, #228]	@ (8000868 <setup+0x140>)
 8000782:	4837      	ldr	r0, [pc, #220]	@ (8000860 <setup+0x138>)
 8000784:	f004 ffa0 	bl	80056c8 <_ZN5Print6printfEPKcz>
  lcd_show_picture(101, 25, 12, 20, MenuCursor16x16);
 8000788:	4b38      	ldr	r3, [pc, #224]	@ (800086c <setup+0x144>)
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2314      	movs	r3, #20
 800078e:	220c      	movs	r2, #12
 8000790:	2119      	movs	r1, #25
 8000792:	2065      	movs	r0, #101	@ 0x65
 8000794:	f000 f878 	bl	8000888 <lcd_show_picture>
  lcd.setCursor(115 , 25);
 8000798:	2219      	movs	r2, #25
 800079a:	2173      	movs	r1, #115	@ 0x73
 800079c:	4830      	ldr	r0, [pc, #192]	@ (8000860 <setup+0x138>)
 800079e:	f7ff ff47 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80007a8:	482d      	ldr	r0, [pc, #180]	@ (8000860 <setup+0x138>)
 80007aa:	f7ff ff55 	bl	8000658 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("1.AMPL\n");
 80007ae:	4930      	ldr	r1, [pc, #192]	@ (8000870 <setup+0x148>)
 80007b0:	482b      	ldr	r0, [pc, #172]	@ (8000860 <setup+0x138>)
 80007b2:	f004 ff89 	bl	80056c8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 45);
 80007b6:	222d      	movs	r2, #45	@ 0x2d
 80007b8:	2173      	movs	r1, #115	@ 0x73
 80007ba:	4829      	ldr	r0, [pc, #164]	@ (8000860 <setup+0x138>)
 80007bc:	f7ff ff38 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80007c6:	4826      	ldr	r0, [pc, #152]	@ (8000860 <setup+0x138>)
 80007c8:	f7ff ff46 	bl	8000658 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("2.MODULATION\n");
 80007cc:	4929      	ldr	r1, [pc, #164]	@ (8000874 <setup+0x14c>)
 80007ce:	4824      	ldr	r0, [pc, #144]	@ (8000860 <setup+0x138>)
 80007d0:	f004 ff7a 	bl	80056c8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 65);
 80007d4:	2241      	movs	r2, #65	@ 0x41
 80007d6:	2173      	movs	r1, #115	@ 0x73
 80007d8:	4821      	ldr	r0, [pc, #132]	@ (8000860 <setup+0x138>)
 80007da:	f7ff ff29 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 80007de:	2200      	movs	r2, #0
 80007e0:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80007e4:	481e      	ldr	r0, [pc, #120]	@ (8000860 <setup+0x138>)
 80007e6:	f7ff ff37 	bl	8000658 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("3.DELAY\n");
 80007ea:	4923      	ldr	r1, [pc, #140]	@ (8000878 <setup+0x150>)
 80007ec:	481c      	ldr	r0, [pc, #112]	@ (8000860 <setup+0x138>)
 80007ee:	f004 ff6b 	bl	80056c8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 85);
 80007f2:	2255      	movs	r2, #85	@ 0x55
 80007f4:	2173      	movs	r1, #115	@ 0x73
 80007f6:	481a      	ldr	r0, [pc, #104]	@ (8000860 <setup+0x138>)
 80007f8:	f7ff ff1a 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000802:	4817      	ldr	r0, [pc, #92]	@ (8000860 <setup+0x138>)
 8000804:	f7ff ff28 	bl	8000658 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("4.ATTENUATION\n");
 8000808:	491c      	ldr	r1, [pc, #112]	@ (800087c <setup+0x154>)
 800080a:	4815      	ldr	r0, [pc, #84]	@ (8000860 <setup+0x138>)
 800080c:	f004 ff5c 	bl	80056c8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 105);
 8000810:	2269      	movs	r2, #105	@ 0x69
 8000812:	2173      	movs	r1, #115	@ 0x73
 8000814:	4812      	ldr	r0, [pc, #72]	@ (8000860 <setup+0x138>)
 8000816:	f7ff ff0b 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 800081a:	2200      	movs	r2, #0
 800081c:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000820:	480f      	ldr	r0, [pc, #60]	@ (8000860 <setup+0x138>)
 8000822:	f7ff ff19 	bl	8000658 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("5.FREQUENCY\n");
 8000826:	4916      	ldr	r1, [pc, #88]	@ (8000880 <setup+0x158>)
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <setup+0x138>)
 800082a:	f004 ff4d 	bl	80056c8 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 125);
 800082e:	227d      	movs	r2, #125	@ 0x7d
 8000830:	2173      	movs	r1, #115	@ 0x73
 8000832:	480b      	ldr	r0, [pc, #44]	@ (8000860 <setup+0x138>)
 8000834:	f7ff fefc 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8000838:	2200      	movs	r2, #0
 800083a:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800083e:	4808      	ldr	r0, [pc, #32]	@ (8000860 <setup+0x138>)
 8000840:	f7ff ff0a 	bl	8000658 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("6.INIT PHASE\n");
 8000844:	490f      	ldr	r1, [pc, #60]	@ (8000884 <setup+0x15c>)
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <setup+0x138>)
 8000848:	f004 ff3e 	bl	80056c8 <_ZN5Print6printfEPKcz>

  lcd.setTextColor(ST77XX_RED, ST77XX_BLACK);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000852:	4803      	ldr	r0, [pc, #12]	@ (8000860 <setup+0x138>)
 8000854:	f7ff ff00 	bl	8000658 <_ZN12Adafruit_GFX12setTextColorEtt>
//    lcd.drawFastHLine(i, 320-1-i, 240-2*i, ST77XX_YELLOW);
//    lcd.drawFastVLine(i, 80+i, 240-2*i, ST77XX_GREEN);
//    lcd.drawFastVLine(240-1-i, 80+i, 240-2*i, ST77XX_BLUE);
//    HAL_Delay(100);
//  }
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000ac 	.word	0x200000ac
 8000864:	08006234 	.word	0x08006234
 8000868:	08006150 	.word	0x08006150
 800086c:	08007f80 	.word	0x08007f80
 8000870:	0800615c 	.word	0x0800615c
 8000874:	08006164 	.word	0x08006164
 8000878:	08006174 	.word	0x08006174
 800087c:	08006180 	.word	0x08006180
 8000880:	08006190 	.word	0x08006190
 8000884:	080061a0 	.word	0x080061a0

08000888 <lcd_show_picture>:

void lcd_show_picture(uint16_t x, uint16_t y , uint16_t col , uint16_t row , const unsigned char * p)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	4604      	mov	r4, r0
 8000890:	4608      	mov	r0, r1
 8000892:	4611      	mov	r1, r2
 8000894:	461a      	mov	r2, r3
 8000896:	4623      	mov	r3, r4
 8000898:	80fb      	strh	r3, [r7, #6]
 800089a:	4603      	mov	r3, r0
 800089c:	80bb      	strh	r3, [r7, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	807b      	strh	r3, [r7, #2]
 80008a2:	4613      	mov	r3, r2
 80008a4:	803b      	strh	r3, [r7, #0]
	uint16_t * data = (uint16_t *) p;
 80008a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a8:	617b      	str	r3, [r7, #20]
	for (int i = y ; i < row + y ; ++i)
 80008aa:	88bb      	ldrh	r3, [r7, #4]
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	e01a      	b.n	80008e6 <lcd_show_picture+0x5e>
	{
		for ( int j = x ; j < col + x ; ++j)
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e00e      	b.n	80008d4 <lcd_show_picture+0x4c>
		{
			lcd.drawPixel(j, i, *data++);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	b219      	sxth	r1, r3
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	b218      	sxth	r0, r3
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	1c9a      	adds	r2, r3, #2
 80008c2:	617a      	str	r2, [r7, #20]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	4602      	mov	r2, r0
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <lcd_show_picture+0x74>)
 80008ca:	f004 fa71 	bl	8004db0 <_ZN15Adafruit_SPITFT9drawPixelEsst>
		for ( int j = x ; j < col + x ; ++j)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3301      	adds	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	887a      	ldrh	r2, [r7, #2]
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	4413      	add	r3, r2
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	429a      	cmp	r2, r3
 80008de:	dbea      	blt.n	80008b6 <lcd_show_picture+0x2e>
	for (int i = y ; i < row + y ; ++i)
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	3301      	adds	r3, #1
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	883a      	ldrh	r2, [r7, #0]
 80008e8:	88bb      	ldrh	r3, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dbde      	blt.n	80008b0 <lcd_show_picture+0x28>
		}
	}
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	371c      	adds	r7, #28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	200000ac 	.word	0x200000ac

08000900 <lcd_show_num>:
void lcd_show_num(int n)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	lcd.fillRect(150, 165, 230, 20, BLACK);
 8000908:	2300      	movs	r3, #0
 800090a:	9301      	str	r3, [sp, #4]
 800090c:	2314      	movs	r3, #20
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	23e6      	movs	r3, #230	@ 0xe6
 8000912:	22a5      	movs	r2, #165	@ 0xa5
 8000914:	2196      	movs	r1, #150	@ 0x96
 8000916:	480d      	ldr	r0, [pc, #52]	@ (800094c <lcd_show_num+0x4c>)
 8000918:	f004 fbea 	bl	80050f0 <_ZN15Adafruit_SPITFT8fillRectEsssst>
	lcd.setCursor(150, 165);
 800091c:	22a5      	movs	r2, #165	@ 0xa5
 800091e:	2196      	movs	r1, #150	@ 0x96
 8000920:	480a      	ldr	r0, [pc, #40]	@ (800094c <lcd_show_num+0x4c>)
 8000922:	f7ff fe85 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
	lcd.printf("   ");
 8000926:	490a      	ldr	r1, [pc, #40]	@ (8000950 <lcd_show_num+0x50>)
 8000928:	4808      	ldr	r0, [pc, #32]	@ (800094c <lcd_show_num+0x4c>)
 800092a:	f004 fecd 	bl	80056c8 <_ZN5Print6printfEPKcz>
	lcd.setCursor(150, 165);
 800092e:	22a5      	movs	r2, #165	@ 0xa5
 8000930:	2196      	movs	r1, #150	@ 0x96
 8000932:	4806      	ldr	r0, [pc, #24]	@ (800094c <lcd_show_num+0x4c>)
 8000934:	f7ff fe7c 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
	lcd.print(n);
 8000938:	220a      	movs	r2, #10
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <lcd_show_num+0x4c>)
 800093e:	f004 ff39 	bl	80057b4 <_ZN5Print5printEii>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000ac 	.word	0x200000ac
 8000950:	080061b0 	.word	0x080061b0

08000954 <lcd_show_str>:
void lcd_show_str(int16_t x, int16_t y,const char * lmf)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af02      	add	r7, sp, #8
 800095a:	4603      	mov	r3, r0
 800095c:	603a      	str	r2, [r7, #0]
 800095e:	80fb      	strh	r3, [r7, #6]
 8000960:	460b      	mov	r3, r1
 8000962:	80bb      	strh	r3, [r7, #4]
	lcd.setCursor(x, y);
 8000964:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800096c:	4619      	mov	r1, r3
 800096e:	480b      	ldr	r0, [pc, #44]	@ (800099c <lcd_show_str+0x48>)
 8000970:	f7ff fe5e 	bl	8000630 <_ZN12Adafruit_GFX9setCursorEss>
	lcd.fillRect(x, y, 230, 20, BLACK);
 8000974:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000978:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800097c:	2300      	movs	r3, #0
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	2314      	movs	r3, #20
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	23e6      	movs	r3, #230	@ 0xe6
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <lcd_show_str+0x48>)
 8000988:	f004 fbb2 	bl	80050f0 <_ZN15Adafruit_SPITFT8fillRectEsssst>
	lcd.printf(lmf);
 800098c:	6839      	ldr	r1, [r7, #0]
 800098e:	4803      	ldr	r0, [pc, #12]	@ (800099c <lcd_show_str+0x48>)
 8000990:	f004 fe9a 	bl	80056c8 <_ZN5Print6printfEPKcz>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000ac 	.word	0x200000ac

080009a0 <lcd_show_black>:
void lcd_show_black(int16_t x, int16_t y , int16_t w, int16_t h)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	4604      	mov	r4, r0
 80009a8:	4608      	mov	r0, r1
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4623      	mov	r3, r4
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	4603      	mov	r3, r0
 80009b4:	80bb      	strh	r3, [r7, #4]
 80009b6:	460b      	mov	r3, r1
 80009b8:	807b      	strh	r3, [r7, #2]
 80009ba:	4613      	mov	r3, r2
 80009bc:	803b      	strh	r3, [r7, #0]
	lcd.fillRect(x, y, w, h, BLACK);
 80009be:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80009c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009c6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80009ca:	2300      	movs	r3, #0
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	4603      	mov	r3, r0
 80009d6:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <lcd_show_black+0x44>)
 80009d8:	f004 fb8a 	bl	80050f0 <_ZN15Adafruit_SPITFT8fillRectEsssst>
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	200000ac 	.word	0x200000ac

080009e8 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA 0xF81F
#define ST77XX_YELLOW 0xFFE0
#define ST77XX_ORANGE 0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <_ZN15Adafruit_ST77xxD1Ev+0x20>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe41 	bl	8000680 <_ZN15Adafruit_SPITFTD1Ev>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08008980 	.word	0x08008980

08000a0c <_ZN15Adafruit_ST7789D1Ev>:
#define _ADAFRUIT_ST7789H_

#include "Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <_ZN15Adafruit_ST7789D1Ev+0x20>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ffe3 	bl	80009e8 <_ZN15Adafruit_ST77xxD1Ev>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08008900 	.word	0x08008900

08000a30 <_Z41__static_initialization_and_destruction_0ii>:
void loop()
{
  ;
}
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d10b      	bne.n	8000a58 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <_Z41__static_initialization_and_destruction_0ii+0x28>
Adafruit_ST7789 lcd(240, 320, lcd_callback);
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000a4c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a50:	21f0      	movs	r1, #240	@ 0xf0
 8000a52:	480a      	ldr	r0, [pc, #40]	@ (8000a7c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000a54:	f004 fcde 	bl	8005414 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d107      	bne.n	8000a6e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d102      	bne.n	8000a6e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000a6a:	f7ff ffcf 	bl	8000a0c <_ZN15Adafruit_ST7789D1Ev>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	080006a1 	.word	0x080006a1
 8000a7c:	200000ac 	.word	0x200000ac

08000a80 <_GLOBAL__sub_I__Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff ffd1 	bl	8000a30 <_Z41__static_initialization_and_destruction_0ii>
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <_GLOBAL__sub_D__Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ffc9 	bl	8000a30 <_Z41__static_initialization_and_destruction_0ii>
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <AD9959_WriteData>:
158,
126,
100};

void AD9959_WriteData(uint8_t RegisterAddress, uint8_t NumberofRegisters, uint8_t *RegisterData)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	603a      	str	r2, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	460b      	mov	r3, r1
 8000aae:	71bb      	strb	r3, [r7, #6]
	uint8_t	ControlValue = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]
	uint8_t	ValueToWrite = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73bb      	strb	r3, [r7, #14]
	uint8_t	RegisterIndex = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	737b      	strb	r3, [r7, #13]
	uint8_t	i = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	733b      	strb	r3, [r7, #12]
	ControlValue = RegisterAddress;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	73fb      	strb	r3, [r7, #15]
	SCLK_LOW;
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4839      	ldr	r0, [pc, #228]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000aca:	f001 fef3 	bl	80028b4 <HAL_GPIO_WritePin>
	CS_LOW;
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4837      	ldr	r0, [pc, #220]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000ad4:	f001 feee 	bl	80028b4 <HAL_GPIO_WritePin>
	for(i=0; i<8; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	733b      	strb	r3, [r7, #12]
 8000adc:	e01e      	b.n	8000b1c <AD9959_WriteData+0x7c>
	{
		SCLK_LOW;
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4833      	ldr	r0, [pc, #204]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000ae4:	f001 fee6 	bl	80028b4 <HAL_GPIO_WritePin>
		if(0x80 == (ControlValue & 0x80))
 8000ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	da05      	bge.n	8000afc <AD9959_WriteData+0x5c>
		SDIO0_HIGH;
 8000af0:	2201      	movs	r2, #1
 8000af2:	2104      	movs	r1, #4
 8000af4:	482e      	ldr	r0, [pc, #184]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000af6:	f001 fedd 	bl	80028b4 <HAL_GPIO_WritePin>
 8000afa:	e004      	b.n	8000b06 <AD9959_WriteData+0x66>
		else
			SDIO0_LOW;
 8000afc:	2200      	movs	r2, #0
 8000afe:	2104      	movs	r1, #4
 8000b00:	482b      	ldr	r0, [pc, #172]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000b02:	f001 fed7 	bl	80028b4 <HAL_GPIO_WritePin>
		SCLK_HIGH;
 8000b06:	2201      	movs	r2, #1
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4829      	ldr	r0, [pc, #164]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000b0c:	f001 fed2 	bl	80028b4 <HAL_GPIO_WritePin>
		ControlValue <<= 1;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<8; i++)
 8000b16:	7b3b      	ldrb	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	733b      	strb	r3, [r7, #12]
 8000b1c:	7b3b      	ldrb	r3, [r7, #12]
 8000b1e:	2b07      	cmp	r3, #7
 8000b20:	d9dd      	bls.n	8000ade <AD9959_WriteData+0x3e>
	}
	SCLK_LOW;
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	4822      	ldr	r0, [pc, #136]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000b28:	f001 fec4 	bl	80028b4 <HAL_GPIO_WritePin>
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	737b      	strb	r3, [r7, #13]
 8000b30:	e031      	b.n	8000b96 <AD9959_WriteData+0xf6>
	{
		ValueToWrite = RegisterData[RegisterIndex];
 8000b32:	7b7b      	ldrb	r3, [r7, #13]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	733b      	strb	r3, [r7, #12]
 8000b40:	e01e      	b.n	8000b80 <AD9959_WriteData+0xe0>
		{
			SCLK_LOW;
 8000b42:	2200      	movs	r2, #0
 8000b44:	2101      	movs	r1, #1
 8000b46:	481a      	ldr	r0, [pc, #104]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000b48:	f001 feb4 	bl	80028b4 <HAL_GPIO_WritePin>
			if(0x80 == (ValueToWrite & 0x80))
 8000b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da05      	bge.n	8000b60 <AD9959_WriteData+0xc0>
			SDIO0_HIGH;
 8000b54:	2201      	movs	r2, #1
 8000b56:	2104      	movs	r1, #4
 8000b58:	4815      	ldr	r0, [pc, #84]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000b5a:	f001 feab 	bl	80028b4 <HAL_GPIO_WritePin>
 8000b5e:	e004      	b.n	8000b6a <AD9959_WriteData+0xca>
			else
			SDIO0_LOW;
 8000b60:	2200      	movs	r2, #0
 8000b62:	2104      	movs	r1, #4
 8000b64:	4812      	ldr	r0, [pc, #72]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000b66:	f001 fea5 	bl	80028b4 <HAL_GPIO_WritePin>
			SCLK_HIGH;
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4810      	ldr	r0, [pc, #64]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000b70:	f001 fea0 	bl	80028b4 <HAL_GPIO_WritePin>
			ValueToWrite <<= 1;
 8000b74:	7bbb      	ldrb	r3, [r7, #14]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 8000b7a:	7b3b      	ldrb	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	733b      	strb	r3, [r7, #12]
 8000b80:	7b3b      	ldrb	r3, [r7, #12]
 8000b82:	2b07      	cmp	r3, #7
 8000b84:	d9dd      	bls.n	8000b42 <AD9959_WriteData+0xa2>
		}
		SCLK_LOW;
 8000b86:	2200      	movs	r2, #0
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000b8c:	f001 fe92 	bl	80028b4 <HAL_GPIO_WritePin>
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 8000b90:	7b7b      	ldrb	r3, [r7, #13]
 8000b92:	3301      	adds	r3, #1
 8000b94:	737b      	strb	r3, [r7, #13]
 8000b96:	7b7a      	ldrb	r2, [r7, #13]
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d3c9      	bcc.n	8000b32 <AD9959_WriteData+0x92>
	}
  CS_HIGH;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <AD9959_WriteData+0x110>)
 8000ba4:	f001 fe86 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	48000800 	.word	0x48000800
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <Write_CFTW0>:
void Write_CFTW0(uint32_t fre)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint8_t CFTW0_DATA[4] ={0x00,0x00,0x00,0x00};
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	60b9      	str	r1, [r7, #8]
	uint32_t Temp;
	Temp=(uint32_t)fre * 4294967296 / 500000000;
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	f04f 0100 	mov.w	r1, #0
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	a311      	add	r3, pc, #68	@ (adr r3, 8000c20 <Write_CFTW0+0x68>)
 8000bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bde:	f7ff fb77 	bl	80002d0 <__aeabi_ldivmod>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	4613      	mov	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
	CFTW0_DATA[3]=(uint8_t)Temp;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	72fb      	strb	r3, [r7, #11]
	CFTW0_DATA[2]=(uint8_t)(Temp>>8);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	72bb      	strb	r3, [r7, #10]
	CFTW0_DATA[1]=(uint8_t)(Temp>>16);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	727b      	strb	r3, [r7, #9]
	CFTW0_DATA[0]=(uint8_t)(Temp>>24);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	0e1b      	lsrs	r3, r3, #24
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	723b      	strb	r3, [r7, #8]
	AD9959_WriteData(0x04,4,CFTW0_DATA);//CTW0 address 0x04
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2104      	movs	r1, #4
 8000c10:	2004      	movs	r0, #4
 8000c12:	f7ff ff45 	bl	8000aa0 <AD9959_WriteData>
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	1dcd6500 	.word	0x1dcd6500
 8000c24:	00000000 	.word	0x00000000

08000c28 <AD9959_Set_Freq>:
void AD9959_Set_Freq(uint8_t Channel,uint32_t Freq)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
	uint8_t CHANNEL[1] = {0x00};
 8000c34:	2300      	movs	r3, #0
 8000c36:	733b      	strb	r3, [r7, #12]
	CHANNEL[0]=Channel;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	461a      	mov	r2, r3
 8000c42:	2101      	movs	r1, #1
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff ff2b 	bl	8000aa0 <AD9959_WriteData>
    Write_CFTW0(Freq);
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f7ff ffb4 	bl	8000bb8 <Write_CFTW0>
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <Write_ACR>:

void Write_ACR(uint16_t Ampl)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
	uint32_t A_temp=0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
	uint8_t ACR_DATA[3] = {0x00,0x00,0x00};//default Value = 0x--0000 Rest = 18.91/Iout
 8000c66:	4a10      	ldr	r2, [pc, #64]	@ (8000ca8 <Write_ACR+0x50>)
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	6812      	ldr	r2, [r2, #0]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	8019      	strh	r1, [r3, #0]
 8000c72:	3302      	adds	r3, #2
 8000c74:	0c12      	lsrs	r2, r2, #16
 8000c76:	701a      	strb	r2, [r3, #0]
    A_temp=Ampl|0x1000;
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	60fb      	str	r3, [r7, #12]
	ACR_DATA[1] = (uint8_t)(A_temp>>8); //高位数据
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	727b      	strb	r3, [r7, #9]
	ACR_DATA[2] = (uint8_t)A_temp;  //低位数据
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	72bb      	strb	r3, [r7, #10]
    AD9959_WriteData(0x06, 3, ACR_DATA); //ACR address 0x06.CHn设定幅度
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	461a      	mov	r2, r3
 8000c96:	2103      	movs	r1, #3
 8000c98:	2006      	movs	r0, #6
 8000c9a:	f7ff ff01 	bl	8000aa0 <AD9959_WriteData>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	080061b4 	.word	0x080061b4

08000cac <AD9959_Set_Ampl>:

void AD9959_Set_Ampl(uint8_t Channel, uint16_t Ampl)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	80bb      	strh	r3, [r7, #4]
	uint8_t CHANNEL[1] = {0x00};
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	733b      	strb	r3, [r7, #12]
	CHANNEL[0]=Channel;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道�??
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2101      	movs	r1, #1
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fee7 	bl	8000aa0 <AD9959_WriteData>
	Write_ACR(Ampl);							//	CHn设定幅度
 8000cd2:	88bb      	ldrh	r3, [r7, #4]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ffbf 	bl	8000c58 <Write_ACR>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <Write_CPOW0>:
void Write_CPOW0(uint16_t Phase)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	80fb      	strh	r3, [r7, #6]
	uint8_t CPOW0_data[2] = {0x00,0x00};
 8000cec:	2300      	movs	r3, #0
 8000cee:	81bb      	strh	r3, [r7, #12]
	CPOW0_data[1]=(uint8_t)Phase;
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	737b      	strb	r3, [r7, #13]
	CPOW0_data[0]=(uint8_t)(Phase>>8);
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x05,2,CPOW0_data);//CPOW0 address 0x05.CHn设定相位
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	461a      	mov	r2, r3
 8000d06:	2102      	movs	r1, #2
 8000d08:	2005      	movs	r0, #5
 8000d0a:	f7ff fec9 	bl	8000aa0 <AD9959_WriteData>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <AD9959_Set_Phase>:

void AD9959_Set_Phase(uint8_t Channel,uint16_t Phase)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	460a      	mov	r2, r1
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	4613      	mov	r3, r2
 8000d24:	80bb      	strh	r3, [r7, #4]
	uint8_t CHANNEL[1] = {0x00};
 8000d26:	2300      	movs	r3, #0
 8000d28:	733b      	strb	r3, [r7, #12]
	CHANNEL[0]=Channel;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道，
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	461a      	mov	r2, r3
 8000d34:	2101      	movs	r1, #1
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff feb2 	bl	8000aa0 <AD9959_WriteData>
	Write_CPOW0(Phase);//CHn设定相位
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ffcf 	bl	8000ce2 <Write_CPOW0>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <AD9959_Init>:

void AD9959_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  Intserve();  //IO口电平状态初始化
 8000d52:	f000 f83b 	bl	8000dcc <Intserve>
  IntReset();  //AD9959复位
 8000d56:	f000 f81d 	bl	8000d94 <IntReset>
	//初始化功能寄存器
  uint8_t FR1_DATA[3] = {0xD0,0x00,0x00};//VCO gain control[23]=1系统时钟高于255Mhz; PLL[22:18]=10100,20倍频,20*25M=500MHZ; Charge pump control = 75uA
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <AD9959_Init+0x44>)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	4611      	mov	r1, r2
 8000d62:	8019      	strh	r1, [r3, #0]
 8000d64:	3302      	adds	r3, #2
 8000d66:	0c12      	lsrs	r2, r2, #16
 8000d68:	701a      	strb	r2, [r3, #0]
  uint8_t FR2_DATA[2] = {0x00,0x00};	// 双方向扫描，即从起始值扫到结束�?�后，又从结束�?�扫到起始�??
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	803b      	strh	r3, [r7, #0]
  AD9959_WriteData(0x01,3,FR1_DATA);//写功能寄存器1
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	461a      	mov	r2, r3
 8000d72:	2103      	movs	r1, #3
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fe93 	bl	8000aa0 <AD9959_WriteData>
  AD9959_WriteData(0x02,2,FR2_DATA);
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2102      	movs	r1, #2
 8000d80:	2002      	movs	r0, #2
 8000d82:	f7ff fe8d 	bl	8000aa0 <AD9959_WriteData>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	080061b8 	.word	0x080061b8

08000d94 <IntReset>:
void IntReset()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 1<<1, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da0:	f001 fd88 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f001 f8ff 	bl	8001fa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2102      	movs	r1, #2
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db2:	f001 fd7f 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f001 f8f6 	bl	8001fa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc4:	f001 fd76 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <Intserve>:
void Intserve(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	481f      	ldr	r0, [pc, #124]	@ (8000e54 <Intserve+0x88>)
 8000dd6:	f001 fd6d 	bl	80028b4 <HAL_GPIO_WritePin>
    CS_HIGH;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2102      	movs	r1, #2
 8000dde:	481d      	ldr	r0, [pc, #116]	@ (8000e54 <Intserve+0x88>)
 8000de0:	f001 fd68 	bl	80028b4 <HAL_GPIO_WritePin>
    SCLK_LOW;
 8000de4:	2200      	movs	r2, #0
 8000de6:	2101      	movs	r1, #1
 8000de8:	481a      	ldr	r0, [pc, #104]	@ (8000e54 <Intserve+0x88>)
 8000dea:	f001 fd63 	bl	80028b4 <HAL_GPIO_WritePin>
    UPDATE_LOW;
 8000dee:	2200      	movs	r2, #0
 8000df0:	2108      	movs	r1, #8
 8000df2:	4818      	ldr	r0, [pc, #96]	@ (8000e54 <Intserve+0x88>)
 8000df4:	f001 fd5e 	bl	80028b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS0_GPIO_Port, PS0_Pin, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	4815      	ldr	r0, [pc, #84]	@ (8000e54 <Intserve+0x88>)
 8000dfe:	f001 fd59 	bl	80028b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS1_GPIO_Port, PS1_Pin, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0c:	f001 fd52 	bl	80028b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS2_GPIO_Port, PS2_Pin, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f001 fd4b 	bl	80028b4 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(PS3_GPIO_Port, PS3_Pin, 0);
    SDIO0_HIGH;
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2104      	movs	r1, #4
 8000e22:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <Intserve+0x88>)
 8000e24:	f001 fd46 	bl	80028b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO1_GPIO_Port, SDIO1_Pin, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e2e:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <Intserve+0x88>)
 8000e30:	f001 fd40 	bl	80028b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO2_GPIO_Port, SDIO2_Pin, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3e:	f001 fd39 	bl	80028b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO3_GPIO_Port, SDIO3_Pin, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4c:	f001 fd32 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	48000800 	.word	0x48000800

08000e58 <IO_Update>:
void IO_Update(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	UPDATE_LOW;
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2108      	movs	r1, #8
 8000e60:	480a      	ldr	r0, [pc, #40]	@ (8000e8c <IO_Update+0x34>)
 8000e62:	f001 fd27 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f001 f89e 	bl	8001fa8 <HAL_Delay>
	UPDATE_HIGH;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2108      	movs	r1, #8
 8000e70:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <IO_Update+0x34>)
 8000e72:	f001 fd1f 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8000e76:	2003      	movs	r0, #3
 8000e78:	f001 f896 	bl	8001fa8 <HAL_Delay>
	UPDATE_LOW;
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2108      	movs	r1, #8
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <IO_Update+0x34>)
 8000e82:	f001 fd17 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	48000800 	.word	0x48000800

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	@ 0x30
 8000e94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f001 f816 	bl	8001ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 fce9 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9e:	f000 fdf3 	bl	8001a88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea2:	f000 fdc7 	bl	8001a34 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ea6:	f000 fd2d 	bl	8001904 <MX_SPI1_Init>
  MX_TIM8_Init();
 8000eaa:	f000 fd69 	bl	8001980 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000eae:	f7ff fc3b 	bl	8000728 <setup>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000eb2:	213c      	movs	r1, #60	@ 0x3c
 8000eb4:	48b6      	ldr	r0, [pc, #728]	@ (8001190 <main+0x300>)
 8000eb6:	f002 fee9 	bl	8003c8c <HAL_TIM_Encoder_Start>
  GPIO_PinState prev = GPIO_PIN_SET;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  AD9959_Init();
 8000ec0:	f7ff ff44 	bl	8000d4c <AD9959_Init>
  AD9959_Set_Ampl(0x30, 605);
 8000ec4:	f240 215d 	movw	r1, #605	@ 0x25d
 8000ec8:	2030      	movs	r0, #48	@ 0x30
 8000eca:	f7ff feef 	bl	8000cac <AD9959_Set_Ampl>
  AD9959_Set_Phase(0x30, 0);
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2030      	movs	r0, #48	@ 0x30
 8000ed2:	f7ff ff20 	bl	8000d16 <AD9959_Set_Phase>
  AD9959_Set_Freq(0x30, freq);
 8000ed6:	4baf      	ldr	r3, [pc, #700]	@ (8001194 <main+0x304>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	2030      	movs	r0, #48	@ 0x30
 8000ede:	f7ff fea3 	bl	8000c28 <AD9959_Set_Freq>
  IO_Update();
 8000ee2:	f7ff ffb9 	bl	8000e58 <IO_Update>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int Direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);   //读取电机转动方向
 8000ee6:	4baa      	ldr	r3, [pc, #680]	@ (8001190 <main+0x300>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	2b10      	cmp	r3, #16
 8000ef2:	bf0c      	ite	eq
 8000ef4:	2301      	moveq	r3, #1
 8000ef6:	2300      	movne	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	61fb      	str	r3, [r7, #28]
	  int CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8000efc:	4ba4      	ldr	r3, [pc, #656]	@ (8001190 <main+0x300>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	623b      	str	r3, [r7, #32]
	  int counter = CaptureNumber / 4 % 7 ;
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da00      	bge.n	8000f0e <main+0x7e>
 8000f0c:	3303      	adds	r3, #3
 8000f0e:	109b      	asrs	r3, r3, #2
 8000f10:	461a      	mov	r2, r3
 8000f12:	4ba1      	ldr	r3, [pc, #644]	@ (8001198 <main+0x308>)
 8000f14:	fb83 1302 	smull	r1, r3, r3, r2
 8000f18:	4413      	add	r3, r2
 8000f1a:	1099      	asrs	r1, r3, #2
 8000f1c:	17d3      	asrs	r3, r2, #31
 8000f1e:	1ac9      	subs	r1, r1, r3
 8000f20:	460b      	mov	r3, r1
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	61bb      	str	r3, [r7, #24]

	  switch(counter)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b06      	cmp	r3, #6
 8000f2e:	f200 81ab 	bhi.w	8001288 <main+0x3f8>
 8000f32:	a201      	add	r2, pc, #4	@ (adr r2, 8000f38 <main+0xa8>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000f55 	.word	0x08000f55
 8000f3c:	08000fc7 	.word	0x08000fc7
 8000f40:	08001039 	.word	0x08001039
 8000f44:	080010ab 	.word	0x080010ab
 8000f48:	0800111d 	.word	0x0800111d
 8000f4c:	080011a5 	.word	0x080011a5
 8000f50:	08001217 	.word	0x08001217
	  {
	  case 0:
		  lcd_show_picture(101, 5 , 12, 20, MenuCursor16x16);
 8000f54:	4b91      	ldr	r3, [pc, #580]	@ (800119c <main+0x30c>)
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2314      	movs	r3, #20
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	2065      	movs	r0, #101	@ 0x65
 8000f60:	f7ff fc92 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8000f64:	4b8e      	ldr	r3, [pc, #568]	@ (80011a0 <main+0x310>)
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2314      	movs	r3, #20
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	2119      	movs	r1, #25
 8000f6e:	2065      	movs	r0, #101	@ 0x65
 8000f70:	f7ff fc8a 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8000f74:	4b8a      	ldr	r3, [pc, #552]	@ (80011a0 <main+0x310>)
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2314      	movs	r3, #20
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	212d      	movs	r1, #45	@ 0x2d
 8000f7e:	2065      	movs	r0, #101	@ 0x65
 8000f80:	f7ff fc82 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8000f84:	4b86      	ldr	r3, [pc, #536]	@ (80011a0 <main+0x310>)
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2314      	movs	r3, #20
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	2141      	movs	r1, #65	@ 0x41
 8000f8e:	2065      	movs	r0, #101	@ 0x65
 8000f90:	f7ff fc7a 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8000f94:	4b82      	ldr	r3, [pc, #520]	@ (80011a0 <main+0x310>)
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2314      	movs	r3, #20
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	2155      	movs	r1, #85	@ 0x55
 8000f9e:	2065      	movs	r0, #101	@ 0x65
 8000fa0:	f7ff fc72 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8000fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80011a0 <main+0x310>)
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2314      	movs	r3, #20
 8000faa:	220c      	movs	r2, #12
 8000fac:	2169      	movs	r1, #105	@ 0x69
 8000fae:	2065      	movs	r0, #101	@ 0x65
 8000fb0:	f7ff fc6a 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8000fb4:	4b7a      	ldr	r3, [pc, #488]	@ (80011a0 <main+0x310>)
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2314      	movs	r3, #20
 8000fba:	220c      	movs	r2, #12
 8000fbc:	217d      	movs	r1, #125	@ 0x7d
 8000fbe:	2065      	movs	r0, #101	@ 0x65
 8000fc0:	f7ff fc62 	bl	8000888 <lcd_show_picture>
		  break;
 8000fc4:	e160      	b.n	8001288 <main+0x3f8>
	  case 1:
		  lcd_show_picture(101, 25 , 12, 20, MenuCursor16x16);
 8000fc6:	4b75      	ldr	r3, [pc, #468]	@ (800119c <main+0x30c>)
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2314      	movs	r3, #20
 8000fcc:	220c      	movs	r2, #12
 8000fce:	2119      	movs	r1, #25
 8000fd0:	2065      	movs	r0, #101	@ 0x65
 8000fd2:	f7ff fc59 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8000fd6:	4b72      	ldr	r3, [pc, #456]	@ (80011a0 <main+0x310>)
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2314      	movs	r3, #20
 8000fdc:	220c      	movs	r2, #12
 8000fde:	2105      	movs	r1, #5
 8000fe0:	2065      	movs	r0, #101	@ 0x65
 8000fe2:	f7ff fc51 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8000fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80011a0 <main+0x310>)
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2314      	movs	r3, #20
 8000fec:	220c      	movs	r2, #12
 8000fee:	212d      	movs	r1, #45	@ 0x2d
 8000ff0:	2065      	movs	r0, #101	@ 0x65
 8000ff2:	f7ff fc49 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8000ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80011a0 <main+0x310>)
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2314      	movs	r3, #20
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	2141      	movs	r1, #65	@ 0x41
 8001000:	2065      	movs	r0, #101	@ 0x65
 8001002:	f7ff fc41 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001006:	4b66      	ldr	r3, [pc, #408]	@ (80011a0 <main+0x310>)
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2314      	movs	r3, #20
 800100c:	220c      	movs	r2, #12
 800100e:	2155      	movs	r1, #85	@ 0x55
 8001010:	2065      	movs	r0, #101	@ 0x65
 8001012:	f7ff fc39 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001016:	4b62      	ldr	r3, [pc, #392]	@ (80011a0 <main+0x310>)
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2314      	movs	r3, #20
 800101c:	220c      	movs	r2, #12
 800101e:	2169      	movs	r1, #105	@ 0x69
 8001020:	2065      	movs	r0, #101	@ 0x65
 8001022:	f7ff fc31 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001026:	4b5e      	ldr	r3, [pc, #376]	@ (80011a0 <main+0x310>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2314      	movs	r3, #20
 800102c:	220c      	movs	r2, #12
 800102e:	217d      	movs	r1, #125	@ 0x7d
 8001030:	2065      	movs	r0, #101	@ 0x65
 8001032:	f7ff fc29 	bl	8000888 <lcd_show_picture>
		  break;
 8001036:	e127      	b.n	8001288 <main+0x3f8>
	  case 2:
		  lcd_show_picture(101, 45 , 12, 20, MenuCursor16x16);
 8001038:	4b58      	ldr	r3, [pc, #352]	@ (800119c <main+0x30c>)
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2314      	movs	r3, #20
 800103e:	220c      	movs	r2, #12
 8001040:	212d      	movs	r1, #45	@ 0x2d
 8001042:	2065      	movs	r0, #101	@ 0x65
 8001044:	f7ff fc20 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001048:	4b55      	ldr	r3, [pc, #340]	@ (80011a0 <main+0x310>)
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2314      	movs	r3, #20
 800104e:	220c      	movs	r2, #12
 8001050:	2119      	movs	r1, #25
 8001052:	2065      	movs	r0, #101	@ 0x65
 8001054:	f7ff fc18 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001058:	4b51      	ldr	r3, [pc, #324]	@ (80011a0 <main+0x310>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2314      	movs	r3, #20
 800105e:	220c      	movs	r2, #12
 8001060:	2105      	movs	r1, #5
 8001062:	2065      	movs	r0, #101	@ 0x65
 8001064:	f7ff fc10 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001068:	4b4d      	ldr	r3, [pc, #308]	@ (80011a0 <main+0x310>)
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2314      	movs	r3, #20
 800106e:	220c      	movs	r2, #12
 8001070:	2141      	movs	r1, #65	@ 0x41
 8001072:	2065      	movs	r0, #101	@ 0x65
 8001074:	f7ff fc08 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001078:	4b49      	ldr	r3, [pc, #292]	@ (80011a0 <main+0x310>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2314      	movs	r3, #20
 800107e:	220c      	movs	r2, #12
 8001080:	2155      	movs	r1, #85	@ 0x55
 8001082:	2065      	movs	r0, #101	@ 0x65
 8001084:	f7ff fc00 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001088:	4b45      	ldr	r3, [pc, #276]	@ (80011a0 <main+0x310>)
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2314      	movs	r3, #20
 800108e:	220c      	movs	r2, #12
 8001090:	2169      	movs	r1, #105	@ 0x69
 8001092:	2065      	movs	r0, #101	@ 0x65
 8001094:	f7ff fbf8 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001098:	4b41      	ldr	r3, [pc, #260]	@ (80011a0 <main+0x310>)
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2314      	movs	r3, #20
 800109e:	220c      	movs	r2, #12
 80010a0:	217d      	movs	r1, #125	@ 0x7d
 80010a2:	2065      	movs	r0, #101	@ 0x65
 80010a4:	f7ff fbf0 	bl	8000888 <lcd_show_picture>
		  break;
 80010a8:	e0ee      	b.n	8001288 <main+0x3f8>
	  case 3:
		  lcd_show_picture(101, 65 , 12, 20, MenuCursor16x16);
 80010aa:	4b3c      	ldr	r3, [pc, #240]	@ (800119c <main+0x30c>)
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2314      	movs	r3, #20
 80010b0:	220c      	movs	r2, #12
 80010b2:	2141      	movs	r1, #65	@ 0x41
 80010b4:	2065      	movs	r0, #101	@ 0x65
 80010b6:	f7ff fbe7 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 80010ba:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <main+0x310>)
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2314      	movs	r3, #20
 80010c0:	220c      	movs	r2, #12
 80010c2:	2119      	movs	r1, #25
 80010c4:	2065      	movs	r0, #101	@ 0x65
 80010c6:	f7ff fbdf 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 80010ca:	4b35      	ldr	r3, [pc, #212]	@ (80011a0 <main+0x310>)
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2314      	movs	r3, #20
 80010d0:	220c      	movs	r2, #12
 80010d2:	212d      	movs	r1, #45	@ 0x2d
 80010d4:	2065      	movs	r0, #101	@ 0x65
 80010d6:	f7ff fbd7 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 80010da:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <main+0x310>)
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2314      	movs	r3, #20
 80010e0:	220c      	movs	r2, #12
 80010e2:	2105      	movs	r1, #5
 80010e4:	2065      	movs	r0, #101	@ 0x65
 80010e6:	f7ff fbcf 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 80010ea:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <main+0x310>)
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2314      	movs	r3, #20
 80010f0:	220c      	movs	r2, #12
 80010f2:	2155      	movs	r1, #85	@ 0x55
 80010f4:	2065      	movs	r0, #101	@ 0x65
 80010f6:	f7ff fbc7 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <main+0x310>)
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2314      	movs	r3, #20
 8001100:	220c      	movs	r2, #12
 8001102:	2169      	movs	r1, #105	@ 0x69
 8001104:	2065      	movs	r0, #101	@ 0x65
 8001106:	f7ff fbbf 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 800110a:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <main+0x310>)
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2314      	movs	r3, #20
 8001110:	220c      	movs	r2, #12
 8001112:	217d      	movs	r1, #125	@ 0x7d
 8001114:	2065      	movs	r0, #101	@ 0x65
 8001116:	f7ff fbb7 	bl	8000888 <lcd_show_picture>
		  break;
 800111a:	e0b5      	b.n	8001288 <main+0x3f8>
	  case 4:
		  lcd_show_picture(101, 85 , 12, 20, MenuCursor16x16);
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <main+0x30c>)
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2314      	movs	r3, #20
 8001122:	220c      	movs	r2, #12
 8001124:	2155      	movs	r1, #85	@ 0x55
 8001126:	2065      	movs	r0, #101	@ 0x65
 8001128:	f7ff fbae 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 800112c:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <main+0x310>)
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2314      	movs	r3, #20
 8001132:	220c      	movs	r2, #12
 8001134:	2119      	movs	r1, #25
 8001136:	2065      	movs	r0, #101	@ 0x65
 8001138:	f7ff fba6 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 800113c:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <main+0x310>)
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2314      	movs	r3, #20
 8001142:	220c      	movs	r2, #12
 8001144:	212d      	movs	r1, #45	@ 0x2d
 8001146:	2065      	movs	r0, #101	@ 0x65
 8001148:	f7ff fb9e 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <main+0x310>)
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2314      	movs	r3, #20
 8001152:	220c      	movs	r2, #12
 8001154:	2141      	movs	r1, #65	@ 0x41
 8001156:	2065      	movs	r0, #101	@ 0x65
 8001158:	f7ff fb96 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 800115c:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <main+0x310>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2314      	movs	r3, #20
 8001162:	220c      	movs	r2, #12
 8001164:	2105      	movs	r1, #5
 8001166:	2065      	movs	r0, #101	@ 0x65
 8001168:	f7ff fb8e 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <main+0x310>)
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2314      	movs	r3, #20
 8001172:	220c      	movs	r2, #12
 8001174:	2169      	movs	r1, #105	@ 0x69
 8001176:	2065      	movs	r0, #101	@ 0x65
 8001178:	f7ff fb86 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <main+0x310>)
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2314      	movs	r3, #20
 8001182:	220c      	movs	r2, #12
 8001184:	217d      	movs	r1, #125	@ 0x7d
 8001186:	2065      	movs	r0, #101	@ 0x65
 8001188:	f7ff fb7e 	bl	8000888 <lcd_show_picture>
		  break;
 800118c:	e07c      	b.n	8001288 <main+0x3f8>
 800118e:	bf00      	nop
 8001190:	200001ac 	.word	0x200001ac
 8001194:	20000000 	.word	0x20000000
 8001198:	92492493 	.word	0x92492493
 800119c:	08007f80 	.word	0x08007f80
 80011a0:	08008160 	.word	0x08008160
	  case 5:
		  lcd_show_picture(101, 105 , 12, 20, MenuCursor16x16);
 80011a4:	4baa      	ldr	r3, [pc, #680]	@ (8001450 <main+0x5c0>)
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2314      	movs	r3, #20
 80011aa:	220c      	movs	r2, #12
 80011ac:	2169      	movs	r1, #105	@ 0x69
 80011ae:	2065      	movs	r0, #101	@ 0x65
 80011b0:	f7ff fb6a 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 80011b4:	4ba7      	ldr	r3, [pc, #668]	@ (8001454 <main+0x5c4>)
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2314      	movs	r3, #20
 80011ba:	220c      	movs	r2, #12
 80011bc:	2119      	movs	r1, #25
 80011be:	2065      	movs	r0, #101	@ 0x65
 80011c0:	f7ff fb62 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 80011c4:	4ba3      	ldr	r3, [pc, #652]	@ (8001454 <main+0x5c4>)
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2314      	movs	r3, #20
 80011ca:	220c      	movs	r2, #12
 80011cc:	212d      	movs	r1, #45	@ 0x2d
 80011ce:	2065      	movs	r0, #101	@ 0x65
 80011d0:	f7ff fb5a 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 80011d4:	4b9f      	ldr	r3, [pc, #636]	@ (8001454 <main+0x5c4>)
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2314      	movs	r3, #20
 80011da:	220c      	movs	r2, #12
 80011dc:	2141      	movs	r1, #65	@ 0x41
 80011de:	2065      	movs	r0, #101	@ 0x65
 80011e0:	f7ff fb52 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 80011e4:	4b9b      	ldr	r3, [pc, #620]	@ (8001454 <main+0x5c4>)
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2314      	movs	r3, #20
 80011ea:	220c      	movs	r2, #12
 80011ec:	2155      	movs	r1, #85	@ 0x55
 80011ee:	2065      	movs	r0, #101	@ 0x65
 80011f0:	f7ff fb4a 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 80011f4:	4b97      	ldr	r3, [pc, #604]	@ (8001454 <main+0x5c4>)
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2314      	movs	r3, #20
 80011fa:	220c      	movs	r2, #12
 80011fc:	2105      	movs	r1, #5
 80011fe:	2065      	movs	r0, #101	@ 0x65
 8001200:	f7ff fb42 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001204:	4b93      	ldr	r3, [pc, #588]	@ (8001454 <main+0x5c4>)
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2314      	movs	r3, #20
 800120a:	220c      	movs	r2, #12
 800120c:	217d      	movs	r1, #125	@ 0x7d
 800120e:	2065      	movs	r0, #101	@ 0x65
 8001210:	f7ff fb3a 	bl	8000888 <lcd_show_picture>
		  break;
 8001214:	e038      	b.n	8001288 <main+0x3f8>
	  case 6:
		  lcd_show_picture(101, 125 , 12, 20, MenuCursor16x16);
 8001216:	4b8e      	ldr	r3, [pc, #568]	@ (8001450 <main+0x5c0>)
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2314      	movs	r3, #20
 800121c:	220c      	movs	r2, #12
 800121e:	217d      	movs	r1, #125	@ 0x7d
 8001220:	2065      	movs	r0, #101	@ 0x65
 8001222:	f7ff fb31 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001226:	4b8b      	ldr	r3, [pc, #556]	@ (8001454 <main+0x5c4>)
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2314      	movs	r3, #20
 800122c:	220c      	movs	r2, #12
 800122e:	2119      	movs	r1, #25
 8001230:	2065      	movs	r0, #101	@ 0x65
 8001232:	f7ff fb29 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001236:	4b87      	ldr	r3, [pc, #540]	@ (8001454 <main+0x5c4>)
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2314      	movs	r3, #20
 800123c:	220c      	movs	r2, #12
 800123e:	212d      	movs	r1, #45	@ 0x2d
 8001240:	2065      	movs	r0, #101	@ 0x65
 8001242:	f7ff fb21 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001246:	4b83      	ldr	r3, [pc, #524]	@ (8001454 <main+0x5c4>)
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2314      	movs	r3, #20
 800124c:	220c      	movs	r2, #12
 800124e:	2141      	movs	r1, #65	@ 0x41
 8001250:	2065      	movs	r0, #101	@ 0x65
 8001252:	f7ff fb19 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001256:	4b7f      	ldr	r3, [pc, #508]	@ (8001454 <main+0x5c4>)
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2314      	movs	r3, #20
 800125c:	220c      	movs	r2, #12
 800125e:	2155      	movs	r1, #85	@ 0x55
 8001260:	2065      	movs	r0, #101	@ 0x65
 8001262:	f7ff fb11 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001266:	4b7b      	ldr	r3, [pc, #492]	@ (8001454 <main+0x5c4>)
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2314      	movs	r3, #20
 800126c:	220c      	movs	r2, #12
 800126e:	2169      	movs	r1, #105	@ 0x69
 8001270:	2065      	movs	r0, #101	@ 0x65
 8001272:	f7ff fb09 	bl	8000888 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001276:	4b77      	ldr	r3, [pc, #476]	@ (8001454 <main+0x5c4>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2314      	movs	r3, #20
 800127c:	220c      	movs	r2, #12
 800127e:	2105      	movs	r1, #5
 8001280:	2065      	movs	r0, #101	@ 0x65
 8001282:	f7ff fb01 	bl	8000888 <lcd_show_picture>
		  break;
 8001286:	bf00      	nop
	  }
	  GPIO_PinState curr = HAL_GPIO_ReadPin(GPIOC, 1<<13);
 8001288:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128c:	4872      	ldr	r0, [pc, #456]	@ (8001458 <main+0x5c8>)
 800128e:	f001 faf9 	bl	8002884 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	75fb      	strb	r3, [r7, #23]
	  if (prev && !curr)
 8001296:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 82d0 	beq.w	8001840 <main+0x9b0>
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 82cc 	bne.w	8001840 <main+0x9b0>
	  {
		  switch(counter)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	f200 82b9 	bhi.w	8001822 <main+0x992>
 80012b0:	a201      	add	r2, pc, #4	@ (adr r2, 80012b8 <main+0x428>)
 80012b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b6:	bf00      	nop
 80012b8:	080012d5 	.word	0x080012d5
 80012bc:	08001357 	.word	0x08001357
 80012c0:	080013cb 	.word	0x080013cb
 80012c4:	08001499 	.word	0x08001499
 80012c8:	080015cd 	.word	0x080015cd
 80012cc:	0800168d 	.word	0x0800168d
 80012d0:	0800177d 	.word	0x0800177d
		  {
		  case 0:
			  lcd_show_str(100, 145,"MODE:\n");
 80012d4:	4a61      	ldr	r2, [pc, #388]	@ (800145c <main+0x5cc>)
 80012d6:	2191      	movs	r1, #145	@ 0x91
 80012d8:	2064      	movs	r0, #100	@ 0x64
 80012da:	f7ff fb3b 	bl	8000954 <lcd_show_str>
			  while(1)
			  {
				  mode = abs((CaptureNumber) / 4 % 2 + 1);
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da00      	bge.n	80012e6 <main+0x456>
 80012e4:	3303      	adds	r3, #3
 80012e6:	109b      	asrs	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	bfb8      	it	lt
 80012f0:	425b      	neglt	r3, r3
 80012f2:	3301      	adds	r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bfb8      	it	lt
 80012f8:	425b      	neglt	r3, r3
 80012fa:	4a59      	ldr	r2, [pc, #356]	@ (8001460 <main+0x5d0>)
 80012fc:	6013      	str	r3, [r2, #0]
				  if(mode != mode_t)
 80012fe:	4b58      	ldr	r3, [pc, #352]	@ (8001460 <main+0x5d0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b58      	ldr	r3, [pc, #352]	@ (8001464 <main+0x5d4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d012      	beq.n	8001330 <main+0x4a0>
				  {
					  mode_t = mode;
 800130a:	4b55      	ldr	r3, [pc, #340]	@ (8001460 <main+0x5d0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a55      	ldr	r2, [pc, #340]	@ (8001464 <main+0x5d4>)
 8001310:	6013      	str	r3, [r2, #0]
					  if (mode < 2) lcd_show_str(101,165,"CW");
 8001312:	4b53      	ldr	r3, [pc, #332]	@ (8001460 <main+0x5d0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	dc05      	bgt.n	8001326 <main+0x496>
 800131a:	4a53      	ldr	r2, [pc, #332]	@ (8001468 <main+0x5d8>)
 800131c:	21a5      	movs	r1, #165	@ 0xa5
 800131e:	2065      	movs	r0, #101	@ 0x65
 8001320:	f7ff fb18 	bl	8000954 <lcd_show_str>
 8001324:	e004      	b.n	8001330 <main+0x4a0>
					  else lcd_show_str(101,165,"AM");
 8001326:	4a51      	ldr	r2, [pc, #324]	@ (800146c <main+0x5dc>)
 8001328:	21a5      	movs	r1, #165	@ 0xa5
 800132a:	2065      	movs	r0, #101	@ 0x65
 800132c:	f7ff fb12 	bl	8000954 <lcd_show_str>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8001330:	4b4f      	ldr	r3, [pc, #316]	@ (8001470 <main+0x5e0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001336:	b21b      	sxth	r3, r3
 8001338:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 800133a:	2104      	movs	r1, #4
 800133c:	484d      	ldr	r0, [pc, #308]	@ (8001474 <main+0x5e4>)
 800133e:	f001 faa1 	bl	8002884 <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ca      	bne.n	80012de <main+0x44e>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8001348:	4a4b      	ldr	r2, [pc, #300]	@ (8001478 <main+0x5e8>)
 800134a:	21b9      	movs	r1, #185	@ 0xb9
 800134c:	2065      	movs	r0, #101	@ 0x65
 800134e:	f7ff fb01 	bl	8000954 <lcd_show_str>
					  break;
 8001352:	bf00      	nop
				  }
			  }
			  // api

			  break;
 8001354:	e265      	b.n	8001822 <main+0x992>
		  case 1:
			  lcd_show_str(100, 145,"AMPLlll:\n");
 8001356:	4a49      	ldr	r2, [pc, #292]	@ (800147c <main+0x5ec>)
 8001358:	2191      	movs	r1, #145	@ 0x91
 800135a:	2064      	movs	r0, #100	@ 0x64
 800135c:	f7ff fafa 	bl	8000954 <lcd_show_str>
			  while (1)
			  {
				  ampl = abs((CaptureNumber) / 4 /*% 10 * 100 + 100*/);
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	2b00      	cmp	r3, #0
 8001364:	da00      	bge.n	8001368 <main+0x4d8>
 8001366:	3303      	adds	r3, #3
 8001368:	109b      	asrs	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfb8      	it	lt
 800136e:	425b      	neglt	r3, r3
 8001370:	4a43      	ldr	r2, [pc, #268]	@ (8001480 <main+0x5f0>)
 8001372:	6013      	str	r3, [r2, #0]
				  if(ampl != ampl_t)
 8001374:	4b42      	ldr	r3, [pc, #264]	@ (8001480 <main+0x5f0>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b42      	ldr	r3, [pc, #264]	@ (8001484 <main+0x5f4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d008      	beq.n	8001392 <main+0x502>
				  {
					  ampl_t = ampl;
 8001380:	4b3f      	ldr	r3, [pc, #252]	@ (8001480 <main+0x5f0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a3f      	ldr	r2, [pc, #252]	@ (8001484 <main+0x5f4>)
 8001386:	6013      	str	r3, [r2, #0]
					  lcd_show_num(ampl);
 8001388:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <main+0x5f0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fab7 	bl	8000900 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8001392:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <main+0x5e0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	b21b      	sxth	r3, r3
 800139a:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 800139c:	2104      	movs	r1, #4
 800139e:	4835      	ldr	r0, [pc, #212]	@ (8001474 <main+0x5e4>)
 80013a0:	f001 fa70 	bl	8002884 <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1da      	bne.n	8001360 <main+0x4d0>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 80013aa:	4a33      	ldr	r2, [pc, #204]	@ (8001478 <main+0x5e8>)
 80013ac:	21b9      	movs	r1, #185	@ 0xb9
 80013ae:	2065      	movs	r0, #101	@ 0x65
 80013b0:	f7ff fad0 	bl	8000954 <lcd_show_str>
					  break;
 80013b4:	bf00      	nop
				  }
			  }
			  //need api
			  AD9959_Set_Ampl(0x30,ampl);
 80013b6:	4b32      	ldr	r3, [pc, #200]	@ (8001480 <main+0x5f0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	2030      	movs	r0, #48	@ 0x30
 80013c0:	f7ff fc74 	bl	8000cac <AD9959_Set_Ampl>
			  IO_Update();
 80013c4:	f7ff fd48 	bl	8000e58 <IO_Update>
			  break;
 80013c8:	e22b      	b.n	8001822 <main+0x992>
		  case 2:
			  lcd_show_str(100, 145,"MODULATION:\n");
 80013ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001488 <main+0x5f8>)
 80013cc:	2191      	movs	r1, #145	@ 0x91
 80013ce:	2064      	movs	r0, #100	@ 0x64
 80013d0:	f7ff fac0 	bl	8000954 <lcd_show_str>
			  while (1)
			  {
				  modual = abs((((CaptureNumber) / 4 )% 7) * 10 + 30);
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da00      	bge.n	80013dc <main+0x54c>
 80013da:	3303      	adds	r3, #3
 80013dc:	109b      	asrs	r3, r3, #2
 80013de:	4619      	mov	r1, r3
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <main+0x5fc>)
 80013e2:	fb83 2301 	smull	r2, r3, r3, r1
 80013e6:	440b      	add	r3, r1
 80013e8:	109a      	asrs	r2, r3, #2
 80013ea:	17cb      	asrs	r3, r1, #31
 80013ec:	1ad2      	subs	r2, r2, r3
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	1aca      	subs	r2, r1, r3
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	331e      	adds	r3, #30
 8001400:	2b00      	cmp	r3, #0
 8001402:	bfb8      	it	lt
 8001404:	425b      	neglt	r3, r3
 8001406:	4a22      	ldr	r2, [pc, #136]	@ (8001490 <main+0x600>)
 8001408:	6013      	str	r3, [r2, #0]
				  if(modual != modual_t)
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <main+0x600>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <main+0x604>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d008      	beq.n	8001428 <main+0x598>
				  {
					  modual_t = modual;
 8001416:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <main+0x600>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <main+0x604>)
 800141c:	6013      	str	r3, [r2, #0]
					  lcd_show_num(modual);
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <main+0x600>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fa6c 	bl	8000900 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <main+0x5e0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	b21b      	sxth	r3, r3
 8001430:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8001432:	2104      	movs	r1, #4
 8001434:	480f      	ldr	r0, [pc, #60]	@ (8001474 <main+0x5e4>)
 8001436:	f001 fa25 	bl	8002884 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1c9      	bne.n	80013d4 <main+0x544>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <main+0x5e8>)
 8001442:	21b9      	movs	r1, #185	@ 0xb9
 8001444:	2065      	movs	r0, #101	@ 0x65
 8001446:	f7ff fa85 	bl	8000954 <lcd_show_str>
					  break;
 800144a:	bf00      	nop
				  }
			  }
			  //need api
			  break;
 800144c:	e1e9      	b.n	8001822 <main+0x992>
 800144e:	bf00      	nop
 8001450:	08007f80 	.word	0x08007f80
 8001454:	08008160 	.word	0x08008160
 8001458:	48000800 	.word	0x48000800
 800145c:	080061bc 	.word	0x080061bc
 8001460:	200001f8 	.word	0x200001f8
 8001464:	200001fc 	.word	0x200001fc
 8001468:	080061c4 	.word	0x080061c4
 800146c:	080061c8 	.word	0x080061c8
 8001470:	200001ac 	.word	0x200001ac
 8001474:	48000c00 	.word	0x48000c00
 8001478:	080061cc 	.word	0x080061cc
 800147c:	080061d8 	.word	0x080061d8
 8001480:	20000200 	.word	0x20000200
 8001484:	20000204 	.word	0x20000204
 8001488:	080061e4 	.word	0x080061e4
 800148c:	92492493 	.word	0x92492493
 8001490:	20000208 	.word	0x20000208
 8001494:	2000020c 	.word	0x2000020c
		  case 3:
			  lcd_show_str(100, 145,"DELAY:\n");
 8001498:	4aa2      	ldr	r2, [pc, #648]	@ (8001724 <main+0x894>)
 800149a:	2191      	movs	r1, #145	@ 0x91
 800149c:	2064      	movs	r0, #100	@ 0x64
 800149e:	f7ff fa59 	bl	8000954 <lcd_show_str>
			  while (1)
			  {
				  delay = abs((CaptureNumber) / 4 % 6 * 30 + 50);
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da00      	bge.n	80014aa <main+0x61a>
 80014a8:	3303      	adds	r3, #3
 80014aa:	109b      	asrs	r3, r3, #2
 80014ac:	4619      	mov	r1, r3
 80014ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001728 <main+0x898>)
 80014b0:	fb83 3201 	smull	r3, r2, r3, r1
 80014b4:	17cb      	asrs	r3, r1, #31
 80014b6:	1ad2      	subs	r2, r2, r3
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	1aca      	subs	r2, r1, r3
 80014c2:	4613      	mov	r3, r2
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	3332      	adds	r3, #50	@ 0x32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bfb8      	it	lt
 80014d0:	425b      	neglt	r3, r3
 80014d2:	4a96      	ldr	r2, [pc, #600]	@ (800172c <main+0x89c>)
 80014d4:	6013      	str	r3, [r2, #0]
				  if(delay != delay_t)
 80014d6:	4b95      	ldr	r3, [pc, #596]	@ (800172c <main+0x89c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b95      	ldr	r3, [pc, #596]	@ (8001730 <main+0x8a0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d008      	beq.n	80014f4 <main+0x664>
				  {
					  delay_t = delay;
 80014e2:	4b92      	ldr	r3, [pc, #584]	@ (800172c <main+0x89c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a92      	ldr	r2, [pc, #584]	@ (8001730 <main+0x8a0>)
 80014e8:	6013      	str	r3, [r2, #0]
					  lcd_show_num(delay);
 80014ea:	4b90      	ldr	r3, [pc, #576]	@ (800172c <main+0x89c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fa06 	bl	8000900 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 80014f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001734 <main+0x8a4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 80014fe:	2104      	movs	r1, #4
 8001500:	488d      	ldr	r0, [pc, #564]	@ (8001738 <main+0x8a8>)
 8001502:	f001 f9bf 	bl	8002884 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ca      	bne.n	80014a2 <main+0x612>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 800150c:	4a8b      	ldr	r2, [pc, #556]	@ (800173c <main+0x8ac>)
 800150e:	21b9      	movs	r1, #185	@ 0xb9
 8001510:	2065      	movs	r0, #101	@ 0x65
 8001512:	f7ff fa1f 	bl	8000954 <lcd_show_str>
					  break;
 8001516:	bf00      	nop
				  }
			  }
			  //need api
			  float final_phase = (float)delay * (float)1e-9 * (float)freq ;
 8001518:	4b84      	ldr	r3, [pc, #528]	@ (800172c <main+0x89c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001740 <main+0x8b0>
 8001528:	ee27 7a87 	vmul.f32	s14, s15, s14
 800152c:	4b85      	ldr	r3, [pc, #532]	@ (8001744 <main+0x8b4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153c:	edc7 7a04 	vstr	s15, [r7, #16]
			  int integer = final_phase;
 8001540:	edd7 7a04 	vldr	s15, [r7, #16]
 8001544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001548:	ee17 3a90 	vmov	r3, s15
 800154c:	60fb      	str	r3, [r7, #12]
			  float set_phase = 1 - final_phase + (float)integer + (float)phase/360;
 800154e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001552:	edd7 7a04 	vldr	s15, [r7, #16]
 8001556:	ee37 7a67 	vsub.f32	s14, s14, s15
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001568:	4b77      	ldr	r3, [pc, #476]	@ (8001748 <main+0x8b8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001574:	ed9f 6a75 	vldr	s12, [pc, #468]	@ 800174c <main+0x8bc>
 8001578:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	edc7 7a02 	vstr	s15, [r7, #8]
			  int set_phase_int = set_phase;
 8001584:	edd7 7a02 	vldr	s15, [r7, #8]
 8001588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158c:	ee17 3a90 	vmov	r3, s15
 8001590:	607b      	str	r3, [r7, #4]
			  set_phase = (set_phase - (float)set_phase_int) * 16383;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	ed97 7a02 	vldr	s14, [r7, #8]
 80015a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a4:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001750 <main+0x8c0>
 80015a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ac:	edc7 7a02 	vstr	s15, [r7, #8]
			  AD9959_Set_Phase(0x20, set_phase);
 80015b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b8:	ee17 3a90 	vmov	r3, s15
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	2020      	movs	r0, #32
 80015c2:	f7ff fba8 	bl	8000d16 <AD9959_Set_Phase>
			  IO_Update();
 80015c6:	f7ff fc47 	bl	8000e58 <IO_Update>
			  break;
 80015ca:	e12a      	b.n	8001822 <main+0x992>
		  case 4:
			  lcd_show_str(100, 145,"ATTENUATION:\n");
 80015cc:	4a61      	ldr	r2, [pc, #388]	@ (8001754 <main+0x8c4>)
 80015ce:	2191      	movs	r1, #145	@ 0x91
 80015d0:	2064      	movs	r0, #100	@ 0x64
 80015d2:	f7ff f9bf 	bl	8000954 <lcd_show_str>
			  while (1)
			  {
				  atten = abs((CaptureNumber) / 4 % 11 * 2);
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da00      	bge.n	80015de <main+0x74e>
 80015dc:	3303      	adds	r3, #3
 80015de:	109b      	asrs	r3, r3, #2
 80015e0:	4619      	mov	r1, r3
 80015e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001758 <main+0x8c8>)
 80015e4:	fb83 2301 	smull	r2, r3, r3, r1
 80015e8:	105a      	asrs	r2, r3, #1
 80015ea:	17cb      	asrs	r3, r1, #31
 80015ec:	1ad2      	subs	r2, r2, r3
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	1aca      	subs	r2, r1, r3
 80015fa:	0053      	lsls	r3, r2, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bfb8      	it	lt
 8001600:	425b      	neglt	r3, r3
 8001602:	4a56      	ldr	r2, [pc, #344]	@ (800175c <main+0x8cc>)
 8001604:	6013      	str	r3, [r2, #0]
				  if(atten != atten_t)
 8001606:	4b55      	ldr	r3, [pc, #340]	@ (800175c <main+0x8cc>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b55      	ldr	r3, [pc, #340]	@ (8001760 <main+0x8d0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d008      	beq.n	8001624 <main+0x794>
				  {
					  atten_t = atten;
 8001612:	4b52      	ldr	r3, [pc, #328]	@ (800175c <main+0x8cc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a52      	ldr	r2, [pc, #328]	@ (8001760 <main+0x8d0>)
 8001618:	6013      	str	r3, [r2, #0]
					  lcd_show_num(atten);
 800161a:	4b50      	ldr	r3, [pc, #320]	@ (800175c <main+0x8cc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff f96e 	bl	8000900 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8001624:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <main+0x8a4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	b21b      	sxth	r3, r3
 800162c:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 800162e:	2104      	movs	r1, #4
 8001630:	4841      	ldr	r0, [pc, #260]	@ (8001738 <main+0x8a8>)
 8001632:	f001 f927 	bl	8002884 <HAL_GPIO_ReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1cc      	bne.n	80015d6 <main+0x746>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 800163c:	4a3f      	ldr	r2, [pc, #252]	@ (800173c <main+0x8ac>)
 800163e:	21b9      	movs	r1, #185	@ 0xb9
 8001640:	2065      	movs	r0, #101	@ 0x65
 8001642:	f7ff f987 	bl	8000954 <lcd_show_str>
					  break;
 8001646:	bf00      	nop
				  }
			  }
			  //need api
			  AD9959_Set_Ampl(0x20,DB[atten / 2] * ampl / 1000);
 8001648:	4b44      	ldr	r3, [pc, #272]	@ (800175c <main+0x8cc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0fda      	lsrs	r2, r3, #31
 800164e:	4413      	add	r3, r2
 8001650:	105b      	asrs	r3, r3, #1
 8001652:	4a44      	ldr	r2, [pc, #272]	@ (8001764 <main+0x8d4>)
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	ed93 7a00 	vldr	s14, [r3]
 800165c:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <main+0x8d8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166c:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 800176c <main+0x8dc>
 8001670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001678:	ee17 3a90 	vmov	r3, s15
 800167c:	b29b      	uxth	r3, r3
 800167e:	4619      	mov	r1, r3
 8001680:	2020      	movs	r0, #32
 8001682:	f7ff fb13 	bl	8000cac <AD9959_Set_Ampl>
			  IO_Update();
 8001686:	f7ff fbe7 	bl	8000e58 <IO_Update>
			  break;
 800168a:	e0ca      	b.n	8001822 <main+0x992>
		  case 5:
			  lcd_show_str(100, 145,"FREQUENCY:\n");
 800168c:	4a38      	ldr	r2, [pc, #224]	@ (8001770 <main+0x8e0>)
 800168e:	2191      	movs	r1, #145	@ 0x91
 8001690:	2064      	movs	r0, #100	@ 0x64
 8001692:	f7ff f95f 	bl	8000954 <lcd_show_str>
			  while (1)
			  {
				  freq = abs((CaptureNumber) / 4 % 11 + 30);
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da00      	bge.n	800169e <main+0x80e>
 800169c:	3303      	adds	r3, #3
 800169e:	109b      	asrs	r3, r3, #2
 80016a0:	4619      	mov	r1, r3
 80016a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <main+0x8c8>)
 80016a4:	fb83 2301 	smull	r2, r3, r3, r1
 80016a8:	105a      	asrs	r2, r3, #1
 80016aa:	17cb      	asrs	r3, r1, #31
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	1aca      	subs	r2, r1, r3
 80016ba:	f102 031e 	add.w	r3, r2, #30
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bfb8      	it	lt
 80016c2:	425b      	neglt	r3, r3
 80016c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001744 <main+0x8b4>)
 80016c6:	6013      	str	r3, [r2, #0]
				  if(freq != freq_t)
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <main+0x8b4>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <main+0x8e4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d008      	beq.n	80016e6 <main+0x856>
				  {
					  freq_t = freq;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <main+0x8b4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a26      	ldr	r2, [pc, #152]	@ (8001774 <main+0x8e4>)
 80016da:	6013      	str	r3, [r2, #0]
					  lcd_show_num(freq);
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <main+0x8b4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff f90d 	bl	8000900 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <main+0x8a4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 80016f0:	2104      	movs	r1, #4
 80016f2:	4811      	ldr	r0, [pc, #68]	@ (8001738 <main+0x8a8>)
 80016f4:	f001 f8c6 	bl	8002884 <HAL_GPIO_ReadPin>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1cb      	bne.n	8001696 <main+0x806>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 80016fe:	4a0f      	ldr	r2, [pc, #60]	@ (800173c <main+0x8ac>)
 8001700:	21b9      	movs	r1, #185	@ 0xb9
 8001702:	2065      	movs	r0, #101	@ 0x65
 8001704:	f7ff f926 	bl	8000954 <lcd_show_str>
					  break;
 8001708:	bf00      	nop
				  }
			  }
			  //need api
			  AD9959_Set_Freq(0x30,freq*1000000);
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <main+0x8b4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <main+0x8e8>)
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	4619      	mov	r1, r3
 8001716:	2030      	movs	r0, #48	@ 0x30
 8001718:	f7ff fa86 	bl	8000c28 <AD9959_Set_Freq>
			  IO_Update();
 800171c:	f7ff fb9c 	bl	8000e58 <IO_Update>
			  break;
 8001720:	e07f      	b.n	8001822 <main+0x992>
 8001722:	bf00      	nop
 8001724:	080061f4 	.word	0x080061f4
 8001728:	2aaaaaab 	.word	0x2aaaaaab
 800172c:	20000210 	.word	0x20000210
 8001730:	20000214 	.word	0x20000214
 8001734:	200001ac 	.word	0x200001ac
 8001738:	48000c00 	.word	0x48000c00
 800173c:	080061cc 	.word	0x080061cc
 8001740:	3089705f 	.word	0x3089705f
 8001744:	20000000 	.word	0x20000000
 8001748:	20000220 	.word	0x20000220
 800174c:	43b40000 	.word	0x43b40000
 8001750:	467ffc00 	.word	0x467ffc00
 8001754:	080061fc 	.word	0x080061fc
 8001758:	2e8ba2e9 	.word	0x2e8ba2e9
 800175c:	20000218 	.word	0x20000218
 8001760:	2000021c 	.word	0x2000021c
 8001764:	20000008 	.word	0x20000008
 8001768:	20000200 	.word	0x20000200
 800176c:	447a0000 	.word	0x447a0000
 8001770:	0800620c 	.word	0x0800620c
 8001774:	20000004 	.word	0x20000004
 8001778:	000f4240 	.word	0x000f4240
		  case 6:
			  lcd_show_str(100, 145,"INIT PHASE\n");
 800177c:	4a33      	ldr	r2, [pc, #204]	@ (800184c <main+0x9bc>)
 800177e:	2191      	movs	r1, #145	@ 0x91
 8001780:	2064      	movs	r0, #100	@ 0x64
 8001782:	f7ff f8e7 	bl	8000954 <lcd_show_str>
			  while (1)
			  {
				  phase = abs((CaptureNumber) / 4 % 7 * 30);
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	2b00      	cmp	r3, #0
 800178a:	da00      	bge.n	800178e <main+0x8fe>
 800178c:	3303      	adds	r3, #3
 800178e:	109b      	asrs	r3, r3, #2
 8001790:	4619      	mov	r1, r3
 8001792:	4b2f      	ldr	r3, [pc, #188]	@ (8001850 <main+0x9c0>)
 8001794:	fb83 2301 	smull	r2, r3, r3, r1
 8001798:	440b      	add	r3, r1
 800179a:	109a      	asrs	r2, r3, #2
 800179c:	17cb      	asrs	r3, r1, #31
 800179e:	1ad2      	subs	r2, r2, r3
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	1aca      	subs	r2, r1, r3
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bfb8      	it	lt
 80017b4:	425b      	neglt	r3, r3
 80017b6:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <main+0x9c4>)
 80017b8:	6013      	str	r3, [r2, #0]
				  if(phase != phase_t)
 80017ba:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <main+0x9c4>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <main+0x9c8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d008      	beq.n	80017d8 <main+0x948>
				  {
					  phase_t = phase;
 80017c6:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <main+0x9c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a23      	ldr	r2, [pc, #140]	@ (8001858 <main+0x9c8>)
 80017cc:	6013      	str	r3, [r2, #0]
					  lcd_show_num(phase);
 80017ce:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <main+0x9c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f894 	bl	8000900 <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 80017d8:	4b20      	ldr	r3, [pc, #128]	@ (800185c <main+0x9cc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	b21b      	sxth	r3, r3
 80017e0:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 80017e2:	2104      	movs	r1, #4
 80017e4:	481e      	ldr	r0, [pc, #120]	@ (8001860 <main+0x9d0>)
 80017e6:	f001 f84d 	bl	8002884 <HAL_GPIO_ReadPin>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ca      	bne.n	8001786 <main+0x8f6>
				  {
					  lcd_show_str(101,185,"CONFIRM?\n");
 80017f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001864 <main+0x9d4>)
 80017f2:	21b9      	movs	r1, #185	@ 0xb9
 80017f4:	2065      	movs	r0, #101	@ 0x65
 80017f6:	f7ff f8ad 	bl	8000954 <lcd_show_str>
					  break;
 80017fa:	bf00      	nop
				  }
			  }
			  //need api
			  AD9959_Set_Phase(0x20, phase * 16383 / 360);
 80017fc:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <main+0x9c4>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	039b      	lsls	r3, r3, #14
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	4a18      	ldr	r2, [pc, #96]	@ (8001868 <main+0x9d8>)
 8001808:	fb82 1203 	smull	r1, r2, r2, r3
 800180c:	441a      	add	r2, r3
 800180e:	1212      	asrs	r2, r2, #8
 8001810:	17db      	asrs	r3, r3, #31
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b29b      	uxth	r3, r3
 8001816:	4619      	mov	r1, r3
 8001818:	2020      	movs	r0, #32
 800181a:	f7ff fa7c 	bl	8000d16 <AD9959_Set_Phase>
			  IO_Update();
 800181e:	f7ff fb1b 	bl	8000e58 <IO_Update>
			  break;
		  }
		  while(HAL_GPIO_ReadPin(GPIOC, 1<<13) != 0)		  ;
 8001822:	bf00      	nop
 8001824:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001828:	4810      	ldr	r0, [pc, #64]	@ (800186c <main+0x9dc>)
 800182a:	f001 f82b 	bl	8002884 <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f7      	bne.n	8001824 <main+0x994>
		  //lcd_show_picture(101, 105, 240, 100, gImage_black_big);
		  lcd_show_black(100, 145, 239, 100);
 8001834:	2364      	movs	r3, #100	@ 0x64
 8001836:	22ef      	movs	r2, #239	@ 0xef
 8001838:	2191      	movs	r1, #145	@ 0x91
 800183a:	2064      	movs	r0, #100	@ 0x64
 800183c:	f7ff f8b0 	bl	80009a0 <lcd_show_black>
	  }
	  prev = curr;
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  {
 8001846:	f7ff bb4e 	b.w	8000ee6 <main+0x56>
 800184a:	bf00      	nop
 800184c:	08006218 	.word	0x08006218
 8001850:	92492493 	.word	0x92492493
 8001854:	20000220 	.word	0x20000220
 8001858:	20000224 	.word	0x20000224
 800185c:	200001ac 	.word	0x200001ac
 8001860:	48000c00 	.word	0x48000c00
 8001864:	080061cc 	.word	0x080061cc
 8001868:	b60b60b7 	.word	0xb60b60b7
 800186c:	48000800 	.word	0x48000800

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	@ 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0318 	add.w	r3, r7, #24
 800187a:	2238      	movs	r2, #56	@ 0x38
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f004 f888 	bl	8005994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001892:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001896:	f001 f825 	bl	80028e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800189e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a4:	2302      	movs	r3, #2
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a8:	2303      	movs	r3, #3
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 80018b0:	2318      	movs	r3, #24
 80018b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018bc:	2302      	movs	r3, #2
 80018be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 f8c1 	bl	8002a4c <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80018d0:	f000 f970 	bl	8001bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d8:	2303      	movs	r3, #3
 80018da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2104      	movs	r1, #4
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 fbbf 	bl	8003070 <HAL_RCC_ClockConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80018f8:	f000 f95c 	bl	8001bb4 <Error_Handler>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3750      	adds	r7, #80	@ 0x50
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <MX_SPI1_Init+0x74>)
 800190a:	4a1c      	ldr	r2, [pc, #112]	@ (800197c <MX_SPI1_Init+0x78>)
 800190c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800190e:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_SPI1_Init+0x74>)
 8001910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <MX_SPI1_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <MX_SPI1_Init+0x74>)
 800191e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001922:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001924:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <MX_SPI1_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <MX_SPI1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <MX_SPI1_Init+0x74>)
 8001932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001936:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <MX_SPI1_Init+0x74>)
 800193a:	2210      	movs	r2, #16
 800193c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <MX_SPI1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <MX_SPI1_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <MX_SPI1_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <MX_SPI1_Init+0x74>)
 8001952:	2207      	movs	r2, #7
 8001954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <MX_SPI1_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <MX_SPI1_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	@ (8001978 <MX_SPI1_Init+0x74>)
 8001964:	f001 fd68 	bl	8003438 <HAL_SPI_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800196e:	f000 f921 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200000e8 	.word	0x200000e8
 800197c:	40013000 	.word	0x40013000

08001980 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	@ 0x30
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	2224      	movs	r2, #36	@ 0x24
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f004 f800 	bl	8005994 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	463b      	mov	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800199e:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <MX_TIM8_Init+0xac>)
 80019a0:	4a23      	ldr	r2, [pc, #140]	@ (8001a30 <MX_TIM8_Init+0xb0>)
 80019a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019a4:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <MX_TIM8_Init+0xac>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <MX_TIM8_Init+0xac>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <MX_TIM8_Init+0xac>)
 80019b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <MX_TIM8_Init+0xac>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_TIM8_Init+0xac>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <MX_TIM8_Init+0xac>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ca:	2303      	movs	r3, #3
 80019cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019d2:	2301      	movs	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019e2:	2301      	movs	r3, #1
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	4619      	mov	r1, r3
 80019f4:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <MX_TIM8_Init+0xac>)
 80019f6:	f002 f8a3 	bl	8003b40 <HAL_TIM_Encoder_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001a00:	f000 f8d8 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a10:	463b      	mov	r3, r7
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_TIM8_Init+0xac>)
 8001a16:	f002 faa1 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001a20:	f000 f8c8 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3730      	adds	r7, #48	@ 0x30
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200001ac 	.word	0x200001ac
 8001a30:	40013400 	.word	0x40013400

08001a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <MX_DMA_Init+0x50>)
 8001a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a3e:	4a11      	ldr	r2, [pc, #68]	@ (8001a84 <MX_DMA_Init+0x50>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a46:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <MX_DMA_Init+0x50>)
 8001a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a52:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <MX_DMA_Init+0x50>)
 8001a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a56:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <MX_DMA_Init+0x50>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <MX_DMA_Init+0x50>)
 8001a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	200b      	movs	r0, #11
 8001a70:	f000 fb97 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a74:	200b      	movs	r0, #11
 8001a76:	f000 fbae 	bl	80021d6 <HAL_NVIC_EnableIRQ>

}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	4b42      	ldr	r3, [pc, #264]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	4a41      	ldr	r2, [pc, #260]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aba:	4a3b      	ldr	r2, [pc, #236]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001abc:	f043 0320 	orr.w	r3, r3, #32
 8001ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac2:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	4a35      	ldr	r2, [pc, #212]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ada:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae6:	4b30      	ldr	r3, [pc, #192]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	4a29      	ldr	r2, [pc, #164]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0a:	4b27      	ldr	r3, [pc, #156]	@ (8001ba8 <MX_GPIO_Init+0x120>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 8001b16:	2200      	movs	r2, #0
 8001b18:	f640 213f 	movw	r1, #2623	@ 0xa3f
 8001b1c:	4823      	ldr	r0, [pc, #140]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001b1e:	f000 fec9 	bl	80028b4 <HAL_GPIO_WritePin>
                          |PWR_Pin|PS0_Pin|SDIO1_Pin|LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|SDIO2_Pin|SDIO3_Pin|PS1_Pin
 8001b22:	2200      	movs	r2, #0
 8001b24:	f641 3102 	movw	r1, #6914	@ 0x1b02
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b2c:	f000 fec2 	bl	80028b4 <HAL_GPIO_WritePin>
                          |PS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4819      	ldr	r0, [pc, #100]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001b46:	f000 fd1b 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin CS_Pin SDIO0_Pin UPDATE_Pin
                           PWR_Pin PS0_Pin SDIO1_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 8001b4a:	f640 233f 	movw	r3, #2623	@ 0xa3f
 8001b4e:	617b      	str	r3, [r7, #20]
                          |PWR_Pin|PS0_Pin|SDIO1_Pin|LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	4812      	ldr	r0, [pc, #72]	@ (8001bac <MX_GPIO_Init+0x124>)
 8001b64:	f000 fd0c 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin SDIO2_Pin SDIO3_Pin PS1_Pin
                           PS2_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|SDIO2_Pin|SDIO3_Pin|PS1_Pin
 8001b68:	f641 3302 	movw	r3, #6914	@ 0x1b02
 8001b6c:	617b      	str	r3, [r7, #20]
                          |PS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b84:	f000 fcfc 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <MX_GPIO_Init+0x128>)
 8001b9c:	f000 fcf0 	bl	8002580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48000c00 	.word	0x48000c00

08001bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <Error_Handler+0x8>

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <HAL_MspInit+0x44>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bca:	4a0e      	ldr	r2, [pc, #56]	@ (8001c04 <HAL_MspInit+0x44>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <HAL_MspInit+0x44>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <HAL_MspInit+0x44>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	4a08      	ldr	r2, [pc, #32]	@ (8001c04 <HAL_MspInit+0x44>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_MspInit+0x44>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bf6:	f000 ff19 	bl	8002a2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2c      	ldr	r2, [pc, #176]	@ (8001cd8 <HAL_SPI_MspInit+0xd0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d151      	bne.n	8001cce <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cdc <HAL_SPI_MspInit+0xd4>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8001cdc <HAL_SPI_MspInit+0xd4>)
 8001c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c36:	4b29      	ldr	r3, [pc, #164]	@ (8001cdc <HAL_SPI_MspInit+0xd4>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b26      	ldr	r3, [pc, #152]	@ (8001cdc <HAL_SPI_MspInit+0xd4>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4a25      	ldr	r2, [pc, #148]	@ (8001cdc <HAL_SPI_MspInit+0xd4>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_SPI_MspInit+0xd4>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c5a:	23a0      	movs	r3, #160	@ 0xa0
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f000 fc82 	bl	8002580 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001c7e:	4a19      	ldr	r2, [pc, #100]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c80:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001c82:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001c84:	220b      	movs	r2, #11
 8001c86:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c88:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001cb2:	480b      	ldr	r0, [pc, #44]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001cb4:	f000 faaa 	bl	800220c <HAL_DMA_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8001cbe:	f7ff ff79 	bl	8001bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a06      	ldr	r2, [pc, #24]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cc8:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	@ 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40013000 	.word	0x40013000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	2000014c 	.word	0x2000014c
 8001ce4:	40020008 	.word	0x40020008

08001ce8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d127      	bne.n	8001d5a <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0e:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d26:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_TIM_Encoder_MspInit+0x80>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d3a:	23c0      	movs	r3, #192	@ 0xc0
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <HAL_TIM_Encoder_MspInit+0x84>)
 8001d56:	f000 fc13 	bl	8002580 <HAL_GPIO_Init>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	@ 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40013400 	.word	0x40013400
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48000800 	.word	0x48000800

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <NMI_Handler+0x4>

08001d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <MemManage_Handler+0x4>

08001d88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc6:	f000 f8d1 	bl	8001f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <DMA1_Channel1_IRQHandler+0x10>)
 8001dd6:	f000 fac1 	bl	800235c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000014c 	.word	0x2000014c

08001de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dec:	4a14      	ldr	r2, [pc, #80]	@ (8001e40 <_sbrk+0x5c>)
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <_sbrk+0x60>)
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df8:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <_sbrk+0x64>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <_sbrk+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d207      	bcs.n	8001e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e14:	f003 fdd6 	bl	80059c4 <__errno>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	e009      	b.n	8001e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a05      	ldr	r2, [pc, #20]	@ (8001e48 <_sbrk+0x64>)
 8001e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20020000 	.word	0x20020000
 8001e44:	00000400 	.word	0x00000400
 8001e48:	20000228 	.word	0x20000228
 8001e4c:	20000378 	.word	0x20000378

08001e50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <SystemInit+0x20>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <SystemInit+0x20>)
 8001e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e74:	480d      	ldr	r0, [pc, #52]	@ (8001eac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e78:	f7ff ffea 	bl	8001e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e7e:	490d      	ldr	r1, [pc, #52]	@ (8001eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e80:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <LoopForever+0xe>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e94:	4c0a      	ldr	r4, [pc, #40]	@ (8001ec0 <LoopForever+0x16>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ea2:	f003 fd95 	bl	80059d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ea6:	f7fe fff3 	bl	8000e90 <main>

08001eaa <LoopForever>:

LoopForever:
    b LoopForever
 8001eaa:	e7fe      	b.n	8001eaa <LoopForever>
  ldr   r0, =_estack
 8001eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001eb8:	08008a24 	.word	0x08008a24
  ldr r2, =_sbss
 8001ebc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001ec0:	20000378 	.word	0x20000378

08001ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <ADC1_2_IRQHandler>

08001ec6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 f95b 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed6:	200f      	movs	r0, #15
 8001ed8:	f000 f80e 	bl	8001ef8 <HAL_InitTick>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	e001      	b.n	8001eec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee8:	f7ff fe6a 	bl	8001bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eec:	79fb      	ldrb	r3, [r7, #7]

}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <HAL_InitTick+0x68>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d022      	beq.n	8001f52 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_InitTick+0x6c>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <HAL_InitTick+0x68>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f966 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10f      	bne.n	8001f4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	d809      	bhi.n	8001f46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f32:	2200      	movs	r2, #0
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3a:	f000 f932 	bl	80021a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <HAL_InitTick+0x70>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e007      	b.n	8001f56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e004      	b.n	8001f56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000003c 	.word	0x2000003c
 8001f64:	20000034 	.word	0x20000034
 8001f68:	20000038 	.word	0x20000038

08001f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_IncTick+0x1c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_IncTick+0x20>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a03      	ldr	r2, [pc, #12]	@ (8001f88 <HAL_IncTick+0x1c>)
 8001f7c:	6013      	str	r3, [r2, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	2000022c 	.word	0x2000022c
 8001f8c:	2000003c 	.word	0x2000003c

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	2000022c 	.word	0x2000022c

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d004      	beq.n	8001fcc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_Delay+0x40>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fcc:	bf00      	nop
 8001fce:	f7ff ffdf 	bl	8001f90 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d8f7      	bhi.n	8001fce <HAL_Delay+0x26>
  {
  }
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	2000003c 	.word	0x2000003c

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	@ (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	@ (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	@ (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	@ 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff29 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff40 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff90 	bl	80020e0 <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5f 	bl	800208c <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff33 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa4 	bl	8002148 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e08d      	b.n	800233a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	4b47      	ldr	r3, [pc, #284]	@ (8002344 <HAL_DMA_Init+0x138>)
 8002226:	429a      	cmp	r2, r3
 8002228:	d80f      	bhi.n	800224a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	4b45      	ldr	r3, [pc, #276]	@ (8002348 <HAL_DMA_Init+0x13c>)
 8002232:	4413      	add	r3, r2
 8002234:	4a45      	ldr	r2, [pc, #276]	@ (800234c <HAL_DMA_Init+0x140>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	009a      	lsls	r2, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a42      	ldr	r2, [pc, #264]	@ (8002350 <HAL_DMA_Init+0x144>)
 8002246:	641a      	str	r2, [r3, #64]	@ 0x40
 8002248:	e00e      	b.n	8002268 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	4b40      	ldr	r3, [pc, #256]	@ (8002354 <HAL_DMA_Init+0x148>)
 8002252:	4413      	add	r3, r2
 8002254:	4a3d      	ldr	r2, [pc, #244]	@ (800234c <HAL_DMA_Init+0x140>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	009a      	lsls	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a3c      	ldr	r2, [pc, #240]	@ (8002358 <HAL_DMA_Init+0x14c>)
 8002266:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800227e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002282:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800228c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8fe 	bl	80024bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022c8:	d102      	bne.n	80022d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_DMA_Init+0x104>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d80c      	bhi.n	8002310 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f91e 	bl	8002538 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	e008      	b.n	8002322 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40020407 	.word	0x40020407
 8002348:	bffdfff8 	.word	0xbffdfff8
 800234c:	cccccccd 	.word	0xcccccccd
 8002350:	40020000 	.word	0x40020000
 8002354:	bffdfbf8 	.word	0xbffdfbf8
 8002358:	40020400 	.word	0x40020400

0800235c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2204      	movs	r2, #4
 800237e:	409a      	lsls	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d026      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x7a>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d021      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0204 	bic.w	r2, r2, #4
 80023ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	2104      	movs	r1, #4
 80023be:	fa01 f202 	lsl.w	r2, r1, r2
 80023c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d071      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023d4:	e06c      	b.n	80024b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2202      	movs	r2, #2
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d02e      	beq.n	8002448 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d029      	beq.n	8002448 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10b      	bne.n	800241a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 020a 	bic.w	r2, r2, #10
 8002410:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	f003 021f 	and.w	r2, r3, #31
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	2102      	movs	r1, #2
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d038      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002446:	e033      	b.n	80024b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2208      	movs	r2, #8
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02a      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d025      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 020e 	bic.w	r2, r2, #14
 8002474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f003 021f 	and.w	r2, r3, #31
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
}
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d802      	bhi.n	80024d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80024d0:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e001      	b.n	80024da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80024d8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3b08      	subs	r3, #8
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002506:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2201      	movs	r2, #1
 8002510:	409a      	lsls	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40020407 	.word	0x40020407
 8002528:	40020800 	.word	0x40020800
 800252c:	40020820 	.word	0x40020820
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	40020880 	.word	0x40020880

08002538 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a08      	ldr	r2, [pc, #32]	@ (800257c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800255a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3b01      	subs	r3, #1
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2201      	movs	r2, #1
 8002566:	409a      	lsls	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	1000823f 	.word	0x1000823f
 800257c:	40020940 	.word	0x40020940

08002580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800258e:	e15a      	b.n	8002846 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2101      	movs	r1, #1
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	4013      	ands	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 814c 	beq.w	8002840 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d005      	beq.n	80025c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d130      	bne.n	8002622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025f6:	2201      	movs	r2, #1
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 0201 	and.w	r2, r3, #1
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b03      	cmp	r3, #3
 800262c:	d017      	beq.n	800265e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	2203      	movs	r2, #3
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d123      	bne.n	80026b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	08da      	lsrs	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3208      	adds	r2, #8
 8002672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	220f      	movs	r2, #15
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	08da      	lsrs	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3208      	adds	r2, #8
 80026ac:	6939      	ldr	r1, [r7, #16]
 80026ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0203 	and.w	r2, r3, #3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80a6 	beq.w	8002840 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002864 <HAL_GPIO_Init+0x2e4>)
 80026f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002864 <HAL_GPIO_Init+0x2e4>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002700:	4b58      	ldr	r3, [pc, #352]	@ (8002864 <HAL_GPIO_Init+0x2e4>)
 8002702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270c:	4a56      	ldr	r2, [pc, #344]	@ (8002868 <HAL_GPIO_Init+0x2e8>)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	3302      	adds	r3, #2
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002736:	d01f      	beq.n	8002778 <HAL_GPIO_Init+0x1f8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a4c      	ldr	r2, [pc, #304]	@ (800286c <HAL_GPIO_Init+0x2ec>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d019      	beq.n	8002774 <HAL_GPIO_Init+0x1f4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a4b      	ldr	r2, [pc, #300]	@ (8002870 <HAL_GPIO_Init+0x2f0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_GPIO_Init+0x1f0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a4a      	ldr	r2, [pc, #296]	@ (8002874 <HAL_GPIO_Init+0x2f4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00d      	beq.n	800276c <HAL_GPIO_Init+0x1ec>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a49      	ldr	r2, [pc, #292]	@ (8002878 <HAL_GPIO_Init+0x2f8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <HAL_GPIO_Init+0x1e8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a48      	ldr	r2, [pc, #288]	@ (800287c <HAL_GPIO_Init+0x2fc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d101      	bne.n	8002764 <HAL_GPIO_Init+0x1e4>
 8002760:	2305      	movs	r3, #5
 8002762:	e00a      	b.n	800277a <HAL_GPIO_Init+0x1fa>
 8002764:	2306      	movs	r3, #6
 8002766:	e008      	b.n	800277a <HAL_GPIO_Init+0x1fa>
 8002768:	2304      	movs	r3, #4
 800276a:	e006      	b.n	800277a <HAL_GPIO_Init+0x1fa>
 800276c:	2303      	movs	r3, #3
 800276e:	e004      	b.n	800277a <HAL_GPIO_Init+0x1fa>
 8002770:	2302      	movs	r3, #2
 8002772:	e002      	b.n	800277a <HAL_GPIO_Init+0x1fa>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_GPIO_Init+0x1fa>
 8002778:	2300      	movs	r3, #0
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	f002 0203 	and.w	r2, r2, #3
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	4093      	lsls	r3, r2
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278a:	4937      	ldr	r1, [pc, #220]	@ (8002868 <HAL_GPIO_Init+0x2e8>)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002798:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <HAL_GPIO_Init+0x300>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027bc:	4a30      	ldr	r2, [pc, #192]	@ (8002880 <HAL_GPIO_Init+0x300>)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002880 <HAL_GPIO_Init+0x300>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027e6:	4a26      	ldr	r2, [pc, #152]	@ (8002880 <HAL_GPIO_Init+0x300>)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027ec:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <HAL_GPIO_Init+0x300>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002810:	4a1b      	ldr	r2, [pc, #108]	@ (8002880 <HAL_GPIO_Init+0x300>)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <HAL_GPIO_Init+0x300>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800283a:	4a11      	ldr	r2, [pc, #68]	@ (8002880 <HAL_GPIO_Init+0x300>)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	f47f ae9d 	bne.w	8002590 <HAL_GPIO_Init+0x10>
  }
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40021000 	.word	0x40021000
 8002868:	40010000 	.word	0x40010000
 800286c:	48000400 	.word	0x48000400
 8002870:	48000800 	.word	0x48000800
 8002874:	48000c00 	.word	0x48000c00
 8002878:	48001000 	.word	0x48001000
 800287c:	48001400 	.word	0x48001400
 8002880:	40010400 	.word	0x40010400

08002884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e001      	b.n	80028a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
 80028c0:	4613      	mov	r3, r2
 80028c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028d0:	e002      	b.n	80028d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d141      	bne.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fe:	d131      	bne.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002900:	4b47      	ldr	r3, [pc, #284]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002906:	4a46      	ldr	r2, [pc, #280]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800290c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002910:	4b43      	ldr	r3, [pc, #268]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002918:	4a41      	ldr	r2, [pc, #260]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800291e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002920:	4b40      	ldr	r3, [pc, #256]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2232      	movs	r2, #50	@ 0x32
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	0c9b      	lsrs	r3, r3, #18
 8002932:	3301      	adds	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002936:	e002      	b.n	800293e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3b01      	subs	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293e:	4b38      	ldr	r3, [pc, #224]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294a:	d102      	bne.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f2      	bne.n	8002938 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002952:	4b33      	ldr	r3, [pc, #204]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295e:	d158      	bne.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e057      	b.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002964:	4b2e      	ldr	r3, [pc, #184]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800296a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002970:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002974:	e04d      	b.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800297c:	d141      	bne.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800297e:	4b28      	ldr	r3, [pc, #160]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800298a:	d131      	bne.n	80029f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800298c:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002992:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002998:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800299c:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2232      	movs	r2, #50	@ 0x32
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	0c9b      	lsrs	r3, r3, #18
 80029be:	3301      	adds	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c2:	e002      	b.n	80029ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ca:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d6:	d102      	bne.n	80029de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f2      	bne.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ea:	d112      	bne.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e011      	b.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a00:	e007      	b.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a02:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a0a:	4a05      	ldr	r2, [pc, #20]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40007000 	.word	0x40007000
 8002a24:	20000034 	.word	0x20000034
 8002a28:	431bde83 	.word	0x431bde83

08002a2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a04      	ldr	r2, [pc, #16]	@ (8002a48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a3a:	6093      	str	r3, [r2, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40007000 	.word	0x40007000

08002a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e2fe      	b.n	800305c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d075      	beq.n	8002b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	4b97      	ldr	r3, [pc, #604]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a74:	4b94      	ldr	r3, [pc, #592]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b0c      	cmp	r3, #12
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3e>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d002      	beq.n	8002a90 <HAL_RCC_OscConfig+0x44>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	4b8d      	ldr	r3, [pc, #564]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05b      	beq.n	8002b54 <HAL_RCC_OscConfig+0x108>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d157      	bne.n	8002b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e2d9      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x74>
 8002ab2:	4b85      	ldr	r3, [pc, #532]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a84      	ldr	r2, [pc, #528]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x98>
 8002aca:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7b      	ldr	r2, [pc, #492]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ae4:	4b78      	ldr	r3, [pc, #480]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a77      	ldr	r2, [pc, #476]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b75      	ldr	r3, [pc, #468]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a74      	ldr	r2, [pc, #464]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7ff fa44 	bl	8001f90 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7ff fa40 	bl	8001f90 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e29e      	b.n	800305c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xc0>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fa30 	bl	8001f90 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7ff fa2c 	bl	8001f90 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	@ 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e28a      	b.n	800305c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b46:	4b60      	ldr	r3, [pc, #384]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0xe8>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d075      	beq.n	8002c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b62:	4b59      	ldr	r3, [pc, #356]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6c:	4b56      	ldr	r3, [pc, #344]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCC_OscConfig+0x136>
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_OscConfig+0x13c>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d11f      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b88:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x154>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e25d      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b49      	ldr	r3, [pc, #292]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	4946      	ldr	r1, [pc, #280]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bb4:	4b45      	ldr	r3, [pc, #276]	@ (8002ccc <HAL_RCC_OscConfig+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f99d 	bl	8001ef8 <HAL_InitTick>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d043      	beq.n	8002c4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e249      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d023      	beq.n	8002c18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7ff f9d8 	bl	8001f90 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be4:	f7ff f9d4 	bl	8001f90 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e232      	b.n	800305c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf6:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	492d      	ldr	r1, [pc, #180]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
 8002c16:	e01a      	b.n	8002c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c18:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7ff f9b4 	bl	8001f90 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7ff f9b0 	bl	8001f90 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e20e      	b.n	800305c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1e0>
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d041      	beq.n	8002cde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c62:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c68:	4a17      	ldr	r2, [pc, #92]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7ff f98d 	bl	8001f90 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7a:	f7ff f989 	bl	8001f90 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1e7      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0ef      	beq.n	8002c7a <HAL_RCC_OscConfig+0x22e>
 8002c9a:	e020      	b.n	8002cde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca2:	4a09      	ldr	r2, [pc, #36]	@ (8002cc8 <HAL_RCC_OscConfig+0x27c>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7ff f970 	bl	8001f90 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb2:	e00d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb4:	f7ff f96c 	bl	8001f90 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d906      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1ca      	b.n	800305c <HAL_RCC_OscConfig+0x610>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ea      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80a6 	beq.w	8002e38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cf0:	4b84      	ldr	r3, [pc, #528]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2b4>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x2b6>
 8002d00:	2300      	movs	r3, #0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	4b7f      	ldr	r3, [pc, #508]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d12:	4b7c      	ldr	r3, [pc, #496]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d22:	4b79      	ldr	r3, [pc, #484]	@ (8002f08 <HAL_RCC_OscConfig+0x4bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d118      	bne.n	8002d60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2e:	4b76      	ldr	r3, [pc, #472]	@ (8002f08 <HAL_RCC_OscConfig+0x4bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a75      	ldr	r2, [pc, #468]	@ (8002f08 <HAL_RCC_OscConfig+0x4bc>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3a:	f7ff f929 	bl	8001f90 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d42:	f7ff f925 	bl	8001f90 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e183      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d54:	4b6c      	ldr	r3, [pc, #432]	@ (8002f08 <HAL_RCC_OscConfig+0x4bc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d108      	bne.n	8002d7a <HAL_RCC_OscConfig+0x32e>
 8002d68:	4b66      	ldr	r3, [pc, #408]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6e:	4a65      	ldr	r2, [pc, #404]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d78:	e024      	b.n	8002dc4 <HAL_RCC_OscConfig+0x378>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d110      	bne.n	8002da4 <HAL_RCC_OscConfig+0x358>
 8002d82:	4b60      	ldr	r3, [pc, #384]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d88:	4a5e      	ldr	r2, [pc, #376]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002d8a:	f043 0304 	orr.w	r3, r3, #4
 8002d8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d92:	4b5c      	ldr	r3, [pc, #368]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d98:	4a5a      	ldr	r2, [pc, #360]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da2:	e00f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x378>
 8002da4:	4b57      	ldr	r3, [pc, #348]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002daa:	4a56      	ldr	r2, [pc, #344]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db4:	4b53      	ldr	r3, [pc, #332]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	4a52      	ldr	r2, [pc, #328]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d016      	beq.n	8002dfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7ff f8e0 	bl	8001f90 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7ff f8dc 	bl	8001f90 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e138      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dea:	4b46      	ldr	r3, [pc, #280]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ed      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x388>
 8002df8:	e015      	b.n	8002e26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7ff f8c9 	bl	8001f90 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7ff f8c5 	bl	8001f90 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e121      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e18:	4b3a      	ldr	r3, [pc, #232]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ed      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2c:	4b35      	ldr	r3, [pc, #212]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	4a34      	ldr	r2, [pc, #208]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d03c      	beq.n	8002ebe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e52:	4a2c      	ldr	r2, [pc, #176]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7ff f898 	bl	8001f90 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e64:	f7ff f894 	bl	8001f90 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0f2      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e76:	4b23      	ldr	r3, [pc, #140]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ef      	beq.n	8002e64 <HAL_RCC_OscConfig+0x418>
 8002e84:	e01b      	b.n	8002ebe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e86:	4b1f      	ldr	r3, [pc, #124]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7ff f87b 	bl	8001f90 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e9e:	f7ff f877 	bl	8001f90 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0d5      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb0:	4b14      	ldr	r3, [pc, #80]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ef      	bne.n	8002e9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80c9 	beq.w	800305a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	f000 8083 	beq.w	8002fdc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d15e      	bne.n	8002f9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a08      	ldr	r2, [pc, #32]	@ (8002f04 <HAL_RCC_OscConfig+0x4b8>)
 8002ee4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eea:	f7ff f851 	bl	8001f90 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef0:	e00c      	b.n	8002f0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7ff f84d 	bl	8001f90 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d905      	bls.n	8002f0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0ab      	b.n	800305c <HAL_RCC_OscConfig+0x610>
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0c:	4b55      	ldr	r3, [pc, #340]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ec      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f18:	4b52      	ldr	r3, [pc, #328]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4b52      	ldr	r3, [pc, #328]	@ (8003068 <HAL_RCC_OscConfig+0x61c>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6a11      	ldr	r1, [r2, #32]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f28:	3a01      	subs	r2, #1
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	4311      	orrs	r1, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f32:	0212      	lsls	r2, r2, #8
 8002f34:	4311      	orrs	r1, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f3a:	0852      	lsrs	r2, r2, #1
 8002f3c:	3a01      	subs	r2, #1
 8002f3e:	0552      	lsls	r2, r2, #21
 8002f40:	4311      	orrs	r1, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f46:	0852      	lsrs	r2, r2, #1
 8002f48:	3a01      	subs	r2, #1
 8002f4a:	0652      	lsls	r2, r2, #25
 8002f4c:	4311      	orrs	r1, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f52:	06d2      	lsls	r2, r2, #27
 8002f54:	430a      	orrs	r2, r1
 8002f56:	4943      	ldr	r1, [pc, #268]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a40      	ldr	r2, [pc, #256]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f68:	4b3e      	ldr	r3, [pc, #248]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7ff f80c 	bl	8001f90 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7ff f808 	bl	8001f90 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e066      	b.n	800305c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8e:	4b35      	ldr	r3, [pc, #212]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x530>
 8002f9a:	e05e      	b.n	800305a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9c:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a30      	ldr	r2, [pc, #192]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fff2 	bl	8001f90 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe ffee 	bl	8001f90 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e04c      	b.n	800305c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc2:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002fce:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	4924      	ldr	r1, [pc, #144]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002fd4:	4b25      	ldr	r3, [pc, #148]	@ (800306c <HAL_RCC_OscConfig+0x620>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	60cb      	str	r3, [r1, #12]
 8002fda:	e03e      	b.n	800305a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e039      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <HAL_RCC_OscConfig+0x618>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0203 	and.w	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d12c      	bne.n	8003056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	3b01      	subs	r3, #1
 8003008:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d123      	bne.n	8003056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d11b      	bne.n	8003056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d113      	bne.n	8003056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	3b01      	subs	r3, #1
 800303c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d109      	bne.n	8003056 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	3b01      	subs	r3, #1
 8003050:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	019f800c 	.word	0x019f800c
 800306c:	feeefffc 	.word	0xfeeefffc

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e11e      	b.n	80032c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b91      	ldr	r3, [pc, #580]	@ (80032d0 <HAL_RCC_ClockConfig+0x260>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d910      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b8e      	ldr	r3, [pc, #568]	@ (80032d0 <HAL_RCC_ClockConfig+0x260>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 020f 	bic.w	r2, r3, #15
 800309e:	498c      	ldr	r1, [pc, #560]	@ (80032d0 <HAL_RCC_ClockConfig+0x260>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b8a      	ldr	r3, [pc, #552]	@ (80032d0 <HAL_RCC_ClockConfig+0x260>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e106      	b.n	80032c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d073      	beq.n	80031ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d129      	bne.n	8003120 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030cc:	4b81      	ldr	r3, [pc, #516]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0f4      	b.n	80032c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030dc:	f000 f966 	bl	80033ac <RCC_GetSysClockFreqFromPLLSource>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4a7c      	ldr	r2, [pc, #496]	@ (80032d8 <HAL_RCC_ClockConfig+0x268>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d93f      	bls.n	800316a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030ea:	4b7a      	ldr	r3, [pc, #488]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d033      	beq.n	800316a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003106:	2b00      	cmp	r3, #0
 8003108:	d12f      	bne.n	800316a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800310a:	4b72      	ldr	r3, [pc, #456]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003112:	4a70      	ldr	r2, [pc, #448]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 8003114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003118:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e024      	b.n	800316a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d107      	bne.n	8003138 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003128:	4b6a      	ldr	r3, [pc, #424]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0c6      	b.n	80032c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003138:	4b66      	ldr	r3, [pc, #408]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0be      	b.n	80032c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003148:	f000 f8ce 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 800314c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4a61      	ldr	r2, [pc, #388]	@ (80032d8 <HAL_RCC_ClockConfig+0x268>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d909      	bls.n	800316a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003156:	4b5f      	ldr	r3, [pc, #380]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800315e:	4a5d      	ldr	r2, [pc, #372]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 8003160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003164:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b5a      	ldr	r3, [pc, #360]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4957      	ldr	r1, [pc, #348]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7fe ff08 	bl	8001f90 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe ff04 	bl	8001f90 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e095      	b.n	80032c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b4e      	ldr	r3, [pc, #312]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d023      	beq.n	8003200 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c4:	4b43      	ldr	r3, [pc, #268]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a42      	ldr	r2, [pc, #264]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 80031ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031dc:	4b3d      	ldr	r3, [pc, #244]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031e4:	4a3b      	ldr	r2, [pc, #236]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 80031e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ec:	4b39      	ldr	r3, [pc, #228]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4936      	ldr	r1, [pc, #216]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
 80031fe:	e008      	b.n	8003212 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b80      	cmp	r3, #128	@ 0x80
 8003204:	d105      	bne.n	8003212 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003206:	4b33      	ldr	r3, [pc, #204]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4a32      	ldr	r2, [pc, #200]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 800320c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003210:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003212:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <HAL_RCC_ClockConfig+0x260>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d21d      	bcs.n	800325c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003220:	4b2b      	ldr	r3, [pc, #172]	@ (80032d0 <HAL_RCC_ClockConfig+0x260>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 020f 	bic.w	r2, r3, #15
 8003228:	4929      	ldr	r1, [pc, #164]	@ (80032d0 <HAL_RCC_ClockConfig+0x260>)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003230:	f7fe feae 	bl	8001f90 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	e00a      	b.n	800324e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fe feaa 	bl	8001f90 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e03b      	b.n	80032c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_RCC_ClockConfig+0x260>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d1ed      	bne.n	8003238 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4917      	ldr	r1, [pc, #92]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490f      	ldr	r1, [pc, #60]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800329a:	f000 f825 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0c      	ldr	r3, [pc, #48]	@ (80032d4 <HAL_RCC_ClockConfig+0x264>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	490c      	ldr	r1, [pc, #48]	@ (80032dc <HAL_RCC_ClockConfig+0x26c>)
 80032ac:	5ccb      	ldrb	r3, [r1, r3]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a0a      	ldr	r2, [pc, #40]	@ (80032e0 <HAL_RCC_ClockConfig+0x270>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032ba:	4b0a      	ldr	r3, [pc, #40]	@ (80032e4 <HAL_RCC_ClockConfig+0x274>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fe1a 	bl	8001ef8 <HAL_InitTick>
 80032c4:	4603      	mov	r3, r0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40022000 	.word	0x40022000
 80032d4:	40021000 	.word	0x40021000
 80032d8:	04c4b400 	.word	0x04c4b400
 80032dc:	08006224 	.word	0x08006224
 80032e0:	20000034 	.word	0x20000034
 80032e4:	20000038 	.word	0x20000038

080032e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032ee:	4b2c      	ldr	r3, [pc, #176]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d102      	bne.n	8003300 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032fa:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e047      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003300:	4b27      	ldr	r3, [pc, #156]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b08      	cmp	r3, #8
 800330a:	d102      	bne.n	8003312 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800330c:	4b26      	ldr	r3, [pc, #152]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	e03e      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003312:	4b23      	ldr	r3, [pc, #140]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d136      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800331e:	4b20      	ldr	r3, [pc, #128]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003328:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	3301      	adds	r3, #1
 8003334:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d10c      	bne.n	8003356 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800333c:	4a1a      	ldr	r2, [pc, #104]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	4a16      	ldr	r2, [pc, #88]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003346:	68d2      	ldr	r2, [r2, #12]
 8003348:	0a12      	lsrs	r2, r2, #8
 800334a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	617b      	str	r3, [r7, #20]
      break;
 8003354:	e00c      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003356:	4a13      	ldr	r2, [pc, #76]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	4a10      	ldr	r2, [pc, #64]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003360:	68d2      	ldr	r2, [r2, #12]
 8003362:	0a12      	lsrs	r2, r2, #8
 8003364:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	617b      	str	r3, [r7, #20]
      break;
 800336e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0e5b      	lsrs	r3, r3, #25
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	3301      	adds	r3, #1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	e001      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003390:	693b      	ldr	r3, [r7, #16]
}
 8003392:	4618      	mov	r0, r3
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	00f42400 	.word	0x00f42400
 80033a8:	017d7840 	.word	0x017d7840

080033ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033b2:	4b1e      	ldr	r3, [pc, #120]	@ (800342c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3301      	adds	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d10c      	bne.n	80033ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033d0:	4a17      	ldr	r2, [pc, #92]	@ (8003430 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	4a14      	ldr	r2, [pc, #80]	@ (800342c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033da:	68d2      	ldr	r2, [r2, #12]
 80033dc:	0a12      	lsrs	r2, r2, #8
 80033de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
    break;
 80033e8:	e00c      	b.n	8003404 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ea:	4a12      	ldr	r2, [pc, #72]	@ (8003434 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	4a0e      	ldr	r2, [pc, #56]	@ (800342c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033f4:	68d2      	ldr	r2, [r2, #12]
 80033f6:	0a12      	lsrs	r2, r2, #8
 80033f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
    break;
 8003402:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003404:	4b09      	ldr	r3, [pc, #36]	@ (800342c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	0e5b      	lsrs	r3, r3, #25
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	3301      	adds	r3, #1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800341e:	687b      	ldr	r3, [r7, #4]
}
 8003420:	4618      	mov	r0, r3
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40021000 	.word	0x40021000
 8003430:	017d7840 	.word	0x017d7840
 8003434:	00f42400 	.word	0x00f42400

08003438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e09d      	b.n	8003586 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800345a:	d009      	beq.n	8003470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]
 8003462:	e005      	b.n	8003470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe fbbc 	bl	8001c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034b0:	d902      	bls.n	80034b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e002      	b.n	80034be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034c6:	d007      	beq.n	80034d8 <HAL_SPI_Init+0xa0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351a:	ea42 0103 	orr.w	r1, r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	f003 0204 	and.w	r2, r3, #4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003554:	ea42 0103 	orr.w	r1, r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003574:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b088      	sub	sp, #32
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_SPI_Transmit+0x22>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e15f      	b.n	8003870 <HAL_SPI_Transmit+0x2e2>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b8:	f7fe fcea 	bl	8001f90 <HAL_GetTick>
 80035bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d002      	beq.n	80035d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
 80035d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d2:	e148      	b.n	8003866 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit+0x52>
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035e4:	e13f      	b.n	8003866 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003630:	d10f      	bne.n	8003652 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003650:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d007      	beq.n	8003670 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003678:	d94f      	bls.n	800371a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Transmit+0xfa>
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d142      	bne.n	800370e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	881a      	ldrh	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	1c9a      	adds	r2, r3, #2
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036ac:	e02f      	b.n	800370e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d112      	bne.n	80036e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c0:	881a      	ldrh	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	1c9a      	adds	r2, r3, #2
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036e0:	e015      	b.n	800370e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e2:	f7fe fc55 	bl	8001f90 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d803      	bhi.n	80036fa <HAL_SPI_Transmit+0x16c>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d102      	bne.n	8003700 <HAL_SPI_Transmit+0x172>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800370c:	e0ab      	b.n	8003866 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ca      	bne.n	80036ae <HAL_SPI_Transmit+0x120>
 8003718:	e080      	b.n	800381c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Transmit+0x19a>
 8003722:	8afb      	ldrh	r3, [r7, #22]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d174      	bne.n	8003812 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d912      	bls.n	8003758 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003736:	881a      	ldrh	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003742:	1c9a      	adds	r2, r3, #2
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b02      	subs	r3, #2
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003756:	e05c      	b.n	8003812 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	7812      	ldrb	r2, [r2, #0]
 8003764:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800377e:	e048      	b.n	8003812 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d12b      	bne.n	80037e6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d912      	bls.n	80037be <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379c:	881a      	ldrh	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a8:	1c9a      	adds	r2, r3, #2
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b02      	subs	r3, #2
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037bc:	e029      	b.n	8003812 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	7812      	ldrb	r2, [r2, #0]
 80037ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037e4:	e015      	b.n	8003812 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e6:	f7fe fbd3 	bl	8001f90 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d803      	bhi.n	80037fe <HAL_SPI_Transmit+0x270>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d102      	bne.n	8003804 <HAL_SPI_Transmit+0x276>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003810:	e029      	b.n	8003866 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1b1      	bne.n	8003780 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f947 	bl	8003ab4 <SPI_EndRxTxTransaction>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e003      	b.n	8003866 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800386e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003888:	f7fe fb82 	bl	8001f90 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4413      	add	r3, r2
 8003896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003898:	f7fe fb7a 	bl	8001f90 <HAL_GetTick>
 800389c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800389e:	4b39      	ldr	r3, [pc, #228]	@ (8003984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	015b      	lsls	r3, r3, #5
 80038a4:	0d1b      	lsrs	r3, r3, #20
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ae:	e054      	b.n	800395a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d050      	beq.n	800395a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038b8:	f7fe fb6a 	bl	8001f90 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d902      	bls.n	80038ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d13d      	bne.n	800394a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038e6:	d111      	bne.n	800390c <SPI_WaitFlagStateUntilTimeout+0x94>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f0:	d004      	beq.n	80038fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d107      	bne.n	800390c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800390a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003914:	d10f      	bne.n	8003936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e017      	b.n	800397a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3b01      	subs	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	429a      	cmp	r2, r3
 8003968:	bf0c      	ite	eq
 800396a:	2301      	moveq	r3, #1
 800396c:	2300      	movne	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	429a      	cmp	r2, r3
 8003976:	d19b      	bne.n	80038b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000034 	.word	0x20000034

08003988 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800399a:	f7fe faf9 	bl	8001f90 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80039aa:	f7fe faf1 	bl	8001f90 <HAL_GetTick>
 80039ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039b8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00da      	lsls	r2, r3, #3
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	0d1b      	lsrs	r3, r3, #20
 80039c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039d0:	e060      	b.n	8003a94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039d8:	d107      	bne.n	80039ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d050      	beq.n	8003a94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f2:	f7fe facd 	bl	8001f90 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d902      	bls.n	8003a08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d13d      	bne.n	8003a84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a20:	d111      	bne.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a2a:	d004      	beq.n	8003a36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a34:	d107      	bne.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a4e:	d10f      	bne.n	8003a70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e010      	b.n	8003aa6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d196      	bne.n	80039d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3728      	adds	r7, #40	@ 0x28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000034 	.word	0x20000034

08003ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff ff5b 	bl	8003988 <SPI_WaitFifoStateUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e027      	b.n	8003b38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2180      	movs	r1, #128	@ 0x80
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff fec0 	bl	8003878 <SPI_WaitFlagStateUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b02:	f043 0220 	orr.w	r2, r3, #32
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e014      	b.n	8003b38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff ff34 	bl	8003988 <SPI_WaitFifoStateUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e000      	b.n	8003b38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e097      	b.n	8003c84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7fe f8bd 	bl	8001ce8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003b84:	f023 0307 	bic.w	r3, r3, #7
 8003b88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f000 f907 	bl	8003da8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003be0:	f023 030c 	bic.w	r3, r3, #12
 8003be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	011a      	lsls	r2, r3, #4
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	031b      	lsls	r3, r3, #12
 8003c10:	4313      	orrs	r3, r2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	4313      	orrs	r3, r2
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ca4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d110      	bne.n	8003cde <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cc2:	7b7b      	ldrb	r3, [r7, #13]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d001      	beq.n	8003ccc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e069      	b.n	8003da0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cdc:	e031      	b.n	8003d42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d110      	bne.n	8003d06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ce4:	7bbb      	ldrb	r3, [r7, #14]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d102      	bne.n	8003cf0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cea:	7b3b      	ldrb	r3, [r7, #12]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d001      	beq.n	8003cf4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e055      	b.n	8003da0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d04:	e01d      	b.n	8003d42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d108      	bne.n	8003d1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d0c:	7bbb      	ldrb	r3, [r7, #14]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d12:	7b7b      	ldrb	r3, [r7, #13]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d102      	bne.n	8003d1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d18:	7b3b      	ldrb	r3, [r7, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e03e      	b.n	8003da0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_TIM_Encoder_Start+0xc4>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d008      	beq.n	8003d60 <HAL_TIM_Encoder_Start+0xd4>
 8003d4e:	e00f      	b.n	8003d70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2201      	movs	r2, #1
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f8d9 	bl	8003f10 <TIM_CCxChannelCmd>
      break;
 8003d5e:	e016      	b.n	8003d8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	2104      	movs	r1, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f8d1 	bl	8003f10 <TIM_CCxChannelCmd>
      break;
 8003d6e:	e00e      	b.n	8003d8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f8c9 	bl	8003f10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2201      	movs	r2, #1
 8003d84:	2104      	movs	r1, #4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f8c2 	bl	8003f10 <TIM_CCxChannelCmd>
      break;
 8003d8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a4c      	ldr	r2, [pc, #304]	@ (8003eec <TIM_Base_SetConfig+0x144>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d017      	beq.n	8003df0 <TIM_Base_SetConfig+0x48>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc6:	d013      	beq.n	8003df0 <TIM_Base_SetConfig+0x48>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a49      	ldr	r2, [pc, #292]	@ (8003ef0 <TIM_Base_SetConfig+0x148>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00f      	beq.n	8003df0 <TIM_Base_SetConfig+0x48>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a48      	ldr	r2, [pc, #288]	@ (8003ef4 <TIM_Base_SetConfig+0x14c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <TIM_Base_SetConfig+0x48>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a47      	ldr	r2, [pc, #284]	@ (8003ef8 <TIM_Base_SetConfig+0x150>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d007      	beq.n	8003df0 <TIM_Base_SetConfig+0x48>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a46      	ldr	r2, [pc, #280]	@ (8003efc <TIM_Base_SetConfig+0x154>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_Base_SetConfig+0x48>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a45      	ldr	r2, [pc, #276]	@ (8003f00 <TIM_Base_SetConfig+0x158>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d108      	bne.n	8003e02 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a39      	ldr	r2, [pc, #228]	@ (8003eec <TIM_Base_SetConfig+0x144>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d023      	beq.n	8003e52 <TIM_Base_SetConfig+0xaa>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e10:	d01f      	beq.n	8003e52 <TIM_Base_SetConfig+0xaa>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a36      	ldr	r2, [pc, #216]	@ (8003ef0 <TIM_Base_SetConfig+0x148>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01b      	beq.n	8003e52 <TIM_Base_SetConfig+0xaa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a35      	ldr	r2, [pc, #212]	@ (8003ef4 <TIM_Base_SetConfig+0x14c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d017      	beq.n	8003e52 <TIM_Base_SetConfig+0xaa>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a34      	ldr	r2, [pc, #208]	@ (8003ef8 <TIM_Base_SetConfig+0x150>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <TIM_Base_SetConfig+0xaa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a33      	ldr	r2, [pc, #204]	@ (8003efc <TIM_Base_SetConfig+0x154>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00f      	beq.n	8003e52 <TIM_Base_SetConfig+0xaa>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a33      	ldr	r2, [pc, #204]	@ (8003f04 <TIM_Base_SetConfig+0x15c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00b      	beq.n	8003e52 <TIM_Base_SetConfig+0xaa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a32      	ldr	r2, [pc, #200]	@ (8003f08 <TIM_Base_SetConfig+0x160>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <TIM_Base_SetConfig+0xaa>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a31      	ldr	r2, [pc, #196]	@ (8003f0c <TIM_Base_SetConfig+0x164>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_Base_SetConfig+0xaa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <TIM_Base_SetConfig+0x158>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d108      	bne.n	8003e64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a18      	ldr	r2, [pc, #96]	@ (8003eec <TIM_Base_SetConfig+0x144>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <TIM_Base_SetConfig+0x110>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1a      	ldr	r2, [pc, #104]	@ (8003efc <TIM_Base_SetConfig+0x154>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00f      	beq.n	8003eb8 <TIM_Base_SetConfig+0x110>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f04 <TIM_Base_SetConfig+0x15c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <TIM_Base_SetConfig+0x110>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a19      	ldr	r2, [pc, #100]	@ (8003f08 <TIM_Base_SetConfig+0x160>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <TIM_Base_SetConfig+0x110>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	@ (8003f0c <TIM_Base_SetConfig+0x164>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_Base_SetConfig+0x110>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a13      	ldr	r2, [pc, #76]	@ (8003f00 <TIM_Base_SetConfig+0x158>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d103      	bne.n	8003ec0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d105      	bne.n	8003ede <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f023 0201 	bic.w	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800
 8003ef8:	40000c00 	.word	0x40000c00
 8003efc:	40013400 	.word	0x40013400
 8003f00:	40015000 	.word	0x40015000
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800

08003f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2201      	movs	r2, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1a      	ldr	r2, [r3, #32]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e074      	b.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a34      	ldr	r2, [pc, #208]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a33      	ldr	r2, [pc, #204]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a31      	ldr	r2, [pc, #196]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d108      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff4:	d01d      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1d      	ldr	r2, [pc, #116]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1c      	ldr	r2, [pc, #112]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a15      	ldr	r2, [pc, #84]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a18      	ldr	r2, [pc, #96]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a11      	ldr	r2, [pc, #68]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10c      	bne.n	800404c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4313      	orrs	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40013400 	.word	0x40013400
 8004074:	40015000 	.word	0x40015000
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	40014000 	.word	0x40014000

08004088 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 8004088:	2000      	movs	r0, #0
 800408a:	4770      	bx	lr

0800408c <_ZN5Print5flushEv>:
//    size_t println(const Printable&);
    size_t println(void);

    size_t printf(const char *, ...);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop

08004090 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop

08004094 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 8004094:	b410      	push	{r4}
  drawPixel(x, y, color);
 8004096:	6804      	ldr	r4, [r0, #0]
 8004098:	6924      	ldr	r4, [r4, #16]
 800409a:	46a4      	mov	ip, r4
}
 800409c:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 80040a0:	4760      	bx	ip
 80040a2:	bf00      	nop

080040a4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 80040a4:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 80040a6:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
 80040a8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
 80040ac:	9502      	str	r5, [sp, #8]
 80040ae:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 80040b0:	46a4      	mov	ip, r4
}
 80040b2:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 80040b4:	4760      	bx	ip
 80040b6:	bf00      	nop

080040b8 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 80040b8:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 80040ba:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
 80040bc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
 80040c0:	9502      	str	r5, [sp, #8]
 80040c2:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80040c4:	46a4      	mov	ip, r4
}
 80040c6:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 80040c8:	4760      	bx	ip
 80040ca:	bf00      	nop

080040cc <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <_ZN12Adafruit_GFX11setRotationEh>:
    _height = HEIGHT;
 80040d0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    _width = WIDTH;
 80040d4:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
  rotation = (x & 3);
 80040d8:	f001 0303 	and.w	r3, r1, #3
  switch (rotation) {
 80040dc:	07c9      	lsls	r1, r1, #31
 80040de:	bf48      	it	mi
 80040e0:	b292      	uxthmi	r2, r2
  rotation = (x & 3);
 80040e2:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 80040e4:	6883      	ldr	r3, [r0, #8]
 80040e6:	bf48      	it	mi
 80040e8:	ea42 430c 	orrmi.w	r3, r2, ip, lsl #16
    _width = HEIGHT;
 80040ec:	60c3      	str	r3, [r0, #12]
}
 80040ee:	4770      	bx	lr

080040f0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
                                 uint16_t color) {
 80040f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f4:	461c      	mov	r4, r3
 80040f6:	460b      	mov	r3, r1
  startWrite();
 80040f8:	6801      	ldr	r1, [r0, #0]
 80040fa:	4e12      	ldr	r6, [pc, #72]	@ (8004144 <_ZN12Adafruit_GFX13drawFastVLineEssst+0x54>)
 80040fc:	694f      	ldr	r7, [r1, #20]
                                 uint16_t color) {
 80040fe:	b084      	sub	sp, #16
 8004100:	42b7      	cmp	r7, r6
 8004102:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
 8004106:	4605      	mov	r5, r0
 8004108:	d110      	bne.n	800412c <_ZN12Adafruit_GFX13drawFastVLineEssst+0x3c>
  writeLine(x, y, x, y + h - 1, color);
 800410a:	3c01      	subs	r4, #1
 800410c:	4414      	add	r4, r2
 800410e:	b224      	sxth	r4, r4
 8004110:	f8cd 8004 	str.w	r8, [sp, #4]
 8004114:	9400      	str	r4, [sp, #0]
 8004116:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8004118:	4628      	mov	r0, r5
 800411a:	4619      	mov	r1, r3
 800411c:	47a0      	blx	r4
  endWrite();
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	42b3      	cmp	r3, r6
 8004124:	d109      	bne.n	800413a <_ZN12Adafruit_GFX13drawFastVLineEssst+0x4a>
}
 8004126:	b004      	add	sp, #16
 8004128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800412c:	e9cd 3202 	strd	r3, r2, [sp, #8]
  startWrite();
 8004130:	47b8      	blx	r7
  writeLine(x, y, x, y + h - 1, color);
 8004132:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004136:	6829      	ldr	r1, [r5, #0]
 8004138:	e7e7      	b.n	800410a <_ZN12Adafruit_GFX13drawFastVLineEssst+0x1a>
  endWrite();
 800413a:	4628      	mov	r0, r5
}
 800413c:	b004      	add	sp, #16
 800413e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 8004142:	4718      	bx	r3
 8004144:	08004091 	.word	0x08004091

08004148 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
                                 uint16_t color) {
 8004148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  startWrite();
 800414c:	6806      	ldr	r6, [r0, #0]
 800414e:	4f12      	ldr	r7, [pc, #72]	@ (8004198 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x50>)
                                 uint16_t color) {
 8004150:	461c      	mov	r4, r3
  startWrite();
 8004152:	6973      	ldr	r3, [r6, #20]
                                 uint16_t color) {
 8004154:	b084      	sub	sp, #16
 8004156:	42bb      	cmp	r3, r7
 8004158:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
 800415c:	4605      	mov	r5, r0
 800415e:	d10f      	bne.n	8004180 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x38>
  writeLine(x, y, x + w - 1, y, color);
 8004160:	1e63      	subs	r3, r4, #1
 8004162:	f8cd 8004 	str.w	r8, [sp, #4]
 8004166:	440b      	add	r3, r1
 8004168:	9200      	str	r2, [sp, #0]
 800416a:	b21b      	sxth	r3, r3
 800416c:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 800416e:	4628      	mov	r0, r5
 8004170:	47a0      	blx	r4
  endWrite();
 8004172:	682b      	ldr	r3, [r5, #0]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	42bb      	cmp	r3, r7
 8004178:	d109      	bne.n	800418e <_ZN12Adafruit_GFX13drawFastHLineEssst+0x46>
}
 800417a:	b004      	add	sp, #16
 800417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004180:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
 8004184:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 8004186:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800418a:	682e      	ldr	r6, [r5, #0]
 800418c:	e7e8      	b.n	8004160 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x18>
  endWrite();
 800418e:	4628      	mov	r0, r5
}
 8004190:	b004      	add	sp, #16
 8004192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 8004196:	4718      	bx	r3
 8004198:	08004091 	.word	0x08004091

0800419c <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
 800419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a0:	b086      	sub	sp, #24
  if (x0 == x1) {
 80041a2:	4299      	cmp	r1, r3
                            uint16_t color) {
 80041a4:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	@ 0x30
 80041a8:	f8bd 6034 	ldrh.w	r6, [sp, #52]	@ 0x34
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80041ac:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
 80041b0:	4605      	mov	r5, r0
  if (x0 == x1) {
 80041b2:	d021      	beq.n	80041f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
  } else if (y0 == y1) {
 80041b4:	42a2      	cmp	r2, r4
 80041b6:	d011      	beq.n	80041dc <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    startWrite();
 80041b8:	f8dc 8014 	ldr.w	r8, [ip, #20]
 80041bc:	4f1d      	ldr	r7, [pc, #116]	@ (8004234 <_ZN12Adafruit_GFX8drawLineEsssst+0x98>)
 80041be:	45b8      	cmp	r8, r7
 80041c0:	d12e      	bne.n	8004220 <_ZN12Adafruit_GFX8drawLineEsssst+0x84>
    writeLine(x0, y0, x1, y1, color);
 80041c2:	e9cd 4600 	strd	r4, r6, [sp]
 80041c6:	4628      	mov	r0, r5
 80041c8:	f8dc 4028 	ldr.w	r4, [ip, #40]	@ 0x28
 80041cc:	47a0      	blx	r4
    endWrite();
 80041ce:	682b      	ldr	r3, [r5, #0]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	42bb      	cmp	r3, r7
 80041d4:	d11f      	bne.n	8004216 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
}
 80041d6:	b006      	add	sp, #24
 80041d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (x0 > x1)
 80041dc:	4299      	cmp	r1, r3
 80041de:	dc16      	bgt.n	800420e <_ZN12Adafruit_GFX8drawLineEsssst+0x72>
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80041e0:	960c      	str	r6, [sp, #48]	@ 0x30
 80041e2:	3301      	adds	r3, #1
 80041e4:	f8dc 403c 	ldr.w	r4, [ip, #60]	@ 0x3c
 80041e8:	1a5b      	subs	r3, r3, r1
 80041ea:	b21b      	sxth	r3, r3
 80041ec:	4628      	mov	r0, r5
 80041ee:	46a4      	mov	ip, r4
}
 80041f0:	b006      	add	sp, #24
 80041f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80041f6:	4760      	bx	ip
    if (y0 > y1)
 80041f8:	42a2      	cmp	r2, r4
 80041fa:	dd02      	ble.n	8004202 <_ZN12Adafruit_GFX8drawLineEsssst+0x66>
 80041fc:	4613      	mov	r3, r2
 80041fe:	4622      	mov	r2, r4
 8004200:	461c      	mov	r4, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8004202:	1c63      	adds	r3, r4, #1
 8004204:	960c      	str	r6, [sp, #48]	@ 0x30
 8004206:	f8dc 4038 	ldr.w	r4, [ip, #56]	@ 0x38
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	e7ed      	b.n	80041ea <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
    if (x0 > x1)
 800420e:	4608      	mov	r0, r1
 8004210:	4619      	mov	r1, r3
 8004212:	4603      	mov	r3, r0
 8004214:	e7e4      	b.n	80041e0 <_ZN12Adafruit_GFX8drawLineEsssst+0x44>
    endWrite();
 8004216:	4628      	mov	r0, r5
}
 8004218:	b006      	add	sp, #24
 800421a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 800421e:	4718      	bx	r3
 8004220:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004224:	9103      	str	r1, [sp, #12]
    startWrite();
 8004226:	47c0      	blx	r8
    writeLine(x0, y0, x1, y1, color);
 8004228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800422c:	f8d5 c000 	ldr.w	ip, [r5]
 8004230:	9903      	ldr	r1, [sp, #12]
 8004232:	e7c6      	b.n	80041c2 <_ZN12Adafruit_GFX8drawLineEsssst+0x26>
 8004234:	08004091 	.word	0x08004091

08004238 <_ZN12Adafruit_GFX8fillRectEsssst>:
                            uint16_t color) {
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 800423c:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
 8004240:	4690      	mov	r8, r2
 8004242:	461f      	mov	r7, r3
 8004244:	4a20      	ldr	r2, [pc, #128]	@ (80042c8 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
  startWrite();
 8004246:	f8dc 3014 	ldr.w	r3, [ip, #20]
                            uint16_t color) {
 800424a:	b083      	sub	sp, #12
 800424c:	4293      	cmp	r3, r2
 800424e:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8004252:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8004256:	4605      	mov	r5, r0
 8004258:	460c      	mov	r4, r1
 800425a:	d130      	bne.n	80042be <_ZN12Adafruit_GFX8fillRectEsssst+0x86>
  for (int16_t i = x; i < x + w; i++) {
 800425c:	4427      	add	r7, r4
 800425e:	42a7      	cmp	r7, r4
 8004260:	dd14      	ble.n	800428c <_ZN12Adafruit_GFX8fillRectEsssst+0x54>
 8004262:	f8df b068 	ldr.w	fp, [pc, #104]	@ 80042cc <_ZN12Adafruit_GFX8fillRectEsssst+0x94>
    writeFastVLine(i, y, h, color);
 8004266:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 800426a:	f8cd a000 	str.w	sl, [sp]
 800426e:	455e      	cmp	r6, fp
 8004270:	4621      	mov	r1, r4
 8004272:	464b      	mov	r3, r9
 8004274:	4642      	mov	r2, r8
 8004276:	4628      	mov	r0, r5
 8004278:	d110      	bne.n	800429c <_ZN12Adafruit_GFX8fillRectEsssst+0x64>
 800427a:	3401      	adds	r4, #1
 800427c:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
  for (int16_t i = x; i < x + w; i++) {
 8004280:	b224      	sxth	r4, r4
  drawFastVLine(x, y, h, color);
 8004282:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8004284:	42bc      	cmp	r4, r7
  endWrite();
 8004286:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 800428a:	dbec      	blt.n	8004266 <_ZN12Adafruit_GFX8fillRectEsssst+0x2e>
  endWrite();
 800428c:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8004290:	4a0d      	ldr	r2, [pc, #52]	@ (80042c8 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d10e      	bne.n	80042b4 <_ZN12Adafruit_GFX8fillRectEsssst+0x7c>
}
 8004296:	b003      	add	sp, #12
 8004298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429c:	3401      	adds	r4, #1
  for (int16_t i = x; i < x + w; i++) {
 800429e:	b224      	sxth	r4, r4
    writeFastVLine(i, y, h, color);
 80042a0:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 80042a2:	42a7      	cmp	r7, r4
  endWrite();
 80042a4:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 80042a8:	dcdd      	bgt.n	8004266 <_ZN12Adafruit_GFX8fillRectEsssst+0x2e>
  endWrite();
 80042aa:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 80042ae:	4a06      	ldr	r2, [pc, #24]	@ (80042c8 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d0f0      	beq.n	8004296 <_ZN12Adafruit_GFX8fillRectEsssst+0x5e>
 80042b4:	4628      	mov	r0, r5
}
 80042b6:	b003      	add	sp, #12
 80042b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 80042bc:	4718      	bx	r3
  startWrite();
 80042be:	4798      	blx	r3
  endWrite();
 80042c0:	f8d5 c000 	ldr.w	ip, [r5]
 80042c4:	e7ca      	b.n	800425c <_ZN12Adafruit_GFX8fillRectEsssst+0x24>
 80042c6:	bf00      	nop
 80042c8:	08004091 	.word	0x08004091
 80042cc:	080040a5 	.word	0x080040a5

080042d0 <_ZN12Adafruit_GFX9writeLineEsssst>:
                             uint16_t color) {
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	b085      	sub	sp, #20
 80042d6:	461d      	mov	r5, r3
 80042d8:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80042dc:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80042e0:	1ab3      	subs	r3, r6, r2
 80042e2:	eba5 0c01 	sub.w	ip, r5, r1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bfb8      	it	lt
 80042ea:	425b      	neglt	r3, r3
 80042ec:	f1bc 0f00 	cmp.w	ip, #0
 80042f0:	bfb8      	it	lt
 80042f2:	f1cc 0c00 	rsblt	ip, ip, #0
  if (steep) {
 80042f6:	4563      	cmp	r3, ip
                             uint16_t color) {
 80042f8:	460f      	mov	r7, r1
  if (steep) {
 80042fa:	dd43      	ble.n	8004384 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
 80042fc:	46a8      	mov	r8, r5
    _swap_int16_t(x0, y0);
 80042fe:	4617      	mov	r7, r2
  if (steep) {
 8004300:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 8004302:	4635      	mov	r5, r6
  if (x0 > x1) {
 8004304:	42af      	cmp	r7, r5
    _swap_int16_t(x1, y1);
 8004306:	4646      	mov	r6, r8
 8004308:	468e      	mov	lr, r1
    _swap_int16_t(x0, y0);
 800430a:	460a      	mov	r2, r1
  if (steep) {
 800430c:	46e0      	mov	r8, ip
  if (x0 > x1) {
 800430e:	dd3e      	ble.n	800438e <_ZN12Adafruit_GFX9writeLineEsssst+0xbe>
  dy = abs(y1 - y0);
 8004310:	1b09      	subs	r1, r1, r4
 8004312:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
 8004316:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
  dx = x1 - x0;
 800431a:	1b79      	subs	r1, r7, r5
  int16_t err = dx / 2;
 800431c:	f3c1 34c0 	ubfx	r4, r1, #15, #1
 8004320:	fa04 f481 	sxtah	r4, r4, r1
  if (y0 < y1) {
 8004324:	42b2      	cmp	r2, r6
  dx = x1 - x0;
 8004326:	b289      	uxth	r1, r1
 8004328:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 800432a:	ea4f 0464 	mov.w	r4, r4, asr #1
  if (y0 < y1) {
 800432e:	dd70      	ble.n	8004412 <_ZN12Adafruit_GFX9writeLineEsssst+0x142>
 8004330:	2201      	movs	r2, #1
 8004332:	4563      	cmp	r3, ip
 8004334:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 8004418 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>
 8004338:	9203      	str	r2, [sp, #12]
    err -= dy;
 800433a:	fa1f f888 	uxth.w	r8, r8
 800433e:	dc3e      	bgt.n	80043be <_ZN12Adafruit_GFX9writeLineEsssst+0xee>
 8004340:	46bb      	mov	fp, r7
      writePixel(y0, x0, color);
 8004342:	f8d0 c000 	ldr.w	ip, [r0]
  drawPixel(x, y, color);
 8004346:	9002      	str	r0, [sp, #8]
      writePixel(y0, x0, color);
 8004348:	f8dc 7018 	ldr.w	r7, [ip, #24]
      writePixel(x0, y0, color);
 800434c:	4557      	cmp	r7, sl
  drawPixel(x, y, color);
 800434e:	bf08      	it	eq
 8004350:	f8dc 7010 	ldreq.w	r7, [ip, #16]
 8004354:	4629      	mov	r1, r5
 8004356:	464b      	mov	r3, r9
 8004358:	4632      	mov	r2, r6
 800435a:	47b8      	blx	r7
    err -= dy;
 800435c:	eba4 0308 	sub.w	r3, r4, r8
 8004360:	b21c      	sxth	r4, r3
 8004362:	3501      	adds	r5, #1
    if (err < 0) {
 8004364:	2c00      	cmp	r4, #0
  drawPixel(x, y, color);
 8004366:	9802      	ldr	r0, [sp, #8]
  for (; x0 <= x1; x0++) {
 8004368:	b22d      	sxth	r5, r5
    err -= dy;
 800436a:	b29b      	uxth	r3, r3
    if (err < 0) {
 800436c:	da05      	bge.n	800437a <_ZN12Adafruit_GFX9writeLineEsssst+0xaa>
      err += dx;
 800436e:	9a01      	ldr	r2, [sp, #4]
 8004370:	4413      	add	r3, r2
 8004372:	b21c      	sxth	r4, r3
      y0 += ystep;
 8004374:	9b03      	ldr	r3, [sp, #12]
 8004376:	441e      	add	r6, r3
 8004378:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 800437a:	455d      	cmp	r5, fp
 800437c:	dde1      	ble.n	8004342 <_ZN12Adafruit_GFX9writeLineEsssst+0x72>
}
 800437e:	b005      	add	sp, #20
 8004380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (x0 > x1) {
 8004384:	42af      	cmp	r7, r5
 8004386:	4634      	mov	r4, r6
 8004388:	4611      	mov	r1, r2
 800438a:	4698      	mov	r8, r3
 800438c:	dcc0      	bgt.n	8004310 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
  dx = x1 - x0;
 800438e:	1be9      	subs	r1, r5, r7
  int16_t err = dx / 2;
 8004390:	f3c1 34c0 	ubfx	r4, r1, #15, #1
 8004394:	fa04 f481 	sxtah	r4, r4, r1
  if (y0 < y1) {
 8004398:	46ae      	mov	lr, r5
  dx = x1 - x0;
 800439a:	b289      	uxth	r1, r1
  if (y0 < y1) {
 800439c:	42b2      	cmp	r2, r6
 800439e:	463d      	mov	r5, r7
  dx = x1 - x0;
 80043a0:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 80043a2:	ea4f 0464 	mov.w	r4, r4, asr #1
  if (y0 < y1) {
 80043a6:	4616      	mov	r6, r2
 80043a8:	4677      	mov	r7, lr
 80043aa:	db2c      	blt.n	8004406 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
 80043ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043b0:	4563      	cmp	r3, ip
 80043b2:	f8df a064 	ldr.w	sl, [pc, #100]	@ 8004418 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>
 80043b6:	9203      	str	r2, [sp, #12]
    err -= dy;
 80043b8:	fa1f f888 	uxth.w	r8, r8
 80043bc:	ddc0      	ble.n	8004340 <_ZN12Adafruit_GFX9writeLineEsssst+0x70>
 80043be:	4683      	mov	fp, r0
 80043c0:	4631      	mov	r1, r6
 80043c2:	e014      	b.n	80043ee <_ZN12Adafruit_GFX9writeLineEsssst+0x11e>
  drawPixel(x, y, color);
 80043c4:	6906      	ldr	r6, [r0, #16]
 80043c6:	9102      	str	r1, [sp, #8]
 80043c8:	4658      	mov	r0, fp
 80043ca:	47b0      	blx	r6
}
 80043cc:	9902      	ldr	r1, [sp, #8]
    err -= dy;
 80043ce:	eba4 0308 	sub.w	r3, r4, r8
 80043d2:	b21c      	sxth	r4, r3
    if (err < 0) {
 80043d4:	3501      	adds	r5, #1
 80043d6:	2c00      	cmp	r4, #0
  for (; x0 <= x1; x0++) {
 80043d8:	b22d      	sxth	r5, r5
    err -= dy;
 80043da:	b29b      	uxth	r3, r3
    if (err < 0) {
 80043dc:	da05      	bge.n	80043ea <_ZN12Adafruit_GFX9writeLineEsssst+0x11a>
      err += dx;
 80043de:	9a01      	ldr	r2, [sp, #4]
 80043e0:	4413      	add	r3, r2
 80043e2:	b21c      	sxth	r4, r3
      y0 += ystep;
 80043e4:	9b03      	ldr	r3, [sp, #12]
 80043e6:	4419      	add	r1, r3
 80043e8:	b209      	sxth	r1, r1
  for (; x0 <= x1; x0++) {
 80043ea:	42bd      	cmp	r5, r7
 80043ec:	dcc7      	bgt.n	800437e <_ZN12Adafruit_GFX9writeLineEsssst+0xae>
      writePixel(y0, x0, color);
 80043ee:	f8db 0000 	ldr.w	r0, [fp]
 80043f2:	6986      	ldr	r6, [r0, #24]
 80043f4:	4556      	cmp	r6, sl
  drawPixel(x, y, color);
 80043f6:	464b      	mov	r3, r9
 80043f8:	462a      	mov	r2, r5
 80043fa:	d0e3      	beq.n	80043c4 <_ZN12Adafruit_GFX9writeLineEsssst+0xf4>
      writePixel(y0, x0, color);
 80043fc:	9102      	str	r1, [sp, #8]
 80043fe:	4658      	mov	r0, fp
 8004400:	47b0      	blx	r6
 8004402:	9902      	ldr	r1, [sp, #8]
 8004404:	e7e3      	b.n	80043ce <_ZN12Adafruit_GFX9writeLineEsssst+0xfe>
  if (y0 < y1) {
 8004406:	2201      	movs	r2, #1
  for (; x0 <= x1; x0++) {
 8004408:	42bd      	cmp	r5, r7
 800440a:	ddd1      	ble.n	80043b0 <_ZN12Adafruit_GFX9writeLineEsssst+0xe0>
}
 800440c:	b005      	add	sp, #20
 800440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (y0 < y1) {
 8004412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004416:	e7f7      	b.n	8004408 <_ZN12Adafruit_GFX9writeLineEsssst+0x138>
 8004418:	08004095 	.word	0x08004095

0800441c <_ZN12Adafruit_GFX8drawRectEsssst>:
                            uint16_t color) {
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	461d      	mov	r5, r3
  startWrite();
 8004422:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 8004424:	460f      	mov	r7, r1
 8004426:	4616      	mov	r6, r2
 8004428:	492e      	ldr	r1, [pc, #184]	@ (80044e4 <_ZN12Adafruit_GFX8drawRectEsssst+0xc8>)
  startWrite();
 800442a:	695a      	ldr	r2, [r3, #20]
                            uint16_t color) {
 800442c:	b083      	sub	sp, #12
 800442e:	428a      	cmp	r2, r1
 8004430:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8004434:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8004438:	4604      	mov	r4, r0
 800443a:	d145      	bne.n	80044c8 <_ZN12Adafruit_GFX8drawRectEsssst+0xac>
  writeFastHLine(x, y, w, color);
 800443c:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
 8004440:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 80044e8 <_ZN12Adafruit_GFX8drawRectEsssst+0xcc>
  drawFastHLine(x, y, w, color);
 8004444:	f8cd 8000 	str.w	r8, [sp]
 8004448:	45d3      	cmp	fp, sl
 800444a:	bf08      	it	eq
 800444c:	f8d3 b03c 	ldreq.w	fp, [r3, #60]	@ 0x3c
  writeFastHLine(x, y, w, color);
 8004450:	4632      	mov	r2, r6
 8004452:	462b      	mov	r3, r5
 8004454:	4639      	mov	r1, r7
 8004456:	4620      	mov	r0, r4
 8004458:	47d8      	blx	fp
  writeFastHLine(x, y + h - 1, w, color);
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
  drawFastHLine(x, y, w, color);
 8004460:	f8cd 8000 	str.w	r8, [sp]
  writeFastHLine(x, y + h - 1, w, color);
 8004464:	f109 32ff 	add.w	r2, r9, #4294967295
 8004468:	4432      	add	r2, r6
 800446a:	45d3      	cmp	fp, sl
 800446c:	b212      	sxth	r2, r2
 800446e:	d133      	bne.n	80044d8 <_ZN12Adafruit_GFX8drawRectEsssst+0xbc>
  drawFastHLine(x, y, w, color);
 8004470:	f8d3 a03c 	ldr.w	sl, [r3, #60]	@ 0x3c
 8004474:	4639      	mov	r1, r7
 8004476:	462b      	mov	r3, r5
 8004478:	4620      	mov	r0, r4
 800447a:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80044ec <_ZN12Adafruit_GFX8drawRectEsssst+0xd0>
 8004482:	f8d3 b020 	ldr.w	fp, [r3, #32]
  drawFastVLine(x, y, h, color);
 8004486:	f8cd 8000 	str.w	r8, [sp]
 800448a:	45d3      	cmp	fp, sl
 800448c:	bf08      	it	eq
 800448e:	f8d3 b038 	ldreq.w	fp, [r3, #56]	@ 0x38
  writeFastVLine(x, y, h, color);
 8004492:	4632      	mov	r2, r6
 8004494:	464b      	mov	r3, r9
 8004496:	4639      	mov	r1, r7
 8004498:	4620      	mov	r0, r4
 800449a:	47d8      	blx	fp
  writeFastVLine(x + w - 1, y, h, color);
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	1e69      	subs	r1, r5, #1
 80044a0:	6a1d      	ldr	r5, [r3, #32]
  drawFastVLine(x, y, h, color);
 80044a2:	f8cd 8000 	str.w	r8, [sp]
 80044a6:	4555      	cmp	r5, sl
  writeFastVLine(x + w - 1, y, h, color);
 80044a8:	4439      	add	r1, r7
  drawFastVLine(x, y, h, color);
 80044aa:	bf08      	it	eq
 80044ac:	6b9d      	ldreq	r5, [r3, #56]	@ 0x38
  writeFastVLine(x + w - 1, y, h, color);
 80044ae:	4632      	mov	r2, r6
 80044b0:	464b      	mov	r3, r9
 80044b2:	b209      	sxth	r1, r1
 80044b4:	4620      	mov	r0, r4
 80044b6:	47a8      	blx	r5
  endWrite();
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	4a0a      	ldr	r2, [pc, #40]	@ (80044e4 <_ZN12Adafruit_GFX8drawRectEsssst+0xc8>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044be:	4293      	cmp	r3, r2
 80044c0:	d105      	bne.n	80044ce <_ZN12Adafruit_GFX8drawRectEsssst+0xb2>
}
 80044c2:	b003      	add	sp, #12
 80044c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 80044c8:	4790      	blx	r2
  writeFastHLine(x, y, w, color);
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	e7b6      	b.n	800443c <_ZN12Adafruit_GFX8drawRectEsssst+0x20>
  endWrite();
 80044ce:	4620      	mov	r0, r4
}
 80044d0:	b003      	add	sp, #12
 80044d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 80044d6:	4718      	bx	r3
  writeFastHLine(x, y + h - 1, w, color);
 80044d8:	462b      	mov	r3, r5
 80044da:	4639      	mov	r1, r7
 80044dc:	4620      	mov	r0, r4
 80044de:	47d8      	blx	fp
 80044e0:	e7cc      	b.n	800447c <_ZN12Adafruit_GFX8drawRectEsssst+0x60>
 80044e2:	bf00      	nop
 80044e4:	08004091 	.word	0x08004091
 80044e8:	080040b9 	.word	0x080040b9
 80044ec:	080040a5 	.word	0x080040a5

080044f0 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
                                 uint16_t color) {
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(x, y, w, h, color);
 80044f4:	f8d0 c000 	ldr.w	ip, [r0]
 80044f8:	f8df e088 	ldr.w	lr, [pc, #136]	@ 8004584 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x94>
 80044fc:	f8dc 6040 	ldr.w	r6, [ip, #64]	@ 0x40
                                 uint16_t color) {
 8004500:	b083      	sub	sp, #12
 8004502:	4576      	cmp	r6, lr
 8004504:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8004508:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800450c:	d128      	bne.n	8004560 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x70>
 800450e:	4690      	mov	r8, r2
 8004510:	461f      	mov	r7, r3
 8004512:	4a1b      	ldr	r2, [pc, #108]	@ (8004580 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x90>)
  startWrite();
 8004514:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8004518:	4293      	cmp	r3, r2
 800451a:	4605      	mov	r5, r0
 800451c:	460c      	mov	r4, r1
 800451e:	d12b      	bne.n	8004578 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x88>
  for (int16_t i = x; i < x + w; i++) {
 8004520:	4427      	add	r7, r4
 8004522:	42bc      	cmp	r4, r7
 8004524:	da14      	bge.n	8004550 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x60>
 8004526:	f8df b060 	ldr.w	fp, [pc, #96]	@ 8004588 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x98>
    writeFastVLine(i, y, h, color);
 800452a:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 800452e:	f8cd a000 	str.w	sl, [sp]
 8004532:	455e      	cmp	r6, fp
 8004534:	4621      	mov	r1, r4
 8004536:	464b      	mov	r3, r9
 8004538:	4642      	mov	r2, r8
 800453a:	4628      	mov	r0, r5
 800453c:	d101      	bne.n	8004542 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x52>
 800453e:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
 8004542:	3401      	adds	r4, #1
  for (int16_t i = x; i < x + w; i++) {
 8004544:	b224      	sxth	r4, r4
    writeFastVLine(i, y, h, color);
 8004546:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8004548:	42bc      	cmp	r4, r7
  endWrite();
 800454a:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 800454e:	dbec      	blt.n	800452a <_ZN12Adafruit_GFX13writeFillRectEsssst+0x3a>
  endWrite();
 8004550:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8004554:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x90>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d109      	bne.n	800456e <_ZN12Adafruit_GFX13writeFillRectEsssst+0x7e>
}
 800455a:	b003      	add	sp, #12
 800455c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fillRect(x, y, w, h, color);
 8004560:	46b4      	mov	ip, r6
 8004562:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	@ 0x30
}
 8004566:	b003      	add	sp, #12
 8004568:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(x, y, w, h, color);
 800456c:	4760      	bx	ip
  endWrite();
 800456e:	4628      	mov	r0, r5
}
 8004570:	b003      	add	sp, #12
 8004572:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8004576:	4718      	bx	r3
  startWrite();
 8004578:	4798      	blx	r3
  endWrite();
 800457a:	f8d5 c000 	ldr.w	ip, [r5]
 800457e:	e7cf      	b.n	8004520 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x30>
 8004580:	08004091 	.word	0x08004091
 8004584:	08004239 	.word	0x08004239
 8004588:	080040a5 	.word	0x080040a5

0800458c <_ZN12Adafruit_GFX10fillScreenEt>:
void Adafruit_GFX::fillScreen(uint16_t color) {
 800458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(0, 0, _width, _height, color);
 8004590:	f8d0 c000 	ldr.w	ip, [r0]
 8004594:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <_ZN12Adafruit_GFX10fillScreenEt+0xa8>)
 8004596:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 800459a:	f9b0 900c 	ldrsh.w	r9, [r0, #12]
 800459e:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 80045a2:	429c      	cmp	r4, r3
void Adafruit_GFX::fillScreen(uint16_t color) {
 80045a4:	b083      	sub	sp, #12
 80045a6:	460f      	mov	r7, r1
 80045a8:	d135      	bne.n	8004616 <_ZN12Adafruit_GFX10fillScreenEt+0x8a>
  startWrite();
 80045aa:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80045ae:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8004638 <_ZN12Adafruit_GFX10fillScreenEt+0xac>
 80045b2:	455b      	cmp	r3, fp
 80045b4:	4605      	mov	r5, r0
 80045b6:	d138      	bne.n	800462a <_ZN12Adafruit_GFX10fillScreenEt+0x9e>
  for (int16_t i = x; i < x + w; i++) {
 80045b8:	f1b9 0f00 	cmp.w	r9, #0
 80045bc:	dd14      	ble.n	80045e8 <_ZN12Adafruit_GFX10fillScreenEt+0x5c>
 80045be:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800463c <_ZN12Adafruit_GFX10fillScreenEt+0xb0>
 80045c2:	2400      	movs	r4, #0
    writeFastVLine(i, y, h, color);
 80045c4:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 80045c8:	9700      	str	r7, [sp, #0]
 80045ca:	4556      	cmp	r6, sl
 80045cc:	4643      	mov	r3, r8
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	4628      	mov	r0, r5
 80045d4:	b221      	sxth	r1, r4
 80045d6:	d10e      	bne.n	80045f6 <_ZN12Adafruit_GFX10fillScreenEt+0x6a>
 80045d8:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
  for (int16_t i = x; i < x + w; i++) {
 80045dc:	3401      	adds	r4, #1
  drawFastVLine(x, y, h, color);
 80045de:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 80045e0:	45a1      	cmp	r9, r4
  endWrite();
 80045e2:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 80045e6:	d1ed      	bne.n	80045c4 <_ZN12Adafruit_GFX10fillScreenEt+0x38>
  endWrite();
 80045e8:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 80045ec:	455b      	cmp	r3, fp
 80045ee:	d10d      	bne.n	800460c <_ZN12Adafruit_GFX10fillScreenEt+0x80>
}
 80045f0:	b003      	add	sp, #12
 80045f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int16_t i = x; i < x + w; i++) {
 80045f6:	3401      	adds	r4, #1
    writeFastVLine(i, y, h, color);
 80045f8:	2200      	movs	r2, #0
 80045fa:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 80045fc:	454c      	cmp	r4, r9
  endWrite();
 80045fe:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8004602:	d1df      	bne.n	80045c4 <_ZN12Adafruit_GFX10fillScreenEt+0x38>
  endWrite();
 8004604:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8004608:	455b      	cmp	r3, fp
 800460a:	d0f1      	beq.n	80045f0 <_ZN12Adafruit_GFX10fillScreenEt+0x64>
 800460c:	4628      	mov	r0, r5
}
 800460e:	b003      	add	sp, #12
 8004610:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8004614:	4718      	bx	r3
  fillRect(0, 0, _width, _height, color);
 8004616:	2200      	movs	r2, #0
 8004618:	9101      	str	r1, [sp, #4]
 800461a:	f8cd 8000 	str.w	r8, [sp]
 800461e:	464b      	mov	r3, r9
 8004620:	4611      	mov	r1, r2
 8004622:	47a0      	blx	r4
}
 8004624:	b003      	add	sp, #12
 8004626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 800462a:	4798      	blx	r3
  endWrite();
 800462c:	f8d5 c000 	ldr.w	ip, [r5]
 8004630:	e7c2      	b.n	80045b8 <_ZN12Adafruit_GFX10fillScreenEt+0x2c>
 8004632:	bf00      	nop
 8004634:	08004239 	.word	0x08004239
 8004638:	08004091 	.word	0x08004091
 800463c:	080040a5 	.word	0x080040a5

08004640 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8004640:	b410      	push	{r4}
 8004642:	2400      	movs	r4, #0
 8004644:	f361 040f 	bfi	r4, r1, #0, #16
 8004648:	f362 441f 	bfi	r4, r2, #16, #16
    Print() : write_error(0) {}
 800464c:	2100      	movs	r1, #0
  textsize_x = textsize_y = 1;
 800464e:	4a08      	ldr	r2, [pc, #32]	@ (8004670 <_ZN12Adafruit_GFXC1Ess+0x30>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8004650:	60c4      	str	r4, [r0, #12]
 8004652:	e9c0 1401 	strd	r1, r4, [r0, #4]
  textsize_x = textsize_y = 1;
 8004656:	6182      	str	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 8004658:	f04f 34ff 	mov.w	r4, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 800465c:	4a05      	ldr	r2, [pc, #20]	@ (8004674 <_ZN12Adafruit_GFXC1Ess+0x34>)
  wrap = true;
 800465e:	7701      	strb	r1, [r0, #28]
  textcolor = textbgcolor = 0xFFFF;
 8004660:	e9c0 1404 	strd	r1, r4, [r0, #16]
  gfxFont = NULL;
 8004664:	6201      	str	r1, [r0, #32]
}
 8004666:	f85d 4b04 	ldr.w	r4, [sp], #4
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 800466a:	6002      	str	r2, [r0, #0]
}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	01000101 	.word	0x01000101
 8004674:	08008348 	.word	0x08008348

08004678 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 8004678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467c:	4682      	mov	sl, r0
 800467e:	b097      	sub	sp, #92	@ 0x5c
 8004680:	461d      	mov	r5, r3
 8004682:	9211      	str	r2, [sp, #68]	@ 0x44
 8004684:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
  if (!gfxFont) { // 'Classic' built-in font
 8004688:	f8da 2020 	ldr.w	r2, [sl, #32]
                            uint8_t size_y) {
 800468c:	f8bd 0080 	ldrh.w	r0, [sp, #128]	@ 0x80
 8004690:	9305      	str	r3, [sp, #20]
 8004692:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8004696:	f8bd 8084 	ldrh.w	r8, [sp, #132]	@ 0x84
 800469a:	9003      	str	r0, [sp, #12]
 800469c:	910a      	str	r1, [sp, #40]	@ 0x28
 800469e:	9307      	str	r3, [sp, #28]
  if (!gfxFont) { // 'Classic' built-in font
 80046a0:	2a00      	cmp	r2, #0
 80046a2:	f000 80e4 	beq.w	800486e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f6>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80046a6:	7a13      	ldrb	r3, [r2, #8]
    startWrite();
 80046a8:	f8da c000 	ldr.w	ip, [sl]
  return gfxFont->bitmap;
 80046ac:	e9d2 2100 	ldrd	r2, r1, [r2]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80046b0:	1aeb      	subs	r3, r5, r3
  return gfxFont->glyph + c;
 80046b2:	b2db      	uxtb	r3, r3
  return gfxFont->bitmap;
 80046b4:	9208      	str	r2, [sp, #32]
  return gfxFont->glyph + c;
 80046b6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80046ba:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80046be:	9306      	str	r3, [sp, #24]
    if (size_x > 1 || size_y > 1) {
 80046c0:	9907      	ldr	r1, [sp, #28]
 80046c2:	9b05      	ldr	r3, [sp, #20]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80046c4:	78d4      	ldrb	r4, [r2, #3]
    if (size_x > 1 || size_y > 1) {
 80046c6:	430b      	orrs	r3, r1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80046c8:	7891      	ldrb	r1, [r2, #2]
 80046ca:	9104      	str	r1, [sp, #16]
    if (size_x > 1 || size_y > 1) {
 80046cc:	2b01      	cmp	r3, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 80046ce:	f992 1005 	ldrsb.w	r1, [r2, #5]
 80046d2:	4bad      	ldr	r3, [pc, #692]	@ (8004988 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x310>)
           yo = pgm_read_byte(&glyph->yOffset);
 80046d4:	f992 2006 	ldrsb.w	r2, [r2, #6]
 80046d8:	9215      	str	r2, [sp, #84]	@ 0x54
      yo16 = yo;
 80046da:	bf88      	it	hi
 80046dc:	4693      	movhi	fp, r2
 80046de:	9309      	str	r3, [sp, #36]	@ 0x24
 80046e0:	461a      	mov	r2, r3
    startWrite();
 80046e2:	f8dc 3014 	ldr.w	r3, [ip, #20]
      xo16 = xo;
 80046e6:	bf8e      	itee	hi
 80046e8:	910d      	strhi	r1, [sp, #52]	@ 0x34
    int16_t xo16 = 0, yo16 = 0;
 80046ea:	f04f 0b00 	movls.w	fp, #0
 80046ee:	f8cd b034 	strls.w	fp, [sp, #52]	@ 0x34
 80046f2:	4293      	cmp	r3, r2
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 80046f4:	9114      	str	r1, [sp, #80]	@ 0x50
    startWrite();
 80046f6:	f040 812f 	bne.w	8004958 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2e0>
    for (yy = 0; yy < h; yy++) {
 80046fa:	2c00      	cmp	r4, #0
 80046fc:	f000 80a9 	beq.w	8004852 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1da>
 8004700:	2700      	movs	r7, #0
 8004702:	e9cd 4b12 	strd	r4, fp, [sp, #72]	@ 0x48
 8004706:	9c03      	ldr	r4, [sp, #12]
 8004708:	463e      	mov	r6, r7
 800470a:	4638      	mov	r0, r7
 800470c:	463a      	mov	r2, r7
      for (xx = 0; xx < w; xx++) {
 800470e:	9b04      	ldr	r3, [sp, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8098 	beq.w	8004846 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ce>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8004716:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004718:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
      for (xx = 0; xx < w; xx++) {
 800471c:	900e      	str	r0, [sp, #56]	@ 0x38
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 800471e:	eb03 0800 	add.w	r8, r3, r0
 8004722:	9b07      	ldr	r3, [sp, #28]
 8004724:	fb08 1803 	mla	r8, r8, r3, r1
 8004728:	fa0f f388 	sxth.w	r3, r8
      for (xx = 0; xx < w; xx++) {
 800472c:	46a3      	mov	fp, r4
 800472e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8004732:	9303      	str	r3, [sp, #12]
      for (xx = 0; xx < w; xx++) {
 8004734:	2500      	movs	r5, #0
 8004736:	4614      	mov	r4, r2
 8004738:	e006      	b.n	8004748 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd0>
 800473a:	9b04      	ldr	r3, [sp, #16]
 800473c:	3501      	adds	r5, #1
 800473e:	b2ed      	uxtb	r5, r5
        bits <<= 1;
 8004740:	0076      	lsls	r6, r6, #1
      for (xx = 0; xx < w; xx++) {
 8004742:	42ab      	cmp	r3, r5
        bits <<= 1;
 8004744:	b2f6      	uxtb	r6, r6
      for (xx = 0; xx < w; xx++) {
 8004746:	d977      	bls.n	8004838 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1c0>
        if (!(bit++ & 7)) {
 8004748:	4623      	mov	r3, r4
 800474a:	1c62      	adds	r2, r4, #1
 800474c:	b2d4      	uxtb	r4, r2
 800474e:	075a      	lsls	r2, r3, #29
 8004750:	d105      	bne.n	800475e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe6>
          bits = pgm_read_byte(&bitmap[bo++]);
 8004752:	9a06      	ldr	r2, [sp, #24]
 8004754:	9908      	ldr	r1, [sp, #32]
 8004756:	1c53      	adds	r3, r2, #1
 8004758:	b29b      	uxth	r3, r3
 800475a:	5c8e      	ldrb	r6, [r1, r2]
 800475c:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 800475e:	0633      	lsls	r3, r6, #24
 8004760:	d5eb      	bpl.n	800473a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
          if (size_x == 1 && size_y == 1) {
 8004762:	9b05      	ldr	r3, [sp, #20]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8004764:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
          if (size_x == 1 && size_y == 1) {
 8004768:	2b01      	cmp	r3, #1
 800476a:	d042      	beq.n	80047f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x17a>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 800476c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800476e:	9a05      	ldr	r2, [sp, #20]
 8004770:	f8dc 901c 	ldr.w	r9, [ip, #28]
 8004774:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8004778:	442b      	add	r3, r5
 800477a:	fb03 7702 	mla	r7, r3, r2, r7
 800477e:	b213      	sxth	r3, r2
 8004780:	4a82      	ldr	r2, [pc, #520]	@ (800498c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x314>)
 8004782:	4591      	cmp	r9, r2
 8004784:	b23f      	sxth	r7, r7
 8004786:	d14e      	bne.n	8004826 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ae>
  fillRect(x, y, w, h, color);
 8004788:	f8dc 9040 	ldr.w	r9, [ip, #64]	@ 0x40
 800478c:	4a80      	ldr	r2, [pc, #512]	@ (8004990 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x318>)
 800478e:	4591      	cmp	r9, r2
 8004790:	d149      	bne.n	8004826 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ae>
  startWrite();
 8004792:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8004796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004798:	4293      	cmp	r3, r2
 800479a:	d163      	bne.n	8004864 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ec>
  for (int16_t i = x; i < x + w; i++) {
 800479c:	9b05      	ldr	r3, [sp, #20]
 800479e:	eb03 0907 	add.w	r9, r3, r7
 80047a2:	45b9      	cmp	r9, r7
 80047a4:	dd1b      	ble.n	80047de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x166>
 80047a6:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
 80047aa:	e00a      	b.n	80047c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x14a>
  drawFastVLine(x, y, h, color);
 80047ac:	f8cd b000 	str.w	fp, [sp]
 80047b0:	f8dc 4038 	ldr.w	r4, [ip, #56]	@ 0x38
 80047b4:	3701      	adds	r7, #1
  for (int16_t i = x; i < x + w; i++) {
 80047b6:	b23f      	sxth	r7, r7
    writeFastVLine(i, y, h, color);
 80047b8:	47a0      	blx	r4
  for (int16_t i = x; i < x + w; i++) {
 80047ba:	45b9      	cmp	r9, r7
  endWrite();
 80047bc:	f8da c000 	ldr.w	ip, [sl]
  for (int16_t i = x; i < x + w; i++) {
 80047c0:	dd0b      	ble.n	80047da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x162>
    writeFastVLine(i, y, h, color);
 80047c2:	f8dc 4020 	ldr.w	r4, [ip, #32]
 80047c6:	4d73      	ldr	r5, [pc, #460]	@ (8004994 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x31c>)
  drawFastVLine(x, y, h, color);
 80047c8:	9a03      	ldr	r2, [sp, #12]
 80047ca:	42ac      	cmp	r4, r5
 80047cc:	4639      	mov	r1, r7
 80047ce:	4643      	mov	r3, r8
 80047d0:	4650      	mov	r0, sl
 80047d2:	d0eb      	beq.n	80047ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    writeFastVLine(i, y, h, color);
 80047d4:	f8cd b000 	str.w	fp, [sp]
 80047d8:	e7ec      	b.n	80047b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x13c>
 80047da:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
  endWrite();
 80047de:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 80047e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d0a8      	beq.n	800473a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
 80047e8:	4650      	mov	r0, sl
 80047ea:	4798      	blx	r3
    endWrite();
 80047ec:	f8da c000 	ldr.w	ip, [sl]
 80047f0:	e7a3      	b.n	800473a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
          if (size_x == 1 && size_y == 1) {
 80047f2:	9b07      	ldr	r3, [sp, #28]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d1b9      	bne.n	800476c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xf4>
            writePixel(x + xo + xx, y + yo + yy, color);
 80047f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80047fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80047fc:	18f9      	adds	r1, r7, r3
 80047fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004800:	f8dc 7018 	ldr.w	r7, [ip, #24]
 8004804:	189a      	adds	r2, r3, r2
 8004806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004808:	441a      	add	r2, r3
 800480a:	4b63      	ldr	r3, [pc, #396]	@ (8004998 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x320>)
 800480c:	4429      	add	r1, r5
 800480e:	429f      	cmp	r7, r3
  drawPixel(x, y, color);
 8004810:	bf08      	it	eq
 8004812:	f8dc 7010 	ldreq.w	r7, [ip, #16]
            writePixel(x + xo + xx, y + yo + yy, color);
 8004816:	b209      	sxth	r1, r1
 8004818:	b212      	sxth	r2, r2
 800481a:	465b      	mov	r3, fp
 800481c:	4650      	mov	r0, sl
 800481e:	47b8      	blx	r7
    endWrite();
 8004820:	f8da c000 	ldr.w	ip, [sl]
 8004824:	e789      	b.n	800473a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8004826:	e9cd 8b00 	strd	r8, fp, [sp]
 800482a:	9a03      	ldr	r2, [sp, #12]
 800482c:	4639      	mov	r1, r7
 800482e:	4650      	mov	r0, sl
 8004830:	47c8      	blx	r9
    endWrite();
 8004832:	f8da c000 	ldr.w	ip, [sl]
 8004836:	e780      	b.n	800473a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
        if (!(bit++ & 7)) {
 8004838:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	@ 0x38
 800483c:	eb02 0e03 	add.w	lr, r2, r3
 8004840:	465c      	mov	r4, fp
 8004842:	fa5f f28e 	uxtb.w	r2, lr
    for (yy = 0; yy < h; yy++) {
 8004846:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004848:	3001      	adds	r0, #1
 800484a:	b2c0      	uxtb	r0, r0
 800484c:	4283      	cmp	r3, r0
 800484e:	f63f af5e 	bhi.w	800470e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x96>
    endWrite();
 8004852:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8004856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004858:	4293      	cmp	r3, r2
 800485a:	f040 80d1 	bne.w	8004a00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x388>
}
 800485e:	b017      	add	sp, #92	@ 0x5c
 8004860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 8004864:	4650      	mov	r0, sl
 8004866:	4798      	blx	r3
  endWrite();
 8004868:	f8da c000 	ldr.w	ip, [sl]
 800486c:	e796      	b.n	800479c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x124>
    if ((x >= _width) ||              // Clip right
 800486e:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 8004872:	428a      	cmp	r2, r1
 8004874:	460b      	mov	r3, r1
 8004876:	ddf2      	ble.n	800485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 8004878:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 800487c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800487e:	428a      	cmp	r2, r1
 8004880:	dded      	ble.n	800485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8004882:	9805      	ldr	r0, [sp, #20]
 8004884:	2206      	movs	r2, #6
 8004886:	fb12 3200 	smlabb	r2, r2, r0, r3
        (y >= _height) ||             // Clip bottom
 800488a:	2a00      	cmp	r2, #0
 800488c:	dde7      	ble.n	800485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 800488e:	9b07      	ldr	r3, [sp, #28]
 8004890:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8004894:	2a00      	cmp	r2, #0
 8004896:	dde2      	ble.n	800485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
    if (!_cp437 && (c >= 176))
 8004898:	f89a 201c 	ldrb.w	r2, [sl, #28]
 800489c:	2a00      	cmp	r2, #0
 800489e:	f000 80c7 	beq.w	8004a30 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3b8>
    startWrite();
 80048a2:	f8da 0000 	ldr.w	r0, [sl]
 80048a6:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x310>)
 80048a8:	6942      	ldr	r2, [r0, #20]
 80048aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ac:	429a      	cmp	r2, r3
 80048ae:	f040 80d6 	bne.w	8004a5e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3e6>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80048b2:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 80048b6:	4a39      	ldr	r2, [pc, #228]	@ (800499c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x324>)
            writePixel(x + i, y + j, color);
 80048b8:	f8bd b044 	ldrh.w	fp, [sp, #68]	@ 0x44
 80048bc:	9f05      	ldr	r7, [sp, #20]
 80048be:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80048c2:	f8cd 8010 	str.w	r8, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80048c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80048ca:	1d61      	adds	r1, r4, #5
 80048cc:	b289      	uxth	r1, r1
 80048ce:	442a      	add	r2, r5
            writePixel(x + i, y + j, color);
 80048d0:	910e      	str	r1, [sp, #56]	@ 0x38
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80048d2:	46a4      	mov	ip, r4
            writePixel(x + i, y + j, color);
 80048d4:	4611      	mov	r1, r2
 80048d6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80048d8:	4603      	mov	r3, r0
 80048da:	46a0      	mov	r8, r4
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80048dc:	fa0f f288 	sxth.w	r2, r8
 80048e0:	9206      	str	r2, [sp, #24]
 80048e2:	b23a      	sxth	r2, r7
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80048e4:	f811 6b01 	ldrb.w	r6, [r1], #1
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80048e8:	9208      	str	r2, [sp, #32]
 80048ea:	fa0f f289 	sxth.w	r2, r9
 80048ee:	920a      	str	r2, [sp, #40]	@ 0x28
 80048f0:	463a      	mov	r2, r7
 80048f2:	e9cd 810c 	strd	r8, r1, [sp, #48]	@ 0x30
 80048f6:	4657      	mov	r7, sl
 80048f8:	2408      	movs	r4, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80048fa:	2500      	movs	r5, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80048fc:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8004900:	4692      	mov	sl, r2
 8004902:	e01a      	b.n	800493a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c2>
          if (size_x == 1 && size_y == 1)
 8004904:	f1ba 0f01 	cmp.w	sl, #1
            writePixel(x + i, y + j, color);
 8004908:	b2aa      	uxth	r2, r5
          if (size_x == 1 && size_y == 1)
 800490a:	d02a      	beq.n	8004962 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ea>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 800490c:	fb19 f202 	smulbb	r2, r9, r2
 8004910:	9903      	ldr	r1, [sp, #12]
 8004912:	445a      	add	r2, fp
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8004914:	9101      	str	r1, [sp, #4]
 8004916:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004918:	9100      	str	r1, [sp, #0]
 800491a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800491e:	9906      	ldr	r1, [sp, #24]
 8004920:	9b08      	ldr	r3, [sp, #32]
 8004922:	b212      	sxth	r2, r2
 8004924:	4638      	mov	r0, r7
 8004926:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 8004928:	683b      	ldr	r3, [r7, #0]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800492a:	3c01      	subs	r4, #1
 800492c:	3501      	adds	r5, #1
 800492e:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8004932:	b26d      	sxtb	r5, r5
 8004934:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004938:	d032      	beq.n	80049a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x328>
        if (line & 1) {
 800493a:	07f1      	lsls	r1, r6, #31
 800493c:	d4e2      	bmi.n	8004904 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x28c>
        } else if (bg != color) {
 800493e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8004942:	428a      	cmp	r2, r1
 8004944:	d0f1      	beq.n	800492a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
          if (size_x == 1 && size_y == 1)
 8004946:	f1ba 0f01 	cmp.w	sl, #1
            writePixel(x + i, y + j, color);
 800494a:	b2aa      	uxth	r2, r5
          if (size_x == 1 && size_y == 1)
 800494c:	d05d      	beq.n	8004a0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x392>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800494e:	fb19 f202 	smulbb	r2, r9, r2
 8004952:	9904      	ldr	r1, [sp, #16]
 8004954:	445a      	add	r2, fp
 8004956:	e7dd      	b.n	8004914 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29c>
    startWrite();
 8004958:	4650      	mov	r0, sl
 800495a:	4798      	blx	r3
    endWrite();
 800495c:	f8da c000 	ldr.w	ip, [sl]
 8004960:	e6cb      	b.n	80046fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
          if (size_x == 1 && size_y == 1)
 8004962:	f1b9 0f01 	cmp.w	r9, #1
 8004966:	d1d1      	bne.n	800490c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x294>
            writePixel(x + i, y + j, color);
 8004968:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800496c:	480a      	ldr	r0, [pc, #40]	@ (8004998 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x320>)
 800496e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8004972:	4580      	cmp	r8, r0
 8004974:	445a      	add	r2, fp
  drawPixel(x, y, color);
 8004976:	bf08      	it	eq
 8004978:	f8d3 8010 	ldreq.w	r8, [r3, #16]
            writePixel(x + i, y + j, color);
 800497c:	9b03      	ldr	r3, [sp, #12]
 800497e:	b212      	sxth	r2, r2
 8004980:	4638      	mov	r0, r7
 8004982:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	e7d0      	b.n	800492a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
 8004988:	08004091 	.word	0x08004091
 800498c:	080044f1 	.word	0x080044f1
 8004990:	08004239 	.word	0x08004239
 8004994:	080040a5 	.word	0x080040a5
 8004998:	08004095 	.word	0x08004095
 800499c:	08008398 	.word	0x08008398
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80049a0:	e9dd 810c 	ldrd	r8, r1, [sp, #48]	@ 0x30
 80049a4:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 80049a8:	4652      	mov	r2, sl
 80049aa:	4490      	add	r8, r2
 80049ac:	46ba      	mov	sl, r7
 80049ae:	f10c 0c01 	add.w	ip, ip, #1
 80049b2:	4617      	mov	r7, r2
 80049b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049b6:	fa1f fc8c 	uxth.w	ip, ip
 80049ba:	4562      	cmp	r2, ip
 80049bc:	fa1f f888 	uxth.w	r8, r8
 80049c0:	d18c      	bne.n	80048dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x264>
    if (bg != color) { // If opaque, draw vertical line for last column
 80049c2:	4618      	mov	r0, r3
 80049c4:	e9dd 3803 	ldrd	r3, r8, [sp, #12]
 80049c8:	4543      	cmp	r3, r8
 80049ca:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80049cc:	d013      	beq.n	80049f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x37e>
      if (size_x == 1 && size_y == 1)
 80049ce:	9b05      	ldr	r3, [sp, #20]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d032      	beq.n	8004a3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3c2>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80049d4:	9b07      	ldr	r3, [sp, #28]
 80049d6:	f8cd 8004 	str.w	r8, [sp, #4]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	69c5      	ldr	r5, [r0, #28]
 80049e0:	9805      	ldr	r0, [sp, #20]
 80049e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80049e4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80049e8:	18e1      	adds	r1, r4, r3
 80049ea:	b209      	sxth	r1, r1
 80049ec:	4603      	mov	r3, r0
 80049ee:	4650      	mov	r0, sl
 80049f0:	47a8      	blx	r5
    endWrite();
 80049f2:	f8da 0000 	ldr.w	r0, [sl]
 80049f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80049f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f43f af2f 	beq.w	800485e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
    endWrite();
 8004a00:	4650      	mov	r0, sl
}
 8004a02:	b017      	add	sp, #92	@ 0x5c
 8004a04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 8004a08:	4718      	bx	r3
          if (size_x == 1 && size_y == 1)
 8004a0a:	f1b9 0f01 	cmp.w	r9, #1
 8004a0e:	d19e      	bne.n	800494e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d6>
            writePixel(x + i, y + j, bg);
 8004a10:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8004a14:	4814      	ldr	r0, [pc, #80]	@ (8004a68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f0>)
 8004a16:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8004a1a:	4580      	cmp	r8, r0
 8004a1c:	445a      	add	r2, fp
  drawPixel(x, y, color);
 8004a1e:	bf08      	it	eq
 8004a20:	f8d3 8010 	ldreq.w	r8, [r3, #16]
            writePixel(x + i, y + j, bg);
 8004a24:	9b04      	ldr	r3, [sp, #16]
 8004a26:	b212      	sxth	r2, r2
 8004a28:	4638      	mov	r0, r7
 8004a2a:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	e77c      	b.n	800492a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
    if (!_cp437 && (c >= 176))
 8004a30:	2daf      	cmp	r5, #175	@ 0xaf
      c++; // Handle 'classic' charset behavior
 8004a32:	bf84      	itt	hi
 8004a34:	3501      	addhi	r5, #1
 8004a36:	b2ed      	uxtbhi	r5, r5
 8004a38:	e733      	b.n	80048a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x22a>
      if (size_x == 1 && size_y == 1)
 8004a3a:	9b07      	ldr	r3, [sp, #28]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d1c9      	bne.n	80049d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x35c>
        writeFastVLine(x + 5, y, 8, bg);
 8004a40:	6a04      	ldr	r4, [r0, #32]
  drawFastVLine(x, y, h, color);
 8004a42:	f8cd 8000 	str.w	r8, [sp]
        writeFastVLine(x + 5, y, 8, bg);
 8004a46:	b211      	sxth	r1, r2
 8004a48:	4a08      	ldr	r2, [pc, #32]	@ (8004a6c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>)
 8004a4a:	4294      	cmp	r4, r2
  drawFastVLine(x, y, h, color);
 8004a4c:	bf08      	it	eq
 8004a4e:	6b84      	ldreq	r4, [r0, #56]	@ 0x38
        writeFastVLine(x + 5, y, 8, bg);
 8004a50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004a52:	4650      	mov	r0, sl
 8004a54:	2308      	movs	r3, #8
 8004a56:	47a0      	blx	r4
    endWrite();
 8004a58:	f8da 0000 	ldr.w	r0, [sl]
 8004a5c:	e7cb      	b.n	80049f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x37e>
    startWrite();
 8004a5e:	4650      	mov	r0, sl
 8004a60:	4790      	blx	r2
            writePixel(x + i, y + j, color);
 8004a62:	f8da 0000 	ldr.w	r0, [sl]
 8004a66:	e724      	b.n	80048b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x23a>
 8004a68:	08004095 	.word	0x08004095
 8004a6c:	080040a5 	.word	0x080040a5

08004a70 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 8004a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a72:	4604      	mov	r4, r0
  if (!gfxFont) { // 'Classic' built-in font
 8004a74:	6a00      	ldr	r0, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 8004a76:	b085      	sub	sp, #20
 8004a78:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d047      	beq.n	8004b0e <_ZN12Adafruit_GFX5writeEh+0x9e>
    if (c == '\n') {
 8004a7e:	290a      	cmp	r1, #10
 8004a80:	d03a      	beq.n	8004af8 <_ZN12Adafruit_GFX5writeEh+0x88>
    } else if (c != '\r') {
 8004a82:	290d      	cmp	r1, #13
 8004a84:	d040      	beq.n	8004b08 <_ZN12Adafruit_GFX5writeEh+0x98>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 8004a86:	7a02      	ldrb	r2, [r0, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8004a88:	4291      	cmp	r1, r2
 8004a8a:	d33d      	bcc.n	8004b08 <_ZN12Adafruit_GFX5writeEh+0x98>
 8004a8c:	7a81      	ldrb	r1, [r0, #10]
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	d33a      	bcc.n	8004b08 <_ZN12Adafruit_GFX5writeEh+0x98>
  return gfxFont->glyph + c;
 8004a92:	6845      	ldr	r5, [r0, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 8004a94:	1a9a      	subs	r2, r3, r2
  return gfxFont->glyph + c;
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 8004a9c:	78ae      	ldrb	r6, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8004a9e:	b326      	cbz	r6, 8004aea <_ZN12Adafruit_GFX5writeEh+0x7a>
 8004aa0:	78ea      	ldrb	r2, [r5, #3]
 8004aa2:	b312      	cbz	r2, 8004aea <_ZN12Adafruit_GFX5writeEh+0x7a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8004aa4:	7ee7      	ldrb	r7, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8004aa6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8004aaa:	f894 c018 	ldrb.w	ip, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 8004aae:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8004ab2:	f894 e019 	ldrb.w	lr, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8004ab6:	b17f      	cbz	r7, 8004ad8 <_ZN12Adafruit_GFX5writeEh+0x68>
 8004ab8:	f995 7005 	ldrsb.w	r7, [r5, #5]
 8004abc:	443e      	add	r6, r7
 8004abe:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004ac2:	fb0c 1606 	mla	r6, ip, r6, r1
 8004ac6:	42be      	cmp	r6, r7
 8004ac8:	dd06      	ble.n	8004ad8 <_ZN12Adafruit_GFX5writeEh+0x68>
            cursor_x = 0;
 8004aca:	2100      	movs	r1, #0
 8004acc:	8221      	strh	r1, [r4, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004ace:	7b00      	ldrb	r0, [r0, #12]
            cursor_y += (int16_t)textsize_y *
 8004ad0:	fb00 200e 	mla	r0, r0, lr, r2
 8004ad4:	b202      	sxth	r2, r0
 8004ad6:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8004ad8:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8004adc:	8ae0      	ldrh	r0, [r4, #22]
 8004ade:	9001      	str	r0, [sp, #4]
 8004ae0:	8aa0      	ldrh	r0, [r4, #20]
 8004ae2:	9000      	str	r0, [sp, #0]
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f7ff fdc7 	bl	8004678 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8004aea:	7929      	ldrb	r1, [r5, #4]
        cursor_x +=
 8004aec:	8a23      	ldrh	r3, [r4, #16]
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8004aee:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 8004af0:	fb01 3302 	mla	r3, r1, r2, r3
 8004af4:	8223      	strh	r3, [r4, #16]
 8004af6:	e007      	b.n	8004b08 <_ZN12Adafruit_GFX5writeEh+0x98>
      cursor_x = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	8223      	strh	r3, [r4, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004afc:	7b02      	ldrb	r2, [r0, #12]
      cursor_y +=
 8004afe:	8a63      	ldrh	r3, [r4, #18]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004b00:	7e61      	ldrb	r1, [r4, #25]
      cursor_y +=
 8004b02:	fb01 3302 	mla	r3, r1, r2, r3
 8004b06:	8263      	strh	r3, [r4, #18]
}
 8004b08:	2001      	movs	r0, #1
 8004b0a:	b005      	add	sp, #20
 8004b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c == '\n') {              // Newline?
 8004b0e:	290a      	cmp	r1, #10
 8004b10:	d02a      	beq.n	8004b68 <_ZN12Adafruit_GFX5writeEh+0xf8>
    } else if (c != '\r') {       // Ignore carriage returns
 8004b12:	290d      	cmp	r1, #13
 8004b14:	d0f8      	beq.n	8004b08 <_ZN12Adafruit_GFX5writeEh+0x98>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8004b16:	7ee7      	ldrb	r7, [r4, #27]
 8004b18:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8004b1c:	7e25      	ldrb	r5, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 8004b1e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8004b22:	7e66      	ldrb	r6, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8004b24:	b16f      	cbz	r7, 8004b42 <_ZN12Adafruit_GFX5writeEh+0xd2>
 8004b26:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004b2a:	f04f 0c06 	mov.w	ip, #6
 8004b2e:	fb1c 1c05 	smlabb	ip, ip, r5, r1
 8004b32:	45bc      	cmp	ip, r7
 8004b34:	dd05      	ble.n	8004b42 <_ZN12Adafruit_GFX5writeEh+0xd2>
        cursor_y += textsize_y * 8; // advance y one line
 8004b36:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8004b3a:	b212      	sxth	r2, r2
        cursor_x = 0;                                       // Reset x to zero,
 8004b3c:	8220      	strh	r0, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 8004b3e:	8262      	strh	r2, [r4, #18]
 8004b40:	4601      	mov	r1, r0
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8004b42:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8004b46:	8ae0      	ldrh	r0, [r4, #22]
 8004b48:	9001      	str	r0, [sp, #4]
 8004b4a:	8aa0      	ldrh	r0, [r4, #20]
 8004b4c:	9000      	str	r0, [sp, #0]
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7ff fd92 	bl	8004678 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 8004b54:	7e23      	ldrb	r3, [r4, #24]
 8004b56:	8a22      	ldrh	r2, [r4, #16]
 8004b58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b5c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}
 8004b60:	2001      	movs	r0, #1
      cursor_x += textsize_x * 6; // Advance x one char
 8004b62:	8223      	strh	r3, [r4, #16]
}
 8004b64:	b005      	add	sp, #20
 8004b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cursor_y += textsize_y * 8; // advance y one line
 8004b68:	8a63      	ldrh	r3, [r4, #18]
 8004b6a:	7e62      	ldrb	r2, [r4, #25]
      cursor_x = 0;               // Reset x to zero,
 8004b6c:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 8004b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
}
 8004b72:	2001      	movs	r0, #1
      cursor_y += textsize_y * 8; // advance y one line
 8004b74:	8263      	strh	r3, [r4, #18]
}
 8004b76:	b005      	add	sp, #20
 8004b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7a:	bf00      	nop

08004b7c <_ZN12Adafruit_GFX11setTextSizeEh>:
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8004b7c:	2901      	cmp	r1, #1
 8004b7e:	bf38      	it	cc
 8004b80:	2101      	movcc	r1, #1
  textsize_x = (s_x > 0) ? s_x : 1;
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	f361 0307 	bfi	r3, r1, #0, #8
 8004b8a:	f361 230f 	bfi	r3, r1, #8, #8
 8004b8e:	8303      	strh	r3, [r0, #24]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop

08004b94 <_ZN15Adafruit_SPITFT10startWriteEv>:
#else  // !HAS_PORT_SET_CLR
    *csPort &= csPinMaskClr;
#endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
//    digitalWrite(_cs, LOW);
    callback(SpiCmd::cs_low, 0, 0);
 8004b94:	2200      	movs	r2, #0
 8004b96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004b98:	4611      	mov	r1, r2
 8004b9a:	2002      	movs	r0, #2
 8004b9c:	4718      	bx	r3
 8004b9e:	bf00      	nop

08004ba0 <_ZN15Adafruit_SPITFT8endWriteEv>:
    callback(SpiCmd::cs_high, 0, 0);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	4718      	bx	r3
 8004baa:	bf00      	nop

08004bac <_ZN15Adafruit_SPITFT10writePixelEsst>:
    @param  x      Horizontal position (0 = left).
    @param  y      Vertical position   (0 = top).
    @param  color  16-bit pixel color in '565' RGB format.
*/
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004bac:	2900      	cmp	r1, #0
 8004bae:	db1e      	blt.n	8004bee <_ZN15Adafruit_SPITFT10writePixelEsst+0x42>
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	461c      	mov	r4, r3
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004bb4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8004bb8:	428b      	cmp	r3, r1
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 8004bba:	b084      	sub	sp, #16
 8004bbc:	4605      	mov	r5, r0
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004bbe:	dd14      	ble.n	8004bea <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
 8004bc0:	2a00      	cmp	r2, #0
 8004bc2:	db12      	blt.n	8004bea <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
 8004bc4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	dd0e      	ble.n	8004bea <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
    setAddrWindow(x, y, 1, 1);
 8004bcc:	6806      	ldr	r6, [r0, #0]
 8004bce:	2301      	movs	r3, #1
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	b292      	uxth	r2, r2
 8004bd4:	b289      	uxth	r1, r1
 8004bd6:	6d76      	ldr	r6, [r6, #84]	@ 0x54
 8004bd8:	47b0      	blx	r6
#endif
    TFT_WR_STROBE();
  }
#endif
  uint8_t data[2];
  data[0] = w >> 8;
 8004bda:	ba63      	rev16	r3, r4
 8004bdc:	f8ad 300c 	strh.w	r3, [sp, #12]
  data[1] = w;
  callback(SpiCmd::transmit, data, 2);
 8004be0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8004be2:	2202      	movs	r2, #2
 8004be4:	a903      	add	r1, sp, #12
 8004be6:	2006      	movs	r0, #6
 8004be8:	47a0      	blx	r4
}
 8004bea:	b004      	add	sp, #16
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	4770      	bx	lr

08004bf0 <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 8004bf0:	b530      	push	{r4, r5, lr}
  startWrite();
 8004bf2:	6803      	ldr	r3, [r0, #0]
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x74>)
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	4293      	cmp	r3, r2
void Adafruit_SPITFT::invertDisplay(bool i) {
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	460d      	mov	r5, r1
 8004c00:	d129      	bne.n	8004c56 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x66>
    callback(SpiCmd::cs_low, 0, 0);
 8004c02:	2200      	movs	r2, #0
 8004c04:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004c06:	4611      	mov	r1, r2
 8004c08:	2002      	movs	r0, #2
 8004c0a:	4798      	blx	r3
  writeCommand(i ? invertOnCommand : invertOffCommand);
 8004c0c:	b305      	cbz	r5, 8004c50 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x60>
 8004c0e:	f894 5028 	ldrb.w	r5, [r4, #40]	@ 0x28
#else  // !HAS_PORT_SET_CLR
    *dcPort &= dcPinMaskClr;
#endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
//    digitalWrite(_dc, LOW);
    callback(SpiCmd::dc_low, 0, 0);
 8004c12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c14:	2200      	movs	r2, #0
 8004c16:	4611      	mov	r1, r2
 8004c18:	2004      	movs	r0, #4
 8004c1a:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8004c1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c1e:	f88d 5007 	strb.w	r5, [sp, #7]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f10d 0107 	add.w	r1, sp, #7
 8004c28:	2006      	movs	r0, #6
 8004c2a:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c30:	4611      	mov	r1, r2
 8004c32:	2005      	movs	r0, #5
 8004c34:	4798      	blx	r3
  endWrite();
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	4a0b      	ldr	r2, [pc, #44]	@ (8004c68 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x78>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10c      	bne.n	8004c5a <_ZN15Adafruit_SPITFT13invertDisplayEb+0x6a>
    callback(SpiCmd::cs_high, 0, 0);
 8004c40:	2200      	movs	r2, #0
 8004c42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c44:	4611      	mov	r1, r2
 8004c46:	2003      	movs	r0, #3
}
 8004c48:	b003      	add	sp, #12
 8004c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c4e:	4718      	bx	r3
  writeCommand(i ? invertOnCommand : invertOffCommand);
 8004c50:	f894 5029 	ldrb.w	r5, [r4, #41]	@ 0x29
 8004c54:	e7dd      	b.n	8004c12 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x22>
  startWrite();
 8004c56:	4798      	blx	r3
 8004c58:	e7d8      	b.n	8004c0c <_ZN15Adafruit_SPITFT13invertDisplayEb+0x1c>
  endWrite();
 8004c5a:	4620      	mov	r0, r4
}
 8004c5c:	b003      	add	sp, #12
 8004c5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  endWrite();
 8004c62:	4718      	bx	r3
 8004c64:	08004b95 	.word	0x08004b95
 8004c68:	08004ba1 	.word	0x08004ba1

08004c6c <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
                                            uint16_t color) {
 8004c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c70:	b084      	sub	sp, #16
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8004c72:	2900      	cmp	r1, #0
                                            uint16_t color) {
 8004c74:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8004c78:	db32      	blt.n	8004ce0 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8004c80:	4288      	cmp	r0, r1
 8004c82:	dd2d      	ble.n	8004ce0 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d02b      	beq.n	8004ce0 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
    if (h < 0) {                       // If negative height...
 8004c88:	da05      	bge.n	8004c96 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x2a>
      y += h + 1;                      //   Move Y to top edge
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3201      	adds	r2, #1
 8004c8e:	441a      	add	r2, r3
      h = -h;                          //   Use positive height
 8004c90:	425b      	negs	r3, r3
      y += h + 1;                      //   Move Y to top edge
 8004c92:	b212      	sxth	r2, r2
      h = -h;                          //   Use positive height
 8004c94:	b21b      	sxth	r3, r3
    if (y < _height) { // Not off bottom
 8004c96:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
 8004c9a:	4290      	cmp	r0, r2
 8004c9c:	dd20      	ble.n	8004ce0 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
      int16_t y2 = y + h - 1;
 8004c9e:	fa1f fc82 	uxth.w	ip, r2
 8004ca2:	fa1f fe83 	uxth.w	lr, r3
 8004ca6:	eb0c 070e 	add.w	r7, ip, lr
 8004caa:	b2bf      	uxth	r7, r7
 8004cac:	1e7c      	subs	r4, r7, #1
 8004cae:	b224      	sxth	r4, r4
      if (y2 >= 0) { // Not off top
 8004cb0:	2c00      	cmp	r4, #0
 8004cb2:	db15      	blt.n	8004ce0 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
        if (y < 0) {
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	da03      	bge.n	8004cc0 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
          h = y2 + 1;
 8004cb8:	b23b      	sxth	r3, r7
 8004cba:	46be      	mov	lr, r7
 8004cbc:	f04f 0c00 	mov.w	ip, #0
  setAddrWindow(x, y, w, h);
 8004cc0:	6832      	ldr	r2, [r6, #0]
        if (y2 >= _height) {
 8004cc2:	42a0      	cmp	r0, r4
  setAddrWindow(x, y, w, h);
 8004cc4:	f8d2 8054 	ldr.w	r8, [r2, #84]	@ 0x54
 8004cc8:	b289      	uxth	r1, r1
        if (y2 >= _height) {
 8004cca:	dc0c      	bgt.n	8004ce6 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x7a>
          h = _height - y;
 8004ccc:	eba0 000c 	sub.w	r0, r0, ip
 8004cd0:	b287      	uxth	r7, r0
  setAddrWindow(x, y, w, h);
 8004cd2:	9700      	str	r7, [sp, #0]
 8004cd4:	4662      	mov	r2, ip
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4630      	mov	r0, r6
 8004cda:	47c0      	blx	r8
  writeColor(color, (uint32_t)w * h);
 8004cdc:	b23c      	sxth	r4, r7
  if (!len)
 8004cde:	b94f      	cbnz	r7, 8004cf4 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x88>
}
 8004ce0:	b004      	add	sp, #16
 8004ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  writeColor(color, (uint32_t)w * h);
 8004ce6:	461c      	mov	r4, r3
  setAddrWindow(x, y, w, h);
 8004ce8:	f8cd e000 	str.w	lr, [sp]
 8004cec:	4662      	mov	r2, ip
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	47c0      	blx	r8
    while (len--) {
 8004cf4:	ba6d      	rev16	r5, r5
      callback(SpiCmd::transmit, data, 2);
 8004cf6:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8004cf8:	f8ad 500c 	strh.w	r5, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	a903      	add	r1, sp, #12
 8004d00:	2006      	movs	r0, #6
 8004d02:	4798      	blx	r3
    while (len--) {
 8004d04:	3c01      	subs	r4, #1
 8004d06:	d1f6      	bne.n	8004cf6 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x8a>
 8004d08:	e7ea      	b.n	8004ce0 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 8004d0a:	bf00      	nop

08004d0c <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
                                            uint16_t color) {
 8004d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d10:	b084      	sub	sp, #16
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8004d12:	2a00      	cmp	r2, #0
                                            uint16_t color) {
 8004d14:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8004d18:	db36      	blt.n	8004d88 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 8004d1a:	461c      	mov	r4, r3
 8004d1c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	4606      	mov	r6, r0
 8004d24:	dd30      	ble.n	8004d88 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 8004d26:	2c00      	cmp	r4, #0
 8004d28:	d02e      	beq.n	8004d88 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
    if (w < 0) {                        // If negative width...
 8004d2a:	da05      	bge.n	8004d38 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x2c>
      x += w + 1;                       //   Move X to left edge
 8004d2c:	b2a4      	uxth	r4, r4
 8004d2e:	3101      	adds	r1, #1
 8004d30:	4421      	add	r1, r4
      w = -w;                           //   Use positive width
 8004d32:	4264      	negs	r4, r4
      x += w + 1;                       //   Move X to left edge
 8004d34:	b209      	sxth	r1, r1
      w = -w;                           //   Use positive width
 8004d36:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 8004d38:	f9b6 000c 	ldrsh.w	r0, [r6, #12]
 8004d3c:	4288      	cmp	r0, r1
 8004d3e:	dd23      	ble.n	8004d88 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
      int16_t x2 = x + w - 1;
 8004d40:	fa1f fc81 	uxth.w	ip, r1
 8004d44:	b2a3      	uxth	r3, r4
 8004d46:	eb0c 0e03 	add.w	lr, ip, r3
 8004d4a:	fa1f fe8e 	uxth.w	lr, lr
 8004d4e:	f10e 37ff 	add.w	r7, lr, #4294967295
 8004d52:	b23f      	sxth	r7, r7
      if (x2 >= 0) { // Not off left
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	db17      	blt.n	8004d88 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
        if (x < 0) {
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	da04      	bge.n	8004d66 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x5a>
          w = x2 + 1;
 8004d5c:	fa0f f48e 	sxth.w	r4, lr
 8004d60:	4673      	mov	r3, lr
 8004d62:	f04f 0c00 	mov.w	ip, #0
  setAddrWindow(x, y, w, h);
 8004d66:	6831      	ldr	r1, [r6, #0]
        if (x2 >= _width) {
 8004d68:	42b8      	cmp	r0, r7
  setAddrWindow(x, y, w, h);
 8004d6a:	f8d1 8054 	ldr.w	r8, [r1, #84]	@ 0x54
 8004d6e:	b292      	uxth	r2, r2
        if (x2 >= _width) {
 8004d70:	dc0d      	bgt.n	8004d8e <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x82>
          w = _width - x;
 8004d72:	eba0 000c 	sub.w	r0, r0, ip
 8004d76:	b287      	uxth	r7, r0
  setAddrWindow(x, y, w, h);
 8004d78:	2301      	movs	r3, #1
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	4661      	mov	r1, ip
 8004d7e:	463b      	mov	r3, r7
 8004d80:	4630      	mov	r0, r6
 8004d82:	47c0      	blx	r8
  writeColor(color, (uint32_t)w * h);
 8004d84:	b23c      	sxth	r4, r7
  if (!len)
 8004d86:	b93f      	cbnz	r7, 8004d98 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x8c>
}
 8004d88:	b004      	add	sp, #16
 8004d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  setAddrWindow(x, y, w, h);
 8004d8e:	2001      	movs	r0, #1
 8004d90:	9000      	str	r0, [sp, #0]
 8004d92:	4661      	mov	r1, ip
 8004d94:	4630      	mov	r0, r6
 8004d96:	47c0      	blx	r8
    while (len--) {
 8004d98:	ba6d      	rev16	r5, r5
      callback(SpiCmd::transmit, data, 2);
 8004d9a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8004d9c:	f8ad 500c 	strh.w	r5, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 8004da0:	2202      	movs	r2, #2
 8004da2:	a903      	add	r1, sp, #12
 8004da4:	2006      	movs	r0, #6
 8004da6:	4798      	blx	r3
    while (len--) {
 8004da8:	3c01      	subs	r4, #1
 8004daa:	d1f6      	bne.n	8004d9a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x8e>
 8004dac:	e7ec      	b.n	8004d88 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 8004dae:	bf00      	nop

08004db0 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8004db0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004db2:	1e0c      	subs	r4, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8004db4:	b085      	sub	sp, #20
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8004db6:	db33      	blt.n	8004e20 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 8004db8:	461f      	mov	r7, r3
 8004dba:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	dd2d      	ble.n	8004e20 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 8004dc4:	2a00      	cmp	r2, #0
 8004dc6:	4616      	mov	r6, r2
 8004dc8:	db2a      	blt.n	8004e20 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 8004dca:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	dd26      	ble.n	8004e20 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
    startWrite();
 8004dd2:	6803      	ldr	r3, [r0, #0]
 8004dd4:	4a17      	ldr	r2, [pc, #92]	@ (8004e34 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x84>)
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d123      	bne.n	8004e24 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x74>
    callback(SpiCmd::cs_low, 0, 0);
 8004ddc:	2200      	movs	r2, #0
 8004dde:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004de0:	4611      	mov	r1, r2
 8004de2:	2002      	movs	r0, #2
 8004de4:	4798      	blx	r3
    setAddrWindow(x, y, 1, 1);
 8004de6:	6828      	ldr	r0, [r5, #0]
 8004de8:	2301      	movs	r3, #1
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	b2a1      	uxth	r1, r4
 8004dee:	b2b2      	uxth	r2, r6
 8004df0:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8004df2:	4628      	mov	r0, r5
 8004df4:	47a0      	blx	r4
  data[0] = w >> 8;
 8004df6:	ba7b      	rev16	r3, r7
 8004df8:	f8ad 300c 	strh.w	r3, [sp, #12]
  callback(SpiCmd::transmit, data, 2);
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8004e00:	a903      	add	r1, sp, #12
 8004e02:	2006      	movs	r0, #6
 8004e04:	47a0      	blx	r4
    endWrite();
 8004e06:	682b      	ldr	r3, [r5, #0]
 8004e08:	4a0b      	ldr	r2, [pc, #44]	@ (8004e38 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x88>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10b      	bne.n	8004e28 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x78>
    callback(SpiCmd::cs_high, 0, 0);
 8004e10:	2200      	movs	r2, #0
 8004e12:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004e14:	4611      	mov	r1, r2
 8004e16:	2003      	movs	r0, #3
}
 8004e18:	b005      	add	sp, #20
 8004e1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004e1e:	4718      	bx	r3
 8004e20:	b005      	add	sp, #20
 8004e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    startWrite();
 8004e24:	4798      	blx	r3
 8004e26:	e7de      	b.n	8004de6 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x36>
    endWrite();
 8004e28:	4628      	mov	r0, r5
}
 8004e2a:	b005      	add	sp, #20
 8004e2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    endWrite();
 8004e30:	4718      	bx	r3
 8004e32:	bf00      	nop
 8004e34:	08004b95 	.word	0x08004b95
 8004e38:	08004ba1 	.word	0x08004ba1

08004e3c <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
                                    uint16_t color) {
 8004e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e40:	b087      	sub	sp, #28
 8004e42:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 8004e46:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
  if (w && h) {   // Nonzero width and height?
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d06a      	beq.n	8004f24 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
 8004e4e:	2e00      	cmp	r6, #0
 8004e50:	d068      	beq.n	8004f24 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
    if (w < 0) {  // If negative width...
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	4605      	mov	r5, r0
 8004e56:	461c      	mov	r4, r3
 8004e58:	db67      	blt.n	8004f2a <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xee>
    if (x < _width) { // Not off right
 8004e5a:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8004e5e:	4288      	cmp	r0, r1
 8004e60:	dd60      	ble.n	8004f24 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
      if (h < 0) {    // If negative height...
 8004e62:	2e00      	cmp	r6, #0
 8004e64:	da05      	bge.n	8004e72 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x36>
        y += h + 1;   //   Move Y to top edge
 8004e66:	b2b6      	uxth	r6, r6
 8004e68:	3201      	adds	r2, #1
 8004e6a:	4432      	add	r2, r6
        h = -h;       //   Use positive height
 8004e6c:	4276      	negs	r6, r6
        y += h + 1;   //   Move Y to top edge
 8004e6e:	b212      	sxth	r2, r2
        h = -h;       //   Use positive height
 8004e70:	b236      	sxth	r6, r6
      if (y < _height) { // Not off bottom
 8004e72:	f9b5 c00e 	ldrsh.w	ip, [r5, #14]
 8004e76:	4594      	cmp	ip, r2
 8004e78:	dd54      	ble.n	8004f24 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
        int16_t x2 = x + w - 1;
 8004e7a:	b2a3      	uxth	r3, r4
 8004e7c:	fa1f fa81 	uxth.w	sl, r1
 8004e80:	eb0a 0803 	add.w	r8, sl, r3
 8004e84:	fa1f f888 	uxth.w	r8, r8
 8004e88:	f108 3eff 	add.w	lr, r8, #4294967295
 8004e8c:	fa0f fe8e 	sxth.w	lr, lr
        if (x2 >= 0) { // Not off left
 8004e90:	f1be 0f00 	cmp.w	lr, #0
        int16_t x2 = x + w - 1;
 8004e94:	9302      	str	r3, [sp, #8]
        if (x2 >= 0) { // Not off left
 8004e96:	db45      	blt.n	8004f24 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
          int16_t y2 = y + h - 1;
 8004e98:	b2b3      	uxth	r3, r6
 8004e9a:	fa1f fb82 	uxth.w	fp, r2
 8004e9e:	eb0b 0903 	add.w	r9, fp, r3
 8004ea2:	9303      	str	r3, [sp, #12]
 8004ea4:	fa1f f389 	uxth.w	r3, r9
 8004ea8:	f103 39ff 	add.w	r9, r3, #4294967295
 8004eac:	fa0f f989 	sxth.w	r9, r9
          if (y2 >= 0) { // Not off top
 8004eb0:	f1b9 0f00 	cmp.w	r9, #0
 8004eb4:	db36      	blt.n	8004f24 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
            if (x < 0) {
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	da05      	bge.n	8004ec6 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x8a>
              w = x2 + 1;
 8004eba:	fa0f f488 	sxth.w	r4, r8
 8004ebe:	f8cd 8008 	str.w	r8, [sp, #8]
 8004ec2:	f04f 0a00 	mov.w	sl, #0
            if (y < 0) {
 8004ec6:	2a00      	cmp	r2, #0
 8004ec8:	da03      	bge.n	8004ed2 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x96>
              h = y2 + 1;
 8004eca:	b21e      	sxth	r6, r3
 8004ecc:	9303      	str	r3, [sp, #12]
 8004ece:	f04f 0b00 	mov.w	fp, #0
            if (x2 >= _width) {
 8004ed2:	4570      	cmp	r0, lr
 8004ed4:	dc04      	bgt.n	8004ee0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xa4>
              w = _width - x;
 8004ed6:	eba0 000a 	sub.w	r0, r0, sl
 8004eda:	b283      	uxth	r3, r0
 8004edc:	9302      	str	r3, [sp, #8]
 8004ede:	b204      	sxth	r4, r0
            if (y2 >= _height) {
 8004ee0:	45cc      	cmp	ip, r9
 8004ee2:	dc06      	bgt.n	8004ef2 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xb6>
              h = _height - y;
 8004ee4:	ebac 0c0b 	sub.w	ip, ip, fp
 8004ee8:	fa1f f38c 	uxth.w	r3, ip
 8004eec:	9303      	str	r3, [sp, #12]
 8004eee:	fa0f f68c 	sxth.w	r6, ip
  setAddrWindow(x, y, w, h);
 8004ef2:	9b03      	ldr	r3, [sp, #12]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	6828      	ldr	r0, [r5, #0]
 8004ef8:	9b02      	ldr	r3, [sp, #8]
 8004efa:	f8d0 8054 	ldr.w	r8, [r0, #84]	@ 0x54
 8004efe:	465a      	mov	r2, fp
 8004f00:	4651      	mov	r1, sl
 8004f02:	4628      	mov	r0, r5
  writeColor(color, (uint32_t)w * h);
 8004f04:	fb04 f606 	mul.w	r6, r4, r6
  setAddrWindow(x, y, w, h);
 8004f08:	47c0      	blx	r8
  if (!len)
 8004f0a:	b15e      	cbz	r6, 8004f24 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
    while (len--) {
 8004f0c:	3e01      	subs	r6, #1
 8004f0e:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 8004f10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8004f12:	f8ad 7014 	strh.w	r7, [sp, #20]
    while (len--) {
 8004f16:	3e01      	subs	r6, #1
      callback(SpiCmd::transmit, data, 2);
 8004f18:	2202      	movs	r2, #2
 8004f1a:	a905      	add	r1, sp, #20
 8004f1c:	2006      	movs	r0, #6
 8004f1e:	4798      	blx	r3
    while (len--) {
 8004f20:	1c73      	adds	r3, r6, #1
 8004f22:	d1f5      	bne.n	8004f10 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xd4>
}
 8004f24:	b007      	add	sp, #28
 8004f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      x += w + 1; //   Move X to left edge
 8004f2a:	b29c      	uxth	r4, r3
 8004f2c:	3101      	adds	r1, #1
 8004f2e:	4421      	add	r1, r4
    if (x < _width) { // Not off right
 8004f30:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
      x += w + 1; //   Move X to left edge
 8004f34:	b209      	sxth	r1, r1
      w = -w;     //   Use positive width
 8004f36:	4264      	negs	r4, r4
    if (x < _width) { // Not off right
 8004f38:	4288      	cmp	r0, r1
      w = -w;     //   Use positive width
 8004f3a:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 8004f3c:	ddf2      	ble.n	8004f24 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
 8004f3e:	e790      	b.n	8004e62 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x26>

08004f40 <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
                                    uint16_t color) {
 8004f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f44:	b085      	sub	sp, #20
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8004f46:	1e0c      	subs	r4, r1, #0
                                    uint16_t color) {
 8004f48:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8004f4c:	db55      	blt.n	8004ffa <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
 8004f4e:	461d      	mov	r5, r3
 8004f50:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	4606      	mov	r6, r0
 8004f58:	dd4f      	ble.n	8004ffa <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	d04d      	beq.n	8004ffa <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
    if (h < 0) {                       // If negative height...
 8004f5e:	da05      	bge.n	8004f6c <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
      y += h + 1;                      //   Move Y to top edge
 8004f60:	b2ab      	uxth	r3, r5
 8004f62:	3201      	adds	r2, #1
 8004f64:	441a      	add	r2, r3
      h = -h;                          //   Use positive height
 8004f66:	425b      	negs	r3, r3
      y += h + 1;                      //   Move Y to top edge
 8004f68:	b212      	sxth	r2, r2
      h = -h;                          //   Use positive height
 8004f6a:	b21d      	sxth	r5, r3
    if (y < _height) { // Not off bottom
 8004f6c:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8004f70:	4293      	cmp	r3, r2
 8004f72:	dd42      	ble.n	8004ffa <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
      int16_t y2 = y + h - 1;
 8004f74:	fa1f f882 	uxth.w	r8, r2
 8004f78:	fa1f f985 	uxth.w	r9, r5
 8004f7c:	eb08 0009 	add.w	r0, r8, r9
 8004f80:	b280      	uxth	r0, r0
 8004f82:	1e41      	subs	r1, r0, #1
 8004f84:	b209      	sxth	r1, r1
      if (y2 >= 0) { // Not off top
 8004f86:	2900      	cmp	r1, #0
 8004f88:	db37      	blt.n	8004ffa <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
        if (y < 0) {
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	da03      	bge.n	8004f96 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x56>
          h = y2 + 1;
 8004f8e:	b205      	sxth	r5, r0
 8004f90:	4681      	mov	r9, r0
 8004f92:	f04f 0800 	mov.w	r8, #0
        if (y2 >= _height) {
 8004f96:	428b      	cmp	r3, r1
 8004f98:	dc04      	bgt.n	8004fa4 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x64>
          h = _height - y;
 8004f9a:	eba3 0308 	sub.w	r3, r3, r8
 8004f9e:	fa1f f983 	uxth.w	r9, r3
 8004fa2:	b21d      	sxth	r5, r3
        startWrite();
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8005010 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xd0>)
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d128      	bne.n	8005000 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xc0>
    callback(SpiCmd::cs_low, 0, 0);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	2002      	movs	r0, #2
 8004fb6:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 8004fb8:	f8cd 9000 	str.w	r9, [sp]
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	b2a1      	uxth	r1, r4
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	47a0      	blx	r4
  if (!len)
 8004fca:	b14d      	cbz	r5, 8004fe0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xa0>
 8004fcc:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 8004fce:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8004fd0:	f8ad 700c 	strh.w	r7, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	a903      	add	r1, sp, #12
 8004fd8:	2006      	movs	r0, #6
 8004fda:	4798      	blx	r3
    while (len--) {
 8004fdc:	3d01      	subs	r5, #1
 8004fde:	d1f6      	bne.n	8004fce <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x8e>
        endWrite();
 8004fe0:	6833      	ldr	r3, [r6, #0]
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xd4>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d10d      	bne.n	8005006 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xc6>
    callback(SpiCmd::cs_high, 0, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8004fee:	4611      	mov	r1, r2
 8004ff0:	2003      	movs	r0, #3
}
 8004ff2:	b005      	add	sp, #20
 8004ff4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ff8:	4718      	bx	r3
 8004ffa:	b005      	add	sp, #20
 8004ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        startWrite();
 8005000:	4630      	mov	r0, r6
 8005002:	4798      	blx	r3
 8005004:	e7d8      	b.n	8004fb8 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x78>
        endWrite();
 8005006:	4630      	mov	r0, r6
}
 8005008:	b005      	add	sp, #20
 800500a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 800500e:	4718      	bx	r3
 8005010:	08004b95 	.word	0x08004b95
 8005014:	08004ba1 	.word	0x08004ba1

08005018 <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
                                    uint16_t color) {
 8005018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800501c:	b085      	sub	sp, #20
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 800501e:	1e14      	subs	r4, r2, #0
                                    uint16_t color) {
 8005020:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8005024:	db55      	blt.n	80050d2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
 8005026:	461d      	mov	r5, r3
 8005028:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800502c:	42a3      	cmp	r3, r4
 800502e:	4606      	mov	r6, r0
 8005030:	dd4f      	ble.n	80050d2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
 8005032:	2d00      	cmp	r5, #0
 8005034:	d04d      	beq.n	80050d2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
    if (w < 0) {                        // If negative width...
 8005036:	da05      	bge.n	8005044 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
      x += w + 1;                       //   Move X to left edge
 8005038:	b2ab      	uxth	r3, r5
 800503a:	3101      	adds	r1, #1
 800503c:	4419      	add	r1, r3
      w = -w;                           //   Use positive width
 800503e:	425b      	negs	r3, r3
      x += w + 1;                       //   Move X to left edge
 8005040:	b209      	sxth	r1, r1
      w = -w;                           //   Use positive width
 8005042:	b21d      	sxth	r5, r3
    if (x < _width) { // Not off right
 8005044:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
 8005048:	428a      	cmp	r2, r1
 800504a:	dd42      	ble.n	80050d2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
      int16_t x2 = x + w - 1;
 800504c:	fa1f f881 	uxth.w	r8, r1
 8005050:	fa1f f985 	uxth.w	r9, r5
 8005054:	eb08 0009 	add.w	r0, r8, r9
 8005058:	b280      	uxth	r0, r0
 800505a:	1e43      	subs	r3, r0, #1
 800505c:	b21b      	sxth	r3, r3
      if (x2 >= 0) { // Not off left
 800505e:	2b00      	cmp	r3, #0
 8005060:	db37      	blt.n	80050d2 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
        if (x < 0) {
 8005062:	2900      	cmp	r1, #0
 8005064:	da03      	bge.n	800506e <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x56>
          w = x2 + 1;
 8005066:	b205      	sxth	r5, r0
 8005068:	4681      	mov	r9, r0
 800506a:	f04f 0800 	mov.w	r8, #0
        if (x2 >= _width) {
 800506e:	429a      	cmp	r2, r3
 8005070:	dc04      	bgt.n	800507c <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x64>
          w = _width - x;
 8005072:	eba2 0208 	sub.w	r2, r2, r8
 8005076:	fa1f f982 	uxth.w	r9, r2
 800507a:	b215      	sxth	r5, r2
        startWrite();
 800507c:	6833      	ldr	r3, [r6, #0]
 800507e:	4a1a      	ldr	r2, [pc, #104]	@ (80050e8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xd0>)
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	4293      	cmp	r3, r2
 8005084:	d128      	bne.n	80050d8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xc0>
    callback(SpiCmd::cs_low, 0, 0);
 8005086:	2200      	movs	r2, #0
 8005088:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800508a:	4611      	mov	r1, r2
 800508c:	2002      	movs	r0, #2
 800508e:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 8005090:	6830      	ldr	r0, [r6, #0]
 8005092:	b2a2      	uxth	r2, r4
 8005094:	2401      	movs	r4, #1
 8005096:	9400      	str	r4, [sp, #0]
 8005098:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 800509a:	464b      	mov	r3, r9
 800509c:	4641      	mov	r1, r8
 800509e:	4630      	mov	r0, r6
 80050a0:	47a0      	blx	r4
  if (!len)
 80050a2:	b14d      	cbz	r5, 80050b8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xa0>
 80050a4:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 80050a6:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 80050a8:	f8ad 700c 	strh.w	r7, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 80050ac:	2202      	movs	r2, #2
 80050ae:	a903      	add	r1, sp, #12
 80050b0:	2006      	movs	r0, #6
 80050b2:	4798      	blx	r3
    while (len--) {
 80050b4:	3d01      	subs	r5, #1
 80050b6:	d1f6      	bne.n	80050a6 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x8e>
        endWrite();
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	4a0c      	ldr	r2, [pc, #48]	@ (80050ec <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xd4>)
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10d      	bne.n	80050de <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xc6>
    callback(SpiCmd::cs_high, 0, 0);
 80050c2:	2200      	movs	r2, #0
 80050c4:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80050c6:	4611      	mov	r1, r2
 80050c8:	2003      	movs	r0, #3
}
 80050ca:	b005      	add	sp, #20
 80050cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050d0:	4718      	bx	r3
 80050d2:	b005      	add	sp, #20
 80050d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        startWrite();
 80050d8:	4630      	mov	r0, r6
 80050da:	4798      	blx	r3
 80050dc:	e7d8      	b.n	8005090 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x78>
        endWrite();
 80050de:	4630      	mov	r0, r6
}
 80050e0:	b005      	add	sp, #20
 80050e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 80050e6:	4718      	bx	r3
 80050e8:	08004b95 	.word	0x08004b95
 80050ec:	08004ba1 	.word	0x08004ba1

080050f0 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
                               uint16_t color) {
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	b087      	sub	sp, #28
 80050f6:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 80050fa:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
  if (w && h) {   // Nonzero width and height?
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8081 	beq.w	8005206 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
 8005104:	2e00      	cmp	r6, #0
 8005106:	d07e      	beq.n	8005206 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
    if (w < 0) {  // If negative width...
 8005108:	2b00      	cmp	r3, #0
 800510a:	4605      	mov	r5, r0
 800510c:	461c      	mov	r4, r3
 800510e:	db7d      	blt.n	800520c <_ZN15Adafruit_SPITFT8fillRectEsssst+0x11c>
    if (x < _width) { // Not off right
 8005110:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8005114:	428b      	cmp	r3, r1
 8005116:	dd76      	ble.n	8005206 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
      if (h < 0) {    // If negative height...
 8005118:	2e00      	cmp	r6, #0
 800511a:	da05      	bge.n	8005128 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x38>
        y += h + 1;   //   Move Y to top edge
 800511c:	b2b6      	uxth	r6, r6
 800511e:	3201      	adds	r2, #1
 8005120:	4432      	add	r2, r6
        h = -h;       //   Use positive height
 8005122:	4276      	negs	r6, r6
        y += h + 1;   //   Move Y to top edge
 8005124:	b212      	sxth	r2, r2
        h = -h;       //   Use positive height
 8005126:	b236      	sxth	r6, r6
      if (y < _height) { // Not off bottom
 8005128:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
 800512c:	9002      	str	r0, [sp, #8]
 800512e:	4290      	cmp	r0, r2
 8005130:	dd69      	ble.n	8005206 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
        int16_t x2 = x + w - 1;
 8005132:	fa1f f881 	uxth.w	r8, r1
 8005136:	fa1f fa84 	uxth.w	sl, r4
 800513a:	eb08 0e0a 	add.w	lr, r8, sl
 800513e:	fa1f fe8e 	uxth.w	lr, lr
 8005142:	f10e 3cff 	add.w	ip, lr, #4294967295
 8005146:	fa0f fc8c 	sxth.w	ip, ip
        if (x2 >= 0) { // Not off left
 800514a:	f1bc 0f00 	cmp.w	ip, #0
 800514e:	db5a      	blt.n	8005206 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
          int16_t y2 = y + h - 1;
 8005150:	b2b0      	uxth	r0, r6
 8005152:	fa1f f982 	uxth.w	r9, r2
 8005156:	eb09 0b00 	add.w	fp, r9, r0
 800515a:	9003      	str	r0, [sp, #12]
 800515c:	fa1f f08b 	uxth.w	r0, fp
 8005160:	f100 3bff 	add.w	fp, r0, #4294967295
 8005164:	fa0f fb8b 	sxth.w	fp, fp
          if (y2 >= 0) { // Not off top
 8005168:	f1bb 0f00 	cmp.w	fp, #0
 800516c:	db4b      	blt.n	8005206 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
            if (x < 0) {
 800516e:	2900      	cmp	r1, #0
 8005170:	da04      	bge.n	800517c <_ZN15Adafruit_SPITFT8fillRectEsssst+0x8c>
              w = x2 + 1;
 8005172:	fa0f f48e 	sxth.w	r4, lr
 8005176:	46f2      	mov	sl, lr
 8005178:	f04f 0800 	mov.w	r8, #0
            if (y < 0) {
 800517c:	2a00      	cmp	r2, #0
 800517e:	da03      	bge.n	8005188 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x98>
              h = y2 + 1;
 8005180:	b206      	sxth	r6, r0
 8005182:	9003      	str	r0, [sp, #12]
 8005184:	f04f 0900 	mov.w	r9, #0
            if (x2 >= _width) {
 8005188:	4563      	cmp	r3, ip
 800518a:	dc04      	bgt.n	8005196 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xa6>
              w = _width - x;
 800518c:	eba3 0308 	sub.w	r3, r3, r8
 8005190:	fa1f fa83 	uxth.w	sl, r3
 8005194:	b21c      	sxth	r4, r3
            if (y2 >= _height) {
 8005196:	9b02      	ldr	r3, [sp, #8]
 8005198:	455b      	cmp	r3, fp
 800519a:	dc04      	bgt.n	80051a6 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xb6>
              h = _height - y;
 800519c:	eba3 0009 	sub.w	r0, r3, r9
 80051a0:	b283      	uxth	r3, r0
 80051a2:	9303      	str	r3, [sp, #12]
 80051a4:	b206      	sxth	r6, r0
            startWrite();
 80051a6:	682b      	ldr	r3, [r5, #0]
 80051a8:	4a22      	ldr	r2, [pc, #136]	@ (8005234 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x144>)
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d138      	bne.n	8005222 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x132>
    callback(SpiCmd::cs_low, 0, 0);
 80051b0:	2200      	movs	r2, #0
 80051b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80051b4:	4611      	mov	r1, r2
 80051b6:	2002      	movs	r0, #2
 80051b8:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	6828      	ldr	r0, [r5, #0]
 80051c0:	4641      	mov	r1, r8
 80051c2:	4653      	mov	r3, sl
 80051c4:	f8d0 8054 	ldr.w	r8, [r0, #84]	@ 0x54
 80051c8:	464a      	mov	r2, r9
 80051ca:	4628      	mov	r0, r5
  writeColor(color, (uint32_t)w * h);
 80051cc:	fb04 f606 	mul.w	r6, r4, r6
  setAddrWindow(x, y, w, h);
 80051d0:	47c0      	blx	r8
  if (!len)
 80051d2:	b15e      	cbz	r6, 80051ec <_ZN15Adafruit_SPITFT8fillRectEsssst+0xfc>
    while (len--) {
 80051d4:	3e01      	subs	r6, #1
 80051d6:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 80051d8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 80051da:	f8ad 7014 	strh.w	r7, [sp, #20]
    while (len--) {
 80051de:	3e01      	subs	r6, #1
      callback(SpiCmd::transmit, data, 2);
 80051e0:	2202      	movs	r2, #2
 80051e2:	a905      	add	r1, sp, #20
 80051e4:	2006      	movs	r0, #6
 80051e6:	4798      	blx	r3
    while (len--) {
 80051e8:	1c73      	adds	r3, r6, #1
 80051ea:	d1f5      	bne.n	80051d8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xe8>
            endWrite();
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	4a12      	ldr	r2, [pc, #72]	@ (8005238 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x148>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d118      	bne.n	8005228 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x138>
    callback(SpiCmd::cs_high, 0, 0);
 80051f6:	2200      	movs	r2, #0
 80051f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80051fa:	4611      	mov	r1, r2
 80051fc:	2003      	movs	r0, #3
}
 80051fe:	b007      	add	sp, #28
 8005200:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005204:	4718      	bx	r3
 8005206:	b007      	add	sp, #28
 8005208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      x += w + 1; //   Move X to left edge
 800520c:	b29c      	uxth	r4, r3
 800520e:	3101      	adds	r1, #1
 8005210:	4421      	add	r1, r4
    if (x < _width) { // Not off right
 8005212:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
      x += w + 1; //   Move X to left edge
 8005216:	b209      	sxth	r1, r1
      w = -w;     //   Use positive width
 8005218:	4264      	negs	r4, r4
    if (x < _width) { // Not off right
 800521a:	428b      	cmp	r3, r1
      w = -w;     //   Use positive width
 800521c:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 800521e:	ddf2      	ble.n	8005206 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
 8005220:	e77a      	b.n	8005118 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x28>
            startWrite();
 8005222:	4628      	mov	r0, r5
 8005224:	4798      	blx	r3
 8005226:	e7c8      	b.n	80051ba <_ZN15Adafruit_SPITFT8fillRectEsssst+0xca>
            endWrite();
 8005228:	4628      	mov	r0, r5
}
 800522a:	b007      	add	sp, #28
 800522c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            endWrite();
 8005230:	4718      	bx	r3
 8005232:	bf00      	nop
 8005234:	08004b95 	.word	0x08004b95
 8005238:	08004ba1 	.word	0x08004ba1

0800523c <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 800523c:	b538      	push	{r3, r4, r5, lr}
    : Adafruit_GFX(w, h), callback(callback)
 800523e:	b212      	sxth	r2, r2
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 8005240:	4604      	mov	r4, r0
    : Adafruit_GFX(w, h), callback(callback)
 8005242:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 8005244:	461d      	mov	r5, r3
    : Adafruit_GFX(w, h), callback(callback)
 8005246:	f7ff f9fb 	bl	8004640 <_ZN12Adafruit_GFXC1Ess>
 800524a:	2300      	movs	r3, #0
 800524c:	4a03      	ldr	r2, [pc, #12]	@ (800525c <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE+0x20>)
 800524e:	8523      	strh	r3, [r4, #40]	@ 0x28
 8005250:	e9c4 350b 	strd	r3, r5, [r4, #44]	@ 0x2c
 8005254:	6022      	str	r2, [r4, #0]
 8005256:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8005258:	4620      	mov	r0, r4
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	080088a0 	.word	0x080088a0

08005260 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>:
                                  uint8_t numDataBytes) {
 8005260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005262:	4605      	mov	r5, r0
 8005264:	4614      	mov	r4, r2
    callback(SpiCmd::cs_low, 0, 0);
 8005266:	2200      	movs	r2, #0
 8005268:	b083      	sub	sp, #12
 800526a:	460f      	mov	r7, r1
 800526c:	461e      	mov	r6, r3
 800526e:	4611      	mov	r1, r2
 8005270:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005272:	2002      	movs	r0, #2
 8005274:	4798      	blx	r3
    callback(SpiCmd::dc_low, 0, 0);
 8005276:	2200      	movs	r2, #0
 8005278:	4611      	mov	r1, r2
 800527a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800527c:	2004      	movs	r0, #4
 800527e:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8005280:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005282:	f88d 7007 	strb.w	r7, [sp, #7]
 8005286:	2201      	movs	r2, #1
 8005288:	f10d 0107 	add.w	r1, sp, #7
 800528c:	2006      	movs	r0, #6
 800528e:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8005290:	2200      	movs	r2, #0
 8005292:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005294:	4611      	mov	r1, r2
 8005296:	2005      	movs	r0, #5
 8005298:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 800529a:	b166      	cbz	r6, 80052b6 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x56>
 800529c:	4426      	add	r6, r4
      spiWrite(*dataBytes); // Send the data bytes
 800529e:	f814 2b01 	ldrb.w	r2, [r4], #1
 80052a2:	f88d 2007 	strb.w	r2, [sp, #7]
  callback(SpiCmd::transmit, &b, 1);
 80052a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80052a8:	2201      	movs	r2, #1
 80052aa:	f10d 0107 	add.w	r1, sp, #7
 80052ae:	2006      	movs	r0, #6
 80052b0:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 80052b2:	42a6      	cmp	r6, r4
 80052b4:	d1f3      	bne.n	800529e <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x3e>
    callback(SpiCmd::cs_high, 0, 0);
 80052b6:	2200      	movs	r2, #0
 80052b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80052ba:	4611      	mov	r1, r2
 80052bc:	2003      	movs	r0, #3
}
 80052be:	b003      	add	sp, #12
 80052c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80052c4:	4718      	bx	r3
 80052c6:	bf00      	nop

080052c8 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>:
                                  uint8_t numDataBytes) {
 80052c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ca:	4605      	mov	r5, r0
 80052cc:	4614      	mov	r4, r2
    callback(SpiCmd::cs_low, 0, 0);
 80052ce:	2200      	movs	r2, #0
 80052d0:	b083      	sub	sp, #12
 80052d2:	460f      	mov	r7, r1
 80052d4:	461e      	mov	r6, r3
 80052d6:	4611      	mov	r1, r2
 80052d8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80052da:	2002      	movs	r0, #2
 80052dc:	4798      	blx	r3
    callback(SpiCmd::dc_low, 0, 0);
 80052de:	2200      	movs	r2, #0
 80052e0:	4611      	mov	r1, r2
 80052e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80052e4:	2004      	movs	r0, #4
 80052e6:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 80052e8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80052ea:	f88d 7007 	strb.w	r7, [sp, #7]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f10d 0107 	add.w	r1, sp, #7
 80052f4:	2006      	movs	r0, #6
 80052f6:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 80052f8:	2200      	movs	r2, #0
 80052fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80052fc:	4611      	mov	r1, r2
 80052fe:	2005      	movs	r0, #5
 8005300:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 8005302:	b166      	cbz	r6, 800531e <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x56>
 8005304:	4426      	add	r6, r4
      spiWrite(pgm_read_byte(dataBytes++));
 8005306:	f814 2b01 	ldrb.w	r2, [r4], #1
 800530a:	f88d 2007 	strb.w	r2, [sp, #7]
  callback(SpiCmd::transmit, &b, 1);
 800530e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005310:	2201      	movs	r2, #1
 8005312:	f10d 0107 	add.w	r1, sp, #7
 8005316:	2006      	movs	r0, #6
 8005318:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 800531a:	42a6      	cmp	r6, r4
 800531c:	d1f3      	bne.n	8005306 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x3e>
    callback(SpiCmd::cs_high, 0, 0);
 800531e:	2200      	movs	r2, #0
 8005320:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005322:	4611      	mov	r1, r2
 8005324:	2003      	movs	r0, #3
}
 8005326:	b003      	add	sp, #12
 8005328:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800532c:	4718      	bx	r3
 800532e:	bf00      	nop

08005330 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 8005330:	b530      	push	{r4, r5, lr}
 8005332:	4604      	mov	r4, r0
    callback(SpiCmd::dc_low, 0, 0);
 8005334:	2200      	movs	r2, #0
 8005336:	b083      	sub	sp, #12
 8005338:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800533a:	460d      	mov	r5, r1
 800533c:	2004      	movs	r0, #4
 800533e:	4611      	mov	r1, r2
 8005340:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8005342:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005344:	f88d 5007 	strb.w	r5, [sp, #7]
 8005348:	f10d 0107 	add.w	r1, sp, #7
 800534c:	2201      	movs	r2, #1
 800534e:	2006      	movs	r0, #6
 8005350:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8005352:	2200      	movs	r2, #0
 8005354:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005356:	4611      	mov	r1, r2
 8005358:	2005      	movs	r0, #5
}
 800535a:	b003      	add	sp, #12
 800535c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005360:	4718      	bx	r3
 8005362:	bf00      	nop

08005364 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
            parallel; name was maintaned for backward compatibility. Naming
            is also not consistent with the 8-bit version, spiWrite().
            Sorry about that. Again, staying compatible with outside code.
    @param  l  32-bit value to write.
*/
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 8005364:	b500      	push	{lr}
 8005366:	b083      	sub	sp, #12
  uint8_t data[4];
  data[0] = l >> 24;
  data[1] = l >> 16;
  data[2] = l >> 8;
  data[3] = l;
  callback(SpiCmd::transmit, data, 4);
 8005368:	2204      	movs	r2, #4
 800536a:	ba09      	rev	r1, r1
 800536c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  data[0] = l >> 24;
 800536e:	9101      	str	r1, [sp, #4]
  callback(SpiCmd::transmit, data, 4);
 8005370:	2006      	movs	r0, #6
 8005372:	eb0d 0102 	add.w	r1, sp, r2
 8005376:	4798      	blx	r3
}
 8005378:	b003      	add	sp, #12
 800537a:	f85d fb04 	ldr.w	pc, [sp], #4
 800537e:	bf00      	nop

08005380 <_ZN15Adafruit_ST778911setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
 8005380:	b510      	push	{r4, lr}
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 8005382:	f001 0103 	and.w	r1, r1, #3
void Adafruit_ST7789::setRotation(uint8_t m) {
 8005386:	b082      	sub	sp, #8
  uint8_t madctl = 0;
 8005388:	2300      	movs	r3, #0

  switch (rotation) {
 800538a:	2902      	cmp	r1, #2
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
    _xstart = _colstart;
    _ystart = _rowstart;
    _width = windowWidth;
 800538c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800538e:	f9b0 2038 	ldrsh.w	r2, [r0, #56]	@ 0x38
    _height = windowHeight;
 8005392:	f9b0 c03a 	ldrsh.w	ip, [r0, #58]	@ 0x3a
  uint8_t madctl = 0;
 8005396:	f88d 3007 	strb.w	r3, [sp, #7]
  rotation = m & 3; // can't be higher than 3
 800539a:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 800539c:	d015      	beq.n	80053ca <_ZN15Adafruit_ST778911setRotationEh+0x4a>
 800539e:	2903      	cmp	r1, #3
 80053a0:	d028      	beq.n	80053f4 <_ZN15Adafruit_ST778911setRotationEh+0x74>
 80053a2:	2901      	cmp	r1, #1
 80053a4:	d019      	beq.n	80053da <_ZN15Adafruit_ST778911setRotationEh+0x5a>
    _xstart = _colstart;
 80053a6:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _ystart = _rowstart;
 80053aa:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
    _xstart = _colstart;
 80053ae:	8482      	strh	r2, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80053b0:	21c0      	movs	r1, #192	@ 0xc0
 80053b2:	f88d 1007 	strb.w	r1, [sp, #7]
    _ystart = _rowstart;
 80053b6:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _width = windowWidth;
 80053b8:	60c4      	str	r4, [r0, #12]
    _height = windowWidth;
    _width = windowHeight;
    break;
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80053ba:	2301      	movs	r3, #1
 80053bc:	f10d 0207 	add.w	r2, sp, #7
 80053c0:	2136      	movs	r1, #54	@ 0x36
 80053c2:	f7ff ff4d 	bl	8005260 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 80053c6:	b002      	add	sp, #8
 80053c8:	bd10      	pop	{r4, pc}
    _xstart = _colstart2;
 80053ca:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
    _ystart = _rowstart2;
 80053ce:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
    _xstart = _colstart2;
 80053d2:	8482      	strh	r2, [r0, #36]	@ 0x24
    _ystart = _rowstart2;
 80053d4:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _width = windowWidth;
 80053d6:	60c4      	str	r4, [r0, #12]
    break;
 80053d8:	e7ef      	b.n	80053ba <_ZN15Adafruit_ST778911setRotationEh+0x3a>
    _xstart = _rowstart;
 80053da:	f890 1035 	ldrb.w	r1, [r0, #53]	@ 0x35
    _ystart = _colstart2;
 80053de:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
    _xstart = _rowstart;
 80053e2:	8481      	strh	r1, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80053e4:	24a0      	movs	r4, #160	@ 0xa0
 80053e6:	f88d 4007 	strb.w	r4, [sp, #7]
    _ystart = _colstart2;
 80053ea:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _height = windowWidth;
 80053ec:	81c2      	strh	r2, [r0, #14]
    _width = windowHeight;
 80053ee:	f8a0 c00c 	strh.w	ip, [r0, #12]
    break;
 80053f2:	e7e2      	b.n	80053ba <_ZN15Adafruit_ST778911setRotationEh+0x3a>
    _width = windowHeight;
 80053f4:	f36c 030f 	bfi	r3, ip, #0, #16
 80053f8:	f362 431f 	bfi	r3, r2, #16, #16
    _xstart = _rowstart2;
 80053fc:	f890 1037 	ldrb.w	r1, [r0, #55]	@ 0x37
    _ystart = _colstart;
 8005400:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _xstart = _rowstart2;
 8005404:	8481      	strh	r1, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8005406:	2460      	movs	r4, #96	@ 0x60
 8005408:	f88d 4007 	strb.w	r4, [sp, #7]
    _ystart = _colstart;
 800540c:	84c2      	strh	r2, [r0, #38]	@ 0x26
    _width = windowHeight;
 800540e:	60c3      	str	r3, [r0, #12]
    break;
 8005410:	e7d3      	b.n	80053ba <_ZN15Adafruit_ST778911setRotationEh+0x3a>
 8005412:	bf00      	nop

08005414 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>:
Adafruit_ST7789::Adafruit_ST7789(uint16_t w, uint16_t h, Adafruit_SPITFT::CallbackType callback)
 8005414:	b510      	push	{r4, lr}
 8005416:	4604      	mov	r4, r0
  : Adafruit_ST77xx(w, h, callback)
 8005418:	f000 f8cc 	bl	80055b4 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>
 800541c:	2300      	movs	r3, #0
 800541e:	4a02      	ldr	r2, [pc, #8]	@ (8005428 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE+0x14>)
 8005420:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8005422:	6022      	str	r2, [r4, #0]
}
 8005424:	4620      	mov	r0, r4
 8005426:	bd10      	pop	{r4, pc}
 8005428:	08008900 	.word	0x08008900

0800542c <_ZN15Adafruit_ST77894initEtt>:
    ) {
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	460d      	mov	r5, r1
 8005430:	b082      	sub	sp, #8
  commonInit(NULL);
 8005432:	2100      	movs	r1, #0
    ) {
 8005434:	4604      	mov	r4, r0
 8005436:	4616      	mov	r6, r2
  commonInit(NULL);
 8005438:	f000 f8f2 	bl	8005620 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  if (width == 240 && height == 240) {
 800543c:	2df0      	cmp	r5, #240	@ 0xf0
 800543e:	d03a      	beq.n	80054b6 <_ZN15Adafruit_ST77894initEtt+0x8a>
  } else if (width == 135 && height == 240) {
 8005440:	2d87      	cmp	r5, #135	@ 0x87
 8005442:	d101      	bne.n	8005448 <_ZN15Adafruit_ST77894initEtt+0x1c>
 8005444:	2ef0      	cmp	r6, #240	@ 0xf0
 8005446:	d041      	beq.n	80054cc <_ZN15Adafruit_ST77894initEtt+0xa0>
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8005448:	f1c5 00f0 	rsb	r0, r5, #240	@ 0xf0
    _rowstart = _rowstart2 = (int)((320 - height) / 2);
 800544c:	f5c6 73a0 	rsb	r3, r6, #320	@ 0x140
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8005450:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005454:	f3c0 0047 	ubfx	r0, r0, #1, #8
    _rowstart = _rowstart2 = (int)((320 - height) / 2);
 8005458:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800545c:	2200      	movs	r2, #0
 800545e:	f3c3 0347 	ubfx	r3, r3, #1, #8
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8005462:	f360 0207 	bfi	r2, r0, #0, #8
 8005466:	f363 220f 	bfi	r2, r3, #8, #8
 800546a:	f360 4217 	bfi	r2, r0, #16, #8
 800546e:	f363 621f 	bfi	r2, r3, #24, #8
    _colstart = _colstart2 = (240 - width);
 8005472:	6362      	str	r2, [r4, #52]	@ 0x34
  displayInit(st7789_without_cs);
 8005474:	4916      	ldr	r1, [pc, #88]	@ (80054d0 <_ZN15Adafruit_ST77894initEtt+0xa4>)
  windowWidth = width;
 8005476:	8725      	strh	r5, [r4, #56]	@ 0x38
  windowHeight = height;
 8005478:	8766      	strh	r6, [r4, #58]	@ 0x3a
  displayInit(st7789_without_cs);
 800547a:	4620      	mov	r0, r4
 800547c:	f000 f8a6 	bl	80055cc <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	4a14      	ldr	r2, [pc, #80]	@ (80054d4 <_ZN15Adafruit_ST77894initEtt+0xa8>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005486:	4293      	cmp	r3, r2
 8005488:	d11a      	bne.n	80054c0 <_ZN15Adafruit_ST77894initEtt+0x94>
    _xstart = _colstart;
 800548a:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
    _ystart = _rowstart;
 800548e:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
    _width = windowWidth;
 8005492:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    _xstart = _colstart;
 8005494:	84a1      	strh	r1, [r4, #36]	@ 0x24
  rotation = m & 3; // can't be higher than 3
 8005496:	2000      	movs	r0, #0
 8005498:	76a0      	strb	r0, [r4, #26]
    _ystart = _rowstart;
 800549a:	84e2      	strh	r2, [r4, #38]	@ 0x26
    _width = windowWidth;
 800549c:	60e3      	str	r3, [r4, #12]
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 800549e:	25c0      	movs	r5, #192	@ 0xc0
  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80054a0:	2301      	movs	r3, #1
 80054a2:	f10d 0207 	add.w	r2, sp, #7
 80054a6:	2136      	movs	r1, #54	@ 0x36
 80054a8:	4620      	mov	r0, r4
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80054aa:	f88d 5007 	strb.w	r5, [sp, #7]
  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80054ae:	f7ff fed7 	bl	8005260 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 80054b2:	b002      	add	sp, #8
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
  if (width == 240 && height == 240) {
 80054b6:	2ef0      	cmp	r6, #240	@ 0xf0
 80054b8:	d1c6      	bne.n	8005448 <_ZN15Adafruit_ST77894initEtt+0x1c>
 80054ba:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80054be:	e7d8      	b.n	8005472 <_ZN15Adafruit_ST77894initEtt+0x46>
  setRotation(0);
 80054c0:	2100      	movs	r1, #0
 80054c2:	4620      	mov	r0, r4
}
 80054c4:	b002      	add	sp, #8
 80054c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
 80054ca:	4718      	bx	r3
 80054cc:	4a02      	ldr	r2, [pc, #8]	@ (80054d8 <_ZN15Adafruit_ST77894initEtt+0xac>)
 80054ce:	e7d0      	b.n	8005472 <_ZN15Adafruit_ST77894initEtt+0x46>
 80054d0:	08008958 	.word	0x08008958
 80054d4:	08005381 	.word	0x08005381
 80054d8:	28342835 	.word	0x28342835

080054dc <_ZN15Adafruit_ST77xx5beginEm>:
    @param  freq  Desired SPI clock frequency
*/
/**************************************************************************/
void Adafruit_ST77xx::begin(uint32_t freq) {
  if (!freq) {
    freq = SPI_DEFAULT_FREQ;
 80054dc:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <_ZN15Adafruit_ST77xx5beginEm+0x14>)
 80054de:	2900      	cmp	r1, #0
 80054e0:	bf14      	ite	ne
 80054e2:	460a      	movne	r2, r1
 80054e4:	461a      	moveq	r2, r3
  }
  _freq = freq;

  invertOnCommand = ST77XX_INVON;
 80054e6:	f242 0321 	movw	r3, #8225	@ 0x2021
  _freq = freq;
 80054ea:	62c2      	str	r2, [r0, #44]	@ 0x2c
  invertOnCommand = ST77XX_INVON;
 80054ec:	8503      	strh	r3, [r0, #40]	@ 0x28
  invertOffCommand = ST77XX_INVOFF;

//  initSPI(freq, spiMode);
}
 80054ee:	4770      	bx	lr
 80054f0:	01e84800 	.word	0x01e84800

080054f4 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  @param  w  Width of window
  @param  h  Height of window
*/
/**************************************************************************/
void Adafruit_ST77xx::setAddrWindow(uint16_t x, uint16_t y, uint16_t w,
                                    uint16_t h) {
 80054f4:	b570      	push	{r4, r5, r6, lr}
  x += _xstart;
 80054f6:	8c85      	ldrh	r5, [r0, #36]	@ 0x24
 80054f8:	4429      	add	r1, r5
 80054fa:	b289      	uxth	r1, r1
  y += _ystart;
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 80054fc:	18ce      	adds	r6, r1, r3
  y += _ystart;
 80054fe:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
                                    uint16_t h) {
 8005500:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  y += _ystart;
 8005504:	441a      	add	r2, r3
 8005506:	b292      	uxth	r2, r2
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8005508:	4415      	add	r5, r2
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 800550a:	3e01      	subs	r6, #1
                                    uint16_t h) {
 800550c:	4604      	mov	r4, r0
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 800550e:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8005512:	3d01      	subs	r5, #1

  writeCommand(ST77XX_CASET); // Column addr set
 8005514:	212a      	movs	r1, #42	@ 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8005516:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 800551a:	f7ff ff09 	bl	8005330 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 800551e:	4631      	mov	r1, r6
 8005520:	4620      	mov	r0, r4
 8005522:	f7ff ff1f 	bl	8005364 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RASET); // Row addr set
 8005526:	4620      	mov	r0, r4
 8005528:	212b      	movs	r1, #43	@ 0x2b
 800552a:	f7ff ff01 	bl	8005330 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 800552e:	4629      	mov	r1, r5
 8005530:	4620      	mov	r0, r4
 8005532:	f7ff ff17 	bl	8005364 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RAMWR); // write to RAM
 8005536:	4620      	mov	r0, r4
 8005538:	212c      	movs	r1, #44	@ 0x2c
}
 800553a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 800553e:	f7ff bef7 	b.w	8005330 <_ZN15Adafruit_SPITFT12writeCommandEh>
 8005542:	bf00      	nop

08005544 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 8005544:	b500      	push	{lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 8005546:	f001 0103 	and.w	r1, r1, #3
void Adafruit_ST77xx::setRotation(uint8_t m) {
 800554a:	b083      	sub	sp, #12
  uint8_t madctl = 0;
 800554c:	2300      	movs	r3, #0

  switch (rotation) {
 800554e:	2902      	cmp	r1, #2
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
    _xstart = _colstart;
 8005550:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _ystart = _rowstart;
 8005554:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
  uint8_t madctl = 0;
 8005558:	f88d 3007 	strb.w	r3, [sp, #7]
  rotation = m % 4; // can't be higher than 3
 800555c:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 800555e:	d014      	beq.n	800558a <_ZN15Adafruit_ST77xx11setRotationEh+0x46>
 8005560:	2903      	cmp	r1, #3
 8005562:	d01d      	beq.n	80055a0 <_ZN15Adafruit_ST77xx11setRotationEh+0x5c>
 8005564:	2901      	cmp	r1, #1
 8005566:	d014      	beq.n	8005592 <_ZN15Adafruit_ST77xx11setRotationEh+0x4e>
    _xstart = _colstart;
 8005568:	f362 030f 	bfi	r3, r2, #0, #16
 800556c:	f36c 431f 	bfi	r3, ip, #16, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8005570:	22c0      	movs	r2, #192	@ 0xc0
 8005572:	f88d 2007 	strb.w	r2, [sp, #7]
    _xstart = _colstart;
 8005576:	6243      	str	r3, [r0, #36]	@ 0x24
    _ystart = _colstart;
    _xstart = _rowstart;
    break;
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 8005578:	2301      	movs	r3, #1
 800557a:	f10d 0207 	add.w	r2, sp, #7
 800557e:	2136      	movs	r1, #54	@ 0x36
 8005580:	f7ff fe6e 	bl	8005260 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 8005584:	b003      	add	sp, #12
 8005586:	f85d fb04 	ldr.w	pc, [sp], #4
    _xstart = _colstart;
 800558a:	8482      	strh	r2, [r0, #36]	@ 0x24
    _ystart = _rowstart;
 800558c:	f8a0 c026 	strh.w	ip, [r0, #38]	@ 0x26
    break;
 8005590:	e7f2      	b.n	8005578 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8005592:	23a0      	movs	r3, #160	@ 0xa0
 8005594:	f88d 3007 	strb.w	r3, [sp, #7]
    _ystart = _colstart;
 8005598:	84c2      	strh	r2, [r0, #38]	@ 0x26
    _xstart = _rowstart;
 800559a:	f8a0 c024 	strh.w	ip, [r0, #36]	@ 0x24
    break;
 800559e:	e7eb      	b.n	8005578 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
    _xstart = _rowstart;
 80055a0:	f36c 030f 	bfi	r3, ip, #0, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80055a4:	2160      	movs	r1, #96	@ 0x60
    _xstart = _rowstart;
 80055a6:	f362 431f 	bfi	r3, r2, #16, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80055aa:	f88d 1007 	strb.w	r1, [sp, #7]
    _xstart = _rowstart;
 80055ae:	6243      	str	r3, [r0, #36]	@ 0x24
    break;
 80055b0:	e7e2      	b.n	8005578 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
 80055b2:	bf00      	nop

080055b4 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>:
Adafruit_ST77xx::Adafruit_ST77xx(uint16_t w, uint16_t h, Adafruit_SPITFT::CallbackType callback)
 80055b4:	b510      	push	{r4, lr}
 80055b6:	4604      	mov	r4, r0
  : Adafruit_SPITFT(w, h, callback)
 80055b8:	f7ff fe40 	bl	800523c <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE>
 80055bc:	2300      	movs	r3, #0
 80055be:	4a02      	ldr	r2, [pc, #8]	@ (80055c8 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE+0x14>)
 80055c0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80055c2:	6022      	str	r2, [r4, #0]
}
 80055c4:	4620      	mov	r0, r4
 80055c6:	bd10      	pop	{r4, pc}
 80055c8:	08008980 	.word	0x08008980

080055cc <_ZN15Adafruit_ST77xx11displayInitEPKh>:
  numCommands = pgm_read_byte(addr++); // Number of commands to follow
 80055cc:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (numCommands--) {              // For each command...
 80055d0:	b32b      	cbz	r3, 800561e <_ZN15Adafruit_ST77xx11displayInitEPKh+0x52>
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 80055d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d6:	1e5d      	subs	r5, r3, #1
 80055d8:	4680      	mov	r8, r0
 80055da:	b2ed      	uxtb	r5, r5
    numArgs = pgm_read_byte(addr++);   // Number of args to follow
 80055dc:	784f      	ldrb	r7, [r1, #1]
 80055de:	1c8e      	adds	r6, r1, #2
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
 80055e0:	f007 047f 	and.w	r4, r7, #127	@ 0x7f
    sendCommand(cmd, addr, numArgs);
 80055e4:	7809      	ldrb	r1, [r1, #0]
 80055e6:	4623      	mov	r3, r4
 80055e8:	4632      	mov	r2, r6
 80055ea:	4640      	mov	r0, r8
 80055ec:	f7ff fe6c 	bl	80052c8 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>
    if (ms) {
 80055f0:	063b      	lsls	r3, r7, #24
    addr += numArgs;
 80055f2:	eb06 0104 	add.w	r1, r6, r4
    if (ms) {
 80055f6:	d50c      	bpl.n	8005612 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x46>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 80055f8:	5d32      	ldrb	r2, [r6, r4]
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 80055fa:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80055fe:	2aff      	cmp	r2, #255	@ 0xff
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8005600:	f101 0401 	add.w	r4, r1, #1
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8005604:	bf08      	it	eq
 8005606:	f44f 72fa 	moveq.w	r2, #500	@ 0x1f4
 800560a:	2100      	movs	r1, #0
 800560c:	2007      	movs	r0, #7
 800560e:	4798      	blx	r3
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8005610:	4621      	mov	r1, r4
  while (numCommands--) {              // For each command...
 8005612:	3d01      	subs	r5, #1
 8005614:	b2ed      	uxtb	r5, r5
 8005616:	2dff      	cmp	r5, #255	@ 0xff
 8005618:	d1e0      	bne.n	80055dc <_ZN15Adafruit_ST77xx11displayInitEPKh+0x10>
}
 800561a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800561e:	4770      	bx	lr

08005620 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
  begin();
 8005620:	6803      	ldr	r3, [r0, #0]
 8005622:	4a1c      	ldr	r2, [pc, #112]	@ (8005694 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x74>)
 8005624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005626:	4293      	cmp	r3, r2
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 8005628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562c:	4607      	mov	r7, r0
 800562e:	460c      	mov	r4, r1
 8005630:	d12d      	bne.n	800568e <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6e>
  _freq = freq;
 8005632:	4a19      	ldr	r2, [pc, #100]	@ (8005698 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x78>)
 8005634:	62c2      	str	r2, [r0, #44]	@ 0x2c
  invertOnCommand = ST77XX_INVON;
 8005636:	f242 0321 	movw	r3, #8225	@ 0x2021
 800563a:	8503      	strh	r3, [r0, #40]	@ 0x28
  if (cmdList) {
 800563c:	b32c      	cbz	r4, 800568a <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6a>
  numCommands = pgm_read_byte(addr++); // Number of commands to follow
 800563e:	4621      	mov	r1, r4
 8005640:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (numCommands--) {              // For each command...
 8005644:	1e5d      	subs	r5, r3, #1
 8005646:	b2ed      	uxtb	r5, r5
 8005648:	b1fb      	cbz	r3, 800568a <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6a>
    numArgs = pgm_read_byte(addr++);   // Number of args to follow
 800564a:	f891 8001 	ldrb.w	r8, [r1, #1]
 800564e:	1c8e      	adds	r6, r1, #2
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
 8005650:	f008 047f 	and.w	r4, r8, #127	@ 0x7f
    sendCommand(cmd, addr, numArgs);
 8005654:	7809      	ldrb	r1, [r1, #0]
 8005656:	4623      	mov	r3, r4
 8005658:	4632      	mov	r2, r6
 800565a:	4638      	mov	r0, r7
 800565c:	f7ff fe34 	bl	80052c8 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>
    if (ms) {
 8005660:	f018 0f80 	tst.w	r8, #128	@ 0x80
    addr += numArgs;
 8005664:	eb06 0104 	add.w	r1, r6, r4
    if (ms) {
 8005668:	d00b      	beq.n	8005682 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x62>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 800566a:	5d32      	ldrb	r2, [r6, r4]
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	2aff      	cmp	r2, #255	@ 0xff
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8005670:	f101 0401 	add.w	r4, r1, #1
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8005674:	bf08      	it	eq
 8005676:	f44f 72fa 	moveq.w	r2, #500	@ 0x1f4
 800567a:	2100      	movs	r1, #0
 800567c:	2007      	movs	r0, #7
 800567e:	4798      	blx	r3
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8005680:	4621      	mov	r1, r4
  while (numCommands--) {              // For each command...
 8005682:	3d01      	subs	r5, #1
 8005684:	b2ed      	uxtb	r5, r5
 8005686:	2dff      	cmp	r5, #255	@ 0xff
 8005688:	d1df      	bne.n	800564a <_ZN15Adafruit_ST77xx10commonInitEPKh+0x2a>
}
 800568a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  begin();
 800568e:	2100      	movs	r1, #0
 8005690:	4798      	blx	r3
 8005692:	e7d3      	b.n	800563c <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
 8005694:	080054dd 	.word	0x080054dd
 8005698:	01e84800 	.word	0x01e84800

0800569c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n = 0;
  while (size--) {
 800569e:	4617      	mov	r7, r2
 80056a0:	b17a      	cbz	r2, 80056c2 <_ZN5Print5writeEPKhj+0x26>
 80056a2:	4605      	mov	r5, r0
 80056a4:	460e      	mov	r6, r1
  size_t n = 0;
 80056a6:	2400      	movs	r4, #0
 80056a8:	e002      	b.n	80056b0 <_ZN5Print5writeEPKhj+0x14>
    if (write(*buffer++)) n++;
 80056aa:	3401      	adds	r4, #1
  while (size--) {
 80056ac:	42a7      	cmp	r7, r4
 80056ae:	d008      	beq.n	80056c2 <_ZN5Print5writeEPKhj+0x26>
    if (write(*buffer++)) n++;
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	f816 1b01 	ldrb.w	r1, [r6], #1
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4628      	mov	r0, r5
 80056ba:	4798      	blx	r3
 80056bc:	2800      	cmp	r0, #0
 80056be:	d1f4      	bne.n	80056aa <_ZN5Print5writeEPKhj+0xe>
 80056c0:	4627      	mov	r7, r4
    else break;
  }
  return n;
}
 80056c2:	4638      	mov	r0, r7
 80056c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c6:	bf00      	nop

080056c8 <_ZN5Print6printfEPKcz>:
//  n += println();
//  return n;
//}

size_t Print::printf(const char *fmt, ...)
{
 80056c8:	b40e      	push	{r1, r2, r3}
 80056ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056cc:	b08a      	sub	sp, #40	@ 0x28
 80056ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 80056d0:	4605      	mov	r5, r0
 80056d2:	f852 1b04 	ldr.w	r1, [r2], #4
  char buffer[30];
  va_list args;
  va_start(args, fmt);
 80056d6:	9201      	str	r2, [sp, #4]
  int n = vsprintf(buffer, fmt, args);
 80056d8:	a802      	add	r0, sp, #8
 80056da:	f000 f951 	bl	8005980 <vsiprintf>
  if (n < 0)
 80056de:	1e07      	subs	r7, r0, #0
 80056e0:	db19      	blt.n	8005716 <_ZN5Print6printfEPKcz+0x4e>
    return 0;
  auto ret = write((uint8_t*)buffer, n);
 80056e2:	682b      	ldr	r3, [r5, #0]
 80056e4:	4a10      	ldr	r2, [pc, #64]	@ (8005728 <_ZN5Print6printfEPKcz+0x60>)
 80056e6:	685c      	ldr	r4, [r3, #4]
 80056e8:	4294      	cmp	r4, r2
 80056ea:	d116      	bne.n	800571a <_ZN5Print6printfEPKcz+0x52>
  while (size--) {
 80056ec:	b19f      	cbz	r7, 8005716 <_ZN5Print6printfEPKcz+0x4e>
  size_t n = 0;
 80056ee:	2400      	movs	r4, #0
  while (size--) {
 80056f0:	ae02      	add	r6, sp, #8
 80056f2:	e003      	b.n	80056fc <_ZN5Print6printfEPKcz+0x34>
    if (write(*buffer++)) n++;
 80056f4:	3401      	adds	r4, #1
  while (size--) {
 80056f6:	42a7      	cmp	r7, r4
 80056f8:	d007      	beq.n	800570a <_ZN5Print6printfEPKcz+0x42>
    if (write(*buffer++)) n++;
 80056fa:	682b      	ldr	r3, [r5, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005702:	4628      	mov	r0, r5
 8005704:	4798      	blx	r3
 8005706:	2800      	cmp	r0, #0
 8005708:	d1f4      	bne.n	80056f4 <_ZN5Print6printfEPKcz+0x2c>
  va_end(args);
  return ret;
}
 800570a:	4620      	mov	r0, r4
 800570c:	b00a      	add	sp, #40	@ 0x28
 800570e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005712:	b003      	add	sp, #12
 8005714:	4770      	bx	lr
    return 0;
 8005716:	2400      	movs	r4, #0
 8005718:	e7f7      	b.n	800570a <_ZN5Print6printfEPKcz+0x42>
  auto ret = write((uint8_t*)buffer, n);
 800571a:	463a      	mov	r2, r7
 800571c:	a902      	add	r1, sp, #8
 800571e:	4628      	mov	r0, r5
 8005720:	47a0      	blx	r4
 8005722:	4604      	mov	r4, r0
 8005724:	e7f1      	b.n	800570a <_ZN5Print6printfEPKcz+0x42>
 8005726:	bf00      	nop
 8005728:	0800569d 	.word	0x0800569d

0800572c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
 800572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005730:	b08a      	sub	sp, #40	@ 0x28
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8005732:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8005734:	2a01      	cmp	r2, #1
{
 8005736:	4605      	mov	r5, r0
  *str = '\0';
 8005738:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
  if (base < 2) base = 10;
 800573c:	bf98      	it	ls
 800573e:	220a      	movls	r2, #10
 8005740:	ac09      	add	r4, sp, #36	@ 0x24

  do {
    char c = n % base;
 8005742:	fbb1 fcf2 	udiv	ip, r1, r2
 8005746:	fb02 101c 	mls	r0, r2, ip, r1
 800574a:	b2c3      	uxtb	r3, r0
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 800574c:	2809      	cmp	r0, #9
 800574e:	468e      	mov	lr, r1
 8005750:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005754:	bf8a      	itet	hi
 8005756:	3337      	addhi	r3, #55	@ 0x37
 8005758:	b2c3      	uxtbls	r3, r0
 800575a:	b2db      	uxtbhi	r3, r3
  } while(n);
 800575c:	4596      	cmp	lr, r2
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 800575e:	f804 3d01 	strb.w	r3, [r4, #-1]!
    n /= base;
 8005762:	4661      	mov	r1, ip
  } while(n);
 8005764:	d2ed      	bcs.n	8005742 <_ZN5Print11printNumberEmh+0x16>
      return write((const uint8_t *)str, strlen(str));
 8005766:	682f      	ldr	r7, [r5, #0]
 8005768:	4620      	mov	r0, r4
 800576a:	f7fa fd59 	bl	8000220 <strlen>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a0f      	ldr	r2, [pc, #60]	@ (80057b0 <_ZN5Print11printNumberEmh+0x84>)
 8005772:	4293      	cmp	r3, r2
 8005774:	4680      	mov	r8, r0
 8005776:	d112      	bne.n	800579e <_ZN5Print11printNumberEmh+0x72>
  while (size--) {
 8005778:	b168      	cbz	r0, 8005796 <_ZN5Print11printNumberEmh+0x6a>
  size_t n = 0;
 800577a:	2600      	movs	r6, #0
 800577c:	e003      	b.n	8005786 <_ZN5Print11printNumberEmh+0x5a>
    if (write(*buffer++)) n++;
 800577e:	3601      	adds	r6, #1
  while (size--) {
 8005780:	45b0      	cmp	r8, r6
 8005782:	d008      	beq.n	8005796 <_ZN5Print11printNumberEmh+0x6a>
    if (write(*buffer++)) n++;
 8005784:	682f      	ldr	r7, [r5, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800578c:	4628      	mov	r0, r5
 800578e:	4798      	blx	r3
 8005790:	2800      	cmp	r0, #0
 8005792:	d1f4      	bne.n	800577e <_ZN5Print11printNumberEmh+0x52>
 8005794:	46b0      	mov	r8, r6

  return write(str);
}
 8005796:	4640      	mov	r0, r8
 8005798:	b00a      	add	sp, #40	@ 0x28
 800579a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579e:	4602      	mov	r2, r0
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	4798      	blx	r3
 80057a6:	4680      	mov	r8, r0
 80057a8:	4640      	mov	r0, r8
 80057aa:	b00a      	add	sp, #40	@ 0x28
 80057ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b0:	0800569d 	.word	0x0800569d

080057b4 <_ZN5Print5printEii>:
{
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	4606      	mov	r6, r0
 80057b8:	460d      	mov	r5, r1
  if (base == 0) {
 80057ba:	b92a      	cbnz	r2, 80057c8 <_ZN5Print5printEii+0x14>
    return write(n);
 80057bc:	6803      	ldr	r3, [r0, #0]
}
 80057be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return write(n);
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	b2c9      	uxtb	r1, r1
 80057c6:	4718      	bx	r3
  } else if (base == 10) {
 80057c8:	2a0a      	cmp	r2, #10
 80057ca:	4614      	mov	r4, r2
 80057cc:	d10e      	bne.n	80057ec <_ZN5Print5printEii+0x38>
    if (n < 0) {
 80057ce:	2900      	cmp	r1, #0
 80057d0:	da0d      	bge.n	80057ee <_ZN5Print5printEii+0x3a>
  return write(c);
 80057d2:	6803      	ldr	r3, [r0, #0]
 80057d4:	212d      	movs	r1, #45	@ 0x2d
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4798      	blx	r3
      return printNumber(n, 10) + t;
 80057da:	4622      	mov	r2, r4
  return write(c);
 80057dc:	4603      	mov	r3, r0
      return printNumber(n, 10) + t;
 80057de:	4269      	negs	r1, r5
 80057e0:	4630      	mov	r0, r6
  return write(c);
 80057e2:	461c      	mov	r4, r3
      return printNumber(n, 10) + t;
 80057e4:	f7ff ffa2 	bl	800572c <_ZN5Print11printNumberEmh>
 80057e8:	4420      	add	r0, r4
}
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
    return printNumber(n, base);
 80057ec:	b2d2      	uxtb	r2, r2
}
 80057ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return printNumber(n, base);
 80057f2:	f7ff bf9b 	b.w	800572c <_ZN5Print11printNumberEmh>
 80057f6:	bf00      	nop

080057f8 <sbrk_aligned>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005838 <sbrk_aligned+0x40>)
 80057fc:	460c      	mov	r4, r1
 80057fe:	6831      	ldr	r1, [r6, #0]
 8005800:	4605      	mov	r5, r0
 8005802:	b911      	cbnz	r1, 800580a <sbrk_aligned+0x12>
 8005804:	f000 f8ce 	bl	80059a4 <_sbrk_r>
 8005808:	6030      	str	r0, [r6, #0]
 800580a:	4621      	mov	r1, r4
 800580c:	4628      	mov	r0, r5
 800580e:	f000 f8c9 	bl	80059a4 <_sbrk_r>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	d103      	bne.n	800581e <sbrk_aligned+0x26>
 8005816:	f04f 34ff 	mov.w	r4, #4294967295
 800581a:	4620      	mov	r0, r4
 800581c:	bd70      	pop	{r4, r5, r6, pc}
 800581e:	1cc4      	adds	r4, r0, #3
 8005820:	f024 0403 	bic.w	r4, r4, #3
 8005824:	42a0      	cmp	r0, r4
 8005826:	d0f8      	beq.n	800581a <sbrk_aligned+0x22>
 8005828:	1a21      	subs	r1, r4, r0
 800582a:	4628      	mov	r0, r5
 800582c:	f000 f8ba 	bl	80059a4 <_sbrk_r>
 8005830:	3001      	adds	r0, #1
 8005832:	d1f2      	bne.n	800581a <sbrk_aligned+0x22>
 8005834:	e7ef      	b.n	8005816 <sbrk_aligned+0x1e>
 8005836:	bf00      	nop
 8005838:	20000230 	.word	0x20000230

0800583c <_malloc_r>:
 800583c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005840:	1ccd      	adds	r5, r1, #3
 8005842:	f025 0503 	bic.w	r5, r5, #3
 8005846:	3508      	adds	r5, #8
 8005848:	2d0c      	cmp	r5, #12
 800584a:	bf38      	it	cc
 800584c:	250c      	movcc	r5, #12
 800584e:	2d00      	cmp	r5, #0
 8005850:	4606      	mov	r6, r0
 8005852:	db01      	blt.n	8005858 <_malloc_r+0x1c>
 8005854:	42a9      	cmp	r1, r5
 8005856:	d904      	bls.n	8005862 <_malloc_r+0x26>
 8005858:	230c      	movs	r3, #12
 800585a:	6033      	str	r3, [r6, #0]
 800585c:	2000      	movs	r0, #0
 800585e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005862:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005938 <_malloc_r+0xfc>
 8005866:	f000 f869 	bl	800593c <__malloc_lock>
 800586a:	f8d8 3000 	ldr.w	r3, [r8]
 800586e:	461c      	mov	r4, r3
 8005870:	bb44      	cbnz	r4, 80058c4 <_malloc_r+0x88>
 8005872:	4629      	mov	r1, r5
 8005874:	4630      	mov	r0, r6
 8005876:	f7ff ffbf 	bl	80057f8 <sbrk_aligned>
 800587a:	1c43      	adds	r3, r0, #1
 800587c:	4604      	mov	r4, r0
 800587e:	d158      	bne.n	8005932 <_malloc_r+0xf6>
 8005880:	f8d8 4000 	ldr.w	r4, [r8]
 8005884:	4627      	mov	r7, r4
 8005886:	2f00      	cmp	r7, #0
 8005888:	d143      	bne.n	8005912 <_malloc_r+0xd6>
 800588a:	2c00      	cmp	r4, #0
 800588c:	d04b      	beq.n	8005926 <_malloc_r+0xea>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	4639      	mov	r1, r7
 8005892:	4630      	mov	r0, r6
 8005894:	eb04 0903 	add.w	r9, r4, r3
 8005898:	f000 f884 	bl	80059a4 <_sbrk_r>
 800589c:	4581      	cmp	r9, r0
 800589e:	d142      	bne.n	8005926 <_malloc_r+0xea>
 80058a0:	6821      	ldr	r1, [r4, #0]
 80058a2:	1a6d      	subs	r5, r5, r1
 80058a4:	4629      	mov	r1, r5
 80058a6:	4630      	mov	r0, r6
 80058a8:	f7ff ffa6 	bl	80057f8 <sbrk_aligned>
 80058ac:	3001      	adds	r0, #1
 80058ae:	d03a      	beq.n	8005926 <_malloc_r+0xea>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	442b      	add	r3, r5
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	f8d8 3000 	ldr.w	r3, [r8]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	bb62      	cbnz	r2, 8005918 <_malloc_r+0xdc>
 80058be:	f8c8 7000 	str.w	r7, [r8]
 80058c2:	e00f      	b.n	80058e4 <_malloc_r+0xa8>
 80058c4:	6822      	ldr	r2, [r4, #0]
 80058c6:	1b52      	subs	r2, r2, r5
 80058c8:	d420      	bmi.n	800590c <_malloc_r+0xd0>
 80058ca:	2a0b      	cmp	r2, #11
 80058cc:	d917      	bls.n	80058fe <_malloc_r+0xc2>
 80058ce:	1961      	adds	r1, r4, r5
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	6025      	str	r5, [r4, #0]
 80058d4:	bf18      	it	ne
 80058d6:	6059      	strne	r1, [r3, #4]
 80058d8:	6863      	ldr	r3, [r4, #4]
 80058da:	bf08      	it	eq
 80058dc:	f8c8 1000 	streq.w	r1, [r8]
 80058e0:	5162      	str	r2, [r4, r5]
 80058e2:	604b      	str	r3, [r1, #4]
 80058e4:	4630      	mov	r0, r6
 80058e6:	f000 f82f 	bl	8005948 <__malloc_unlock>
 80058ea:	f104 000b 	add.w	r0, r4, #11
 80058ee:	1d23      	adds	r3, r4, #4
 80058f0:	f020 0007 	bic.w	r0, r0, #7
 80058f4:	1ac2      	subs	r2, r0, r3
 80058f6:	bf1c      	itt	ne
 80058f8:	1a1b      	subne	r3, r3, r0
 80058fa:	50a3      	strne	r3, [r4, r2]
 80058fc:	e7af      	b.n	800585e <_malloc_r+0x22>
 80058fe:	6862      	ldr	r2, [r4, #4]
 8005900:	42a3      	cmp	r3, r4
 8005902:	bf0c      	ite	eq
 8005904:	f8c8 2000 	streq.w	r2, [r8]
 8005908:	605a      	strne	r2, [r3, #4]
 800590a:	e7eb      	b.n	80058e4 <_malloc_r+0xa8>
 800590c:	4623      	mov	r3, r4
 800590e:	6864      	ldr	r4, [r4, #4]
 8005910:	e7ae      	b.n	8005870 <_malloc_r+0x34>
 8005912:	463c      	mov	r4, r7
 8005914:	687f      	ldr	r7, [r7, #4]
 8005916:	e7b6      	b.n	8005886 <_malloc_r+0x4a>
 8005918:	461a      	mov	r2, r3
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	42a3      	cmp	r3, r4
 800591e:	d1fb      	bne.n	8005918 <_malloc_r+0xdc>
 8005920:	2300      	movs	r3, #0
 8005922:	6053      	str	r3, [r2, #4]
 8005924:	e7de      	b.n	80058e4 <_malloc_r+0xa8>
 8005926:	230c      	movs	r3, #12
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	4630      	mov	r0, r6
 800592c:	f000 f80c 	bl	8005948 <__malloc_unlock>
 8005930:	e794      	b.n	800585c <_malloc_r+0x20>
 8005932:	6005      	str	r5, [r0, #0]
 8005934:	e7d6      	b.n	80058e4 <_malloc_r+0xa8>
 8005936:	bf00      	nop
 8005938:	20000234 	.word	0x20000234

0800593c <__malloc_lock>:
 800593c:	4801      	ldr	r0, [pc, #4]	@ (8005944 <__malloc_lock+0x8>)
 800593e:	f000 b86b 	b.w	8005a18 <__retarget_lock_acquire_recursive>
 8005942:	bf00      	nop
 8005944:	20000374 	.word	0x20000374

08005948 <__malloc_unlock>:
 8005948:	4801      	ldr	r0, [pc, #4]	@ (8005950 <__malloc_unlock+0x8>)
 800594a:	f000 b866 	b.w	8005a1a <__retarget_lock_release_recursive>
 800594e:	bf00      	nop
 8005950:	20000374 	.word	0x20000374

08005954 <_vsiprintf_r>:
 8005954:	b500      	push	{lr}
 8005956:	b09b      	sub	sp, #108	@ 0x6c
 8005958:	9100      	str	r1, [sp, #0]
 800595a:	9104      	str	r1, [sp, #16]
 800595c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005960:	9105      	str	r1, [sp, #20]
 8005962:	9102      	str	r1, [sp, #8]
 8005964:	4905      	ldr	r1, [pc, #20]	@ (800597c <_vsiprintf_r+0x28>)
 8005966:	9103      	str	r1, [sp, #12]
 8005968:	4669      	mov	r1, sp
 800596a:	f000 f8fd 	bl	8005b68 <_svfiprintf_r>
 800596e:	9b00      	ldr	r3, [sp, #0]
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	b01b      	add	sp, #108	@ 0x6c
 8005976:	f85d fb04 	ldr.w	pc, [sp], #4
 800597a:	bf00      	nop
 800597c:	ffff0208 	.word	0xffff0208

08005980 <vsiprintf>:
 8005980:	4613      	mov	r3, r2
 8005982:	460a      	mov	r2, r1
 8005984:	4601      	mov	r1, r0
 8005986:	4802      	ldr	r0, [pc, #8]	@ (8005990 <vsiprintf+0x10>)
 8005988:	6800      	ldr	r0, [r0, #0]
 800598a:	f7ff bfe3 	b.w	8005954 <_vsiprintf_r>
 800598e:	bf00      	nop
 8005990:	20000040 	.word	0x20000040

08005994 <memset>:
 8005994:	4402      	add	r2, r0
 8005996:	4603      	mov	r3, r0
 8005998:	4293      	cmp	r3, r2
 800599a:	d100      	bne.n	800599e <memset+0xa>
 800599c:	4770      	bx	lr
 800599e:	f803 1b01 	strb.w	r1, [r3], #1
 80059a2:	e7f9      	b.n	8005998 <memset+0x4>

080059a4 <_sbrk_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	@ (80059c0 <_sbrk_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fc fa18 	bl	8001de4 <_sbrk>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_sbrk_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_sbrk_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000370 	.word	0x20000370

080059c4 <__errno>:
 80059c4:	4b01      	ldr	r3, [pc, #4]	@ (80059cc <__errno+0x8>)
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000040 	.word	0x20000040

080059d0 <__libc_init_array>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005a08 <__libc_init_array+0x38>)
 80059d4:	4c0d      	ldr	r4, [pc, #52]	@ (8005a0c <__libc_init_array+0x3c>)
 80059d6:	1b64      	subs	r4, r4, r5
 80059d8:	10a4      	asrs	r4, r4, #2
 80059da:	2600      	movs	r6, #0
 80059dc:	42a6      	cmp	r6, r4
 80059de:	d109      	bne.n	80059f4 <__libc_init_array+0x24>
 80059e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005a10 <__libc_init_array+0x40>)
 80059e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005a14 <__libc_init_array+0x44>)
 80059e4:	f000 fba8 	bl	8006138 <_init>
 80059e8:	1b64      	subs	r4, r4, r5
 80059ea:	10a4      	asrs	r4, r4, #2
 80059ec:	2600      	movs	r6, #0
 80059ee:	42a6      	cmp	r6, r4
 80059f0:	d105      	bne.n	80059fe <__libc_init_array+0x2e>
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f8:	4798      	blx	r3
 80059fa:	3601      	adds	r6, #1
 80059fc:	e7ee      	b.n	80059dc <__libc_init_array+0xc>
 80059fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a02:	4798      	blx	r3
 8005a04:	3601      	adds	r6, #1
 8005a06:	e7f2      	b.n	80059ee <__libc_init_array+0x1e>
 8005a08:	08008a14 	.word	0x08008a14
 8005a0c:	08008a14 	.word	0x08008a14
 8005a10:	08008a14 	.word	0x08008a14
 8005a14:	08008a1c 	.word	0x08008a1c

08005a18 <__retarget_lock_acquire_recursive>:
 8005a18:	4770      	bx	lr

08005a1a <__retarget_lock_release_recursive>:
 8005a1a:	4770      	bx	lr

08005a1c <_free_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4605      	mov	r5, r0
 8005a20:	2900      	cmp	r1, #0
 8005a22:	d041      	beq.n	8005aa8 <_free_r+0x8c>
 8005a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a28:	1f0c      	subs	r4, r1, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfb8      	it	lt
 8005a2e:	18e4      	addlt	r4, r4, r3
 8005a30:	f7ff ff84 	bl	800593c <__malloc_lock>
 8005a34:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <_free_r+0x90>)
 8005a36:	6813      	ldr	r3, [r2, #0]
 8005a38:	b933      	cbnz	r3, 8005a48 <_free_r+0x2c>
 8005a3a:	6063      	str	r3, [r4, #4]
 8005a3c:	6014      	str	r4, [r2, #0]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a44:	f7ff bf80 	b.w	8005948 <__malloc_unlock>
 8005a48:	42a3      	cmp	r3, r4
 8005a4a:	d908      	bls.n	8005a5e <_free_r+0x42>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	1821      	adds	r1, r4, r0
 8005a50:	428b      	cmp	r3, r1
 8005a52:	bf01      	itttt	eq
 8005a54:	6819      	ldreq	r1, [r3, #0]
 8005a56:	685b      	ldreq	r3, [r3, #4]
 8005a58:	1809      	addeq	r1, r1, r0
 8005a5a:	6021      	streq	r1, [r4, #0]
 8005a5c:	e7ed      	b.n	8005a3a <_free_r+0x1e>
 8005a5e:	461a      	mov	r2, r3
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	b10b      	cbz	r3, 8005a68 <_free_r+0x4c>
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d9fa      	bls.n	8005a5e <_free_r+0x42>
 8005a68:	6811      	ldr	r1, [r2, #0]
 8005a6a:	1850      	adds	r0, r2, r1
 8005a6c:	42a0      	cmp	r0, r4
 8005a6e:	d10b      	bne.n	8005a88 <_free_r+0x6c>
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	4401      	add	r1, r0
 8005a74:	1850      	adds	r0, r2, r1
 8005a76:	4283      	cmp	r3, r0
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	d1e0      	bne.n	8005a3e <_free_r+0x22>
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	6053      	str	r3, [r2, #4]
 8005a82:	4408      	add	r0, r1
 8005a84:	6010      	str	r0, [r2, #0]
 8005a86:	e7da      	b.n	8005a3e <_free_r+0x22>
 8005a88:	d902      	bls.n	8005a90 <_free_r+0x74>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	602b      	str	r3, [r5, #0]
 8005a8e:	e7d6      	b.n	8005a3e <_free_r+0x22>
 8005a90:	6820      	ldr	r0, [r4, #0]
 8005a92:	1821      	adds	r1, r4, r0
 8005a94:	428b      	cmp	r3, r1
 8005a96:	bf04      	itt	eq
 8005a98:	6819      	ldreq	r1, [r3, #0]
 8005a9a:	685b      	ldreq	r3, [r3, #4]
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	bf04      	itt	eq
 8005aa0:	1809      	addeq	r1, r1, r0
 8005aa2:	6021      	streq	r1, [r4, #0]
 8005aa4:	6054      	str	r4, [r2, #4]
 8005aa6:	e7ca      	b.n	8005a3e <_free_r+0x22>
 8005aa8:	bd38      	pop	{r3, r4, r5, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000234 	.word	0x20000234

08005ab0 <__ssputs_r>:
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	688e      	ldr	r6, [r1, #8]
 8005ab6:	461f      	mov	r7, r3
 8005ab8:	42be      	cmp	r6, r7
 8005aba:	680b      	ldr	r3, [r1, #0]
 8005abc:	4682      	mov	sl, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	4690      	mov	r8, r2
 8005ac2:	d82d      	bhi.n	8005b20 <__ssputs_r+0x70>
 8005ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ac8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005acc:	d026      	beq.n	8005b1c <__ssputs_r+0x6c>
 8005ace:	6965      	ldr	r5, [r4, #20]
 8005ad0:	6909      	ldr	r1, [r1, #16]
 8005ad2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ad6:	eba3 0901 	sub.w	r9, r3, r1
 8005ada:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ade:	1c7b      	adds	r3, r7, #1
 8005ae0:	444b      	add	r3, r9
 8005ae2:	106d      	asrs	r5, r5, #1
 8005ae4:	429d      	cmp	r5, r3
 8005ae6:	bf38      	it	cc
 8005ae8:	461d      	movcc	r5, r3
 8005aea:	0553      	lsls	r3, r2, #21
 8005aec:	d527      	bpl.n	8005b3e <__ssputs_r+0x8e>
 8005aee:	4629      	mov	r1, r5
 8005af0:	f7ff fea4 	bl	800583c <_malloc_r>
 8005af4:	4606      	mov	r6, r0
 8005af6:	b360      	cbz	r0, 8005b52 <__ssputs_r+0xa2>
 8005af8:	6921      	ldr	r1, [r4, #16]
 8005afa:	464a      	mov	r2, r9
 8005afc:	f000 fad8 	bl	80060b0 <memcpy>
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	6126      	str	r6, [r4, #16]
 8005b0e:	6165      	str	r5, [r4, #20]
 8005b10:	444e      	add	r6, r9
 8005b12:	eba5 0509 	sub.w	r5, r5, r9
 8005b16:	6026      	str	r6, [r4, #0]
 8005b18:	60a5      	str	r5, [r4, #8]
 8005b1a:	463e      	mov	r6, r7
 8005b1c:	42be      	cmp	r6, r7
 8005b1e:	d900      	bls.n	8005b22 <__ssputs_r+0x72>
 8005b20:	463e      	mov	r6, r7
 8005b22:	6820      	ldr	r0, [r4, #0]
 8005b24:	4632      	mov	r2, r6
 8005b26:	4641      	mov	r1, r8
 8005b28:	f000 faa8 	bl	800607c <memmove>
 8005b2c:	68a3      	ldr	r3, [r4, #8]
 8005b2e:	1b9b      	subs	r3, r3, r6
 8005b30:	60a3      	str	r3, [r4, #8]
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	4433      	add	r3, r6
 8005b36:	6023      	str	r3, [r4, #0]
 8005b38:	2000      	movs	r0, #0
 8005b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3e:	462a      	mov	r2, r5
 8005b40:	f000 fac4 	bl	80060cc <_realloc_r>
 8005b44:	4606      	mov	r6, r0
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d1e0      	bne.n	8005b0c <__ssputs_r+0x5c>
 8005b4a:	6921      	ldr	r1, [r4, #16]
 8005b4c:	4650      	mov	r0, sl
 8005b4e:	f7ff ff65 	bl	8005a1c <_free_r>
 8005b52:	230c      	movs	r3, #12
 8005b54:	f8ca 3000 	str.w	r3, [sl]
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	e7e9      	b.n	8005b3a <__ssputs_r+0x8a>
	...

08005b68 <_svfiprintf_r>:
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	4698      	mov	r8, r3
 8005b6e:	898b      	ldrh	r3, [r1, #12]
 8005b70:	061b      	lsls	r3, r3, #24
 8005b72:	b09d      	sub	sp, #116	@ 0x74
 8005b74:	4607      	mov	r7, r0
 8005b76:	460d      	mov	r5, r1
 8005b78:	4614      	mov	r4, r2
 8005b7a:	d510      	bpl.n	8005b9e <_svfiprintf_r+0x36>
 8005b7c:	690b      	ldr	r3, [r1, #16]
 8005b7e:	b973      	cbnz	r3, 8005b9e <_svfiprintf_r+0x36>
 8005b80:	2140      	movs	r1, #64	@ 0x40
 8005b82:	f7ff fe5b 	bl	800583c <_malloc_r>
 8005b86:	6028      	str	r0, [r5, #0]
 8005b88:	6128      	str	r0, [r5, #16]
 8005b8a:	b930      	cbnz	r0, 8005b9a <_svfiprintf_r+0x32>
 8005b8c:	230c      	movs	r3, #12
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	b01d      	add	sp, #116	@ 0x74
 8005b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9a:	2340      	movs	r3, #64	@ 0x40
 8005b9c:	616b      	str	r3, [r5, #20]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba2:	2320      	movs	r3, #32
 8005ba4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ba8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bac:	2330      	movs	r3, #48	@ 0x30
 8005bae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d4c <_svfiprintf_r+0x1e4>
 8005bb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bb6:	f04f 0901 	mov.w	r9, #1
 8005bba:	4623      	mov	r3, r4
 8005bbc:	469a      	mov	sl, r3
 8005bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc2:	b10a      	cbz	r2, 8005bc8 <_svfiprintf_r+0x60>
 8005bc4:	2a25      	cmp	r2, #37	@ 0x25
 8005bc6:	d1f9      	bne.n	8005bbc <_svfiprintf_r+0x54>
 8005bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8005bcc:	d00b      	beq.n	8005be6 <_svfiprintf_r+0x7e>
 8005bce:	465b      	mov	r3, fp
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	f7ff ff6b 	bl	8005ab0 <__ssputs_r>
 8005bda:	3001      	adds	r0, #1
 8005bdc:	f000 80a7 	beq.w	8005d2e <_svfiprintf_r+0x1c6>
 8005be0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005be2:	445a      	add	r2, fp
 8005be4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005be6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 809f 	beq.w	8005d2e <_svfiprintf_r+0x1c6>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bfa:	f10a 0a01 	add.w	sl, sl, #1
 8005bfe:	9304      	str	r3, [sp, #16]
 8005c00:	9307      	str	r3, [sp, #28]
 8005c02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c06:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c08:	4654      	mov	r4, sl
 8005c0a:	2205      	movs	r2, #5
 8005c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c10:	484e      	ldr	r0, [pc, #312]	@ (8005d4c <_svfiprintf_r+0x1e4>)
 8005c12:	f7fa fb0d 	bl	8000230 <memchr>
 8005c16:	9a04      	ldr	r2, [sp, #16]
 8005c18:	b9d8      	cbnz	r0, 8005c52 <_svfiprintf_r+0xea>
 8005c1a:	06d0      	lsls	r0, r2, #27
 8005c1c:	bf44      	itt	mi
 8005c1e:	2320      	movmi	r3, #32
 8005c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c24:	0711      	lsls	r1, r2, #28
 8005c26:	bf44      	itt	mi
 8005c28:	232b      	movmi	r3, #43	@ 0x2b
 8005c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c34:	d015      	beq.n	8005c62 <_svfiprintf_r+0xfa>
 8005c36:	9a07      	ldr	r2, [sp, #28]
 8005c38:	4654      	mov	r4, sl
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f04f 0c0a 	mov.w	ip, #10
 8005c40:	4621      	mov	r1, r4
 8005c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c46:	3b30      	subs	r3, #48	@ 0x30
 8005c48:	2b09      	cmp	r3, #9
 8005c4a:	d94b      	bls.n	8005ce4 <_svfiprintf_r+0x17c>
 8005c4c:	b1b0      	cbz	r0, 8005c7c <_svfiprintf_r+0x114>
 8005c4e:	9207      	str	r2, [sp, #28]
 8005c50:	e014      	b.n	8005c7c <_svfiprintf_r+0x114>
 8005c52:	eba0 0308 	sub.w	r3, r0, r8
 8005c56:	fa09 f303 	lsl.w	r3, r9, r3
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	9304      	str	r3, [sp, #16]
 8005c5e:	46a2      	mov	sl, r4
 8005c60:	e7d2      	b.n	8005c08 <_svfiprintf_r+0xa0>
 8005c62:	9b03      	ldr	r3, [sp, #12]
 8005c64:	1d19      	adds	r1, r3, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	9103      	str	r1, [sp, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bfbb      	ittet	lt
 8005c6e:	425b      	neglt	r3, r3
 8005c70:	f042 0202 	orrlt.w	r2, r2, #2
 8005c74:	9307      	strge	r3, [sp, #28]
 8005c76:	9307      	strlt	r3, [sp, #28]
 8005c78:	bfb8      	it	lt
 8005c7a:	9204      	strlt	r2, [sp, #16]
 8005c7c:	7823      	ldrb	r3, [r4, #0]
 8005c7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c80:	d10a      	bne.n	8005c98 <_svfiprintf_r+0x130>
 8005c82:	7863      	ldrb	r3, [r4, #1]
 8005c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c86:	d132      	bne.n	8005cee <_svfiprintf_r+0x186>
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	1d1a      	adds	r2, r3, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	9203      	str	r2, [sp, #12]
 8005c90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c94:	3402      	adds	r4, #2
 8005c96:	9305      	str	r3, [sp, #20]
 8005c98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d5c <_svfiprintf_r+0x1f4>
 8005c9c:	7821      	ldrb	r1, [r4, #0]
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	f7fa fac5 	bl	8000230 <memchr>
 8005ca6:	b138      	cbz	r0, 8005cb8 <_svfiprintf_r+0x150>
 8005ca8:	9b04      	ldr	r3, [sp, #16]
 8005caa:	eba0 000a 	sub.w	r0, r0, sl
 8005cae:	2240      	movs	r2, #64	@ 0x40
 8005cb0:	4082      	lsls	r2, r0
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	3401      	adds	r4, #1
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cbc:	4824      	ldr	r0, [pc, #144]	@ (8005d50 <_svfiprintf_r+0x1e8>)
 8005cbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cc2:	2206      	movs	r2, #6
 8005cc4:	f7fa fab4 	bl	8000230 <memchr>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d036      	beq.n	8005d3a <_svfiprintf_r+0x1d2>
 8005ccc:	4b21      	ldr	r3, [pc, #132]	@ (8005d54 <_svfiprintf_r+0x1ec>)
 8005cce:	bb1b      	cbnz	r3, 8005d18 <_svfiprintf_r+0x1b0>
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	3307      	adds	r3, #7
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
 8005cd8:	3308      	adds	r3, #8
 8005cda:	9303      	str	r3, [sp, #12]
 8005cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cde:	4433      	add	r3, r6
 8005ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ce2:	e76a      	b.n	8005bba <_svfiprintf_r+0x52>
 8005ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ce8:	460c      	mov	r4, r1
 8005cea:	2001      	movs	r0, #1
 8005cec:	e7a8      	b.n	8005c40 <_svfiprintf_r+0xd8>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	3401      	adds	r4, #1
 8005cf2:	9305      	str	r3, [sp, #20]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	f04f 0c0a 	mov.w	ip, #10
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d00:	3a30      	subs	r2, #48	@ 0x30
 8005d02:	2a09      	cmp	r2, #9
 8005d04:	d903      	bls.n	8005d0e <_svfiprintf_r+0x1a6>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0c6      	beq.n	8005c98 <_svfiprintf_r+0x130>
 8005d0a:	9105      	str	r1, [sp, #20]
 8005d0c:	e7c4      	b.n	8005c98 <_svfiprintf_r+0x130>
 8005d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d12:	4604      	mov	r4, r0
 8005d14:	2301      	movs	r3, #1
 8005d16:	e7f0      	b.n	8005cfa <_svfiprintf_r+0x192>
 8005d18:	ab03      	add	r3, sp, #12
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d58 <_svfiprintf_r+0x1f0>)
 8005d20:	a904      	add	r1, sp, #16
 8005d22:	4638      	mov	r0, r7
 8005d24:	f3af 8000 	nop.w
 8005d28:	1c42      	adds	r2, r0, #1
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	d1d6      	bne.n	8005cdc <_svfiprintf_r+0x174>
 8005d2e:	89ab      	ldrh	r3, [r5, #12]
 8005d30:	065b      	lsls	r3, r3, #25
 8005d32:	f53f af2d 	bmi.w	8005b90 <_svfiprintf_r+0x28>
 8005d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d38:	e72c      	b.n	8005b94 <_svfiprintf_r+0x2c>
 8005d3a:	ab03      	add	r3, sp, #12
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	462a      	mov	r2, r5
 8005d40:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <_svfiprintf_r+0x1f0>)
 8005d42:	a904      	add	r1, sp, #16
 8005d44:	4638      	mov	r0, r7
 8005d46:	f000 f879 	bl	8005e3c <_printf_i>
 8005d4a:	e7ed      	b.n	8005d28 <_svfiprintf_r+0x1c0>
 8005d4c:	080089d8 	.word	0x080089d8
 8005d50:	080089e2 	.word	0x080089e2
 8005d54:	00000000 	.word	0x00000000
 8005d58:	08005ab1 	.word	0x08005ab1
 8005d5c:	080089de 	.word	0x080089de

08005d60 <_printf_common>:
 8005d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d64:	4616      	mov	r6, r2
 8005d66:	4698      	mov	r8, r3
 8005d68:	688a      	ldr	r2, [r1, #8]
 8005d6a:	690b      	ldr	r3, [r1, #16]
 8005d6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d70:	4293      	cmp	r3, r2
 8005d72:	bfb8      	it	lt
 8005d74:	4613      	movlt	r3, r2
 8005d76:	6033      	str	r3, [r6, #0]
 8005d78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	b10a      	cbz	r2, 8005d86 <_printf_common+0x26>
 8005d82:	3301      	adds	r3, #1
 8005d84:	6033      	str	r3, [r6, #0]
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	0699      	lsls	r1, r3, #26
 8005d8a:	bf42      	ittt	mi
 8005d8c:	6833      	ldrmi	r3, [r6, #0]
 8005d8e:	3302      	addmi	r3, #2
 8005d90:	6033      	strmi	r3, [r6, #0]
 8005d92:	6825      	ldr	r5, [r4, #0]
 8005d94:	f015 0506 	ands.w	r5, r5, #6
 8005d98:	d106      	bne.n	8005da8 <_printf_common+0x48>
 8005d9a:	f104 0a19 	add.w	sl, r4, #25
 8005d9e:	68e3      	ldr	r3, [r4, #12]
 8005da0:	6832      	ldr	r2, [r6, #0]
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	42ab      	cmp	r3, r5
 8005da6:	dc26      	bgt.n	8005df6 <_printf_common+0x96>
 8005da8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005dac:	6822      	ldr	r2, [r4, #0]
 8005dae:	3b00      	subs	r3, #0
 8005db0:	bf18      	it	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	0692      	lsls	r2, r2, #26
 8005db6:	d42b      	bmi.n	8005e10 <_printf_common+0xb0>
 8005db8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	47c8      	blx	r9
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d01e      	beq.n	8005e04 <_printf_common+0xa4>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	6922      	ldr	r2, [r4, #16]
 8005dca:	f003 0306 	and.w	r3, r3, #6
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	bf02      	ittt	eq
 8005dd2:	68e5      	ldreq	r5, [r4, #12]
 8005dd4:	6833      	ldreq	r3, [r6, #0]
 8005dd6:	1aed      	subeq	r5, r5, r3
 8005dd8:	68a3      	ldr	r3, [r4, #8]
 8005dda:	bf0c      	ite	eq
 8005ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de0:	2500      	movne	r5, #0
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bfc4      	itt	gt
 8005de6:	1a9b      	subgt	r3, r3, r2
 8005de8:	18ed      	addgt	r5, r5, r3
 8005dea:	2600      	movs	r6, #0
 8005dec:	341a      	adds	r4, #26
 8005dee:	42b5      	cmp	r5, r6
 8005df0:	d11a      	bne.n	8005e28 <_printf_common+0xc8>
 8005df2:	2000      	movs	r0, #0
 8005df4:	e008      	b.n	8005e08 <_printf_common+0xa8>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4652      	mov	r2, sl
 8005dfa:	4641      	mov	r1, r8
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	47c8      	blx	r9
 8005e00:	3001      	adds	r0, #1
 8005e02:	d103      	bne.n	8005e0c <_printf_common+0xac>
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295
 8005e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	e7c6      	b.n	8005d9e <_printf_common+0x3e>
 8005e10:	18e1      	adds	r1, r4, r3
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	2030      	movs	r0, #48	@ 0x30
 8005e16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e1a:	4422      	add	r2, r4
 8005e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e24:	3302      	adds	r3, #2
 8005e26:	e7c7      	b.n	8005db8 <_printf_common+0x58>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	4638      	mov	r0, r7
 8005e30:	47c8      	blx	r9
 8005e32:	3001      	adds	r0, #1
 8005e34:	d0e6      	beq.n	8005e04 <_printf_common+0xa4>
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7d9      	b.n	8005dee <_printf_common+0x8e>
	...

08005e3c <_printf_i>:
 8005e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	7e0f      	ldrb	r7, [r1, #24]
 8005e42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e44:	2f78      	cmp	r7, #120	@ 0x78
 8005e46:	4691      	mov	r9, r2
 8005e48:	4680      	mov	r8, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	469a      	mov	sl, r3
 8005e4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e52:	d807      	bhi.n	8005e64 <_printf_i+0x28>
 8005e54:	2f62      	cmp	r7, #98	@ 0x62
 8005e56:	d80a      	bhi.n	8005e6e <_printf_i+0x32>
 8005e58:	2f00      	cmp	r7, #0
 8005e5a:	f000 80d2 	beq.w	8006002 <_printf_i+0x1c6>
 8005e5e:	2f58      	cmp	r7, #88	@ 0x58
 8005e60:	f000 80b9 	beq.w	8005fd6 <_printf_i+0x19a>
 8005e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e6c:	e03a      	b.n	8005ee4 <_printf_i+0xa8>
 8005e6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e72:	2b15      	cmp	r3, #21
 8005e74:	d8f6      	bhi.n	8005e64 <_printf_i+0x28>
 8005e76:	a101      	add	r1, pc, #4	@ (adr r1, 8005e7c <_printf_i+0x40>)
 8005e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e7c:	08005ed5 	.word	0x08005ed5
 8005e80:	08005ee9 	.word	0x08005ee9
 8005e84:	08005e65 	.word	0x08005e65
 8005e88:	08005e65 	.word	0x08005e65
 8005e8c:	08005e65 	.word	0x08005e65
 8005e90:	08005e65 	.word	0x08005e65
 8005e94:	08005ee9 	.word	0x08005ee9
 8005e98:	08005e65 	.word	0x08005e65
 8005e9c:	08005e65 	.word	0x08005e65
 8005ea0:	08005e65 	.word	0x08005e65
 8005ea4:	08005e65 	.word	0x08005e65
 8005ea8:	08005fe9 	.word	0x08005fe9
 8005eac:	08005f13 	.word	0x08005f13
 8005eb0:	08005fa3 	.word	0x08005fa3
 8005eb4:	08005e65 	.word	0x08005e65
 8005eb8:	08005e65 	.word	0x08005e65
 8005ebc:	0800600b 	.word	0x0800600b
 8005ec0:	08005e65 	.word	0x08005e65
 8005ec4:	08005f13 	.word	0x08005f13
 8005ec8:	08005e65 	.word	0x08005e65
 8005ecc:	08005e65 	.word	0x08005e65
 8005ed0:	08005fab 	.word	0x08005fab
 8005ed4:	6833      	ldr	r3, [r6, #0]
 8005ed6:	1d1a      	adds	r2, r3, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6032      	str	r2, [r6, #0]
 8005edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ee0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e09d      	b.n	8006024 <_printf_i+0x1e8>
 8005ee8:	6833      	ldr	r3, [r6, #0]
 8005eea:	6820      	ldr	r0, [r4, #0]
 8005eec:	1d19      	adds	r1, r3, #4
 8005eee:	6031      	str	r1, [r6, #0]
 8005ef0:	0606      	lsls	r6, r0, #24
 8005ef2:	d501      	bpl.n	8005ef8 <_printf_i+0xbc>
 8005ef4:	681d      	ldr	r5, [r3, #0]
 8005ef6:	e003      	b.n	8005f00 <_printf_i+0xc4>
 8005ef8:	0645      	lsls	r5, r0, #25
 8005efa:	d5fb      	bpl.n	8005ef4 <_printf_i+0xb8>
 8005efc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	da03      	bge.n	8005f0c <_printf_i+0xd0>
 8005f04:	232d      	movs	r3, #45	@ 0x2d
 8005f06:	426d      	negs	r5, r5
 8005f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f0c:	4859      	ldr	r0, [pc, #356]	@ (8006074 <_printf_i+0x238>)
 8005f0e:	230a      	movs	r3, #10
 8005f10:	e011      	b.n	8005f36 <_printf_i+0xfa>
 8005f12:	6821      	ldr	r1, [r4, #0]
 8005f14:	6833      	ldr	r3, [r6, #0]
 8005f16:	0608      	lsls	r0, r1, #24
 8005f18:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f1c:	d402      	bmi.n	8005f24 <_printf_i+0xe8>
 8005f1e:	0649      	lsls	r1, r1, #25
 8005f20:	bf48      	it	mi
 8005f22:	b2ad      	uxthmi	r5, r5
 8005f24:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f26:	4853      	ldr	r0, [pc, #332]	@ (8006074 <_printf_i+0x238>)
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	bf14      	ite	ne
 8005f2c:	230a      	movne	r3, #10
 8005f2e:	2308      	moveq	r3, #8
 8005f30:	2100      	movs	r1, #0
 8005f32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f36:	6866      	ldr	r6, [r4, #4]
 8005f38:	60a6      	str	r6, [r4, #8]
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	bfa2      	ittt	ge
 8005f3e:	6821      	ldrge	r1, [r4, #0]
 8005f40:	f021 0104 	bicge.w	r1, r1, #4
 8005f44:	6021      	strge	r1, [r4, #0]
 8005f46:	b90d      	cbnz	r5, 8005f4c <_printf_i+0x110>
 8005f48:	2e00      	cmp	r6, #0
 8005f4a:	d04b      	beq.n	8005fe4 <_printf_i+0x1a8>
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f52:	fb03 5711 	mls	r7, r3, r1, r5
 8005f56:	5dc7      	ldrb	r7, [r0, r7]
 8005f58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f5c:	462f      	mov	r7, r5
 8005f5e:	42bb      	cmp	r3, r7
 8005f60:	460d      	mov	r5, r1
 8005f62:	d9f4      	bls.n	8005f4e <_printf_i+0x112>
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d10b      	bne.n	8005f80 <_printf_i+0x144>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	07df      	lsls	r7, r3, #31
 8005f6c:	d508      	bpl.n	8005f80 <_printf_i+0x144>
 8005f6e:	6923      	ldr	r3, [r4, #16]
 8005f70:	6861      	ldr	r1, [r4, #4]
 8005f72:	4299      	cmp	r1, r3
 8005f74:	bfde      	ittt	le
 8005f76:	2330      	movle	r3, #48	@ 0x30
 8005f78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f80:	1b92      	subs	r2, r2, r6
 8005f82:	6122      	str	r2, [r4, #16]
 8005f84:	f8cd a000 	str.w	sl, [sp]
 8005f88:	464b      	mov	r3, r9
 8005f8a:	aa03      	add	r2, sp, #12
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4640      	mov	r0, r8
 8005f90:	f7ff fee6 	bl	8005d60 <_printf_common>
 8005f94:	3001      	adds	r0, #1
 8005f96:	d14a      	bne.n	800602e <_printf_i+0x1f2>
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	b004      	add	sp, #16
 8005f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	f043 0320 	orr.w	r3, r3, #32
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	4833      	ldr	r0, [pc, #204]	@ (8006078 <_printf_i+0x23c>)
 8005fac:	2778      	movs	r7, #120	@ 0x78
 8005fae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	6831      	ldr	r1, [r6, #0]
 8005fb6:	061f      	lsls	r7, r3, #24
 8005fb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fbc:	d402      	bmi.n	8005fc4 <_printf_i+0x188>
 8005fbe:	065f      	lsls	r7, r3, #25
 8005fc0:	bf48      	it	mi
 8005fc2:	b2ad      	uxthmi	r5, r5
 8005fc4:	6031      	str	r1, [r6, #0]
 8005fc6:	07d9      	lsls	r1, r3, #31
 8005fc8:	bf44      	itt	mi
 8005fca:	f043 0320 	orrmi.w	r3, r3, #32
 8005fce:	6023      	strmi	r3, [r4, #0]
 8005fd0:	b11d      	cbz	r5, 8005fda <_printf_i+0x19e>
 8005fd2:	2310      	movs	r3, #16
 8005fd4:	e7ac      	b.n	8005f30 <_printf_i+0xf4>
 8005fd6:	4827      	ldr	r0, [pc, #156]	@ (8006074 <_printf_i+0x238>)
 8005fd8:	e7e9      	b.n	8005fae <_printf_i+0x172>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	f023 0320 	bic.w	r3, r3, #32
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	e7f6      	b.n	8005fd2 <_printf_i+0x196>
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	e7bd      	b.n	8005f64 <_printf_i+0x128>
 8005fe8:	6833      	ldr	r3, [r6, #0]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	6961      	ldr	r1, [r4, #20]
 8005fee:	1d18      	adds	r0, r3, #4
 8005ff0:	6030      	str	r0, [r6, #0]
 8005ff2:	062e      	lsls	r6, r5, #24
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	d501      	bpl.n	8005ffc <_printf_i+0x1c0>
 8005ff8:	6019      	str	r1, [r3, #0]
 8005ffa:	e002      	b.n	8006002 <_printf_i+0x1c6>
 8005ffc:	0668      	lsls	r0, r5, #25
 8005ffe:	d5fb      	bpl.n	8005ff8 <_printf_i+0x1bc>
 8006000:	8019      	strh	r1, [r3, #0]
 8006002:	2300      	movs	r3, #0
 8006004:	6123      	str	r3, [r4, #16]
 8006006:	4616      	mov	r6, r2
 8006008:	e7bc      	b.n	8005f84 <_printf_i+0x148>
 800600a:	6833      	ldr	r3, [r6, #0]
 800600c:	1d1a      	adds	r2, r3, #4
 800600e:	6032      	str	r2, [r6, #0]
 8006010:	681e      	ldr	r6, [r3, #0]
 8006012:	6862      	ldr	r2, [r4, #4]
 8006014:	2100      	movs	r1, #0
 8006016:	4630      	mov	r0, r6
 8006018:	f7fa f90a 	bl	8000230 <memchr>
 800601c:	b108      	cbz	r0, 8006022 <_printf_i+0x1e6>
 800601e:	1b80      	subs	r0, r0, r6
 8006020:	6060      	str	r0, [r4, #4]
 8006022:	6863      	ldr	r3, [r4, #4]
 8006024:	6123      	str	r3, [r4, #16]
 8006026:	2300      	movs	r3, #0
 8006028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800602c:	e7aa      	b.n	8005f84 <_printf_i+0x148>
 800602e:	6923      	ldr	r3, [r4, #16]
 8006030:	4632      	mov	r2, r6
 8006032:	4649      	mov	r1, r9
 8006034:	4640      	mov	r0, r8
 8006036:	47d0      	blx	sl
 8006038:	3001      	adds	r0, #1
 800603a:	d0ad      	beq.n	8005f98 <_printf_i+0x15c>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	079b      	lsls	r3, r3, #30
 8006040:	d413      	bmi.n	800606a <_printf_i+0x22e>
 8006042:	68e0      	ldr	r0, [r4, #12]
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	4298      	cmp	r0, r3
 8006048:	bfb8      	it	lt
 800604a:	4618      	movlt	r0, r3
 800604c:	e7a6      	b.n	8005f9c <_printf_i+0x160>
 800604e:	2301      	movs	r3, #1
 8006050:	4632      	mov	r2, r6
 8006052:	4649      	mov	r1, r9
 8006054:	4640      	mov	r0, r8
 8006056:	47d0      	blx	sl
 8006058:	3001      	adds	r0, #1
 800605a:	d09d      	beq.n	8005f98 <_printf_i+0x15c>
 800605c:	3501      	adds	r5, #1
 800605e:	68e3      	ldr	r3, [r4, #12]
 8006060:	9903      	ldr	r1, [sp, #12]
 8006062:	1a5b      	subs	r3, r3, r1
 8006064:	42ab      	cmp	r3, r5
 8006066:	dcf2      	bgt.n	800604e <_printf_i+0x212>
 8006068:	e7eb      	b.n	8006042 <_printf_i+0x206>
 800606a:	2500      	movs	r5, #0
 800606c:	f104 0619 	add.w	r6, r4, #25
 8006070:	e7f5      	b.n	800605e <_printf_i+0x222>
 8006072:	bf00      	nop
 8006074:	080089e9 	.word	0x080089e9
 8006078:	080089fa 	.word	0x080089fa

0800607c <memmove>:
 800607c:	4288      	cmp	r0, r1
 800607e:	b510      	push	{r4, lr}
 8006080:	eb01 0402 	add.w	r4, r1, r2
 8006084:	d902      	bls.n	800608c <memmove+0x10>
 8006086:	4284      	cmp	r4, r0
 8006088:	4623      	mov	r3, r4
 800608a:	d807      	bhi.n	800609c <memmove+0x20>
 800608c:	1e43      	subs	r3, r0, #1
 800608e:	42a1      	cmp	r1, r4
 8006090:	d008      	beq.n	80060a4 <memmove+0x28>
 8006092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800609a:	e7f8      	b.n	800608e <memmove+0x12>
 800609c:	4402      	add	r2, r0
 800609e:	4601      	mov	r1, r0
 80060a0:	428a      	cmp	r2, r1
 80060a2:	d100      	bne.n	80060a6 <memmove+0x2a>
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ae:	e7f7      	b.n	80060a0 <memmove+0x24>

080060b0 <memcpy>:
 80060b0:	440a      	add	r2, r1
 80060b2:	4291      	cmp	r1, r2
 80060b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060b8:	d100      	bne.n	80060bc <memcpy+0xc>
 80060ba:	4770      	bx	lr
 80060bc:	b510      	push	{r4, lr}
 80060be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060c6:	4291      	cmp	r1, r2
 80060c8:	d1f9      	bne.n	80060be <memcpy+0xe>
 80060ca:	bd10      	pop	{r4, pc}

080060cc <_realloc_r>:
 80060cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d0:	4680      	mov	r8, r0
 80060d2:	4615      	mov	r5, r2
 80060d4:	460c      	mov	r4, r1
 80060d6:	b921      	cbnz	r1, 80060e2 <_realloc_r+0x16>
 80060d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060dc:	4611      	mov	r1, r2
 80060de:	f7ff bbad 	b.w	800583c <_malloc_r>
 80060e2:	b92a      	cbnz	r2, 80060f0 <_realloc_r+0x24>
 80060e4:	f7ff fc9a 	bl	8005a1c <_free_r>
 80060e8:	2400      	movs	r4, #0
 80060ea:	4620      	mov	r0, r4
 80060ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f0:	f000 f81a 	bl	8006128 <_malloc_usable_size_r>
 80060f4:	4285      	cmp	r5, r0
 80060f6:	4606      	mov	r6, r0
 80060f8:	d802      	bhi.n	8006100 <_realloc_r+0x34>
 80060fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060fe:	d8f4      	bhi.n	80060ea <_realloc_r+0x1e>
 8006100:	4629      	mov	r1, r5
 8006102:	4640      	mov	r0, r8
 8006104:	f7ff fb9a 	bl	800583c <_malloc_r>
 8006108:	4607      	mov	r7, r0
 800610a:	2800      	cmp	r0, #0
 800610c:	d0ec      	beq.n	80060e8 <_realloc_r+0x1c>
 800610e:	42b5      	cmp	r5, r6
 8006110:	462a      	mov	r2, r5
 8006112:	4621      	mov	r1, r4
 8006114:	bf28      	it	cs
 8006116:	4632      	movcs	r2, r6
 8006118:	f7ff ffca 	bl	80060b0 <memcpy>
 800611c:	4621      	mov	r1, r4
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fc7c 	bl	8005a1c <_free_r>
 8006124:	463c      	mov	r4, r7
 8006126:	e7e0      	b.n	80060ea <_realloc_r+0x1e>

08006128 <_malloc_usable_size_r>:
 8006128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612c:	1f18      	subs	r0, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	bfbc      	itt	lt
 8006132:	580b      	ldrlt	r3, [r1, r0]
 8006134:	18c0      	addlt	r0, r0, r3
 8006136:	4770      	bx	lr

08006138 <_init>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	bf00      	nop
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr

08006144 <_fini>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr
