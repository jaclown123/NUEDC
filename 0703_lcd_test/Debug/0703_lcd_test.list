
0703_lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e24  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cb0  08009004  08009004  0000a004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcb4  0800bcb4  0000d0f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcb4  0800bcb4  0000ccb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcbc  0800bcbc  0000d0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bcbc  0800bcbc  0000ccbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bcc4  0800bcc4  0000ccc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800bccc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200000f0  0800bdbc  0000d0f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  0800bdbc  0000d590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d0f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263e5  00000000  00000000  0000d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000471a  00000000  00000000  00033505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00037c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002339  00000000  00000000  00039468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c536  00000000  00000000  0003b7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec53  00000000  00000000  00067cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105427  00000000  00000000  0008692a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018bd51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d9c  00000000  00000000  0018bd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00192b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000d36c  00000000  00000000  00192b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f0 	.word	0x200000f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008fec 	.word	0x08008fec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f4 	.word	0x200000f4
 800021c:	08008fec 	.word	0x08008fec

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_ldivmod>:
 8000b0c:	b97b      	cbnz	r3, 8000b2e <__aeabi_ldivmod+0x22>
 8000b0e:	b972      	cbnz	r2, 8000b2e <__aeabi_ldivmod+0x22>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bfbe      	ittt	lt
 8000b14:	2000      	movlt	r0, #0
 8000b16:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b1a:	e006      	blt.n	8000b2a <__aeabi_ldivmod+0x1e>
 8000b1c:	bf08      	it	eq
 8000b1e:	2800      	cmpeq	r0, #0
 8000b20:	bf1c      	itt	ne
 8000b22:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b26:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2a:	f000 b99d 	b.w	8000e68 <__aeabi_idiv0>
 8000b2e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b32:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b36:	2900      	cmp	r1, #0
 8000b38:	db09      	blt.n	8000b4e <__aeabi_ldivmod+0x42>
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db1a      	blt.n	8000b74 <__aeabi_ldivmod+0x68>
 8000b3e:	f000 f835 	bl	8000bac <__udivmoddi4>
 8000b42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4a:	b004      	add	sp, #16
 8000b4c:	4770      	bx	lr
 8000b4e:	4240      	negs	r0, r0
 8000b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db1b      	blt.n	8000b90 <__aeabi_ldivmod+0x84>
 8000b58:	f000 f828 	bl	8000bac <__udivmoddi4>
 8000b5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b64:	b004      	add	sp, #16
 8000b66:	4240      	negs	r0, r0
 8000b68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6c:	4252      	negs	r2, r2
 8000b6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b72:	4770      	bx	lr
 8000b74:	4252      	negs	r2, r2
 8000b76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b7a:	f000 f817 	bl	8000bac <__udivmoddi4>
 8000b7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b86:	b004      	add	sp, #16
 8000b88:	4240      	negs	r0, r0
 8000b8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8e:	4770      	bx	lr
 8000b90:	4252      	negs	r2, r2
 8000b92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b96:	f000 f809 	bl	8000bac <__udivmoddi4>
 8000b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <_ZN12Adafruit_GFX9setCursorEss>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	803b      	strh	r3, [r7, #0]
    cursor_x = x;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	821a      	strh	r2, [r3, #16]
    cursor_y = y;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	883a      	ldrh	r2, [r7, #0]
 8000e86:	825a      	strh	r2, [r3, #18]
  }
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_ZN12Adafruit_GFX12setTextColorEtt>:
    @brief   Set text font color with custom background color
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	803b      	strh	r3, [r7, #0]
    textcolor = c;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	829a      	strh	r2, [r3, #20]
    textbgcolor = bg;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	883a      	ldrh	r2, [r7, #0]
 8000eae:	82da      	strh	r2, [r3, #22]
  }
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_ZN15Adafruit_SPITFTD1Ev>:

  Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback);

  // DESTRUCTOR ----------------------------------------------------------

  ~Adafruit_SPITFT(){};
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <_ZN15Adafruit_SPITFTD1Ev+0x1c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	0800b778 	.word	0x0800b778

08000edc <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
//#include "Fonts/FreeSerif12pt7b.h"

using SpiCmd = Adafruit_SPITFT::SpiCmd;

void lcd_callback(SpiCmd cmd, uint8_t* pdata, size_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  auto spi = hspi1.Instance;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x80>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	617b      	str	r3, [r7, #20]
  switch (cmd)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d82e      	bhi.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
 8000ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8000efc <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x20>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08000f51 	.word	0x08000f51
 8000f00:	08000f51 	.word	0x08000f51
 8000f04:	08000f51 	.word	0x08000f51
 8000f08:	08000f51 	.word	0x08000f51
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f2b 	.word	0x08000f2b
 8000f14:	08000f39 	.word	0x08000f39
 8000f18:	08000f49 	.word	0x08000f49

  case SpiCmd::cs_high:
    break;

  case SpiCmd::dc_low:
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f22:	480f      	ldr	r0, [pc, #60]	@ (8000f60 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x84>)
 8000f24:	f003 fb36 	bl	8004594 <HAL_GPIO_WritePin>
    break;
 8000f28:	e013      	b.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>

  case SpiCmd::dc_high:
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f30:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x84>)
 8000f32:	f003 fb2f 	bl	8004594 <HAL_GPIO_WritePin>
    break;
 8000f36:	e00c      	b.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>

  case SpiCmd::transmit:
    HAL_SPI_Transmit(&hspi1, pdata, size, size);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	4806      	ldr	r0, [pc, #24]	@ (8000f5c <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x80>)
 8000f42:	f004 faa2 	bl	800548a <HAL_SPI_Transmit>
//    }
//    while (LL_SPI_IsActiveFlag_BSY(spi))
//      ;
//    LL_SPI_Disable(spi);

    break;
 8000f46:	e004      	b.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
//      ;
//    LL_SPI_Disable(spi);
//    break;

  case SpiCmd::delay:
    HAL_Delay(size);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f002 f9e7 	bl	800331c <HAL_Delay>
    break;
 8000f4e:	e000      	b.n	8000f52 <_Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj+0x76>
    break;
 8000f50:	bf00      	nop
  }
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000294 	.word	0x20000294
 8000f60:	48000800 	.word	0x48000800

08000f64 <setup>:

Adafruit_ST7789 lcd(240, 320, lcd_callback);

void setup()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af02      	add	r7, sp, #8
  HAL_Delay(500);
 8000f6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f6e:	f002 f9d5 	bl	800331c <HAL_Delay>
  lcd.init(240, 320);
 8000f72:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f76:	21f0      	movs	r1, #240	@ 0xf0
 8000f78:	484f      	ldr	r0, [pc, #316]	@ (80010b8 <setup+0x154>)
 8000f7a:	f006 fc77 	bl	800786c <_ZN15Adafruit_ST77894initEtt>
  lcd.setRotation(1);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	484d      	ldr	r0, [pc, #308]	@ (80010b8 <setup+0x154>)
 8000f82:	f006 fc1d 	bl	80077c0 <_ZN15Adafruit_ST778911setRotationEh>
  lcd.fillScreen(ST77XX_BLACK);
 8000f86:	2100      	movs	r1, #0
 8000f88:	484b      	ldr	r0, [pc, #300]	@ (80010b8 <setup+0x154>)
 8000f8a:	f005 fd1f 	bl	80069cc <_ZN12Adafruit_GFX10fillScreenEt>
  lcd_show_picture(0, 0, 50, 75, gImage_elec);
 8000f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80010bc <setup+0x158>)
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	234b      	movs	r3, #75	@ 0x4b
 8000f94:	2232      	movs	r2, #50	@ 0x32
 8000f96:	2100      	movs	r1, #0
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 f8a3 	bl	80010e4 <lcd_show_picture>
  lcd.setCursor(115, 5);
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	2173      	movs	r1, #115	@ 0x73
 8000fa2:	4845      	ldr	r0, [pc, #276]	@ (80010b8 <setup+0x154>)
 8000fa4:	f7ff ff62 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000fae:	4842      	ldr	r0, [pc, #264]	@ (80010b8 <setup+0x154>)
 8000fb0:	f7ff ff70 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.setTextSize(2);
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4840      	ldr	r0, [pc, #256]	@ (80010b8 <setup+0x154>)
 8000fb8:	f006 f800 	bl	8006fbc <_ZN12Adafruit_GFX11setTextSizeEh>
  lcd.printf("0.BASIC\n");
 8000fbc:	4940      	ldr	r1, [pc, #256]	@ (80010c0 <setup+0x15c>)
 8000fbe:	483e      	ldr	r0, [pc, #248]	@ (80010b8 <setup+0x154>)
 8000fc0:	f006 fda2 	bl	8007b08 <_ZN5Print6printfEPKcz>
  lcd_show_picture(101, 25, 12, 20, MenuCursor16x16);
 8000fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <setup+0x160>)
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2314      	movs	r3, #20
 8000fca:	220c      	movs	r2, #12
 8000fcc:	2119      	movs	r1, #25
 8000fce:	2065      	movs	r0, #101	@ 0x65
 8000fd0:	f000 f888 	bl	80010e4 <lcd_show_picture>
  lcd.setCursor(115 , 25);
 8000fd4:	2219      	movs	r2, #25
 8000fd6:	2173      	movs	r1, #115	@ 0x73
 8000fd8:	4837      	ldr	r0, [pc, #220]	@ (80010b8 <setup+0x154>)
 8000fda:	f7ff ff47 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000fe4:	4834      	ldr	r0, [pc, #208]	@ (80010b8 <setup+0x154>)
 8000fe6:	f7ff ff55 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("1.AMPL\n");
 8000fea:	4937      	ldr	r1, [pc, #220]	@ (80010c8 <setup+0x164>)
 8000fec:	4832      	ldr	r0, [pc, #200]	@ (80010b8 <setup+0x154>)
 8000fee:	f006 fd8b 	bl	8007b08 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 45);
 8000ff2:	222d      	movs	r2, #45	@ 0x2d
 8000ff4:	2173      	movs	r1, #115	@ 0x73
 8000ff6:	4830      	ldr	r0, [pc, #192]	@ (80010b8 <setup+0x154>)
 8000ff8:	f7ff ff38 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8001002:	482d      	ldr	r0, [pc, #180]	@ (80010b8 <setup+0x154>)
 8001004:	f7ff ff46 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("2.MODULATION\n");
 8001008:	4930      	ldr	r1, [pc, #192]	@ (80010cc <setup+0x168>)
 800100a:	482b      	ldr	r0, [pc, #172]	@ (80010b8 <setup+0x154>)
 800100c:	f006 fd7c 	bl	8007b08 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 65);
 8001010:	2241      	movs	r2, #65	@ 0x41
 8001012:	2173      	movs	r1, #115	@ 0x73
 8001014:	4828      	ldr	r0, [pc, #160]	@ (80010b8 <setup+0x154>)
 8001016:	f7ff ff29 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 800101a:	2200      	movs	r2, #0
 800101c:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8001020:	4825      	ldr	r0, [pc, #148]	@ (80010b8 <setup+0x154>)
 8001022:	f7ff ff37 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("3.DELAY\n");
 8001026:	492a      	ldr	r1, [pc, #168]	@ (80010d0 <setup+0x16c>)
 8001028:	4823      	ldr	r0, [pc, #140]	@ (80010b8 <setup+0x154>)
 800102a:	f006 fd6d 	bl	8007b08 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 85);
 800102e:	2255      	movs	r2, #85	@ 0x55
 8001030:	2173      	movs	r1, #115	@ 0x73
 8001032:	4821      	ldr	r0, [pc, #132]	@ (80010b8 <setup+0x154>)
 8001034:	f7ff ff1a 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8001038:	2200      	movs	r2, #0
 800103a:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800103e:	481e      	ldr	r0, [pc, #120]	@ (80010b8 <setup+0x154>)
 8001040:	f7ff ff28 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("4.ATTENUATION\n");
 8001044:	4923      	ldr	r1, [pc, #140]	@ (80010d4 <setup+0x170>)
 8001046:	481c      	ldr	r0, [pc, #112]	@ (80010b8 <setup+0x154>)
 8001048:	f006 fd5e 	bl	8007b08 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 105);
 800104c:	2269      	movs	r2, #105	@ 0x69
 800104e:	2173      	movs	r1, #115	@ 0x73
 8001050:	4819      	ldr	r0, [pc, #100]	@ (80010b8 <setup+0x154>)
 8001052:	f7ff ff0b 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8001056:	2200      	movs	r2, #0
 8001058:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800105c:	4816      	ldr	r0, [pc, #88]	@ (80010b8 <setup+0x154>)
 800105e:	f7ff ff19 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("5.FREQUENCY\n");
 8001062:	491d      	ldr	r1, [pc, #116]	@ (80010d8 <setup+0x174>)
 8001064:	4814      	ldr	r0, [pc, #80]	@ (80010b8 <setup+0x154>)
 8001066:	f006 fd4f 	bl	8007b08 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 125);
 800106a:	227d      	movs	r2, #125	@ 0x7d
 800106c:	2173      	movs	r1, #115	@ 0x73
 800106e:	4812      	ldr	r0, [pc, #72]	@ (80010b8 <setup+0x154>)
 8001070:	f7ff fefc 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8001074:	2200      	movs	r2, #0
 8001076:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 800107a:	480f      	ldr	r0, [pc, #60]	@ (80010b8 <setup+0x154>)
 800107c:	f7ff ff0a 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("6.CARRIER PHASE\n");
 8001080:	4916      	ldr	r1, [pc, #88]	@ (80010dc <setup+0x178>)
 8001082:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <setup+0x154>)
 8001084:	f006 fd40 	bl	8007b08 <_ZN5Print6printfEPKcz>
  lcd.setCursor(115, 145);
 8001088:	2291      	movs	r2, #145	@ 0x91
 800108a:	2173      	movs	r1, #115	@ 0x73
 800108c:	480a      	ldr	r0, [pc, #40]	@ (80010b8 <setup+0x154>)
 800108e:	f7ff feed 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
  lcd.setTextColor(ST77XX_CYAN, ST77XX_BLACK);
 8001092:	2200      	movs	r2, #0
 8001094:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8001098:	4807      	ldr	r0, [pc, #28]	@ (80010b8 <setup+0x154>)
 800109a:	f7ff fefb 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
  lcd.printf("7.SIGNAL PHASE\n");
 800109e:	4910      	ldr	r1, [pc, #64]	@ (80010e0 <setup+0x17c>)
 80010a0:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <setup+0x154>)
 80010a2:	f006 fd31 	bl	8007b08 <_ZN5Print6printfEPKcz>
//  lcd.setTextColor(ST77XX_BLACK, ST77XX_WHITE);
//  lcd.printf(" N");
//  lcd.setCursor(5, 105);
//  lcd.setTextColor(ST77XX_WHITE, ST77XX_BLACK);
//  lcd.printf(" H");
  lcd.setTextColor(ST77XX_RED, ST77XX_BLACK);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80010ac:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <setup+0x154>)
 80010ae:	f7ff fef1 	bl	8000e94 <_ZN12Adafruit_GFX12setTextColorEtt>
//    lcd.drawFastHLine(i, 320-1-i, 240-2*i, ST77XX_YELLOW);
//    lcd.drawFastVLine(i, 80+i, 240-2*i, ST77XX_GREEN);
//    lcd.drawFastVLine(240-1-i, 80+i, 240-2*i, ST77XX_BLUE);
//    HAL_Delay(100);
//  }
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000010c 	.word	0x2000010c
 80010bc:	0800910c 	.word	0x0800910c
 80010c0:	08009004 	.word	0x08009004
 80010c4:	0800ae58 	.word	0x0800ae58
 80010c8:	08009010 	.word	0x08009010
 80010cc:	08009018 	.word	0x08009018
 80010d0:	08009028 	.word	0x08009028
 80010d4:	08009034 	.word	0x08009034
 80010d8:	08009044 	.word	0x08009044
 80010dc:	08009054 	.word	0x08009054
 80010e0:	08009068 	.word	0x08009068

080010e4 <lcd_show_picture>:

void lcd_show_picture(uint16_t x, uint16_t y , uint16_t col , uint16_t row , const unsigned char * p)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4604      	mov	r4, r0
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4623      	mov	r3, r4
 80010f4:	80fb      	strh	r3, [r7, #6]
 80010f6:	4603      	mov	r3, r0
 80010f8:	80bb      	strh	r3, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	807b      	strh	r3, [r7, #2]
 80010fe:	4613      	mov	r3, r2
 8001100:	803b      	strh	r3, [r7, #0]
	uint16_t * data = (uint16_t *) p;
 8001102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001104:	617b      	str	r3, [r7, #20]
	for (int i = y ; i < row + y ; ++i)
 8001106:	88bb      	ldrh	r3, [r7, #4]
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	e01a      	b.n	8001142 <lcd_show_picture+0x5e>
	{
		for ( int j = x ; j < col + x ; ++j)
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e00e      	b.n	8001130 <lcd_show_picture+0x4c>
		{
			lcd.drawPixel(j, i, *data++);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	b219      	sxth	r1, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	b218      	sxth	r0, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1c9a      	adds	r2, r3, #2
 800111e:	617a      	str	r2, [r7, #20]
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	4602      	mov	r2, r0
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <lcd_show_picture+0x74>)
 8001126:	f006 f863 	bl	80071f0 <_ZN15Adafruit_SPITFT9drawPixelEsst>
		for ( int j = x ; j < col + x ; ++j)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	887a      	ldrh	r2, [r7, #2]
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4413      	add	r3, r2
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbea      	blt.n	8001112 <lcd_show_picture+0x2e>
	for (int i = y ; i < row + y ; ++i)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	3301      	adds	r3, #1
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	883a      	ldrh	r2, [r7, #0]
 8001144:	88bb      	ldrh	r3, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	429a      	cmp	r2, r3
 800114c:	dbde      	blt.n	800110c <lcd_show_picture+0x28>
		}
	}
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	2000010c 	.word	0x2000010c

0800115c <lcd_show_num>:
void lcd_show_num(int n)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af02      	add	r7, sp, #8
 8001162:	6078      	str	r0, [r7, #4]
	lcd.fillRect(150, 185, 230, 20, BLACK);
 8001164:	2300      	movs	r3, #0
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	2314      	movs	r3, #20
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	23e6      	movs	r3, #230	@ 0xe6
 800116e:	22b9      	movs	r2, #185	@ 0xb9
 8001170:	2196      	movs	r1, #150	@ 0x96
 8001172:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <lcd_show_num+0x4c>)
 8001174:	f006 f9dc 	bl	8007530 <_ZN15Adafruit_SPITFT8fillRectEsssst>
	lcd.setCursor(150, 185);
 8001178:	22b9      	movs	r2, #185	@ 0xb9
 800117a:	2196      	movs	r1, #150	@ 0x96
 800117c:	480a      	ldr	r0, [pc, #40]	@ (80011a8 <lcd_show_num+0x4c>)
 800117e:	f7ff fe75 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
	lcd.printf("   ");
 8001182:	490a      	ldr	r1, [pc, #40]	@ (80011ac <lcd_show_num+0x50>)
 8001184:	4808      	ldr	r0, [pc, #32]	@ (80011a8 <lcd_show_num+0x4c>)
 8001186:	f006 fcbf 	bl	8007b08 <_ZN5Print6printfEPKcz>
	lcd.setCursor(150, 185);
 800118a:	22b9      	movs	r2, #185	@ 0xb9
 800118c:	2196      	movs	r1, #150	@ 0x96
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <lcd_show_num+0x4c>)
 8001190:	f7ff fe6c 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
	lcd.print(n);
 8001194:	220a      	movs	r2, #10
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <lcd_show_num+0x4c>)
 800119a:	f006 fd2b 	bl	8007bf4 <_ZN5Print5printEii>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000010c 	.word	0x2000010c
 80011ac:	08009078 	.word	0x08009078

080011b0 <lcd_show_str>:
void lcd_show_str(int16_t x, int16_t y,const char * lmf)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	4603      	mov	r3, r0
 80011b8:	603a      	str	r2, [r7, #0]
 80011ba:	80fb      	strh	r3, [r7, #6]
 80011bc:	460b      	mov	r3, r1
 80011be:	80bb      	strh	r3, [r7, #4]
	lcd.setCursor(x, y);
 80011c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c8:	4619      	mov	r1, r3
 80011ca:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <lcd_show_str+0x48>)
 80011cc:	f7ff fe4e 	bl	8000e6c <_ZN12Adafruit_GFX9setCursorEss>
	lcd.fillRect(x, y, 230, 20, BLACK);
 80011d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011d4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80011d8:	2300      	movs	r3, #0
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2314      	movs	r3, #20
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	23e6      	movs	r3, #230	@ 0xe6
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <lcd_show_str+0x48>)
 80011e4:	f006 f9a4 	bl	8007530 <_ZN15Adafruit_SPITFT8fillRectEsssst>
	lcd.printf(lmf);
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <lcd_show_str+0x48>)
 80011ec:	f006 fc8c 	bl	8007b08 <_ZN5Print6printfEPKcz>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000010c 	.word	0x2000010c

080011fc <lcd_show_black>:
void lcd_show_black(int16_t x, int16_t y , int16_t w, int16_t h)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af02      	add	r7, sp, #8
 8001202:	4604      	mov	r4, r0
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4623      	mov	r3, r4
 800120c:	80fb      	strh	r3, [r7, #6]
 800120e:	4603      	mov	r3, r0
 8001210:	80bb      	strh	r3, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]
 8001216:	4613      	mov	r3, r2
 8001218:	803b      	strh	r3, [r7, #0]
	lcd.fillRect(x, y, w, h, BLACK);
 800121a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800121e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001222:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001226:	2300      	movs	r3, #0
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4603      	mov	r3, r0
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <lcd_show_black+0x44>)
 8001234:	f006 f97c 	bl	8007530 <_ZN15Adafruit_SPITFT8fillRectEsssst>
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	2000010c 	.word	0x2000010c

08001244 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA 0xF81F
#define ST77XX_YELLOW 0xFFE0
#define ST77XX_ORANGE 0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <_ZN15Adafruit_ST77xxD1Ev+0x20>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe31 	bl	8000ebc <_ZN15Adafruit_SPITFTD1Ev>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800b858 	.word	0x0800b858

08001268 <_ZN15Adafruit_ST7789D1Ev>:
#define _ADAFRUIT_ST7789H_

#include "Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <_ZN15Adafruit_ST7789D1Ev+0x20>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ffe3 	bl	8001244 <_ZN15Adafruit_ST77xxD1Ev>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	0800b7d8 	.word	0x0800b7d8

0800128c <_Z41__static_initialization_and_destruction_0ii>:
void loop()
{
  ;
}
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d10b      	bne.n	80012b4 <_Z41__static_initialization_and_destruction_0ii+0x28>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d106      	bne.n	80012b4 <_Z41__static_initialization_and_destruction_0ii+0x28>
Adafruit_ST7789 lcd(240, 320, lcd_callback);
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80012a8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80012ac:	21f0      	movs	r1, #240	@ 0xf0
 80012ae:	480a      	ldr	r0, [pc, #40]	@ (80012d8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80012b0:	f006 fad0 	bl	8007854 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d107      	bne.n	80012ca <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d102      	bne.n	80012ca <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80012c6:	f7ff ffcf 	bl	8001268 <_ZN15Adafruit_ST7789D1Ev>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08000edd 	.word	0x08000edd
 80012d8:	2000010c 	.word	0x2000010c

080012dc <_GLOBAL__sub_I__Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
 80012e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff ffd1 	bl	800128c <_Z41__static_initialization_and_destruction_0ii>
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_GLOBAL__sub_D__Z12lcd_callbackN15Adafruit_SPITFT6SpiCmdEPhj>:
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ffc9 	bl	800128c <_Z41__static_initialization_and_destruction_0ii>
 80012fa:	bd80      	pop	{r7, pc}

080012fc <AD9959_WriteData>:
158,
126,
100 };

void AD9959_WriteData(uint8_t RegisterAddress, uint8_t NumberofRegisters, uint8_t *RegisterData)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	603a      	str	r2, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	460b      	mov	r3, r1
 800130a:	71bb      	strb	r3, [r7, #6]
	uint8_t	ControlValue = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
	uint8_t	ValueToWrite = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	73bb      	strb	r3, [r7, #14]
	uint8_t	RegisterIndex = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	737b      	strb	r3, [r7, #13]
	uint8_t	i = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	733b      	strb	r3, [r7, #12]
	ControlValue = RegisterAddress;
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	73fb      	strb	r3, [r7, #15]
	SCLK_LOW;
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	4839      	ldr	r0, [pc, #228]	@ (800140c <AD9959_WriteData+0x110>)
 8001326:	f003 f935 	bl	8004594 <HAL_GPIO_WritePin>
	CS_LOW;
 800132a:	2200      	movs	r2, #0
 800132c:	2102      	movs	r1, #2
 800132e:	4837      	ldr	r0, [pc, #220]	@ (800140c <AD9959_WriteData+0x110>)
 8001330:	f003 f930 	bl	8004594 <HAL_GPIO_WritePin>
	for(i=0; i<8; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	733b      	strb	r3, [r7, #12]
 8001338:	e01e      	b.n	8001378 <AD9959_WriteData+0x7c>
	{
		SCLK_LOW;
 800133a:	2200      	movs	r2, #0
 800133c:	2101      	movs	r1, #1
 800133e:	4833      	ldr	r0, [pc, #204]	@ (800140c <AD9959_WriteData+0x110>)
 8001340:	f003 f928 	bl	8004594 <HAL_GPIO_WritePin>
		if(0x80 == (ControlValue & 0x80))
 8001344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da05      	bge.n	8001358 <AD9959_WriteData+0x5c>
			SDIO0_HIGH;
 800134c:	2201      	movs	r2, #1
 800134e:	2104      	movs	r1, #4
 8001350:	482e      	ldr	r0, [pc, #184]	@ (800140c <AD9959_WriteData+0x110>)
 8001352:	f003 f91f 	bl	8004594 <HAL_GPIO_WritePin>
 8001356:	e004      	b.n	8001362 <AD9959_WriteData+0x66>
		else
			SDIO0_LOW;
 8001358:	2200      	movs	r2, #0
 800135a:	2104      	movs	r1, #4
 800135c:	482b      	ldr	r0, [pc, #172]	@ (800140c <AD9959_WriteData+0x110>)
 800135e:	f003 f919 	bl	8004594 <HAL_GPIO_WritePin>
		SCLK_HIGH;
 8001362:	2201      	movs	r2, #1
 8001364:	2101      	movs	r1, #1
 8001366:	4829      	ldr	r0, [pc, #164]	@ (800140c <AD9959_WriteData+0x110>)
 8001368:	f003 f914 	bl	8004594 <HAL_GPIO_WritePin>
		ControlValue <<= 1;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<8; i++)
 8001372:	7b3b      	ldrb	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	733b      	strb	r3, [r7, #12]
 8001378:	7b3b      	ldrb	r3, [r7, #12]
 800137a:	2b07      	cmp	r3, #7
 800137c:	d9dd      	bls.n	800133a <AD9959_WriteData+0x3e>
	}
	SCLK_LOW;
 800137e:	2200      	movs	r2, #0
 8001380:	2101      	movs	r1, #1
 8001382:	4822      	ldr	r0, [pc, #136]	@ (800140c <AD9959_WriteData+0x110>)
 8001384:	f003 f906 	bl	8004594 <HAL_GPIO_WritePin>
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 8001388:	2300      	movs	r3, #0
 800138a:	737b      	strb	r3, [r7, #13]
 800138c:	e031      	b.n	80013f2 <AD9959_WriteData+0xf6>
	{
		ValueToWrite = RegisterData[RegisterIndex];
 800138e:	7b7b      	ldrb	r3, [r7, #13]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	733b      	strb	r3, [r7, #12]
 800139c:	e01e      	b.n	80013dc <AD9959_WriteData+0xe0>
		{
			SCLK_LOW;
 800139e:	2200      	movs	r2, #0
 80013a0:	2101      	movs	r1, #1
 80013a2:	481a      	ldr	r0, [pc, #104]	@ (800140c <AD9959_WriteData+0x110>)
 80013a4:	f003 f8f6 	bl	8004594 <HAL_GPIO_WritePin>
			if(0x80 == (ValueToWrite & 0x80))
 80013a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	da05      	bge.n	80013bc <AD9959_WriteData+0xc0>
			SDIO0_HIGH;
 80013b0:	2201      	movs	r2, #1
 80013b2:	2104      	movs	r1, #4
 80013b4:	4815      	ldr	r0, [pc, #84]	@ (800140c <AD9959_WriteData+0x110>)
 80013b6:	f003 f8ed 	bl	8004594 <HAL_GPIO_WritePin>
 80013ba:	e004      	b.n	80013c6 <AD9959_WriteData+0xca>
			else
			SDIO0_LOW;
 80013bc:	2200      	movs	r2, #0
 80013be:	2104      	movs	r1, #4
 80013c0:	4812      	ldr	r0, [pc, #72]	@ (800140c <AD9959_WriteData+0x110>)
 80013c2:	f003 f8e7 	bl	8004594 <HAL_GPIO_WritePin>
			SCLK_HIGH;
 80013c6:	2201      	movs	r2, #1
 80013c8:	2101      	movs	r1, #1
 80013ca:	4810      	ldr	r0, [pc, #64]	@ (800140c <AD9959_WriteData+0x110>)
 80013cc:	f003 f8e2 	bl	8004594 <HAL_GPIO_WritePin>
			ValueToWrite <<= 1;
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	73bb      	strb	r3, [r7, #14]
		for (i=0; i<8; i++)
 80013d6:	7b3b      	ldrb	r3, [r7, #12]
 80013d8:	3301      	adds	r3, #1
 80013da:	733b      	strb	r3, [r7, #12]
 80013dc:	7b3b      	ldrb	r3, [r7, #12]
 80013de:	2b07      	cmp	r3, #7
 80013e0:	d9dd      	bls.n	800139e <AD9959_WriteData+0xa2>
		}
		SCLK_LOW;
 80013e2:	2200      	movs	r2, #0
 80013e4:	2101      	movs	r1, #1
 80013e6:	4809      	ldr	r0, [pc, #36]	@ (800140c <AD9959_WriteData+0x110>)
 80013e8:	f003 f8d4 	bl	8004594 <HAL_GPIO_WritePin>
	for (RegisterIndex=0; RegisterIndex<NumberofRegisters; RegisterIndex++)
 80013ec:	7b7b      	ldrb	r3, [r7, #13]
 80013ee:	3301      	adds	r3, #1
 80013f0:	737b      	strb	r3, [r7, #13]
 80013f2:	7b7a      	ldrb	r2, [r7, #13]
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d3c9      	bcc.n	800138e <AD9959_WriteData+0x92>
	}
  CS_HIGH;
 80013fa:	2201      	movs	r2, #1
 80013fc:	2102      	movs	r1, #2
 80013fe:	4803      	ldr	r0, [pc, #12]	@ (800140c <AD9959_WriteData+0x110>)
 8001400:	f003 f8c8 	bl	8004594 <HAL_GPIO_WritePin>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	48000800 	.word	0x48000800

08001410 <Write_CFTW0>:
void Write_CFTW0(uint32_t fre)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	uint8_t CFTW0_DATA[4] ={0x00,0x00,0x00,0x00};
 8001418:	2100      	movs	r1, #0
 800141a:	60b9      	str	r1, [r7, #8]
	uint32_t Temp;
	Temp=(uint32_t)fre * 4294967296 / 500000000;
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	2000      	movs	r0, #0
 8001420:	460a      	mov	r2, r1
 8001422:	4603      	mov	r3, r0
 8001424:	f04f 0000 	mov.w	r0, #0
 8001428:	f04f 0100 	mov.w	r1, #0
 800142c:	0011      	movs	r1, r2
 800142e:	2000      	movs	r0, #0
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <Write_CFTW0+0x68>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff fb69 	bl	8000b0c <__aeabi_ldivmod>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4613      	mov	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
	CFTW0_DATA[3]=(uint8_t)Temp;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	72fb      	strb	r3, [r7, #11]
	CFTW0_DATA[2]=(uint8_t)(Temp>>8);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b2db      	uxtb	r3, r3
 800144e:	72bb      	strb	r3, [r7, #10]
	CFTW0_DATA[1]=(uint8_t)(Temp>>16);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	0c1b      	lsrs	r3, r3, #16
 8001454:	b2db      	uxtb	r3, r3
 8001456:	727b      	strb	r3, [r7, #9]
	CFTW0_DATA[0]=(uint8_t)(Temp>>24);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	0e1b      	lsrs	r3, r3, #24
 800145c:	b2db      	uxtb	r3, r3
 800145e:	723b      	strb	r3, [r7, #8]
	AD9959_WriteData(0x04,4,CFTW0_DATA);//CTW0 address 0x04
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	461a      	mov	r2, r3
 8001466:	2104      	movs	r1, #4
 8001468:	2004      	movs	r0, #4
 800146a:	f7ff ff47 	bl	80012fc <AD9959_WriteData>
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	1dcd6500 	.word	0x1dcd6500
 800147c:	00000000 	.word	0x00000000

08001480 <AD9959_Set_Freq>:
void AD9959_Set_Freq(uint8_t Channel,uint32_t Freq)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
	uint8_t CHANNEL[1] = {0x00};
 800148c:	2300      	movs	r3, #0
 800148e:	733b      	strb	r3, [r7, #12]
	CHANNEL[0]=Channel;
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	461a      	mov	r2, r3
 800149a:	2101      	movs	r1, #1
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff ff2d 	bl	80012fc <AD9959_WriteData>
    Write_CFTW0(Freq);
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f7ff ffb4 	bl	8001410 <Write_CFTW0>
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <Write_ACR>:

void Write_ACR(uint16_t Ampl)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
	uint32_t A_temp=0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
	uint8_t ACR_DATA[3] = {0x00,0x00,0x00};//default Value = 0x--0000 Rest = 18.91/Iout
 80014be:	4a10      	ldr	r2, [pc, #64]	@ (8001500 <Write_ACR+0x50>)
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	4611      	mov	r1, r2
 80014c8:	8019      	strh	r1, [r3, #0]
 80014ca:	3302      	adds	r3, #2
 80014cc:	0c12      	lsrs	r2, r2, #16
 80014ce:	701a      	strb	r2, [r3, #0]
    A_temp=Ampl|0x1000;
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	60fb      	str	r3, [r7, #12]
	ACR_DATA[1] = (uint8_t)(A_temp>>8); //高位数据
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	727b      	strb	r3, [r7, #9]
	ACR_DATA[2] = (uint8_t)A_temp;  //低位数据
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	72bb      	strb	r3, [r7, #10]
    AD9959_WriteData(0x06, 3, ACR_DATA); //ACR address 0x06.CHn设定幅度
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	461a      	mov	r2, r3
 80014ee:	2103      	movs	r1, #3
 80014f0:	2006      	movs	r0, #6
 80014f2:	f7ff ff03 	bl	80012fc <AD9959_WriteData>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	0800907c 	.word	0x0800907c

08001504 <AD9959_Set_Ampl>:

void AD9959_Set_Ampl(uint8_t Channel, uint32_t Ampl, int freq)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	73fb      	strb	r3, [r7, #15]
	uint8_t CHANNEL[1] = {0x00};
 8001512:	2300      	movs	r3, #0
 8001514:	753b      	strb	r3, [r7, #20]
	CHANNEL[0]=Channel;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	753b      	strb	r3, [r7, #20]
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道�??????
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	461a      	mov	r2, r3
 8001520:	2101      	movs	r1, #1
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff feea 	bl	80012fc <AD9959_WriteData>
	if (Channel == 0x40)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b40      	cmp	r3, #64	@ 0x40
 800152c:	d119      	bne.n	8001562 <AD9959_Set_Ampl+0x5e>
		Write_ACR((uint16_t)((float)Ampl * ((float)freq_acu_1[freq-30])/180) );
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b1e      	subs	r3, #30
 800153c:	4a19      	ldr	r2, [pc, #100]	@ (80015a4 <AD9959_Set_Ampl+0xa0>)
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80015a8 <AD9959_Set_Ampl+0xa4>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001556:	ee17 3a90 	vmov	r3, s15
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ffa7 	bl	80014b0 <Write_ACR>
	if (Channel == 0x80)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b80      	cmp	r3, #128	@ 0x80
 8001566:	d119      	bne.n	800159c <AD9959_Set_Ampl+0x98>
		Write_ACR((uint16_t)((float)Ampl * ((float)freq_acu_2[freq-30])/180) );	//	CHn设定幅度
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3b1e      	subs	r3, #30
 8001576:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <AD9959_Set_Ampl+0xa8>)
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001584:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80015a8 <AD9959_Set_Ampl+0xa4>
 8001588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff8a 	bl	80014b0 <Write_ACR>
}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000010 	.word	0x20000010
 80015a8:	43340000 	.word	0x43340000
 80015ac:	2000003c 	.word	0x2000003c

080015b0 <Write_CPOW0>:
void Write_CPOW0(uint16_t Phase)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
	uint8_t CPOW0_data[2] = {0x00,0x00};
 80015ba:	2300      	movs	r3, #0
 80015bc:	81bb      	strh	r3, [r7, #12]
	CPOW0_data[1]=(uint8_t)Phase;
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	737b      	strb	r3, [r7, #13]
	CPOW0_data[0]=(uint8_t)(Phase>>8);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x05,2,CPOW0_data);//CPOW0 address 0x05.CHn设定相位
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	461a      	mov	r2, r3
 80015d4:	2102      	movs	r1, #2
 80015d6:	2005      	movs	r0, #5
 80015d8:	f7ff fe90 	bl	80012fc <AD9959_WriteData>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <AD9959_Set_Phase>:

void AD9959_Set_Phase(uint8_t Channel,uint16_t Phase)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	4613      	mov	r3, r2
 80015f2:	80bb      	strh	r3, [r7, #4]
	uint8_t CHANNEL[1] = {0x00};
 80015f4:	2300      	movs	r3, #0
 80015f6:	733b      	strb	r3, [r7, #12]
	CHANNEL[0]=Channel;
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	733b      	strb	r3, [r7, #12]
	AD9959_WriteData(0x00,1,CHANNEL); //控制寄存器写入CHn通道�????
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	461a      	mov	r2, r3
 8001602:	2101      	movs	r1, #1
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fe79 	bl	80012fc <AD9959_WriteData>
	Write_CPOW0(Phase);//CHn设定相位
 800160a:	88bb      	ldrh	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ffcf 	bl	80015b0 <Write_CPOW0>
}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <AD9959_Init>:

void AD9959_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  Intserve();  //IO口电平状态初始化
 8001622:	f000 f83b 	bl	800169c <Intserve>
  IntReset();  //AD9959复位
 8001626:	f000 f81d 	bl	8001664 <IntReset>
	//初始化功能寄存器
  uint8_t FR1_DATA[3] = {0xD0,0x00,0x00};//VCO gain control[23]=1系统时钟高于255Mhz; PLL[22:18]=10100,20倍频,20*25M=500MHZ; Charge pump control = 75uA
 800162a:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <AD9959_Init+0x44>)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	4611      	mov	r1, r2
 8001632:	8019      	strh	r1, [r3, #0]
 8001634:	3302      	adds	r3, #2
 8001636:	0c12      	lsrs	r2, r2, #16
 8001638:	701a      	strb	r2, [r3, #0]
  uint8_t FR2_DATA[2] = {0x00,0x00};	// 双方向扫描，即从起始值扫到结束�?�后，又从结束�?�扫到起始�??
 800163a:	2300      	movs	r3, #0
 800163c:	803b      	strh	r3, [r7, #0]
  AD9959_WriteData(0x01,3,FR1_DATA);//写功能寄存器1
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	461a      	mov	r2, r3
 8001642:	2103      	movs	r1, #3
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fe59 	bl	80012fc <AD9959_WriteData>
  AD9959_WriteData(0x02,2,FR2_DATA);
 800164a:	463b      	mov	r3, r7
 800164c:	461a      	mov	r2, r3
 800164e:	2102      	movs	r1, #2
 8001650:	2002      	movs	r0, #2
 8001652:	f7ff fe53 	bl	80012fc <AD9959_WriteData>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	08009080 	.word	0x08009080

08001664 <IntReset>:
void IntReset()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 1<<1, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2102      	movs	r1, #2
 800166c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001670:	f002 ff90 	bl	8004594 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f001 fe51 	bl	800331c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2102      	movs	r1, #2
 800167e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001682:	f002 ff87 	bl	8004594 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f001 fe48 	bl	800331c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, 1<<1, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2102      	movs	r1, #2
 8001690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001694:	f002 ff7e 	bl	8004594 <HAL_GPIO_WritePin>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <Intserve>:
void Intserve(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2110      	movs	r1, #16
 80016a4:	481f      	ldr	r0, [pc, #124]	@ (8001724 <Intserve+0x88>)
 80016a6:	f002 ff75 	bl	8004594 <HAL_GPIO_WritePin>
    CS_HIGH;
 80016aa:	2201      	movs	r2, #1
 80016ac:	2102      	movs	r1, #2
 80016ae:	481d      	ldr	r0, [pc, #116]	@ (8001724 <Intserve+0x88>)
 80016b0:	f002 ff70 	bl	8004594 <HAL_GPIO_WritePin>
    SCLK_LOW;
 80016b4:	2200      	movs	r2, #0
 80016b6:	2101      	movs	r1, #1
 80016b8:	481a      	ldr	r0, [pc, #104]	@ (8001724 <Intserve+0x88>)
 80016ba:	f002 ff6b 	bl	8004594 <HAL_GPIO_WritePin>
    UPDATE_LOW;
 80016be:	2200      	movs	r2, #0
 80016c0:	2108      	movs	r1, #8
 80016c2:	4818      	ldr	r0, [pc, #96]	@ (8001724 <Intserve+0x88>)
 80016c4:	f002 ff66 	bl	8004594 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS0_GPIO_Port, PS0_Pin, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2120      	movs	r1, #32
 80016cc:	4815      	ldr	r0, [pc, #84]	@ (8001724 <Intserve+0x88>)
 80016ce:	f002 ff61 	bl	8004594 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS1_GPIO_Port, PS1_Pin, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016dc:	f002 ff5a 	bl	8004594 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PS2_GPIO_Port, PS2_Pin, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ea:	f002 ff53 	bl	8004594 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(PS3_GPIO_Port, PS3_Pin, 0);
    SDIO0_HIGH;
 80016ee:	2201      	movs	r2, #1
 80016f0:	2104      	movs	r1, #4
 80016f2:	480c      	ldr	r0, [pc, #48]	@ (8001724 <Intserve+0x88>)
 80016f4:	f002 ff4e 	bl	8004594 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO1_GPIO_Port, SDIO1_Pin, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016fe:	4809      	ldr	r0, [pc, #36]	@ (8001724 <Intserve+0x88>)
 8001700:	f002 ff48 	bl	8004594 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO2_GPIO_Port, SDIO2_Pin, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170e:	f002 ff41 	bl	8004594 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDIO3_GPIO_Port, SDIO3_Pin, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171c:	f002 ff3a 	bl	8004594 <HAL_GPIO_WritePin>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	48000800 	.word	0x48000800

08001728 <IO_Update>:
void IO_Update(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	UPDATE_LOW;
 800172c:	2200      	movs	r2, #0
 800172e:	2108      	movs	r1, #8
 8001730:	480a      	ldr	r0, [pc, #40]	@ (800175c <IO_Update+0x34>)
 8001732:	f002 ff2f 	bl	8004594 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f001 fdf0 	bl	800331c <HAL_Delay>
	UPDATE_HIGH;
 800173c:	2201      	movs	r2, #1
 800173e:	2108      	movs	r1, #8
 8001740:	4806      	ldr	r0, [pc, #24]	@ (800175c <IO_Update+0x34>)
 8001742:	f002 ff27 	bl	8004594 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8001746:	2003      	movs	r0, #3
 8001748:	f001 fde8 	bl	800331c <HAL_Delay>
	UPDATE_LOW;
 800174c:	2200      	movs	r2, #0
 800174e:	2108      	movs	r1, #8
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <IO_Update+0x34>)
 8001752:	f002 ff1f 	bl	8004594 <HAL_GPIO_WritePin>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	48000800 	.word	0x48000800

08001760 <set_dac>:
#define dac_length 4 //对应500mV，校准时可能�??????要改
uint16_t scaled_sine_wave_table_Sd[dac_length];
uint16_t scaled_sine_wave_table_Sm[dac_length];

void set_dac(uint16_t modulation,int16_t phase)
{
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b090      	sub	sp, #64	@ 0x40
 8001764:	af02      	add	r7, sp, #8
 8001766:	4603      	mov	r3, r0
 8001768:	460a      	mov	r2, r1
 800176a:	80fb      	strh	r3, [r7, #6]
 800176c:	4613      	mov	r3, r2
 800176e:	80bb      	strh	r3, [r7, #4]
  HAL_TIM_Base_Stop(&htim15);
 8001770:	4899      	ldr	r0, [pc, #612]	@ (80019d8 <set_dac+0x278>)
 8001772:	f004 fa2b 	bl	8005bcc <HAL_TIM_Base_Stop>
  HAL_DAC_Stop_DMA(&hdac3, DAC_CHANNEL_1);
 8001776:	2100      	movs	r1, #0
 8001778:	4898      	ldr	r0, [pc, #608]	@ (80019dc <set_dac+0x27c>)
 800177a:	f001 fff7 	bl	800376c <HAL_DAC_Stop_DMA>
  HAL_DAC_Stop_DMA(&hdac3, DAC_CHANNEL_2);
 800177e:	2110      	movs	r1, #16
 8001780:	4896      	ldr	r0, [pc, #600]	@ (80019dc <set_dac+0x27c>)
 8001782:	f001 fff3 	bl	800376c <HAL_DAC_Stop_DMA>

  uint16_t max_val;
  uint16_t min_val;
  phase -= 7;
 8001786:	88bb      	ldrh	r3, [r7, #4]
 8001788:	3b07      	subs	r3, #7
 800178a:	b29b      	uxth	r3, r3
 800178c:	80bb      	strh	r3, [r7, #4]
  if(phase < 0) phase += 360;
 800178e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	da04      	bge.n	80017a0 <set_dac+0x40>
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800179c:	b29b      	uxth	r3, r3
 800179e:	80bb      	strh	r3, [r7, #4]
  if(phase > 360) phase -= 360;
 80017a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017a4:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80017a8:	dd04      	ble.n	80017b4 <set_dac+0x54>
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	80bb      	strh	r3, [r7, #4]
  max_val=(offset*modulation/100)+offset;
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	02db      	lsls	r3, r3, #11
 80017b8:	4a89      	ldr	r2, [pc, #548]	@ (80019e0 <set_dac+0x280>)
 80017ba:	fb82 1203 	smull	r1, r2, r2, r3
 80017be:	1152      	asrs	r2, r2, #5
 80017c0:	17db      	asrs	r3, r3, #31
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  min_val=offset-(offset*modulation/100);
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	02db      	lsls	r3, r3, #11
 80017d0:	4a83      	ldr	r2, [pc, #524]	@ (80019e0 <set_dac+0x280>)
 80017d2:	fb82 1203 	smull	r1, r2, r2, r3
 80017d6:	1152      	asrs	r2, r2, #5
 80017d8:	17db      	asrs	r3, r3, #31
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  float sine_wave_table[dac_length];
  float sine_wave_table_phase[dac_length];

  float step = 2 * M_PI / dac_length;
 80017e4:	4b7f      	ldr	r3, [pc, #508]	@ (80019e4 <set_dac+0x284>)
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (int i = 0; i < dac_length; i++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ec:	e06d      	b.n	80018ca <set_dac+0x16a>
    sine_wave_table[i] = sinf(i * step+ ((float)1) * M_PI/180.0 );
 80017ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001800:	ee17 0a90 	vmov	r0, s15
 8001804:	f7fe fec8 	bl	8000598 <__aeabi_f2d>
 8001808:	a36f      	add	r3, pc, #444	@ (adr r3, 80019c8 <set_dac+0x268>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fd65 	bl	80002dc <__adddf3>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f927 	bl	8000a6c <__aeabi_d2f>
 800181e:	4603      	mov	r3, r0
 8001820:	ee00 3a10 	vmov	s0, r3
 8001824:	f006 fa08 	bl	8007c38 <sinf>
 8001828:	eef0 7a40 	vmov.f32	s15, s0
 800182c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	3338      	adds	r3, #56	@ 0x38
 8001832:	443b      	add	r3, r7
 8001834:	3b20      	subs	r3, #32
 8001836:	edc3 7a00 	vstr	s15, [r3]
    sine_wave_table_phase[i] = sinf(i * step + ((float)phase + 1) * M_PI/180.0 );
 800183a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001844:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184c:	ee17 0a90 	vmov	r0, s15
 8001850:	f7fe fea2 	bl	8000598 <__aeabi_f2d>
 8001854:	4604      	mov	r4, r0
 8001856:	460d      	mov	r5, r1
 8001858:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001868:	ee77 7a87 	vadd.f32	s15, s15, s14
 800186c:	ee17 0a90 	vmov	r0, s15
 8001870:	f7fe fe92 	bl	8000598 <__aeabi_f2d>
 8001874:	a356      	add	r3, pc, #344	@ (adr r3, 80019d0 <set_dac+0x270>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	f7fe fee5 	bl	8000648 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b57      	ldr	r3, [pc, #348]	@ (80019e8 <set_dac+0x288>)
 800188c:	f7ff f806 	bl	800089c <__aeabi_ddiv>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fd20 	bl	80002dc <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f8e2 	bl	8000a6c <__aeabi_d2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	ee00 3a10 	vmov	s0, r3
 80018ae:	f006 f9c3 	bl	8007c38 <sinf>
 80018b2:	eef0 7a40 	vmov.f32	s15, s0
 80018b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	3338      	adds	r3, #56	@ 0x38
 80018bc:	443b      	add	r3, r7
 80018be:	3b30      	subs	r3, #48	@ 0x30
 80018c0:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < dac_length; i++) {
 80018c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018c6:	3301      	adds	r3, #1
 80018c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	dd8e      	ble.n	80017ee <set_dac+0x8e>
  }
  for (int i = 0; i < dac_length; i++) {
 80018d0:	2300      	movs	r3, #0
 80018d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80018d4:	e052      	b.n	800197c <set_dac+0x21c>
    scaled_sine_wave_table_Sd[i] = (uint16_t)((sine_wave_table[i] + 1) * (max_val - min_val) / 2 + min_val);
 80018d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	3338      	adds	r3, #56	@ 0x38
 80018dc:	443b      	add	r3, r7
 80018de:	3b20      	subs	r3, #32
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018ec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80018ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001902:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001906:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001918:	ee17 3a90 	vmov	r3, s15
 800191c:	b299      	uxth	r1, r3
 800191e:	4a33      	ldr	r2, [pc, #204]	@ (80019ec <set_dac+0x28c>)
 8001920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    scaled_sine_wave_table_Sm[i] = (uint16_t)((sine_wave_table_phase[i] + 1) * (max_val - min_val) / 2 + min_val);
 8001926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	3338      	adds	r3, #56	@ 0x38
 800192c:	443b      	add	r3, r7
 800192e:	3b30      	subs	r3, #48	@ 0x30
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800193c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800193e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001952:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001956:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001968:	ee17 3a90 	vmov	r3, s15
 800196c:	b299      	uxth	r1, r3
 800196e:	4a20      	ldr	r2, [pc, #128]	@ (80019f0 <set_dac+0x290>)
 8001970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001972:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < dac_length; i++) {
 8001976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001978:	3301      	adds	r3, #1
 800197a:	633b      	str	r3, [r7, #48]	@ 0x30
 800197c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800197e:	2b03      	cmp	r3, #3
 8001980:	dda9      	ble.n	80018d6 <set_dac+0x176>
  }
  HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1,scaled_sine_wave_table_Sd, dac_length / 2, DAC_ALIGN_12B_R);
 8001982:	2300      	movs	r3, #0
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2302      	movs	r3, #2
 8001988:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <set_dac+0x28c>)
 800198a:	2100      	movs	r1, #0
 800198c:	4813      	ldr	r0, [pc, #76]	@ (80019dc <set_dac+0x27c>)
 800198e:	f001 fe19 	bl	80035c4 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_2,scaled_sine_wave_table_Sm, dac_length / 2, DAC_ALIGN_12B_R);
 8001992:	2300      	movs	r3, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2302      	movs	r3, #2
 8001998:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <set_dac+0x290>)
 800199a:	2110      	movs	r1, #16
 800199c:	480f      	ldr	r0, [pc, #60]	@ (80019dc <set_dac+0x27c>)
 800199e:	f001 fe11 	bl	80035c4 <HAL_DAC_Start_DMA>

  (&htim15)->Instance->ARR = (uint32_t)(19);
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <set_dac+0x278>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2213      	movs	r2, #19
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_OPAMP_Start(&hopamp6);
 80019aa:	4812      	ldr	r0, [pc, #72]	@ (80019f4 <set_dac+0x294>)
 80019ac:	f002 feda 	bl	8004764 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80019b0:	4811      	ldr	r0, [pc, #68]	@ (80019f8 <set_dac+0x298>)
 80019b2:	f002 fed7 	bl	8004764 <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim15);
 80019b6:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <set_dac+0x278>)
 80019b8:	f004 f898 	bl	8005aec <HAL_TIM_Base_Start>
}
 80019bc:	bf00      	nop
 80019be:	3738      	adds	r7, #56	@ 0x38
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bdb0      	pop	{r4, r5, r7, pc}
 80019c4:	f3af 8000 	nop.w
 80019c8:	a2529d39 	.word	0xa2529d39
 80019cc:	3f91df46 	.word	0x3f91df46
 80019d0:	54442d18 	.word	0x54442d18
 80019d4:	400921fb 	.word	0x400921fb
 80019d8:	200003a4 	.word	0x200003a4
 80019dc:	20000148 	.word	0x20000148
 80019e0:	51eb851f 	.word	0x51eb851f
 80019e4:	3fc90fdb 	.word	0x3fc90fdb
 80019e8:	40668000 	.word	0x40668000
 80019ec:	20000430 	.word	0x20000430
 80019f0:	20000438 	.word	0x20000438
 80019f4:	20000258 	.word	0x20000258
 80019f8:	2000021c 	.word	0x2000021c

080019fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a02:	f001 fc1a 	bl	800323a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a06:	f000 ff1d 	bl	8002844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a0a:	f001 f907 	bl	8002c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a0e:	f001 f8db 	bl	8002bc8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001a12:	f000 fff1 	bl	80029f8 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001a16:	f001 f82d 	bl	8002a74 <MX_TIM8_Init>
  MX_DAC3_Init();
 8001a1a:	f000 ff5d 	bl	80028d8 <MX_DAC3_Init>
  MX_OPAMP3_Init();
 8001a1e:	f000 ff9f 	bl	8002960 <MX_OPAMP3_Init>
  MX_OPAMP6_Init();
 8001a22:	f000 ffc3 	bl	80029ac <MX_OPAMP6_Init>
  MX_TIM15_Init();
 8001a26:	f001 f87f 	bl	8002b28 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001a2a:	f7ff fa9b 	bl	8000f64 <setup>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001a2e:	213c      	movs	r1, #60	@ 0x3c
 8001a30:	48b3      	ldr	r0, [pc, #716]	@ (8001d00 <main+0x304>)
 8001a32:	f004 f998 	bl	8005d66 <HAL_TIM_Encoder_Start>
  GPIO_PinState prev = GPIO_PIN_SET;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  AD9959_Init();
 8001a3c:	f7ff fdee 	bl	800161c <AD9959_Init>
  AD9959_Set_Ampl(0x40, ampl, freq);
 8001a40:	4bb0      	ldr	r3, [pc, #704]	@ (8001d04 <main+0x308>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4bb0      	ldr	r3, [pc, #704]	@ (8001d08 <main+0x30c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2040      	movs	r0, #64	@ 0x40
 8001a4e:	f7ff fd59 	bl	8001504 <AD9959_Set_Ampl>
  AD9959_Set_Ampl(0x80, ampl, freq);
 8001a52:	4bac      	ldr	r3, [pc, #688]	@ (8001d04 <main+0x308>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4bab      	ldr	r3, [pc, #684]	@ (8001d08 <main+0x30c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2080      	movs	r0, #128	@ 0x80
 8001a60:	f7ff fd50 	bl	8001504 <AD9959_Set_Ampl>
  AD9959_Set_Phase(0x40, 0);
 8001a64:	2100      	movs	r1, #0
 8001a66:	2040      	movs	r0, #64	@ 0x40
 8001a68:	f7ff fdbc 	bl	80015e4 <AD9959_Set_Phase>
  AD9959_Set_Freq(0xF0, freq * 1000000);
 8001a6c:	4ba6      	ldr	r3, [pc, #664]	@ (8001d08 <main+0x30c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4aa6      	ldr	r2, [pc, #664]	@ (8001d0c <main+0x310>)
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	20f0      	movs	r0, #240	@ 0xf0
 8001a7a:	f7ff fd01 	bl	8001480 <AD9959_Set_Freq>
  IO_Update();
 8001a7e:	f7ff fe53 	bl	8001728 <IO_Update>
  set_dac(0, dac_phase);
 8001a82:	4ba3      	ldr	r3, [pc, #652]	@ (8001d10 <main+0x314>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fe68 	bl	8001760 <set_dac>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int Direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);   //读取电机转动方向
 8001a90:	4b9b      	ldr	r3, [pc, #620]	@ (8001d00 <main+0x304>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	bf0c      	ite	eq
 8001a9e:	2301      	moveq	r3, #1
 8001aa0:	2300      	movne	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	61fb      	str	r3, [r7, #28]
	  int CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8001aa6:	4b96      	ldr	r3, [pc, #600]	@ (8001d00 <main+0x304>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	623b      	str	r3, [r7, #32]
	  int counter = CaptureNumber / 4 % 8 ;
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da00      	bge.n	8001ab8 <main+0xbc>
 8001ab6:	3303      	adds	r3, #3
 8001ab8:	109b      	asrs	r3, r3, #2
 8001aba:	425a      	negs	r2, r3
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	f002 0207 	and.w	r2, r2, #7
 8001ac4:	bf58      	it	pl
 8001ac6:	4253      	negpl	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]

	  switch(counter)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b07      	cmp	r3, #7
 8001ace:	f200 8229 	bhi.w	8001f24 <main+0x528>
 8001ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <main+0xdc>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001af9 	.word	0x08001af9
 8001adc:	08001b7b 	.word	0x08001b7b
 8001ae0:	08001bfd 	.word	0x08001bfd
 8001ae4:	08001c7f 	.word	0x08001c7f
 8001ae8:	08001d1d 	.word	0x08001d1d
 8001aec:	08001d9f 	.word	0x08001d9f
 8001af0:	08001e21 	.word	0x08001e21
 8001af4:	08001ea3 	.word	0x08001ea3
	  {
	  case 0:
		  lcd_show_picture(101, 5 , 12, 20, MenuCursor16x16);
 8001af8:	4b86      	ldr	r3, [pc, #536]	@ (8001d14 <main+0x318>)
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2314      	movs	r3, #20
 8001afe:	220c      	movs	r2, #12
 8001b00:	2105      	movs	r1, #5
 8001b02:	2065      	movs	r0, #101	@ 0x65
 8001b04:	f7ff faee 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001b08:	4b83      	ldr	r3, [pc, #524]	@ (8001d18 <main+0x31c>)
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2314      	movs	r3, #20
 8001b0e:	220c      	movs	r2, #12
 8001b10:	2119      	movs	r1, #25
 8001b12:	2065      	movs	r0, #101	@ 0x65
 8001b14:	f7ff fae6 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001b18:	4b7f      	ldr	r3, [pc, #508]	@ (8001d18 <main+0x31c>)
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2314      	movs	r3, #20
 8001b1e:	220c      	movs	r2, #12
 8001b20:	212d      	movs	r1, #45	@ 0x2d
 8001b22:	2065      	movs	r0, #101	@ 0x65
 8001b24:	f7ff fade 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001b28:	4b7b      	ldr	r3, [pc, #492]	@ (8001d18 <main+0x31c>)
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2314      	movs	r3, #20
 8001b2e:	220c      	movs	r2, #12
 8001b30:	2141      	movs	r1, #65	@ 0x41
 8001b32:	2065      	movs	r0, #101	@ 0x65
 8001b34:	f7ff fad6 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001b38:	4b77      	ldr	r3, [pc, #476]	@ (8001d18 <main+0x31c>)
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2314      	movs	r3, #20
 8001b3e:	220c      	movs	r2, #12
 8001b40:	2155      	movs	r1, #85	@ 0x55
 8001b42:	2065      	movs	r0, #101	@ 0x65
 8001b44:	f7ff face 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001b48:	4b73      	ldr	r3, [pc, #460]	@ (8001d18 <main+0x31c>)
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2314      	movs	r3, #20
 8001b4e:	220c      	movs	r2, #12
 8001b50:	2169      	movs	r1, #105	@ 0x69
 8001b52:	2065      	movs	r0, #101	@ 0x65
 8001b54:	f7ff fac6 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001b58:	4b6f      	ldr	r3, [pc, #444]	@ (8001d18 <main+0x31c>)
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2314      	movs	r3, #20
 8001b5e:	220c      	movs	r2, #12
 8001b60:	217d      	movs	r1, #125	@ 0x7d
 8001b62:	2065      	movs	r0, #101	@ 0x65
 8001b64:	f7ff fabe 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 145 , 12, 20, gImage_black);
 8001b68:	4b6b      	ldr	r3, [pc, #428]	@ (8001d18 <main+0x31c>)
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2314      	movs	r3, #20
 8001b6e:	220c      	movs	r2, #12
 8001b70:	2191      	movs	r1, #145	@ 0x91
 8001b72:	2065      	movs	r0, #101	@ 0x65
 8001b74:	f7ff fab6 	bl	80010e4 <lcd_show_picture>
		  break;
 8001b78:	e1d4      	b.n	8001f24 <main+0x528>
	  case 1:
		  lcd_show_picture(101, 25 , 12, 20, MenuCursor16x16);
 8001b7a:	4b66      	ldr	r3, [pc, #408]	@ (8001d14 <main+0x318>)
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2314      	movs	r3, #20
 8001b80:	220c      	movs	r2, #12
 8001b82:	2119      	movs	r1, #25
 8001b84:	2065      	movs	r0, #101	@ 0x65
 8001b86:	f7ff faad 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001b8a:	4b63      	ldr	r3, [pc, #396]	@ (8001d18 <main+0x31c>)
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2314      	movs	r3, #20
 8001b90:	220c      	movs	r2, #12
 8001b92:	2105      	movs	r1, #5
 8001b94:	2065      	movs	r0, #101	@ 0x65
 8001b96:	f7ff faa5 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d18 <main+0x31c>)
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2314      	movs	r3, #20
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	212d      	movs	r1, #45	@ 0x2d
 8001ba4:	2065      	movs	r0, #101	@ 0x65
 8001ba6:	f7ff fa9d 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001baa:	4b5b      	ldr	r3, [pc, #364]	@ (8001d18 <main+0x31c>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2314      	movs	r3, #20
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	2141      	movs	r1, #65	@ 0x41
 8001bb4:	2065      	movs	r0, #101	@ 0x65
 8001bb6:	f7ff fa95 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001bba:	4b57      	ldr	r3, [pc, #348]	@ (8001d18 <main+0x31c>)
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2314      	movs	r3, #20
 8001bc0:	220c      	movs	r2, #12
 8001bc2:	2155      	movs	r1, #85	@ 0x55
 8001bc4:	2065      	movs	r0, #101	@ 0x65
 8001bc6:	f7ff fa8d 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001bca:	4b53      	ldr	r3, [pc, #332]	@ (8001d18 <main+0x31c>)
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2314      	movs	r3, #20
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	2169      	movs	r1, #105	@ 0x69
 8001bd4:	2065      	movs	r0, #101	@ 0x65
 8001bd6:	f7ff fa85 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001bda:	4b4f      	ldr	r3, [pc, #316]	@ (8001d18 <main+0x31c>)
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2314      	movs	r3, #20
 8001be0:	220c      	movs	r2, #12
 8001be2:	217d      	movs	r1, #125	@ 0x7d
 8001be4:	2065      	movs	r0, #101	@ 0x65
 8001be6:	f7ff fa7d 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 145 , 12, 20, gImage_black);
 8001bea:	4b4b      	ldr	r3, [pc, #300]	@ (8001d18 <main+0x31c>)
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2314      	movs	r3, #20
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	2191      	movs	r1, #145	@ 0x91
 8001bf4:	2065      	movs	r0, #101	@ 0x65
 8001bf6:	f7ff fa75 	bl	80010e4 <lcd_show_picture>
		  break;
 8001bfa:	e193      	b.n	8001f24 <main+0x528>
	  case 2:
		  lcd_show_picture(101, 45 , 12, 20, MenuCursor16x16);
 8001bfc:	4b45      	ldr	r3, [pc, #276]	@ (8001d14 <main+0x318>)
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2314      	movs	r3, #20
 8001c02:	220c      	movs	r2, #12
 8001c04:	212d      	movs	r1, #45	@ 0x2d
 8001c06:	2065      	movs	r0, #101	@ 0x65
 8001c08:	f7ff fa6c 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001c0c:	4b42      	ldr	r3, [pc, #264]	@ (8001d18 <main+0x31c>)
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2314      	movs	r3, #20
 8001c12:	220c      	movs	r2, #12
 8001c14:	2119      	movs	r1, #25
 8001c16:	2065      	movs	r0, #101	@ 0x65
 8001c18:	f7ff fa64 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d18 <main+0x31c>)
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2314      	movs	r3, #20
 8001c22:	220c      	movs	r2, #12
 8001c24:	2105      	movs	r1, #5
 8001c26:	2065      	movs	r0, #101	@ 0x65
 8001c28:	f7ff fa5c 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d18 <main+0x31c>)
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2314      	movs	r3, #20
 8001c32:	220c      	movs	r2, #12
 8001c34:	2141      	movs	r1, #65	@ 0x41
 8001c36:	2065      	movs	r0, #101	@ 0x65
 8001c38:	f7ff fa54 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001c3c:	4b36      	ldr	r3, [pc, #216]	@ (8001d18 <main+0x31c>)
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2314      	movs	r3, #20
 8001c42:	220c      	movs	r2, #12
 8001c44:	2155      	movs	r1, #85	@ 0x55
 8001c46:	2065      	movs	r0, #101	@ 0x65
 8001c48:	f7ff fa4c 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001c4c:	4b32      	ldr	r3, [pc, #200]	@ (8001d18 <main+0x31c>)
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2314      	movs	r3, #20
 8001c52:	220c      	movs	r2, #12
 8001c54:	2169      	movs	r1, #105	@ 0x69
 8001c56:	2065      	movs	r0, #101	@ 0x65
 8001c58:	f7ff fa44 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <main+0x31c>)
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2314      	movs	r3, #20
 8001c62:	220c      	movs	r2, #12
 8001c64:	217d      	movs	r1, #125	@ 0x7d
 8001c66:	2065      	movs	r0, #101	@ 0x65
 8001c68:	f7ff fa3c 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 145 , 12, 20, gImage_black);
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d18 <main+0x31c>)
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2314      	movs	r3, #20
 8001c72:	220c      	movs	r2, #12
 8001c74:	2191      	movs	r1, #145	@ 0x91
 8001c76:	2065      	movs	r0, #101	@ 0x65
 8001c78:	f7ff fa34 	bl	80010e4 <lcd_show_picture>
		  break;
 8001c7c:	e152      	b.n	8001f24 <main+0x528>
	  case 3:
		  lcd_show_picture(101, 65 , 12, 20, MenuCursor16x16);
 8001c7e:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <main+0x318>)
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2314      	movs	r3, #20
 8001c84:	220c      	movs	r2, #12
 8001c86:	2141      	movs	r1, #65	@ 0x41
 8001c88:	2065      	movs	r0, #101	@ 0x65
 8001c8a:	f7ff fa2b 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <main+0x31c>)
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2314      	movs	r3, #20
 8001c94:	220c      	movs	r2, #12
 8001c96:	2119      	movs	r1, #25
 8001c98:	2065      	movs	r0, #101	@ 0x65
 8001c9a:	f7ff fa23 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <main+0x31c>)
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2314      	movs	r3, #20
 8001ca4:	220c      	movs	r2, #12
 8001ca6:	212d      	movs	r1, #45	@ 0x2d
 8001ca8:	2065      	movs	r0, #101	@ 0x65
 8001caa:	f7ff fa1b 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001cae:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <main+0x31c>)
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2314      	movs	r3, #20
 8001cb4:	220c      	movs	r2, #12
 8001cb6:	2105      	movs	r1, #5
 8001cb8:	2065      	movs	r0, #101	@ 0x65
 8001cba:	f7ff fa13 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <main+0x31c>)
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2314      	movs	r3, #20
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	2155      	movs	r1, #85	@ 0x55
 8001cc8:	2065      	movs	r0, #101	@ 0x65
 8001cca:	f7ff fa0b 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001cce:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <main+0x31c>)
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2314      	movs	r3, #20
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	2169      	movs	r1, #105	@ 0x69
 8001cd8:	2065      	movs	r0, #101	@ 0x65
 8001cda:	f7ff fa03 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <main+0x31c>)
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2314      	movs	r3, #20
 8001ce4:	220c      	movs	r2, #12
 8001ce6:	217d      	movs	r1, #125	@ 0x7d
 8001ce8:	2065      	movs	r0, #101	@ 0x65
 8001cea:	f7ff f9fb 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 145 , 12, 20, gImage_black);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <main+0x31c>)
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2314      	movs	r3, #20
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	2191      	movs	r1, #145	@ 0x91
 8001cf8:	2065      	movs	r0, #101	@ 0x65
 8001cfa:	f7ff f9f3 	bl	80010e4 <lcd_show_picture>
		  break;
 8001cfe:	e111      	b.n	8001f24 <main+0x528>
 8001d00:	20000358 	.word	0x20000358
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	000f4240 	.word	0x000f4240
 8001d10:	20000418 	.word	0x20000418
 8001d14:	0800ae58 	.word	0x0800ae58
 8001d18:	0800b038 	.word	0x0800b038
	  case 4:
		  lcd_show_picture(101, 85 , 12, 20, MenuCursor16x16);
 8001d1c:	4bbe      	ldr	r3, [pc, #760]	@ (8002018 <main+0x61c>)
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2314      	movs	r3, #20
 8001d22:	220c      	movs	r2, #12
 8001d24:	2155      	movs	r1, #85	@ 0x55
 8001d26:	2065      	movs	r0, #101	@ 0x65
 8001d28:	f7ff f9dc 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001d2c:	4bbb      	ldr	r3, [pc, #748]	@ (800201c <main+0x620>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2314      	movs	r3, #20
 8001d32:	220c      	movs	r2, #12
 8001d34:	2119      	movs	r1, #25
 8001d36:	2065      	movs	r0, #101	@ 0x65
 8001d38:	f7ff f9d4 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001d3c:	4bb7      	ldr	r3, [pc, #732]	@ (800201c <main+0x620>)
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2314      	movs	r3, #20
 8001d42:	220c      	movs	r2, #12
 8001d44:	212d      	movs	r1, #45	@ 0x2d
 8001d46:	2065      	movs	r0, #101	@ 0x65
 8001d48:	f7ff f9cc 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001d4c:	4bb3      	ldr	r3, [pc, #716]	@ (800201c <main+0x620>)
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2314      	movs	r3, #20
 8001d52:	220c      	movs	r2, #12
 8001d54:	2141      	movs	r1, #65	@ 0x41
 8001d56:	2065      	movs	r0, #101	@ 0x65
 8001d58:	f7ff f9c4 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001d5c:	4baf      	ldr	r3, [pc, #700]	@ (800201c <main+0x620>)
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2314      	movs	r3, #20
 8001d62:	220c      	movs	r2, #12
 8001d64:	2105      	movs	r1, #5
 8001d66:	2065      	movs	r0, #101	@ 0x65
 8001d68:	f7ff f9bc 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001d6c:	4bab      	ldr	r3, [pc, #684]	@ (800201c <main+0x620>)
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2314      	movs	r3, #20
 8001d72:	220c      	movs	r2, #12
 8001d74:	2169      	movs	r1, #105	@ 0x69
 8001d76:	2065      	movs	r0, #101	@ 0x65
 8001d78:	f7ff f9b4 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001d7c:	4ba7      	ldr	r3, [pc, #668]	@ (800201c <main+0x620>)
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2314      	movs	r3, #20
 8001d82:	220c      	movs	r2, #12
 8001d84:	217d      	movs	r1, #125	@ 0x7d
 8001d86:	2065      	movs	r0, #101	@ 0x65
 8001d88:	f7ff f9ac 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 145 , 12, 20, gImage_black);
 8001d8c:	4ba3      	ldr	r3, [pc, #652]	@ (800201c <main+0x620>)
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2314      	movs	r3, #20
 8001d92:	220c      	movs	r2, #12
 8001d94:	2191      	movs	r1, #145	@ 0x91
 8001d96:	2065      	movs	r0, #101	@ 0x65
 8001d98:	f7ff f9a4 	bl	80010e4 <lcd_show_picture>
		  break;
 8001d9c:	e0c2      	b.n	8001f24 <main+0x528>
	  case 5:
		  lcd_show_picture(101, 105 , 12, 20, MenuCursor16x16);
 8001d9e:	4b9e      	ldr	r3, [pc, #632]	@ (8002018 <main+0x61c>)
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2314      	movs	r3, #20
 8001da4:	220c      	movs	r2, #12
 8001da6:	2169      	movs	r1, #105	@ 0x69
 8001da8:	2065      	movs	r0, #101	@ 0x65
 8001daa:	f7ff f99b 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001dae:	4b9b      	ldr	r3, [pc, #620]	@ (800201c <main+0x620>)
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2314      	movs	r3, #20
 8001db4:	220c      	movs	r2, #12
 8001db6:	2119      	movs	r1, #25
 8001db8:	2065      	movs	r0, #101	@ 0x65
 8001dba:	f7ff f993 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001dbe:	4b97      	ldr	r3, [pc, #604]	@ (800201c <main+0x620>)
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2314      	movs	r3, #20
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	212d      	movs	r1, #45	@ 0x2d
 8001dc8:	2065      	movs	r0, #101	@ 0x65
 8001dca:	f7ff f98b 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001dce:	4b93      	ldr	r3, [pc, #588]	@ (800201c <main+0x620>)
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2314      	movs	r3, #20
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	2141      	movs	r1, #65	@ 0x41
 8001dd8:	2065      	movs	r0, #101	@ 0x65
 8001dda:	f7ff f983 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001dde:	4b8f      	ldr	r3, [pc, #572]	@ (800201c <main+0x620>)
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2314      	movs	r3, #20
 8001de4:	220c      	movs	r2, #12
 8001de6:	2155      	movs	r1, #85	@ 0x55
 8001de8:	2065      	movs	r0, #101	@ 0x65
 8001dea:	f7ff f97b 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001dee:	4b8b      	ldr	r3, [pc, #556]	@ (800201c <main+0x620>)
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2314      	movs	r3, #20
 8001df4:	220c      	movs	r2, #12
 8001df6:	2105      	movs	r1, #5
 8001df8:	2065      	movs	r0, #101	@ 0x65
 8001dfa:	f7ff f973 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001dfe:	4b87      	ldr	r3, [pc, #540]	@ (800201c <main+0x620>)
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2314      	movs	r3, #20
 8001e04:	220c      	movs	r2, #12
 8001e06:	217d      	movs	r1, #125	@ 0x7d
 8001e08:	2065      	movs	r0, #101	@ 0x65
 8001e0a:	f7ff f96b 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 145 , 12, 20, gImage_black);
 8001e0e:	4b83      	ldr	r3, [pc, #524]	@ (800201c <main+0x620>)
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2314      	movs	r3, #20
 8001e14:	220c      	movs	r2, #12
 8001e16:	2191      	movs	r1, #145	@ 0x91
 8001e18:	2065      	movs	r0, #101	@ 0x65
 8001e1a:	f7ff f963 	bl	80010e4 <lcd_show_picture>
		  break;
 8001e1e:	e081      	b.n	8001f24 <main+0x528>
	  case 6:
		  lcd_show_picture(101, 125 , 12, 20, MenuCursor16x16);
 8001e20:	4b7d      	ldr	r3, [pc, #500]	@ (8002018 <main+0x61c>)
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2314      	movs	r3, #20
 8001e26:	220c      	movs	r2, #12
 8001e28:	217d      	movs	r1, #125	@ 0x7d
 8001e2a:	2065      	movs	r0, #101	@ 0x65
 8001e2c:	f7ff f95a 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001e30:	4b7a      	ldr	r3, [pc, #488]	@ (800201c <main+0x620>)
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2314      	movs	r3, #20
 8001e36:	220c      	movs	r2, #12
 8001e38:	2119      	movs	r1, #25
 8001e3a:	2065      	movs	r0, #101	@ 0x65
 8001e3c:	f7ff f952 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001e40:	4b76      	ldr	r3, [pc, #472]	@ (800201c <main+0x620>)
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2314      	movs	r3, #20
 8001e46:	220c      	movs	r2, #12
 8001e48:	212d      	movs	r1, #45	@ 0x2d
 8001e4a:	2065      	movs	r0, #101	@ 0x65
 8001e4c:	f7ff f94a 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001e50:	4b72      	ldr	r3, [pc, #456]	@ (800201c <main+0x620>)
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2314      	movs	r3, #20
 8001e56:	220c      	movs	r2, #12
 8001e58:	2141      	movs	r1, #65	@ 0x41
 8001e5a:	2065      	movs	r0, #101	@ 0x65
 8001e5c:	f7ff f942 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001e60:	4b6e      	ldr	r3, [pc, #440]	@ (800201c <main+0x620>)
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2314      	movs	r3, #20
 8001e66:	220c      	movs	r2, #12
 8001e68:	2155      	movs	r1, #85	@ 0x55
 8001e6a:	2065      	movs	r0, #101	@ 0x65
 8001e6c:	f7ff f93a 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001e70:	4b6a      	ldr	r3, [pc, #424]	@ (800201c <main+0x620>)
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2314      	movs	r3, #20
 8001e76:	220c      	movs	r2, #12
 8001e78:	2169      	movs	r1, #105	@ 0x69
 8001e7a:	2065      	movs	r0, #101	@ 0x65
 8001e7c:	f7ff f932 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 5 , 12, 20, gImage_black);
 8001e80:	4b66      	ldr	r3, [pc, #408]	@ (800201c <main+0x620>)
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2314      	movs	r3, #20
 8001e86:	220c      	movs	r2, #12
 8001e88:	2105      	movs	r1, #5
 8001e8a:	2065      	movs	r0, #101	@ 0x65
 8001e8c:	f7ff f92a 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 145 , 12, 20, gImage_black);
 8001e90:	4b62      	ldr	r3, [pc, #392]	@ (800201c <main+0x620>)
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2314      	movs	r3, #20
 8001e96:	220c      	movs	r2, #12
 8001e98:	2191      	movs	r1, #145	@ 0x91
 8001e9a:	2065      	movs	r0, #101	@ 0x65
 8001e9c:	f7ff f922 	bl	80010e4 <lcd_show_picture>
		  break;
 8001ea0:	e040      	b.n	8001f24 <main+0x528>
	  case 7:
		  lcd_show_picture(101, 145 , 12, 20, MenuCursor16x16);
 8001ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8002018 <main+0x61c>)
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2314      	movs	r3, #20
 8001ea8:	220c      	movs	r2, #12
 8001eaa:	2191      	movs	r1, #145	@ 0x91
 8001eac:	2065      	movs	r0, #101	@ 0x65
 8001eae:	f7ff f919 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 25 , 12, 20, gImage_black);
 8001eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800201c <main+0x620>)
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2314      	movs	r3, #20
 8001eb8:	220c      	movs	r2, #12
 8001eba:	2119      	movs	r1, #25
 8001ebc:	2065      	movs	r0, #101	@ 0x65
 8001ebe:	f7ff f911 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 45 , 12, 20, gImage_black);
 8001ec2:	4b56      	ldr	r3, [pc, #344]	@ (800201c <main+0x620>)
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2314      	movs	r3, #20
 8001ec8:	220c      	movs	r2, #12
 8001eca:	212d      	movs	r1, #45	@ 0x2d
 8001ecc:	2065      	movs	r0, #101	@ 0x65
 8001ece:	f7ff f909 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 65 , 12, 20, gImage_black);
 8001ed2:	4b52      	ldr	r3, [pc, #328]	@ (800201c <main+0x620>)
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2314      	movs	r3, #20
 8001ed8:	220c      	movs	r2, #12
 8001eda:	2141      	movs	r1, #65	@ 0x41
 8001edc:	2065      	movs	r0, #101	@ 0x65
 8001ede:	f7ff f901 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 85 , 12, 20, gImage_black);
 8001ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800201c <main+0x620>)
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2314      	movs	r3, #20
 8001ee8:	220c      	movs	r2, #12
 8001eea:	2155      	movs	r1, #85	@ 0x55
 8001eec:	2065      	movs	r0, #101	@ 0x65
 8001eee:	f7ff f8f9 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 105 , 12, 20, gImage_black);
 8001ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800201c <main+0x620>)
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2314      	movs	r3, #20
 8001ef8:	220c      	movs	r2, #12
 8001efa:	2169      	movs	r1, #105	@ 0x69
 8001efc:	2065      	movs	r0, #101	@ 0x65
 8001efe:	f7ff f8f1 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 125 , 12, 20, gImage_black);
 8001f02:	4b46      	ldr	r3, [pc, #280]	@ (800201c <main+0x620>)
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2314      	movs	r3, #20
 8001f08:	220c      	movs	r2, #12
 8001f0a:	217d      	movs	r1, #125	@ 0x7d
 8001f0c:	2065      	movs	r0, #101	@ 0x65
 8001f0e:	f7ff f8e9 	bl	80010e4 <lcd_show_picture>
		  lcd_show_picture(101, 0 , 12, 20, gImage_black);
 8001f12:	4b42      	ldr	r3, [pc, #264]	@ (800201c <main+0x620>)
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2314      	movs	r3, #20
 8001f18:	220c      	movs	r2, #12
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2065      	movs	r0, #101	@ 0x65
 8001f1e:	f7ff f8e1 	bl	80010e4 <lcd_show_picture>
		  break;
 8001f22:	bf00      	nop
	  }
	  GPIO_PinState curr = HAL_GPIO_ReadPin(GPIOC, 1<<13);
 8001f24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f28:	483d      	ldr	r0, [pc, #244]	@ (8002020 <main+0x624>)
 8001f2a:	f002 fb1b 	bl	8004564 <HAL_GPIO_ReadPin>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	75fb      	strb	r3, [r7, #23]
	  if (prev && !curr)
 8001f32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8468 	beq.w	800280c <main+0xe10>
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8464 	bne.w	800280c <main+0xe10>
	  {
		  switch(counter)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b07      	cmp	r3, #7
 8001f48:	f200 8451 	bhi.w	80027ee <main+0xdf2>
 8001f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f54 <main+0x558>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f75 	.word	0x08001f75
 8001f58:	08002069 	.word	0x08002069
 8001f5c:	08002113 	.word	0x08002113
 8001f60:	080021ed 	.word	0x080021ed
 8001f64:	080023dd 	.word	0x080023dd
 8001f68:	08002509 	.word	0x08002509
 8001f6c:	080025c5 	.word	0x080025c5
 8001f70:	08002749 	.word	0x08002749
		  {
		  case 0:
			  lcd_show_str(100, 165,"MODE:\n");
 8001f74:	4a2b      	ldr	r2, [pc, #172]	@ (8002024 <main+0x628>)
 8001f76:	21a5      	movs	r1, #165	@ 0xa5
 8001f78:	2064      	movs	r0, #100	@ 0x64
 8001f7a:	f7ff f919 	bl	80011b0 <lcd_show_str>
			  while(1)
			  {
				  mode = abs((CaptureNumber) / 4 % 2 + 1);
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da00      	bge.n	8001f86 <main+0x58a>
 8001f84:	3303      	adds	r3, #3
 8001f86:	109b      	asrs	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	bfb8      	it	lt
 8001f90:	425b      	neglt	r3, r3
 8001f92:	3301      	adds	r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bfb8      	it	lt
 8001f98:	425b      	neglt	r3, r3
 8001f9a:	4a23      	ldr	r2, [pc, #140]	@ (8002028 <main+0x62c>)
 8001f9c:	6013      	str	r3, [r2, #0]
				  if(mode != mode_t)
 8001f9e:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <main+0x62c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b22      	ldr	r3, [pc, #136]	@ (800202c <main+0x630>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d012      	beq.n	8001fd0 <main+0x5d4>
				  {
					  mode_t = mode;
 8001faa:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <main+0x62c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1f      	ldr	r2, [pc, #124]	@ (800202c <main+0x630>)
 8001fb0:	6013      	str	r3, [r2, #0]
					  if (mode < 2) lcd_show_str(101,185,"CW");
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002028 <main+0x62c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	dc05      	bgt.n	8001fc6 <main+0x5ca>
 8001fba:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <main+0x634>)
 8001fbc:	21b9      	movs	r1, #185	@ 0xb9
 8001fbe:	2065      	movs	r0, #101	@ 0x65
 8001fc0:	f7ff f8f6 	bl	80011b0 <lcd_show_str>
 8001fc4:	e004      	b.n	8001fd0 <main+0x5d4>
					  else lcd_show_str(101,185,"AM");
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <main+0x638>)
 8001fc8:	21b9      	movs	r1, #185	@ 0xb9
 8001fca:	2065      	movs	r0, #101	@ 0x65
 8001fcc:	f7ff f8f0 	bl	80011b0 <lcd_show_str>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <main+0x63c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8001fda:	2104      	movs	r1, #4
 8001fdc:	4817      	ldr	r0, [pc, #92]	@ (800203c <main+0x640>)
 8001fde:	f002 fac1 	bl	8004564 <HAL_GPIO_ReadPin>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ca      	bne.n	8001f7e <main+0x582>
				  {
					  lcd_show_str(101,205,"CONFIRM?\n");
 8001fe8:	4a15      	ldr	r2, [pc, #84]	@ (8002040 <main+0x644>)
 8001fea:	21cd      	movs	r1, #205	@ 0xcd
 8001fec:	2065      	movs	r0, #101	@ 0x65
 8001fee:	f7ff f8df 	bl	80011b0 <lcd_show_str>
					  break;
 8001ff2:	bf00      	nop
				  }
			  }
              if(mode < 2)
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <main+0x62c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	dc27      	bgt.n	800204c <main+0x650>
			  {
            	  modual = 0;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <main+0x648>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
            	  set_dac(modual,dac_phase );
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <main+0x648>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4a0f      	ldr	r2, [pc, #60]	@ (8002048 <main+0x64c>)
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	b212      	sxth	r2, r2
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fba5 	bl	8001760 <set_dac>
              else
              {
            	  modual = 100;
            	  set_dac(modual,dac_phase );
              }
			  break;
 8002016:	e3ea      	b.n	80027ee <main+0xdf2>
 8002018:	0800ae58 	.word	0x0800ae58
 800201c:	0800b038 	.word	0x0800b038
 8002020:	48000800 	.word	0x48000800
 8002024:	08009084 	.word	0x08009084
 8002028:	200003f0 	.word	0x200003f0
 800202c:	200003f4 	.word	0x200003f4
 8002030:	0800908c 	.word	0x0800908c
 8002034:	08009090 	.word	0x08009090
 8002038:	20000358 	.word	0x20000358
 800203c:	48000c00 	.word	0x48000c00
 8002040:	08009094 	.word	0x08009094
 8002044:	200003f8 	.word	0x200003f8
 8002048:	20000418 	.word	0x20000418
            	  modual = 100;
 800204c:	4b59      	ldr	r3, [pc, #356]	@ (80021b4 <main+0x7b8>)
 800204e:	2264      	movs	r2, #100	@ 0x64
 8002050:	601a      	str	r2, [r3, #0]
            	  set_dac(modual,dac_phase );
 8002052:	4b58      	ldr	r3, [pc, #352]	@ (80021b4 <main+0x7b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4a57      	ldr	r2, [pc, #348]	@ (80021b8 <main+0x7bc>)
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	b212      	sxth	r2, r2
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fb7d 	bl	8001760 <set_dac>
			  break;
 8002066:	e3c2      	b.n	80027ee <main+0xdf2>
		  case 1:
			  lcd_show_str(100, 165,"AMPL:\n");
 8002068:	4a54      	ldr	r2, [pc, #336]	@ (80021bc <main+0x7c0>)
 800206a:	21a5      	movs	r1, #165	@ 0xa5
 800206c:	2064      	movs	r0, #100	@ 0x64
 800206e:	f7ff f89f 	bl	80011b0 <lcd_show_str>
			  while (1)
			  {
				  ampl = abs((CaptureNumber) / 4 % 10 * 100 + 100);
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	2b00      	cmp	r3, #0
 8002076:	da00      	bge.n	800207a <main+0x67e>
 8002078:	3303      	adds	r3, #3
 800207a:	109b      	asrs	r3, r3, #2
 800207c:	4619      	mov	r1, r3
 800207e:	4b50      	ldr	r3, [pc, #320]	@ (80021c0 <main+0x7c4>)
 8002080:	fb83 2301 	smull	r2, r3, r3, r1
 8002084:	109a      	asrs	r2, r3, #2
 8002086:	17cb      	asrs	r3, r1, #31
 8002088:	1ad2      	subs	r2, r2, r3
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	1aca      	subs	r2, r1, r3
 8002094:	1c53      	adds	r3, r2, #1
 8002096:	2264      	movs	r2, #100	@ 0x64
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	bfb8      	it	lt
 80020a0:	425b      	neglt	r3, r3
 80020a2:	4a48      	ldr	r2, [pc, #288]	@ (80021c4 <main+0x7c8>)
 80020a4:	6013      	str	r3, [r2, #0]
				  if(ampl != ampl_t)
 80020a6:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <main+0x7c8>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b47      	ldr	r3, [pc, #284]	@ (80021c8 <main+0x7cc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d008      	beq.n	80020c4 <main+0x6c8>
				  {
					  ampl_t = ampl;
 80020b2:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <main+0x7c8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a44      	ldr	r2, [pc, #272]	@ (80021c8 <main+0x7cc>)
 80020b8:	6013      	str	r3, [r2, #0]
					  lcd_show_num(ampl);
 80020ba:	4b42      	ldr	r3, [pc, #264]	@ (80021c4 <main+0x7c8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff f84c 	bl	800115c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 80020c4:	4b41      	ldr	r3, [pc, #260]	@ (80021cc <main+0x7d0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 80020ce:	2104      	movs	r1, #4
 80020d0:	483f      	ldr	r0, [pc, #252]	@ (80021d0 <main+0x7d4>)
 80020d2:	f002 fa47 	bl	8004564 <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ca      	bne.n	8002072 <main+0x676>
				  {
					  lcd_show_str(101,205,"CONFIRM?\n");
 80020dc:	4a3d      	ldr	r2, [pc, #244]	@ (80021d4 <main+0x7d8>)
 80020de:	21cd      	movs	r1, #205	@ 0xcd
 80020e0:	2065      	movs	r0, #101	@ 0x65
 80020e2:	f7ff f865 	bl	80011b0 <lcd_show_str>
					  break;
 80020e6:	bf00      	nop
				  }
			  }
			  AD9959_Set_Ampl(0x40, ampl, freq );
 80020e8:	4b36      	ldr	r3, [pc, #216]	@ (80021c4 <main+0x7c8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4b3a      	ldr	r3, [pc, #232]	@ (80021d8 <main+0x7dc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	2040      	movs	r0, #64	@ 0x40
 80020f6:	f7ff fa05 	bl	8001504 <AD9959_Set_Ampl>
			  AD9959_Set_Ampl(0x80, ampl, freq );
 80020fa:	4b32      	ldr	r3, [pc, #200]	@ (80021c4 <main+0x7c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4619      	mov	r1, r3
 8002100:	4b35      	ldr	r3, [pc, #212]	@ (80021d8 <main+0x7dc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	2080      	movs	r0, #128	@ 0x80
 8002108:	f7ff f9fc 	bl	8001504 <AD9959_Set_Ampl>
			  IO_Update();
 800210c:	f7ff fb0c 	bl	8001728 <IO_Update>
			  break;
 8002110:	e36d      	b.n	80027ee <main+0xdf2>
		  case 2:
			  lcd_show_str(100, 165,"MODULATION:\n");
 8002112:	4a32      	ldr	r2, [pc, #200]	@ (80021dc <main+0x7e0>)
 8002114:	21a5      	movs	r1, #165	@ 0xa5
 8002116:	2064      	movs	r0, #100	@ 0x64
 8002118:	f7ff f84a 	bl	80011b0 <lcd_show_str>
			  while (1)
			  {
				  modual = abs((((CaptureNumber) / 4 )% 7) * 10 + 30);
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	2b00      	cmp	r3, #0
 8002120:	da00      	bge.n	8002124 <main+0x728>
 8002122:	3303      	adds	r3, #3
 8002124:	109b      	asrs	r3, r3, #2
 8002126:	4619      	mov	r1, r3
 8002128:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <main+0x7e4>)
 800212a:	fb83 2301 	smull	r2, r3, r3, r1
 800212e:	440b      	add	r3, r1
 8002130:	109a      	asrs	r2, r3, #2
 8002132:	17cb      	asrs	r3, r1, #31
 8002134:	1ad2      	subs	r2, r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	1aca      	subs	r2, r1, r3
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	331e      	adds	r3, #30
 8002148:	2b00      	cmp	r3, #0
 800214a:	bfb8      	it	lt
 800214c:	425b      	neglt	r3, r3
 800214e:	4a19      	ldr	r2, [pc, #100]	@ (80021b4 <main+0x7b8>)
 8002150:	6013      	str	r3, [r2, #0]
				  if(modual != modual_t)
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <main+0x7b8>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <main+0x7e8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d008      	beq.n	8002170 <main+0x774>
				  {
					  modual_t = modual;
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <main+0x7b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a20      	ldr	r2, [pc, #128]	@ (80021e4 <main+0x7e8>)
 8002164:	6013      	str	r3, [r2, #0]
					  lcd_show_num(modual);
 8002166:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <main+0x7b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fff6 	bl	800115c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <main+0x7d0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	b21b      	sxth	r3, r3
 8002178:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 800217a:	2104      	movs	r1, #4
 800217c:	4814      	ldr	r0, [pc, #80]	@ (80021d0 <main+0x7d4>)
 800217e:	f002 f9f1 	bl	8004564 <HAL_GPIO_ReadPin>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1c9      	bne.n	800211c <main+0x720>
				  {
					  lcd_show_str(101,205,"CONFIRM?\n");
 8002188:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <main+0x7d8>)
 800218a:	21cd      	movs	r1, #205	@ 0xcd
 800218c:	2065      	movs	r0, #101	@ 0x65
 800218e:	f7ff f80f 	bl	80011b0 <lcd_show_str>
					  break;
 8002192:	bf00      	nop
				  }
			  }
			  set_dac(modual, dac_phase + dac_phase_1);
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <main+0x7b8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b298      	uxth	r0, r3
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <main+0x7bc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <main+0x7ec>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7ff fad7 	bl	8001760 <set_dac>
			  break;
 80021b2:	e31c      	b.n	80027ee <main+0xdf2>
 80021b4:	200003f8 	.word	0x200003f8
 80021b8:	20000418 	.word	0x20000418
 80021bc:	080090a0 	.word	0x080090a0
 80021c0:	66666667 	.word	0x66666667
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004
 80021cc:	20000358 	.word	0x20000358
 80021d0:	48000c00 	.word	0x48000c00
 80021d4:	08009094 	.word	0x08009094
 80021d8:	20000008 	.word	0x20000008
 80021dc:	080090a8 	.word	0x080090a8
 80021e0:	92492493 	.word	0x92492493
 80021e4:	200003fc 	.word	0x200003fc
 80021e8:	20000420 	.word	0x20000420
		  case 3:
			  lcd_show_str(100, 165,"DELAY:\n");
 80021ec:	4aac      	ldr	r2, [pc, #688]	@ (80024a0 <main+0xaa4>)
 80021ee:	21a5      	movs	r1, #165	@ 0xa5
 80021f0:	2064      	movs	r0, #100	@ 0x64
 80021f2:	f7fe ffdd 	bl	80011b0 <lcd_show_str>
			  while (1)
			  {
				  delay = abs((CaptureNumber) / 4 % 7 * 30 + 50);
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	da00      	bge.n	80021fe <main+0x802>
 80021fc:	3303      	adds	r3, #3
 80021fe:	109b      	asrs	r3, r3, #2
 8002200:	4619      	mov	r1, r3
 8002202:	4ba8      	ldr	r3, [pc, #672]	@ (80024a4 <main+0xaa8>)
 8002204:	fb83 2301 	smull	r2, r3, r3, r1
 8002208:	440b      	add	r3, r1
 800220a:	109a      	asrs	r2, r3, #2
 800220c:	17cb      	asrs	r3, r1, #31
 800220e:	1ad2      	subs	r2, r2, r3
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	1aca      	subs	r2, r1, r3
 8002218:	4613      	mov	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	3332      	adds	r3, #50	@ 0x32
 8002222:	2b00      	cmp	r3, #0
 8002224:	bfb8      	it	lt
 8002226:	425b      	neglt	r3, r3
 8002228:	4a9f      	ldr	r2, [pc, #636]	@ (80024a8 <main+0xaac>)
 800222a:	6013      	str	r3, [r2, #0]
				  if(delay == 230) delay = 0;
 800222c:	4b9e      	ldr	r3, [pc, #632]	@ (80024a8 <main+0xaac>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2be6      	cmp	r3, #230	@ 0xe6
 8002232:	d102      	bne.n	800223a <main+0x83e>
 8002234:	4b9c      	ldr	r3, [pc, #624]	@ (80024a8 <main+0xaac>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
				  if(delay != delay_t)
 800223a:	4b9b      	ldr	r3, [pc, #620]	@ (80024a8 <main+0xaac>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b9b      	ldr	r3, [pc, #620]	@ (80024ac <main+0xab0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d008      	beq.n	8002258 <main+0x85c>
				  {
					  delay_t = delay;
 8002246:	4b98      	ldr	r3, [pc, #608]	@ (80024a8 <main+0xaac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a98      	ldr	r2, [pc, #608]	@ (80024ac <main+0xab0>)
 800224c:	6013      	str	r3, [r2, #0]
					  lcd_show_num(delay);
 800224e:	4b96      	ldr	r3, [pc, #600]	@ (80024a8 <main+0xaac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe ff82 	bl	800115c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8002258:	4b95      	ldr	r3, [pc, #596]	@ (80024b0 <main+0xab4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	b21b      	sxth	r3, r3
 8002260:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 8002262:	2104      	movs	r1, #4
 8002264:	4893      	ldr	r0, [pc, #588]	@ (80024b4 <main+0xab8>)
 8002266:	f002 f97d 	bl	8004564 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1c2      	bne.n	80021f6 <main+0x7fa>
				  {
					  lcd_show_str(101,205,"CONFIRM?\n");
 8002270:	4a91      	ldr	r2, [pc, #580]	@ (80024b8 <main+0xabc>)
 8002272:	21cd      	movs	r1, #205	@ 0xcd
 8002274:	2065      	movs	r0, #101	@ 0x65
 8002276:	f7fe ff9b 	bl	80011b0 <lcd_show_str>
					  break;
 800227a:	bf00      	nop
				  }
			  }
			  float final_phase = (float)delay * (float)1e-3 * (float)freq ;
 800227c:	4b8a      	ldr	r3, [pc, #552]	@ (80024a8 <main+0xaac>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002288:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80024bc <main+0xac0>
 800228c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002290:	4b8b      	ldr	r3, [pc, #556]	@ (80024c0 <main+0xac4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800229c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a0:	edc7 7a04 	vstr	s15, [r7, #16]
			  int integer = final_phase;
 80022a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ac:	ee17 3a90 	vmov	r3, s15
 80022b0:	60fb      	str	r3, [r7, #12]
			  float set_phase = 1 - final_phase + (float)integer /*+ (float)phase/360*/;
 80022b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022cc:	edc7 7a02 	vstr	s15, [r7, #8]
			  int set_phase_int = set_phase;
 80022d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022d8:	ee17 3a90 	vmov	r3, s15
 80022dc:	607b      	str	r3, [r7, #4]

			  dds_phase = (set_phase - (float)set_phase_int) * 16383;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80022ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f0:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80024c4 <main+0xac8>
 80022f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022fc:	ee17 2a90 	vmov	r2, s15
 8002300:	4b71      	ldr	r3, [pc, #452]	@ (80024c8 <main+0xacc>)
 8002302:	601a      	str	r2, [r3, #0]
			  //dds_phase = dds_phase - (int)((float)freq * 16383 * 4.4 / 1000);
			  if(dds_phase > 16383)dds_phase -= 16383;
 8002304:	4b70      	ldr	r3, [pc, #448]	@ (80024c8 <main+0xacc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800230c:	db06      	blt.n	800231c <main+0x920>
 800230e:	4b6e      	ldr	r3, [pc, #440]	@ (80024c8 <main+0xacc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8002316:	3b3f      	subs	r3, #63	@ 0x3f
 8002318:	4a6b      	ldr	r2, [pc, #428]	@ (80024c8 <main+0xacc>)
 800231a:	6013      	str	r3, [r2, #0]
			  if(dds_phase < 16383)dds_phase += 16383;
 800231c:	4b6a      	ldr	r3, [pc, #424]	@ (80024c8 <main+0xacc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f643 72fe 	movw	r2, #16382	@ 0x3ffe
 8002324:	4293      	cmp	r3, r2
 8002326:	dc06      	bgt.n	8002336 <main+0x93a>
 8002328:	4b67      	ldr	r3, [pc, #412]	@ (80024c8 <main+0xacc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8002330:	333f      	adds	r3, #63	@ 0x3f
 8002332:	4a65      	ldr	r2, [pc, #404]	@ (80024c8 <main+0xacc>)
 8002334:	6013      	str	r3, [r2, #0]
			  total = dds_phase + dds_phase_1 + init_phase * freq / 30;
 8002336:	4b64      	ldr	r3, [pc, #400]	@ (80024c8 <main+0xacc>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b64      	ldr	r3, [pc, #400]	@ (80024cc <main+0xad0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4619      	mov	r1, r3
 8002342:	4b63      	ldr	r3, [pc, #396]	@ (80024d0 <main+0xad4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	4b5d      	ldr	r3, [pc, #372]	@ (80024c0 <main+0xac4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	4a60      	ldr	r2, [pc, #384]	@ (80024d4 <main+0xad8>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	440b      	add	r3, r1
 800235a:	461a      	mov	r2, r3
 800235c:	4b5e      	ldr	r3, [pc, #376]	@ (80024d8 <main+0xadc>)
 800235e:	601a      	str	r2, [r3, #0]
			  if(total > 16383) total -=16383;
 8002360:	4b5d      	ldr	r3, [pc, #372]	@ (80024d8 <main+0xadc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002368:	db06      	blt.n	8002378 <main+0x97c>
 800236a:	4b5b      	ldr	r3, [pc, #364]	@ (80024d8 <main+0xadc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8002372:	3b3f      	subs	r3, #63	@ 0x3f
 8002374:	4a58      	ldr	r2, [pc, #352]	@ (80024d8 <main+0xadc>)
 8002376:	6013      	str	r3, [r2, #0]
			  if(total < 0)     total +=16383;
 8002378:	4b57      	ldr	r3, [pc, #348]	@ (80024d8 <main+0xadc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da06      	bge.n	800238e <main+0x992>
 8002380:	4b55      	ldr	r3, [pc, #340]	@ (80024d8 <main+0xadc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8002388:	333f      	adds	r3, #63	@ 0x3f
 800238a:	4a53      	ldr	r2, [pc, #332]	@ (80024d8 <main+0xadc>)
 800238c:	6013      	str	r3, [r2, #0]
			  AD9959_Set_Phase(0x40, total);
 800238e:	4b52      	ldr	r3, [pc, #328]	@ (80024d8 <main+0xadc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4619      	mov	r1, r3
 8002396:	2040      	movs	r0, #64	@ 0x40
 8002398:	f7ff f924 	bl	80015e4 <AD9959_Set_Phase>
			  IO_Update();
 800239c:	f7ff f9c4 	bl	8001728 <IO_Update>
			  dac_phase = delay * 360 / 500 ;
 80023a0:	4b41      	ldr	r3, [pc, #260]	@ (80024a8 <main+0xaac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	4a4b      	ldr	r2, [pc, #300]	@ (80024dc <main+0xae0>)
 80023ae:	fb82 1203 	smull	r1, r2, r2, r3
 80023b2:	1152      	asrs	r2, r2, #5
 80023b4:	17db      	asrs	r3, r3, #31
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4a49      	ldr	r2, [pc, #292]	@ (80024e0 <main+0xae4>)
 80023ba:	6013      	str	r3, [r2, #0]
			  set_dac(modual, dac_phase + dac_phase_1);
 80023bc:	4b49      	ldr	r3, [pc, #292]	@ (80024e4 <main+0xae8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b298      	uxth	r0, r3
 80023c2:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <main+0xae4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <main+0xaec>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7ff f9c3 	bl	8001760 <set_dac>
			  break;
 80023da:	e208      	b.n	80027ee <main+0xdf2>
		  case 4:
			  lcd_show_str(100, 165,"ATTENUATION:\n");
 80023dc:	4a43      	ldr	r2, [pc, #268]	@ (80024ec <main+0xaf0>)
 80023de:	21a5      	movs	r1, #165	@ 0xa5
 80023e0:	2064      	movs	r0, #100	@ 0x64
 80023e2:	f7fe fee5 	bl	80011b0 <lcd_show_str>
			  while (1)
			  {
				  atten = abs((CaptureNumber) / 4 % 11 * 2);
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	da00      	bge.n	80023ee <main+0x9f2>
 80023ec:	3303      	adds	r3, #3
 80023ee:	109b      	asrs	r3, r3, #2
 80023f0:	4619      	mov	r1, r3
 80023f2:	4b3f      	ldr	r3, [pc, #252]	@ (80024f0 <main+0xaf4>)
 80023f4:	fb83 2301 	smull	r2, r3, r3, r1
 80023f8:	105a      	asrs	r2, r3, #1
 80023fa:	17cb      	asrs	r3, r1, #31
 80023fc:	1ad2      	subs	r2, r2, r3
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	1aca      	subs	r2, r1, r3
 800240a:	0053      	lsls	r3, r2, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	bfb8      	it	lt
 8002410:	425b      	neglt	r3, r3
 8002412:	4a38      	ldr	r2, [pc, #224]	@ (80024f4 <main+0xaf8>)
 8002414:	6013      	str	r3, [r2, #0]
				  if(atten != atten_t)
 8002416:	4b37      	ldr	r3, [pc, #220]	@ (80024f4 <main+0xaf8>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b37      	ldr	r3, [pc, #220]	@ (80024f8 <main+0xafc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d008      	beq.n	8002434 <main+0xa38>
				  {
					  atten_t = atten;
 8002422:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <main+0xaf8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a34      	ldr	r2, [pc, #208]	@ (80024f8 <main+0xafc>)
 8002428:	6013      	str	r3, [r2, #0]
					  lcd_show_num(atten);
 800242a:	4b32      	ldr	r3, [pc, #200]	@ (80024f4 <main+0xaf8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fe94 	bl	800115c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8002434:	4b1e      	ldr	r3, [pc, #120]	@ (80024b0 <main+0xab4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	b21b      	sxth	r3, r3
 800243c:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 800243e:	2104      	movs	r1, #4
 8002440:	481c      	ldr	r0, [pc, #112]	@ (80024b4 <main+0xab8>)
 8002442:	f002 f88f 	bl	8004564 <HAL_GPIO_ReadPin>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1cc      	bne.n	80023e6 <main+0x9ea>
				  {
					  lcd_show_str(101,205,"CONFIRM?\n");
 800244c:	4a1a      	ldr	r2, [pc, #104]	@ (80024b8 <main+0xabc>)
 800244e:	21cd      	movs	r1, #205	@ 0xcd
 8002450:	2065      	movs	r0, #101	@ 0x65
 8002452:	f7fe fead 	bl	80011b0 <lcd_show_str>
					  break;
 8002456:	bf00      	nop
				  }
			  }
			  AD9959_Set_Ampl(0x80, DB[atten / 2] * ampl / 1000, freq);
 8002458:	4b26      	ldr	r3, [pc, #152]	@ (80024f4 <main+0xaf8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0fda      	lsrs	r2, r3, #31
 800245e:	4413      	add	r3, r2
 8002460:	105b      	asrs	r3, r3, #1
 8002462:	4a26      	ldr	r2, [pc, #152]	@ (80024fc <main+0xb00>)
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	ed93 7a00 	vldr	s14, [r3]
 800246c:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <main+0xb04>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800247c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002504 <main+0xb08>
 8002480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <main+0xac4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	ee17 1a90 	vmov	r1, s15
 8002492:	2080      	movs	r0, #128	@ 0x80
 8002494:	f7ff f836 	bl	8001504 <AD9959_Set_Ampl>
			  IO_Update();
 8002498:	f7ff f946 	bl	8001728 <IO_Update>
			  break;
 800249c:	e1a7      	b.n	80027ee <main+0xdf2>
 800249e:	bf00      	nop
 80024a0:	080090b8 	.word	0x080090b8
 80024a4:	92492493 	.word	0x92492493
 80024a8:	20000400 	.word	0x20000400
 80024ac:	20000404 	.word	0x20000404
 80024b0:	20000358 	.word	0x20000358
 80024b4:	48000c00 	.word	0x48000c00
 80024b8:	08009094 	.word	0x08009094
 80024bc:	3a83126f 	.word	0x3a83126f
 80024c0:	20000008 	.word	0x20000008
 80024c4:	467ffc00 	.word	0x467ffc00
 80024c8:	2000041c 	.word	0x2000041c
 80024cc:	20000424 	.word	0x20000424
 80024d0:	20000428 	.word	0x20000428
 80024d4:	88888889 	.word	0x88888889
 80024d8:	2000042c 	.word	0x2000042c
 80024dc:	10624dd3 	.word	0x10624dd3
 80024e0:	20000418 	.word	0x20000418
 80024e4:	200003f8 	.word	0x200003f8
 80024e8:	20000420 	.word	0x20000420
 80024ec:	080090c0 	.word	0x080090c0
 80024f0:	2e8ba2e9 	.word	0x2e8ba2e9
 80024f4:	20000408 	.word	0x20000408
 80024f8:	2000040c 	.word	0x2000040c
 80024fc:	20000068 	.word	0x20000068
 8002500:	20000000 	.word	0x20000000
 8002504:	447a0000 	.word	0x447a0000
		  case 5:
			  lcd_show_str(100, 165,"FREQUENCY:\n");
 8002508:	4a7c      	ldr	r2, [pc, #496]	@ (80026fc <main+0xd00>)
 800250a:	21a5      	movs	r1, #165	@ 0xa5
 800250c:	2064      	movs	r0, #100	@ 0x64
 800250e:	f7fe fe4f 	bl	80011b0 <lcd_show_str>
			  while (1)
			  {
				  freq = abs((CaptureNumber) / 4 % 11 + 30);
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2b00      	cmp	r3, #0
 8002516:	da00      	bge.n	800251a <main+0xb1e>
 8002518:	3303      	adds	r3, #3
 800251a:	109b      	asrs	r3, r3, #2
 800251c:	4619      	mov	r1, r3
 800251e:	4b78      	ldr	r3, [pc, #480]	@ (8002700 <main+0xd04>)
 8002520:	fb83 2301 	smull	r2, r3, r3, r1
 8002524:	105a      	asrs	r2, r3, #1
 8002526:	17cb      	asrs	r3, r1, #31
 8002528:	1ad2      	subs	r2, r2, r3
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	1aca      	subs	r2, r1, r3
 8002536:	f102 031e 	add.w	r3, r2, #30
 800253a:	2b00      	cmp	r3, #0
 800253c:	bfb8      	it	lt
 800253e:	425b      	neglt	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	4b70      	ldr	r3, [pc, #448]	@ (8002704 <main+0xd08>)
 8002544:	601a      	str	r2, [r3, #0]
				  if(freq != freq_t)
 8002546:	4b6f      	ldr	r3, [pc, #444]	@ (8002704 <main+0xd08>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <main+0xd0c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d008      	beq.n	8002564 <main+0xb68>
				  {
					  freq_t = freq;
 8002552:	4b6c      	ldr	r3, [pc, #432]	@ (8002704 <main+0xd08>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6c      	ldr	r2, [pc, #432]	@ (8002708 <main+0xd0c>)
 8002558:	6013      	str	r3, [r2, #0]
					  lcd_show_num(freq);
 800255a:	4b6a      	ldr	r3, [pc, #424]	@ (8002704 <main+0xd08>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fdfc 	bl	800115c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8002564:	4b69      	ldr	r3, [pc, #420]	@ (800270c <main+0xd10>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	b21b      	sxth	r3, r3
 800256c:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 800256e:	2104      	movs	r1, #4
 8002570:	4867      	ldr	r0, [pc, #412]	@ (8002710 <main+0xd14>)
 8002572:	f001 fff7 	bl	8004564 <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ca      	bne.n	8002512 <main+0xb16>
				  {
					  lcd_show_str(101,205,"CONFIRM?\n");
 800257c:	4a65      	ldr	r2, [pc, #404]	@ (8002714 <main+0xd18>)
 800257e:	21cd      	movs	r1, #205	@ 0xcd
 8002580:	2065      	movs	r0, #101	@ 0x65
 8002582:	f7fe fe15 	bl	80011b0 <lcd_show_str>
					  break;
 8002586:	bf00      	nop
				  }
			  }
			  AD9959_Set_Freq(0xC0, freq * 1000000);
 8002588:	4b5e      	ldr	r3, [pc, #376]	@ (8002704 <main+0xd08>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a62      	ldr	r2, [pc, #392]	@ (8002718 <main+0xd1c>)
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	4619      	mov	r1, r3
 8002594:	20c0      	movs	r0, #192	@ 0xc0
 8002596:	f7fe ff73 	bl	8001480 <AD9959_Set_Freq>
			  AD9959_Set_Ampl(0x40, ampl, freq );
 800259a:	4b60      	ldr	r3, [pc, #384]	@ (800271c <main+0xd20>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4619      	mov	r1, r3
 80025a0:	4b58      	ldr	r3, [pc, #352]	@ (8002704 <main+0xd08>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	2040      	movs	r0, #64	@ 0x40
 80025a8:	f7fe ffac 	bl	8001504 <AD9959_Set_Ampl>
			  AD9959_Set_Ampl(0x80, ampl, freq );
 80025ac:	4b5b      	ldr	r3, [pc, #364]	@ (800271c <main+0xd20>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4b54      	ldr	r3, [pc, #336]	@ (8002704 <main+0xd08>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	2080      	movs	r0, #128	@ 0x80
 80025ba:	f7fe ffa3 	bl	8001504 <AD9959_Set_Ampl>
			  IO_Update();
 80025be:	f7ff f8b3 	bl	8001728 <IO_Update>
			  break;
 80025c2:	e114      	b.n	80027ee <main+0xdf2>
		  case 6:
			  lcd_show_str(100, 165,"CARRIER PHASE\n");
 80025c4:	4a56      	ldr	r2, [pc, #344]	@ (8002720 <main+0xd24>)
 80025c6:	21a5      	movs	r1, #165	@ 0xa5
 80025c8:	2064      	movs	r0, #100	@ 0x64
 80025ca:	f7fe fdf1 	bl	80011b0 <lcd_show_str>
			  while (1)
			  {
				  phase = abs((CaptureNumber) / 4 % 7 * 30);
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da00      	bge.n	80025d6 <main+0xbda>
 80025d4:	3303      	adds	r3, #3
 80025d6:	109b      	asrs	r3, r3, #2
 80025d8:	4619      	mov	r1, r3
 80025da:	4b52      	ldr	r3, [pc, #328]	@ (8002724 <main+0xd28>)
 80025dc:	fb83 2301 	smull	r2, r3, r3, r1
 80025e0:	440b      	add	r3, r1
 80025e2:	109a      	asrs	r2, r3, #2
 80025e4:	17cb      	asrs	r3, r1, #31
 80025e6:	1ad2      	subs	r2, r2, r3
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	1aca      	subs	r2, r1, r3
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bfb8      	it	lt
 80025fc:	425b      	neglt	r3, r3
 80025fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002728 <main+0xd2c>)
 8002600:	6013      	str	r3, [r2, #0]
				  if(phase != phase_t)
 8002602:	4b49      	ldr	r3, [pc, #292]	@ (8002728 <main+0xd2c>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b49      	ldr	r3, [pc, #292]	@ (800272c <main+0xd30>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d008      	beq.n	8002620 <main+0xc24>
				  {
					  phase_t = phase;
 800260e:	4b46      	ldr	r3, [pc, #280]	@ (8002728 <main+0xd2c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a46      	ldr	r2, [pc, #280]	@ (800272c <main+0xd30>)
 8002614:	6013      	str	r3, [r2, #0]
					  lcd_show_num(phase);
 8002616:	4b44      	ldr	r3, [pc, #272]	@ (8002728 <main+0xd2c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fd9e 	bl	800115c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 8002620:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <main+0xd10>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	b21b      	sxth	r3, r3
 8002628:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 800262a:	2104      	movs	r1, #4
 800262c:	4838      	ldr	r0, [pc, #224]	@ (8002710 <main+0xd14>)
 800262e:	f001 ff99 	bl	8004564 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ca      	bne.n	80025ce <main+0xbd2>
				  {
					  lcd_show_str(101,205,"CONFIRM?\n");
 8002638:	4a36      	ldr	r2, [pc, #216]	@ (8002714 <main+0xd18>)
 800263a:	21cd      	movs	r1, #205	@ 0xcd
 800263c:	2065      	movs	r0, #101	@ 0x65
 800263e:	f7fe fdb7 	bl	80011b0 <lcd_show_str>
					  break;
 8002642:	bf00      	nop
				  }
			  }
			  dds_phase_1 = phase * 16383 / 360;
 8002644:	4b38      	ldr	r3, [pc, #224]	@ (8002728 <main+0xd2c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	039b      	lsls	r3, r3, #14
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	4a38      	ldr	r2, [pc, #224]	@ (8002730 <main+0xd34>)
 8002650:	fb82 1203 	smull	r1, r2, r2, r3
 8002654:	441a      	add	r2, r3
 8002656:	1212      	asrs	r2, r2, #8
 8002658:	17db      	asrs	r3, r3, #31
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	4a35      	ldr	r2, [pc, #212]	@ (8002734 <main+0xd38>)
 800265e:	6013      	str	r3, [r2, #0]
			  //dds_phase_1 -= (int)((float)freq * 16383 * 4.4 / 1000);
              if(dds_phase_1 > 16383) dds_phase_1 -=16383;
 8002660:	4b34      	ldr	r3, [pc, #208]	@ (8002734 <main+0xd38>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002668:	db06      	blt.n	8002678 <main+0xc7c>
 800266a:	4b32      	ldr	r3, [pc, #200]	@ (8002734 <main+0xd38>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8002672:	3b3f      	subs	r3, #63	@ 0x3f
 8002674:	4a2f      	ldr	r2, [pc, #188]	@ (8002734 <main+0xd38>)
 8002676:	6013      	str	r3, [r2, #0]
              if(dds_phase_1 < 0)     dds_phase_1 +=16383;
 8002678:	4b2e      	ldr	r3, [pc, #184]	@ (8002734 <main+0xd38>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	da06      	bge.n	800268e <main+0xc92>
 8002680:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <main+0xd38>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8002688:	333f      	adds	r3, #63	@ 0x3f
 800268a:	4a2a      	ldr	r2, [pc, #168]	@ (8002734 <main+0xd38>)
 800268c:	6013      	str	r3, [r2, #0]
              total = dds_phase + dds_phase_1 + init_phase * freq / 30;
 800268e:	4b2a      	ldr	r3, [pc, #168]	@ (8002738 <main+0xd3c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b28      	ldr	r3, [pc, #160]	@ (8002734 <main+0xd38>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4619      	mov	r1, r3
 800269a:	4b28      	ldr	r3, [pc, #160]	@ (800273c <main+0xd40>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	4b18      	ldr	r3, [pc, #96]	@ (8002704 <main+0xd08>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	4a25      	ldr	r2, [pc, #148]	@ (8002740 <main+0xd44>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	440b      	add	r3, r1
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <main+0xd48>)
 80026b6:	601a      	str	r2, [r3, #0]
              if(total > 16383) total -=16383;
 80026b8:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <main+0xd48>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026c0:	db06      	blt.n	80026d0 <main+0xcd4>
 80026c2:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <main+0xd48>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 80026ca:	3b3f      	subs	r3, #63	@ 0x3f
 80026cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <main+0xd48>)
 80026ce:	6013      	str	r3, [r2, #0]
			  if(total < 0)     total +=16383;
 80026d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <main+0xd48>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	da06      	bge.n	80026e6 <main+0xcea>
 80026d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002744 <main+0xd48>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80026e0:	333f      	adds	r3, #63	@ 0x3f
 80026e2:	4a18      	ldr	r2, [pc, #96]	@ (8002744 <main+0xd48>)
 80026e4:	6013      	str	r3, [r2, #0]
			  AD9959_Set_Phase(0x40, total);
 80026e6:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <main+0xd48>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	4619      	mov	r1, r3
 80026ee:	2040      	movs	r0, #64	@ 0x40
 80026f0:	f7fe ff78 	bl	80015e4 <AD9959_Set_Phase>
			  IO_Update();
 80026f4:	f7ff f818 	bl	8001728 <IO_Update>
			  break;
 80026f8:	e079      	b.n	80027ee <main+0xdf2>
 80026fa:	bf00      	nop
 80026fc:	080090d0 	.word	0x080090d0
 8002700:	2e8ba2e9 	.word	0x2e8ba2e9
 8002704:	20000008 	.word	0x20000008
 8002708:	2000000c 	.word	0x2000000c
 800270c:	20000358 	.word	0x20000358
 8002710:	48000c00 	.word	0x48000c00
 8002714:	08009094 	.word	0x08009094
 8002718:	000f4240 	.word	0x000f4240
 800271c:	20000000 	.word	0x20000000
 8002720:	080090dc 	.word	0x080090dc
 8002724:	92492493 	.word	0x92492493
 8002728:	20000410 	.word	0x20000410
 800272c:	20000414 	.word	0x20000414
 8002730:	b60b60b7 	.word	0xb60b60b7
 8002734:	20000424 	.word	0x20000424
 8002738:	2000041c 	.word	0x2000041c
 800273c:	20000428 	.word	0x20000428
 8002740:	88888889 	.word	0x88888889
 8002744:	2000042c 	.word	0x2000042c
		  case 7:
			  lcd_show_str(100, 165,"SIGNAL PHASE\n");
 8002748:	4a33      	ldr	r2, [pc, #204]	@ (8002818 <main+0xe1c>)
 800274a:	21a5      	movs	r1, #165	@ 0xa5
 800274c:	2064      	movs	r0, #100	@ 0x64
 800274e:	f7fe fd2f 	bl	80011b0 <lcd_show_str>
			  while (1)
			  {
				  phase = abs((CaptureNumber) / 4 % 7 * 30);
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2b00      	cmp	r3, #0
 8002756:	da00      	bge.n	800275a <main+0xd5e>
 8002758:	3303      	adds	r3, #3
 800275a:	109b      	asrs	r3, r3, #2
 800275c:	4619      	mov	r1, r3
 800275e:	4b2f      	ldr	r3, [pc, #188]	@ (800281c <main+0xe20>)
 8002760:	fb83 2301 	smull	r2, r3, r3, r1
 8002764:	440b      	add	r3, r1
 8002766:	109a      	asrs	r2, r3, #2
 8002768:	17cb      	asrs	r3, r1, #31
 800276a:	1ad2      	subs	r2, r2, r3
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	1aca      	subs	r2, r1, r3
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	bfb8      	it	lt
 8002780:	425b      	neglt	r3, r3
 8002782:	4a27      	ldr	r2, [pc, #156]	@ (8002820 <main+0xe24>)
 8002784:	6013      	str	r3, [r2, #0]
				  if(phase != phase_t)
 8002786:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <main+0xe24>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b26      	ldr	r3, [pc, #152]	@ (8002824 <main+0xe28>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d008      	beq.n	80027a4 <main+0xda8>
				  {
					  phase_t = phase;
 8002792:	4b23      	ldr	r3, [pc, #140]	@ (8002820 <main+0xe24>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a23      	ldr	r2, [pc, #140]	@ (8002824 <main+0xe28>)
 8002798:	6013      	str	r3, [r2, #0]
					  lcd_show_num(phase);
 800279a:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <main+0xe24>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fcdc 	bl	800115c <lcd_show_num>
				  }
				  CaptureNumber = (short)__HAL_TIM_GET_COUNTER(&htim8);
 80027a4:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <main+0xe2c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	623b      	str	r3, [r7, #32]
				  if (HAL_GPIO_ReadPin(GPIOD, 1<<2) == GPIO_PIN_RESET)
 80027ae:	2104      	movs	r1, #4
 80027b0:	481e      	ldr	r0, [pc, #120]	@ (800282c <main+0xe30>)
 80027b2:	f001 fed7 	bl	8004564 <HAL_GPIO_ReadPin>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ca      	bne.n	8002752 <main+0xd56>
				  {
					  lcd_show_str(101,205,"CONFIRM?\n");
 80027bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002830 <main+0xe34>)
 80027be:	21cd      	movs	r1, #205	@ 0xcd
 80027c0:	2065      	movs	r0, #101	@ 0x65
 80027c2:	f7fe fcf5 	bl	80011b0 <lcd_show_str>
					  break;
 80027c6:	bf00      	nop
				  }
			  }
			  dac_phase_1 = phase ;
 80027c8:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <main+0xe24>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a19      	ldr	r2, [pc, #100]	@ (8002834 <main+0xe38>)
 80027ce:	6013      	str	r3, [r2, #0]
			  set_dac(modual, dac_phase + dac_phase_1);
 80027d0:	4b19      	ldr	r3, [pc, #100]	@ (8002838 <main+0xe3c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b298      	uxth	r0, r3
 80027d6:	4b19      	ldr	r3, [pc, #100]	@ (800283c <main+0xe40>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <main+0xe38>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	4619      	mov	r1, r3
 80027ea:	f7fe ffb9 	bl	8001760 <set_dac>
			  break;
		  }
		  while(HAL_GPIO_ReadPin(GPIOC, 1<<13) != 0)		  ;
 80027ee:	bf00      	nop
 80027f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027f4:	4812      	ldr	r0, [pc, #72]	@ (8002840 <main+0xe44>)
 80027f6:	f001 feb5 	bl	8004564 <HAL_GPIO_ReadPin>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f7      	bne.n	80027f0 <main+0xdf4>
		  //lcd_show_picture(101, 105, 240, 100, gImage_black_big);
		  lcd_show_black(100, 165, 239, 100);
 8002800:	2364      	movs	r3, #100	@ 0x64
 8002802:	22ef      	movs	r2, #239	@ 0xef
 8002804:	21a5      	movs	r1, #165	@ 0xa5
 8002806:	2064      	movs	r0, #100	@ 0x64
 8002808:	f7fe fcf8 	bl	80011fc <lcd_show_black>
	  }
	  prev = curr;
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  {
 8002812:	f7ff b93d 	b.w	8001a90 <main+0x94>
 8002816:	bf00      	nop
 8002818:	080090ec 	.word	0x080090ec
 800281c:	92492493 	.word	0x92492493
 8002820:	20000410 	.word	0x20000410
 8002824:	20000414 	.word	0x20000414
 8002828:	20000358 	.word	0x20000358
 800282c:	48000c00 	.word	0x48000c00
 8002830:	08009094 	.word	0x08009094
 8002834:	20000420 	.word	0x20000420
 8002838:	200003f8 	.word	0x200003f8
 800283c:	20000418 	.word	0x20000418
 8002840:	48000800 	.word	0x48000800

08002844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b094      	sub	sp, #80	@ 0x50
 8002848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800284a:	f107 0318 	add.w	r3, r7, #24
 800284e:	2238      	movs	r2, #56	@ 0x38
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f005 fff8 	bl	8008848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002866:	2000      	movs	r0, #0
 8002868:	f001 ffae 	bl	80047c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800286c:	2301      	movs	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002870:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002874:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002876:	2302      	movs	r3, #2
 8002878:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800287a:	2303      	movs	r3, #3
 800287c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 800287e:	2305      	movs	r3, #5
 8002880:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002882:	2340      	movs	r3, #64	@ 0x40
 8002884:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002886:	2302      	movs	r3, #2
 8002888:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800288a:	2302      	movs	r3, #2
 800288c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800288e:	2302      	movs	r3, #2
 8002890:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002892:	f107 0318 	add.w	r3, r7, #24
 8002896:	4618      	mov	r0, r3
 8002898:	f002 f84a 	bl	8004930 <HAL_RCC_OscConfig>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80028a2:	f000 fa51 	bl	8002d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a6:	230f      	movs	r3, #15
 80028a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028aa:	2303      	movs	r3, #3
 80028ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2104      	movs	r1, #4
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fb48 	bl	8004f54 <HAL_RCC_ClockConfig>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80028ca:	f000 fa3d 	bl	8002d48 <Error_Handler>
  }
}
 80028ce:	bf00      	nop
 80028d0:	3750      	adds	r7, #80	@ 0x50
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	@ 0x30
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80028de:	463b      	mov	r3, r7
 80028e0:	2230      	movs	r2, #48	@ 0x30
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f005 ffaf 	bl	8008848 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80028ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <MX_DAC3_Init+0x80>)
 80028ec:	4a1b      	ldr	r2, [pc, #108]	@ (800295c <MX_DAC3_Init+0x84>)
 80028ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80028f0:	4819      	ldr	r0, [pc, #100]	@ (8002958 <MX_DAC3_Init+0x80>)
 80028f2:	f000 fe44 	bl	800357e <HAL_DAC_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 80028fc:	f000 fa24 	bl	8002d48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002900:	2302      	movs	r3, #2
 8002902:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = ENABLE;
 8002904:	2301      	movs	r3, #1
 8002906:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 8002910:	230e      	movs	r3, #14
 8002912:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002918:	2302      	movs	r3, #2
 800291a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800291c:	2302      	movs	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002924:	463b      	mov	r3, r7
 8002926:	2200      	movs	r2, #0
 8002928:	4619      	mov	r1, r3
 800292a:	480b      	ldr	r0, [pc, #44]	@ (8002958 <MX_DAC3_Init+0x80>)
 800292c:	f000 ff8a 	bl	8003844 <HAL_DAC_ConfigChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8002936:	f000 fa07 	bl	8002d48 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800293a:	463b      	mov	r3, r7
 800293c:	2210      	movs	r2, #16
 800293e:	4619      	mov	r1, r3
 8002940:	4805      	ldr	r0, [pc, #20]	@ (8002958 <MX_DAC3_Init+0x80>)
 8002942:	f000 ff7f 	bl	8003844 <HAL_DAC_ConfigChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 800294c:	f000 f9fc 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8002950:	bf00      	nop
 8002952:	3730      	adds	r7, #48	@ 0x30
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000148 	.word	0x20000148
 800295c:	50001000 	.word	0x50001000

08002960 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <MX_OPAMP3_Init+0x44>)
 8002966:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <MX_OPAMP3_Init+0x48>)
 8002968:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800296a:	4b0e      	ldr	r3, [pc, #56]	@ (80029a4 <MX_OPAMP3_Init+0x44>)
 800296c:	2280      	movs	r2, #128	@ 0x80
 800296e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002970:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <MX_OPAMP3_Init+0x44>)
 8002972:	2260      	movs	r2, #96	@ 0x60
 8002974:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8002976:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <MX_OPAMP3_Init+0x44>)
 8002978:	220c      	movs	r2, #12
 800297a:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 800297c:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <MX_OPAMP3_Init+0x44>)
 800297e:	2200      	movs	r2, #0
 8002980:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002982:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <MX_OPAMP3_Init+0x44>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <MX_OPAMP3_Init+0x44>)
 800298a:	2200      	movs	r2, #0
 800298c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800298e:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <MX_OPAMP3_Init+0x44>)
 8002990:	f001 fe18 	bl	80045c4 <HAL_OPAMP_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 800299a:	f000 f9d5 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	2000021c 	.word	0x2000021c
 80029a8:	40010308 	.word	0x40010308

080029ac <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <MX_OPAMP6_Init+0x44>)
 80029b2:	4a10      	ldr	r2, [pc, #64]	@ (80029f4 <MX_OPAMP6_Init+0x48>)
 80029b4:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80029b6:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <MX_OPAMP6_Init+0x44>)
 80029b8:	2280      	movs	r2, #128	@ 0x80
 80029ba:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <MX_OPAMP6_Init+0x44>)
 80029be:	2260      	movs	r2, #96	@ 0x60
 80029c0:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80029c2:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <MX_OPAMP6_Init+0x44>)
 80029c4:	220c      	movs	r2, #12
 80029c6:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 80029c8:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <MX_OPAMP6_Init+0x44>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80029ce:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <MX_OPAMP6_Init+0x44>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <MX_OPAMP6_Init+0x44>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80029da:	4805      	ldr	r0, [pc, #20]	@ (80029f0 <MX_OPAMP6_Init+0x44>)
 80029dc:	f001 fdf2 	bl	80045c4 <HAL_OPAMP_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 80029e6:	f000 f9af 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000258 	.word	0x20000258
 80029f4:	40010314 	.word	0x40010314

080029f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <MX_SPI1_Init+0x74>)
 80029fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002a70 <MX_SPI1_Init+0x78>)
 8002a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a0a:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a10:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a18:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a2e:	2210      	movs	r2, #16
 8002a30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a46:	2207      	movs	r2, #7
 8002a48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a56:	4805      	ldr	r0, [pc, #20]	@ (8002a6c <MX_SPI1_Init+0x74>)
 8002a58:	f002 fc6c 	bl	8005334 <HAL_SPI_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a62:	f000 f971 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000294 	.word	0x20000294
 8002a70:	40013000 	.word	0x40013000

08002a74 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	@ 0x30
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	2224      	movs	r2, #36	@ 0x24
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f005 fee0 	bl	8008848 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a88:	463b      	mov	r3, r7
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a92:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <MX_TIM8_Init+0xac>)
 8002a94:	4a23      	ldr	r2, [pc, #140]	@ (8002b24 <MX_TIM8_Init+0xb0>)
 8002a96:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002a98:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <MX_TIM8_Init+0xac>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a9e:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <MX_TIM8_Init+0xac>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <MX_TIM8_Init+0xac>)
 8002aa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002aaa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aac:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <MX_TIM8_Init+0xac>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <MX_TIM8_Init+0xac>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab8:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <MX_TIM8_Init+0xac>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480d      	ldr	r0, [pc, #52]	@ (8002b20 <MX_TIM8_Init+0xac>)
 8002aea:	f003 f896 	bl	8005c1a <HAL_TIM_Encoder_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002af4:	f000 f928 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af8:	2300      	movs	r3, #0
 8002afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b04:	463b      	mov	r3, r7
 8002b06:	4619      	mov	r1, r3
 8002b08:	4805      	ldr	r0, [pc, #20]	@ (8002b20 <MX_TIM8_Init+0xac>)
 8002b0a:	f003 fc47 	bl	800639c <HAL_TIMEx_MasterConfigSynchronization>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002b14:	f000 f918 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	3730      	adds	r7, #48	@ 0x30
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000358 	.word	0x20000358
 8002b24:	40013400 	.word	0x40013400

08002b28 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2e:	f107 0310 	add.w	r3, r7, #16
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002b46:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002b48:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc4 <MX_TIM15_Init+0x9c>)
 8002b4a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b52:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19;
 8002b58:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002b5a:	2213      	movs	r2, #19
 8002b5c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5e:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002b64:	4b16      	ldr	r3, [pc, #88]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002b70:	4813      	ldr	r0, [pc, #76]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002b72:	f002 ff63 	bl	8005a3c <HAL_TIM_Base_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8002b7c:	f000 f8e4 	bl	8002d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002b86:	f107 0310 	add.w	r3, r7, #16
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480c      	ldr	r0, [pc, #48]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002b8e:	f003 f979 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8002b98:	f000 f8d6 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4805      	ldr	r0, [pc, #20]	@ (8002bc0 <MX_TIM15_Init+0x98>)
 8002baa:	f003 fbf7 	bl	800639c <HAL_TIMEx_MasterConfigSynchronization>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002bb4:	f000 f8c8 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002bb8:	bf00      	nop
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	200003a4 	.word	0x200003a4
 8002bc4:	40014000 	.word	0x40014000

08002bc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002bce:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <MX_DMA_Init+0x50>)
 8002bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd2:	4a11      	ldr	r2, [pc, #68]	@ (8002c18 <MX_DMA_Init+0x50>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6493      	str	r3, [r2, #72]	@ 0x48
 8002bda:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <MX_DMA_Init+0x50>)
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <MX_DMA_Init+0x50>)
 8002be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bea:	4a0b      	ldr	r2, [pc, #44]	@ (8002c18 <MX_DMA_Init+0x50>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002bf2:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <MX_DMA_Init+0x50>)
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	200b      	movs	r0, #11
 8002c04:	f000 fc87 	bl	8003516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c08:	200b      	movs	r0, #11
 8002c0a:	f000 fc9e 	bl	800354a <HAL_NVIC_EnableIRQ>

}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000

08002c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c32:	4b42      	ldr	r3, [pc, #264]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c36:	4a41      	ldr	r2, [pc, #260]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c50:	f043 0320 	orr.w	r3, r3, #32
 8002c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c56:	4b39      	ldr	r3, [pc, #228]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	4b36      	ldr	r3, [pc, #216]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c66:	4a35      	ldr	r2, [pc, #212]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c6e:	4b33      	ldr	r3, [pc, #204]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7a:	4b30      	ldr	r3, [pc, #192]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c86:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c92:	4b2a      	ldr	r3, [pc, #168]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002c98:	f043 0308 	orr.w	r3, r3, #8
 8002c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9e:	4b27      	ldr	r3, [pc, #156]	@ (8002d3c <MX_GPIO_Init+0x120>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 8002caa:	2200      	movs	r2, #0
 8002cac:	f640 213f 	movw	r1, #2623	@ 0xa3f
 8002cb0:	4823      	ldr	r0, [pc, #140]	@ (8002d40 <MX_GPIO_Init+0x124>)
 8002cb2:	f001 fc6f 	bl	8004594 <HAL_GPIO_WritePin>
                          |PWR_Pin|PS0_Pin|SDIO1_Pin|LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|SDIO2_Pin|SDIO3_Pin|PS1_Pin
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f641 3102 	movw	r1, #6914	@ 0x1b02
 8002cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cc0:	f001 fc68 	bl	8004594 <HAL_GPIO_WritePin>
                          |PS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002cc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4819      	ldr	r0, [pc, #100]	@ (8002d40 <MX_GPIO_Init+0x124>)
 8002cda:	f001 fac1 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin CS_Pin SDIO0_Pin UPDATE_Pin
                           PWR_Pin PS0_Pin SDIO1_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|CS_Pin|SDIO0_Pin|UPDATE_Pin
 8002cde:	f640 233f 	movw	r3, #2623	@ 0xa3f
 8002ce2:	617b      	str	r3, [r7, #20]
                          |PWR_Pin|PS0_Pin|SDIO1_Pin|LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4812      	ldr	r0, [pc, #72]	@ (8002d40 <MX_GPIO_Init+0x124>)
 8002cf8:	f001 fab2 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin SDIO2_Pin SDIO3_Pin PS1_Pin
                           PS2_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|SDIO2_Pin|SDIO3_Pin|PS1_Pin
 8002cfc:	f641 3302 	movw	r3, #6914	@ 0x1b02
 8002d00:	617b      	str	r3, [r7, #20]
                          |PS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d18:	f001 faa2 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d24:	2301      	movs	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4805      	ldr	r0, [pc, #20]	@ (8002d44 <MX_GPIO_Init+0x128>)
 8002d30:	f001 fa96 	bl	8004260 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	@ 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	48000800 	.word	0x48000800
 8002d44:	48000c00 	.word	0x48000c00

08002d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d4c:	b672      	cpsid	i
}
 8002d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <Error_Handler+0x8>

08002d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d66:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	4a08      	ldr	r2, [pc, #32]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <HAL_MspInit+0x44>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002d8a:	f001 fdc1 	bl	8004910 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000

08002d9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a34      	ldr	r2, [pc, #208]	@ (8002e7c <HAL_DAC_MspInit+0xe0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d161      	bne.n	8002e72 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8002dae:	4b34      	ldr	r3, [pc, #208]	@ (8002e80 <HAL_DAC_MspInit+0xe4>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db2:	4a33      	ldr	r2, [pc, #204]	@ (8002e80 <HAL_DAC_MspInit+0xe4>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dba:	4b31      	ldr	r3, [pc, #196]	@ (8002e80 <HAL_DAC_MspInit+0xe4>)
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

    /* DAC3 DMA Init */
    /* DAC3_CH1 Init */
    hdma_dac3_ch1.Instance = DMA1_Channel2;
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8002e88 <HAL_DAC_MspInit+0xec>)
 8002dca:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002dce:	2266      	movs	r2, #102	@ 0x66
 8002dd0:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002dde:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002de0:	2280      	movs	r2, #128	@ 0x80
 8002de2:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002de4:	4b27      	ldr	r3, [pc, #156]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dea:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002dec:	4b25      	ldr	r3, [pc, #148]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002dee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002df2:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8002df4:	4b23      	ldr	r3, [pc, #140]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002df6:	2220      	movs	r2, #32
 8002df8:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002dfa:	4b22      	ldr	r3, [pc, #136]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8002e00:	4820      	ldr	r0, [pc, #128]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002e02:	f000 ff61 	bl	8003cc8 <HAL_DMA_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_DAC_MspInit+0x74>
    {
      Error_Handler();
 8002e0c:	f7ff ff9c 	bl	8002d48 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1c      	ldr	r2, [pc, #112]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	4a1b      	ldr	r2, [pc, #108]	@ (8002e84 <HAL_DAC_MspInit+0xe8>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC3_CH2 Init */
    hdma_dac3_ch2.Instance = DMA1_Channel3;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e90 <HAL_DAC_MspInit+0xf4>)
 8002e20:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch2.Init.Request = DMA_REQUEST_DAC3_CHANNEL2;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e24:	2267      	movs	r2, #103	@ 0x67
 8002e26:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e28:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e2e:	4b17      	ldr	r3, [pc, #92]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002e34:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e36:	2280      	movs	r2, #128	@ 0x80
 8002e38:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e3a:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e40:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e48:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch2.Init.Mode = DMA_CIRCULAR;
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002e50:	4b0e      	ldr	r3, [pc, #56]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch2) != HAL_OK)
 8002e56:	480d      	ldr	r0, [pc, #52]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e58:	f000 ff36 	bl	8003cc8 <HAL_DMA_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002e62:	f7ff ff71 	bl	8002d48 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac3_ch2);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a08      	ldr	r2, [pc, #32]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	4a07      	ldr	r2, [pc, #28]	@ (8002e8c <HAL_DAC_MspInit+0xf0>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	50001000 	.word	0x50001000
 8002e80:	40021000 	.word	0x40021000
 8002e84:	2000015c 	.word	0x2000015c
 8002e88:	4002001c 	.word	0x4002001c
 8002e8c:	200001bc 	.word	0x200001bc
 8002e90:	40020030 	.word	0x40020030

08002e94 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	@ 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f2c <HAL_OPAMP_MspInit+0x98>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d118      	bne.n	8002ee8 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <HAL_OPAMP_MspInit+0x9c>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eba:	4a1d      	ldr	r2, [pc, #116]	@ (8002f30 <HAL_OPAMP_MspInit+0x9c>)
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_OPAMP_MspInit+0x9c>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
    /**OPAMP3 GPIO Configuration
    PB1     ------> OPAMP3_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4814      	ldr	r0, [pc, #80]	@ (8002f34 <HAL_OPAMP_MspInit+0xa0>)
 8002ee2:	f001 f9bd 	bl	8004260 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8002ee6:	e01d      	b.n	8002f24 <HAL_OPAMP_MspInit+0x90>
  else if(hopamp->Instance==OPAMP6)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <HAL_OPAMP_MspInit+0xa4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d118      	bne.n	8002f24 <HAL_OPAMP_MspInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f30 <HAL_OPAMP_MspInit+0x9c>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f30 <HAL_OPAMP_MspInit+0x9c>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002efe:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <HAL_OPAMP_MspInit+0x9c>)
 8002f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f10:	2303      	movs	r3, #3
 8002f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4805      	ldr	r0, [pc, #20]	@ (8002f34 <HAL_OPAMP_MspInit+0xa0>)
 8002f20:	f001 f99e 	bl	8004260 <HAL_GPIO_Init>
}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	@ 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40010308 	.word	0x40010308
 8002f30:	40021000 	.word	0x40021000
 8002f34:	48000400 	.word	0x48000400
 8002f38:	40010314 	.word	0x40010314

08002f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	@ 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2c      	ldr	r2, [pc, #176]	@ (800300c <HAL_SPI_MspInit+0xd0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d151      	bne.n	8003002 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003010 <HAL_SPI_MspInit+0xd4>)
 8002f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f62:	4a2b      	ldr	r2, [pc, #172]	@ (8003010 <HAL_SPI_MspInit+0xd4>)
 8002f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f68:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f6a:	4b29      	ldr	r3, [pc, #164]	@ (8003010 <HAL_SPI_MspInit+0xd4>)
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f76:	4b26      	ldr	r3, [pc, #152]	@ (8003010 <HAL_SPI_MspInit+0xd4>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	4a25      	ldr	r2, [pc, #148]	@ (8003010 <HAL_SPI_MspInit+0xd4>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f82:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <HAL_SPI_MspInit+0xd4>)
 8002f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002f8e:	23a0      	movs	r3, #160	@ 0xa0
 8002f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa2:	f107 0314 	add.w	r3, r7, #20
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fac:	f001 f958 	bl	8004260 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002fb0:	4b18      	ldr	r3, [pc, #96]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fb2:	4a19      	ldr	r2, [pc, #100]	@ (8003018 <HAL_SPI_MspInit+0xdc>)
 8002fb4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002fb6:	4b17      	ldr	r3, [pc, #92]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fb8:	220b      	movs	r2, #11
 8002fba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fbc:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc2:	4b14      	ldr	r3, [pc, #80]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fc8:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fca:	2280      	movs	r2, #128	@ 0x80
 8002fcc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fce:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002fe6:	480b      	ldr	r0, [pc, #44]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002fe8:	f000 fe6e 	bl	8003cc8 <HAL_DMA_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002ff2:	f7ff fea9 	bl	8002d48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a06      	ldr	r2, [pc, #24]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ffc:	4a05      	ldr	r2, [pc, #20]	@ (8003014 <HAL_SPI_MspInit+0xd8>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003002:	bf00      	nop
 8003004:	3728      	adds	r7, #40	@ 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40013000 	.word	0x40013000
 8003010:	40021000 	.word	0x40021000
 8003014:	200002f8 	.word	0x200002f8
 8003018:	40020008 	.word	0x40020008

0800301c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <HAL_TIM_Encoder_MspInit+0x7c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d127      	bne.n	800308e <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800303e:	4b17      	ldr	r3, [pc, #92]	@ (800309c <HAL_TIM_Encoder_MspInit+0x80>)
 8003040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003042:	4a16      	ldr	r2, [pc, #88]	@ (800309c <HAL_TIM_Encoder_MspInit+0x80>)
 8003044:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003048:	6613      	str	r3, [r2, #96]	@ 0x60
 800304a:	4b14      	ldr	r3, [pc, #80]	@ (800309c <HAL_TIM_Encoder_MspInit+0x80>)
 800304c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003056:	4b11      	ldr	r3, [pc, #68]	@ (800309c <HAL_TIM_Encoder_MspInit+0x80>)
 8003058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305a:	4a10      	ldr	r2, [pc, #64]	@ (800309c <HAL_TIM_Encoder_MspInit+0x80>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003062:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <HAL_TIM_Encoder_MspInit+0x80>)
 8003064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800306e:	23c0      	movs	r3, #192	@ 0xc0
 8003070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003072:	2302      	movs	r3, #2
 8003074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003076:	2301      	movs	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	2300      	movs	r3, #0
 800307c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800307e:	2304      	movs	r3, #4
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	4619      	mov	r1, r3
 8003088:	4805      	ldr	r0, [pc, #20]	@ (80030a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800308a:	f001 f8e9 	bl	8004260 <HAL_GPIO_Init>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 800308e:	bf00      	nop
 8003090:	3728      	adds	r7, #40	@ 0x28
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40013400 	.word	0x40013400
 800309c:	40021000 	.word	0x40021000
 80030a0:	48000800 	.word	0x48000800

080030a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <HAL_TIM_Base_MspInit+0x38>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10b      	bne.n	80030ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80030b6:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <HAL_TIM_Base_MspInit+0x3c>)
 80030b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ba:	4a09      	ldr	r2, [pc, #36]	@ (80030e0 <HAL_TIM_Base_MspInit+0x3c>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80030c2:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <HAL_TIM_Base_MspInit+0x3c>)
 80030c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40014000 	.word	0x40014000
 80030e0:	40021000 	.word	0x40021000

080030e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030e8:	bf00      	nop
 80030ea:	e7fd      	b.n	80030e8 <NMI_Handler+0x4>

080030ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <HardFault_Handler+0x4>

080030f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f8:	bf00      	nop
 80030fa:	e7fd      	b.n	80030f8 <MemManage_Handler+0x4>

080030fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <BusFault_Handler+0x4>

08003104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <UsageFault_Handler+0x4>

0800310c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800313a:	f000 f8d1 	bl	80032e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003148:	4802      	ldr	r0, [pc, #8]	@ (8003154 <DMA1_Channel1_IRQHandler+0x10>)
 800314a:	f000 ff39 	bl	8003fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200002f8 	.word	0x200002f8

08003158 <_sbrk>:
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	4a14      	ldr	r2, [pc, #80]	@ (80031b4 <_sbrk+0x5c>)
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <_sbrk+0x60>)
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <_sbrk+0x22>
 8003174:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <_sbrk+0x64>)
 8003176:	4a12      	ldr	r2, [pc, #72]	@ (80031c0 <_sbrk+0x68>)
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <_sbrk+0x64>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	429a      	cmp	r2, r3
 8003186:	d207      	bcs.n	8003198 <_sbrk+0x40>
 8003188:	f005 fb76 	bl	8008878 <__errno>
 800318c:	4603      	mov	r3, r0
 800318e:	220c      	movs	r2, #12
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e009      	b.n	80031ac <_sbrk+0x54>
 8003198:	4b08      	ldr	r3, [pc, #32]	@ (80031bc <_sbrk+0x64>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <_sbrk+0x64>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	4a05      	ldr	r2, [pc, #20]	@ (80031bc <_sbrk+0x64>)
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20020000 	.word	0x20020000
 80031b8:	00000400 	.word	0x00000400
 80031bc:	20000440 	.word	0x20000440
 80031c0:	20000590 	.word	0x20000590

080031c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031c8:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <SystemInit+0x20>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ce:	4a05      	ldr	r2, [pc, #20]	@ (80031e4 <SystemInit+0x20>)
 80031d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <Reset_Handler>:
 80031e8:	480d      	ldr	r0, [pc, #52]	@ (8003220 <LoopForever+0x2>)
 80031ea:	4685      	mov	sp, r0
 80031ec:	f7ff ffea 	bl	80031c4 <SystemInit>
 80031f0:	480c      	ldr	r0, [pc, #48]	@ (8003224 <LoopForever+0x6>)
 80031f2:	490d      	ldr	r1, [pc, #52]	@ (8003228 <LoopForever+0xa>)
 80031f4:	4a0d      	ldr	r2, [pc, #52]	@ (800322c <LoopForever+0xe>)
 80031f6:	2300      	movs	r3, #0
 80031f8:	e002      	b.n	8003200 <LoopCopyDataInit>

080031fa <CopyDataInit>:
 80031fa:	58d4      	ldr	r4, [r2, r3]
 80031fc:	50c4      	str	r4, [r0, r3]
 80031fe:	3304      	adds	r3, #4

08003200 <LoopCopyDataInit>:
 8003200:	18c4      	adds	r4, r0, r3
 8003202:	428c      	cmp	r4, r1
 8003204:	d3f9      	bcc.n	80031fa <CopyDataInit>
 8003206:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <LoopForever+0x12>)
 8003208:	4c0a      	ldr	r4, [pc, #40]	@ (8003234 <LoopForever+0x16>)
 800320a:	2300      	movs	r3, #0
 800320c:	e001      	b.n	8003212 <LoopFillZerobss>

0800320e <FillZerobss>:
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	3204      	adds	r2, #4

08003212 <LoopFillZerobss>:
 8003212:	42a2      	cmp	r2, r4
 8003214:	d3fb      	bcc.n	800320e <FillZerobss>
 8003216:	f005 fb35 	bl	8008884 <__libc_init_array>
 800321a:	f7fe fbef 	bl	80019fc <main>

0800321e <LoopForever>:
 800321e:	e7fe      	b.n	800321e <LoopForever>
 8003220:	20020000 	.word	0x20020000
 8003224:	20000000 	.word	0x20000000
 8003228:	200000f0 	.word	0x200000f0
 800322c:	0800bccc 	.word	0x0800bccc
 8003230:	200000f0 	.word	0x200000f0
 8003234:	20000590 	.word	0x20000590

08003238 <ADC1_2_IRQHandler>:
 8003238:	e7fe      	b.n	8003238 <ADC1_2_IRQHandler>

0800323a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003244:	2003      	movs	r0, #3
 8003246:	f000 f95b 	bl	8003500 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800324a:	200f      	movs	r0, #15
 800324c:	f000 f80e 	bl	800326c <HAL_InitTick>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	71fb      	strb	r3, [r7, #7]
 800325a:	e001      	b.n	8003260 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800325c:	f7ff fd7a 	bl	8002d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003260:	79fb      	ldrb	r3, [r7, #7]

}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003278:	4b16      	ldr	r3, [pc, #88]	@ (80032d4 <HAL_InitTick+0x68>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d022      	beq.n	80032c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003280:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <HAL_InitTick+0x6c>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <HAL_InitTick+0x68>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800328c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f966 	bl	8003566 <HAL_SYSTICK_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10f      	bne.n	80032c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b0f      	cmp	r3, #15
 80032a4:	d809      	bhi.n	80032ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a6:	2200      	movs	r2, #0
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	f04f 30ff 	mov.w	r0, #4294967295
 80032ae:	f000 f932 	bl	8003516 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_InitTick+0x70>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	e007      	b.n	80032ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	e004      	b.n	80032ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e001      	b.n	80032ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	2000009c 	.word	0x2000009c
 80032d8:	20000094 	.word	0x20000094
 80032dc:	20000098 	.word	0x20000098

080032e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e4:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <HAL_IncTick+0x1c>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <HAL_IncTick+0x20>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4413      	add	r3, r2
 80032ee:	4a03      	ldr	r2, [pc, #12]	@ (80032fc <HAL_IncTick+0x1c>)
 80032f0:	6013      	str	r3, [r2, #0]
}
 80032f2:	bf00      	nop
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	20000444 	.word	0x20000444
 8003300:	2000009c 	.word	0x2000009c

08003304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return uwTick;
 8003308:	4b03      	ldr	r3, [pc, #12]	@ (8003318 <HAL_GetTick+0x14>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000444 	.word	0x20000444

0800331c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003324:	f7ff ffee 	bl	8003304 <HAL_GetTick>
 8003328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d004      	beq.n	8003340 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_Delay+0x40>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4413      	add	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003340:	bf00      	nop
 8003342:	f7ff ffdf 	bl	8003304 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	429a      	cmp	r2, r3
 8003350:	d8f7      	bhi.n	8003342 <HAL_Delay+0x26>
  {
  }
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	2000009c 	.word	0x2000009c

08003360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4907      	ldr	r1, [pc, #28]	@ (80033fc <__NVIC_EnableIRQ+0x38>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	2b00      	cmp	r3, #0
 8003412:	db0a      	blt.n	800342a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	490c      	ldr	r1, [pc, #48]	@ (800344c <__NVIC_SetPriority+0x4c>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	440b      	add	r3, r1
 8003424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003428:	e00a      	b.n	8003440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4908      	ldr	r1, [pc, #32]	@ (8003450 <__NVIC_SetPriority+0x50>)
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	3b04      	subs	r3, #4
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	440b      	add	r3, r1
 800343e:	761a      	strb	r2, [r3, #24]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	@ 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f1c3 0307 	rsb	r3, r3, #7
 800346e:	2b04      	cmp	r3, #4
 8003470:	bf28      	it	cs
 8003472:	2304      	movcs	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3304      	adds	r3, #4
 800347a:	2b06      	cmp	r3, #6
 800347c:	d902      	bls.n	8003484 <NVIC_EncodePriority+0x30>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3b03      	subs	r3, #3
 8003482:	e000      	b.n	8003486 <NVIC_EncodePriority+0x32>
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	f04f 32ff 	mov.w	r2, #4294967295
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	43d9      	mvns	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	4313      	orrs	r3, r2
         );
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034cc:	d301      	bcc.n	80034d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00f      	b.n	80034f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d2:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <SysTick_Config+0x40>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034da:	210f      	movs	r1, #15
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	f7ff ff8e 	bl	8003400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <SysTick_Config+0x40>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ea:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <SysTick_Config+0x40>)
 80034ec:	2207      	movs	r2, #7
 80034ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	e000e010 	.word	0xe000e010

08003500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff29 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003524:	f7ff ff40 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 8003528:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	6978      	ldr	r0, [r7, #20]
 8003530:	f7ff ff90 	bl	8003454 <NVIC_EncodePriority>
 8003534:	4602      	mov	r2, r0
 8003536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff5f 	bl	8003400 <__NVIC_SetPriority>
}
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff33 	bl	80033c4 <__NVIC_EnableIRQ>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff ffa4 	bl	80034bc <SysTick_Config>
 8003574:	4603      	mov	r3, r0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e014      	b.n	80035ba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	791b      	ldrb	r3, [r3, #4]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fbfb 	bl	8002d9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b2      	b.n	8003742 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	795b      	ldrb	r3, [r3, #5]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_DAC_Start_DMA+0x24>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e0ac      	b.n	8003742 <HAL_DAC_Start_DMA+0x17e>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2202      	movs	r2, #2
 80035f2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d129      	bne.n	800364e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4a53      	ldr	r2, [pc, #332]	@ (800374c <HAL_DAC_Start_DMA+0x188>)
 8003600:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4a52      	ldr	r2, [pc, #328]	@ (8003750 <HAL_DAC_Start_DMA+0x18c>)
 8003608:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	4a51      	ldr	r2, [pc, #324]	@ (8003754 <HAL_DAC_Start_DMA+0x190>)
 8003610:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003620:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_DAC_Start_DMA+0x6c>
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	2b04      	cmp	r3, #4
 800362c:	d005      	beq.n	800363a <HAL_DAC_Start_DMA+0x76>
 800362e:	e009      	b.n	8003644 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3308      	adds	r3, #8
 8003636:	61bb      	str	r3, [r7, #24]
        break;
 8003638:	e033      	b.n	80036a2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	61bb      	str	r3, [r7, #24]
        break;
 8003642:	e02e      	b.n	80036a2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3310      	adds	r3, #16
 800364a:	61bb      	str	r3, [r7, #24]
        break;
 800364c:	e029      	b.n	80036a2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4a41      	ldr	r2, [pc, #260]	@ (8003758 <HAL_DAC_Start_DMA+0x194>)
 8003654:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4a40      	ldr	r2, [pc, #256]	@ (800375c <HAL_DAC_Start_DMA+0x198>)
 800365c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4a3f      	ldr	r2, [pc, #252]	@ (8003760 <HAL_DAC_Start_DMA+0x19c>)
 8003664:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003674:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_DAC_Start_DMA+0xc0>
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	2b04      	cmp	r3, #4
 8003680:	d005      	beq.n	800368e <HAL_DAC_Start_DMA+0xca>
 8003682:	e009      	b.n	8003698 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3314      	adds	r3, #20
 800368a:	61bb      	str	r3, [r7, #24]
        break;
 800368c:	e009      	b.n	80036a2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3318      	adds	r3, #24
 8003694:	61bb      	str	r3, [r7, #24]
        break;
 8003696:	e004      	b.n	80036a2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	331c      	adds	r3, #28
 800369e:	61bb      	str	r3, [r7, #24]
        break;
 80036a0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6898      	ldr	r0, [r3, #8]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	f000 fba9 	bl	8003e18 <HAL_DMA_Start_IT>
 80036c6:	4603      	mov	r3, r0
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e010      	b.n	80036ee <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80036da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68d8      	ldr	r0, [r3, #12]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	f000 fb97 	bl	8003e18 <HAL_DMA_Start_IT>
 80036ea:	4603      	mov	r3, r0
 80036ec:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80036f4:	7ffb      	ldrb	r3, [r7, #31]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11c      	bne.n	8003734 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2201      	movs	r2, #1
 8003708:	409a      	lsls	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003712:	4b14      	ldr	r3, [pc, #80]	@ (8003764 <HAL_DAC_Start_DMA+0x1a0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	4a13      	ldr	r2, [pc, #76]	@ (8003768 <HAL_DAC_Start_DMA+0x1a4>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	3301      	adds	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003724:	e002      	b.n	800372c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3b01      	subs	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f9      	bne.n	8003726 <HAL_DAC_Start_DMA+0x162>
 8003732:	e005      	b.n	8003740 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003740:	7ffb      	ldrb	r3, [r7, #31]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	08003bb5 	.word	0x08003bb5
 8003750:	08003bd7 	.word	0x08003bd7
 8003754:	08003bf3 	.word	0x08003bf3
 8003758:	08003c5d 	.word	0x08003c5d
 800375c:	08003c7f 	.word	0x08003c7f
 8003760:	08003c9b 	.word	0x08003c9b
 8003764:	20000094 	.word	0x20000094
 8003768:	053e2d63 	.word	0x053e2d63

0800376c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e03e      	b.n	80037fe <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43da      	mvns	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	400a      	ands	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43da      	mvns	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	400a      	ands	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fba2 	bl	8003f0e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e00c      	b.n	80037f6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fb94 	bl	8003f0e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80037f4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	@ 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_DAC_ConfigChannel+0x1c>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e19e      	b.n	8003ba2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	795b      	ldrb	r3, [r3, #5]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_DAC_ConfigChannel+0x2c>
 800386c:	2302      	movs	r3, #2
 800386e:	e198      	b.n	8003ba2 <HAL_DAC_ConfigChannel+0x35e>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2202      	movs	r2, #2
 800387a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d17a      	bne.n	800397a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003884:	f7ff fd3e 	bl	8003304 <HAL_GetTick>
 8003888:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d13d      	bne.n	800390c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003890:	e018      	b.n	80038c4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003892:	f7ff fd37 	bl	8003304 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d911      	bls.n	80038c4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f043 0208 	orr.w	r2, r3, #8
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2203      	movs	r2, #3
 80038be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e16e      	b.n	8003ba2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1df      	bne.n	8003892 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40
 80038dc:	e020      	b.n	8003920 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038de:	f7ff fd11 	bl	8003304 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d90f      	bls.n	800390c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da0a      	bge.n	800390c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f043 0208 	orr.w	r2, r3, #8
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2203      	movs	r2, #3
 8003906:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e14a      	b.n	8003ba2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003912:	2b00      	cmp	r3, #0
 8003914:	dbe3      	blt.n	80038de <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	ea02 0103 	and.w	r1, r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	409a      	lsls	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	21ff      	movs	r1, #255	@ 0xff
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	ea02 0103 	and.w	r1, r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	409a      	lsls	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d11d      	bne.n	80039be <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	221f      	movs	r2, #31
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399a:	4013      	ands	r3, r2
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b2:	4313      	orrs	r3, r2
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2207      	movs	r2, #7
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d6:	4013      	ands	r3, r2
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
 80039e6:	e00f      	b.n	8003a08 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d102      	bne.n	80039f6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80039f0:	2301      	movs	r3, #1
 80039f2:	623b      	str	r3, [r7, #32]
 80039f4:	e008      	b.n	8003a08 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80039fe:	2301      	movs	r3, #1
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	e001      	b.n	8003a08 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	6a3a      	ldr	r2, [r7, #32]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	791b      	ldrb	r3, [r3, #4]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_DAC_ConfigChannel+0x1f8>
 8003a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a3a:	e000      	b.n	8003a3e <HAL_DAC_ConfigChannel+0x1fa>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a56:	4013      	ands	r3, r2
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	795b      	ldrb	r3, [r3, #5]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <HAL_DAC_ConfigChannel+0x224>
 8003a62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a66:	e000      	b.n	8003a6a <HAL_DAC_ConfigChannel+0x226>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d114      	bne.n	8003aaa <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003a80:	f001 fc06 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 8003a84:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4a48      	ldr	r2, [pc, #288]	@ (8003bac <HAL_DAC_ConfigChannel+0x368>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d904      	bls.n	8003a98 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a96:	e00f      	b.n	8003ab8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4a45      	ldr	r2, [pc, #276]	@ (8003bb0 <HAL_DAC_ConfigChannel+0x36c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d90a      	bls.n	8003ab6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa8:	e006      	b.n	8003ab8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab4:	e000      	b.n	8003ab8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003ab6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6819      	ldr	r1, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	400a      	ands	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b22:	4313      	orrs	r3, r2
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	22c0      	movs	r2, #192	@ 0xc0
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43da      	mvns	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	400a      	ands	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	ea02 0103 	and.w	r1, r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3728      	adds	r7, #40	@ 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	09896800 	.word	0x09896800
 8003bb0:	04c4b400 	.word	0x04c4b400

08003bb4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff fe1f 	bl	8003806 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	711a      	strb	r2, [r3, #4]
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7ff fe18 	bl	800381a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f043 0204 	orr.w	r2, r3, #4
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff fe0e 	bl	800382e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	711a      	strb	r2, [r3, #4]
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ffd8 	bl	8003c20 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	711a      	strb	r2, [r3, #4]
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff ffd1 	bl	8003c34 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff ffc7 	bl	8003c48 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	711a      	strb	r2, [r3, #4]
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e08d      	b.n	8003df6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b47      	ldr	r3, [pc, #284]	@ (8003e00 <HAL_DMA_Init+0x138>)
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d80f      	bhi.n	8003d06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b45      	ldr	r3, [pc, #276]	@ (8003e04 <HAL_DMA_Init+0x13c>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	4a45      	ldr	r2, [pc, #276]	@ (8003e08 <HAL_DMA_Init+0x140>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	009a      	lsls	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a42      	ldr	r2, [pc, #264]	@ (8003e0c <HAL_DMA_Init+0x144>)
 8003d02:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d04:	e00e      	b.n	8003d24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b40      	ldr	r3, [pc, #256]	@ (8003e10 <HAL_DMA_Init+0x148>)
 8003d0e:	4413      	add	r3, r2
 8003d10:	4a3d      	ldr	r2, [pc, #244]	@ (8003e08 <HAL_DMA_Init+0x140>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	009a      	lsls	r2, r3, #2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a3c      	ldr	r2, [pc, #240]	@ (8003e14 <HAL_DMA_Init+0x14c>)
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fa10 	bl	800419c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d84:	d102      	bne.n	8003d8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003da0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d010      	beq.n	8003dcc <HAL_DMA_Init+0x104>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d80c      	bhi.n	8003dcc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa30 	bl	8004218 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	e008      	b.n	8003dde <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40020407 	.word	0x40020407
 8003e04:	bffdfff8 	.word	0xbffdfff8
 8003e08:	cccccccd 	.word	0xcccccccd
 8003e0c:	40020000 	.word	0x40020000
 8003e10:	bffdfbf8 	.word	0xbffdfbf8
 8003e14:	40020400 	.word	0x40020400

08003e18 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_DMA_Start_IT+0x20>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e066      	b.n	8003f06 <HAL_DMA_Start_IT+0xee>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d155      	bne.n	8003ef8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f954 	bl	800411e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 020e 	orr.w	r2, r2, #14
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e00f      	b.n	8003eb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0204 	bic.w	r2, r2, #4
 8003e9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 020a 	orr.w	r2, r2, #10
 8003eae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ecc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ee4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e005      	b.n	8003f04 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
 8003f02:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d005      	beq.n	8003f32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
 8003f30:	e037      	b.n	8003fa2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 020e 	bic.w	r2, r2, #14
 8003f40:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f50:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	f003 021f 	and.w	r2, r3, #31
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f202 	lsl.w	r2, r1, r2
 8003f74:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f7e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00c      	beq.n	8003fa2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f96:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fa0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d026      	beq.n	800403a <HAL_DMA_IRQHandler+0x7a>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d021      	beq.n	800403a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0204 	bic.w	r2, r2, #4
 8004012:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	f003 021f 	and.w	r2, r3, #31
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	2104      	movs	r1, #4
 8004022:	fa01 f202 	lsl.w	r2, r1, r2
 8004026:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	2b00      	cmp	r3, #0
 800402e:	d071      	beq.n	8004114 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004038:	e06c      	b.n	8004114 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2202      	movs	r2, #2
 8004044:	409a      	lsls	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d02e      	beq.n	80040ac <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d029      	beq.n	80040ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 020a 	bic.w	r2, r2, #10
 8004074:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	f003 021f 	and.w	r2, r3, #31
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	2102      	movs	r1, #2
 800408c:	fa01 f202 	lsl.w	r2, r1, r2
 8004090:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d038      	beq.n	8004114 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040aa:	e033      	b.n	8004114 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2208      	movs	r2, #8
 80040b6:	409a      	lsls	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d02a      	beq.n	8004116 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d025      	beq.n	8004116 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 020e 	bic.w	r2, r2, #14
 80040d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f003 021f 	and.w	r2, r3, #31
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004114:	bf00      	nop
 8004116:	bf00      	nop
}
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004134:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	f003 021f 	and.w	r2, r3, #31
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	2101      	movs	r1, #1
 8004156:	fa01 f202 	lsl.w	r2, r1, r2
 800415a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b10      	cmp	r3, #16
 800416a:	d108      	bne.n	800417e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800417c:	e007      	b.n	800418e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	60da      	str	r2, [r3, #12]
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b16      	ldr	r3, [pc, #88]	@ (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d802      	bhi.n	80041b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041b0:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e001      	b.n	80041ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80041b6:	4b15      	ldr	r3, [pc, #84]	@ (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80041b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	3b08      	subs	r3, #8
 80041c6:	4a12      	ldr	r2, [pc, #72]	@ (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	009a      	lsls	r2, r3, #2
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80041e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2201      	movs	r2, #1
 80041f0:	409a      	lsls	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40020407 	.word	0x40020407
 8004208:	40020800 	.word	0x40020800
 800420c:	40020820 	.word	0x40020820
 8004210:	cccccccd 	.word	0xcccccccd
 8004214:	40020880 	.word	0x40020880

08004218 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	461a      	mov	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a08      	ldr	r2, [pc, #32]	@ (800425c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800423a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3b01      	subs	r3, #1
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	1000823f 	.word	0x1000823f
 800425c:	40020940 	.word	0x40020940

08004260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800426e:	e15a      	b.n	8004526 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2101      	movs	r1, #1
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 814c 	beq.w	8004520 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d005      	beq.n	80042a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800429c:	2b02      	cmp	r3, #2
 800429e:	d130      	bne.n	8004302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042d6:	2201      	movs	r2, #1
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	f003 0201 	and.w	r2, r3, #1
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b03      	cmp	r3, #3
 800430c:	d017      	beq.n	800433e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	2203      	movs	r2, #3
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d123      	bne.n	8004392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	220f      	movs	r2, #15
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	08da      	lsrs	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3208      	adds	r2, #8
 800438c:	6939      	ldr	r1, [r7, #16]
 800438e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	2203      	movs	r2, #3
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0203 	and.w	r2, r3, #3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80a6 	beq.w	8004520 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004544 <HAL_GPIO_Init+0x2e4>)
 80043d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004544 <HAL_GPIO_Init+0x2e4>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6613      	str	r3, [r2, #96]	@ 0x60
 80043e0:	4b58      	ldr	r3, [pc, #352]	@ (8004544 <HAL_GPIO_Init+0x2e4>)
 80043e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ec:	4a56      	ldr	r2, [pc, #344]	@ (8004548 <HAL_GPIO_Init+0x2e8>)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	3302      	adds	r3, #2
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	220f      	movs	r2, #15
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004416:	d01f      	beq.n	8004458 <HAL_GPIO_Init+0x1f8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a4c      	ldr	r2, [pc, #304]	@ (800454c <HAL_GPIO_Init+0x2ec>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d019      	beq.n	8004454 <HAL_GPIO_Init+0x1f4>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a4b      	ldr	r2, [pc, #300]	@ (8004550 <HAL_GPIO_Init+0x2f0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <HAL_GPIO_Init+0x1f0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a4a      	ldr	r2, [pc, #296]	@ (8004554 <HAL_GPIO_Init+0x2f4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00d      	beq.n	800444c <HAL_GPIO_Init+0x1ec>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a49      	ldr	r2, [pc, #292]	@ (8004558 <HAL_GPIO_Init+0x2f8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <HAL_GPIO_Init+0x1e8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a48      	ldr	r2, [pc, #288]	@ (800455c <HAL_GPIO_Init+0x2fc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_GPIO_Init+0x1e4>
 8004440:	2305      	movs	r3, #5
 8004442:	e00a      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004444:	2306      	movs	r3, #6
 8004446:	e008      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004448:	2304      	movs	r3, #4
 800444a:	e006      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 800444c:	2303      	movs	r3, #3
 800444e:	e004      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004450:	2302      	movs	r3, #2
 8004452:	e002      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004458:	2300      	movs	r3, #0
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	f002 0203 	and.w	r2, r2, #3
 8004460:	0092      	lsls	r2, r2, #2
 8004462:	4093      	lsls	r3, r2
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800446a:	4937      	ldr	r1, [pc, #220]	@ (8004548 <HAL_GPIO_Init+0x2e8>)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	3302      	adds	r3, #2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004478:	4b39      	ldr	r3, [pc, #228]	@ (8004560 <HAL_GPIO_Init+0x300>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	43db      	mvns	r3, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800449c:	4a30      	ldr	r2, [pc, #192]	@ (8004560 <HAL_GPIO_Init+0x300>)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044c6:	4a26      	ldr	r2, [pc, #152]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80044cc:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800451a:	4a11      	ldr	r2, [pc, #68]	@ (8004560 <HAL_GPIO_Init+0x300>)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3301      	adds	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	f47f ae9d 	bne.w	8004270 <HAL_GPIO_Init+0x10>
  }
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40021000 	.word	0x40021000
 8004548:	40010000 	.word	0x40010000
 800454c:	48000400 	.word	0x48000400
 8004550:	48000800 	.word	0x48000800
 8004554:	48000c00 	.word	0x48000c00
 8004558:	48001000 	.word	0x48001000
 800455c:	48001400 	.word	0x48001400
 8004560:	40010400 	.word	0x40010400

08004564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	887b      	ldrh	r3, [r7, #2]
 8004576:	4013      	ands	r3, r2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e001      	b.n	8004586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	807b      	strh	r3, [r7, #2]
 80045a0:	4613      	mov	r3, r2
 80045a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045a4:	787b      	ldrb	r3, [r7, #1]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045aa:	887a      	ldrh	r2, [r7, #2]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045b0:	e002      	b.n	80045b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045b2:	887a      	ldrh	r2, [r7, #2]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0bb      	b.n	8004752 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d101      	bne.n	80045ea <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0b3      	b.n	8004752 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d101      	bne.n	80045fa <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0ab      	b.n	8004752 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fa:	4b58      	ldr	r3, [pc, #352]	@ (800475c <HAL_OPAMP_Init+0x198>)
 80045fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fe:	4a57      	ldr	r2, [pc, #348]	@ (800475c <HAL_OPAMP_Init+0x198>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	6613      	str	r3, [r2, #96]	@ 0x60
 8004606:	4b55      	ldr	r3, [pc, #340]	@ (800475c <HAL_OPAMP_Init+0x198>)
 8004608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fe fc34 	bl	8002e94 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b40      	cmp	r3, #64	@ 0x40
 8004632:	d003      	beq.n	800463c <HAL_OPAMP_Init+0x78>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b60      	cmp	r3, #96	@ 0x60
 800463a:	d133      	bne.n	80046a4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 0110 	bic.w	r1, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b41      	ldr	r3, [pc, #260]	@ (8004760 <HAL_OPAMP_Init+0x19c>)
 800465a:	4013      	ands	r3, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6851      	ldr	r1, [r2, #4]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	4311      	orrs	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6912      	ldr	r2, [r2, #16]
 800466a:	430a      	orrs	r2, r1
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	7d09      	ldrb	r1, [r1, #20]
 8004670:	2901      	cmp	r1, #1
 8004672:	d102      	bne.n	800467a <HAL_OPAMP_Init+0xb6>
 8004674:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004678:	e000      	b.n	800467c <HAL_OPAMP_Init+0xb8>
 800467a:	2100      	movs	r1, #0
 800467c:	4311      	orrs	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004682:	4311      	orrs	r1, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800468e:	04d2      	lsls	r2, r2, #19
 8004690:	4311      	orrs	r1, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004696:	0612      	lsls	r2, r2, #24
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	430b      	orrs	r3, r1
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e035      	b.n	8004710 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 0110 	bic.w	r1, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b27      	ldr	r3, [pc, #156]	@ (8004760 <HAL_OPAMP_Init+0x19c>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6851      	ldr	r1, [r2, #4]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6892      	ldr	r2, [r2, #8]
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68d2      	ldr	r2, [r2, #12]
 80046d2:	4311      	orrs	r1, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6912      	ldr	r2, [r2, #16]
 80046d8:	430a      	orrs	r2, r1
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	7d09      	ldrb	r1, [r1, #20]
 80046de:	2901      	cmp	r1, #1
 80046e0:	d102      	bne.n	80046e8 <HAL_OPAMP_Init+0x124>
 80046e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80046e6:	e000      	b.n	80046ea <HAL_OPAMP_Init+0x126>
 80046e8:	2100      	movs	r1, #0
 80046ea:	4311      	orrs	r1, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046f0:	4311      	orrs	r1, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046fc:	04d2      	lsls	r2, r2, #19
 80046fe:	4311      	orrs	r1, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004704:	0612      	lsls	r2, r2, #24
 8004706:	4311      	orrs	r1, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	430b      	orrs	r3, r1
 800470e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	db10      	blt.n	800473c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	e0003e11 	.word	0xe0003e11

08004764 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e01d      	b.n	80047b8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b05      	cmp	r3, #5
 8004786:	d102      	bne.n	800478e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
 800478c:	e014      	b.n	80047b8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10c      	bne.n	80047b4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0201 	orr.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2204      	movs	r2, #4
 80047ae:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80047b2:	e001      	b.n	80047b8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d141      	bne.n	800485a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e2:	d131      	bne.n	8004848 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047e4:	4b47      	ldr	r3, [pc, #284]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ea:	4a46      	ldr	r2, [pc, #280]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f4:	4b43      	ldr	r3, [pc, #268]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047fc:	4a41      	ldr	r2, [pc, #260]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004804:	4b40      	ldr	r3, [pc, #256]	@ (8004908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2232      	movs	r2, #50	@ 0x32
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	4a3f      	ldr	r2, [pc, #252]	@ (800490c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	0c9b      	lsrs	r3, r3, #18
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481a:	e002      	b.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004822:	4b38      	ldr	r3, [pc, #224]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800482e:	d102      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f2      	bne.n	800481c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004836:	4b33      	ldr	r3, [pc, #204]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004842:	d158      	bne.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e057      	b.n	80048f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004848:	4b2e      	ldr	r3, [pc, #184]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800484e:	4a2d      	ldr	r2, [pc, #180]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004858:	e04d      	b.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004860:	d141      	bne.n	80048e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004862:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486e:	d131      	bne.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004870:	4b24      	ldr	r3, [pc, #144]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004876:	4a23      	ldr	r2, [pc, #140]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004880:	4b20      	ldr	r3, [pc, #128]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004888:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800488e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004890:	4b1d      	ldr	r3, [pc, #116]	@ (8004908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2232      	movs	r2, #50	@ 0x32
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	4a1c      	ldr	r2, [pc, #112]	@ (800490c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	0c9b      	lsrs	r3, r3, #18
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a6:	e002      	b.n	80048ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ae:	4b15      	ldr	r3, [pc, #84]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ba:	d102      	bne.n	80048c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f2      	bne.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048c2:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ce:	d112      	bne.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e011      	b.n	80048f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048da:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048e4:	e007      	b.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048e6:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048ee:	4a05      	ldr	r2, [pc, #20]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40007000 	.word	0x40007000
 8004908:	20000094 	.word	0x20000094
 800490c:	431bde83 	.word	0x431bde83

08004910 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004914:	4b05      	ldr	r3, [pc, #20]	@ (800492c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a04      	ldr	r2, [pc, #16]	@ (800492c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800491a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800491e:	6093      	str	r3, [r2, #8]
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40007000 	.word	0x40007000

08004930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e2fe      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d075      	beq.n	8004a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800494e:	4b97      	ldr	r3, [pc, #604]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004958:	4b94      	ldr	r3, [pc, #592]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b0c      	cmp	r3, #12
 8004966:	d102      	bne.n	800496e <HAL_RCC_OscConfig+0x3e>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2b03      	cmp	r3, #3
 800496c:	d002      	beq.n	8004974 <HAL_RCC_OscConfig+0x44>
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d10b      	bne.n	800498c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	4b8d      	ldr	r3, [pc, #564]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05b      	beq.n	8004a38 <HAL_RCC_OscConfig+0x108>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d157      	bne.n	8004a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e2d9      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004994:	d106      	bne.n	80049a4 <HAL_RCC_OscConfig+0x74>
 8004996:	4b85      	ldr	r3, [pc, #532]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a84      	ldr	r2, [pc, #528]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e01d      	b.n	80049e0 <HAL_RCC_OscConfig+0xb0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x98>
 80049ae:	4b7f      	ldr	r3, [pc, #508]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b7c      	ldr	r3, [pc, #496]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a7b      	ldr	r2, [pc, #492]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0xb0>
 80049c8:	4b78      	ldr	r3, [pc, #480]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a77      	ldr	r2, [pc, #476]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b75      	ldr	r3, [pc, #468]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a74      	ldr	r2, [pc, #464]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fe fc8c 	bl	8003304 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fe fc88 	bl	8003304 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e29e      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a02:	4b6a      	ldr	r3, [pc, #424]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xc0>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fe fc78 	bl	8003304 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fe fc74 	bl	8003304 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	@ 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e28a      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a2a:	4b60      	ldr	r3, [pc, #384]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0xe8>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d075      	beq.n	8004b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a46:	4b59      	ldr	r3, [pc, #356]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a50:	4b56      	ldr	r3, [pc, #344]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b0c      	cmp	r3, #12
 8004a5e:	d102      	bne.n	8004a66 <HAL_RCC_OscConfig+0x136>
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d002      	beq.n	8004a6c <HAL_RCC_OscConfig+0x13c>
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d11f      	bne.n	8004aac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_OscConfig+0x154>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e25d      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a84:	4b49      	ldr	r3, [pc, #292]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	061b      	lsls	r3, r3, #24
 8004a92:	4946      	ldr	r1, [pc, #280]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a98:	4b45      	ldr	r3, [pc, #276]	@ (8004bb0 <HAL_RCC_OscConfig+0x280>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe fbe5 	bl	800326c <HAL_InitTick>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d043      	beq.n	8004b30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e249      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fe fc20 	bl	8003304 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac8:	f7fe fc1c 	bl	8003304 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e232      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ada:	4b34      	ldr	r3, [pc, #208]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae6:	4b31      	ldr	r3, [pc, #196]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	061b      	lsls	r3, r3, #24
 8004af4:	492d      	ldr	r1, [pc, #180]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
 8004afa:	e01a      	b.n	8004b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afc:	4b2b      	ldr	r3, [pc, #172]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2a      	ldr	r2, [pc, #168]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004b02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fe fbfc 	bl	8003304 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b10:	f7fe fbf8 	bl	8003304 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e20e      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b22:	4b22      	ldr	r3, [pc, #136]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x1e0>
 8004b2e:	e000      	b.n	8004b32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d041      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b46:	4b19      	ldr	r3, [pc, #100]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b4c:	4a17      	ldr	r2, [pc, #92]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b56:	f7fe fbd5 	bl	8003304 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5e:	f7fe fbd1 	bl	8003304 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1e7      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b70:	4b0e      	ldr	r3, [pc, #56]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0ef      	beq.n	8004b5e <HAL_RCC_OscConfig+0x22e>
 8004b7e:	e020      	b.n	8004bc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b80:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b86:	4a09      	ldr	r2, [pc, #36]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fe fbb8 	bl	8003304 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b96:	e00d      	b.n	8004bb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b98:	f7fe fbb4 	bl	8003304 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d906      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e1ca      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	20000098 	.word	0x20000098
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ea      	bne.n	8004b98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a6 	beq.w	8004d1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bd4:	4b84      	ldr	r3, [pc, #528]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_OscConfig+0x2b4>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x2b6>
 8004be4:	2300      	movs	r3, #0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00d      	beq.n	8004c06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	4b7f      	ldr	r3, [pc, #508]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bee:	4a7e      	ldr	r2, [pc, #504]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c02:	2301      	movs	r3, #1
 8004c04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c06:	4b79      	ldr	r3, [pc, #484]	@ (8004dec <HAL_RCC_OscConfig+0x4bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d118      	bne.n	8004c44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c12:	4b76      	ldr	r3, [pc, #472]	@ (8004dec <HAL_RCC_OscConfig+0x4bc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a75      	ldr	r2, [pc, #468]	@ (8004dec <HAL_RCC_OscConfig+0x4bc>)
 8004c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1e:	f7fe fb71 	bl	8003304 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c26:	f7fe fb6d 	bl	8003304 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e183      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c38:	4b6c      	ldr	r3, [pc, #432]	@ (8004dec <HAL_RCC_OscConfig+0x4bc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d108      	bne.n	8004c5e <HAL_RCC_OscConfig+0x32e>
 8004c4c:	4b66      	ldr	r3, [pc, #408]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c52:	4a65      	ldr	r2, [pc, #404]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c5c:	e024      	b.n	8004ca8 <HAL_RCC_OscConfig+0x378>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d110      	bne.n	8004c88 <HAL_RCC_OscConfig+0x358>
 8004c66:	4b60      	ldr	r3, [pc, #384]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004c6e:	f043 0304 	orr.w	r3, r3, #4
 8004c72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c76:	4b5c      	ldr	r3, [pc, #368]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c86:	e00f      	b.n	8004ca8 <HAL_RCC_OscConfig+0x378>
 8004c88:	4b57      	ldr	r3, [pc, #348]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	4a56      	ldr	r2, [pc, #344]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c98:	4b53      	ldr	r3, [pc, #332]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9e:	4a52      	ldr	r2, [pc, #328]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fe fb28 	bl	8003304 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fe fb24 	bl	8003304 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e138      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cce:	4b46      	ldr	r3, [pc, #280]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ed      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x388>
 8004cdc:	e015      	b.n	8004d0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cde:	f7fe fb11 	bl	8003304 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fe fb0d 	bl	8003304 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e121      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1ed      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d0a:	7ffb      	ldrb	r3, [r7, #31]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b35      	ldr	r3, [pc, #212]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d14:	4a34      	ldr	r2, [pc, #208]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d1a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d03c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d30:	4b2d      	ldr	r3, [pc, #180]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d36:	4a2c      	ldr	r2, [pc, #176]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fe fae0 	bl	8003304 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d48:	f7fe fadc 	bl	8003304 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0f2      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d5a:	4b23      	ldr	r3, [pc, #140]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ef      	beq.n	8004d48 <HAL_RCC_OscConfig+0x418>
 8004d68:	e01b      	b.n	8004da2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d70:	4a1d      	ldr	r2, [pc, #116]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fe fac3 	bl	8003304 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d82:	f7fe fabf 	bl	8003304 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0d5      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d94:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ef      	bne.n	8004d82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 80c9 	beq.w	8004f3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dac:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 030c 	and.w	r3, r3, #12
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	f000 8083 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d15e      	bne.n	8004e80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc2:	4b09      	ldr	r3, [pc, #36]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a08      	ldr	r2, [pc, #32]	@ (8004de8 <HAL_RCC_OscConfig+0x4b8>)
 8004dc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dce:	f7fe fa99 	bl	8003304 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd4:	e00c      	b.n	8004df0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd6:	f7fe fa95 	bl	8003304 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d905      	bls.n	8004df0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0ab      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df0:	4b55      	ldr	r3, [pc, #340]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ec      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfc:	4b52      	ldr	r3, [pc, #328]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	4b52      	ldr	r3, [pc, #328]	@ (8004f4c <HAL_RCC_OscConfig+0x61c>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6a11      	ldr	r1, [r2, #32]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e0c:	3a01      	subs	r2, #1
 8004e0e:	0112      	lsls	r2, r2, #4
 8004e10:	4311      	orrs	r1, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e16:	0212      	lsls	r2, r2, #8
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e1e:	0852      	lsrs	r2, r2, #1
 8004e20:	3a01      	subs	r2, #1
 8004e22:	0552      	lsls	r2, r2, #21
 8004e24:	4311      	orrs	r1, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e2a:	0852      	lsrs	r2, r2, #1
 8004e2c:	3a01      	subs	r2, #1
 8004e2e:	0652      	lsls	r2, r2, #25
 8004e30:	4311      	orrs	r1, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e36:	06d2      	lsls	r2, r2, #27
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	4943      	ldr	r1, [pc, #268]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e40:	4b41      	ldr	r3, [pc, #260]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a40      	ldr	r2, [pc, #256]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a3d      	ldr	r2, [pc, #244]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fe fa54 	bl	8003304 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fe fa50 	bl	8003304 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e066      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e72:	4b35      	ldr	r3, [pc, #212]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x530>
 8004e7e:	e05e      	b.n	8004f3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e80:	4b31      	ldr	r3, [pc, #196]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a30      	ldr	r2, [pc, #192]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fe fa3a 	bl	8003304 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fe fa36 	bl	8003304 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e04c      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea6:	4b28      	ldr	r3, [pc, #160]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004eb2:	4b25      	ldr	r3, [pc, #148]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	4924      	ldr	r1, [pc, #144]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004eb8:	4b25      	ldr	r3, [pc, #148]	@ (8004f50 <HAL_RCC_OscConfig+0x620>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	60cb      	str	r3, [r1, #12]
 8004ebe:	e03e      	b.n	8004f3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e039      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8004f48 <HAL_RCC_OscConfig+0x618>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 0203 	and.w	r2, r3, #3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d12c      	bne.n	8004f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	3b01      	subs	r3, #1
 8004eec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d123      	bne.n	8004f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d11b      	bne.n	8004f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d113      	bne.n	8004f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d109      	bne.n	8004f3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	3b01      	subs	r3, #1
 8004f34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	019f800c 	.word	0x019f800c
 8004f50:	feeefffc 	.word	0xfeeefffc

08004f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e11e      	b.n	80051aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f6c:	4b91      	ldr	r3, [pc, #580]	@ (80051b4 <HAL_RCC_ClockConfig+0x260>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d910      	bls.n	8004f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	4b8e      	ldr	r3, [pc, #568]	@ (80051b4 <HAL_RCC_ClockConfig+0x260>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f023 020f 	bic.w	r2, r3, #15
 8004f82:	498c      	ldr	r1, [pc, #560]	@ (80051b4 <HAL_RCC_ClockConfig+0x260>)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80051b4 <HAL_RCC_ClockConfig+0x260>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e106      	b.n	80051aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d073      	beq.n	8005090 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d129      	bne.n	8005004 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb0:	4b81      	ldr	r3, [pc, #516]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0f4      	b.n	80051aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fc0:	f000 f972 	bl	80052a8 <RCC_GetSysClockFreqFromPLLSource>
 8004fc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4a7c      	ldr	r2, [pc, #496]	@ (80051bc <HAL_RCC_ClockConfig+0x268>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d93f      	bls.n	800504e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fce:	4b7a      	ldr	r3, [pc, #488]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d033      	beq.n	800504e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d12f      	bne.n	800504e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fee:	4b72      	ldr	r3, [pc, #456]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ff6:	4a70      	ldr	r2, [pc, #448]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 8004ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e024      	b.n	800504e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d107      	bne.n	800501c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500c:	4b6a      	ldr	r3, [pc, #424]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0c6      	b.n	80051aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800501c:	4b66      	ldr	r3, [pc, #408]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0be      	b.n	80051aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800502c:	f000 f8ce 	bl	80051cc <HAL_RCC_GetSysClockFreq>
 8005030:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4a61      	ldr	r2, [pc, #388]	@ (80051bc <HAL_RCC_ClockConfig+0x268>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d909      	bls.n	800504e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800503a:	4b5f      	ldr	r3, [pc, #380]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005042:	4a5d      	ldr	r2, [pc, #372]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 8005044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005048:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800504a:	2380      	movs	r3, #128	@ 0x80
 800504c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800504e:	4b5a      	ldr	r3, [pc, #360]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f023 0203 	bic.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4957      	ldr	r1, [pc, #348]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 800505c:	4313      	orrs	r3, r2
 800505e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005060:	f7fe f950 	bl	8003304 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	e00a      	b.n	800507e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005068:	f7fe f94c 	bl	8003304 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e095      	b.n	80051aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507e:	4b4e      	ldr	r3, [pc, #312]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 020c 	and.w	r2, r3, #12
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	429a      	cmp	r2, r3
 800508e:	d1eb      	bne.n	8005068 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d023      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a8:	4b43      	ldr	r3, [pc, #268]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4a42      	ldr	r2, [pc, #264]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 80050ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050c0:	4b3d      	ldr	r3, [pc, #244]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050c8:	4a3b      	ldr	r2, [pc, #236]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 80050ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d0:	4b39      	ldr	r3, [pc, #228]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4936      	ldr	r1, [pc, #216]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b80      	cmp	r3, #128	@ 0x80
 80050e8:	d105      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050ea:	4b33      	ldr	r3, [pc, #204]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	4a32      	ldr	r2, [pc, #200]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 80050f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050f6:	4b2f      	ldr	r3, [pc, #188]	@ (80051b4 <HAL_RCC_ClockConfig+0x260>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d21d      	bcs.n	8005140 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005104:	4b2b      	ldr	r3, [pc, #172]	@ (80051b4 <HAL_RCC_ClockConfig+0x260>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f023 020f 	bic.w	r2, r3, #15
 800510c:	4929      	ldr	r1, [pc, #164]	@ (80051b4 <HAL_RCC_ClockConfig+0x260>)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	4313      	orrs	r3, r2
 8005112:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005114:	f7fe f8f6 	bl	8003304 <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511a:	e00a      	b.n	8005132 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511c:	f7fe f8f2 	bl	8003304 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e03b      	b.n	80051aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b20      	ldr	r3, [pc, #128]	@ (80051b4 <HAL_RCC_ClockConfig+0x260>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d1ed      	bne.n	800511c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800514c:	4b1a      	ldr	r3, [pc, #104]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4917      	ldr	r1, [pc, #92]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800516a:	4b13      	ldr	r3, [pc, #76]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	490f      	ldr	r1, [pc, #60]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800517e:	f000 f825 	bl	80051cc <HAL_RCC_GetSysClockFreq>
 8005182:	4602      	mov	r2, r0
 8005184:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <HAL_RCC_ClockConfig+0x264>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	490c      	ldr	r1, [pc, #48]	@ (80051c0 <HAL_RCC_ClockConfig+0x26c>)
 8005190:	5ccb      	ldrb	r3, [r1, r3]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	4a0a      	ldr	r2, [pc, #40]	@ (80051c4 <HAL_RCC_ClockConfig+0x270>)
 800519c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800519e:	4b0a      	ldr	r3, [pc, #40]	@ (80051c8 <HAL_RCC_ClockConfig+0x274>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe f862 	bl	800326c <HAL_InitTick>
 80051a8:	4603      	mov	r3, r0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40022000 	.word	0x40022000
 80051b8:	40021000 	.word	0x40021000
 80051bc:	04c4b400 	.word	0x04c4b400
 80051c0:	080090fc 	.word	0x080090fc
 80051c4:	20000094 	.word	0x20000094
 80051c8:	20000098 	.word	0x20000098

080051cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d102      	bne.n	80051e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051de:	4b2a      	ldr	r3, [pc, #168]	@ (8005288 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	e047      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051e4:	4b27      	ldr	r3, [pc, #156]	@ (8005284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 030c 	and.w	r3, r3, #12
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d102      	bne.n	80051f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051f0:	4b26      	ldr	r3, [pc, #152]	@ (800528c <HAL_RCC_GetSysClockFreq+0xc0>)
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	e03e      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051f6:	4b23      	ldr	r3, [pc, #140]	@ (8005284 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	d136      	bne.n	8005270 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005202:	4b20      	ldr	r3, [pc, #128]	@ (8005284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800520c:	4b1d      	ldr	r3, [pc, #116]	@ (8005284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	3301      	adds	r3, #1
 8005218:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d10c      	bne.n	800523a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005220:	4a1a      	ldr	r2, [pc, #104]	@ (800528c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	4a16      	ldr	r2, [pc, #88]	@ (8005284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800522a:	68d2      	ldr	r2, [r2, #12]
 800522c:	0a12      	lsrs	r2, r2, #8
 800522e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	617b      	str	r3, [r7, #20]
      break;
 8005238:	e00c      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800523a:	4a13      	ldr	r2, [pc, #76]	@ (8005288 <HAL_RCC_GetSysClockFreq+0xbc>)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005242:	4a10      	ldr	r2, [pc, #64]	@ (8005284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005244:	68d2      	ldr	r2, [r2, #12]
 8005246:	0a12      	lsrs	r2, r2, #8
 8005248:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800524c:	fb02 f303 	mul.w	r3, r2, r3
 8005250:	617b      	str	r3, [r7, #20]
      break;
 8005252:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005254:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	0e5b      	lsrs	r3, r3, #25
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	3301      	adds	r3, #1
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e001      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005274:	693b      	ldr	r3, [r7, #16]
}
 8005276:	4618      	mov	r0, r3
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000
 8005288:	00f42400 	.word	0x00f42400
 800528c:	017d7840 	.word	0x017d7840

08005290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005294:	4b03      	ldr	r3, [pc, #12]	@ (80052a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005296:	681b      	ldr	r3, [r3, #0]
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20000094 	.word	0x20000094

080052a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	3301      	adds	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d10c      	bne.n	80052e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052cc:	4a17      	ldr	r2, [pc, #92]	@ (800532c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	4a14      	ldr	r2, [pc, #80]	@ (8005328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052d6:	68d2      	ldr	r2, [r2, #12]
 80052d8:	0a12      	lsrs	r2, r2, #8
 80052da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	617b      	str	r3, [r7, #20]
    break;
 80052e4:	e00c      	b.n	8005300 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e6:	4a12      	ldr	r2, [pc, #72]	@ (8005330 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052f0:	68d2      	ldr	r2, [r2, #12]
 80052f2:	0a12      	lsrs	r2, r2, #8
 80052f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]
    break;
 80052fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005300:	4b09      	ldr	r3, [pc, #36]	@ (8005328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	0e5b      	lsrs	r3, r3, #25
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	3301      	adds	r3, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800531a:	687b      	ldr	r3, [r7, #4]
}
 800531c:	4618      	mov	r0, r3
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40021000 	.word	0x40021000
 800532c:	017d7840 	.word	0x017d7840
 8005330:	00f42400 	.word	0x00f42400

08005334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e09d      	b.n	8005482 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d108      	bne.n	8005360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005356:	d009      	beq.n	800536c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	61da      	str	r2, [r3, #28]
 800535e:	e005      	b.n	800536c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fd fdd8 	bl	8002f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053ac:	d902      	bls.n	80053b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e002      	b.n	80053ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053c2:	d007      	beq.n	80053d4 <HAL_SPI_Init+0xa0>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005416:	ea42 0103 	orr.w	r1, r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	0c1b      	lsrs	r3, r3, #16
 8005430:	f003 0204 	and.w	r2, r3, #4
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005450:	ea42 0103 	orr.w	r1, r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005470:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b088      	sub	sp, #32
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	603b      	str	r3, [r7, #0]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_SPI_Transmit+0x22>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e15f      	b.n	800576c <HAL_SPI_Transmit+0x2e2>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054b4:	f7fd ff26 	bl	8003304 <HAL_GetTick>
 80054b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d002      	beq.n	80054d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
 80054cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ce:	e148      	b.n	8005762 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <HAL_SPI_Transmit+0x52>
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d102      	bne.n	80054e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054e0:	e13f      	b.n	8005762 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2203      	movs	r2, #3
 80054e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800552c:	d10f      	bne.n	800554e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800553c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800554c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005558:	2b40      	cmp	r3, #64	@ 0x40
 800555a:	d007      	beq.n	800556c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800556a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005574:	d94f      	bls.n	8005616 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_SPI_Transmit+0xfa>
 800557e:	8afb      	ldrh	r3, [r7, #22]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d142      	bne.n	800560a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	881a      	ldrh	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055a8:	e02f      	b.n	800560a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d112      	bne.n	80055de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055bc:	881a      	ldrh	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c8:	1c9a      	adds	r2, r3, #2
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055dc:	e015      	b.n	800560a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055de:	f7fd fe91 	bl	8003304 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d803      	bhi.n	80055f6 <HAL_SPI_Transmit+0x16c>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f4:	d102      	bne.n	80055fc <HAL_SPI_Transmit+0x172>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005608:	e0ab      	b.n	8005762 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ca      	bne.n	80055aa <HAL_SPI_Transmit+0x120>
 8005614:	e080      	b.n	8005718 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Transmit+0x19a>
 800561e:	8afb      	ldrh	r3, [r7, #22]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d174      	bne.n	800570e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d912      	bls.n	8005654 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005632:	881a      	ldrh	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563e:	1c9a      	adds	r2, r3, #2
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b02      	subs	r3, #2
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005652:	e05c      	b.n	800570e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800567a:	e048      	b.n	800570e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d12b      	bne.n	80056e2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d912      	bls.n	80056ba <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	881a      	ldrh	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b02      	subs	r3, #2
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056b8:	e029      	b.n	800570e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	7812      	ldrb	r2, [r2, #0]
 80056c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056e0:	e015      	b.n	800570e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056e2:	f7fd fe0f 	bl	8003304 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d803      	bhi.n	80056fa <HAL_SPI_Transmit+0x270>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d102      	bne.n	8005700 <HAL_SPI_Transmit+0x276>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800570c:	e029      	b.n	8005762 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1b1      	bne.n	800567c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f947 	bl	80059b0 <SPI_EndRxTxTransaction>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e003      	b.n	8005762 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800576a:	7ffb      	ldrb	r3, [r7, #31]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005784:	f7fd fdbe 	bl	8003304 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	4413      	add	r3, r2
 8005792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005794:	f7fd fdb6 	bl	8003304 <HAL_GetTick>
 8005798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800579a:	4b39      	ldr	r3, [pc, #228]	@ (8005880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	015b      	lsls	r3, r3, #5
 80057a0:	0d1b      	lsrs	r3, r3, #20
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057aa:	e054      	b.n	8005856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d050      	beq.n	8005856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057b4:	f7fd fda6 	bl	8003304 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d902      	bls.n	80057ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d13d      	bne.n	8005846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057e2:	d111      	bne.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ec:	d004      	beq.n	80057f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f6:	d107      	bne.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005810:	d10f      	bne.n	8005832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e017      	b.n	8005876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	3b01      	subs	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4013      	ands	r3, r2
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	bf0c      	ite	eq
 8005866:	2301      	moveq	r3, #1
 8005868:	2300      	movne	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	429a      	cmp	r2, r3
 8005872:	d19b      	bne.n	80057ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000094 	.word	0x20000094

08005884 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	@ 0x28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005896:	f7fd fd35 	bl	8003304 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	4413      	add	r3, r2
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80058a6:	f7fd fd2d 	bl	8003304 <HAL_GetTick>
 80058aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058b4:	4b3d      	ldr	r3, [pc, #244]	@ (80059ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	00da      	lsls	r2, r3, #3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	0d1b      	lsrs	r3, r3, #20
 80058c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80058cc:	e060      	b.n	8005990 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80058d4:	d107      	bne.n	80058e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d050      	beq.n	8005990 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058ee:	f7fd fd09 	bl	8003304 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d902      	bls.n	8005904 <SPI_WaitFifoStateUntilTimeout+0x80>
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d13d      	bne.n	8005980 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005912:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800591c:	d111      	bne.n	8005942 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005926:	d004      	beq.n	8005932 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005930:	d107      	bne.n	8005942 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005940:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594a:	d10f      	bne.n	800596c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800596a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e010      	b.n	80059a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	3b01      	subs	r3, #1
 800598e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4013      	ands	r3, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d196      	bne.n	80058ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3728      	adds	r7, #40	@ 0x28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000094 	.word	0x20000094

080059b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ff5b 	bl	8005884 <SPI_WaitFifoStateUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e027      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2200      	movs	r2, #0
 80059ec:	2180      	movs	r1, #128	@ 0x80
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff fec0 	bl	8005774 <SPI_WaitFlagStateUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e014      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7ff ff34 	bl	8005884 <SPI_WaitFifoStateUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e000      	b.n	8005a34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e049      	b.n	8005ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fd fb1e 	bl	80030a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f000 fb18 	bl	80060b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d001      	beq.n	8005b04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e04c      	b.n	8005b9e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a26      	ldr	r2, [pc, #152]	@ (8005bac <HAL_TIM_Base_Start+0xc0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d022      	beq.n	8005b5c <HAL_TIM_Base_Start+0x70>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1e:	d01d      	beq.n	8005b5c <HAL_TIM_Base_Start+0x70>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a22      	ldr	r2, [pc, #136]	@ (8005bb0 <HAL_TIM_Base_Start+0xc4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d018      	beq.n	8005b5c <HAL_TIM_Base_Start+0x70>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <HAL_TIM_Base_Start+0xc8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <HAL_TIM_Base_Start+0x70>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb8 <HAL_TIM_Base_Start+0xcc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00e      	beq.n	8005b5c <HAL_TIM_Base_Start+0x70>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1e      	ldr	r2, [pc, #120]	@ (8005bbc <HAL_TIM_Base_Start+0xd0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_TIM_Base_Start+0x70>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <HAL_TIM_Base_Start+0xd4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <HAL_TIM_Base_Start+0x70>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc4 <HAL_TIM_Base_Start+0xd8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d115      	bne.n	8005b88 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	4b19      	ldr	r3, [pc, #100]	@ (8005bc8 <HAL_TIM_Base_Start+0xdc>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b06      	cmp	r3, #6
 8005b6c:	d015      	beq.n	8005b9a <HAL_TIM_Base_Start+0xae>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b74:	d011      	beq.n	8005b9a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0201 	orr.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b86:	e008      	b.n	8005b9a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	e000      	b.n	8005b9c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40013400 	.word	0x40013400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40015000 	.word	0x40015000
 8005bc8:	00010007 	.word	0x00010007

08005bcc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6a1a      	ldr	r2, [r3, #32]
 8005bda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10f      	bne.n	8005c04 <HAL_TIM_Base_Stop+0x38>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6a1a      	ldr	r2, [r3, #32]
 8005bea:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d107      	bne.n	8005c04 <HAL_TIM_Base_Stop+0x38>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e097      	b.n	8005d5e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fd f9ea 	bl	800301c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005c5e:	f023 0307 	bic.w	r3, r3, #7
 8005c62:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f000 fa1e 	bl	80060b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
 8005ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	4313      	orrs	r3, r2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005cba:	f023 030c 	bic.w	r3, r3, #12
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	011a      	lsls	r2, r3, #4
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	031b      	lsls	r3, r3, #12
 8005cea:	4313      	orrs	r3, r2
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005cf8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d00:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d76:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d86:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d8e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d110      	bne.n	8005db8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d102      	bne.n	8005da2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d9c:	7b7b      	ldrb	r3, [r7, #13]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d001      	beq.n	8005da6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e069      	b.n	8005e7a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2202      	movs	r2, #2
 8005db2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db6:	e031      	b.n	8005e1c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d110      	bne.n	8005de0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d102      	bne.n	8005dca <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dc4:	7b3b      	ldrb	r3, [r7, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d001      	beq.n	8005dce <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e055      	b.n	8005e7a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dde:	e01d      	b.n	8005e1c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d108      	bne.n	8005df8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d105      	bne.n	8005df8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dec:	7b7b      	ldrb	r3, [r7, #13]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d102      	bne.n	8005df8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005df2:	7b3b      	ldrb	r3, [r7, #12]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d001      	beq.n	8005dfc <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e03e      	b.n	8005e7a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_TIM_Encoder_Start+0xc4>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d008      	beq.n	8005e3a <HAL_TIM_Encoder_Start+0xd4>
 8005e28:	e00f      	b.n	8005e4a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	2100      	movs	r1, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fa8c 	bl	8006350 <TIM_CCxChannelCmd>
      break;
 8005e38:	e016      	b.n	8005e68 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	2104      	movs	r1, #4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fa84 	bl	8006350 <TIM_CCxChannelCmd>
      break;
 8005e48:	e00e      	b.n	8005e68 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	2100      	movs	r1, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fa7c 	bl	8006350 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	2104      	movs	r1, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fa75 	bl	8006350 <TIM_CCxChannelCmd>
      break;
 8005e66:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e0f6      	b.n	800608e <HAL_TIM_ConfigClockSource+0x20a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005ebe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a6f      	ldr	r2, [pc, #444]	@ (8006098 <HAL_TIM_ConfigClockSource+0x214>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	f000 80c1 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005ee0:	4a6d      	ldr	r2, [pc, #436]	@ (8006098 <HAL_TIM_ConfigClockSource+0x214>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	f200 80c6 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ee8:	4a6c      	ldr	r2, [pc, #432]	@ (800609c <HAL_TIM_ConfigClockSource+0x218>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	f000 80b9 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800609c <HAL_TIM_ConfigClockSource+0x218>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	f200 80be 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ef8:	4a69      	ldr	r2, [pc, #420]	@ (80060a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	f000 80b1 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005f00:	4a67      	ldr	r2, [pc, #412]	@ (80060a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	f200 80b6 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f08:	4a66      	ldr	r2, [pc, #408]	@ (80060a4 <HAL_TIM_ConfigClockSource+0x220>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	f000 80a9 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005f10:	4a64      	ldr	r2, [pc, #400]	@ (80060a4 <HAL_TIM_ConfigClockSource+0x220>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f200 80ae 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f18:	4a63      	ldr	r2, [pc, #396]	@ (80060a8 <HAL_TIM_ConfigClockSource+0x224>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	f000 80a1 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005f20:	4a61      	ldr	r2, [pc, #388]	@ (80060a8 <HAL_TIM_ConfigClockSource+0x224>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	f200 80a6 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f28:	4a60      	ldr	r2, [pc, #384]	@ (80060ac <HAL_TIM_ConfigClockSource+0x228>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	f000 8099 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005f30:	4a5e      	ldr	r2, [pc, #376]	@ (80060ac <HAL_TIM_ConfigClockSource+0x228>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f200 809e 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f3c:	f000 8091 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005f40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f44:	f200 8096 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f4c:	f000 8089 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005f50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f54:	f200 808e 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f5c:	d03e      	beq.n	8005fdc <HAL_TIM_ConfigClockSource+0x158>
 8005f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f62:	f200 8087 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6a:	f000 8086 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x1f6>
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f72:	d87f      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f74:	2b70      	cmp	r3, #112	@ 0x70
 8005f76:	d01a      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x12a>
 8005f78:	2b70      	cmp	r3, #112	@ 0x70
 8005f7a:	d87b      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f7c:	2b60      	cmp	r3, #96	@ 0x60
 8005f7e:	d050      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x19e>
 8005f80:	2b60      	cmp	r3, #96	@ 0x60
 8005f82:	d877      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f84:	2b50      	cmp	r3, #80	@ 0x50
 8005f86:	d03c      	beq.n	8006002 <HAL_TIM_ConfigClockSource+0x17e>
 8005f88:	2b50      	cmp	r3, #80	@ 0x50
 8005f8a:	d873      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f8c:	2b40      	cmp	r3, #64	@ 0x40
 8005f8e:	d058      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x1be>
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	d86f      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f94:	2b30      	cmp	r3, #48	@ 0x30
 8005f96:	d064      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005f98:	2b30      	cmp	r3, #48	@ 0x30
 8005f9a:	d86b      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d060      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d867      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d05c      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d05a      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x1de>
 8005fac:	e062      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fbe:	f000 f9a7 	bl	8006310 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	609a      	str	r2, [r3, #8]
      break;
 8005fda:	e04f      	b.n	800607c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fec:	f000 f990 	bl	8006310 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ffe:	609a      	str	r2, [r3, #8]
      break;
 8006000:	e03c      	b.n	800607c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800600e:	461a      	mov	r2, r3
 8006010:	f000 f902 	bl	8006218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2150      	movs	r1, #80	@ 0x50
 800601a:	4618      	mov	r0, r3
 800601c:	f000 f95b 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8006020:	e02c      	b.n	800607c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800602e:	461a      	mov	r2, r3
 8006030:	f000 f921 	bl	8006276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2160      	movs	r1, #96	@ 0x60
 800603a:	4618      	mov	r0, r3
 800603c:	f000 f94b 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8006040:	e01c      	b.n	800607c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800604e:	461a      	mov	r2, r3
 8006050:	f000 f8e2 	bl	8006218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2140      	movs	r1, #64	@ 0x40
 800605a:	4618      	mov	r0, r3
 800605c:	f000 f93b 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8006060:	e00c      	b.n	800607c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f000 f932 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8006072:	e003      	b.n	800607c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	73fb      	strb	r3, [r7, #15]
      break;
 8006078:	e000      	b.n	800607c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800607a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	00100070 	.word	0x00100070
 800609c:	00100060 	.word	0x00100060
 80060a0:	00100050 	.word	0x00100050
 80060a4:	00100040 	.word	0x00100040
 80060a8:	00100030 	.word	0x00100030
 80060ac:	00100020 	.word	0x00100020

080060b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a4c      	ldr	r2, [pc, #304]	@ (80061f4 <TIM_Base_SetConfig+0x144>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d017      	beq.n	80060f8 <TIM_Base_SetConfig+0x48>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ce:	d013      	beq.n	80060f8 <TIM_Base_SetConfig+0x48>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a49      	ldr	r2, [pc, #292]	@ (80061f8 <TIM_Base_SetConfig+0x148>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00f      	beq.n	80060f8 <TIM_Base_SetConfig+0x48>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a48      	ldr	r2, [pc, #288]	@ (80061fc <TIM_Base_SetConfig+0x14c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00b      	beq.n	80060f8 <TIM_Base_SetConfig+0x48>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a47      	ldr	r2, [pc, #284]	@ (8006200 <TIM_Base_SetConfig+0x150>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_Base_SetConfig+0x48>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a46      	ldr	r2, [pc, #280]	@ (8006204 <TIM_Base_SetConfig+0x154>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_Base_SetConfig+0x48>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a45      	ldr	r2, [pc, #276]	@ (8006208 <TIM_Base_SetConfig+0x158>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d108      	bne.n	800610a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a39      	ldr	r2, [pc, #228]	@ (80061f4 <TIM_Base_SetConfig+0x144>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d023      	beq.n	800615a <TIM_Base_SetConfig+0xaa>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006118:	d01f      	beq.n	800615a <TIM_Base_SetConfig+0xaa>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a36      	ldr	r2, [pc, #216]	@ (80061f8 <TIM_Base_SetConfig+0x148>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01b      	beq.n	800615a <TIM_Base_SetConfig+0xaa>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a35      	ldr	r2, [pc, #212]	@ (80061fc <TIM_Base_SetConfig+0x14c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d017      	beq.n	800615a <TIM_Base_SetConfig+0xaa>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a34      	ldr	r2, [pc, #208]	@ (8006200 <TIM_Base_SetConfig+0x150>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <TIM_Base_SetConfig+0xaa>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a33      	ldr	r2, [pc, #204]	@ (8006204 <TIM_Base_SetConfig+0x154>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00f      	beq.n	800615a <TIM_Base_SetConfig+0xaa>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a33      	ldr	r2, [pc, #204]	@ (800620c <TIM_Base_SetConfig+0x15c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00b      	beq.n	800615a <TIM_Base_SetConfig+0xaa>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a32      	ldr	r2, [pc, #200]	@ (8006210 <TIM_Base_SetConfig+0x160>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <TIM_Base_SetConfig+0xaa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a31      	ldr	r2, [pc, #196]	@ (8006214 <TIM_Base_SetConfig+0x164>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <TIM_Base_SetConfig+0xaa>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2c      	ldr	r2, [pc, #176]	@ (8006208 <TIM_Base_SetConfig+0x158>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d108      	bne.n	800616c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a18      	ldr	r2, [pc, #96]	@ (80061f4 <TIM_Base_SetConfig+0x144>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d013      	beq.n	80061c0 <TIM_Base_SetConfig+0x110>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a1a      	ldr	r2, [pc, #104]	@ (8006204 <TIM_Base_SetConfig+0x154>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00f      	beq.n	80061c0 <TIM_Base_SetConfig+0x110>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a1a      	ldr	r2, [pc, #104]	@ (800620c <TIM_Base_SetConfig+0x15c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00b      	beq.n	80061c0 <TIM_Base_SetConfig+0x110>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a19      	ldr	r2, [pc, #100]	@ (8006210 <TIM_Base_SetConfig+0x160>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d007      	beq.n	80061c0 <TIM_Base_SetConfig+0x110>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a18      	ldr	r2, [pc, #96]	@ (8006214 <TIM_Base_SetConfig+0x164>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_Base_SetConfig+0x110>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a13      	ldr	r2, [pc, #76]	@ (8006208 <TIM_Base_SetConfig+0x158>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d103      	bne.n	80061c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d105      	bne.n	80061e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f023 0201 	bic.w	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	611a      	str	r2, [r3, #16]
  }
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40000800 	.word	0x40000800
 8006200:	40000c00 	.word	0x40000c00
 8006204:	40013400 	.word	0x40013400
 8006208:	40015000 	.word	0x40015000
 800620c:	40014000 	.word	0x40014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800

08006218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f023 0201 	bic.w	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 030a 	bic.w	r3, r3, #10
 8006254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006276:	b480      	push	{r7}
 8006278:	b087      	sub	sp, #28
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f023 0210 	bic.w	r2, r3, #16
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	031b      	lsls	r3, r3, #12
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80062ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f043 0307 	orr.w	r3, r3, #7
 80062fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	609a      	str	r2, [r3, #8]
}
 8006304:	bf00      	nop
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800632a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	021a      	lsls	r2, r3, #8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	431a      	orrs	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4313      	orrs	r3, r2
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	2201      	movs	r2, #1
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1a      	ldr	r2, [r3, #32]
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	43db      	mvns	r3, r3
 8006372:	401a      	ands	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	fa01 f303 	lsl.w	r3, r1, r3
 8006388:	431a      	orrs	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]
}
 800638e:	bf00      	nop
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
	...

0800639c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e074      	b.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a34      	ldr	r2, [pc, #208]	@ (80064ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a33      	ldr	r2, [pc, #204]	@ (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a31      	ldr	r2, [pc, #196]	@ (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d108      	bne.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800640a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a21      	ldr	r2, [pc, #132]	@ (80064ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d022      	beq.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006434:	d01d      	beq.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1f      	ldr	r2, [pc, #124]	@ (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d018      	beq.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1d      	ldr	r2, [pc, #116]	@ (80064bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1c      	ldr	r2, [pc, #112]	@ (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00e      	beq.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a15      	ldr	r2, [pc, #84]	@ (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d009      	beq.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d004      	beq.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a11      	ldr	r2, [pc, #68]	@ (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d10c      	bne.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	4313      	orrs	r3, r2
 8006482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40012c00 	.word	0x40012c00
 80064b0:	40013400 	.word	0x40013400
 80064b4:	40015000 	.word	0x40015000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40014000 	.word	0x40014000

080064c8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 80064c8:	2000      	movs	r0, #0
 80064ca:	4770      	bx	lr

080064cc <_ZN5Print5flushEv>:
//    size_t println(const Printable&);
    size_t println(void);

    size_t printf(const char *, ...);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop

080064d0 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop

080064d4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 80064d4:	b410      	push	{r4}
  drawPixel(x, y, color);
 80064d6:	6804      	ldr	r4, [r0, #0]
 80064d8:	6924      	ldr	r4, [r4, #16]
 80064da:	46a4      	mov	ip, r4
}
 80064dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 80064e0:	4760      	bx	ip
 80064e2:	bf00      	nop

080064e4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 80064e4:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 80064e6:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
 80064e8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
 80064ec:	9502      	str	r5, [sp, #8]
 80064ee:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 80064f0:	46a4      	mov	ip, r4
}
 80064f2:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 80064f4:	4760      	bx	ip
 80064f6:	bf00      	nop

080064f8 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 80064f8:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 80064fa:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
 80064fc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
 8006500:	9502      	str	r5, [sp, #8]
 8006502:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8006504:	46a4      	mov	ip, r4
}
 8006506:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 8006508:	4760      	bx	ip
 800650a:	bf00      	nop

0800650c <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop

08006510 <_ZN12Adafruit_GFX11setRotationEh>:
    _height = HEIGHT;
 8006510:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    _width = WIDTH;
 8006514:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
  rotation = (x & 3);
 8006518:	f001 0303 	and.w	r3, r1, #3
  switch (rotation) {
 800651c:	07c9      	lsls	r1, r1, #31
 800651e:	bf48      	it	mi
 8006520:	b292      	uxthmi	r2, r2
  rotation = (x & 3);
 8006522:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 8006524:	6883      	ldr	r3, [r0, #8]
 8006526:	bf48      	it	mi
 8006528:	ea42 430c 	orrmi.w	r3, r2, ip, lsl #16
    _width = HEIGHT;
 800652c:	60c3      	str	r3, [r0, #12]
}
 800652e:	4770      	bx	lr

08006530 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
                                 uint16_t color) {
 8006530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006534:	461c      	mov	r4, r3
 8006536:	460b      	mov	r3, r1
  startWrite();
 8006538:	6801      	ldr	r1, [r0, #0]
 800653a:	4e12      	ldr	r6, [pc, #72]	@ (8006584 <_ZN12Adafruit_GFX13drawFastVLineEssst+0x54>)
 800653c:	694f      	ldr	r7, [r1, #20]
                                 uint16_t color) {
 800653e:	b084      	sub	sp, #16
 8006540:	42b7      	cmp	r7, r6
 8006542:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
 8006546:	4605      	mov	r5, r0
 8006548:	d110      	bne.n	800656c <_ZN12Adafruit_GFX13drawFastVLineEssst+0x3c>
  writeLine(x, y, x, y + h - 1, color);
 800654a:	3c01      	subs	r4, #1
 800654c:	4414      	add	r4, r2
 800654e:	b224      	sxth	r4, r4
 8006550:	f8cd 8004 	str.w	r8, [sp, #4]
 8006554:	9400      	str	r4, [sp, #0]
 8006556:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8006558:	4628      	mov	r0, r5
 800655a:	4619      	mov	r1, r3
 800655c:	47a0      	blx	r4
  endWrite();
 800655e:	682b      	ldr	r3, [r5, #0]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	42b3      	cmp	r3, r6
 8006564:	d109      	bne.n	800657a <_ZN12Adafruit_GFX13drawFastVLineEssst+0x4a>
}
 8006566:	b004      	add	sp, #16
 8006568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800656c:	e9cd 3202 	strd	r3, r2, [sp, #8]
  startWrite();
 8006570:	47b8      	blx	r7
  writeLine(x, y, x, y + h - 1, color);
 8006572:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006576:	6829      	ldr	r1, [r5, #0]
 8006578:	e7e7      	b.n	800654a <_ZN12Adafruit_GFX13drawFastVLineEssst+0x1a>
  endWrite();
 800657a:	4628      	mov	r0, r5
}
 800657c:	b004      	add	sp, #16
 800657e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 8006582:	4718      	bx	r3
 8006584:	080064d1 	.word	0x080064d1

08006588 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
                                 uint16_t color) {
 8006588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  startWrite();
 800658c:	6806      	ldr	r6, [r0, #0]
 800658e:	4f12      	ldr	r7, [pc, #72]	@ (80065d8 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x50>)
                                 uint16_t color) {
 8006590:	461c      	mov	r4, r3
  startWrite();
 8006592:	6973      	ldr	r3, [r6, #20]
                                 uint16_t color) {
 8006594:	b084      	sub	sp, #16
 8006596:	42bb      	cmp	r3, r7
 8006598:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
 800659c:	4605      	mov	r5, r0
 800659e:	d10f      	bne.n	80065c0 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x38>
  writeLine(x, y, x + w - 1, y, color);
 80065a0:	1e63      	subs	r3, r4, #1
 80065a2:	f8cd 8004 	str.w	r8, [sp, #4]
 80065a6:	440b      	add	r3, r1
 80065a8:	9200      	str	r2, [sp, #0]
 80065aa:	b21b      	sxth	r3, r3
 80065ac:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 80065ae:	4628      	mov	r0, r5
 80065b0:	47a0      	blx	r4
  endWrite();
 80065b2:	682b      	ldr	r3, [r5, #0]
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	42bb      	cmp	r3, r7
 80065b8:	d109      	bne.n	80065ce <_ZN12Adafruit_GFX13drawFastHLineEssst+0x46>
}
 80065ba:	b004      	add	sp, #16
 80065bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c0:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
 80065c4:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 80065c6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80065ca:	682e      	ldr	r6, [r5, #0]
 80065cc:	e7e8      	b.n	80065a0 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x18>
  endWrite();
 80065ce:	4628      	mov	r0, r5
}
 80065d0:	b004      	add	sp, #16
 80065d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 80065d6:	4718      	bx	r3
 80065d8:	080064d1 	.word	0x080064d1

080065dc <_ZN12Adafruit_GFX8drawLineEsssst>:
                            uint16_t color) {
 80065dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e0:	b086      	sub	sp, #24
  if (x0 == x1) {
 80065e2:	4299      	cmp	r1, r3
                            uint16_t color) {
 80065e4:	f9bd 4030 	ldrsh.w	r4, [sp, #48]	@ 0x30
 80065e8:	f8bd 6034 	ldrh.w	r6, [sp, #52]	@ 0x34
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80065ec:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
 80065f0:	4605      	mov	r5, r0
  if (x0 == x1) {
 80065f2:	d021      	beq.n	8006638 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
  } else if (y0 == y1) {
 80065f4:	42a2      	cmp	r2, r4
 80065f6:	d011      	beq.n	800661c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    startWrite();
 80065f8:	f8dc 8014 	ldr.w	r8, [ip, #20]
 80065fc:	4f1d      	ldr	r7, [pc, #116]	@ (8006674 <_ZN12Adafruit_GFX8drawLineEsssst+0x98>)
 80065fe:	45b8      	cmp	r8, r7
 8006600:	d12e      	bne.n	8006660 <_ZN12Adafruit_GFX8drawLineEsssst+0x84>
    writeLine(x0, y0, x1, y1, color);
 8006602:	e9cd 4600 	strd	r4, r6, [sp]
 8006606:	4628      	mov	r0, r5
 8006608:	f8dc 4028 	ldr.w	r4, [ip, #40]	@ 0x28
 800660c:	47a0      	blx	r4
    endWrite();
 800660e:	682b      	ldr	r3, [r5, #0]
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	42bb      	cmp	r3, r7
 8006614:	d11f      	bne.n	8006656 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
}
 8006616:	b006      	add	sp, #24
 8006618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (x0 > x1)
 800661c:	4299      	cmp	r1, r3
 800661e:	dc16      	bgt.n	800664e <_ZN12Adafruit_GFX8drawLineEsssst+0x72>
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8006620:	960c      	str	r6, [sp, #48]	@ 0x30
 8006622:	3301      	adds	r3, #1
 8006624:	f8dc 403c 	ldr.w	r4, [ip, #60]	@ 0x3c
 8006628:	1a5b      	subs	r3, r3, r1
 800662a:	b21b      	sxth	r3, r3
 800662c:	4628      	mov	r0, r5
 800662e:	46a4      	mov	ip, r4
}
 8006630:	b006      	add	sp, #24
 8006632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8006636:	4760      	bx	ip
    if (y0 > y1)
 8006638:	42a2      	cmp	r2, r4
 800663a:	dd02      	ble.n	8006642 <_ZN12Adafruit_GFX8drawLineEsssst+0x66>
 800663c:	4613      	mov	r3, r2
 800663e:	4622      	mov	r2, r4
 8006640:	461c      	mov	r4, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8006642:	1c63      	adds	r3, r4, #1
 8006644:	960c      	str	r6, [sp, #48]	@ 0x30
 8006646:	f8dc 4038 	ldr.w	r4, [ip, #56]	@ 0x38
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	e7ed      	b.n	800662a <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
    if (x0 > x1)
 800664e:	4608      	mov	r0, r1
 8006650:	4619      	mov	r1, r3
 8006652:	4603      	mov	r3, r0
 8006654:	e7e4      	b.n	8006620 <_ZN12Adafruit_GFX8drawLineEsssst+0x44>
    endWrite();
 8006656:	4628      	mov	r0, r5
}
 8006658:	b006      	add	sp, #24
 800665a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 800665e:	4718      	bx	r3
 8006660:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006664:	9103      	str	r1, [sp, #12]
    startWrite();
 8006666:	47c0      	blx	r8
    writeLine(x0, y0, x1, y1, color);
 8006668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666c:	f8d5 c000 	ldr.w	ip, [r5]
 8006670:	9903      	ldr	r1, [sp, #12]
 8006672:	e7c6      	b.n	8006602 <_ZN12Adafruit_GFX8drawLineEsssst+0x26>
 8006674:	080064d1 	.word	0x080064d1

08006678 <_ZN12Adafruit_GFX8fillRectEsssst>:
                            uint16_t color) {
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 800667c:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
 8006680:	4690      	mov	r8, r2
 8006682:	461f      	mov	r7, r3
 8006684:	4a20      	ldr	r2, [pc, #128]	@ (8006708 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
  startWrite();
 8006686:	f8dc 3014 	ldr.w	r3, [ip, #20]
                            uint16_t color) {
 800668a:	b083      	sub	sp, #12
 800668c:	4293      	cmp	r3, r2
 800668e:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8006692:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8006696:	4605      	mov	r5, r0
 8006698:	460c      	mov	r4, r1
 800669a:	d130      	bne.n	80066fe <_ZN12Adafruit_GFX8fillRectEsssst+0x86>
  for (int16_t i = x; i < x + w; i++) {
 800669c:	4427      	add	r7, r4
 800669e:	42a7      	cmp	r7, r4
 80066a0:	dd14      	ble.n	80066cc <_ZN12Adafruit_GFX8fillRectEsssst+0x54>
 80066a2:	f8df b068 	ldr.w	fp, [pc, #104]	@ 800670c <_ZN12Adafruit_GFX8fillRectEsssst+0x94>
    writeFastVLine(i, y, h, color);
 80066a6:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 80066aa:	f8cd a000 	str.w	sl, [sp]
 80066ae:	455e      	cmp	r6, fp
 80066b0:	4621      	mov	r1, r4
 80066b2:	464b      	mov	r3, r9
 80066b4:	4642      	mov	r2, r8
 80066b6:	4628      	mov	r0, r5
 80066b8:	d110      	bne.n	80066dc <_ZN12Adafruit_GFX8fillRectEsssst+0x64>
 80066ba:	3401      	adds	r4, #1
 80066bc:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
  for (int16_t i = x; i < x + w; i++) {
 80066c0:	b224      	sxth	r4, r4
  drawFastVLine(x, y, h, color);
 80066c2:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 80066c4:	42bc      	cmp	r4, r7
  endWrite();
 80066c6:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 80066ca:	dbec      	blt.n	80066a6 <_ZN12Adafruit_GFX8fillRectEsssst+0x2e>
  endWrite();
 80066cc:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 80066d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006708 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d10e      	bne.n	80066f4 <_ZN12Adafruit_GFX8fillRectEsssst+0x7c>
}
 80066d6:	b003      	add	sp, #12
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	3401      	adds	r4, #1
  for (int16_t i = x; i < x + w; i++) {
 80066de:	b224      	sxth	r4, r4
    writeFastVLine(i, y, h, color);
 80066e0:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 80066e2:	42a7      	cmp	r7, r4
  endWrite();
 80066e4:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 80066e8:	dcdd      	bgt.n	80066a6 <_ZN12Adafruit_GFX8fillRectEsssst+0x2e>
  endWrite();
 80066ea:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 80066ee:	4a06      	ldr	r2, [pc, #24]	@ (8006708 <_ZN12Adafruit_GFX8fillRectEsssst+0x90>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d0f0      	beq.n	80066d6 <_ZN12Adafruit_GFX8fillRectEsssst+0x5e>
 80066f4:	4628      	mov	r0, r5
}
 80066f6:	b003      	add	sp, #12
 80066f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 80066fc:	4718      	bx	r3
  startWrite();
 80066fe:	4798      	blx	r3
  endWrite();
 8006700:	f8d5 c000 	ldr.w	ip, [r5]
 8006704:	e7ca      	b.n	800669c <_ZN12Adafruit_GFX8fillRectEsssst+0x24>
 8006706:	bf00      	nop
 8006708:	080064d1 	.word	0x080064d1
 800670c:	080064e5 	.word	0x080064e5

08006710 <_ZN12Adafruit_GFX9writeLineEsssst>:
                             uint16_t color) {
 8006710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	b085      	sub	sp, #20
 8006716:	461d      	mov	r5, r3
 8006718:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 800671c:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8006720:	1ab3      	subs	r3, r6, r2
 8006722:	eba5 0c01 	sub.w	ip, r5, r1
 8006726:	2b00      	cmp	r3, #0
 8006728:	bfb8      	it	lt
 800672a:	425b      	neglt	r3, r3
 800672c:	f1bc 0f00 	cmp.w	ip, #0
 8006730:	bfb8      	it	lt
 8006732:	f1cc 0c00 	rsblt	ip, ip, #0
  if (steep) {
 8006736:	4563      	cmp	r3, ip
                             uint16_t color) {
 8006738:	460f      	mov	r7, r1
  if (steep) {
 800673a:	dd43      	ble.n	80067c4 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
 800673c:	46a8      	mov	r8, r5
    _swap_int16_t(x0, y0);
 800673e:	4617      	mov	r7, r2
  if (steep) {
 8006740:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 8006742:	4635      	mov	r5, r6
  if (x0 > x1) {
 8006744:	42af      	cmp	r7, r5
    _swap_int16_t(x1, y1);
 8006746:	4646      	mov	r6, r8
 8006748:	468e      	mov	lr, r1
    _swap_int16_t(x0, y0);
 800674a:	460a      	mov	r2, r1
  if (steep) {
 800674c:	46e0      	mov	r8, ip
  if (x0 > x1) {
 800674e:	dd3e      	ble.n	80067ce <_ZN12Adafruit_GFX9writeLineEsssst+0xbe>
  dy = abs(y1 - y0);
 8006750:	1b09      	subs	r1, r1, r4
 8006752:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
 8006756:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
  dx = x1 - x0;
 800675a:	1b79      	subs	r1, r7, r5
  int16_t err = dx / 2;
 800675c:	f3c1 34c0 	ubfx	r4, r1, #15, #1
 8006760:	fa04 f481 	sxtah	r4, r4, r1
  if (y0 < y1) {
 8006764:	42b2      	cmp	r2, r6
  dx = x1 - x0;
 8006766:	b289      	uxth	r1, r1
 8006768:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 800676a:	ea4f 0464 	mov.w	r4, r4, asr #1
  if (y0 < y1) {
 800676e:	dd70      	ble.n	8006852 <_ZN12Adafruit_GFX9writeLineEsssst+0x142>
 8006770:	2201      	movs	r2, #1
 8006772:	4563      	cmp	r3, ip
 8006774:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 8006858 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>
 8006778:	9203      	str	r2, [sp, #12]
    err -= dy;
 800677a:	fa1f f888 	uxth.w	r8, r8
 800677e:	dc3e      	bgt.n	80067fe <_ZN12Adafruit_GFX9writeLineEsssst+0xee>
 8006780:	46bb      	mov	fp, r7
      writePixel(y0, x0, color);
 8006782:	f8d0 c000 	ldr.w	ip, [r0]
  drawPixel(x, y, color);
 8006786:	9002      	str	r0, [sp, #8]
      writePixel(y0, x0, color);
 8006788:	f8dc 7018 	ldr.w	r7, [ip, #24]
      writePixel(x0, y0, color);
 800678c:	4557      	cmp	r7, sl
  drawPixel(x, y, color);
 800678e:	bf08      	it	eq
 8006790:	f8dc 7010 	ldreq.w	r7, [ip, #16]
 8006794:	4629      	mov	r1, r5
 8006796:	464b      	mov	r3, r9
 8006798:	4632      	mov	r2, r6
 800679a:	47b8      	blx	r7
    err -= dy;
 800679c:	eba4 0308 	sub.w	r3, r4, r8
 80067a0:	b21c      	sxth	r4, r3
 80067a2:	3501      	adds	r5, #1
    if (err < 0) {
 80067a4:	2c00      	cmp	r4, #0
  drawPixel(x, y, color);
 80067a6:	9802      	ldr	r0, [sp, #8]
  for (; x0 <= x1; x0++) {
 80067a8:	b22d      	sxth	r5, r5
    err -= dy;
 80067aa:	b29b      	uxth	r3, r3
    if (err < 0) {
 80067ac:	da05      	bge.n	80067ba <_ZN12Adafruit_GFX9writeLineEsssst+0xaa>
      err += dx;
 80067ae:	9a01      	ldr	r2, [sp, #4]
 80067b0:	4413      	add	r3, r2
 80067b2:	b21c      	sxth	r4, r3
      y0 += ystep;
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	441e      	add	r6, r3
 80067b8:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 80067ba:	455d      	cmp	r5, fp
 80067bc:	dde1      	ble.n	8006782 <_ZN12Adafruit_GFX9writeLineEsssst+0x72>
}
 80067be:	b005      	add	sp, #20
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (x0 > x1) {
 80067c4:	42af      	cmp	r7, r5
 80067c6:	4634      	mov	r4, r6
 80067c8:	4611      	mov	r1, r2
 80067ca:	4698      	mov	r8, r3
 80067cc:	dcc0      	bgt.n	8006750 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
  dx = x1 - x0;
 80067ce:	1be9      	subs	r1, r5, r7
  int16_t err = dx / 2;
 80067d0:	f3c1 34c0 	ubfx	r4, r1, #15, #1
 80067d4:	fa04 f481 	sxtah	r4, r4, r1
  if (y0 < y1) {
 80067d8:	46ae      	mov	lr, r5
  dx = x1 - x0;
 80067da:	b289      	uxth	r1, r1
  if (y0 < y1) {
 80067dc:	42b2      	cmp	r2, r6
 80067de:	463d      	mov	r5, r7
  dx = x1 - x0;
 80067e0:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 80067e2:	ea4f 0464 	mov.w	r4, r4, asr #1
  if (y0 < y1) {
 80067e6:	4616      	mov	r6, r2
 80067e8:	4677      	mov	r7, lr
 80067ea:	db2c      	blt.n	8006846 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
 80067ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067f0:	4563      	cmp	r3, ip
 80067f2:	f8df a064 	ldr.w	sl, [pc, #100]	@ 8006858 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>
 80067f6:	9203      	str	r2, [sp, #12]
    err -= dy;
 80067f8:	fa1f f888 	uxth.w	r8, r8
 80067fc:	ddc0      	ble.n	8006780 <_ZN12Adafruit_GFX9writeLineEsssst+0x70>
 80067fe:	4683      	mov	fp, r0
 8006800:	4631      	mov	r1, r6
 8006802:	e014      	b.n	800682e <_ZN12Adafruit_GFX9writeLineEsssst+0x11e>
  drawPixel(x, y, color);
 8006804:	6906      	ldr	r6, [r0, #16]
 8006806:	9102      	str	r1, [sp, #8]
 8006808:	4658      	mov	r0, fp
 800680a:	47b0      	blx	r6
}
 800680c:	9902      	ldr	r1, [sp, #8]
    err -= dy;
 800680e:	eba4 0308 	sub.w	r3, r4, r8
 8006812:	b21c      	sxth	r4, r3
    if (err < 0) {
 8006814:	3501      	adds	r5, #1
 8006816:	2c00      	cmp	r4, #0
  for (; x0 <= x1; x0++) {
 8006818:	b22d      	sxth	r5, r5
    err -= dy;
 800681a:	b29b      	uxth	r3, r3
    if (err < 0) {
 800681c:	da05      	bge.n	800682a <_ZN12Adafruit_GFX9writeLineEsssst+0x11a>
      err += dx;
 800681e:	9a01      	ldr	r2, [sp, #4]
 8006820:	4413      	add	r3, r2
 8006822:	b21c      	sxth	r4, r3
      y0 += ystep;
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	4419      	add	r1, r3
 8006828:	b209      	sxth	r1, r1
  for (; x0 <= x1; x0++) {
 800682a:	42bd      	cmp	r5, r7
 800682c:	dcc7      	bgt.n	80067be <_ZN12Adafruit_GFX9writeLineEsssst+0xae>
      writePixel(y0, x0, color);
 800682e:	f8db 0000 	ldr.w	r0, [fp]
 8006832:	6986      	ldr	r6, [r0, #24]
 8006834:	4556      	cmp	r6, sl
  drawPixel(x, y, color);
 8006836:	464b      	mov	r3, r9
 8006838:	462a      	mov	r2, r5
 800683a:	d0e3      	beq.n	8006804 <_ZN12Adafruit_GFX9writeLineEsssst+0xf4>
      writePixel(y0, x0, color);
 800683c:	9102      	str	r1, [sp, #8]
 800683e:	4658      	mov	r0, fp
 8006840:	47b0      	blx	r6
 8006842:	9902      	ldr	r1, [sp, #8]
 8006844:	e7e3      	b.n	800680e <_ZN12Adafruit_GFX9writeLineEsssst+0xfe>
  if (y0 < y1) {
 8006846:	2201      	movs	r2, #1
  for (; x0 <= x1; x0++) {
 8006848:	42bd      	cmp	r5, r7
 800684a:	ddd1      	ble.n	80067f0 <_ZN12Adafruit_GFX9writeLineEsssst+0xe0>
}
 800684c:	b005      	add	sp, #20
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (y0 < y1) {
 8006852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006856:	e7f7      	b.n	8006848 <_ZN12Adafruit_GFX9writeLineEsssst+0x138>
 8006858:	080064d5 	.word	0x080064d5

0800685c <_ZN12Adafruit_GFX8drawRectEsssst>:
                            uint16_t color) {
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	461d      	mov	r5, r3
  startWrite();
 8006862:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 8006864:	460f      	mov	r7, r1
 8006866:	4616      	mov	r6, r2
 8006868:	492e      	ldr	r1, [pc, #184]	@ (8006924 <_ZN12Adafruit_GFX8drawRectEsssst+0xc8>)
  startWrite();
 800686a:	695a      	ldr	r2, [r3, #20]
                            uint16_t color) {
 800686c:	b083      	sub	sp, #12
 800686e:	428a      	cmp	r2, r1
 8006870:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8006874:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8006878:	4604      	mov	r4, r0
 800687a:	d145      	bne.n	8006908 <_ZN12Adafruit_GFX8drawRectEsssst+0xac>
  writeFastHLine(x, y, w, color);
 800687c:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
 8006880:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8006928 <_ZN12Adafruit_GFX8drawRectEsssst+0xcc>
  drawFastHLine(x, y, w, color);
 8006884:	f8cd 8000 	str.w	r8, [sp]
 8006888:	45d3      	cmp	fp, sl
 800688a:	bf08      	it	eq
 800688c:	f8d3 b03c 	ldreq.w	fp, [r3, #60]	@ 0x3c
  writeFastHLine(x, y, w, color);
 8006890:	4632      	mov	r2, r6
 8006892:	462b      	mov	r3, r5
 8006894:	4639      	mov	r1, r7
 8006896:	4620      	mov	r0, r4
 8006898:	47d8      	blx	fp
  writeFastHLine(x, y + h - 1, w, color);
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
  drawFastHLine(x, y, w, color);
 80068a0:	f8cd 8000 	str.w	r8, [sp]
  writeFastHLine(x, y + h - 1, w, color);
 80068a4:	f109 32ff 	add.w	r2, r9, #4294967295
 80068a8:	4432      	add	r2, r6
 80068aa:	45d3      	cmp	fp, sl
 80068ac:	b212      	sxth	r2, r2
 80068ae:	d133      	bne.n	8006918 <_ZN12Adafruit_GFX8drawRectEsssst+0xbc>
  drawFastHLine(x, y, w, color);
 80068b0:	f8d3 a03c 	ldr.w	sl, [r3, #60]	@ 0x3c
 80068b4:	4639      	mov	r1, r7
 80068b6:	462b      	mov	r3, r5
 80068b8:	4620      	mov	r0, r4
 80068ba:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800692c <_ZN12Adafruit_GFX8drawRectEsssst+0xd0>
 80068c2:	f8d3 b020 	ldr.w	fp, [r3, #32]
  drawFastVLine(x, y, h, color);
 80068c6:	f8cd 8000 	str.w	r8, [sp]
 80068ca:	45d3      	cmp	fp, sl
 80068cc:	bf08      	it	eq
 80068ce:	f8d3 b038 	ldreq.w	fp, [r3, #56]	@ 0x38
  writeFastVLine(x, y, h, color);
 80068d2:	4632      	mov	r2, r6
 80068d4:	464b      	mov	r3, r9
 80068d6:	4639      	mov	r1, r7
 80068d8:	4620      	mov	r0, r4
 80068da:	47d8      	blx	fp
  writeFastVLine(x + w - 1, y, h, color);
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	1e69      	subs	r1, r5, #1
 80068e0:	6a1d      	ldr	r5, [r3, #32]
  drawFastVLine(x, y, h, color);
 80068e2:	f8cd 8000 	str.w	r8, [sp]
 80068e6:	4555      	cmp	r5, sl
  writeFastVLine(x + w - 1, y, h, color);
 80068e8:	4439      	add	r1, r7
  drawFastVLine(x, y, h, color);
 80068ea:	bf08      	it	eq
 80068ec:	6b9d      	ldreq	r5, [r3, #56]	@ 0x38
  writeFastVLine(x + w - 1, y, h, color);
 80068ee:	4632      	mov	r2, r6
 80068f0:	464b      	mov	r3, r9
 80068f2:	b209      	sxth	r1, r1
 80068f4:	4620      	mov	r0, r4
 80068f6:	47a8      	blx	r5
  endWrite();
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006924 <_ZN12Adafruit_GFX8drawRectEsssst+0xc8>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	4293      	cmp	r3, r2
 8006900:	d105      	bne.n	800690e <_ZN12Adafruit_GFX8drawRectEsssst+0xb2>
}
 8006902:	b003      	add	sp, #12
 8006904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 8006908:	4790      	blx	r2
  writeFastHLine(x, y, w, color);
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	e7b6      	b.n	800687c <_ZN12Adafruit_GFX8drawRectEsssst+0x20>
  endWrite();
 800690e:	4620      	mov	r0, r4
}
 8006910:	b003      	add	sp, #12
 8006912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8006916:	4718      	bx	r3
  writeFastHLine(x, y + h - 1, w, color);
 8006918:	462b      	mov	r3, r5
 800691a:	4639      	mov	r1, r7
 800691c:	4620      	mov	r0, r4
 800691e:	47d8      	blx	fp
 8006920:	e7cc      	b.n	80068bc <_ZN12Adafruit_GFX8drawRectEsssst+0x60>
 8006922:	bf00      	nop
 8006924:	080064d1 	.word	0x080064d1
 8006928:	080064f9 	.word	0x080064f9
 800692c:	080064e5 	.word	0x080064e5

08006930 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
                                 uint16_t color) {
 8006930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(x, y, w, h, color);
 8006934:	f8d0 c000 	ldr.w	ip, [r0]
 8006938:	f8df e088 	ldr.w	lr, [pc, #136]	@ 80069c4 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x94>
 800693c:	f8dc 6040 	ldr.w	r6, [ip, #64]	@ 0x40
                                 uint16_t color) {
 8006940:	b083      	sub	sp, #12
 8006942:	4576      	cmp	r6, lr
 8006944:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8006948:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800694c:	d128      	bne.n	80069a0 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x70>
 800694e:	4690      	mov	r8, r2
 8006950:	461f      	mov	r7, r3
 8006952:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x90>)
  startWrite();
 8006954:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8006958:	4293      	cmp	r3, r2
 800695a:	4605      	mov	r5, r0
 800695c:	460c      	mov	r4, r1
 800695e:	d12b      	bne.n	80069b8 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x88>
  for (int16_t i = x; i < x + w; i++) {
 8006960:	4427      	add	r7, r4
 8006962:	42bc      	cmp	r4, r7
 8006964:	da14      	bge.n	8006990 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x60>
 8006966:	f8df b060 	ldr.w	fp, [pc, #96]	@ 80069c8 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x98>
    writeFastVLine(i, y, h, color);
 800696a:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 800696e:	f8cd a000 	str.w	sl, [sp]
 8006972:	455e      	cmp	r6, fp
 8006974:	4621      	mov	r1, r4
 8006976:	464b      	mov	r3, r9
 8006978:	4642      	mov	r2, r8
 800697a:	4628      	mov	r0, r5
 800697c:	d101      	bne.n	8006982 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x52>
 800697e:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
 8006982:	3401      	adds	r4, #1
  for (int16_t i = x; i < x + w; i++) {
 8006984:	b224      	sxth	r4, r4
    writeFastVLine(i, y, h, color);
 8006986:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8006988:	42bc      	cmp	r4, r7
  endWrite();
 800698a:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 800698e:	dbec      	blt.n	800696a <_ZN12Adafruit_GFX13writeFillRectEsssst+0x3a>
  endWrite();
 8006990:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006994:	4a0a      	ldr	r2, [pc, #40]	@ (80069c0 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x90>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d109      	bne.n	80069ae <_ZN12Adafruit_GFX13writeFillRectEsssst+0x7e>
}
 800699a:	b003      	add	sp, #12
 800699c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fillRect(x, y, w, h, color);
 80069a0:	46b4      	mov	ip, r6
 80069a2:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	@ 0x30
}
 80069a6:	b003      	add	sp, #12
 80069a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(x, y, w, h, color);
 80069ac:	4760      	bx	ip
  endWrite();
 80069ae:	4628      	mov	r0, r5
}
 80069b0:	b003      	add	sp, #12
 80069b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 80069b6:	4718      	bx	r3
  startWrite();
 80069b8:	4798      	blx	r3
  endWrite();
 80069ba:	f8d5 c000 	ldr.w	ip, [r5]
 80069be:	e7cf      	b.n	8006960 <_ZN12Adafruit_GFX13writeFillRectEsssst+0x30>
 80069c0:	080064d1 	.word	0x080064d1
 80069c4:	08006679 	.word	0x08006679
 80069c8:	080064e5 	.word	0x080064e5

080069cc <_ZN12Adafruit_GFX10fillScreenEt>:
void Adafruit_GFX::fillScreen(uint16_t color) {
 80069cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fillRect(0, 0, _width, _height, color);
 80069d0:	f8d0 c000 	ldr.w	ip, [r0]
 80069d4:	4b27      	ldr	r3, [pc, #156]	@ (8006a74 <_ZN12Adafruit_GFX10fillScreenEt+0xa8>)
 80069d6:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 80069da:	f9b0 900c 	ldrsh.w	r9, [r0, #12]
 80069de:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 80069e2:	429c      	cmp	r4, r3
void Adafruit_GFX::fillScreen(uint16_t color) {
 80069e4:	b083      	sub	sp, #12
 80069e6:	460f      	mov	r7, r1
 80069e8:	d135      	bne.n	8006a56 <_ZN12Adafruit_GFX10fillScreenEt+0x8a>
  startWrite();
 80069ea:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80069ee:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8006a78 <_ZN12Adafruit_GFX10fillScreenEt+0xac>
 80069f2:	455b      	cmp	r3, fp
 80069f4:	4605      	mov	r5, r0
 80069f6:	d138      	bne.n	8006a6a <_ZN12Adafruit_GFX10fillScreenEt+0x9e>
  for (int16_t i = x; i < x + w; i++) {
 80069f8:	f1b9 0f00 	cmp.w	r9, #0
 80069fc:	dd14      	ble.n	8006a28 <_ZN12Adafruit_GFX10fillScreenEt+0x5c>
 80069fe:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006a7c <_ZN12Adafruit_GFX10fillScreenEt+0xb0>
 8006a02:	2400      	movs	r4, #0
    writeFastVLine(i, y, h, color);
 8006a04:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
 8006a08:	9700      	str	r7, [sp, #0]
 8006a0a:	4556      	cmp	r6, sl
 8006a0c:	4643      	mov	r3, r8
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	4628      	mov	r0, r5
 8006a14:	b221      	sxth	r1, r4
 8006a16:	d10e      	bne.n	8006a36 <_ZN12Adafruit_GFX10fillScreenEt+0x6a>
 8006a18:	f8dc 6038 	ldr.w	r6, [ip, #56]	@ 0x38
  for (int16_t i = x; i < x + w; i++) {
 8006a1c:	3401      	adds	r4, #1
  drawFastVLine(x, y, h, color);
 8006a1e:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8006a20:	45a1      	cmp	r9, r4
  endWrite();
 8006a22:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8006a26:	d1ed      	bne.n	8006a04 <_ZN12Adafruit_GFX10fillScreenEt+0x38>
  endWrite();
 8006a28:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006a2c:	455b      	cmp	r3, fp
 8006a2e:	d10d      	bne.n	8006a4c <_ZN12Adafruit_GFX10fillScreenEt+0x80>
}
 8006a30:	b003      	add	sp, #12
 8006a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int16_t i = x; i < x + w; i++) {
 8006a36:	3401      	adds	r4, #1
    writeFastVLine(i, y, h, color);
 8006a38:	2200      	movs	r2, #0
 8006a3a:	47b0      	blx	r6
  for (int16_t i = x; i < x + w; i++) {
 8006a3c:	454c      	cmp	r4, r9
  endWrite();
 8006a3e:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
 8006a42:	d1df      	bne.n	8006a04 <_ZN12Adafruit_GFX10fillScreenEt+0x38>
  endWrite();
 8006a44:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006a48:	455b      	cmp	r3, fp
 8006a4a:	d0f1      	beq.n	8006a30 <_ZN12Adafruit_GFX10fillScreenEt+0x64>
 8006a4c:	4628      	mov	r0, r5
}
 8006a4e:	b003      	add	sp, #12
 8006a50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 8006a54:	4718      	bx	r3
  fillRect(0, 0, _width, _height, color);
 8006a56:	2200      	movs	r2, #0
 8006a58:	9101      	str	r1, [sp, #4]
 8006a5a:	f8cd 8000 	str.w	r8, [sp]
 8006a5e:	464b      	mov	r3, r9
 8006a60:	4611      	mov	r1, r2
 8006a62:	47a0      	blx	r4
}
 8006a64:	b003      	add	sp, #12
 8006a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 8006a6a:	4798      	blx	r3
  endWrite();
 8006a6c:	f8d5 c000 	ldr.w	ip, [r5]
 8006a70:	e7c2      	b.n	80069f8 <_ZN12Adafruit_GFX10fillScreenEt+0x2c>
 8006a72:	bf00      	nop
 8006a74:	08006679 	.word	0x08006679
 8006a78:	080064d1 	.word	0x080064d1
 8006a7c:	080064e5 	.word	0x080064e5

08006a80 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8006a80:	b410      	push	{r4}
 8006a82:	2400      	movs	r4, #0
 8006a84:	f361 040f 	bfi	r4, r1, #0, #16
 8006a88:	f362 441f 	bfi	r4, r2, #16, #16
    Print() : write_error(0) {}
 8006a8c:	2100      	movs	r1, #0
  textsize_x = textsize_y = 1;
 8006a8e:	4a08      	ldr	r2, [pc, #32]	@ (8006ab0 <_ZN12Adafruit_GFXC1Ess+0x30>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8006a90:	60c4      	str	r4, [r0, #12]
 8006a92:	e9c0 1401 	strd	r1, r4, [r0, #4]
  textsize_x = textsize_y = 1;
 8006a96:	6182      	str	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 8006a98:	f04f 34ff 	mov.w	r4, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8006a9c:	4a05      	ldr	r2, [pc, #20]	@ (8006ab4 <_ZN12Adafruit_GFXC1Ess+0x34>)
  wrap = true;
 8006a9e:	7701      	strb	r1, [r0, #28]
  textcolor = textbgcolor = 0xFFFF;
 8006aa0:	e9c0 1404 	strd	r1, r4, [r0, #16]
  gfxFont = NULL;
 8006aa4:	6201      	str	r1, [r0, #32]
}
 8006aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8006aaa:	6002      	str	r2, [r0, #0]
}
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	01000101 	.word	0x01000101
 8006ab4:	0800b220 	.word	0x0800b220

08006ab8 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	4682      	mov	sl, r0
 8006abe:	b097      	sub	sp, #92	@ 0x5c
 8006ac0:	461d      	mov	r5, r3
 8006ac2:	9211      	str	r2, [sp, #68]	@ 0x44
 8006ac4:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
  if (!gfxFont) { // 'Classic' built-in font
 8006ac8:	f8da 2020 	ldr.w	r2, [sl, #32]
                            uint8_t size_y) {
 8006acc:	f8bd 0080 	ldrh.w	r0, [sp, #128]	@ 0x80
 8006ad0:	9305      	str	r3, [sp, #20]
 8006ad2:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 8006ad6:	f8bd 8084 	ldrh.w	r8, [sp, #132]	@ 0x84
 8006ada:	9003      	str	r0, [sp, #12]
 8006adc:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ade:	9307      	str	r3, [sp, #28]
  if (!gfxFont) { // 'Classic' built-in font
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	f000 80e4 	beq.w	8006cae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f6>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8006ae6:	7a13      	ldrb	r3, [r2, #8]
    startWrite();
 8006ae8:	f8da c000 	ldr.w	ip, [sl]
  return gfxFont->bitmap;
 8006aec:	e9d2 2100 	ldrd	r2, r1, [r2]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8006af0:	1aeb      	subs	r3, r5, r3
  return gfxFont->glyph + c;
 8006af2:	b2db      	uxtb	r3, r3
  return gfxFont->bitmap;
 8006af4:	9208      	str	r2, [sp, #32]
  return gfxFont->glyph + c;
 8006af6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8006afa:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8006afe:	9306      	str	r3, [sp, #24]
    if (size_x > 1 || size_y > 1) {
 8006b00:	9907      	ldr	r1, [sp, #28]
 8006b02:	9b05      	ldr	r3, [sp, #20]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 8006b04:	78d4      	ldrb	r4, [r2, #3]
    if (size_x > 1 || size_y > 1) {
 8006b06:	430b      	orrs	r3, r1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 8006b08:	7891      	ldrb	r1, [r2, #2]
 8006b0a:	9104      	str	r1, [sp, #16]
    if (size_x > 1 || size_y > 1) {
 8006b0c:	2b01      	cmp	r3, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 8006b0e:	f992 1005 	ldrsb.w	r1, [r2, #5]
 8006b12:	4bad      	ldr	r3, [pc, #692]	@ (8006dc8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x310>)
           yo = pgm_read_byte(&glyph->yOffset);
 8006b14:	f992 2006 	ldrsb.w	r2, [r2, #6]
 8006b18:	9215      	str	r2, [sp, #84]	@ 0x54
      yo16 = yo;
 8006b1a:	bf88      	it	hi
 8006b1c:	4693      	movhi	fp, r2
 8006b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b20:	461a      	mov	r2, r3
    startWrite();
 8006b22:	f8dc 3014 	ldr.w	r3, [ip, #20]
      xo16 = xo;
 8006b26:	bf8e      	itee	hi
 8006b28:	910d      	strhi	r1, [sp, #52]	@ 0x34
    int16_t xo16 = 0, yo16 = 0;
 8006b2a:	f04f 0b00 	movls.w	fp, #0
 8006b2e:	f8cd b034 	strls.w	fp, [sp, #52]	@ 0x34
 8006b32:	4293      	cmp	r3, r2
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 8006b34:	9114      	str	r1, [sp, #80]	@ 0x50
    startWrite();
 8006b36:	f040 812f 	bne.w	8006d98 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2e0>
    for (yy = 0; yy < h; yy++) {
 8006b3a:	2c00      	cmp	r4, #0
 8006b3c:	f000 80a9 	beq.w	8006c92 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1da>
 8006b40:	2700      	movs	r7, #0
 8006b42:	e9cd 4b12 	strd	r4, fp, [sp, #72]	@ 0x48
 8006b46:	9c03      	ldr	r4, [sp, #12]
 8006b48:	463e      	mov	r6, r7
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	463a      	mov	r2, r7
      for (xx = 0; xx < w; xx++) {
 8006b4e:	9b04      	ldr	r3, [sp, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 8098 	beq.w	8006c86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ce>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8006b56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b58:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
      for (xx = 0; xx < w; xx++) {
 8006b5c:	900e      	str	r0, [sp, #56]	@ 0x38
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8006b5e:	eb03 0800 	add.w	r8, r3, r0
 8006b62:	9b07      	ldr	r3, [sp, #28]
 8006b64:	fb08 1803 	mla	r8, r8, r3, r1
 8006b68:	fa0f f388 	sxth.w	r3, r8
      for (xx = 0; xx < w; xx++) {
 8006b6c:	46a3      	mov	fp, r4
 8006b6e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8006b72:	9303      	str	r3, [sp, #12]
      for (xx = 0; xx < w; xx++) {
 8006b74:	2500      	movs	r5, #0
 8006b76:	4614      	mov	r4, r2
 8006b78:	e006      	b.n	8006b88 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd0>
 8006b7a:	9b04      	ldr	r3, [sp, #16]
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	b2ed      	uxtb	r5, r5
        bits <<= 1;
 8006b80:	0076      	lsls	r6, r6, #1
      for (xx = 0; xx < w; xx++) {
 8006b82:	42ab      	cmp	r3, r5
        bits <<= 1;
 8006b84:	b2f6      	uxtb	r6, r6
      for (xx = 0; xx < w; xx++) {
 8006b86:	d977      	bls.n	8006c78 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1c0>
        if (!(bit++ & 7)) {
 8006b88:	4623      	mov	r3, r4
 8006b8a:	1c62      	adds	r2, r4, #1
 8006b8c:	b2d4      	uxtb	r4, r2
 8006b8e:	075a      	lsls	r2, r3, #29
 8006b90:	d105      	bne.n	8006b9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe6>
          bits = pgm_read_byte(&bitmap[bo++]);
 8006b92:	9a06      	ldr	r2, [sp, #24]
 8006b94:	9908      	ldr	r1, [sp, #32]
 8006b96:	1c53      	adds	r3, r2, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	5c8e      	ldrb	r6, [r1, r2]
 8006b9c:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 8006b9e:	0633      	lsls	r3, r6, #24
 8006ba0:	d5eb      	bpl.n	8006b7a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
          if (size_x == 1 && size_y == 1) {
 8006ba2:	9b05      	ldr	r3, [sp, #20]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006ba4:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
          if (size_x == 1 && size_y == 1) {
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d042      	beq.n	8006c32 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x17a>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8006bac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bae:	9a05      	ldr	r2, [sp, #20]
 8006bb0:	f8dc 901c 	ldr.w	r9, [ip, #28]
 8006bb4:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8006bb8:	442b      	add	r3, r5
 8006bba:	fb03 7702 	mla	r7, r3, r2, r7
 8006bbe:	b213      	sxth	r3, r2
 8006bc0:	4a82      	ldr	r2, [pc, #520]	@ (8006dcc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x314>)
 8006bc2:	4591      	cmp	r9, r2
 8006bc4:	b23f      	sxth	r7, r7
 8006bc6:	d14e      	bne.n	8006c66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ae>
  fillRect(x, y, w, h, color);
 8006bc8:	f8dc 9040 	ldr.w	r9, [ip, #64]	@ 0x40
 8006bcc:	4a80      	ldr	r2, [pc, #512]	@ (8006dd0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x318>)
 8006bce:	4591      	cmp	r9, r2
 8006bd0:	d149      	bne.n	8006c66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ae>
  startWrite();
 8006bd2:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8006bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d163      	bne.n	8006ca4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1ec>
  for (int16_t i = x; i < x + w; i++) {
 8006bdc:	9b05      	ldr	r3, [sp, #20]
 8006bde:	eb03 0907 	add.w	r9, r3, r7
 8006be2:	45b9      	cmp	r9, r7
 8006be4:	dd1b      	ble.n	8006c1e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x166>
 8006be6:	e9cd 450b 	strd	r4, r5, [sp, #44]	@ 0x2c
 8006bea:	e00a      	b.n	8006c02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x14a>
  drawFastVLine(x, y, h, color);
 8006bec:	f8cd b000 	str.w	fp, [sp]
 8006bf0:	f8dc 4038 	ldr.w	r4, [ip, #56]	@ 0x38
 8006bf4:	3701      	adds	r7, #1
  for (int16_t i = x; i < x + w; i++) {
 8006bf6:	b23f      	sxth	r7, r7
    writeFastVLine(i, y, h, color);
 8006bf8:	47a0      	blx	r4
  for (int16_t i = x; i < x + w; i++) {
 8006bfa:	45b9      	cmp	r9, r7
  endWrite();
 8006bfc:	f8da c000 	ldr.w	ip, [sl]
  for (int16_t i = x; i < x + w; i++) {
 8006c00:	dd0b      	ble.n	8006c1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x162>
    writeFastVLine(i, y, h, color);
 8006c02:	f8dc 4020 	ldr.w	r4, [ip, #32]
 8006c06:	4d73      	ldr	r5, [pc, #460]	@ (8006dd4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x31c>)
  drawFastVLine(x, y, h, color);
 8006c08:	9a03      	ldr	r2, [sp, #12]
 8006c0a:	42ac      	cmp	r4, r5
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	4643      	mov	r3, r8
 8006c10:	4650      	mov	r0, sl
 8006c12:	d0eb      	beq.n	8006bec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    writeFastVLine(i, y, h, color);
 8006c14:	f8cd b000 	str.w	fp, [sp]
 8006c18:	e7ec      	b.n	8006bf4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x13c>
 8006c1a:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
  endWrite();
 8006c1e:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006c22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d0a8      	beq.n	8006b7a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
 8006c28:	4650      	mov	r0, sl
 8006c2a:	4798      	blx	r3
    endWrite();
 8006c2c:	f8da c000 	ldr.w	ip, [sl]
 8006c30:	e7a3      	b.n	8006b7a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
          if (size_x == 1 && size_y == 1) {
 8006c32:	9b07      	ldr	r3, [sp, #28]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d1b9      	bne.n	8006bac <_ZN12Adafruit_GFX8drawCharEsshtthh+0xf4>
            writePixel(x + xo + xx, y + yo + yy, color);
 8006c38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c3a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006c3c:	18f9      	adds	r1, r7, r3
 8006c3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c40:	f8dc 7018 	ldr.w	r7, [ip, #24]
 8006c44:	189a      	adds	r2, r3, r2
 8006c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c48:	441a      	add	r2, r3
 8006c4a:	4b63      	ldr	r3, [pc, #396]	@ (8006dd8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x320>)
 8006c4c:	4429      	add	r1, r5
 8006c4e:	429f      	cmp	r7, r3
  drawPixel(x, y, color);
 8006c50:	bf08      	it	eq
 8006c52:	f8dc 7010 	ldreq.w	r7, [ip, #16]
            writePixel(x + xo + xx, y + yo + yy, color);
 8006c56:	b209      	sxth	r1, r1
 8006c58:	b212      	sxth	r2, r2
 8006c5a:	465b      	mov	r3, fp
 8006c5c:	4650      	mov	r0, sl
 8006c5e:	47b8      	blx	r7
    endWrite();
 8006c60:	f8da c000 	ldr.w	ip, [sl]
 8006c64:	e789      	b.n	8006b7a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8006c66:	e9cd 8b00 	strd	r8, fp, [sp]
 8006c6a:	9a03      	ldr	r2, [sp, #12]
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	4650      	mov	r0, sl
 8006c70:	47c8      	blx	r9
    endWrite();
 8006c72:	f8da c000 	ldr.w	ip, [sl]
 8006c76:	e780      	b.n	8006b7a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xc2>
        if (!(bit++ & 7)) {
 8006c78:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	@ 0x38
 8006c7c:	eb02 0e03 	add.w	lr, r2, r3
 8006c80:	465c      	mov	r4, fp
 8006c82:	fa5f f28e 	uxtb.w	r2, lr
    for (yy = 0; yy < h; yy++) {
 8006c86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c88:	3001      	adds	r0, #1
 8006c8a:	b2c0      	uxtb	r0, r0
 8006c8c:	4283      	cmp	r3, r0
 8006c8e:	f63f af5e 	bhi.w	8006b4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x96>
    endWrite();
 8006c92:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	f040 80d1 	bne.w	8006e40 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x388>
}
 8006c9e:	b017      	add	sp, #92	@ 0x5c
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
 8006ca4:	4650      	mov	r0, sl
 8006ca6:	4798      	blx	r3
  endWrite();
 8006ca8:	f8da c000 	ldr.w	ip, [sl]
 8006cac:	e796      	b.n	8006bdc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x124>
    if ((x >= _width) ||              // Clip right
 8006cae:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 8006cb2:	428a      	cmp	r2, r1
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	ddf2      	ble.n	8006c9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 8006cb8:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 8006cbc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006cbe:	428a      	cmp	r2, r1
 8006cc0:	dded      	ble.n	8006c9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8006cc2:	9805      	ldr	r0, [sp, #20]
 8006cc4:	2206      	movs	r2, #6
 8006cc6:	fb12 3200 	smlabb	r2, r2, r0, r3
        (y >= _height) ||             // Clip bottom
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	dde7      	ble.n	8006c9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8006cce:	9b07      	ldr	r3, [sp, #28]
 8006cd0:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	dde2      	ble.n	8006c9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
    if (!_cp437 && (c >= 176))
 8006cd8:	f89a 201c 	ldrb.w	r2, [sl, #28]
 8006cdc:	2a00      	cmp	r2, #0
 8006cde:	f000 80c7 	beq.w	8006e70 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3b8>
    startWrite();
 8006ce2:	f8da 0000 	ldr.w	r0, [sl]
 8006ce6:	4b38      	ldr	r3, [pc, #224]	@ (8006dc8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x310>)
 8006ce8:	6942      	ldr	r2, [r0, #20]
 8006cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cec:	429a      	cmp	r2, r3
 8006cee:	f040 80d6 	bne.w	8006e9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3e6>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006cf2:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 8006cf6:	4a39      	ldr	r2, [pc, #228]	@ (8006ddc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x324>)
            writePixel(x + i, y + j, color);
 8006cf8:	f8bd b044 	ldrh.w	fp, [sp, #68]	@ 0x44
 8006cfc:	9f05      	ldr	r7, [sp, #20]
 8006cfe:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8006d02:	f8cd 8010 	str.w	r8, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8006d06:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006d0a:	1d61      	adds	r1, r4, #5
 8006d0c:	b289      	uxth	r1, r1
 8006d0e:	442a      	add	r2, r5
            writePixel(x + i, y + j, color);
 8006d10:	910e      	str	r1, [sp, #56]	@ 0x38
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006d12:	46a4      	mov	ip, r4
            writePixel(x + i, y + j, color);
 8006d14:	4611      	mov	r1, r2
 8006d16:	940f      	str	r4, [sp, #60]	@ 0x3c
 8006d18:	4603      	mov	r3, r0
 8006d1a:	46a0      	mov	r8, r4
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006d1c:	fa0f f288 	sxth.w	r2, r8
 8006d20:	9206      	str	r2, [sp, #24]
 8006d22:	b23a      	sxth	r2, r7
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8006d24:	f811 6b01 	ldrb.w	r6, [r1], #1
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006d28:	9208      	str	r2, [sp, #32]
 8006d2a:	fa0f f289 	sxth.w	r2, r9
 8006d2e:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d30:	463a      	mov	r2, r7
 8006d32:	e9cd 810c 	strd	r8, r1, [sp, #48]	@ 0x30
 8006d36:	4657      	mov	r7, sl
 8006d38:	2408      	movs	r4, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8006d3a:	2500      	movs	r5, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006d3c:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8006d40:	4692      	mov	sl, r2
 8006d42:	e01a      	b.n	8006d7a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c2>
          if (size_x == 1 && size_y == 1)
 8006d44:	f1ba 0f01 	cmp.w	sl, #1
            writePixel(x + i, y + j, color);
 8006d48:	b2aa      	uxth	r2, r5
          if (size_x == 1 && size_y == 1)
 8006d4a:	d02a      	beq.n	8006da2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ea>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8006d4c:	fb19 f202 	smulbb	r2, r9, r2
 8006d50:	9903      	ldr	r1, [sp, #12]
 8006d52:	445a      	add	r2, fp
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006d54:	9101      	str	r1, [sp, #4]
 8006d56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d58:	9100      	str	r1, [sp, #0]
 8006d5a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8006d5e:	9906      	ldr	r1, [sp, #24]
 8006d60:	9b08      	ldr	r3, [sp, #32]
 8006d62:	b212      	sxth	r2, r2
 8006d64:	4638      	mov	r0, r7
 8006d66:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 8006d68:	683b      	ldr	r3, [r7, #0]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8006d6a:	3c01      	subs	r4, #1
 8006d6c:	3501      	adds	r5, #1
 8006d6e:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8006d72:	b26d      	sxtb	r5, r5
 8006d74:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d78:	d032      	beq.n	8006de0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x328>
        if (line & 1) {
 8006d7a:	07f1      	lsls	r1, r6, #31
 8006d7c:	d4e2      	bmi.n	8006d44 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x28c>
        } else if (bg != color) {
 8006d7e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8006d82:	428a      	cmp	r2, r1
 8006d84:	d0f1      	beq.n	8006d6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
          if (size_x == 1 && size_y == 1)
 8006d86:	f1ba 0f01 	cmp.w	sl, #1
            writePixel(x + i, y + j, color);
 8006d8a:	b2aa      	uxth	r2, r5
          if (size_x == 1 && size_y == 1)
 8006d8c:	d05d      	beq.n	8006e4a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x392>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8006d8e:	fb19 f202 	smulbb	r2, r9, r2
 8006d92:	9904      	ldr	r1, [sp, #16]
 8006d94:	445a      	add	r2, fp
 8006d96:	e7dd      	b.n	8006d54 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29c>
    startWrite();
 8006d98:	4650      	mov	r0, sl
 8006d9a:	4798      	blx	r3
    endWrite();
 8006d9c:	f8da c000 	ldr.w	ip, [sl]
 8006da0:	e6cb      	b.n	8006b3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
          if (size_x == 1 && size_y == 1)
 8006da2:	f1b9 0f01 	cmp.w	r9, #1
 8006da6:	d1d1      	bne.n	8006d4c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x294>
            writePixel(x + i, y + j, color);
 8006da8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8006dac:	480a      	ldr	r0, [pc, #40]	@ (8006dd8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x320>)
 8006dae:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8006db2:	4580      	cmp	r8, r0
 8006db4:	445a      	add	r2, fp
  drawPixel(x, y, color);
 8006db6:	bf08      	it	eq
 8006db8:	f8d3 8010 	ldreq.w	r8, [r3, #16]
            writePixel(x + i, y + j, color);
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	b212      	sxth	r2, r2
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	e7d0      	b.n	8006d6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
 8006dc8:	080064d1 	.word	0x080064d1
 8006dcc:	08006931 	.word	0x08006931
 8006dd0:	08006679 	.word	0x08006679
 8006dd4:	080064e5 	.word	0x080064e5
 8006dd8:	080064d5 	.word	0x080064d5
 8006ddc:	0800b270 	.word	0x0800b270
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8006de0:	e9dd 810c 	ldrd	r8, r1, [sp, #48]	@ 0x30
 8006de4:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 8006de8:	4652      	mov	r2, sl
 8006dea:	4490      	add	r8, r2
 8006dec:	46ba      	mov	sl, r7
 8006dee:	f10c 0c01 	add.w	ip, ip, #1
 8006df2:	4617      	mov	r7, r2
 8006df4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006df6:	fa1f fc8c 	uxth.w	ip, ip
 8006dfa:	4562      	cmp	r2, ip
 8006dfc:	fa1f f888 	uxth.w	r8, r8
 8006e00:	d18c      	bne.n	8006d1c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x264>
    if (bg != color) { // If opaque, draw vertical line for last column
 8006e02:	4618      	mov	r0, r3
 8006e04:	e9dd 3803 	ldrd	r3, r8, [sp, #12]
 8006e08:	4543      	cmp	r3, r8
 8006e0a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8006e0c:	d013      	beq.n	8006e36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x37e>
      if (size_x == 1 && size_y == 1)
 8006e0e:	9b05      	ldr	r3, [sp, #20]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d032      	beq.n	8006e7a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3c2>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8006e14:	9b07      	ldr	r3, [sp, #28]
 8006e16:	f8cd 8004 	str.w	r8, [sp, #4]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	69c5      	ldr	r5, [r0, #28]
 8006e20:	9805      	ldr	r0, [sp, #20]
 8006e22:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e24:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8006e28:	18e1      	adds	r1, r4, r3
 8006e2a:	b209      	sxth	r1, r1
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	4650      	mov	r0, sl
 8006e30:	47a8      	blx	r5
    endWrite();
 8006e32:	f8da 0000 	ldr.w	r0, [sl]
 8006e36:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	f43f af2f 	beq.w	8006c9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
    endWrite();
 8006e40:	4650      	mov	r0, sl
}
 8006e42:	b017      	add	sp, #92	@ 0x5c
 8006e44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 8006e48:	4718      	bx	r3
          if (size_x == 1 && size_y == 1)
 8006e4a:	f1b9 0f01 	cmp.w	r9, #1
 8006e4e:	d19e      	bne.n	8006d8e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d6>
            writePixel(x + i, y + j, bg);
 8006e50:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8006e54:	4814      	ldr	r0, [pc, #80]	@ (8006ea8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f0>)
 8006e56:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8006e5a:	4580      	cmp	r8, r0
 8006e5c:	445a      	add	r2, fp
  drawPixel(x, y, color);
 8006e5e:	bf08      	it	eq
 8006e60:	f8d3 8010 	ldreq.w	r8, [r3, #16]
            writePixel(x + i, y + j, bg);
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	b212      	sxth	r2, r2
 8006e68:	4638      	mov	r0, r7
 8006e6a:	47c0      	blx	r8
        writeFastVLine(x + 5, y, 8, bg);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	e77c      	b.n	8006d6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b2>
    if (!_cp437 && (c >= 176))
 8006e70:	2daf      	cmp	r5, #175	@ 0xaf
      c++; // Handle 'classic' charset behavior
 8006e72:	bf84      	itt	hi
 8006e74:	3501      	addhi	r5, #1
 8006e76:	b2ed      	uxtbhi	r5, r5
 8006e78:	e733      	b.n	8006ce2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x22a>
      if (size_x == 1 && size_y == 1)
 8006e7a:	9b07      	ldr	r3, [sp, #28]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d1c9      	bne.n	8006e14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x35c>
        writeFastVLine(x + 5, y, 8, bg);
 8006e80:	6a04      	ldr	r4, [r0, #32]
  drawFastVLine(x, y, h, color);
 8006e82:	f8cd 8000 	str.w	r8, [sp]
        writeFastVLine(x + 5, y, 8, bg);
 8006e86:	b211      	sxth	r1, r2
 8006e88:	4a08      	ldr	r2, [pc, #32]	@ (8006eac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>)
 8006e8a:	4294      	cmp	r4, r2
  drawFastVLine(x, y, h, color);
 8006e8c:	bf08      	it	eq
 8006e8e:	6b84      	ldreq	r4, [r0, #56]	@ 0x38
        writeFastVLine(x + 5, y, 8, bg);
 8006e90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e92:	4650      	mov	r0, sl
 8006e94:	2308      	movs	r3, #8
 8006e96:	47a0      	blx	r4
    endWrite();
 8006e98:	f8da 0000 	ldr.w	r0, [sl]
 8006e9c:	e7cb      	b.n	8006e36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x37e>
    startWrite();
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	4790      	blx	r2
            writePixel(x + i, y + j, color);
 8006ea2:	f8da 0000 	ldr.w	r0, [sl]
 8006ea6:	e724      	b.n	8006cf2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x23a>
 8006ea8:	080064d5 	.word	0x080064d5
 8006eac:	080064e5 	.word	0x080064e5

08006eb0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 8006eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb2:	4604      	mov	r4, r0
  if (!gfxFont) { // 'Classic' built-in font
 8006eb4:	6a00      	ldr	r0, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d047      	beq.n	8006f4e <_ZN12Adafruit_GFX5writeEh+0x9e>
    if (c == '\n') {
 8006ebe:	290a      	cmp	r1, #10
 8006ec0:	d03a      	beq.n	8006f38 <_ZN12Adafruit_GFX5writeEh+0x88>
    } else if (c != '\r') {
 8006ec2:	290d      	cmp	r1, #13
 8006ec4:	d040      	beq.n	8006f48 <_ZN12Adafruit_GFX5writeEh+0x98>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 8006ec6:	7a02      	ldrb	r2, [r0, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8006ec8:	4291      	cmp	r1, r2
 8006eca:	d33d      	bcc.n	8006f48 <_ZN12Adafruit_GFX5writeEh+0x98>
 8006ecc:	7a81      	ldrb	r1, [r0, #10]
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	d33a      	bcc.n	8006f48 <_ZN12Adafruit_GFX5writeEh+0x98>
  return gfxFont->glyph + c;
 8006ed2:	6845      	ldr	r5, [r0, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 8006ed4:	1a9a      	subs	r2, r3, r2
  return gfxFont->glyph + c;
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 8006edc:	78ae      	ldrb	r6, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8006ede:	b326      	cbz	r6, 8006f2a <_ZN12Adafruit_GFX5writeEh+0x7a>
 8006ee0:	78ea      	ldrb	r2, [r5, #3]
 8006ee2:	b312      	cbz	r2, 8006f2a <_ZN12Adafruit_GFX5writeEh+0x7a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8006ee4:	7ee7      	ldrb	r7, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8006ee6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8006eea:	f894 c018 	ldrb.w	ip, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 8006eee:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8006ef2:	f894 e019 	ldrb.w	lr, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8006ef6:	b17f      	cbz	r7, 8006f18 <_ZN12Adafruit_GFX5writeEh+0x68>
 8006ef8:	f995 7005 	ldrsb.w	r7, [r5, #5]
 8006efc:	443e      	add	r6, r7
 8006efe:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006f02:	fb0c 1606 	mla	r6, ip, r6, r1
 8006f06:	42be      	cmp	r6, r7
 8006f08:	dd06      	ble.n	8006f18 <_ZN12Adafruit_GFX5writeEh+0x68>
            cursor_x = 0;
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	8221      	strh	r1, [r4, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8006f0e:	7b00      	ldrb	r0, [r0, #12]
            cursor_y += (int16_t)textsize_y *
 8006f10:	fb00 200e 	mla	r0, r0, lr, r2
 8006f14:	b202      	sxth	r2, r0
 8006f16:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8006f18:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8006f1c:	8ae0      	ldrh	r0, [r4, #22]
 8006f1e:	9001      	str	r0, [sp, #4]
 8006f20:	8aa0      	ldrh	r0, [r4, #20]
 8006f22:	9000      	str	r0, [sp, #0]
 8006f24:	4620      	mov	r0, r4
 8006f26:	f7ff fdc7 	bl	8006ab8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8006f2a:	7929      	ldrb	r1, [r5, #4]
        cursor_x +=
 8006f2c:	8a23      	ldrh	r3, [r4, #16]
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8006f2e:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 8006f30:	fb01 3302 	mla	r3, r1, r2, r3
 8006f34:	8223      	strh	r3, [r4, #16]
 8006f36:	e007      	b.n	8006f48 <_ZN12Adafruit_GFX5writeEh+0x98>
      cursor_x = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	8223      	strh	r3, [r4, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8006f3c:	7b02      	ldrb	r2, [r0, #12]
      cursor_y +=
 8006f3e:	8a63      	ldrh	r3, [r4, #18]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8006f40:	7e61      	ldrb	r1, [r4, #25]
      cursor_y +=
 8006f42:	fb01 3302 	mla	r3, r1, r2, r3
 8006f46:	8263      	strh	r3, [r4, #18]
}
 8006f48:	2001      	movs	r0, #1
 8006f4a:	b005      	add	sp, #20
 8006f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c == '\n') {              // Newline?
 8006f4e:	290a      	cmp	r1, #10
 8006f50:	d02a      	beq.n	8006fa8 <_ZN12Adafruit_GFX5writeEh+0xf8>
    } else if (c != '\r') {       // Ignore carriage returns
 8006f52:	290d      	cmp	r1, #13
 8006f54:	d0f8      	beq.n	8006f48 <_ZN12Adafruit_GFX5writeEh+0x98>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8006f56:	7ee7      	ldrb	r7, [r4, #27]
 8006f58:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8006f5c:	7e25      	ldrb	r5, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 8006f5e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8006f62:	7e66      	ldrb	r6, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8006f64:	b16f      	cbz	r7, 8006f82 <_ZN12Adafruit_GFX5writeEh+0xd2>
 8006f66:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006f6a:	f04f 0c06 	mov.w	ip, #6
 8006f6e:	fb1c 1c05 	smlabb	ip, ip, r5, r1
 8006f72:	45bc      	cmp	ip, r7
 8006f74:	dd05      	ble.n	8006f82 <_ZN12Adafruit_GFX5writeEh+0xd2>
        cursor_y += textsize_y * 8; // advance y one line
 8006f76:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8006f7a:	b212      	sxth	r2, r2
        cursor_x = 0;                                       // Reset x to zero,
 8006f7c:	8220      	strh	r0, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 8006f7e:	8262      	strh	r2, [r4, #18]
 8006f80:	4601      	mov	r1, r0
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8006f82:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8006f86:	8ae0      	ldrh	r0, [r4, #22]
 8006f88:	9001      	str	r0, [sp, #4]
 8006f8a:	8aa0      	ldrh	r0, [r4, #20]
 8006f8c:	9000      	str	r0, [sp, #0]
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f7ff fd92 	bl	8006ab8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 8006f94:	7e23      	ldrb	r3, [r4, #24]
 8006f96:	8a22      	ldrh	r2, [r4, #16]
 8006f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006f9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}
 8006fa0:	2001      	movs	r0, #1
      cursor_x += textsize_x * 6; // Advance x one char
 8006fa2:	8223      	strh	r3, [r4, #16]
}
 8006fa4:	b005      	add	sp, #20
 8006fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cursor_y += textsize_y * 8; // advance y one line
 8006fa8:	8a63      	ldrh	r3, [r4, #18]
 8006faa:	7e62      	ldrb	r2, [r4, #25]
      cursor_x = 0;               // Reset x to zero,
 8006fac:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 8006fae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
}
 8006fb2:	2001      	movs	r0, #1
      cursor_y += textsize_y * 8; // advance y one line
 8006fb4:	8263      	strh	r3, [r4, #18]
}
 8006fb6:	b005      	add	sp, #20
 8006fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fba:	bf00      	nop

08006fbc <_ZN12Adafruit_GFX11setTextSizeEh>:
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8006fbc:	2901      	cmp	r1, #1
 8006fbe:	bf38      	it	cc
 8006fc0:	2101      	movcc	r1, #1
  textsize_x = (s_x > 0) ? s_x : 1;
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	f361 0307 	bfi	r3, r1, #0, #8
 8006fca:	f361 230f 	bfi	r3, r1, #8, #8
 8006fce:	8303      	strh	r3, [r0, #24]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop

08006fd4 <_ZN15Adafruit_SPITFT10startWriteEv>:
#else  // !HAS_PORT_SET_CLR
    *csPort &= csPinMaskClr;
#endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
//    digitalWrite(_cs, LOW);
    callback(SpiCmd::cs_low, 0, 0);
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006fd8:	4611      	mov	r1, r2
 8006fda:	2002      	movs	r0, #2
 8006fdc:	4718      	bx	r3
 8006fde:	bf00      	nop

08006fe0 <_ZN15Adafruit_SPITFT8endWriteEv>:
    callback(SpiCmd::cs_high, 0, 0);
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	2003      	movs	r0, #3
 8006fe8:	4718      	bx	r3
 8006fea:	bf00      	nop

08006fec <_ZN15Adafruit_SPITFT10writePixelEsst>:
    @param  x      Horizontal position (0 = left).
    @param  y      Vertical position   (0 = top).
    @param  color  16-bit pixel color in '565' RGB format.
*/
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8006fec:	2900      	cmp	r1, #0
 8006fee:	db1e      	blt.n	800702e <_ZN15Adafruit_SPITFT10writePixelEsst+0x42>
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	461c      	mov	r4, r3
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8006ff4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8006ff8:	428b      	cmp	r3, r1
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	4605      	mov	r5, r0
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 8006ffe:	dd14      	ble.n	800702a <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
 8007000:	2a00      	cmp	r2, #0
 8007002:	db12      	blt.n	800702a <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
 8007004:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8007008:	4293      	cmp	r3, r2
 800700a:	dd0e      	ble.n	800702a <_ZN15Adafruit_SPITFT10writePixelEsst+0x3e>
    setAddrWindow(x, y, 1, 1);
 800700c:	6806      	ldr	r6, [r0, #0]
 800700e:	2301      	movs	r3, #1
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	b292      	uxth	r2, r2
 8007014:	b289      	uxth	r1, r1
 8007016:	6d76      	ldr	r6, [r6, #84]	@ 0x54
 8007018:	47b0      	blx	r6
#endif
    TFT_WR_STROBE();
  }
#endif
  uint8_t data[2];
  data[0] = w >> 8;
 800701a:	ba63      	rev16	r3, r4
 800701c:	f8ad 300c 	strh.w	r3, [sp, #12]
  data[1] = w;
  callback(SpiCmd::transmit, data, 2);
 8007020:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8007022:	2202      	movs	r2, #2
 8007024:	a903      	add	r1, sp, #12
 8007026:	2006      	movs	r0, #6
 8007028:	47a0      	blx	r4
}
 800702a:	b004      	add	sp, #16
 800702c:	bd70      	pop	{r4, r5, r6, pc}
 800702e:	4770      	bx	lr

08007030 <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 8007030:	b530      	push	{r4, r5, lr}
  startWrite();
 8007032:	6803      	ldr	r3, [r0, #0]
 8007034:	4a1b      	ldr	r2, [pc, #108]	@ (80070a4 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x74>)
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	4293      	cmp	r3, r2
void Adafruit_SPITFT::invertDisplay(bool i) {
 800703a:	b083      	sub	sp, #12
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	d129      	bne.n	8007096 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x66>
    callback(SpiCmd::cs_low, 0, 0);
 8007042:	2200      	movs	r2, #0
 8007044:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007046:	4611      	mov	r1, r2
 8007048:	2002      	movs	r0, #2
 800704a:	4798      	blx	r3
  writeCommand(i ? invertOnCommand : invertOffCommand);
 800704c:	b305      	cbz	r5, 8007090 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x60>
 800704e:	f894 5028 	ldrb.w	r5, [r4, #40]	@ 0x28
#else  // !HAS_PORT_SET_CLR
    *dcPort &= dcPinMaskClr;
#endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
//    digitalWrite(_dc, LOW);
    callback(SpiCmd::dc_low, 0, 0);
 8007052:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007054:	2200      	movs	r2, #0
 8007056:	4611      	mov	r1, r2
 8007058:	2004      	movs	r0, #4
 800705a:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 800705c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800705e:	f88d 5007 	strb.w	r5, [sp, #7]
 8007062:	2201      	movs	r2, #1
 8007064:	f10d 0107 	add.w	r1, sp, #7
 8007068:	2006      	movs	r0, #6
 800706a:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 800706c:	2200      	movs	r2, #0
 800706e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007070:	4611      	mov	r1, r2
 8007072:	2005      	movs	r0, #5
 8007074:	4798      	blx	r3
  endWrite();
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	4a0b      	ldr	r2, [pc, #44]	@ (80070a8 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x78>)
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	4293      	cmp	r3, r2
 800707e:	d10c      	bne.n	800709a <_ZN15Adafruit_SPITFT13invertDisplayEb+0x6a>
    callback(SpiCmd::cs_high, 0, 0);
 8007080:	2200      	movs	r2, #0
 8007082:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007084:	4611      	mov	r1, r2
 8007086:	2003      	movs	r0, #3
}
 8007088:	b003      	add	sp, #12
 800708a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800708e:	4718      	bx	r3
  writeCommand(i ? invertOnCommand : invertOffCommand);
 8007090:	f894 5029 	ldrb.w	r5, [r4, #41]	@ 0x29
 8007094:	e7dd      	b.n	8007052 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x22>
  startWrite();
 8007096:	4798      	blx	r3
 8007098:	e7d8      	b.n	800704c <_ZN15Adafruit_SPITFT13invertDisplayEb+0x1c>
  endWrite();
 800709a:	4620      	mov	r0, r4
}
 800709c:	b003      	add	sp, #12
 800709e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  endWrite();
 80070a2:	4718      	bx	r3
 80070a4:	08006fd5 	.word	0x08006fd5
 80070a8:	08006fe1 	.word	0x08006fe1

080070ac <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
                                            uint16_t color) {
 80070ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b0:	b084      	sub	sp, #16
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 80070b2:	2900      	cmp	r1, #0
                                            uint16_t color) {
 80070b4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 80070b8:	db32      	blt.n	8007120 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 80070ba:	4606      	mov	r6, r0
 80070bc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80070c0:	4288      	cmp	r0, r1
 80070c2:	dd2d      	ble.n	8007120 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d02b      	beq.n	8007120 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
    if (h < 0) {                       // If negative height...
 80070c8:	da05      	bge.n	80070d6 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x2a>
      y += h + 1;                      //   Move Y to top edge
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3201      	adds	r2, #1
 80070ce:	441a      	add	r2, r3
      h = -h;                          //   Use positive height
 80070d0:	425b      	negs	r3, r3
      y += h + 1;                      //   Move Y to top edge
 80070d2:	b212      	sxth	r2, r2
      h = -h;                          //   Use positive height
 80070d4:	b21b      	sxth	r3, r3
    if (y < _height) { // Not off bottom
 80070d6:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
 80070da:	4290      	cmp	r0, r2
 80070dc:	dd20      	ble.n	8007120 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
      int16_t y2 = y + h - 1;
 80070de:	fa1f fc82 	uxth.w	ip, r2
 80070e2:	fa1f fe83 	uxth.w	lr, r3
 80070e6:	eb0c 070e 	add.w	r7, ip, lr
 80070ea:	b2bf      	uxth	r7, r7
 80070ec:	1e7c      	subs	r4, r7, #1
 80070ee:	b224      	sxth	r4, r4
      if (y2 >= 0) { // Not off top
 80070f0:	2c00      	cmp	r4, #0
 80070f2:	db15      	blt.n	8007120 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
        if (y < 0) {
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	da03      	bge.n	8007100 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
          h = y2 + 1;
 80070f8:	b23b      	sxth	r3, r7
 80070fa:	46be      	mov	lr, r7
 80070fc:	f04f 0c00 	mov.w	ip, #0
  setAddrWindow(x, y, w, h);
 8007100:	6832      	ldr	r2, [r6, #0]
        if (y2 >= _height) {
 8007102:	42a0      	cmp	r0, r4
  setAddrWindow(x, y, w, h);
 8007104:	f8d2 8054 	ldr.w	r8, [r2, #84]	@ 0x54
 8007108:	b289      	uxth	r1, r1
        if (y2 >= _height) {
 800710a:	dc0c      	bgt.n	8007126 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x7a>
          h = _height - y;
 800710c:	eba0 000c 	sub.w	r0, r0, ip
 8007110:	b287      	uxth	r7, r0
  setAddrWindow(x, y, w, h);
 8007112:	9700      	str	r7, [sp, #0]
 8007114:	4662      	mov	r2, ip
 8007116:	2301      	movs	r3, #1
 8007118:	4630      	mov	r0, r6
 800711a:	47c0      	blx	r8
  writeColor(color, (uint32_t)w * h);
 800711c:	b23c      	sxth	r4, r7
  if (!len)
 800711e:	b94f      	cbnz	r7, 8007134 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x88>
}
 8007120:	b004      	add	sp, #16
 8007122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  writeColor(color, (uint32_t)w * h);
 8007126:	461c      	mov	r4, r3
  setAddrWindow(x, y, w, h);
 8007128:	f8cd e000 	str.w	lr, [sp]
 800712c:	4662      	mov	r2, ip
 800712e:	2301      	movs	r3, #1
 8007130:	4630      	mov	r0, r6
 8007132:	47c0      	blx	r8
    while (len--) {
 8007134:	ba6d      	rev16	r5, r5
      callback(SpiCmd::transmit, data, 2);
 8007136:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8007138:	f8ad 500c 	strh.w	r5, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 800713c:	2202      	movs	r2, #2
 800713e:	a903      	add	r1, sp, #12
 8007140:	2006      	movs	r0, #6
 8007142:	4798      	blx	r3
    while (len--) {
 8007144:	3c01      	subs	r4, #1
 8007146:	d1f6      	bne.n	8007136 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x8a>
 8007148:	e7ea      	b.n	8007120 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x74>
 800714a:	bf00      	nop

0800714c <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
                                            uint16_t color) {
 800714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007150:	b084      	sub	sp, #16
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8007152:	2a00      	cmp	r2, #0
                                            uint16_t color) {
 8007154:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8007158:	db36      	blt.n	80071c8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 800715a:	461c      	mov	r4, r3
 800715c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8007160:	4293      	cmp	r3, r2
 8007162:	4606      	mov	r6, r0
 8007164:	dd30      	ble.n	80071c8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 8007166:	2c00      	cmp	r4, #0
 8007168:	d02e      	beq.n	80071c8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
    if (w < 0) {                        // If negative width...
 800716a:	da05      	bge.n	8007178 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x2c>
      x += w + 1;                       //   Move X to left edge
 800716c:	b2a4      	uxth	r4, r4
 800716e:	3101      	adds	r1, #1
 8007170:	4421      	add	r1, r4
      w = -w;                           //   Use positive width
 8007172:	4264      	negs	r4, r4
      x += w + 1;                       //   Move X to left edge
 8007174:	b209      	sxth	r1, r1
      w = -w;                           //   Use positive width
 8007176:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 8007178:	f9b6 000c 	ldrsh.w	r0, [r6, #12]
 800717c:	4288      	cmp	r0, r1
 800717e:	dd23      	ble.n	80071c8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
      int16_t x2 = x + w - 1;
 8007180:	fa1f fc81 	uxth.w	ip, r1
 8007184:	b2a3      	uxth	r3, r4
 8007186:	eb0c 0e03 	add.w	lr, ip, r3
 800718a:	fa1f fe8e 	uxth.w	lr, lr
 800718e:	f10e 37ff 	add.w	r7, lr, #4294967295
 8007192:	b23f      	sxth	r7, r7
      if (x2 >= 0) { // Not off left
 8007194:	2f00      	cmp	r7, #0
 8007196:	db17      	blt.n	80071c8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
        if (x < 0) {
 8007198:	2900      	cmp	r1, #0
 800719a:	da04      	bge.n	80071a6 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x5a>
          w = x2 + 1;
 800719c:	fa0f f48e 	sxth.w	r4, lr
 80071a0:	4673      	mov	r3, lr
 80071a2:	f04f 0c00 	mov.w	ip, #0
  setAddrWindow(x, y, w, h);
 80071a6:	6831      	ldr	r1, [r6, #0]
        if (x2 >= _width) {
 80071a8:	42b8      	cmp	r0, r7
  setAddrWindow(x, y, w, h);
 80071aa:	f8d1 8054 	ldr.w	r8, [r1, #84]	@ 0x54
 80071ae:	b292      	uxth	r2, r2
        if (x2 >= _width) {
 80071b0:	dc0d      	bgt.n	80071ce <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x82>
          w = _width - x;
 80071b2:	eba0 000c 	sub.w	r0, r0, ip
 80071b6:	b287      	uxth	r7, r0
  setAddrWindow(x, y, w, h);
 80071b8:	2301      	movs	r3, #1
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	4661      	mov	r1, ip
 80071be:	463b      	mov	r3, r7
 80071c0:	4630      	mov	r0, r6
 80071c2:	47c0      	blx	r8
  writeColor(color, (uint32_t)w * h);
 80071c4:	b23c      	sxth	r4, r7
  if (!len)
 80071c6:	b93f      	cbnz	r7, 80071d8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x8c>
}
 80071c8:	b004      	add	sp, #16
 80071ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  setAddrWindow(x, y, w, h);
 80071ce:	2001      	movs	r0, #1
 80071d0:	9000      	str	r0, [sp, #0]
 80071d2:	4661      	mov	r1, ip
 80071d4:	4630      	mov	r0, r6
 80071d6:	47c0      	blx	r8
    while (len--) {
 80071d8:	ba6d      	rev16	r5, r5
      callback(SpiCmd::transmit, data, 2);
 80071da:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 80071dc:	f8ad 500c 	strh.w	r5, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 80071e0:	2202      	movs	r2, #2
 80071e2:	a903      	add	r1, sp, #12
 80071e4:	2006      	movs	r0, #6
 80071e6:	4798      	blx	r3
    while (len--) {
 80071e8:	3c01      	subs	r4, #1
 80071ea:	d1f6      	bne.n	80071da <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x8e>
 80071ec:	e7ec      	b.n	80071c8 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x7c>
 80071ee:	bf00      	nop

080071f0 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80071f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 80071f2:	1e0c      	subs	r4, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80071f4:	b085      	sub	sp, #20
  if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 80071f6:	db33      	blt.n	8007260 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 80071f8:	461f      	mov	r7, r3
 80071fa:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80071fe:	42a3      	cmp	r3, r4
 8007200:	4605      	mov	r5, r0
 8007202:	dd2d      	ble.n	8007260 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 8007204:	2a00      	cmp	r2, #0
 8007206:	4616      	mov	r6, r2
 8007208:	db2a      	blt.n	8007260 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
 800720a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800720e:	4293      	cmp	r3, r2
 8007210:	dd26      	ble.n	8007260 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x70>
    startWrite();
 8007212:	6803      	ldr	r3, [r0, #0]
 8007214:	4a17      	ldr	r2, [pc, #92]	@ (8007274 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x84>)
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	4293      	cmp	r3, r2
 800721a:	d123      	bne.n	8007264 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x74>
    callback(SpiCmd::cs_low, 0, 0);
 800721c:	2200      	movs	r2, #0
 800721e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007220:	4611      	mov	r1, r2
 8007222:	2002      	movs	r0, #2
 8007224:	4798      	blx	r3
    setAddrWindow(x, y, 1, 1);
 8007226:	6828      	ldr	r0, [r5, #0]
 8007228:	2301      	movs	r3, #1
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	b2a1      	uxth	r1, r4
 800722e:	b2b2      	uxth	r2, r6
 8007230:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8007232:	4628      	mov	r0, r5
 8007234:	47a0      	blx	r4
  data[0] = w >> 8;
 8007236:	ba7b      	rev16	r3, r7
 8007238:	f8ad 300c 	strh.w	r3, [sp, #12]
  callback(SpiCmd::transmit, data, 2);
 800723c:	2202      	movs	r2, #2
 800723e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8007240:	a903      	add	r1, sp, #12
 8007242:	2006      	movs	r0, #6
 8007244:	47a0      	blx	r4
    endWrite();
 8007246:	682b      	ldr	r3, [r5, #0]
 8007248:	4a0b      	ldr	r2, [pc, #44]	@ (8007278 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x88>)
 800724a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724c:	4293      	cmp	r3, r2
 800724e:	d10b      	bne.n	8007268 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x78>
    callback(SpiCmd::cs_high, 0, 0);
 8007250:	2200      	movs	r2, #0
 8007252:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007254:	4611      	mov	r1, r2
 8007256:	2003      	movs	r0, #3
}
 8007258:	b005      	add	sp, #20
 800725a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800725e:	4718      	bx	r3
 8007260:	b005      	add	sp, #20
 8007262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    startWrite();
 8007264:	4798      	blx	r3
 8007266:	e7de      	b.n	8007226 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x36>
    endWrite();
 8007268:	4628      	mov	r0, r5
}
 800726a:	b005      	add	sp, #20
 800726c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    endWrite();
 8007270:	4718      	bx	r3
 8007272:	bf00      	nop
 8007274:	08006fd5 	.word	0x08006fd5
 8007278:	08006fe1 	.word	0x08006fe1

0800727c <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
                                    uint16_t color) {
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	b087      	sub	sp, #28
 8007282:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 8007286:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
  if (w && h) {   // Nonzero width and height?
 800728a:	2b00      	cmp	r3, #0
 800728c:	d06a      	beq.n	8007364 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
 800728e:	2e00      	cmp	r6, #0
 8007290:	d068      	beq.n	8007364 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
    if (w < 0) {  // If negative width...
 8007292:	2b00      	cmp	r3, #0
 8007294:	4605      	mov	r5, r0
 8007296:	461c      	mov	r4, r3
 8007298:	db67      	blt.n	800736a <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xee>
    if (x < _width) { // Not off right
 800729a:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 800729e:	4288      	cmp	r0, r1
 80072a0:	dd60      	ble.n	8007364 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
      if (h < 0) {    // If negative height...
 80072a2:	2e00      	cmp	r6, #0
 80072a4:	da05      	bge.n	80072b2 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x36>
        y += h + 1;   //   Move Y to top edge
 80072a6:	b2b6      	uxth	r6, r6
 80072a8:	3201      	adds	r2, #1
 80072aa:	4432      	add	r2, r6
        h = -h;       //   Use positive height
 80072ac:	4276      	negs	r6, r6
        y += h + 1;   //   Move Y to top edge
 80072ae:	b212      	sxth	r2, r2
        h = -h;       //   Use positive height
 80072b0:	b236      	sxth	r6, r6
      if (y < _height) { // Not off bottom
 80072b2:	f9b5 c00e 	ldrsh.w	ip, [r5, #14]
 80072b6:	4594      	cmp	ip, r2
 80072b8:	dd54      	ble.n	8007364 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
        int16_t x2 = x + w - 1;
 80072ba:	b2a3      	uxth	r3, r4
 80072bc:	fa1f fa81 	uxth.w	sl, r1
 80072c0:	eb0a 0803 	add.w	r8, sl, r3
 80072c4:	fa1f f888 	uxth.w	r8, r8
 80072c8:	f108 3eff 	add.w	lr, r8, #4294967295
 80072cc:	fa0f fe8e 	sxth.w	lr, lr
        if (x2 >= 0) { // Not off left
 80072d0:	f1be 0f00 	cmp.w	lr, #0
        int16_t x2 = x + w - 1;
 80072d4:	9302      	str	r3, [sp, #8]
        if (x2 >= 0) { // Not off left
 80072d6:	db45      	blt.n	8007364 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
          int16_t y2 = y + h - 1;
 80072d8:	b2b3      	uxth	r3, r6
 80072da:	fa1f fb82 	uxth.w	fp, r2
 80072de:	eb0b 0903 	add.w	r9, fp, r3
 80072e2:	9303      	str	r3, [sp, #12]
 80072e4:	fa1f f389 	uxth.w	r3, r9
 80072e8:	f103 39ff 	add.w	r9, r3, #4294967295
 80072ec:	fa0f f989 	sxth.w	r9, r9
          if (y2 >= 0) { // Not off top
 80072f0:	f1b9 0f00 	cmp.w	r9, #0
 80072f4:	db36      	blt.n	8007364 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
            if (x < 0) {
 80072f6:	2900      	cmp	r1, #0
 80072f8:	da05      	bge.n	8007306 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x8a>
              w = x2 + 1;
 80072fa:	fa0f f488 	sxth.w	r4, r8
 80072fe:	f8cd 8008 	str.w	r8, [sp, #8]
 8007302:	f04f 0a00 	mov.w	sl, #0
            if (y < 0) {
 8007306:	2a00      	cmp	r2, #0
 8007308:	da03      	bge.n	8007312 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x96>
              h = y2 + 1;
 800730a:	b21e      	sxth	r6, r3
 800730c:	9303      	str	r3, [sp, #12]
 800730e:	f04f 0b00 	mov.w	fp, #0
            if (x2 >= _width) {
 8007312:	4570      	cmp	r0, lr
 8007314:	dc04      	bgt.n	8007320 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xa4>
              w = _width - x;
 8007316:	eba0 000a 	sub.w	r0, r0, sl
 800731a:	b283      	uxth	r3, r0
 800731c:	9302      	str	r3, [sp, #8]
 800731e:	b204      	sxth	r4, r0
            if (y2 >= _height) {
 8007320:	45cc      	cmp	ip, r9
 8007322:	dc06      	bgt.n	8007332 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xb6>
              h = _height - y;
 8007324:	ebac 0c0b 	sub.w	ip, ip, fp
 8007328:	fa1f f38c 	uxth.w	r3, ip
 800732c:	9303      	str	r3, [sp, #12]
 800732e:	fa0f f68c 	sxth.w	r6, ip
  setAddrWindow(x, y, w, h);
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	6828      	ldr	r0, [r5, #0]
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	f8d0 8054 	ldr.w	r8, [r0, #84]	@ 0x54
 800733e:	465a      	mov	r2, fp
 8007340:	4651      	mov	r1, sl
 8007342:	4628      	mov	r0, r5
  writeColor(color, (uint32_t)w * h);
 8007344:	fb04 f606 	mul.w	r6, r4, r6
  setAddrWindow(x, y, w, h);
 8007348:	47c0      	blx	r8
  if (!len)
 800734a:	b15e      	cbz	r6, 8007364 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
    while (len--) {
 800734c:	3e01      	subs	r6, #1
 800734e:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 8007350:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8007352:	f8ad 7014 	strh.w	r7, [sp, #20]
    while (len--) {
 8007356:	3e01      	subs	r6, #1
      callback(SpiCmd::transmit, data, 2);
 8007358:	2202      	movs	r2, #2
 800735a:	a905      	add	r1, sp, #20
 800735c:	2006      	movs	r0, #6
 800735e:	4798      	blx	r3
    while (len--) {
 8007360:	1c73      	adds	r3, r6, #1
 8007362:	d1f5      	bne.n	8007350 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xd4>
}
 8007364:	b007      	add	sp, #28
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      x += w + 1; //   Move X to left edge
 800736a:	b29c      	uxth	r4, r3
 800736c:	3101      	adds	r1, #1
 800736e:	4421      	add	r1, r4
    if (x < _width) { // Not off right
 8007370:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
      x += w + 1; //   Move X to left edge
 8007374:	b209      	sxth	r1, r1
      w = -w;     //   Use positive width
 8007376:	4264      	negs	r4, r4
    if (x < _width) { // Not off right
 8007378:	4288      	cmp	r0, r1
      w = -w;     //   Use positive width
 800737a:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 800737c:	ddf2      	ble.n	8007364 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0xe8>
 800737e:	e790      	b.n	80072a2 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x26>

08007380 <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
                                    uint16_t color) {
 8007380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007384:	b085      	sub	sp, #20
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 8007386:	1e0c      	subs	r4, r1, #0
                                    uint16_t color) {
 8007388:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 800738c:	db55      	blt.n	800743a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
 800738e:	461d      	mov	r5, r3
 8007390:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8007394:	42a3      	cmp	r3, r4
 8007396:	4606      	mov	r6, r0
 8007398:	dd4f      	ble.n	800743a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
 800739a:	2d00      	cmp	r5, #0
 800739c:	d04d      	beq.n	800743a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
    if (h < 0) {                       // If negative height...
 800739e:	da05      	bge.n	80073ac <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
      y += h + 1;                      //   Move Y to top edge
 80073a0:	b2ab      	uxth	r3, r5
 80073a2:	3201      	adds	r2, #1
 80073a4:	441a      	add	r2, r3
      h = -h;                          //   Use positive height
 80073a6:	425b      	negs	r3, r3
      y += h + 1;                      //   Move Y to top edge
 80073a8:	b212      	sxth	r2, r2
      h = -h;                          //   Use positive height
 80073aa:	b21d      	sxth	r5, r3
    if (y < _height) { // Not off bottom
 80073ac:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 80073b0:	4293      	cmp	r3, r2
 80073b2:	dd42      	ble.n	800743a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
      int16_t y2 = y + h - 1;
 80073b4:	fa1f f882 	uxth.w	r8, r2
 80073b8:	fa1f f985 	uxth.w	r9, r5
 80073bc:	eb08 0009 	add.w	r0, r8, r9
 80073c0:	b280      	uxth	r0, r0
 80073c2:	1e41      	subs	r1, r0, #1
 80073c4:	b209      	sxth	r1, r1
      if (y2 >= 0) { // Not off top
 80073c6:	2900      	cmp	r1, #0
 80073c8:	db37      	blt.n	800743a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xba>
        if (y < 0) {
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	da03      	bge.n	80073d6 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x56>
          h = y2 + 1;
 80073ce:	b205      	sxth	r5, r0
 80073d0:	4681      	mov	r9, r0
 80073d2:	f04f 0800 	mov.w	r8, #0
        if (y2 >= _height) {
 80073d6:	428b      	cmp	r3, r1
 80073d8:	dc04      	bgt.n	80073e4 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x64>
          h = _height - y;
 80073da:	eba3 0308 	sub.w	r3, r3, r8
 80073de:	fa1f f983 	uxth.w	r9, r3
 80073e2:	b21d      	sxth	r5, r3
        startWrite();
 80073e4:	6833      	ldr	r3, [r6, #0]
 80073e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007450 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xd0>)
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d128      	bne.n	8007440 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xc0>
    callback(SpiCmd::cs_low, 0, 0);
 80073ee:	2200      	movs	r2, #0
 80073f0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80073f2:	4611      	mov	r1, r2
 80073f4:	2002      	movs	r0, #2
 80073f6:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 80073f8:	f8cd 9000 	str.w	r9, [sp]
 80073fc:	6833      	ldr	r3, [r6, #0]
 80073fe:	b2a1      	uxth	r1, r4
 8007400:	4642      	mov	r2, r8
 8007402:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8007404:	4630      	mov	r0, r6
 8007406:	2301      	movs	r3, #1
 8007408:	47a0      	blx	r4
  if (!len)
 800740a:	b14d      	cbz	r5, 8007420 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xa0>
 800740c:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 800740e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 8007410:	f8ad 700c 	strh.w	r7, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 8007414:	2202      	movs	r2, #2
 8007416:	a903      	add	r1, sp, #12
 8007418:	2006      	movs	r0, #6
 800741a:	4798      	blx	r3
    while (len--) {
 800741c:	3d01      	subs	r5, #1
 800741e:	d1f6      	bne.n	800740e <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x8e>
        endWrite();
 8007420:	6833      	ldr	r3, [r6, #0]
 8007422:	4a0c      	ldr	r2, [pc, #48]	@ (8007454 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xd4>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	4293      	cmp	r3, r2
 8007428:	d10d      	bne.n	8007446 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0xc6>
    callback(SpiCmd::cs_high, 0, 0);
 800742a:	2200      	movs	r2, #0
 800742c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800742e:	4611      	mov	r1, r2
 8007430:	2003      	movs	r0, #3
}
 8007432:	b005      	add	sp, #20
 8007434:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007438:	4718      	bx	r3
 800743a:	b005      	add	sp, #20
 800743c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        startWrite();
 8007440:	4630      	mov	r0, r6
 8007442:	4798      	blx	r3
 8007444:	e7d8      	b.n	80073f8 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x78>
        endWrite();
 8007446:	4630      	mov	r0, r6
}
 8007448:	b005      	add	sp, #20
 800744a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 800744e:	4718      	bx	r3
 8007450:	08006fd5 	.word	0x08006fd5
 8007454:	08006fe1 	.word	0x08006fe1

08007458 <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
                                    uint16_t color) {
 8007458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800745c:	b085      	sub	sp, #20
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 800745e:	1e14      	subs	r4, r2, #0
                                    uint16_t color) {
 8007460:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 8007464:	db55      	blt.n	8007512 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
 8007466:	461d      	mov	r5, r3
 8007468:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800746c:	42a3      	cmp	r3, r4
 800746e:	4606      	mov	r6, r0
 8007470:	dd4f      	ble.n	8007512 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
 8007472:	2d00      	cmp	r5, #0
 8007474:	d04d      	beq.n	8007512 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
    if (w < 0) {                        // If negative width...
 8007476:	da05      	bge.n	8007484 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
      x += w + 1;                       //   Move X to left edge
 8007478:	b2ab      	uxth	r3, r5
 800747a:	3101      	adds	r1, #1
 800747c:	4419      	add	r1, r3
      w = -w;                           //   Use positive width
 800747e:	425b      	negs	r3, r3
      x += w + 1;                       //   Move X to left edge
 8007480:	b209      	sxth	r1, r1
      w = -w;                           //   Use positive width
 8007482:	b21d      	sxth	r5, r3
    if (x < _width) { // Not off right
 8007484:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
 8007488:	428a      	cmp	r2, r1
 800748a:	dd42      	ble.n	8007512 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
      int16_t x2 = x + w - 1;
 800748c:	fa1f f881 	uxth.w	r8, r1
 8007490:	fa1f f985 	uxth.w	r9, r5
 8007494:	eb08 0009 	add.w	r0, r8, r9
 8007498:	b280      	uxth	r0, r0
 800749a:	1e43      	subs	r3, r0, #1
 800749c:	b21b      	sxth	r3, r3
      if (x2 >= 0) { // Not off left
 800749e:	2b00      	cmp	r3, #0
 80074a0:	db37      	blt.n	8007512 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xba>
        if (x < 0) {
 80074a2:	2900      	cmp	r1, #0
 80074a4:	da03      	bge.n	80074ae <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x56>
          w = x2 + 1;
 80074a6:	b205      	sxth	r5, r0
 80074a8:	4681      	mov	r9, r0
 80074aa:	f04f 0800 	mov.w	r8, #0
        if (x2 >= _width) {
 80074ae:	429a      	cmp	r2, r3
 80074b0:	dc04      	bgt.n	80074bc <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x64>
          w = _width - x;
 80074b2:	eba2 0208 	sub.w	r2, r2, r8
 80074b6:	fa1f f982 	uxth.w	r9, r2
 80074ba:	b215      	sxth	r5, r2
        startWrite();
 80074bc:	6833      	ldr	r3, [r6, #0]
 80074be:	4a1a      	ldr	r2, [pc, #104]	@ (8007528 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xd0>)
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d128      	bne.n	8007518 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xc0>
    callback(SpiCmd::cs_low, 0, 0);
 80074c6:	2200      	movs	r2, #0
 80074c8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80074ca:	4611      	mov	r1, r2
 80074cc:	2002      	movs	r0, #2
 80074ce:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 80074d0:	6830      	ldr	r0, [r6, #0]
 80074d2:	b2a2      	uxth	r2, r4
 80074d4:	2401      	movs	r4, #1
 80074d6:	9400      	str	r4, [sp, #0]
 80074d8:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80074da:	464b      	mov	r3, r9
 80074dc:	4641      	mov	r1, r8
 80074de:	4630      	mov	r0, r6
 80074e0:	47a0      	blx	r4
  if (!len)
 80074e2:	b14d      	cbz	r5, 80074f8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xa0>
 80074e4:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 80074e6:	6b33      	ldr	r3, [r6, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 80074e8:	f8ad 700c 	strh.w	r7, [sp, #12]
      callback(SpiCmd::transmit, data, 2);
 80074ec:	2202      	movs	r2, #2
 80074ee:	a903      	add	r1, sp, #12
 80074f0:	2006      	movs	r0, #6
 80074f2:	4798      	blx	r3
    while (len--) {
 80074f4:	3d01      	subs	r5, #1
 80074f6:	d1f6      	bne.n	80074e6 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x8e>
        endWrite();
 80074f8:	6833      	ldr	r3, [r6, #0]
 80074fa:	4a0c      	ldr	r2, [pc, #48]	@ (800752c <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xd4>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	4293      	cmp	r3, r2
 8007500:	d10d      	bne.n	800751e <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0xc6>
    callback(SpiCmd::cs_high, 0, 0);
 8007502:	2200      	movs	r2, #0
 8007504:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8007506:	4611      	mov	r1, r2
 8007508:	2003      	movs	r0, #3
}
 800750a:	b005      	add	sp, #20
 800750c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007510:	4718      	bx	r3
 8007512:	b005      	add	sp, #20
 8007514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        startWrite();
 8007518:	4630      	mov	r0, r6
 800751a:	4798      	blx	r3
 800751c:	e7d8      	b.n	80074d0 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x78>
        endWrite();
 800751e:	4630      	mov	r0, r6
}
 8007520:	b005      	add	sp, #20
 8007522:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 8007526:	4718      	bx	r3
 8007528:	08006fd5 	.word	0x08006fd5
 800752c:	08006fe1 	.word	0x08006fe1

08007530 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
                               uint16_t color) {
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	b087      	sub	sp, #28
 8007536:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 800753a:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
  if (w && h) {   // Nonzero width and height?
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 8081 	beq.w	8007646 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
 8007544:	2e00      	cmp	r6, #0
 8007546:	d07e      	beq.n	8007646 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
    if (w < 0) {  // If negative width...
 8007548:	2b00      	cmp	r3, #0
 800754a:	4605      	mov	r5, r0
 800754c:	461c      	mov	r4, r3
 800754e:	db7d      	blt.n	800764c <_ZN15Adafruit_SPITFT8fillRectEsssst+0x11c>
    if (x < _width) { // Not off right
 8007550:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8007554:	428b      	cmp	r3, r1
 8007556:	dd76      	ble.n	8007646 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
      if (h < 0) {    // If negative height...
 8007558:	2e00      	cmp	r6, #0
 800755a:	da05      	bge.n	8007568 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x38>
        y += h + 1;   //   Move Y to top edge
 800755c:	b2b6      	uxth	r6, r6
 800755e:	3201      	adds	r2, #1
 8007560:	4432      	add	r2, r6
        h = -h;       //   Use positive height
 8007562:	4276      	negs	r6, r6
        y += h + 1;   //   Move Y to top edge
 8007564:	b212      	sxth	r2, r2
        h = -h;       //   Use positive height
 8007566:	b236      	sxth	r6, r6
      if (y < _height) { // Not off bottom
 8007568:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
 800756c:	9002      	str	r0, [sp, #8]
 800756e:	4290      	cmp	r0, r2
 8007570:	dd69      	ble.n	8007646 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
        int16_t x2 = x + w - 1;
 8007572:	fa1f f881 	uxth.w	r8, r1
 8007576:	fa1f fa84 	uxth.w	sl, r4
 800757a:	eb08 0e0a 	add.w	lr, r8, sl
 800757e:	fa1f fe8e 	uxth.w	lr, lr
 8007582:	f10e 3cff 	add.w	ip, lr, #4294967295
 8007586:	fa0f fc8c 	sxth.w	ip, ip
        if (x2 >= 0) { // Not off left
 800758a:	f1bc 0f00 	cmp.w	ip, #0
 800758e:	db5a      	blt.n	8007646 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
          int16_t y2 = y + h - 1;
 8007590:	b2b0      	uxth	r0, r6
 8007592:	fa1f f982 	uxth.w	r9, r2
 8007596:	eb09 0b00 	add.w	fp, r9, r0
 800759a:	9003      	str	r0, [sp, #12]
 800759c:	fa1f f08b 	uxth.w	r0, fp
 80075a0:	f100 3bff 	add.w	fp, r0, #4294967295
 80075a4:	fa0f fb8b 	sxth.w	fp, fp
          if (y2 >= 0) { // Not off top
 80075a8:	f1bb 0f00 	cmp.w	fp, #0
 80075ac:	db4b      	blt.n	8007646 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
            if (x < 0) {
 80075ae:	2900      	cmp	r1, #0
 80075b0:	da04      	bge.n	80075bc <_ZN15Adafruit_SPITFT8fillRectEsssst+0x8c>
              w = x2 + 1;
 80075b2:	fa0f f48e 	sxth.w	r4, lr
 80075b6:	46f2      	mov	sl, lr
 80075b8:	f04f 0800 	mov.w	r8, #0
            if (y < 0) {
 80075bc:	2a00      	cmp	r2, #0
 80075be:	da03      	bge.n	80075c8 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x98>
              h = y2 + 1;
 80075c0:	b206      	sxth	r6, r0
 80075c2:	9003      	str	r0, [sp, #12]
 80075c4:	f04f 0900 	mov.w	r9, #0
            if (x2 >= _width) {
 80075c8:	4563      	cmp	r3, ip
 80075ca:	dc04      	bgt.n	80075d6 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xa6>
              w = _width - x;
 80075cc:	eba3 0308 	sub.w	r3, r3, r8
 80075d0:	fa1f fa83 	uxth.w	sl, r3
 80075d4:	b21c      	sxth	r4, r3
            if (y2 >= _height) {
 80075d6:	9b02      	ldr	r3, [sp, #8]
 80075d8:	455b      	cmp	r3, fp
 80075da:	dc04      	bgt.n	80075e6 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xb6>
              h = _height - y;
 80075dc:	eba3 0009 	sub.w	r0, r3, r9
 80075e0:	b283      	uxth	r3, r0
 80075e2:	9303      	str	r3, [sp, #12]
 80075e4:	b206      	sxth	r6, r0
            startWrite();
 80075e6:	682b      	ldr	r3, [r5, #0]
 80075e8:	4a22      	ldr	r2, [pc, #136]	@ (8007674 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x144>)
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d138      	bne.n	8007662 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x132>
    callback(SpiCmd::cs_low, 0, 0);
 80075f0:	2200      	movs	r2, #0
 80075f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80075f4:	4611      	mov	r1, r2
 80075f6:	2002      	movs	r0, #2
 80075f8:	4798      	blx	r3
  setAddrWindow(x, y, w, h);
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	6828      	ldr	r0, [r5, #0]
 8007600:	4641      	mov	r1, r8
 8007602:	4653      	mov	r3, sl
 8007604:	f8d0 8054 	ldr.w	r8, [r0, #84]	@ 0x54
 8007608:	464a      	mov	r2, r9
 800760a:	4628      	mov	r0, r5
  writeColor(color, (uint32_t)w * h);
 800760c:	fb04 f606 	mul.w	r6, r4, r6
  setAddrWindow(x, y, w, h);
 8007610:	47c0      	blx	r8
  if (!len)
 8007612:	b15e      	cbz	r6, 800762c <_ZN15Adafruit_SPITFT8fillRectEsssst+0xfc>
    while (len--) {
 8007614:	3e01      	subs	r6, #1
 8007616:	ba7f      	rev16	r7, r7
      callback(SpiCmd::transmit, data, 2);
 8007618:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      uint8_t data[2] = {hi, lo};
 800761a:	f8ad 7014 	strh.w	r7, [sp, #20]
    while (len--) {
 800761e:	3e01      	subs	r6, #1
      callback(SpiCmd::transmit, data, 2);
 8007620:	2202      	movs	r2, #2
 8007622:	a905      	add	r1, sp, #20
 8007624:	2006      	movs	r0, #6
 8007626:	4798      	blx	r3
    while (len--) {
 8007628:	1c73      	adds	r3, r6, #1
 800762a:	d1f5      	bne.n	8007618 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xe8>
            endWrite();
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	4a12      	ldr	r2, [pc, #72]	@ (8007678 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x148>)
 8007630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007632:	4293      	cmp	r3, r2
 8007634:	d118      	bne.n	8007668 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x138>
    callback(SpiCmd::cs_high, 0, 0);
 8007636:	2200      	movs	r2, #0
 8007638:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800763a:	4611      	mov	r1, r2
 800763c:	2003      	movs	r0, #3
}
 800763e:	b007      	add	sp, #28
 8007640:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	4718      	bx	r3
 8007646:	b007      	add	sp, #28
 8007648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      x += w + 1; //   Move X to left edge
 800764c:	b29c      	uxth	r4, r3
 800764e:	3101      	adds	r1, #1
 8007650:	4421      	add	r1, r4
    if (x < _width) { // Not off right
 8007652:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
      x += w + 1; //   Move X to left edge
 8007656:	b209      	sxth	r1, r1
      w = -w;     //   Use positive width
 8007658:	4264      	negs	r4, r4
    if (x < _width) { // Not off right
 800765a:	428b      	cmp	r3, r1
      w = -w;     //   Use positive width
 800765c:	b224      	sxth	r4, r4
    if (x < _width) { // Not off right
 800765e:	ddf2      	ble.n	8007646 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x116>
 8007660:	e77a      	b.n	8007558 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x28>
            startWrite();
 8007662:	4628      	mov	r0, r5
 8007664:	4798      	blx	r3
 8007666:	e7c8      	b.n	80075fa <_ZN15Adafruit_SPITFT8fillRectEsssst+0xca>
            endWrite();
 8007668:	4628      	mov	r0, r5
}
 800766a:	b007      	add	sp, #28
 800766c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            endWrite();
 8007670:	4718      	bx	r3
 8007672:	bf00      	nop
 8007674:	08006fd5 	.word	0x08006fd5
 8007678:	08006fe1 	.word	0x08006fe1

0800767c <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 800767c:	b538      	push	{r3, r4, r5, lr}
    : Adafruit_GFX(w, h), callback(callback)
 800767e:	b212      	sxth	r2, r2
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 8007680:	4604      	mov	r4, r0
    : Adafruit_GFX(w, h), callback(callback)
 8007682:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, CallbackType callback)
 8007684:	461d      	mov	r5, r3
    : Adafruit_GFX(w, h), callback(callback)
 8007686:	f7ff f9fb 	bl	8006a80 <_ZN12Adafruit_GFXC1Ess>
 800768a:	2300      	movs	r3, #0
 800768c:	4a03      	ldr	r2, [pc, #12]	@ (800769c <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE+0x20>)
 800768e:	8523      	strh	r3, [r4, #40]	@ 0x28
 8007690:	e9c4 350b 	strd	r3, r5, [r4, #44]	@ 0x2c
 8007694:	6022      	str	r2, [r4, #0]
 8007696:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8007698:	4620      	mov	r0, r4
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	0800b778 	.word	0x0800b778

080076a0 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>:
                                  uint8_t numDataBytes) {
 80076a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076a2:	4605      	mov	r5, r0
 80076a4:	4614      	mov	r4, r2
    callback(SpiCmd::cs_low, 0, 0);
 80076a6:	2200      	movs	r2, #0
 80076a8:	b083      	sub	sp, #12
 80076aa:	460f      	mov	r7, r1
 80076ac:	461e      	mov	r6, r3
 80076ae:	4611      	mov	r1, r2
 80076b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80076b2:	2002      	movs	r0, #2
 80076b4:	4798      	blx	r3
    callback(SpiCmd::dc_low, 0, 0);
 80076b6:	2200      	movs	r2, #0
 80076b8:	4611      	mov	r1, r2
 80076ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80076bc:	2004      	movs	r0, #4
 80076be:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 80076c0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80076c2:	f88d 7007 	strb.w	r7, [sp, #7]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f10d 0107 	add.w	r1, sp, #7
 80076cc:	2006      	movs	r0, #6
 80076ce:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 80076d0:	2200      	movs	r2, #0
 80076d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80076d4:	4611      	mov	r1, r2
 80076d6:	2005      	movs	r0, #5
 80076d8:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 80076da:	b166      	cbz	r6, 80076f6 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x56>
 80076dc:	4426      	add	r6, r4
      spiWrite(*dataBytes); // Send the data bytes
 80076de:	f814 2b01 	ldrb.w	r2, [r4], #1
 80076e2:	f88d 2007 	strb.w	r2, [sp, #7]
  callback(SpiCmd::transmit, &b, 1);
 80076e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80076e8:	2201      	movs	r2, #1
 80076ea:	f10d 0107 	add.w	r1, sp, #7
 80076ee:	2006      	movs	r0, #6
 80076f0:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 80076f2:	42a6      	cmp	r6, r4
 80076f4:	d1f3      	bne.n	80076de <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x3e>
    callback(SpiCmd::cs_high, 0, 0);
 80076f6:	2200      	movs	r2, #0
 80076f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80076fa:	4611      	mov	r1, r2
 80076fc:	2003      	movs	r0, #3
}
 80076fe:	b003      	add	sp, #12
 8007700:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007704:	4718      	bx	r3
 8007706:	bf00      	nop

08007708 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>:
                                  uint8_t numDataBytes) {
 8007708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770a:	4605      	mov	r5, r0
 800770c:	4614      	mov	r4, r2
    callback(SpiCmd::cs_low, 0, 0);
 800770e:	2200      	movs	r2, #0
 8007710:	b083      	sub	sp, #12
 8007712:	460f      	mov	r7, r1
 8007714:	461e      	mov	r6, r3
 8007716:	4611      	mov	r1, r2
 8007718:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800771a:	2002      	movs	r0, #2
 800771c:	4798      	blx	r3
    callback(SpiCmd::dc_low, 0, 0);
 800771e:	2200      	movs	r2, #0
 8007720:	4611      	mov	r1, r2
 8007722:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007724:	2004      	movs	r0, #4
 8007726:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8007728:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800772a:	f88d 7007 	strb.w	r7, [sp, #7]
 800772e:	2201      	movs	r2, #1
 8007730:	f10d 0107 	add.w	r1, sp, #7
 8007734:	2006      	movs	r0, #6
 8007736:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8007738:	2200      	movs	r2, #0
 800773a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800773c:	4611      	mov	r1, r2
 800773e:	2005      	movs	r0, #5
 8007740:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 8007742:	b166      	cbz	r6, 800775e <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x56>
 8007744:	4426      	add	r6, r4
      spiWrite(pgm_read_byte(dataBytes++));
 8007746:	f814 2b01 	ldrb.w	r2, [r4], #1
 800774a:	f88d 2007 	strb.w	r2, [sp, #7]
  callback(SpiCmd::transmit, &b, 1);
 800774e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007750:	2201      	movs	r2, #1
 8007752:	f10d 0107 	add.w	r1, sp, #7
 8007756:	2006      	movs	r0, #6
 8007758:	4798      	blx	r3
  for (int i = 0; i < numDataBytes; i++) {
 800775a:	42a6      	cmp	r6, r4
 800775c:	d1f3      	bne.n	8007746 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x3e>
    callback(SpiCmd::cs_high, 0, 0);
 800775e:	2200      	movs	r2, #0
 8007760:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007762:	4611      	mov	r1, r2
 8007764:	2003      	movs	r0, #3
}
 8007766:	b003      	add	sp, #12
 8007768:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800776c:	4718      	bx	r3
 800776e:	bf00      	nop

08007770 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 8007770:	b530      	push	{r4, r5, lr}
 8007772:	4604      	mov	r4, r0
    callback(SpiCmd::dc_low, 0, 0);
 8007774:	2200      	movs	r2, #0
 8007776:	b083      	sub	sp, #12
 8007778:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800777a:	460d      	mov	r5, r1
 800777c:	2004      	movs	r0, #4
 800777e:	4611      	mov	r1, r2
 8007780:	4798      	blx	r3
  callback(SpiCmd::transmit, &b, 1);
 8007782:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007784:	f88d 5007 	strb.w	r5, [sp, #7]
 8007788:	f10d 0107 	add.w	r1, sp, #7
 800778c:	2201      	movs	r2, #1
 800778e:	2006      	movs	r0, #6
 8007790:	4798      	blx	r3
    callback(SpiCmd::dc_high, 0, 0);
 8007792:	2200      	movs	r2, #0
 8007794:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007796:	4611      	mov	r1, r2
 8007798:	2005      	movs	r0, #5
}
 800779a:	b003      	add	sp, #12
 800779c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077a0:	4718      	bx	r3
 80077a2:	bf00      	nop

080077a4 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
            parallel; name was maintaned for backward compatibility. Naming
            is also not consistent with the 8-bit version, spiWrite().
            Sorry about that. Again, staying compatible with outside code.
    @param  l  32-bit value to write.
*/
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 80077a4:	b500      	push	{lr}
 80077a6:	b083      	sub	sp, #12
  uint8_t data[4];
  data[0] = l >> 24;
  data[1] = l >> 16;
  data[2] = l >> 8;
  data[3] = l;
  callback(SpiCmd::transmit, data, 4);
 80077a8:	2204      	movs	r2, #4
 80077aa:	ba09      	rev	r1, r1
 80077ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  data[0] = l >> 24;
 80077ae:	9101      	str	r1, [sp, #4]
  callback(SpiCmd::transmit, data, 4);
 80077b0:	2006      	movs	r0, #6
 80077b2:	eb0d 0102 	add.w	r1, sp, r2
 80077b6:	4798      	blx	r3
}
 80077b8:	b003      	add	sp, #12
 80077ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80077be:	bf00      	nop

080077c0 <_ZN15Adafruit_ST778911setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
 80077c0:	b510      	push	{r4, lr}
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 80077c2:	f001 0103 	and.w	r1, r1, #3
void Adafruit_ST7789::setRotation(uint8_t m) {
 80077c6:	b082      	sub	sp, #8
  uint8_t madctl = 0;
 80077c8:	2300      	movs	r3, #0

  switch (rotation) {
 80077ca:	2902      	cmp	r1, #2
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
    _xstart = _colstart;
    _ystart = _rowstart;
    _width = windowWidth;
 80077cc:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80077ce:	f9b0 2038 	ldrsh.w	r2, [r0, #56]	@ 0x38
    _height = windowHeight;
 80077d2:	f9b0 c03a 	ldrsh.w	ip, [r0, #58]	@ 0x3a
  uint8_t madctl = 0;
 80077d6:	f88d 3007 	strb.w	r3, [sp, #7]
  rotation = m & 3; // can't be higher than 3
 80077da:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 80077dc:	d015      	beq.n	800780a <_ZN15Adafruit_ST778911setRotationEh+0x4a>
 80077de:	2903      	cmp	r1, #3
 80077e0:	d028      	beq.n	8007834 <_ZN15Adafruit_ST778911setRotationEh+0x74>
 80077e2:	2901      	cmp	r1, #1
 80077e4:	d019      	beq.n	800781a <_ZN15Adafruit_ST778911setRotationEh+0x5a>
    _xstart = _colstart;
 80077e6:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _ystart = _rowstart;
 80077ea:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
    _xstart = _colstart;
 80077ee:	8482      	strh	r2, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80077f0:	21c0      	movs	r1, #192	@ 0xc0
 80077f2:	f88d 1007 	strb.w	r1, [sp, #7]
    _ystart = _rowstart;
 80077f6:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _width = windowWidth;
 80077f8:	60c4      	str	r4, [r0, #12]
    _height = windowWidth;
    _width = windowHeight;
    break;
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80077fa:	2301      	movs	r3, #1
 80077fc:	f10d 0207 	add.w	r2, sp, #7
 8007800:	2136      	movs	r1, #54	@ 0x36
 8007802:	f7ff ff4d 	bl	80076a0 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 8007806:	b002      	add	sp, #8
 8007808:	bd10      	pop	{r4, pc}
    _xstart = _colstart2;
 800780a:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
    _ystart = _rowstart2;
 800780e:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
    _xstart = _colstart2;
 8007812:	8482      	strh	r2, [r0, #36]	@ 0x24
    _ystart = _rowstart2;
 8007814:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _width = windowWidth;
 8007816:	60c4      	str	r4, [r0, #12]
    break;
 8007818:	e7ef      	b.n	80077fa <_ZN15Adafruit_ST778911setRotationEh+0x3a>
    _xstart = _rowstart;
 800781a:	f890 1035 	ldrb.w	r1, [r0, #53]	@ 0x35
    _ystart = _colstart2;
 800781e:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
    _xstart = _rowstart;
 8007822:	8481      	strh	r1, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8007824:	24a0      	movs	r4, #160	@ 0xa0
 8007826:	f88d 4007 	strb.w	r4, [sp, #7]
    _ystart = _colstart2;
 800782a:	84c3      	strh	r3, [r0, #38]	@ 0x26
    _height = windowWidth;
 800782c:	81c2      	strh	r2, [r0, #14]
    _width = windowHeight;
 800782e:	f8a0 c00c 	strh.w	ip, [r0, #12]
    break;
 8007832:	e7e2      	b.n	80077fa <_ZN15Adafruit_ST778911setRotationEh+0x3a>
    _width = windowHeight;
 8007834:	f36c 030f 	bfi	r3, ip, #0, #16
 8007838:	f362 431f 	bfi	r3, r2, #16, #16
    _xstart = _rowstart2;
 800783c:	f890 1037 	ldrb.w	r1, [r0, #55]	@ 0x37
    _ystart = _colstart;
 8007840:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _xstart = _rowstart2;
 8007844:	8481      	strh	r1, [r0, #36]	@ 0x24
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 8007846:	2460      	movs	r4, #96	@ 0x60
 8007848:	f88d 4007 	strb.w	r4, [sp, #7]
    _ystart = _colstart;
 800784c:	84c2      	strh	r2, [r0, #38]	@ 0x26
    _width = windowHeight;
 800784e:	60c3      	str	r3, [r0, #12]
    break;
 8007850:	e7d3      	b.n	80077fa <_ZN15Adafruit_ST778911setRotationEh+0x3a>
 8007852:	bf00      	nop

08007854 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>:
Adafruit_ST7789::Adafruit_ST7789(uint16_t w, uint16_t h, Adafruit_SPITFT::CallbackType callback)
 8007854:	b510      	push	{r4, lr}
 8007856:	4604      	mov	r4, r0
  : Adafruit_ST77xx(w, h, callback)
 8007858:	f000 f8cc 	bl	80079f4 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>
 800785c:	2300      	movs	r3, #0
 800785e:	4a02      	ldr	r2, [pc, #8]	@ (8007868 <_ZN15Adafruit_ST7789C1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE+0x14>)
 8007860:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8007862:	6022      	str	r2, [r4, #0]
}
 8007864:	4620      	mov	r0, r4
 8007866:	bd10      	pop	{r4, pc}
 8007868:	0800b7d8 	.word	0x0800b7d8

0800786c <_ZN15Adafruit_ST77894initEtt>:
    ) {
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	460d      	mov	r5, r1
 8007870:	b082      	sub	sp, #8
  commonInit(NULL);
 8007872:	2100      	movs	r1, #0
    ) {
 8007874:	4604      	mov	r4, r0
 8007876:	4616      	mov	r6, r2
  commonInit(NULL);
 8007878:	f000 f8f2 	bl	8007a60 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  if (width == 240 && height == 240) {
 800787c:	2df0      	cmp	r5, #240	@ 0xf0
 800787e:	d03a      	beq.n	80078f6 <_ZN15Adafruit_ST77894initEtt+0x8a>
  } else if (width == 135 && height == 240) {
 8007880:	2d87      	cmp	r5, #135	@ 0x87
 8007882:	d101      	bne.n	8007888 <_ZN15Adafruit_ST77894initEtt+0x1c>
 8007884:	2ef0      	cmp	r6, #240	@ 0xf0
 8007886:	d041      	beq.n	800790c <_ZN15Adafruit_ST77894initEtt+0xa0>
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8007888:	f1c5 00f0 	rsb	r0, r5, #240	@ 0xf0
    _rowstart = _rowstart2 = (int)((320 - height) / 2);
 800788c:	f5c6 73a0 	rsb	r3, r6, #320	@ 0x140
    _colstart = _colstart2 = (int)((240 - width) / 2);
 8007890:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007894:	f3c0 0047 	ubfx	r0, r0, #1, #8
    _rowstart = _rowstart2 = (int)((320 - height) / 2);
 8007898:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800789c:	2200      	movs	r2, #0
 800789e:	f3c3 0347 	ubfx	r3, r3, #1, #8
    _colstart = _colstart2 = (int)((240 - width) / 2);
 80078a2:	f360 0207 	bfi	r2, r0, #0, #8
 80078a6:	f363 220f 	bfi	r2, r3, #8, #8
 80078aa:	f360 4217 	bfi	r2, r0, #16, #8
 80078ae:	f363 621f 	bfi	r2, r3, #24, #8
    _colstart = _colstart2 = (240 - width);
 80078b2:	6362      	str	r2, [r4, #52]	@ 0x34
  displayInit(st7789_without_cs);
 80078b4:	4916      	ldr	r1, [pc, #88]	@ (8007910 <_ZN15Adafruit_ST77894initEtt+0xa4>)
  windowWidth = width;
 80078b6:	8725      	strh	r5, [r4, #56]	@ 0x38
  windowHeight = height;
 80078b8:	8766      	strh	r6, [r4, #58]	@ 0x3a
  displayInit(st7789_without_cs);
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 f8a6 	bl	8007a0c <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	4a14      	ldr	r2, [pc, #80]	@ (8007914 <_ZN15Adafruit_ST77894initEtt+0xa8>)
 80078c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d11a      	bne.n	8007900 <_ZN15Adafruit_ST77894initEtt+0x94>
    _xstart = _colstart;
 80078ca:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
    _ystart = _rowstart;
 80078ce:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
    _width = windowWidth;
 80078d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    _xstart = _colstart;
 80078d4:	84a1      	strh	r1, [r4, #36]	@ 0x24
  rotation = m & 3; // can't be higher than 3
 80078d6:	2000      	movs	r0, #0
 80078d8:	76a0      	strb	r0, [r4, #26]
    _ystart = _rowstart;
 80078da:	84e2      	strh	r2, [r4, #38]	@ 0x26
    _width = windowWidth;
 80078dc:	60e3      	str	r3, [r4, #12]
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80078de:	25c0      	movs	r5, #192	@ 0xc0
  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80078e0:	2301      	movs	r3, #1
 80078e2:	f10d 0207 	add.w	r2, sp, #7
 80078e6:	2136      	movs	r1, #54	@ 0x36
 80078e8:	4620      	mov	r0, r4
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80078ea:	f88d 5007 	strb.w	r5, [sp, #7]
  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80078ee:	f7ff fed7 	bl	80076a0 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 80078f2:	b002      	add	sp, #8
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
  if (width == 240 && height == 240) {
 80078f6:	2ef0      	cmp	r6, #240	@ 0xf0
 80078f8:	d1c6      	bne.n	8007888 <_ZN15Adafruit_ST77894initEtt+0x1c>
 80078fa:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80078fe:	e7d8      	b.n	80078b2 <_ZN15Adafruit_ST77894initEtt+0x46>
  setRotation(0);
 8007900:	2100      	movs	r1, #0
 8007902:	4620      	mov	r0, r4
}
 8007904:	b002      	add	sp, #8
 8007906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
 800790a:	4718      	bx	r3
 800790c:	4a02      	ldr	r2, [pc, #8]	@ (8007918 <_ZN15Adafruit_ST77894initEtt+0xac>)
 800790e:	e7d0      	b.n	80078b2 <_ZN15Adafruit_ST77894initEtt+0x46>
 8007910:	0800b830 	.word	0x0800b830
 8007914:	080077c1 	.word	0x080077c1
 8007918:	28342835 	.word	0x28342835

0800791c <_ZN15Adafruit_ST77xx5beginEm>:
    @param  freq  Desired SPI clock frequency
*/
/**************************************************************************/
void Adafruit_ST77xx::begin(uint32_t freq) {
  if (!freq) {
    freq = SPI_DEFAULT_FREQ;
 800791c:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <_ZN15Adafruit_ST77xx5beginEm+0x14>)
 800791e:	2900      	cmp	r1, #0
 8007920:	bf14      	ite	ne
 8007922:	460a      	movne	r2, r1
 8007924:	461a      	moveq	r2, r3
  }
  _freq = freq;

  invertOnCommand = ST77XX_INVON;
 8007926:	f242 0321 	movw	r3, #8225	@ 0x2021
  _freq = freq;
 800792a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  invertOnCommand = ST77XX_INVON;
 800792c:	8503      	strh	r3, [r0, #40]	@ 0x28
  invertOffCommand = ST77XX_INVOFF;

//  initSPI(freq, spiMode);
}
 800792e:	4770      	bx	lr
 8007930:	01e84800 	.word	0x01e84800

08007934 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  @param  w  Width of window
  @param  h  Height of window
*/
/**************************************************************************/
void Adafruit_ST77xx::setAddrWindow(uint16_t x, uint16_t y, uint16_t w,
                                    uint16_t h) {
 8007934:	b570      	push	{r4, r5, r6, lr}
  x += _xstart;
 8007936:	8c85      	ldrh	r5, [r0, #36]	@ 0x24
 8007938:	4429      	add	r1, r5
 800793a:	b289      	uxth	r1, r1
  y += _ystart;
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 800793c:	18ce      	adds	r6, r1, r3
  y += _ystart;
 800793e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
                                    uint16_t h) {
 8007940:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  y += _ystart;
 8007944:	441a      	add	r2, r3
 8007946:	b292      	uxth	r2, r2
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8007948:	4415      	add	r5, r2
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 800794a:	3e01      	subs	r6, #1
                                    uint16_t h) {
 800794c:	4604      	mov	r4, r0
  uint32_t xa = ((uint32_t)x << 16) | (x + w - 1);
 800794e:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8007952:	3d01      	subs	r5, #1

  writeCommand(ST77XX_CASET); // Column addr set
 8007954:	212a      	movs	r1, #42	@ 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y + h - 1);
 8007956:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 800795a:	f7ff ff09 	bl	8007770 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 800795e:	4631      	mov	r1, r6
 8007960:	4620      	mov	r0, r4
 8007962:	f7ff ff1f 	bl	80077a4 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RASET); // Row addr set
 8007966:	4620      	mov	r0, r4
 8007968:	212b      	movs	r1, #43	@ 0x2b
 800796a:	f7ff ff01 	bl	8007770 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 800796e:	4629      	mov	r1, r5
 8007970:	4620      	mov	r0, r4
 8007972:	f7ff ff17 	bl	80077a4 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>

  writeCommand(ST77XX_RAMWR); // write to RAM
 8007976:	4620      	mov	r0, r4
 8007978:	212c      	movs	r1, #44	@ 0x2c
}
 800797a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 800797e:	f7ff bef7 	b.w	8007770 <_ZN15Adafruit_SPITFT12writeCommandEh>
 8007982:	bf00      	nop

08007984 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 8007984:	b500      	push	{lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 8007986:	f001 0103 	and.w	r1, r1, #3
void Adafruit_ST77xx::setRotation(uint8_t m) {
 800798a:	b083      	sub	sp, #12
  uint8_t madctl = 0;
 800798c:	2300      	movs	r3, #0

  switch (rotation) {
 800798e:	2902      	cmp	r1, #2
  case 0:
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
    _xstart = _colstart;
 8007990:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
    _ystart = _rowstart;
 8007994:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
  uint8_t madctl = 0;
 8007998:	f88d 3007 	strb.w	r3, [sp, #7]
  rotation = m % 4; // can't be higher than 3
 800799c:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 800799e:	d014      	beq.n	80079ca <_ZN15Adafruit_ST77xx11setRotationEh+0x46>
 80079a0:	2903      	cmp	r1, #3
 80079a2:	d01d      	beq.n	80079e0 <_ZN15Adafruit_ST77xx11setRotationEh+0x5c>
 80079a4:	2901      	cmp	r1, #1
 80079a6:	d014      	beq.n	80079d2 <_ZN15Adafruit_ST77xx11setRotationEh+0x4e>
    _xstart = _colstart;
 80079a8:	f362 030f 	bfi	r3, r2, #0, #16
 80079ac:	f36c 431f 	bfi	r3, ip, #16, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80079b0:	22c0      	movs	r2, #192	@ 0xc0
 80079b2:	f88d 2007 	strb.w	r2, [sp, #7]
    _xstart = _colstart;
 80079b6:	6243      	str	r3, [r0, #36]	@ 0x24
    _ystart = _colstart;
    _xstart = _rowstart;
    break;
  }

  sendCommand(ST77XX_MADCTL, &madctl, 1);
 80079b8:	2301      	movs	r3, #1
 80079ba:	f10d 0207 	add.w	r2, sp, #7
 80079be:	2136      	movs	r1, #54	@ 0x36
 80079c0:	f7ff fe6e 	bl	80076a0 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
}
 80079c4:	b003      	add	sp, #12
 80079c6:	f85d fb04 	ldr.w	pc, [sp], #4
    _xstart = _colstart;
 80079ca:	8482      	strh	r2, [r0, #36]	@ 0x24
    _ystart = _rowstart;
 80079cc:	f8a0 c026 	strh.w	ip, [r0, #38]	@ 0x26
    break;
 80079d0:	e7f2      	b.n	80079b8 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
    madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80079d2:	23a0      	movs	r3, #160	@ 0xa0
 80079d4:	f88d 3007 	strb.w	r3, [sp, #7]
    _ystart = _colstart;
 80079d8:	84c2      	strh	r2, [r0, #38]	@ 0x26
    _xstart = _rowstart;
 80079da:	f8a0 c024 	strh.w	ip, [r0, #36]	@ 0x24
    break;
 80079de:	e7eb      	b.n	80079b8 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
    _xstart = _rowstart;
 80079e0:	f36c 030f 	bfi	r3, ip, #0, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80079e4:	2160      	movs	r1, #96	@ 0x60
    _xstart = _rowstart;
 80079e6:	f362 431f 	bfi	r3, r2, #16, #16
    madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 80079ea:	f88d 1007 	strb.w	r1, [sp, #7]
    _xstart = _rowstart;
 80079ee:	6243      	str	r3, [r0, #36]	@ 0x24
    break;
 80079f0:	e7e2      	b.n	80079b8 <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
 80079f2:	bf00      	nop

080079f4 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE>:
Adafruit_ST77xx::Adafruit_ST77xx(uint16_t w, uint16_t h, Adafruit_SPITFT::CallbackType callback)
 80079f4:	b510      	push	{r4, lr}
 80079f6:	4604      	mov	r4, r0
  : Adafruit_SPITFT(w, h, callback)
 80079f8:	f7ff fe40 	bl	800767c <_ZN15Adafruit_SPITFTC1EttPFvNS_6SpiCmdEPhjE>
 80079fc:	2300      	movs	r3, #0
 80079fe:	4a02      	ldr	r2, [pc, #8]	@ (8007a08 <_ZN15Adafruit_ST77xxC1EttPFvN15Adafruit_SPITFT6SpiCmdEPhjE+0x14>)
 8007a00:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8007a02:	6022      	str	r2, [r4, #0]
}
 8007a04:	4620      	mov	r0, r4
 8007a06:	bd10      	pop	{r4, pc}
 8007a08:	0800b858 	.word	0x0800b858

08007a0c <_ZN15Adafruit_ST77xx11displayInitEPKh>:
  numCommands = pgm_read_byte(addr++); // Number of commands to follow
 8007a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (numCommands--) {              // For each command...
 8007a10:	b32b      	cbz	r3, 8007a5e <_ZN15Adafruit_ST77xx11displayInitEPKh+0x52>
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 8007a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a16:	1e5d      	subs	r5, r3, #1
 8007a18:	4680      	mov	r8, r0
 8007a1a:	b2ed      	uxtb	r5, r5
    numArgs = pgm_read_byte(addr++);   // Number of args to follow
 8007a1c:	784f      	ldrb	r7, [r1, #1]
 8007a1e:	1c8e      	adds	r6, r1, #2
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
 8007a20:	f007 047f 	and.w	r4, r7, #127	@ 0x7f
    sendCommand(cmd, addr, numArgs);
 8007a24:	7809      	ldrb	r1, [r1, #0]
 8007a26:	4623      	mov	r3, r4
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	f7ff fe6c 	bl	8007708 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>
    if (ms) {
 8007a30:	063b      	lsls	r3, r7, #24
    addr += numArgs;
 8007a32:	eb06 0104 	add.w	r1, r6, r4
    if (ms) {
 8007a36:	d50c      	bpl.n	8007a52 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x46>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007a38:	5d32      	ldrb	r2, [r6, r4]
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8007a3a:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8007a3e:	2aff      	cmp	r2, #255	@ 0xff
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007a40:	f101 0401 	add.w	r4, r1, #1
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8007a44:	bf08      	it	eq
 8007a46:	f44f 72fa 	moveq.w	r2, #500	@ 0x1f4
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	2007      	movs	r0, #7
 8007a4e:	4798      	blx	r3
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007a50:	4621      	mov	r1, r4
  while (numCommands--) {              // For each command...
 8007a52:	3d01      	subs	r5, #1
 8007a54:	b2ed      	uxtb	r5, r5
 8007a56:	2dff      	cmp	r5, #255	@ 0xff
 8007a58:	d1e0      	bne.n	8007a1c <_ZN15Adafruit_ST77xx11displayInitEPKh+0x10>
}
 8007a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a5e:	4770      	bx	lr

08007a60 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
  begin();
 8007a60:	6803      	ldr	r3, [r0, #0]
 8007a62:	4a1c      	ldr	r2, [pc, #112]	@ (8007ad4 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x74>)
 8007a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a66:	4293      	cmp	r3, r2
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 8007a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	d12d      	bne.n	8007ace <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6e>
  _freq = freq;
 8007a72:	4a19      	ldr	r2, [pc, #100]	@ (8007ad8 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x78>)
 8007a74:	62c2      	str	r2, [r0, #44]	@ 0x2c
  invertOnCommand = ST77XX_INVON;
 8007a76:	f242 0321 	movw	r3, #8225	@ 0x2021
 8007a7a:	8503      	strh	r3, [r0, #40]	@ 0x28
  if (cmdList) {
 8007a7c:	b32c      	cbz	r4, 8007aca <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6a>
  numCommands = pgm_read_byte(addr++); // Number of commands to follow
 8007a7e:	4621      	mov	r1, r4
 8007a80:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (numCommands--) {              // For each command...
 8007a84:	1e5d      	subs	r5, r3, #1
 8007a86:	b2ed      	uxtb	r5, r5
 8007a88:	b1fb      	cbz	r3, 8007aca <_ZN15Adafruit_ST77xx10commonInitEPKh+0x6a>
    numArgs = pgm_read_byte(addr++);   // Number of args to follow
 8007a8a:	f891 8001 	ldrb.w	r8, [r1, #1]
 8007a8e:	1c8e      	adds	r6, r1, #2
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
 8007a90:	f008 047f 	and.w	r4, r8, #127	@ 0x7f
    sendCommand(cmd, addr, numArgs);
 8007a94:	7809      	ldrb	r1, [r1, #0]
 8007a96:	4623      	mov	r3, r4
 8007a98:	4632      	mov	r2, r6
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	f7ff fe34 	bl	8007708 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>
    if (ms) {
 8007aa0:	f018 0f80 	tst.w	r8, #128	@ 0x80
    addr += numArgs;
 8007aa4:	eb06 0104 	add.w	r1, r6, r4
    if (ms) {
 8007aa8:	d00b      	beq.n	8007ac2 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x62>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007aaa:	5d32      	ldrb	r2, [r6, r4]
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	2aff      	cmp	r2, #255	@ 0xff
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007ab0:	f101 0401 	add.w	r4, r1, #1
      callback(Adafruit_SPITFT::SpiCmd::delay, 0, ms);
 8007ab4:	bf08      	it	eq
 8007ab6:	f44f 72fa 	moveq.w	r2, #500	@ 0x1f4
 8007aba:	2100      	movs	r1, #0
 8007abc:	2007      	movs	r0, #7
 8007abe:	4798      	blx	r3
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 8007ac0:	4621      	mov	r1, r4
  while (numCommands--) {              // For each command...
 8007ac2:	3d01      	subs	r5, #1
 8007ac4:	b2ed      	uxtb	r5, r5
 8007ac6:	2dff      	cmp	r5, #255	@ 0xff
 8007ac8:	d1df      	bne.n	8007a8a <_ZN15Adafruit_ST77xx10commonInitEPKh+0x2a>
}
 8007aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  begin();
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4798      	blx	r3
 8007ad2:	e7d3      	b.n	8007a7c <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
 8007ad4:	0800791d 	.word	0x0800791d
 8007ad8:	01e84800 	.word	0x01e84800

08007adc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n = 0;
  while (size--) {
 8007ade:	4617      	mov	r7, r2
 8007ae0:	b17a      	cbz	r2, 8007b02 <_ZN5Print5writeEPKhj+0x26>
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	460e      	mov	r6, r1
  size_t n = 0;
 8007ae6:	2400      	movs	r4, #0
 8007ae8:	e002      	b.n	8007af0 <_ZN5Print5writeEPKhj+0x14>
    if (write(*buffer++)) n++;
 8007aea:	3401      	adds	r4, #1
  while (size--) {
 8007aec:	42a7      	cmp	r7, r4
 8007aee:	d008      	beq.n	8007b02 <_ZN5Print5writeEPKhj+0x26>
    if (write(*buffer++)) n++;
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	f816 1b01 	ldrb.w	r1, [r6], #1
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4628      	mov	r0, r5
 8007afa:	4798      	blx	r3
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d1f4      	bne.n	8007aea <_ZN5Print5writeEPKhj+0xe>
 8007b00:	4627      	mov	r7, r4
    else break;
  }
  return n;
}
 8007b02:	4638      	mov	r0, r7
 8007b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b06:	bf00      	nop

08007b08 <_ZN5Print6printfEPKcz>:
//  n += println();
//  return n;
//}

size_t Print::printf(const char *fmt, ...)
{
 8007b08:	b40e      	push	{r1, r2, r3}
 8007b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0c:	b08a      	sub	sp, #40	@ 0x28
 8007b0e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007b10:	4605      	mov	r5, r0
 8007b12:	f852 1b04 	ldr.w	r1, [r2], #4
  char buffer[30];
  va_list args;
  va_start(args, fmt);
 8007b16:	9201      	str	r2, [sp, #4]
  int n = vsprintf(buffer, fmt, args);
 8007b18:	a802      	add	r0, sp, #8
 8007b1a:	f000 fe8b 	bl	8008834 <vsiprintf>
  if (n < 0)
 8007b1e:	1e07      	subs	r7, r0, #0
 8007b20:	db19      	blt.n	8007b56 <_ZN5Print6printfEPKcz+0x4e>
    return 0;
  auto ret = write((uint8_t*)buffer, n);
 8007b22:	682b      	ldr	r3, [r5, #0]
 8007b24:	4a10      	ldr	r2, [pc, #64]	@ (8007b68 <_ZN5Print6printfEPKcz+0x60>)
 8007b26:	685c      	ldr	r4, [r3, #4]
 8007b28:	4294      	cmp	r4, r2
 8007b2a:	d116      	bne.n	8007b5a <_ZN5Print6printfEPKcz+0x52>
  while (size--) {
 8007b2c:	b19f      	cbz	r7, 8007b56 <_ZN5Print6printfEPKcz+0x4e>
  size_t n = 0;
 8007b2e:	2400      	movs	r4, #0
  while (size--) {
 8007b30:	ae02      	add	r6, sp, #8
 8007b32:	e003      	b.n	8007b3c <_ZN5Print6printfEPKcz+0x34>
    if (write(*buffer++)) n++;
 8007b34:	3401      	adds	r4, #1
  while (size--) {
 8007b36:	42a7      	cmp	r7, r4
 8007b38:	d007      	beq.n	8007b4a <_ZN5Print6printfEPKcz+0x42>
    if (write(*buffer++)) n++;
 8007b3a:	682b      	ldr	r3, [r5, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8007b42:	4628      	mov	r0, r5
 8007b44:	4798      	blx	r3
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d1f4      	bne.n	8007b34 <_ZN5Print6printfEPKcz+0x2c>
  va_end(args);
  return ret;
}
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	b00a      	add	sp, #40	@ 0x28
 8007b4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007b52:	b003      	add	sp, #12
 8007b54:	4770      	bx	lr
    return 0;
 8007b56:	2400      	movs	r4, #0
 8007b58:	e7f7      	b.n	8007b4a <_ZN5Print6printfEPKcz+0x42>
  auto ret = write((uint8_t*)buffer, n);
 8007b5a:	463a      	mov	r2, r7
 8007b5c:	a902      	add	r1, sp, #8
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47a0      	blx	r4
 8007b62:	4604      	mov	r4, r0
 8007b64:	e7f1      	b.n	8007b4a <_ZN5Print6printfEPKcz+0x42>
 8007b66:	bf00      	nop
 8007b68:	08007add 	.word	0x08007add

08007b6c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
 8007b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b70:	b08a      	sub	sp, #40	@ 0x28
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8007b72:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8007b74:	2a01      	cmp	r2, #1
{
 8007b76:	4605      	mov	r5, r0
  *str = '\0';
 8007b78:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
  if (base < 2) base = 10;
 8007b7c:	bf98      	it	ls
 8007b7e:	220a      	movls	r2, #10
 8007b80:	ac09      	add	r4, sp, #36	@ 0x24

  do {
    char c = n % base;
 8007b82:	fbb1 fcf2 	udiv	ip, r1, r2
 8007b86:	fb02 101c 	mls	r0, r2, ip, r1
 8007b8a:	b2c3      	uxtb	r3, r0
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8007b8c:	2809      	cmp	r0, #9
 8007b8e:	468e      	mov	lr, r1
 8007b90:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007b94:	bf8a      	itet	hi
 8007b96:	3337      	addhi	r3, #55	@ 0x37
 8007b98:	b2c3      	uxtbls	r3, r0
 8007b9a:	b2db      	uxtbhi	r3, r3
  } while(n);
 8007b9c:	4596      	cmp	lr, r2
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8007b9e:	f804 3d01 	strb.w	r3, [r4, #-1]!
    n /= base;
 8007ba2:	4661      	mov	r1, ip
  } while(n);
 8007ba4:	d2ed      	bcs.n	8007b82 <_ZN5Print11printNumberEmh+0x16>
      return write((const uint8_t *)str, strlen(str));
 8007ba6:	682f      	ldr	r7, [r5, #0]
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f7f8 fb39 	bl	8000220 <strlen>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8007bf0 <_ZN5Print11printNumberEmh+0x84>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	d112      	bne.n	8007bde <_ZN5Print11printNumberEmh+0x72>
  while (size--) {
 8007bb8:	b168      	cbz	r0, 8007bd6 <_ZN5Print11printNumberEmh+0x6a>
  size_t n = 0;
 8007bba:	2600      	movs	r6, #0
 8007bbc:	e003      	b.n	8007bc6 <_ZN5Print11printNumberEmh+0x5a>
    if (write(*buffer++)) n++;
 8007bbe:	3601      	adds	r6, #1
  while (size--) {
 8007bc0:	45b0      	cmp	r8, r6
 8007bc2:	d008      	beq.n	8007bd6 <_ZN5Print11printNumberEmh+0x6a>
    if (write(*buffer++)) n++;
 8007bc4:	682f      	ldr	r7, [r5, #0]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bcc:	4628      	mov	r0, r5
 8007bce:	4798      	blx	r3
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d1f4      	bne.n	8007bbe <_ZN5Print11printNumberEmh+0x52>
 8007bd4:	46b0      	mov	r8, r6

  return write(str);
}
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	b00a      	add	sp, #40	@ 0x28
 8007bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bde:	4602      	mov	r2, r0
 8007be0:	4621      	mov	r1, r4
 8007be2:	4628      	mov	r0, r5
 8007be4:	4798      	blx	r3
 8007be6:	4680      	mov	r8, r0
 8007be8:	4640      	mov	r0, r8
 8007bea:	b00a      	add	sp, #40	@ 0x28
 8007bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf0:	08007add 	.word	0x08007add

08007bf4 <_ZN5Print5printEii>:
{
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	460d      	mov	r5, r1
  if (base == 0) {
 8007bfa:	b92a      	cbnz	r2, 8007c08 <_ZN5Print5printEii+0x14>
    return write(n);
 8007bfc:	6803      	ldr	r3, [r0, #0]
}
 8007bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return write(n);
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	b2c9      	uxtb	r1, r1
 8007c06:	4718      	bx	r3
  } else if (base == 10) {
 8007c08:	2a0a      	cmp	r2, #10
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	d10e      	bne.n	8007c2c <_ZN5Print5printEii+0x38>
    if (n < 0) {
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	da0d      	bge.n	8007c2e <_ZN5Print5printEii+0x3a>
  return write(c);
 8007c12:	6803      	ldr	r3, [r0, #0]
 8007c14:	212d      	movs	r1, #45	@ 0x2d
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4798      	blx	r3
      return printNumber(n, 10) + t;
 8007c1a:	4622      	mov	r2, r4
  return write(c);
 8007c1c:	4603      	mov	r3, r0
      return printNumber(n, 10) + t;
 8007c1e:	4269      	negs	r1, r5
 8007c20:	4630      	mov	r0, r6
  return write(c);
 8007c22:	461c      	mov	r4, r3
      return printNumber(n, 10) + t;
 8007c24:	f7ff ffa2 	bl	8007b6c <_ZN5Print11printNumberEmh>
 8007c28:	4420      	add	r0, r4
}
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
    return printNumber(n, base);
 8007c2c:	b2d2      	uxtb	r2, r2
}
 8007c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return printNumber(n, base);
 8007c32:	f7ff bf9b 	b.w	8007b6c <_ZN5Print11printNumberEmh>
 8007c36:	bf00      	nop

08007c38 <sinf>:
 8007c38:	ee10 3a10 	vmov	r3, s0
 8007c3c:	b507      	push	{r0, r1, r2, lr}
 8007c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007cbc <sinf+0x84>)
 8007c40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d807      	bhi.n	8007c58 <sinf+0x20>
 8007c48:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007cc0 <sinf+0x88>
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	b003      	add	sp, #12
 8007c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c54:	f000 b88e 	b.w	8007d74 <__kernel_sinf>
 8007c58:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007c5c:	d304      	bcc.n	8007c68 <sinf+0x30>
 8007c5e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007c62:	b003      	add	sp, #12
 8007c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c68:	4668      	mov	r0, sp
 8007c6a:	f000 f8cb 	bl	8007e04 <__ieee754_rem_pio2f>
 8007c6e:	f000 0003 	and.w	r0, r0, #3
 8007c72:	2801      	cmp	r0, #1
 8007c74:	d00a      	beq.n	8007c8c <sinf+0x54>
 8007c76:	2802      	cmp	r0, #2
 8007c78:	d00f      	beq.n	8007c9a <sinf+0x62>
 8007c7a:	b9c0      	cbnz	r0, 8007cae <sinf+0x76>
 8007c7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c80:	ed9d 0a00 	vldr	s0, [sp]
 8007c84:	2001      	movs	r0, #1
 8007c86:	f000 f875 	bl	8007d74 <__kernel_sinf>
 8007c8a:	e7ea      	b.n	8007c62 <sinf+0x2a>
 8007c8c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c90:	ed9d 0a00 	vldr	s0, [sp]
 8007c94:	f000 f816 	bl	8007cc4 <__kernel_cosf>
 8007c98:	e7e3      	b.n	8007c62 <sinf+0x2a>
 8007c9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8007c9e:	ed9d 0a00 	vldr	s0, [sp]
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	f000 f866 	bl	8007d74 <__kernel_sinf>
 8007ca8:	eeb1 0a40 	vneg.f32	s0, s0
 8007cac:	e7d9      	b.n	8007c62 <sinf+0x2a>
 8007cae:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cb2:	ed9d 0a00 	vldr	s0, [sp]
 8007cb6:	f000 f805 	bl	8007cc4 <__kernel_cosf>
 8007cba:	e7f5      	b.n	8007ca8 <sinf+0x70>
 8007cbc:	3f490fd8 	.word	0x3f490fd8
 8007cc0:	00000000 	.word	0x00000000

08007cc4 <__kernel_cosf>:
 8007cc4:	ee10 3a10 	vmov	r3, s0
 8007cc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ccc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007cd0:	eef0 6a40 	vmov.f32	s13, s0
 8007cd4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007cd8:	d204      	bcs.n	8007ce4 <__kernel_cosf+0x20>
 8007cda:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8007cde:	ee17 2a90 	vmov	r2, s15
 8007ce2:	b342      	cbz	r2, 8007d36 <__kernel_cosf+0x72>
 8007ce4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007ce8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8007d54 <__kernel_cosf+0x90>
 8007cec:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007d58 <__kernel_cosf+0x94>
 8007cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8007d5c <__kernel_cosf+0x98>)
 8007cf2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007d60 <__kernel_cosf+0x9c>
 8007cfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007d00:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8007d64 <__kernel_cosf+0xa0>
 8007d04:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007d08:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8007d68 <__kernel_cosf+0xa4>
 8007d0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007d10:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8007d6c <__kernel_cosf+0xa8>
 8007d14:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007d18:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8007d1c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007d20:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007d24:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2c:	d804      	bhi.n	8007d38 <__kernel_cosf+0x74>
 8007d2e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007d32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007d36:	4770      	bx	lr
 8007d38:	4a0d      	ldr	r2, [pc, #52]	@ (8007d70 <__kernel_cosf+0xac>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	bf9a      	itte	ls
 8007d3e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8007d42:	ee07 3a10 	vmovls	s14, r3
 8007d46:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8007d4a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007d4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d52:	e7ec      	b.n	8007d2e <__kernel_cosf+0x6a>
 8007d54:	ad47d74e 	.word	0xad47d74e
 8007d58:	310f74f6 	.word	0x310f74f6
 8007d5c:	3e999999 	.word	0x3e999999
 8007d60:	b493f27c 	.word	0xb493f27c
 8007d64:	37d00d01 	.word	0x37d00d01
 8007d68:	bab60b61 	.word	0xbab60b61
 8007d6c:	3d2aaaab 	.word	0x3d2aaaab
 8007d70:	3f480000 	.word	0x3f480000

08007d74 <__kernel_sinf>:
 8007d74:	ee10 3a10 	vmov	r3, s0
 8007d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d7c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007d80:	d204      	bcs.n	8007d8c <__kernel_sinf+0x18>
 8007d82:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007d86:	ee17 3a90 	vmov	r3, s15
 8007d8a:	b35b      	cbz	r3, 8007de4 <__kernel_sinf+0x70>
 8007d8c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007d90:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007de8 <__kernel_sinf+0x74>
 8007d94:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8007dec <__kernel_sinf+0x78>
 8007d98:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007d9c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8007df0 <__kernel_sinf+0x7c>
 8007da0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007da4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8007df4 <__kernel_sinf+0x80>
 8007da8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007dac:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8007df8 <__kernel_sinf+0x84>
 8007db0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007db4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007db8:	b930      	cbnz	r0, 8007dc8 <__kernel_sinf+0x54>
 8007dba:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8007dfc <__kernel_sinf+0x88>
 8007dbe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007dc2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007dc6:	4770      	bx	lr
 8007dc8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007dcc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007dd0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007dd4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007dd8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8007e00 <__kernel_sinf+0x8c>
 8007ddc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007de0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	2f2ec9d3 	.word	0x2f2ec9d3
 8007dec:	b2d72f34 	.word	0xb2d72f34
 8007df0:	3638ef1b 	.word	0x3638ef1b
 8007df4:	b9500d01 	.word	0xb9500d01
 8007df8:	3c088889 	.word	0x3c088889
 8007dfc:	be2aaaab 	.word	0xbe2aaaab
 8007e00:	3e2aaaab 	.word	0x3e2aaaab

08007e04 <__ieee754_rem_pio2f>:
 8007e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e06:	ee10 6a10 	vmov	r6, s0
 8007e0a:	4b88      	ldr	r3, [pc, #544]	@ (800802c <__ieee754_rem_pio2f+0x228>)
 8007e0c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8007e10:	429d      	cmp	r5, r3
 8007e12:	b087      	sub	sp, #28
 8007e14:	4604      	mov	r4, r0
 8007e16:	d805      	bhi.n	8007e24 <__ieee754_rem_pio2f+0x20>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	ed80 0a00 	vstr	s0, [r0]
 8007e1e:	6043      	str	r3, [r0, #4]
 8007e20:	2000      	movs	r0, #0
 8007e22:	e022      	b.n	8007e6a <__ieee754_rem_pio2f+0x66>
 8007e24:	4b82      	ldr	r3, [pc, #520]	@ (8008030 <__ieee754_rem_pio2f+0x22c>)
 8007e26:	429d      	cmp	r5, r3
 8007e28:	d83a      	bhi.n	8007ea0 <__ieee754_rem_pio2f+0x9c>
 8007e2a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007e2e:	2e00      	cmp	r6, #0
 8007e30:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8008034 <__ieee754_rem_pio2f+0x230>
 8007e34:	4a80      	ldr	r2, [pc, #512]	@ (8008038 <__ieee754_rem_pio2f+0x234>)
 8007e36:	f023 030f 	bic.w	r3, r3, #15
 8007e3a:	dd18      	ble.n	8007e6e <__ieee754_rem_pio2f+0x6a>
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007e42:	bf09      	itett	eq
 8007e44:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800803c <__ieee754_rem_pio2f+0x238>
 8007e48:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8008040 <__ieee754_rem_pio2f+0x23c>
 8007e4c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8008044 <__ieee754_rem_pio2f+0x240>
 8007e50:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007e54:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8007e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e5c:	ed80 7a00 	vstr	s14, [r0]
 8007e60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e64:	edc0 7a01 	vstr	s15, [r0, #4]
 8007e68:	2001      	movs	r0, #1
 8007e6a:	b007      	add	sp, #28
 8007e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007e74:	bf09      	itett	eq
 8007e76:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800803c <__ieee754_rem_pio2f+0x238>
 8007e7a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8008040 <__ieee754_rem_pio2f+0x23c>
 8007e7e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8008044 <__ieee754_rem_pio2f+0x240>
 8007e82:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007e86:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007e8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e8e:	ed80 7a00 	vstr	s14, [r0]
 8007e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e96:	edc0 7a01 	vstr	s15, [r0, #4]
 8007e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9e:	e7e4      	b.n	8007e6a <__ieee754_rem_pio2f+0x66>
 8007ea0:	4b69      	ldr	r3, [pc, #420]	@ (8008048 <__ieee754_rem_pio2f+0x244>)
 8007ea2:	429d      	cmp	r5, r3
 8007ea4:	d873      	bhi.n	8007f8e <__ieee754_rem_pio2f+0x18a>
 8007ea6:	f000 f8dd 	bl	8008064 <fabsf>
 8007eaa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800804c <__ieee754_rem_pio2f+0x248>
 8007eae:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007eb2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ebe:	ee17 0a90 	vmov	r0, s15
 8007ec2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008034 <__ieee754_rem_pio2f+0x230>
 8007ec6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007eca:	281f      	cmp	r0, #31
 8007ecc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008040 <__ieee754_rem_pio2f+0x23c>
 8007ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed4:	eeb1 6a47 	vneg.f32	s12, s14
 8007ed8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007edc:	ee16 1a90 	vmov	r1, s13
 8007ee0:	dc09      	bgt.n	8007ef6 <__ieee754_rem_pio2f+0xf2>
 8007ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8008050 <__ieee754_rem_pio2f+0x24c>)
 8007ee4:	1e47      	subs	r7, r0, #1
 8007ee6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007eea:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8007eee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d107      	bne.n	8007f06 <__ieee754_rem_pio2f+0x102>
 8007ef6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8007efa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8007efe:	2a08      	cmp	r2, #8
 8007f00:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007f04:	dc14      	bgt.n	8007f30 <__ieee754_rem_pio2f+0x12c>
 8007f06:	6021      	str	r1, [r4, #0]
 8007f08:	ed94 7a00 	vldr	s14, [r4]
 8007f0c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007f16:	ed84 0a01 	vstr	s0, [r4, #4]
 8007f1a:	daa6      	bge.n	8007e6a <__ieee754_rem_pio2f+0x66>
 8007f1c:	eeb1 7a47 	vneg.f32	s14, s14
 8007f20:	eeb1 0a40 	vneg.f32	s0, s0
 8007f24:	ed84 7a00 	vstr	s14, [r4]
 8007f28:	ed84 0a01 	vstr	s0, [r4, #4]
 8007f2c:	4240      	negs	r0, r0
 8007f2e:	e79c      	b.n	8007e6a <__ieee754_rem_pio2f+0x66>
 8007f30:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800803c <__ieee754_rem_pio2f+0x238>
 8007f34:	eef0 6a40 	vmov.f32	s13, s0
 8007f38:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007f3c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007f40:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007f44:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008044 <__ieee754_rem_pio2f+0x240>
 8007f48:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007f4c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007f50:	ee15 2a90 	vmov	r2, s11
 8007f54:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007f58:	1a5b      	subs	r3, r3, r1
 8007f5a:	2b19      	cmp	r3, #25
 8007f5c:	dc04      	bgt.n	8007f68 <__ieee754_rem_pio2f+0x164>
 8007f5e:	edc4 5a00 	vstr	s11, [r4]
 8007f62:	eeb0 0a66 	vmov.f32	s0, s13
 8007f66:	e7cf      	b.n	8007f08 <__ieee754_rem_pio2f+0x104>
 8007f68:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8008054 <__ieee754_rem_pio2f+0x250>
 8007f6c:	eeb0 0a66 	vmov.f32	s0, s13
 8007f70:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007f74:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007f78:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8008058 <__ieee754_rem_pio2f+0x254>
 8007f7c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007f80:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007f84:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007f88:	ed84 7a00 	vstr	s14, [r4]
 8007f8c:	e7bc      	b.n	8007f08 <__ieee754_rem_pio2f+0x104>
 8007f8e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007f92:	d306      	bcc.n	8007fa2 <__ieee754_rem_pio2f+0x19e>
 8007f94:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007f98:	edc0 7a01 	vstr	s15, [r0, #4]
 8007f9c:	edc0 7a00 	vstr	s15, [r0]
 8007fa0:	e73e      	b.n	8007e20 <__ieee754_rem_pio2f+0x1c>
 8007fa2:	15ea      	asrs	r2, r5, #23
 8007fa4:	3a86      	subs	r2, #134	@ 0x86
 8007fa6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007fb2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800805c <__ieee754_rem_pio2f+0x258>
 8007fb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007fba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fbe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007fc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007fc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007fca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007fce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fd2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007fd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007fda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe2:	edcd 7a05 	vstr	s15, [sp, #20]
 8007fe6:	d11e      	bne.n	8008026 <__ieee754_rem_pio2f+0x222>
 8007fe8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff0:	bf0c      	ite	eq
 8007ff2:	2301      	moveq	r3, #1
 8007ff4:	2302      	movne	r3, #2
 8007ff6:	491a      	ldr	r1, [pc, #104]	@ (8008060 <__ieee754_rem_pio2f+0x25c>)
 8007ff8:	9101      	str	r1, [sp, #4]
 8007ffa:	2102      	movs	r1, #2
 8007ffc:	9100      	str	r1, [sp, #0]
 8007ffe:	a803      	add	r0, sp, #12
 8008000:	4621      	mov	r1, r4
 8008002:	f000 f837 	bl	8008074 <__kernel_rem_pio2f>
 8008006:	2e00      	cmp	r6, #0
 8008008:	f6bf af2f 	bge.w	8007e6a <__ieee754_rem_pio2f+0x66>
 800800c:	edd4 7a00 	vldr	s15, [r4]
 8008010:	eef1 7a67 	vneg.f32	s15, s15
 8008014:	edc4 7a00 	vstr	s15, [r4]
 8008018:	edd4 7a01 	vldr	s15, [r4, #4]
 800801c:	eef1 7a67 	vneg.f32	s15, s15
 8008020:	edc4 7a01 	vstr	s15, [r4, #4]
 8008024:	e782      	b.n	8007f2c <__ieee754_rem_pio2f+0x128>
 8008026:	2303      	movs	r3, #3
 8008028:	e7e5      	b.n	8007ff6 <__ieee754_rem_pio2f+0x1f2>
 800802a:	bf00      	nop
 800802c:	3f490fd8 	.word	0x3f490fd8
 8008030:	4016cbe3 	.word	0x4016cbe3
 8008034:	3fc90f80 	.word	0x3fc90f80
 8008038:	3fc90fd0 	.word	0x3fc90fd0
 800803c:	37354400 	.word	0x37354400
 8008040:	37354443 	.word	0x37354443
 8008044:	2e85a308 	.word	0x2e85a308
 8008048:	43490f80 	.word	0x43490f80
 800804c:	3f22f984 	.word	0x3f22f984
 8008050:	0800b8b0 	.word	0x0800b8b0
 8008054:	2e85a300 	.word	0x2e85a300
 8008058:	248d3132 	.word	0x248d3132
 800805c:	43800000 	.word	0x43800000
 8008060:	0800b930 	.word	0x0800b930

08008064 <fabsf>:
 8008064:	ee10 3a10 	vmov	r3, s0
 8008068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800806c:	ee00 3a10 	vmov	s0, r3
 8008070:	4770      	bx	lr
	...

08008074 <__kernel_rem_pio2f>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	ed2d 8b04 	vpush	{d8-d9}
 800807c:	b0d9      	sub	sp, #356	@ 0x164
 800807e:	4690      	mov	r8, r2
 8008080:	9001      	str	r0, [sp, #4]
 8008082:	4ab9      	ldr	r2, [pc, #740]	@ (8008368 <__kernel_rem_pio2f+0x2f4>)
 8008084:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008086:	f118 0f04 	cmn.w	r8, #4
 800808a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800808e:	460f      	mov	r7, r1
 8008090:	f103 3bff 	add.w	fp, r3, #4294967295
 8008094:	db27      	blt.n	80080e6 <__kernel_rem_pio2f+0x72>
 8008096:	f1b8 0203 	subs.w	r2, r8, #3
 800809a:	bf48      	it	mi
 800809c:	f108 0204 	addmi.w	r2, r8, #4
 80080a0:	10d2      	asrs	r2, r2, #3
 80080a2:	1c55      	adds	r5, r2, #1
 80080a4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80080a6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8008378 <__kernel_rem_pio2f+0x304>
 80080aa:	00e8      	lsls	r0, r5, #3
 80080ac:	eba2 060b 	sub.w	r6, r2, fp
 80080b0:	9002      	str	r0, [sp, #8]
 80080b2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80080b6:	eb0a 0c0b 	add.w	ip, sl, fp
 80080ba:	ac1c      	add	r4, sp, #112	@ 0x70
 80080bc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80080c0:	2000      	movs	r0, #0
 80080c2:	4560      	cmp	r0, ip
 80080c4:	dd11      	ble.n	80080ea <__kernel_rem_pio2f+0x76>
 80080c6:	a91c      	add	r1, sp, #112	@ 0x70
 80080c8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80080cc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80080d0:	f04f 0c00 	mov.w	ip, #0
 80080d4:	45d4      	cmp	ip, sl
 80080d6:	dc27      	bgt.n	8008128 <__kernel_rem_pio2f+0xb4>
 80080d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80080dc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8008378 <__kernel_rem_pio2f+0x304>
 80080e0:	4606      	mov	r6, r0
 80080e2:	2400      	movs	r4, #0
 80080e4:	e016      	b.n	8008114 <__kernel_rem_pio2f+0xa0>
 80080e6:	2200      	movs	r2, #0
 80080e8:	e7db      	b.n	80080a2 <__kernel_rem_pio2f+0x2e>
 80080ea:	42c6      	cmn	r6, r0
 80080ec:	bf5d      	ittte	pl
 80080ee:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80080f2:	ee07 1a90 	vmovpl	s15, r1
 80080f6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80080fa:	eef0 7a47 	vmovmi.f32	s15, s14
 80080fe:	ece4 7a01 	vstmia	r4!, {s15}
 8008102:	3001      	adds	r0, #1
 8008104:	e7dd      	b.n	80080c2 <__kernel_rem_pio2f+0x4e>
 8008106:	ecfe 6a01 	vldmia	lr!, {s13}
 800810a:	ed96 7a00 	vldr	s14, [r6]
 800810e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008112:	3401      	adds	r4, #1
 8008114:	455c      	cmp	r4, fp
 8008116:	f1a6 0604 	sub.w	r6, r6, #4
 800811a:	ddf4      	ble.n	8008106 <__kernel_rem_pio2f+0x92>
 800811c:	ece9 7a01 	vstmia	r9!, {s15}
 8008120:	f10c 0c01 	add.w	ip, ip, #1
 8008124:	3004      	adds	r0, #4
 8008126:	e7d5      	b.n	80080d4 <__kernel_rem_pio2f+0x60>
 8008128:	a908      	add	r1, sp, #32
 800812a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800812e:	9104      	str	r1, [sp, #16]
 8008130:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8008132:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8008374 <__kernel_rem_pio2f+0x300>
 8008136:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8008370 <__kernel_rem_pio2f+0x2fc>
 800813a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800813e:	9203      	str	r2, [sp, #12]
 8008140:	4654      	mov	r4, sl
 8008142:	00a2      	lsls	r2, r4, #2
 8008144:	9205      	str	r2, [sp, #20]
 8008146:	aa58      	add	r2, sp, #352	@ 0x160
 8008148:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800814c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8008150:	a944      	add	r1, sp, #272	@ 0x110
 8008152:	aa08      	add	r2, sp, #32
 8008154:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008158:	4694      	mov	ip, r2
 800815a:	4626      	mov	r6, r4
 800815c:	2e00      	cmp	r6, #0
 800815e:	f1a0 0004 	sub.w	r0, r0, #4
 8008162:	dc4c      	bgt.n	80081fe <__kernel_rem_pio2f+0x18a>
 8008164:	4628      	mov	r0, r5
 8008166:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800816a:	f000 f9f5 	bl	8008558 <scalbnf>
 800816e:	eeb0 8a40 	vmov.f32	s16, s0
 8008172:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8008176:	ee28 0a00 	vmul.f32	s0, s16, s0
 800817a:	f000 fa53 	bl	8008624 <floorf>
 800817e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8008182:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008186:	2d00      	cmp	r5, #0
 8008188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800818c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008190:	ee17 9a90 	vmov	r9, s15
 8008194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008198:	ee38 8a67 	vsub.f32	s16, s16, s15
 800819c:	dd41      	ble.n	8008222 <__kernel_rem_pio2f+0x1ae>
 800819e:	f104 3cff 	add.w	ip, r4, #4294967295
 80081a2:	a908      	add	r1, sp, #32
 80081a4:	f1c5 0e08 	rsb	lr, r5, #8
 80081a8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80081ac:	fa46 f00e 	asr.w	r0, r6, lr
 80081b0:	4481      	add	r9, r0
 80081b2:	fa00 f00e 	lsl.w	r0, r0, lr
 80081b6:	1a36      	subs	r6, r6, r0
 80081b8:	f1c5 0007 	rsb	r0, r5, #7
 80081bc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80081c0:	4106      	asrs	r6, r0
 80081c2:	2e00      	cmp	r6, #0
 80081c4:	dd3c      	ble.n	8008240 <__kernel_rem_pio2f+0x1cc>
 80081c6:	f04f 0e00 	mov.w	lr, #0
 80081ca:	f109 0901 	add.w	r9, r9, #1
 80081ce:	4670      	mov	r0, lr
 80081d0:	4574      	cmp	r4, lr
 80081d2:	dc68      	bgt.n	80082a6 <__kernel_rem_pio2f+0x232>
 80081d4:	2d00      	cmp	r5, #0
 80081d6:	dd03      	ble.n	80081e0 <__kernel_rem_pio2f+0x16c>
 80081d8:	2d01      	cmp	r5, #1
 80081da:	d074      	beq.n	80082c6 <__kernel_rem_pio2f+0x252>
 80081dc:	2d02      	cmp	r5, #2
 80081de:	d07d      	beq.n	80082dc <__kernel_rem_pio2f+0x268>
 80081e0:	2e02      	cmp	r6, #2
 80081e2:	d12d      	bne.n	8008240 <__kernel_rem_pio2f+0x1cc>
 80081e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80081e8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80081ec:	b340      	cbz	r0, 8008240 <__kernel_rem_pio2f+0x1cc>
 80081ee:	4628      	mov	r0, r5
 80081f0:	9306      	str	r3, [sp, #24]
 80081f2:	f000 f9b1 	bl	8008558 <scalbnf>
 80081f6:	9b06      	ldr	r3, [sp, #24]
 80081f8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80081fc:	e020      	b.n	8008240 <__kernel_rem_pio2f+0x1cc>
 80081fe:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008202:	3e01      	subs	r6, #1
 8008204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800820c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008210:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008214:	ecac 0a01 	vstmia	ip!, {s0}
 8008218:	ed90 0a00 	vldr	s0, [r0]
 800821c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008220:	e79c      	b.n	800815c <__kernel_rem_pio2f+0xe8>
 8008222:	d105      	bne.n	8008230 <__kernel_rem_pio2f+0x1bc>
 8008224:	1e60      	subs	r0, r4, #1
 8008226:	a908      	add	r1, sp, #32
 8008228:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800822c:	11f6      	asrs	r6, r6, #7
 800822e:	e7c8      	b.n	80081c2 <__kernel_rem_pio2f+0x14e>
 8008230:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008234:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800823c:	da31      	bge.n	80082a2 <__kernel_rem_pio2f+0x22e>
 800823e:	2600      	movs	r6, #0
 8008240:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008248:	f040 8098 	bne.w	800837c <__kernel_rem_pio2f+0x308>
 800824c:	1e60      	subs	r0, r4, #1
 800824e:	2200      	movs	r2, #0
 8008250:	4550      	cmp	r0, sl
 8008252:	da4b      	bge.n	80082ec <__kernel_rem_pio2f+0x278>
 8008254:	2a00      	cmp	r2, #0
 8008256:	d065      	beq.n	8008324 <__kernel_rem_pio2f+0x2b0>
 8008258:	3c01      	subs	r4, #1
 800825a:	ab08      	add	r3, sp, #32
 800825c:	3d08      	subs	r5, #8
 800825e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f8      	beq.n	8008258 <__kernel_rem_pio2f+0x1e4>
 8008266:	4628      	mov	r0, r5
 8008268:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800826c:	f000 f974 	bl	8008558 <scalbnf>
 8008270:	1c63      	adds	r3, r4, #1
 8008272:	aa44      	add	r2, sp, #272	@ 0x110
 8008274:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008374 <__kernel_rem_pio2f+0x300>
 8008278:	0099      	lsls	r1, r3, #2
 800827a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800827e:	4623      	mov	r3, r4
 8008280:	2b00      	cmp	r3, #0
 8008282:	f280 80a9 	bge.w	80083d8 <__kernel_rem_pio2f+0x364>
 8008286:	4623      	mov	r3, r4
 8008288:	2b00      	cmp	r3, #0
 800828a:	f2c0 80c7 	blt.w	800841c <__kernel_rem_pio2f+0x3a8>
 800828e:	aa44      	add	r2, sp, #272	@ 0x110
 8008290:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008294:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800836c <__kernel_rem_pio2f+0x2f8>
 8008298:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8008378 <__kernel_rem_pio2f+0x304>
 800829c:	2000      	movs	r0, #0
 800829e:	1ae2      	subs	r2, r4, r3
 80082a0:	e0b1      	b.n	8008406 <__kernel_rem_pio2f+0x392>
 80082a2:	2602      	movs	r6, #2
 80082a4:	e78f      	b.n	80081c6 <__kernel_rem_pio2f+0x152>
 80082a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80082aa:	b948      	cbnz	r0, 80082c0 <__kernel_rem_pio2f+0x24c>
 80082ac:	b121      	cbz	r1, 80082b8 <__kernel_rem_pio2f+0x244>
 80082ae:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80082b2:	f842 1c04 	str.w	r1, [r2, #-4]
 80082b6:	2101      	movs	r1, #1
 80082b8:	f10e 0e01 	add.w	lr, lr, #1
 80082bc:	4608      	mov	r0, r1
 80082be:	e787      	b.n	80081d0 <__kernel_rem_pio2f+0x15c>
 80082c0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80082c4:	e7f5      	b.n	80082b2 <__kernel_rem_pio2f+0x23e>
 80082c6:	f104 3cff 	add.w	ip, r4, #4294967295
 80082ca:	aa08      	add	r2, sp, #32
 80082cc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80082d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80082d4:	a908      	add	r1, sp, #32
 80082d6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80082da:	e781      	b.n	80081e0 <__kernel_rem_pio2f+0x16c>
 80082dc:	f104 3cff 	add.w	ip, r4, #4294967295
 80082e0:	aa08      	add	r2, sp, #32
 80082e2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80082e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80082ea:	e7f3      	b.n	80082d4 <__kernel_rem_pio2f+0x260>
 80082ec:	a908      	add	r1, sp, #32
 80082ee:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80082f2:	3801      	subs	r0, #1
 80082f4:	430a      	orrs	r2, r1
 80082f6:	e7ab      	b.n	8008250 <__kernel_rem_pio2f+0x1dc>
 80082f8:	3201      	adds	r2, #1
 80082fa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80082fe:	2e00      	cmp	r6, #0
 8008300:	d0fa      	beq.n	80082f8 <__kernel_rem_pio2f+0x284>
 8008302:	9905      	ldr	r1, [sp, #20]
 8008304:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008308:	eb0d 0001 	add.w	r0, sp, r1
 800830c:	18e6      	adds	r6, r4, r3
 800830e:	a91c      	add	r1, sp, #112	@ 0x70
 8008310:	f104 0c01 	add.w	ip, r4, #1
 8008314:	384c      	subs	r0, #76	@ 0x4c
 8008316:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800831a:	4422      	add	r2, r4
 800831c:	4562      	cmp	r2, ip
 800831e:	da04      	bge.n	800832a <__kernel_rem_pio2f+0x2b6>
 8008320:	4614      	mov	r4, r2
 8008322:	e70e      	b.n	8008142 <__kernel_rem_pio2f+0xce>
 8008324:	9804      	ldr	r0, [sp, #16]
 8008326:	2201      	movs	r2, #1
 8008328:	e7e7      	b.n	80082fa <__kernel_rem_pio2f+0x286>
 800832a:	9903      	ldr	r1, [sp, #12]
 800832c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008330:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8008334:	9105      	str	r1, [sp, #20]
 8008336:	ee07 1a90 	vmov	s15, r1
 800833a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800833e:	2400      	movs	r4, #0
 8008340:	ece6 7a01 	vstmia	r6!, {s15}
 8008344:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8008378 <__kernel_rem_pio2f+0x304>
 8008348:	46b1      	mov	r9, r6
 800834a:	455c      	cmp	r4, fp
 800834c:	dd04      	ble.n	8008358 <__kernel_rem_pio2f+0x2e4>
 800834e:	ece0 7a01 	vstmia	r0!, {s15}
 8008352:	f10c 0c01 	add.w	ip, ip, #1
 8008356:	e7e1      	b.n	800831c <__kernel_rem_pio2f+0x2a8>
 8008358:	ecfe 6a01 	vldmia	lr!, {s13}
 800835c:	ed39 7a01 	vldmdb	r9!, {s14}
 8008360:	3401      	adds	r4, #1
 8008362:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008366:	e7f0      	b.n	800834a <__kernel_rem_pio2f+0x2d6>
 8008368:	0800bc74 	.word	0x0800bc74
 800836c:	0800bc48 	.word	0x0800bc48
 8008370:	43800000 	.word	0x43800000
 8008374:	3b800000 	.word	0x3b800000
 8008378:	00000000 	.word	0x00000000
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	eeb0 0a48 	vmov.f32	s0, s16
 8008382:	eba3 0008 	sub.w	r0, r3, r8
 8008386:	f000 f8e7 	bl	8008558 <scalbnf>
 800838a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8008370 <__kernel_rem_pio2f+0x2fc>
 800838e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008396:	db19      	blt.n	80083cc <__kernel_rem_pio2f+0x358>
 8008398:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8008374 <__kernel_rem_pio2f+0x300>
 800839c:	ee60 7a27 	vmul.f32	s15, s0, s15
 80083a0:	aa08      	add	r2, sp, #32
 80083a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083a6:	3508      	adds	r5, #8
 80083a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80083b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80083b8:	ee10 3a10 	vmov	r3, s0
 80083bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80083c0:	ee17 3a90 	vmov	r3, s15
 80083c4:	3401      	adds	r4, #1
 80083c6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80083ca:	e74c      	b.n	8008266 <__kernel_rem_pio2f+0x1f2>
 80083cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80083d0:	aa08      	add	r2, sp, #32
 80083d2:	ee10 3a10 	vmov	r3, s0
 80083d6:	e7f6      	b.n	80083c6 <__kernel_rem_pio2f+0x352>
 80083d8:	a808      	add	r0, sp, #32
 80083da:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80083de:	9001      	str	r0, [sp, #4]
 80083e0:	ee07 0a90 	vmov	s15, r0
 80083e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083e8:	3b01      	subs	r3, #1
 80083ea:	ee67 7a80 	vmul.f32	s15, s15, s0
 80083ee:	ee20 0a07 	vmul.f32	s0, s0, s14
 80083f2:	ed62 7a01 	vstmdb	r2!, {s15}
 80083f6:	e743      	b.n	8008280 <__kernel_rem_pio2f+0x20c>
 80083f8:	ecfc 6a01 	vldmia	ip!, {s13}
 80083fc:	ecb5 7a01 	vldmia	r5!, {s14}
 8008400:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008404:	3001      	adds	r0, #1
 8008406:	4550      	cmp	r0, sl
 8008408:	dc01      	bgt.n	800840e <__kernel_rem_pio2f+0x39a>
 800840a:	4282      	cmp	r2, r0
 800840c:	daf4      	bge.n	80083f8 <__kernel_rem_pio2f+0x384>
 800840e:	a858      	add	r0, sp, #352	@ 0x160
 8008410:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008414:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8008418:	3b01      	subs	r3, #1
 800841a:	e735      	b.n	8008288 <__kernel_rem_pio2f+0x214>
 800841c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800841e:	2b02      	cmp	r3, #2
 8008420:	dc09      	bgt.n	8008436 <__kernel_rem_pio2f+0x3c2>
 8008422:	2b00      	cmp	r3, #0
 8008424:	dc2b      	bgt.n	800847e <__kernel_rem_pio2f+0x40a>
 8008426:	d044      	beq.n	80084b2 <__kernel_rem_pio2f+0x43e>
 8008428:	f009 0007 	and.w	r0, r9, #7
 800842c:	b059      	add	sp, #356	@ 0x164
 800842e:	ecbd 8b04 	vpop	{d8-d9}
 8008432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008436:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008438:	2b03      	cmp	r3, #3
 800843a:	d1f5      	bne.n	8008428 <__kernel_rem_pio2f+0x3b4>
 800843c:	aa30      	add	r2, sp, #192	@ 0xc0
 800843e:	1f0b      	subs	r3, r1, #4
 8008440:	4413      	add	r3, r2
 8008442:	461a      	mov	r2, r3
 8008444:	4620      	mov	r0, r4
 8008446:	2800      	cmp	r0, #0
 8008448:	f1a2 0204 	sub.w	r2, r2, #4
 800844c:	dc52      	bgt.n	80084f4 <__kernel_rem_pio2f+0x480>
 800844e:	4622      	mov	r2, r4
 8008450:	2a01      	cmp	r2, #1
 8008452:	f1a3 0304 	sub.w	r3, r3, #4
 8008456:	dc5d      	bgt.n	8008514 <__kernel_rem_pio2f+0x4a0>
 8008458:	ab30      	add	r3, sp, #192	@ 0xc0
 800845a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8008378 <__kernel_rem_pio2f+0x304>
 800845e:	440b      	add	r3, r1
 8008460:	2c01      	cmp	r4, #1
 8008462:	dc67      	bgt.n	8008534 <__kernel_rem_pio2f+0x4c0>
 8008464:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8008468:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800846c:	2e00      	cmp	r6, #0
 800846e:	d167      	bne.n	8008540 <__kernel_rem_pio2f+0x4cc>
 8008470:	edc7 6a00 	vstr	s13, [r7]
 8008474:	ed87 7a01 	vstr	s14, [r7, #4]
 8008478:	edc7 7a02 	vstr	s15, [r7, #8]
 800847c:	e7d4      	b.n	8008428 <__kernel_rem_pio2f+0x3b4>
 800847e:	ab30      	add	r3, sp, #192	@ 0xc0
 8008480:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8008378 <__kernel_rem_pio2f+0x304>
 8008484:	440b      	add	r3, r1
 8008486:	4622      	mov	r2, r4
 8008488:	2a00      	cmp	r2, #0
 800848a:	da24      	bge.n	80084d6 <__kernel_rem_pio2f+0x462>
 800848c:	b34e      	cbz	r6, 80084e2 <__kernel_rem_pio2f+0x46e>
 800848e:	eef1 7a47 	vneg.f32	s15, s14
 8008492:	edc7 7a00 	vstr	s15, [r7]
 8008496:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800849a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800849e:	aa31      	add	r2, sp, #196	@ 0xc4
 80084a0:	2301      	movs	r3, #1
 80084a2:	429c      	cmp	r4, r3
 80084a4:	da20      	bge.n	80084e8 <__kernel_rem_pio2f+0x474>
 80084a6:	b10e      	cbz	r6, 80084ac <__kernel_rem_pio2f+0x438>
 80084a8:	eef1 7a67 	vneg.f32	s15, s15
 80084ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80084b0:	e7ba      	b.n	8008428 <__kernel_rem_pio2f+0x3b4>
 80084b2:	ab30      	add	r3, sp, #192	@ 0xc0
 80084b4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8008378 <__kernel_rem_pio2f+0x304>
 80084b8:	440b      	add	r3, r1
 80084ba:	2c00      	cmp	r4, #0
 80084bc:	da05      	bge.n	80084ca <__kernel_rem_pio2f+0x456>
 80084be:	b10e      	cbz	r6, 80084c4 <__kernel_rem_pio2f+0x450>
 80084c0:	eef1 7a67 	vneg.f32	s15, s15
 80084c4:	edc7 7a00 	vstr	s15, [r7]
 80084c8:	e7ae      	b.n	8008428 <__kernel_rem_pio2f+0x3b4>
 80084ca:	ed33 7a01 	vldmdb	r3!, {s14}
 80084ce:	3c01      	subs	r4, #1
 80084d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084d4:	e7f1      	b.n	80084ba <__kernel_rem_pio2f+0x446>
 80084d6:	ed73 7a01 	vldmdb	r3!, {s15}
 80084da:	3a01      	subs	r2, #1
 80084dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084e0:	e7d2      	b.n	8008488 <__kernel_rem_pio2f+0x414>
 80084e2:	eef0 7a47 	vmov.f32	s15, s14
 80084e6:	e7d4      	b.n	8008492 <__kernel_rem_pio2f+0x41e>
 80084e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80084ec:	3301      	adds	r3, #1
 80084ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084f2:	e7d6      	b.n	80084a2 <__kernel_rem_pio2f+0x42e>
 80084f4:	edd2 7a00 	vldr	s15, [r2]
 80084f8:	edd2 6a01 	vldr	s13, [r2, #4]
 80084fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008500:	3801      	subs	r0, #1
 8008502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008506:	ed82 7a00 	vstr	s14, [r2]
 800850a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850e:	edc2 7a01 	vstr	s15, [r2, #4]
 8008512:	e798      	b.n	8008446 <__kernel_rem_pio2f+0x3d2>
 8008514:	edd3 7a00 	vldr	s15, [r3]
 8008518:	edd3 6a01 	vldr	s13, [r3, #4]
 800851c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008520:	3a01      	subs	r2, #1
 8008522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008526:	ed83 7a00 	vstr	s14, [r3]
 800852a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852e:	edc3 7a01 	vstr	s15, [r3, #4]
 8008532:	e78d      	b.n	8008450 <__kernel_rem_pio2f+0x3dc>
 8008534:	ed33 7a01 	vldmdb	r3!, {s14}
 8008538:	3c01      	subs	r4, #1
 800853a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800853e:	e78f      	b.n	8008460 <__kernel_rem_pio2f+0x3ec>
 8008540:	eef1 6a66 	vneg.f32	s13, s13
 8008544:	eeb1 7a47 	vneg.f32	s14, s14
 8008548:	edc7 6a00 	vstr	s13, [r7]
 800854c:	ed87 7a01 	vstr	s14, [r7, #4]
 8008550:	eef1 7a67 	vneg.f32	s15, s15
 8008554:	e790      	b.n	8008478 <__kernel_rem_pio2f+0x404>
 8008556:	bf00      	nop

08008558 <scalbnf>:
 8008558:	ee10 3a10 	vmov	r3, s0
 800855c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008560:	d02b      	beq.n	80085ba <scalbnf+0x62>
 8008562:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008566:	d302      	bcc.n	800856e <scalbnf+0x16>
 8008568:	ee30 0a00 	vadd.f32	s0, s0, s0
 800856c:	4770      	bx	lr
 800856e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008572:	d123      	bne.n	80085bc <scalbnf+0x64>
 8008574:	4b24      	ldr	r3, [pc, #144]	@ (8008608 <scalbnf+0xb0>)
 8008576:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800860c <scalbnf+0xb4>
 800857a:	4298      	cmp	r0, r3
 800857c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008580:	db17      	blt.n	80085b2 <scalbnf+0x5a>
 8008582:	ee10 3a10 	vmov	r3, s0
 8008586:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800858a:	3a19      	subs	r2, #25
 800858c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008590:	4288      	cmp	r0, r1
 8008592:	dd15      	ble.n	80085c0 <scalbnf+0x68>
 8008594:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008610 <scalbnf+0xb8>
 8008598:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008614 <scalbnf+0xbc>
 800859c:	ee10 3a10 	vmov	r3, s0
 80085a0:	eeb0 7a67 	vmov.f32	s14, s15
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	bfb8      	it	lt
 80085a8:	eef0 7a66 	vmovlt.f32	s15, s13
 80085ac:	ee27 0a87 	vmul.f32	s0, s15, s14
 80085b0:	4770      	bx	lr
 80085b2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008618 <scalbnf+0xc0>
 80085b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80085ba:	4770      	bx	lr
 80085bc:	0dd2      	lsrs	r2, r2, #23
 80085be:	e7e5      	b.n	800858c <scalbnf+0x34>
 80085c0:	4410      	add	r0, r2
 80085c2:	28fe      	cmp	r0, #254	@ 0xfe
 80085c4:	dce6      	bgt.n	8008594 <scalbnf+0x3c>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	dd06      	ble.n	80085d8 <scalbnf+0x80>
 80085ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80085ce:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80085d2:	ee00 3a10 	vmov	s0, r3
 80085d6:	4770      	bx	lr
 80085d8:	f110 0f16 	cmn.w	r0, #22
 80085dc:	da09      	bge.n	80085f2 <scalbnf+0x9a>
 80085de:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008618 <scalbnf+0xc0>
 80085e2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800861c <scalbnf+0xc4>
 80085e6:	ee10 3a10 	vmov	r3, s0
 80085ea:	eeb0 7a67 	vmov.f32	s14, s15
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	e7d9      	b.n	80085a6 <scalbnf+0x4e>
 80085f2:	3019      	adds	r0, #25
 80085f4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80085f8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80085fc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008620 <scalbnf+0xc8>
 8008600:	ee07 3a90 	vmov	s15, r3
 8008604:	e7d7      	b.n	80085b6 <scalbnf+0x5e>
 8008606:	bf00      	nop
 8008608:	ffff3cb0 	.word	0xffff3cb0
 800860c:	4c000000 	.word	0x4c000000
 8008610:	7149f2ca 	.word	0x7149f2ca
 8008614:	f149f2ca 	.word	0xf149f2ca
 8008618:	0da24260 	.word	0x0da24260
 800861c:	8da24260 	.word	0x8da24260
 8008620:	33000000 	.word	0x33000000

08008624 <floorf>:
 8008624:	ee10 3a10 	vmov	r3, s0
 8008628:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800862c:	3a7f      	subs	r2, #127	@ 0x7f
 800862e:	2a16      	cmp	r2, #22
 8008630:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008634:	dc2b      	bgt.n	800868e <floorf+0x6a>
 8008636:	2a00      	cmp	r2, #0
 8008638:	da12      	bge.n	8008660 <floorf+0x3c>
 800863a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80086a0 <floorf+0x7c>
 800863e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008642:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864a:	dd06      	ble.n	800865a <floorf+0x36>
 800864c:	2b00      	cmp	r3, #0
 800864e:	da24      	bge.n	800869a <floorf+0x76>
 8008650:	2900      	cmp	r1, #0
 8008652:	4b14      	ldr	r3, [pc, #80]	@ (80086a4 <floorf+0x80>)
 8008654:	bf08      	it	eq
 8008656:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800865a:	ee00 3a10 	vmov	s0, r3
 800865e:	4770      	bx	lr
 8008660:	4911      	ldr	r1, [pc, #68]	@ (80086a8 <floorf+0x84>)
 8008662:	4111      	asrs	r1, r2
 8008664:	420b      	tst	r3, r1
 8008666:	d0fa      	beq.n	800865e <floorf+0x3a>
 8008668:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80086a0 <floorf+0x7c>
 800866c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008670:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008678:	ddef      	ble.n	800865a <floorf+0x36>
 800867a:	2b00      	cmp	r3, #0
 800867c:	bfbe      	ittt	lt
 800867e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8008682:	fa40 f202 	asrlt.w	r2, r0, r2
 8008686:	189b      	addlt	r3, r3, r2
 8008688:	ea23 0301 	bic.w	r3, r3, r1
 800868c:	e7e5      	b.n	800865a <floorf+0x36>
 800868e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008692:	d3e4      	bcc.n	800865e <floorf+0x3a>
 8008694:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008698:	4770      	bx	lr
 800869a:	2300      	movs	r3, #0
 800869c:	e7dd      	b.n	800865a <floorf+0x36>
 800869e:	bf00      	nop
 80086a0:	7149f2ca 	.word	0x7149f2ca
 80086a4:	bf800000 	.word	0xbf800000
 80086a8:	007fffff 	.word	0x007fffff

080086ac <sbrk_aligned>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4e0f      	ldr	r6, [pc, #60]	@ (80086ec <sbrk_aligned+0x40>)
 80086b0:	460c      	mov	r4, r1
 80086b2:	6831      	ldr	r1, [r6, #0]
 80086b4:	4605      	mov	r5, r0
 80086b6:	b911      	cbnz	r1, 80086be <sbrk_aligned+0x12>
 80086b8:	f000 f8ce 	bl	8008858 <_sbrk_r>
 80086bc:	6030      	str	r0, [r6, #0]
 80086be:	4621      	mov	r1, r4
 80086c0:	4628      	mov	r0, r5
 80086c2:	f000 f8c9 	bl	8008858 <_sbrk_r>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	d103      	bne.n	80086d2 <sbrk_aligned+0x26>
 80086ca:	f04f 34ff 	mov.w	r4, #4294967295
 80086ce:	4620      	mov	r0, r4
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	1cc4      	adds	r4, r0, #3
 80086d4:	f024 0403 	bic.w	r4, r4, #3
 80086d8:	42a0      	cmp	r0, r4
 80086da:	d0f8      	beq.n	80086ce <sbrk_aligned+0x22>
 80086dc:	1a21      	subs	r1, r4, r0
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 f8ba 	bl	8008858 <_sbrk_r>
 80086e4:	3001      	adds	r0, #1
 80086e6:	d1f2      	bne.n	80086ce <sbrk_aligned+0x22>
 80086e8:	e7ef      	b.n	80086ca <sbrk_aligned+0x1e>
 80086ea:	bf00      	nop
 80086ec:	20000448 	.word	0x20000448

080086f0 <_malloc_r>:
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f4:	1ccd      	adds	r5, r1, #3
 80086f6:	f025 0503 	bic.w	r5, r5, #3
 80086fa:	3508      	adds	r5, #8
 80086fc:	2d0c      	cmp	r5, #12
 80086fe:	bf38      	it	cc
 8008700:	250c      	movcc	r5, #12
 8008702:	2d00      	cmp	r5, #0
 8008704:	4606      	mov	r6, r0
 8008706:	db01      	blt.n	800870c <_malloc_r+0x1c>
 8008708:	42a9      	cmp	r1, r5
 800870a:	d904      	bls.n	8008716 <_malloc_r+0x26>
 800870c:	230c      	movs	r3, #12
 800870e:	6033      	str	r3, [r6, #0]
 8008710:	2000      	movs	r0, #0
 8008712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087ec <_malloc_r+0xfc>
 800871a:	f000 f869 	bl	80087f0 <__malloc_lock>
 800871e:	f8d8 3000 	ldr.w	r3, [r8]
 8008722:	461c      	mov	r4, r3
 8008724:	bb44      	cbnz	r4, 8008778 <_malloc_r+0x88>
 8008726:	4629      	mov	r1, r5
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff ffbf 	bl	80086ac <sbrk_aligned>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	4604      	mov	r4, r0
 8008732:	d158      	bne.n	80087e6 <_malloc_r+0xf6>
 8008734:	f8d8 4000 	ldr.w	r4, [r8]
 8008738:	4627      	mov	r7, r4
 800873a:	2f00      	cmp	r7, #0
 800873c:	d143      	bne.n	80087c6 <_malloc_r+0xd6>
 800873e:	2c00      	cmp	r4, #0
 8008740:	d04b      	beq.n	80087da <_malloc_r+0xea>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	4639      	mov	r1, r7
 8008746:	4630      	mov	r0, r6
 8008748:	eb04 0903 	add.w	r9, r4, r3
 800874c:	f000 f884 	bl	8008858 <_sbrk_r>
 8008750:	4581      	cmp	r9, r0
 8008752:	d142      	bne.n	80087da <_malloc_r+0xea>
 8008754:	6821      	ldr	r1, [r4, #0]
 8008756:	1a6d      	subs	r5, r5, r1
 8008758:	4629      	mov	r1, r5
 800875a:	4630      	mov	r0, r6
 800875c:	f7ff ffa6 	bl	80086ac <sbrk_aligned>
 8008760:	3001      	adds	r0, #1
 8008762:	d03a      	beq.n	80087da <_malloc_r+0xea>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	442b      	add	r3, r5
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	f8d8 3000 	ldr.w	r3, [r8]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	bb62      	cbnz	r2, 80087cc <_malloc_r+0xdc>
 8008772:	f8c8 7000 	str.w	r7, [r8]
 8008776:	e00f      	b.n	8008798 <_malloc_r+0xa8>
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	1b52      	subs	r2, r2, r5
 800877c:	d420      	bmi.n	80087c0 <_malloc_r+0xd0>
 800877e:	2a0b      	cmp	r2, #11
 8008780:	d917      	bls.n	80087b2 <_malloc_r+0xc2>
 8008782:	1961      	adds	r1, r4, r5
 8008784:	42a3      	cmp	r3, r4
 8008786:	6025      	str	r5, [r4, #0]
 8008788:	bf18      	it	ne
 800878a:	6059      	strne	r1, [r3, #4]
 800878c:	6863      	ldr	r3, [r4, #4]
 800878e:	bf08      	it	eq
 8008790:	f8c8 1000 	streq.w	r1, [r8]
 8008794:	5162      	str	r2, [r4, r5]
 8008796:	604b      	str	r3, [r1, #4]
 8008798:	4630      	mov	r0, r6
 800879a:	f000 f82f 	bl	80087fc <__malloc_unlock>
 800879e:	f104 000b 	add.w	r0, r4, #11
 80087a2:	1d23      	adds	r3, r4, #4
 80087a4:	f020 0007 	bic.w	r0, r0, #7
 80087a8:	1ac2      	subs	r2, r0, r3
 80087aa:	bf1c      	itt	ne
 80087ac:	1a1b      	subne	r3, r3, r0
 80087ae:	50a3      	strne	r3, [r4, r2]
 80087b0:	e7af      	b.n	8008712 <_malloc_r+0x22>
 80087b2:	6862      	ldr	r2, [r4, #4]
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	bf0c      	ite	eq
 80087b8:	f8c8 2000 	streq.w	r2, [r8]
 80087bc:	605a      	strne	r2, [r3, #4]
 80087be:	e7eb      	b.n	8008798 <_malloc_r+0xa8>
 80087c0:	4623      	mov	r3, r4
 80087c2:	6864      	ldr	r4, [r4, #4]
 80087c4:	e7ae      	b.n	8008724 <_malloc_r+0x34>
 80087c6:	463c      	mov	r4, r7
 80087c8:	687f      	ldr	r7, [r7, #4]
 80087ca:	e7b6      	b.n	800873a <_malloc_r+0x4a>
 80087cc:	461a      	mov	r2, r3
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	d1fb      	bne.n	80087cc <_malloc_r+0xdc>
 80087d4:	2300      	movs	r3, #0
 80087d6:	6053      	str	r3, [r2, #4]
 80087d8:	e7de      	b.n	8008798 <_malloc_r+0xa8>
 80087da:	230c      	movs	r3, #12
 80087dc:	6033      	str	r3, [r6, #0]
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f80c 	bl	80087fc <__malloc_unlock>
 80087e4:	e794      	b.n	8008710 <_malloc_r+0x20>
 80087e6:	6005      	str	r5, [r0, #0]
 80087e8:	e7d6      	b.n	8008798 <_malloc_r+0xa8>
 80087ea:	bf00      	nop
 80087ec:	2000044c 	.word	0x2000044c

080087f0 <__malloc_lock>:
 80087f0:	4801      	ldr	r0, [pc, #4]	@ (80087f8 <__malloc_lock+0x8>)
 80087f2:	f000 b86b 	b.w	80088cc <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	2000058c 	.word	0x2000058c

080087fc <__malloc_unlock>:
 80087fc:	4801      	ldr	r0, [pc, #4]	@ (8008804 <__malloc_unlock+0x8>)
 80087fe:	f000 b866 	b.w	80088ce <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	2000058c 	.word	0x2000058c

08008808 <_vsiprintf_r>:
 8008808:	b500      	push	{lr}
 800880a:	b09b      	sub	sp, #108	@ 0x6c
 800880c:	9100      	str	r1, [sp, #0]
 800880e:	9104      	str	r1, [sp, #16]
 8008810:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008814:	9105      	str	r1, [sp, #20]
 8008816:	9102      	str	r1, [sp, #8]
 8008818:	4905      	ldr	r1, [pc, #20]	@ (8008830 <_vsiprintf_r+0x28>)
 800881a:	9103      	str	r1, [sp, #12]
 800881c:	4669      	mov	r1, sp
 800881e:	f000 f8fd 	bl	8008a1c <_svfiprintf_r>
 8008822:	9b00      	ldr	r3, [sp, #0]
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
 8008828:	b01b      	add	sp, #108	@ 0x6c
 800882a:	f85d fb04 	ldr.w	pc, [sp], #4
 800882e:	bf00      	nop
 8008830:	ffff0208 	.word	0xffff0208

08008834 <vsiprintf>:
 8008834:	4613      	mov	r3, r2
 8008836:	460a      	mov	r2, r1
 8008838:	4601      	mov	r1, r0
 800883a:	4802      	ldr	r0, [pc, #8]	@ (8008844 <vsiprintf+0x10>)
 800883c:	6800      	ldr	r0, [r0, #0]
 800883e:	f7ff bfe3 	b.w	8008808 <_vsiprintf_r>
 8008842:	bf00      	nop
 8008844:	200000a0 	.word	0x200000a0

08008848 <memset>:
 8008848:	4402      	add	r2, r0
 800884a:	4603      	mov	r3, r0
 800884c:	4293      	cmp	r3, r2
 800884e:	d100      	bne.n	8008852 <memset+0xa>
 8008850:	4770      	bx	lr
 8008852:	f803 1b01 	strb.w	r1, [r3], #1
 8008856:	e7f9      	b.n	800884c <memset+0x4>

08008858 <_sbrk_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d06      	ldr	r5, [pc, #24]	@ (8008874 <_sbrk_r+0x1c>)
 800885c:	2300      	movs	r3, #0
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	602b      	str	r3, [r5, #0]
 8008864:	f7fa fc78 	bl	8003158 <_sbrk>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_sbrk_r+0x1a>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_sbrk_r+0x1a>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	20000588 	.word	0x20000588

08008878 <__errno>:
 8008878:	4b01      	ldr	r3, [pc, #4]	@ (8008880 <__errno+0x8>)
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	200000a0 	.word	0x200000a0

08008884 <__libc_init_array>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	4d0d      	ldr	r5, [pc, #52]	@ (80088bc <__libc_init_array+0x38>)
 8008888:	4c0d      	ldr	r4, [pc, #52]	@ (80088c0 <__libc_init_array+0x3c>)
 800888a:	1b64      	subs	r4, r4, r5
 800888c:	10a4      	asrs	r4, r4, #2
 800888e:	2600      	movs	r6, #0
 8008890:	42a6      	cmp	r6, r4
 8008892:	d109      	bne.n	80088a8 <__libc_init_array+0x24>
 8008894:	4d0b      	ldr	r5, [pc, #44]	@ (80088c4 <__libc_init_array+0x40>)
 8008896:	4c0c      	ldr	r4, [pc, #48]	@ (80088c8 <__libc_init_array+0x44>)
 8008898:	f000 fba8 	bl	8008fec <_init>
 800889c:	1b64      	subs	r4, r4, r5
 800889e:	10a4      	asrs	r4, r4, #2
 80088a0:	2600      	movs	r6, #0
 80088a2:	42a6      	cmp	r6, r4
 80088a4:	d105      	bne.n	80088b2 <__libc_init_array+0x2e>
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ac:	4798      	blx	r3
 80088ae:	3601      	adds	r6, #1
 80088b0:	e7ee      	b.n	8008890 <__libc_init_array+0xc>
 80088b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b6:	4798      	blx	r3
 80088b8:	3601      	adds	r6, #1
 80088ba:	e7f2      	b.n	80088a2 <__libc_init_array+0x1e>
 80088bc:	0800bcbc 	.word	0x0800bcbc
 80088c0:	0800bcbc 	.word	0x0800bcbc
 80088c4:	0800bcbc 	.word	0x0800bcbc
 80088c8:	0800bcc4 	.word	0x0800bcc4

080088cc <__retarget_lock_acquire_recursive>:
 80088cc:	4770      	bx	lr

080088ce <__retarget_lock_release_recursive>:
 80088ce:	4770      	bx	lr

080088d0 <_free_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4605      	mov	r5, r0
 80088d4:	2900      	cmp	r1, #0
 80088d6:	d041      	beq.n	800895c <_free_r+0x8c>
 80088d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088dc:	1f0c      	subs	r4, r1, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb8      	it	lt
 80088e2:	18e4      	addlt	r4, r4, r3
 80088e4:	f7ff ff84 	bl	80087f0 <__malloc_lock>
 80088e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008960 <_free_r+0x90>)
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	b933      	cbnz	r3, 80088fc <_free_r+0x2c>
 80088ee:	6063      	str	r3, [r4, #4]
 80088f0:	6014      	str	r4, [r2, #0]
 80088f2:	4628      	mov	r0, r5
 80088f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088f8:	f7ff bf80 	b.w	80087fc <__malloc_unlock>
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d908      	bls.n	8008912 <_free_r+0x42>
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	1821      	adds	r1, r4, r0
 8008904:	428b      	cmp	r3, r1
 8008906:	bf01      	itttt	eq
 8008908:	6819      	ldreq	r1, [r3, #0]
 800890a:	685b      	ldreq	r3, [r3, #4]
 800890c:	1809      	addeq	r1, r1, r0
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	e7ed      	b.n	80088ee <_free_r+0x1e>
 8008912:	461a      	mov	r2, r3
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	b10b      	cbz	r3, 800891c <_free_r+0x4c>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d9fa      	bls.n	8008912 <_free_r+0x42>
 800891c:	6811      	ldr	r1, [r2, #0]
 800891e:	1850      	adds	r0, r2, r1
 8008920:	42a0      	cmp	r0, r4
 8008922:	d10b      	bne.n	800893c <_free_r+0x6c>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	4401      	add	r1, r0
 8008928:	1850      	adds	r0, r2, r1
 800892a:	4283      	cmp	r3, r0
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	d1e0      	bne.n	80088f2 <_free_r+0x22>
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	6053      	str	r3, [r2, #4]
 8008936:	4408      	add	r0, r1
 8008938:	6010      	str	r0, [r2, #0]
 800893a:	e7da      	b.n	80088f2 <_free_r+0x22>
 800893c:	d902      	bls.n	8008944 <_free_r+0x74>
 800893e:	230c      	movs	r3, #12
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	e7d6      	b.n	80088f2 <_free_r+0x22>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	1821      	adds	r1, r4, r0
 8008948:	428b      	cmp	r3, r1
 800894a:	bf04      	itt	eq
 800894c:	6819      	ldreq	r1, [r3, #0]
 800894e:	685b      	ldreq	r3, [r3, #4]
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	bf04      	itt	eq
 8008954:	1809      	addeq	r1, r1, r0
 8008956:	6021      	streq	r1, [r4, #0]
 8008958:	6054      	str	r4, [r2, #4]
 800895a:	e7ca      	b.n	80088f2 <_free_r+0x22>
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	bf00      	nop
 8008960:	2000044c 	.word	0x2000044c

08008964 <__ssputs_r>:
 8008964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008968:	688e      	ldr	r6, [r1, #8]
 800896a:	461f      	mov	r7, r3
 800896c:	42be      	cmp	r6, r7
 800896e:	680b      	ldr	r3, [r1, #0]
 8008970:	4682      	mov	sl, r0
 8008972:	460c      	mov	r4, r1
 8008974:	4690      	mov	r8, r2
 8008976:	d82d      	bhi.n	80089d4 <__ssputs_r+0x70>
 8008978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800897c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008980:	d026      	beq.n	80089d0 <__ssputs_r+0x6c>
 8008982:	6965      	ldr	r5, [r4, #20]
 8008984:	6909      	ldr	r1, [r1, #16]
 8008986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800898a:	eba3 0901 	sub.w	r9, r3, r1
 800898e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008992:	1c7b      	adds	r3, r7, #1
 8008994:	444b      	add	r3, r9
 8008996:	106d      	asrs	r5, r5, #1
 8008998:	429d      	cmp	r5, r3
 800899a:	bf38      	it	cc
 800899c:	461d      	movcc	r5, r3
 800899e:	0553      	lsls	r3, r2, #21
 80089a0:	d527      	bpl.n	80089f2 <__ssputs_r+0x8e>
 80089a2:	4629      	mov	r1, r5
 80089a4:	f7ff fea4 	bl	80086f0 <_malloc_r>
 80089a8:	4606      	mov	r6, r0
 80089aa:	b360      	cbz	r0, 8008a06 <__ssputs_r+0xa2>
 80089ac:	6921      	ldr	r1, [r4, #16]
 80089ae:	464a      	mov	r2, r9
 80089b0:	f000 fad8 	bl	8008f64 <memcpy>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	6126      	str	r6, [r4, #16]
 80089c2:	6165      	str	r5, [r4, #20]
 80089c4:	444e      	add	r6, r9
 80089c6:	eba5 0509 	sub.w	r5, r5, r9
 80089ca:	6026      	str	r6, [r4, #0]
 80089cc:	60a5      	str	r5, [r4, #8]
 80089ce:	463e      	mov	r6, r7
 80089d0:	42be      	cmp	r6, r7
 80089d2:	d900      	bls.n	80089d6 <__ssputs_r+0x72>
 80089d4:	463e      	mov	r6, r7
 80089d6:	6820      	ldr	r0, [r4, #0]
 80089d8:	4632      	mov	r2, r6
 80089da:	4641      	mov	r1, r8
 80089dc:	f000 faa8 	bl	8008f30 <memmove>
 80089e0:	68a3      	ldr	r3, [r4, #8]
 80089e2:	1b9b      	subs	r3, r3, r6
 80089e4:	60a3      	str	r3, [r4, #8]
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	4433      	add	r3, r6
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	2000      	movs	r0, #0
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	462a      	mov	r2, r5
 80089f4:	f000 fac4 	bl	8008f80 <_realloc_r>
 80089f8:	4606      	mov	r6, r0
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1e0      	bne.n	80089c0 <__ssputs_r+0x5c>
 80089fe:	6921      	ldr	r1, [r4, #16]
 8008a00:	4650      	mov	r0, sl
 8008a02:	f7ff ff65 	bl	80088d0 <_free_r>
 8008a06:	230c      	movs	r3, #12
 8008a08:	f8ca 3000 	str.w	r3, [sl]
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	e7e9      	b.n	80089ee <__ssputs_r+0x8a>
	...

08008a1c <_svfiprintf_r>:
 8008a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	4698      	mov	r8, r3
 8008a22:	898b      	ldrh	r3, [r1, #12]
 8008a24:	061b      	lsls	r3, r3, #24
 8008a26:	b09d      	sub	sp, #116	@ 0x74
 8008a28:	4607      	mov	r7, r0
 8008a2a:	460d      	mov	r5, r1
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	d510      	bpl.n	8008a52 <_svfiprintf_r+0x36>
 8008a30:	690b      	ldr	r3, [r1, #16]
 8008a32:	b973      	cbnz	r3, 8008a52 <_svfiprintf_r+0x36>
 8008a34:	2140      	movs	r1, #64	@ 0x40
 8008a36:	f7ff fe5b 	bl	80086f0 <_malloc_r>
 8008a3a:	6028      	str	r0, [r5, #0]
 8008a3c:	6128      	str	r0, [r5, #16]
 8008a3e:	b930      	cbnz	r0, 8008a4e <_svfiprintf_r+0x32>
 8008a40:	230c      	movs	r3, #12
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	f04f 30ff 	mov.w	r0, #4294967295
 8008a48:	b01d      	add	sp, #116	@ 0x74
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	2340      	movs	r3, #64	@ 0x40
 8008a50:	616b      	str	r3, [r5, #20]
 8008a52:	2300      	movs	r3, #0
 8008a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a56:	2320      	movs	r3, #32
 8008a58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a60:	2330      	movs	r3, #48	@ 0x30
 8008a62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c00 <_svfiprintf_r+0x1e4>
 8008a66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a6a:	f04f 0901 	mov.w	r9, #1
 8008a6e:	4623      	mov	r3, r4
 8008a70:	469a      	mov	sl, r3
 8008a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a76:	b10a      	cbz	r2, 8008a7c <_svfiprintf_r+0x60>
 8008a78:	2a25      	cmp	r2, #37	@ 0x25
 8008a7a:	d1f9      	bne.n	8008a70 <_svfiprintf_r+0x54>
 8008a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a80:	d00b      	beq.n	8008a9a <_svfiprintf_r+0x7e>
 8008a82:	465b      	mov	r3, fp
 8008a84:	4622      	mov	r2, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7ff ff6b 	bl	8008964 <__ssputs_r>
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f000 80a7 	beq.w	8008be2 <_svfiprintf_r+0x1c6>
 8008a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a96:	445a      	add	r2, fp
 8008a98:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 809f 	beq.w	8008be2 <_svfiprintf_r+0x1c6>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aae:	f10a 0a01 	add.w	sl, sl, #1
 8008ab2:	9304      	str	r3, [sp, #16]
 8008ab4:	9307      	str	r3, [sp, #28]
 8008ab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008aba:	931a      	str	r3, [sp, #104]	@ 0x68
 8008abc:	4654      	mov	r4, sl
 8008abe:	2205      	movs	r2, #5
 8008ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac4:	484e      	ldr	r0, [pc, #312]	@ (8008c00 <_svfiprintf_r+0x1e4>)
 8008ac6:	f7f7 fbb3 	bl	8000230 <memchr>
 8008aca:	9a04      	ldr	r2, [sp, #16]
 8008acc:	b9d8      	cbnz	r0, 8008b06 <_svfiprintf_r+0xea>
 8008ace:	06d0      	lsls	r0, r2, #27
 8008ad0:	bf44      	itt	mi
 8008ad2:	2320      	movmi	r3, #32
 8008ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ad8:	0711      	lsls	r1, r2, #28
 8008ada:	bf44      	itt	mi
 8008adc:	232b      	movmi	r3, #43	@ 0x2b
 8008ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ae8:	d015      	beq.n	8008b16 <_svfiprintf_r+0xfa>
 8008aea:	9a07      	ldr	r2, [sp, #28]
 8008aec:	4654      	mov	r4, sl
 8008aee:	2000      	movs	r0, #0
 8008af0:	f04f 0c0a 	mov.w	ip, #10
 8008af4:	4621      	mov	r1, r4
 8008af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008afa:	3b30      	subs	r3, #48	@ 0x30
 8008afc:	2b09      	cmp	r3, #9
 8008afe:	d94b      	bls.n	8008b98 <_svfiprintf_r+0x17c>
 8008b00:	b1b0      	cbz	r0, 8008b30 <_svfiprintf_r+0x114>
 8008b02:	9207      	str	r2, [sp, #28]
 8008b04:	e014      	b.n	8008b30 <_svfiprintf_r+0x114>
 8008b06:	eba0 0308 	sub.w	r3, r0, r8
 8008b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	46a2      	mov	sl, r4
 8008b14:	e7d2      	b.n	8008abc <_svfiprintf_r+0xa0>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	1d19      	adds	r1, r3, #4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	9103      	str	r1, [sp, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bfbb      	ittet	lt
 8008b22:	425b      	neglt	r3, r3
 8008b24:	f042 0202 	orrlt.w	r2, r2, #2
 8008b28:	9307      	strge	r3, [sp, #28]
 8008b2a:	9307      	strlt	r3, [sp, #28]
 8008b2c:	bfb8      	it	lt
 8008b2e:	9204      	strlt	r2, [sp, #16]
 8008b30:	7823      	ldrb	r3, [r4, #0]
 8008b32:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b34:	d10a      	bne.n	8008b4c <_svfiprintf_r+0x130>
 8008b36:	7863      	ldrb	r3, [r4, #1]
 8008b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b3a:	d132      	bne.n	8008ba2 <_svfiprintf_r+0x186>
 8008b3c:	9b03      	ldr	r3, [sp, #12]
 8008b3e:	1d1a      	adds	r2, r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	9203      	str	r2, [sp, #12]
 8008b44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b48:	3402      	adds	r4, #2
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c10 <_svfiprintf_r+0x1f4>
 8008b50:	7821      	ldrb	r1, [r4, #0]
 8008b52:	2203      	movs	r2, #3
 8008b54:	4650      	mov	r0, sl
 8008b56:	f7f7 fb6b 	bl	8000230 <memchr>
 8008b5a:	b138      	cbz	r0, 8008b6c <_svfiprintf_r+0x150>
 8008b5c:	9b04      	ldr	r3, [sp, #16]
 8008b5e:	eba0 000a 	sub.w	r0, r0, sl
 8008b62:	2240      	movs	r2, #64	@ 0x40
 8008b64:	4082      	lsls	r2, r0
 8008b66:	4313      	orrs	r3, r2
 8008b68:	3401      	adds	r4, #1
 8008b6a:	9304      	str	r3, [sp, #16]
 8008b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b70:	4824      	ldr	r0, [pc, #144]	@ (8008c04 <_svfiprintf_r+0x1e8>)
 8008b72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b76:	2206      	movs	r2, #6
 8008b78:	f7f7 fb5a 	bl	8000230 <memchr>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d036      	beq.n	8008bee <_svfiprintf_r+0x1d2>
 8008b80:	4b21      	ldr	r3, [pc, #132]	@ (8008c08 <_svfiprintf_r+0x1ec>)
 8008b82:	bb1b      	cbnz	r3, 8008bcc <_svfiprintf_r+0x1b0>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	3307      	adds	r3, #7
 8008b88:	f023 0307 	bic.w	r3, r3, #7
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	9303      	str	r3, [sp, #12]
 8008b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b92:	4433      	add	r3, r6
 8008b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b96:	e76a      	b.n	8008a6e <_svfiprintf_r+0x52>
 8008b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	e7a8      	b.n	8008af4 <_svfiprintf_r+0xd8>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	3401      	adds	r4, #1
 8008ba6:	9305      	str	r3, [sp, #20]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f04f 0c0a 	mov.w	ip, #10
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb4:	3a30      	subs	r2, #48	@ 0x30
 8008bb6:	2a09      	cmp	r2, #9
 8008bb8:	d903      	bls.n	8008bc2 <_svfiprintf_r+0x1a6>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0c6      	beq.n	8008b4c <_svfiprintf_r+0x130>
 8008bbe:	9105      	str	r1, [sp, #20]
 8008bc0:	e7c4      	b.n	8008b4c <_svfiprintf_r+0x130>
 8008bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e7f0      	b.n	8008bae <_svfiprintf_r+0x192>
 8008bcc:	ab03      	add	r3, sp, #12
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	462a      	mov	r2, r5
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c0c <_svfiprintf_r+0x1f0>)
 8008bd4:	a904      	add	r1, sp, #16
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f3af 8000 	nop.w
 8008bdc:	1c42      	adds	r2, r0, #1
 8008bde:	4606      	mov	r6, r0
 8008be0:	d1d6      	bne.n	8008b90 <_svfiprintf_r+0x174>
 8008be2:	89ab      	ldrh	r3, [r5, #12]
 8008be4:	065b      	lsls	r3, r3, #25
 8008be6:	f53f af2d 	bmi.w	8008a44 <_svfiprintf_r+0x28>
 8008bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bec:	e72c      	b.n	8008a48 <_svfiprintf_r+0x2c>
 8008bee:	ab03      	add	r3, sp, #12
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	462a      	mov	r2, r5
 8008bf4:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <_svfiprintf_r+0x1f0>)
 8008bf6:	a904      	add	r1, sp, #16
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	f000 f879 	bl	8008cf0 <_printf_i>
 8008bfe:	e7ed      	b.n	8008bdc <_svfiprintf_r+0x1c0>
 8008c00:	0800bc80 	.word	0x0800bc80
 8008c04:	0800bc8a 	.word	0x0800bc8a
 8008c08:	00000000 	.word	0x00000000
 8008c0c:	08008965 	.word	0x08008965
 8008c10:	0800bc86 	.word	0x0800bc86

08008c14 <_printf_common>:
 8008c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	4616      	mov	r6, r2
 8008c1a:	4698      	mov	r8, r3
 8008c1c:	688a      	ldr	r2, [r1, #8]
 8008c1e:	690b      	ldr	r3, [r1, #16]
 8008c20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	bfb8      	it	lt
 8008c28:	4613      	movlt	r3, r2
 8008c2a:	6033      	str	r3, [r6, #0]
 8008c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c30:	4607      	mov	r7, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	b10a      	cbz	r2, 8008c3a <_printf_common+0x26>
 8008c36:	3301      	adds	r3, #1
 8008c38:	6033      	str	r3, [r6, #0]
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	0699      	lsls	r1, r3, #26
 8008c3e:	bf42      	ittt	mi
 8008c40:	6833      	ldrmi	r3, [r6, #0]
 8008c42:	3302      	addmi	r3, #2
 8008c44:	6033      	strmi	r3, [r6, #0]
 8008c46:	6825      	ldr	r5, [r4, #0]
 8008c48:	f015 0506 	ands.w	r5, r5, #6
 8008c4c:	d106      	bne.n	8008c5c <_printf_common+0x48>
 8008c4e:	f104 0a19 	add.w	sl, r4, #25
 8008c52:	68e3      	ldr	r3, [r4, #12]
 8008c54:	6832      	ldr	r2, [r6, #0]
 8008c56:	1a9b      	subs	r3, r3, r2
 8008c58:	42ab      	cmp	r3, r5
 8008c5a:	dc26      	bgt.n	8008caa <_printf_common+0x96>
 8008c5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c60:	6822      	ldr	r2, [r4, #0]
 8008c62:	3b00      	subs	r3, #0
 8008c64:	bf18      	it	ne
 8008c66:	2301      	movne	r3, #1
 8008c68:	0692      	lsls	r2, r2, #26
 8008c6a:	d42b      	bmi.n	8008cc4 <_printf_common+0xb0>
 8008c6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c70:	4641      	mov	r1, r8
 8008c72:	4638      	mov	r0, r7
 8008c74:	47c8      	blx	r9
 8008c76:	3001      	adds	r0, #1
 8008c78:	d01e      	beq.n	8008cb8 <_printf_common+0xa4>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	6922      	ldr	r2, [r4, #16]
 8008c7e:	f003 0306 	and.w	r3, r3, #6
 8008c82:	2b04      	cmp	r3, #4
 8008c84:	bf02      	ittt	eq
 8008c86:	68e5      	ldreq	r5, [r4, #12]
 8008c88:	6833      	ldreq	r3, [r6, #0]
 8008c8a:	1aed      	subeq	r5, r5, r3
 8008c8c:	68a3      	ldr	r3, [r4, #8]
 8008c8e:	bf0c      	ite	eq
 8008c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c94:	2500      	movne	r5, #0
 8008c96:	4293      	cmp	r3, r2
 8008c98:	bfc4      	itt	gt
 8008c9a:	1a9b      	subgt	r3, r3, r2
 8008c9c:	18ed      	addgt	r5, r5, r3
 8008c9e:	2600      	movs	r6, #0
 8008ca0:	341a      	adds	r4, #26
 8008ca2:	42b5      	cmp	r5, r6
 8008ca4:	d11a      	bne.n	8008cdc <_printf_common+0xc8>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	e008      	b.n	8008cbc <_printf_common+0xa8>
 8008caa:	2301      	movs	r3, #1
 8008cac:	4652      	mov	r2, sl
 8008cae:	4641      	mov	r1, r8
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	47c8      	blx	r9
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d103      	bne.n	8008cc0 <_printf_common+0xac>
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc0:	3501      	adds	r5, #1
 8008cc2:	e7c6      	b.n	8008c52 <_printf_common+0x3e>
 8008cc4:	18e1      	adds	r1, r4, r3
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	2030      	movs	r0, #48	@ 0x30
 8008cca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cce:	4422      	add	r2, r4
 8008cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008cd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cd8:	3302      	adds	r3, #2
 8008cda:	e7c7      	b.n	8008c6c <_printf_common+0x58>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	47c8      	blx	r9
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d0e6      	beq.n	8008cb8 <_printf_common+0xa4>
 8008cea:	3601      	adds	r6, #1
 8008cec:	e7d9      	b.n	8008ca2 <_printf_common+0x8e>
	...

08008cf0 <_printf_i>:
 8008cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	7e0f      	ldrb	r7, [r1, #24]
 8008cf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cf8:	2f78      	cmp	r7, #120	@ 0x78
 8008cfa:	4691      	mov	r9, r2
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	469a      	mov	sl, r3
 8008d02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d06:	d807      	bhi.n	8008d18 <_printf_i+0x28>
 8008d08:	2f62      	cmp	r7, #98	@ 0x62
 8008d0a:	d80a      	bhi.n	8008d22 <_printf_i+0x32>
 8008d0c:	2f00      	cmp	r7, #0
 8008d0e:	f000 80d2 	beq.w	8008eb6 <_printf_i+0x1c6>
 8008d12:	2f58      	cmp	r7, #88	@ 0x58
 8008d14:	f000 80b9 	beq.w	8008e8a <_printf_i+0x19a>
 8008d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d20:	e03a      	b.n	8008d98 <_printf_i+0xa8>
 8008d22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d26:	2b15      	cmp	r3, #21
 8008d28:	d8f6      	bhi.n	8008d18 <_printf_i+0x28>
 8008d2a:	a101      	add	r1, pc, #4	@ (adr r1, 8008d30 <_printf_i+0x40>)
 8008d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d30:	08008d89 	.word	0x08008d89
 8008d34:	08008d9d 	.word	0x08008d9d
 8008d38:	08008d19 	.word	0x08008d19
 8008d3c:	08008d19 	.word	0x08008d19
 8008d40:	08008d19 	.word	0x08008d19
 8008d44:	08008d19 	.word	0x08008d19
 8008d48:	08008d9d 	.word	0x08008d9d
 8008d4c:	08008d19 	.word	0x08008d19
 8008d50:	08008d19 	.word	0x08008d19
 8008d54:	08008d19 	.word	0x08008d19
 8008d58:	08008d19 	.word	0x08008d19
 8008d5c:	08008e9d 	.word	0x08008e9d
 8008d60:	08008dc7 	.word	0x08008dc7
 8008d64:	08008e57 	.word	0x08008e57
 8008d68:	08008d19 	.word	0x08008d19
 8008d6c:	08008d19 	.word	0x08008d19
 8008d70:	08008ebf 	.word	0x08008ebf
 8008d74:	08008d19 	.word	0x08008d19
 8008d78:	08008dc7 	.word	0x08008dc7
 8008d7c:	08008d19 	.word	0x08008d19
 8008d80:	08008d19 	.word	0x08008d19
 8008d84:	08008e5f 	.word	0x08008e5f
 8008d88:	6833      	ldr	r3, [r6, #0]
 8008d8a:	1d1a      	adds	r2, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6032      	str	r2, [r6, #0]
 8008d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e09d      	b.n	8008ed8 <_printf_i+0x1e8>
 8008d9c:	6833      	ldr	r3, [r6, #0]
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	1d19      	adds	r1, r3, #4
 8008da2:	6031      	str	r1, [r6, #0]
 8008da4:	0606      	lsls	r6, r0, #24
 8008da6:	d501      	bpl.n	8008dac <_printf_i+0xbc>
 8008da8:	681d      	ldr	r5, [r3, #0]
 8008daa:	e003      	b.n	8008db4 <_printf_i+0xc4>
 8008dac:	0645      	lsls	r5, r0, #25
 8008dae:	d5fb      	bpl.n	8008da8 <_printf_i+0xb8>
 8008db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008db4:	2d00      	cmp	r5, #0
 8008db6:	da03      	bge.n	8008dc0 <_printf_i+0xd0>
 8008db8:	232d      	movs	r3, #45	@ 0x2d
 8008dba:	426d      	negs	r5, r5
 8008dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dc0:	4859      	ldr	r0, [pc, #356]	@ (8008f28 <_printf_i+0x238>)
 8008dc2:	230a      	movs	r3, #10
 8008dc4:	e011      	b.n	8008dea <_printf_i+0xfa>
 8008dc6:	6821      	ldr	r1, [r4, #0]
 8008dc8:	6833      	ldr	r3, [r6, #0]
 8008dca:	0608      	lsls	r0, r1, #24
 8008dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008dd0:	d402      	bmi.n	8008dd8 <_printf_i+0xe8>
 8008dd2:	0649      	lsls	r1, r1, #25
 8008dd4:	bf48      	it	mi
 8008dd6:	b2ad      	uxthmi	r5, r5
 8008dd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dda:	4853      	ldr	r0, [pc, #332]	@ (8008f28 <_printf_i+0x238>)
 8008ddc:	6033      	str	r3, [r6, #0]
 8008dde:	bf14      	ite	ne
 8008de0:	230a      	movne	r3, #10
 8008de2:	2308      	moveq	r3, #8
 8008de4:	2100      	movs	r1, #0
 8008de6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008dea:	6866      	ldr	r6, [r4, #4]
 8008dec:	60a6      	str	r6, [r4, #8]
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	bfa2      	ittt	ge
 8008df2:	6821      	ldrge	r1, [r4, #0]
 8008df4:	f021 0104 	bicge.w	r1, r1, #4
 8008df8:	6021      	strge	r1, [r4, #0]
 8008dfa:	b90d      	cbnz	r5, 8008e00 <_printf_i+0x110>
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d04b      	beq.n	8008e98 <_printf_i+0x1a8>
 8008e00:	4616      	mov	r6, r2
 8008e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e06:	fb03 5711 	mls	r7, r3, r1, r5
 8008e0a:	5dc7      	ldrb	r7, [r0, r7]
 8008e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e10:	462f      	mov	r7, r5
 8008e12:	42bb      	cmp	r3, r7
 8008e14:	460d      	mov	r5, r1
 8008e16:	d9f4      	bls.n	8008e02 <_printf_i+0x112>
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d10b      	bne.n	8008e34 <_printf_i+0x144>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	07df      	lsls	r7, r3, #31
 8008e20:	d508      	bpl.n	8008e34 <_printf_i+0x144>
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	6861      	ldr	r1, [r4, #4]
 8008e26:	4299      	cmp	r1, r3
 8008e28:	bfde      	ittt	le
 8008e2a:	2330      	movle	r3, #48	@ 0x30
 8008e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e34:	1b92      	subs	r2, r2, r6
 8008e36:	6122      	str	r2, [r4, #16]
 8008e38:	f8cd a000 	str.w	sl, [sp]
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	aa03      	add	r2, sp, #12
 8008e40:	4621      	mov	r1, r4
 8008e42:	4640      	mov	r0, r8
 8008e44:	f7ff fee6 	bl	8008c14 <_printf_common>
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d14a      	bne.n	8008ee2 <_printf_i+0x1f2>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	b004      	add	sp, #16
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	f043 0320 	orr.w	r3, r3, #32
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	4833      	ldr	r0, [pc, #204]	@ (8008f2c <_printf_i+0x23c>)
 8008e60:	2778      	movs	r7, #120	@ 0x78
 8008e62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	6831      	ldr	r1, [r6, #0]
 8008e6a:	061f      	lsls	r7, r3, #24
 8008e6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e70:	d402      	bmi.n	8008e78 <_printf_i+0x188>
 8008e72:	065f      	lsls	r7, r3, #25
 8008e74:	bf48      	it	mi
 8008e76:	b2ad      	uxthmi	r5, r5
 8008e78:	6031      	str	r1, [r6, #0]
 8008e7a:	07d9      	lsls	r1, r3, #31
 8008e7c:	bf44      	itt	mi
 8008e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e82:	6023      	strmi	r3, [r4, #0]
 8008e84:	b11d      	cbz	r5, 8008e8e <_printf_i+0x19e>
 8008e86:	2310      	movs	r3, #16
 8008e88:	e7ac      	b.n	8008de4 <_printf_i+0xf4>
 8008e8a:	4827      	ldr	r0, [pc, #156]	@ (8008f28 <_printf_i+0x238>)
 8008e8c:	e7e9      	b.n	8008e62 <_printf_i+0x172>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	f023 0320 	bic.w	r3, r3, #32
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	e7f6      	b.n	8008e86 <_printf_i+0x196>
 8008e98:	4616      	mov	r6, r2
 8008e9a:	e7bd      	b.n	8008e18 <_printf_i+0x128>
 8008e9c:	6833      	ldr	r3, [r6, #0]
 8008e9e:	6825      	ldr	r5, [r4, #0]
 8008ea0:	6961      	ldr	r1, [r4, #20]
 8008ea2:	1d18      	adds	r0, r3, #4
 8008ea4:	6030      	str	r0, [r6, #0]
 8008ea6:	062e      	lsls	r6, r5, #24
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	d501      	bpl.n	8008eb0 <_printf_i+0x1c0>
 8008eac:	6019      	str	r1, [r3, #0]
 8008eae:	e002      	b.n	8008eb6 <_printf_i+0x1c6>
 8008eb0:	0668      	lsls	r0, r5, #25
 8008eb2:	d5fb      	bpl.n	8008eac <_printf_i+0x1bc>
 8008eb4:	8019      	strh	r1, [r3, #0]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6123      	str	r3, [r4, #16]
 8008eba:	4616      	mov	r6, r2
 8008ebc:	e7bc      	b.n	8008e38 <_printf_i+0x148>
 8008ebe:	6833      	ldr	r3, [r6, #0]
 8008ec0:	1d1a      	adds	r2, r3, #4
 8008ec2:	6032      	str	r2, [r6, #0]
 8008ec4:	681e      	ldr	r6, [r3, #0]
 8008ec6:	6862      	ldr	r2, [r4, #4]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f7f7 f9b0 	bl	8000230 <memchr>
 8008ed0:	b108      	cbz	r0, 8008ed6 <_printf_i+0x1e6>
 8008ed2:	1b80      	subs	r0, r0, r6
 8008ed4:	6060      	str	r0, [r4, #4]
 8008ed6:	6863      	ldr	r3, [r4, #4]
 8008ed8:	6123      	str	r3, [r4, #16]
 8008eda:	2300      	movs	r3, #0
 8008edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ee0:	e7aa      	b.n	8008e38 <_printf_i+0x148>
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4640      	mov	r0, r8
 8008eea:	47d0      	blx	sl
 8008eec:	3001      	adds	r0, #1
 8008eee:	d0ad      	beq.n	8008e4c <_printf_i+0x15c>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	079b      	lsls	r3, r3, #30
 8008ef4:	d413      	bmi.n	8008f1e <_printf_i+0x22e>
 8008ef6:	68e0      	ldr	r0, [r4, #12]
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	4298      	cmp	r0, r3
 8008efc:	bfb8      	it	lt
 8008efe:	4618      	movlt	r0, r3
 8008f00:	e7a6      	b.n	8008e50 <_printf_i+0x160>
 8008f02:	2301      	movs	r3, #1
 8008f04:	4632      	mov	r2, r6
 8008f06:	4649      	mov	r1, r9
 8008f08:	4640      	mov	r0, r8
 8008f0a:	47d0      	blx	sl
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d09d      	beq.n	8008e4c <_printf_i+0x15c>
 8008f10:	3501      	adds	r5, #1
 8008f12:	68e3      	ldr	r3, [r4, #12]
 8008f14:	9903      	ldr	r1, [sp, #12]
 8008f16:	1a5b      	subs	r3, r3, r1
 8008f18:	42ab      	cmp	r3, r5
 8008f1a:	dcf2      	bgt.n	8008f02 <_printf_i+0x212>
 8008f1c:	e7eb      	b.n	8008ef6 <_printf_i+0x206>
 8008f1e:	2500      	movs	r5, #0
 8008f20:	f104 0619 	add.w	r6, r4, #25
 8008f24:	e7f5      	b.n	8008f12 <_printf_i+0x222>
 8008f26:	bf00      	nop
 8008f28:	0800bc91 	.word	0x0800bc91
 8008f2c:	0800bca2 	.word	0x0800bca2

08008f30 <memmove>:
 8008f30:	4288      	cmp	r0, r1
 8008f32:	b510      	push	{r4, lr}
 8008f34:	eb01 0402 	add.w	r4, r1, r2
 8008f38:	d902      	bls.n	8008f40 <memmove+0x10>
 8008f3a:	4284      	cmp	r4, r0
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	d807      	bhi.n	8008f50 <memmove+0x20>
 8008f40:	1e43      	subs	r3, r0, #1
 8008f42:	42a1      	cmp	r1, r4
 8008f44:	d008      	beq.n	8008f58 <memmove+0x28>
 8008f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f4e:	e7f8      	b.n	8008f42 <memmove+0x12>
 8008f50:	4402      	add	r2, r0
 8008f52:	4601      	mov	r1, r0
 8008f54:	428a      	cmp	r2, r1
 8008f56:	d100      	bne.n	8008f5a <memmove+0x2a>
 8008f58:	bd10      	pop	{r4, pc}
 8008f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f62:	e7f7      	b.n	8008f54 <memmove+0x24>

08008f64 <memcpy>:
 8008f64:	440a      	add	r2, r1
 8008f66:	4291      	cmp	r1, r2
 8008f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f6c:	d100      	bne.n	8008f70 <memcpy+0xc>
 8008f6e:	4770      	bx	lr
 8008f70:	b510      	push	{r4, lr}
 8008f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f7a:	4291      	cmp	r1, r2
 8008f7c:	d1f9      	bne.n	8008f72 <memcpy+0xe>
 8008f7e:	bd10      	pop	{r4, pc}

08008f80 <_realloc_r>:
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4680      	mov	r8, r0
 8008f86:	4615      	mov	r5, r2
 8008f88:	460c      	mov	r4, r1
 8008f8a:	b921      	cbnz	r1, 8008f96 <_realloc_r+0x16>
 8008f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	4611      	mov	r1, r2
 8008f92:	f7ff bbad 	b.w	80086f0 <_malloc_r>
 8008f96:	b92a      	cbnz	r2, 8008fa4 <_realloc_r+0x24>
 8008f98:	f7ff fc9a 	bl	80088d0 <_free_r>
 8008f9c:	2400      	movs	r4, #0
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	f000 f81a 	bl	8008fdc <_malloc_usable_size_r>
 8008fa8:	4285      	cmp	r5, r0
 8008faa:	4606      	mov	r6, r0
 8008fac:	d802      	bhi.n	8008fb4 <_realloc_r+0x34>
 8008fae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fb2:	d8f4      	bhi.n	8008f9e <_realloc_r+0x1e>
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	f7ff fb9a 	bl	80086f0 <_malloc_r>
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d0ec      	beq.n	8008f9c <_realloc_r+0x1c>
 8008fc2:	42b5      	cmp	r5, r6
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	bf28      	it	cs
 8008fca:	4632      	movcs	r2, r6
 8008fcc:	f7ff ffca 	bl	8008f64 <memcpy>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	f7ff fc7c 	bl	80088d0 <_free_r>
 8008fd8:	463c      	mov	r4, r7
 8008fda:	e7e0      	b.n	8008f9e <_realloc_r+0x1e>

08008fdc <_malloc_usable_size_r>:
 8008fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe0:	1f18      	subs	r0, r3, #4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bfbc      	itt	lt
 8008fe6:	580b      	ldrlt	r3, [r1, r0]
 8008fe8:	18c0      	addlt	r0, r0, r3
 8008fea:	4770      	bx	lr

08008fec <_init>:
 8008fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fee:	bf00      	nop
 8008ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff2:	bc08      	pop	{r3}
 8008ff4:	469e      	mov	lr, r3
 8008ff6:	4770      	bx	lr

08008ff8 <_fini>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	bf00      	nop
 8008ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffe:	bc08      	pop	{r3}
 8009000:	469e      	mov	lr, r3
 8009002:	4770      	bx	lr
