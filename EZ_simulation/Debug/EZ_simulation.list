
EZ_simulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008878  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008a50  08008a50  00009a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa8  08008aa8  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa8  08008aa8  00009aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab0  08008ab0  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008ab0  08008ab0  00009ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08008ab8  08008ab8  00009ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008ac0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000064  08008b24  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  08008b24  0000a858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d17f  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000478b  00000000  00000000  00037213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  0003b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019b0  00000000  00000000  0003da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf2c  00000000  00000000  0003f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258b2  00000000  00000000  0006c354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013e2ef  00000000  00000000  00091c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cfef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a938  00000000  00000000  001cff38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001da870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000064 	.word	0x20000064
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008a38 	.word	0x08008a38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	08008a38 	.word	0x08008a38

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f001 fd8f 	bl	800202e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f81c 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fbb4 	bl	8000c80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 fb6c 	bl	8000bf4 <MX_DMA_Init>
  MX_CRC_Init();
 800051c:	f000 f906 	bl	800072c <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000520:	f000 fb1c 	bl	8000b5c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000524:	f000 f864 	bl	80005f0 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000528:	f000 f9a6 	bl	8000878 <MX_SPI3_Init>
  MX_TIM6_Init();
 800052c:	f000 faaa 	bl	8000a84 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000530:	f000 f962 	bl	80007f8 <MX_I2C1_Init>
  MX_DAC1_Init();
 8000534:	f000 f926 	bl	8000784 <MX_DAC1_Init>
  MX_COMP3_Init();
 8000538:	f000 f8d2 	bl	80006e0 <MX_COMP3_Init>
  MX_TIM3_Init();
 800053c:	f000 fa54 	bl	80009e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000540:	f000 f9d8 	bl	80008f4 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000544:	f000 fad4 	bl	8000af0 <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <main+0x40>

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2238      	movs	r2, #56	@ 0x38
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f008 f99a 	bl	8008894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000572:	f004 fca5 	bl	8004ec0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000584:	2303      	movs	r3, #3
 8000586:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000588:	2305      	movs	r3, #5
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800058c:	233c      	movs	r3, #60	@ 0x3c
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000590:	2305      	movs	r3, #5
 8000592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 fd41 	bl	8005028 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005ac:	f000 fc0c 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2104      	movs	r1, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f005 f83f 	bl	800564c <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d4:	f000 fbf8 	bl	8000dc8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80005d8:	2200      	movs	r2, #0
 80005da:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80005de:	4803      	ldr	r0, [pc, #12]	@ (80005ec <SystemClock_Config+0xa0>)
 80005e0:	f005 f970 	bl	80058c4 <HAL_RCC_MCOConfig>
}
 80005e4:	bf00      	nop
 80005e6:	3750      	adds	r7, #80	@ 0x50
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	00060400 	.word	0x00060400

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08c      	sub	sp, #48	@ 0x30
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2220      	movs	r2, #32
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f008 f943 	bl	8008894 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060e:	4b32      	ldr	r3, [pc, #200]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000610:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000614:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000616:	4b30      	ldr	r3, [pc, #192]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b2e      	ldr	r3, [pc, #184]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b2d      	ldr	r3, [pc, #180]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000628:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062e:	4b2a      	ldr	r3, [pc, #168]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000636:	2204      	movs	r2, #4
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800063a:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000646:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000654:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000656:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 800065e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000662:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000664:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066c:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067a:	4817      	ldr	r0, [pc, #92]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 800067c:	f001 ff1e 	bl	80024bc <HAL_ADC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000686:	f000 fb9f 	bl	8000dc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000692:	4619      	mov	r1, r3
 8000694:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 8000696:	f002 fd33 	bl	8003100 <HAL_ADCEx_MultiModeConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80006a0:	f000 fb92 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <MX_ADC1_Init+0xec>)
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b0:	237f      	movs	r3, #127	@ 0x7f
 80006b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b4:	2304      	movs	r3, #4
 80006b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_ADC1_Init+0xe8>)
 80006c2:	f002 f8b7 	bl	8002834 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006cc:	f000 fb7c 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3730      	adds	r7, #48	@ 0x30
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000080 	.word	0x20000080
 80006dc:	04300002 	.word	0x04300002

080006e0 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_COMP3_Init+0x44>)
 80006e6:	4a10      	ldr	r2, [pc, #64]	@ (8000728 <MX_COMP3_Init+0x48>)
 80006e8:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_COMP3_Init+0x44>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_COMP3_Init+0x44>)
 80006f2:	2250      	movs	r2, #80	@ 0x50
 80006f4:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <MX_COMP3_Init+0x44>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 80006fc:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_COMP3_Init+0x44>)
 80006fe:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000702:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_COMP3_Init+0x44>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_COMP3_Init+0x44>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_COMP3_Init+0x44>)
 8000712:	f002 ff4d 	bl	80035b0 <HAL_COMP_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_COMP3_Init+0x40>
  {
    Error_Handler();
 800071c:	f000 fb54 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000014c 	.word	0x2000014c
 8000728:	40010208 	.word	0x40010208

0800072c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_CRC_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_CRC_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_CRC_Init+0x50>)
 8000738:	2201      	movs	r2, #1
 800073a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_CRC_Init+0x50>)
 800073e:	2201      	movs	r2, #1
 8000740:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 4129;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_CRC_Init+0x50>)
 8000744:	f241 0221 	movw	r2, #4129	@ 0x1021
 8000748:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_CRC_Init+0x50>)
 800074c:	2208      	movs	r2, #8
 800074e:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_CRC_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_CRC_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_CRC_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_CRC_Init+0x50>)
 8000764:	2201      	movs	r2, #1
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_CRC_Init+0x50>)
 800076a:	f003 f9cb 	bl	8003b04 <HAL_CRC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 fb28 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000170 	.word	0x20000170
 8000780:	40023000 	.word	0x40023000

08000784 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	@ 0x30
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2230      	movs	r2, #48	@ 0x30
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f008 f87f 	bl	8008894 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_DAC1_Init+0x6c>)
 8000798:	4a16      	ldr	r2, [pc, #88]	@ (80007f4 <MX_DAC1_Init+0x70>)
 800079a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800079c:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <MX_DAC1_Init+0x6c>)
 800079e:	f003 fbb7 	bl	8003f10 <HAL_DAC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007a8:	f000 fb0e 	bl	8000dc8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007ac:	2302      	movs	r3, #2
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	4806      	ldr	r0, [pc, #24]	@ (80007f0 <MX_DAC1_Init+0x6c>)
 80007d8:	f003 fbbc 	bl	8003f54 <HAL_DAC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80007e2:	f000 faf1 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	@ 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000194 	.word	0x20000194
 80007f4:	50000800 	.word	0x50000800

080007f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_I2C1_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_I2C1_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10E32879;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_I2C1_Init+0x74>)
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <MX_I2C1_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_I2C1_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000832:	480e      	ldr	r0, [pc, #56]	@ (800086c <MX_I2C1_Init+0x74>)
 8000834:	f004 fa12 	bl	8004c5c <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083e:	f000 fac3 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <MX_I2C1_Init+0x74>)
 8000846:	f004 faa4 	bl	8004d92 <HAL_I2CEx_ConfigAnalogFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 faba 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_I2C1_Init+0x74>)
 8000858:	f004 fae6 	bl	8004e28 <HAL_I2CEx_ConfigDigitalFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fab1 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200001a8 	.word	0x200001a8
 8000870:	40005400 	.word	0x40005400
 8000874:	10e32879 	.word	0x10e32879

08000878 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_SPI3_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	@ (80008f0 <MX_SPI3_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_SPI3_Init+0x74>)
 8000884:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_SPI3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_SPI3_Init+0x74>)
 8000892:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000896:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_SPI3_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008ae:	2218      	movs	r2, #24
 80008b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008c6:	2207      	movs	r2, #7
 80008c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008d2:	2208      	movs	r2, #8
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_SPI3_Init+0x74>)
 80008d8:	f005 fb68 	bl	8005fac <HAL_SPI_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 fa71 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001fc 	.word	0x200001fc
 80008f0:	40003c00 	.word	0x40003c00

080008f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	@ 0x30
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000920:	4b30      	ldr	r3, [pc, #192]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 8000922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000928:	4b2e      	ldr	r3, [pc, #184]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b2d      	ldr	r3, [pc, #180]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000934:	4b2b      	ldr	r3, [pc, #172]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 8000936:	f04f 32ff 	mov.w	r2, #4294967295
 800093a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000948:	4826      	ldr	r0, [pc, #152]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 800094a:	f005 fbda 	bl	8006102 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000954:	f000 fa38 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	4619      	mov	r1, r3
 8000964:	481f      	ldr	r0, [pc, #124]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 8000966:	f005 fd21 	bl	80063ac <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000970:	f000 fa2a 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000974:	481b      	ldr	r0, [pc, #108]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 8000976:	f005 fc1b 	bl	80061b0 <HAL_TIM_IC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000980:	f000 fa22 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 8000994:	f006 f89a 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800099e:	f000 fa13 	bl	8000dc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 80009ba:	f005 fc5a 	bl	8006272 <HAL_TIM_IC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80009c4:	f000 fa00 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP3, TIM_CHANNEL_1) != HAL_OK)
 80009c8:	2200      	movs	r2, #0
 80009ca:	2103      	movs	r1, #3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_TIM2_Init+0xf0>)
 80009ce:	f006 f913 	bl	8006bf8 <HAL_TIMEx_TISelection>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80009d8:	f000 f9f6 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3730      	adds	r7, #48	@ 0x30
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000260 	.word	0x20000260

080009e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_TIM3_Init+0x94>)
 8000a08:	4a1d      	ldr	r2, [pc, #116]	@ (8000a80 <MX_TIM3_Init+0x98>)
 8000a0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_TIM3_Init+0x94>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_TIM3_Init+0x94>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a18:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_TIM3_Init+0x94>)
 8000a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_TIM3_Init+0x94>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_TIM3_Init+0x94>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a2c:	4813      	ldr	r0, [pc, #76]	@ (8000a7c <MX_TIM3_Init+0x94>)
 8000a2e:	f005 fb68 	bl	8006102 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a38:	f000 f9c6 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <MX_TIM3_Init+0x94>)
 8000a4a:	f005 fcaf 	bl	80063ac <HAL_TIM_ConfigClockSource>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a54:	f000 f9b8 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_TIM3_Init+0x94>)
 8000a66:	f006 f831 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 f9aa 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200002ac 	.word	0x200002ac
 8000a80:	40000400 	.word	0x40000400

08000a84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000a96:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <MX_TIM6_Init+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 149;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000aa8:	2295      	movs	r2, #149	@ 0x95
 8000aaa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ab2:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000ab4:	f005 fb25 	bl	8006102 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000abe:	f000 f983 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <MX_TIM6_Init+0x64>)
 8000ad0:	f005 fffc 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000ada:	f000 f975 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200002f8 	.word	0x200002f8
 8000aec:	40001000 	.word	0x40001000

08000af0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_TIM7_Init+0x64>)
 8000b02:	4a15      	ldr	r2, [pc, #84]	@ (8000b58 <MX_TIM7_Init+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_TIM7_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_TIM7_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <MX_TIM7_Init+0x64>)
 8000b14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_TIM7_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <MX_TIM7_Init+0x64>)
 8000b22:	f005 faee 	bl	8006102 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b2c:	f000 f94c 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_TIM7_Init+0x64>)
 8000b3e:	f005 ffc5 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b48:	f000 f93e 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000344 	.word	0x20000344
 8000b58:	40001400 	.word	0x40001400

08000b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b60:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <MX_USART2_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000ba6:	f006 f8b5 	bl	8006d14 <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f90a 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000bb8:	f007 fbf6 	bl	80083a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f000 f901 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000bca:	f007 fc2b 	bl	8008424 <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 f8f8 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_USART2_UART_Init+0x90>)
 8000bda:	f007 fbac 	bl	8008336 <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 f8f0 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200003f0 	.word	0x200003f0
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bfa:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <MX_DMA_Init+0x88>)
 8000bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c7c <MX_DMA_Init+0x88>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c06:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <MX_DMA_Init+0x88>)
 8000c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c12:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_DMA_Init+0x88>)
 8000c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c16:	4a19      	ldr	r2, [pc, #100]	@ (8000c7c <MX_DMA_Init+0x88>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_DMA_Init+0x88>)
 8000c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_DMA_Init+0x88>)
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c2e:	4a13      	ldr	r2, [pc, #76]	@ (8000c7c <MX_DMA_Init+0x88>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_DMA_Init+0x88>)
 8000c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	200b      	movs	r0, #11
 8000c48:	f002 ff27 	bl	8003a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c4c:	200b      	movs	r0, #11
 8000c4e:	f002 ff3e 	bl	8003ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	200c      	movs	r0, #12
 8000c58:	f002 ff1f 	bl	8003a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c5c:	200c      	movs	r0, #12
 8000c5e:	f002 ff36 	bl	8003ace <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2063      	movs	r0, #99	@ 0x63
 8000c68:	f002 ff17 	bl	8003a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 8000c6c:	2063      	movs	r0, #99	@ 0x63
 8000c6e:	f002 ff2e 	bl	8003ace <HAL_NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c96:	4b48      	ldr	r3, [pc, #288]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	4a47      	ldr	r2, [pc, #284]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca2:	4b45      	ldr	r3, [pc, #276]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cae:	4b42      	ldr	r3, [pc, #264]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	4a41      	ldr	r2, [pc, #260]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cba:	4b3f      	ldr	r3, [pc, #252]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	4a3b      	ldr	r2, [pc, #236]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd2:	4b39      	ldr	r3, [pc, #228]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b36      	ldr	r3, [pc, #216]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	4a35      	ldr	r2, [pc, #212]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cea:	4b33      	ldr	r3, [pc, #204]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b30      	ldr	r3, [pc, #192]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <MX_GPIO_Init+0x138>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2101      	movs	r1, #1
 8000d12:	482a      	ldr	r0, [pc, #168]	@ (8000dbc <MX_GPIO_Init+0x13c>)
 8000d14:	f003 ff8a 	bl	8004c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d22:	f003 ff83 	bl	8004c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIPO_CS_Pin|XDAC_CS_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000d2c:	4824      	ldr	r0, [pc, #144]	@ (8000dc0 <MX_GPIO_Init+0x140>)
 8000d2e:	f003 ff7d 	bl	8004c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481d      	ldr	r0, [pc, #116]	@ (8000dc4 <MX_GPIO_Init+0x144>)
 8000d50:	f003 fdea 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : con_Pin */
  GPIO_InitStruct.Pin = con_Pin;
 8000d54:	2301      	movs	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4814      	ldr	r0, [pc, #80]	@ (8000dbc <MX_GPIO_Init+0x13c>)
 8000d6c:	f003 fddc 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f003 fdcc 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIPO_CS_Pin XDAC_CS_Pin */
  GPIO_InitStruct.Pin = SIPO_CS_Pin|XDAC_CS_Pin;
 8000d90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_GPIO_Init+0x140>)
 8000daa:	f003 fdbd 	bl	8004928 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	@ 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	48001800 	.word	0x48001800

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_MspInit+0x44>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <HAL_MspInit+0x44>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <HAL_MspInit+0x44>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_MspInit+0x44>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_MspInit+0x44>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_MspInit+0x44>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e0a:	f004 f8fd 	bl	8005008 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09e      	sub	sp, #120	@ 0x78
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2254      	movs	r2, #84	@ 0x54
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 fd29 	bl	8008894 <memset>
  if(hadc->Instance==ADC1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e4a:	d15f      	bne.n	8000f0c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000e52:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e56:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f004 fe57 	bl	8005b10 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e68:	f7ff ffae 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e6c:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <HAL_ADC_MspInit+0xf8>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e70:	4a28      	ldr	r2, [pc, #160]	@ (8000f14 <HAL_ADC_MspInit+0xf8>)
 8000e72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <HAL_ADC_MspInit+0xf8>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <HAL_ADC_MspInit+0xf8>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e88:	4a22      	ldr	r2, [pc, #136]	@ (8000f14 <HAL_ADC_MspInit+0xf8>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e90:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_ADC_MspInit+0xf8>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb2:	f003 fd39 	bl	8004928 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000eb8:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <HAL_ADC_MspInit+0x100>)
 8000eba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000ed0:	2280      	movs	r2, #128	@ 0x80
 8000ed2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000ede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ef0:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000ef2:	f003 f9e7 	bl	80042c4 <HAL_DMA_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000efc:	f7ff ff64 	bl	8000dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000f04:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f06:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_ADC_MspInit+0xfc>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3778      	adds	r7, #120	@ 0x78
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	200000ec 	.word	0x200000ec
 8000f1c:	40020008 	.word	0x40020008

08000f20 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <HAL_COMP_MspInit+0x94>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d134      	bne.n	8000fac <HAL_COMP_MspInit+0x8c>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <HAL_COMP_MspInit+0x98>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <HAL_COMP_MspInit+0x98>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <HAL_COMP_MspInit+0x98>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_COMP_MspInit+0x98>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a16      	ldr	r2, [pc, #88]	@ (8000fb8 <HAL_COMP_MspInit+0x98>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_COMP_MspInit+0x98>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**COMP3 GPIO Configuration
    PC2     ------> COMP3_OUT
    PA0     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f72:	2304      	movs	r3, #4
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 8000f82:	2303      	movs	r3, #3
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <HAL_COMP_MspInit+0x9c>)
 8000f8e:	f003 fccb 	bl	8004928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f92:	2301      	movs	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f96:	2303      	movs	r3, #3
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa8:	f003 fcbe 	bl	8004928 <HAL_GPIO_Init>

  /* USER CODE END COMP3_MspInit 1 */

  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	@ 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40010208 	.word	0x40010208
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000800 	.word	0x48000800

08000fc0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <HAL_CRC_MspInit+0x38>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10b      	bne.n	8000fea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_CRC_MspInit+0x3c>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd6:	4a09      	ldr	r2, [pc, #36]	@ (8000ffc <HAL_CRC_MspInit+0x3c>)
 8000fd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fdc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <HAL_CRC_MspInit+0x3c>)
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023000 	.word	0x40023000
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_DAC_MspInit+0x38>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10b      	bne.n	800102a <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_DAC_MspInit+0x3c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a09      	ldr	r2, [pc, #36]	@ (800103c <HAL_DAC_MspInit+0x3c>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <HAL_DAC_MspInit+0x3c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	50000800 	.word	0x50000800
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0a0      	sub	sp, #128	@ 0x80
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2254      	movs	r2, #84	@ 0x54
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f007 fc17 	bl	8008894 <memset>
  if(hi2c->Instance==I2C1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2d      	ldr	r2, [pc, #180]	@ (8001120 <HAL_I2C_MspInit+0xe0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d153      	bne.n	8001118 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001070:	2340      	movs	r3, #64	@ 0x40
 8001072:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fd47 	bl	8005b10 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff fe9e 	bl	8000dc8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <HAL_I2C_MspInit+0xe4>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001090:	4a24      	ldr	r2, [pc, #144]	@ (8001124 <HAL_I2C_MspInit+0xe4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <HAL_I2C_MspInit+0xe4>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_I2C_MspInit+0xe4>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <HAL_I2C_MspInit+0xe4>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <HAL_I2C_MspInit+0xe4>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c2:	2312      	movs	r3, #18
 80010c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ce:	2304      	movs	r3, #4
 80010d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f003 fc24 	bl	8004928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f0:	2304      	movs	r3, #4
 80010f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	@ (8001128 <HAL_I2C_MspInit+0xe8>)
 80010fc:	f003 fc14 	bl	8004928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_I2C_MspInit+0xe4>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001104:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <HAL_I2C_MspInit+0xe4>)
 8001106:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800110a:	6593      	str	r3, [r2, #88]	@ 0x58
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HAL_I2C_MspInit+0xe4>)
 800110e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001118:	bf00      	nop
 800111a:	3780      	adds	r7, #128	@ 0x80
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40005400 	.word	0x40005400
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <HAL_SPI_MspInit+0x7c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d128      	bne.n	80011a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	4a16      	ldr	r2, [pc, #88]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001158:	6593      	str	r3, [r2, #88]	@ 0x58
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_SPI_MspInit+0x80>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800117e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001190:	2306      	movs	r3, #6
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <HAL_SPI_MspInit+0x84>)
 800119c:	f003 fbc4 	bl	8004928 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40003c00 	.word	0x40003c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000800 	.word	0x48000800

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c4:	d138      	bne.n	8001238 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c6:	4b39      	ldr	r3, [pc, #228]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	4a38      	ldr	r2, [pc, #224]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d2:	4b36      	ldr	r3, [pc, #216]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 80011de:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <HAL_TIM_Base_MspInit+0x100>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80011e4:	4b32      	ldr	r3, [pc, #200]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 80011e6:	2238      	movs	r2, #56	@ 0x38
 80011e8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ea:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f0:	4b2f      	ldr	r3, [pc, #188]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011f6:	4b2e      	ldr	r3, [pc, #184]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 80011f8:	2280      	movs	r2, #128	@ 0x80
 80011fa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011fc:	4b2c      	ldr	r3, [pc, #176]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 80011fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001202:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001204:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 8001206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800120a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800120c:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001212:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 8001214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001218:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800121a:	4825      	ldr	r0, [pc, #148]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 800121c:	f003 f852 	bl	80042c4 <HAL_DMA_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8001226:	f7ff fdcf 	bl	8000dc8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a20      	ldr	r2, [pc, #128]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001230:	4a1f      	ldr	r2, [pc, #124]	@ (80012b0 <HAL_TIM_Base_MspInit+0xfc>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001236:	e034      	b.n	80012a2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1e      	ldr	r2, [pc, #120]	@ (80012b8 <HAL_TIM_Base_MspInit+0x104>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d10c      	bne.n	800125c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	4a19      	ldr	r2, [pc, #100]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6593      	str	r3, [r2, #88]	@ 0x58
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
}
 800125a:	e022      	b.n	80012a2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a16      	ldr	r2, [pc, #88]	@ (80012bc <HAL_TIM_Base_MspInit+0x108>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10c      	bne.n	8001280 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6593      	str	r3, [r2, #88]	@ 0x58
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
}
 800127e:	e010      	b.n	80012a2 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0e      	ldr	r2, [pc, #56]	@ (80012c0 <HAL_TIM_Base_MspInit+0x10c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10b      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128e:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	6593      	str	r3, [r2, #88]	@ 0x58
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_TIM_Base_MspInit+0xf8>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	20000390 	.word	0x20000390
 80012b4:	4002001c 	.word	0x4002001c
 80012b8:	40000400 	.word	0x40000400
 80012bc:	40001000 	.word	0x40001000
 80012c0:	40001400 	.word	0x40001400

080012c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b09e      	sub	sp, #120	@ 0x78
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2254      	movs	r2, #84	@ 0x54
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f007 fad5 	bl	8008894 <memset>
  if(huart->Instance==USART2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a37      	ldr	r2, [pc, #220]	@ (80013cc <HAL_UART_MspInit+0x108>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d167      	bne.n	80013c4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80012f8:	2304      	movs	r3, #4
 80012fa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4618      	mov	r0, r3
 8001302:	f004 fc05 	bl	8005b10 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800130c:	f7ff fd5c 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001310:	4b2f      	ldr	r3, [pc, #188]	@ (80013d0 <HAL_UART_MspInit+0x10c>)
 8001312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001314:	4a2e      	ldr	r2, [pc, #184]	@ (80013d0 <HAL_UART_MspInit+0x10c>)
 8001316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131a:	6593      	str	r3, [r2, #88]	@ 0x58
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <HAL_UART_MspInit+0x10c>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <HAL_UART_MspInit+0x10c>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	4a28      	ldr	r2, [pc, #160]	@ (80013d0 <HAL_UART_MspInit+0x10c>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001334:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <HAL_UART_MspInit+0x10c>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001340:	2318      	movs	r3, #24
 8001342:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001350:	2307      	movs	r3, #7
 8001352:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001358:	4619      	mov	r1, r3
 800135a:	481e      	ldr	r0, [pc, #120]	@ (80013d4 <HAL_UART_MspInit+0x110>)
 800135c:	f003 fae4 	bl	8004928 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8001360:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 8001362:	4a1e      	ldr	r2, [pc, #120]	@ (80013dc <HAL_UART_MspInit+0x118>)
 8001364:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 8001368:	221a      	movs	r2, #26
 800136a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136c:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 800137a:	2280      	movs	r2, #128	@ 0x80
 800137c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001396:	4810      	ldr	r0, [pc, #64]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 8001398:	f002 ff94 	bl	80042c4 <HAL_DMA_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80013a2:	f7ff fd11 	bl	8000dc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 80013aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <HAL_UART_MspInit+0x114>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 14, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	210e      	movs	r1, #14
 80013b8:	2026      	movs	r0, #38	@ 0x26
 80013ba:	f002 fb6e 	bl	8003a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013be:	2026      	movs	r0, #38	@ 0x26
 80013c0:	f002 fb85 	bl	8003ace <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013c4:	bf00      	nop
 80013c6:	3778      	adds	r7, #120	@ 0x78
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40004400 	.word	0x40004400
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	20000484 	.word	0x20000484
 80013dc:	40020494 	.word	0x40020494

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <NMI_Handler+0x4>

080013e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <MemManage_Handler+0x4>

080013f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <UsageFault_Handler+0x4>

08001408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001436:	f000 fe4d 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <DMA1_Channel1_IRQHandler+0x10>)
 8001446:	f003 f920 	bl	800468a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000ec 	.word	0x200000ec

08001454 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <DMA1_Channel2_IRQHandler+0x10>)
 800145a:	f003 f916 	bl	800468a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000390 	.word	0x20000390

08001468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <USART2_IRQHandler+0x10>)
 800146e:	f005 fca1 	bl	8006db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200003f0 	.word	0x200003f0

0800147c <DMA2_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA2 channel8 global interrupt.
  */
void DMA2_Channel8_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DMA2_Channel8_IRQHandler+0x10>)
 8001482:	f003 f902 	bl	800468a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel8_IRQn 1 */

  /* USER CODE END DMA2_Channel8_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000484 	.word	0x20000484

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014aa:	f007 fa4f 	bl	800894c <__errno>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2216      	movs	r2, #22
 80014b2:	601a      	str	r2, [r3, #0]
  return -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_exit>:

void _exit (int status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d2:	bf00      	nop
 80014d4:	e7fd      	b.n	80014d2 <_exit+0x12>
	...

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f007 fa20 	bl	800894c <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20020000 	.word	0x20020000
 8001538:	00000400 	.word	0x00000400
 800153c:	200004e4 	.word	0x200004e4
 8001540:	20000858 	.word	0x20000858

08001544 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	701a      	strb	r2, [r3, #0]
      }
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f805 	bl	80015a4 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
    }
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f940 	bl	800185e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f91e 	bl	8001834 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ffeb 	bl	80015e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EEC1Ev>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZL12uart_managerPhS_>:
{
  handler_map[cmd] = cb;
}

static int uart_manager(uint8_t* begin, uint8_t* end)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b090      	sub	sp, #64	@ 0x40
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  if (end - begin < 8)
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b07      	cmp	r3, #7
 800162e:	dc02      	bgt.n	8001636 <_ZL12uart_managerPhS_+0x1a>
    return -1;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	e0aa      	b.n	800178c <_ZL12uart_managerPhS_+0x170>

  if (*begin++ != 0x55)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b55      	cmp	r3, #85	@ 0x55
 8001640:	bf14      	ite	ne
 8001642:	2301      	movne	r3, #1
 8001644:	2300      	moveq	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <_ZL12uart_managerPhS_+0x36>
    return -1;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	e09c      	b.n	800178c <_ZL12uart_managerPhS_+0x170>
  if (*begin++ != 0xA5)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2ba5      	cmp	r3, #165	@ 0xa5
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <_ZL12uart_managerPhS_+0x52>
    return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	e08e      	b.n	800178c <_ZL12uart_managerPhS_+0x170>

  int size = *begin++;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	63bb      	str	r3, [r7, #56]	@ 0x38
  size += *begin++ << 8;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001684:	4413      	add	r3, r2
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (size > end - begin + 2 || size < 2)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	3302      	adds	r3, #2
 8001690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001692:	429a      	cmp	r2, r3
 8001694:	dc02      	bgt.n	800169c <_ZL12uart_managerPhS_+0x80>
 8001696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001698:	2b01      	cmp	r3, #1
 800169a:	dc02      	bgt.n	80016a2 <_ZL12uart_managerPhS_+0x86>
    return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	e074      	b.n	800178c <_ZL12uart_managerPhS_+0x170>

  int crc = begin[size] + (begin[size+1] << 8);
 80016a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016ae:	3301      	adds	r3, #1
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	440b      	add	r3, r1
 80016ba:	637b      	str	r3, [r7, #52]	@ 0x34
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 80016bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016be:	461a      	mov	r2, r3
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4834      	ldr	r0, [pc, #208]	@ (8001794 <_ZL12uart_managerPhS_+0x178>)
 80016c4:	f002 fa82 	bl	8003bcc <HAL_CRC_Calculate>
 80016c8:	4603      	mov	r3, r0
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (calc != crc)
 80016cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d002      	beq.n	80016da <_ZL12uart_managerPhS_+0xbe>
    return -1;
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
 80016d8:	e058      	b.n	800178c <_ZL12uart_managerPhS_+0x170>

  end = begin + size;
 80016da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	603b      	str	r3, [r7, #0]
  auto p = begin;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (; p != end; ++p)
 80016e6:	e006      	b.n	80016f6 <_ZL12uart_managerPhS_+0xda>
  {
    if (*p == ':')
 80016e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80016ee:	d007      	beq.n	8001700 <_ZL12uart_managerPhS_+0xe4>
  for (; p != end; ++p)
 80016f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016f2:	3301      	adds	r3, #1
 80016f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d1f4      	bne.n	80016e8 <_ZL12uart_managerPhS_+0xcc>
 80016fe:	e000      	b.n	8001702 <_ZL12uart_managerPhS_+0xe6>
      break;
 8001700:	bf00      	nop
  }

  if (p != end)
 8001702:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d03e      	beq.n	8001788 <_ZL12uart_managerPhS_+0x16c>
  {
    std::string cmd(begin, p);
 800170a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800170e:	4618      	mov	r0, r3
 8001710:	f006 ff7b 	bl	800860a <_ZNSaIcEC1Ev>
 8001714:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001718:	f107 0010 	add.w	r0, r7, #16
 800171c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f000 f8be 	bl	80018a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>
 8001724:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001728:	4618      	mov	r0, r3
 800172a:	f006 ff6f 	bl	800860c <_ZNSaIcED1Ev>
    auto it = handler_map.find(cmd);
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	4619      	mov	r1, r3
 8001734:	4818      	ldr	r0, [pc, #96]	@ (8001798 <_ZL12uart_managerPhS_+0x17c>)
 8001736:	f000 f8d8 	bl	80018ea <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>
 800173a:	4603      	mov	r3, r0
 800173c:	60fb      	str	r3, [r7, #12]
    if (it != handler_map.end())
 800173e:	4816      	ldr	r0, [pc, #88]	@ (8001798 <_ZL12uart_managerPhS_+0x17c>)
 8001740:	f000 f8e2 	bl	8001908 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>
 8001744:	4603      	mov	r3, r0
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001748:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f8e5 	bl	8001922 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00f      	beq.n	800177e <_ZL12uart_managerPhS_+0x162>
    {
      ++p;
 800175e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001760:	3301      	adds	r3, #1
 8001762:	63fb      	str	r3, [r7, #60]	@ 0x3c
      it->second(p, end-p);
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f8ee 	bl	800194a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>
 800176e:	4603      	mov	r3, r0
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001776:	1a8a      	subs	r2, r1, r2
 8001778:	4611      	mov	r1, r2
 800177a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800177c:	4798      	blx	r3
    }
  }
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4618      	mov	r0, r3
 8001784:	f006 ff8f 	bl	80086a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

  return size + 6;
 8001788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800178a:	3306      	adds	r3, #6
}
 800178c:	4618      	mov	r0, r3
 800178e:	3740      	adds	r7, #64	@ 0x40
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000170 	.word	0x20000170
 8001798:	200006f0 	.word	0x200006f0

0800179c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
  if (huart != huart_reg)
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_UARTEx_RxEventCallback+0x58>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d11b      	bne.n	80017ea <HAL_UARTEx_RxEventCallback+0x4e>
    return;

  auto end = rx_buf + Size;
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	4a10      	ldr	r2, [pc, #64]	@ (80017f8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80017b6:	4413      	add	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
  for (auto* p = rx_buf; p < end; )
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <HAL_UARTEx_RxEventCallback+0x5c>)
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e00b      	b.n	80017d8 <HAL_UARTEx_RxEventCallback+0x3c>
  {
    int res = uart_manager(p, end);
 80017c0:	6939      	ldr	r1, [r7, #16]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff2a 	bl	800161c <_ZL12uart_managerPhS_>
 80017c8:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db08      	blt.n	80017e2 <HAL_UARTEx_RxEventCallback+0x46>
      break;
    p += res;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4413      	add	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
  for (auto* p = rx_buf; p < end; )
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3ef      	bcc.n	80017c0 <HAL_UARTEx_RxEventCallback+0x24>
 80017e0:	e000      	b.n	80017e4 <HAL_UARTEx_RxEventCallback+0x48>
      break;
 80017e2:	bf00      	nop
  }

  uart_receive_start();
 80017e4:	f000 f80a 	bl	80017fc <_ZL18uart_receive_startv>
 80017e8:	e000      	b.n	80017ec <HAL_UARTEx_RxEventCallback+0x50>
    return;
 80017ea:	bf00      	nop
}
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000004 	.word	0x20000004
 80017f8:	200004e8 	.word	0x200004e8

080017fc <_ZL18uart_receive_startv>:

static void uart_receive_start()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <_ZL18uart_receive_startv+0x2c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001808:	4908      	ldr	r1, [pc, #32]	@ (800182c <_ZL18uart_receive_startv+0x30>)
 800180a:	4618      	mov	r0, r3
 800180c:	f006 fe48 	bl	80084a0 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <_ZL18uart_receive_startv+0x34>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <_ZL18uart_receive_startv+0x34>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0204 	bic.w	r2, r2, #4
 8001822:	601a      	str	r2, [r3, #0]
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000004 	.word	0x20000004
 800182c:	200004e8 	.word	0x200004e8
 8001830:	20000008 	.word	0x20000008

08001834 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f892 	bl	8001966 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f89a 	bl	800197e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3304      	adds	r3, #4
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fe99 	bl	8001586 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f894 	bl	8001994 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f8b3 	bl	80019ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8001884:	4603      	mov	r3, r0
 8001886:	4619      	mov	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f88e 	bl	80019aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fe9d 	bl	80015d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE13_Rb_tree_implISF_Lb1EED1Ev>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPhvEET_S7_RKS3_>:
	       typename = std::_RequireInputIter<_InputIterator>>
#else
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 80018ae:	68fc      	ldr	r4, [r7, #12]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f006 febb 	bl	800862c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4619      	mov	r1, r3
 80018bc:	4620      	mov	r0, r4
 80018be:	f006 ff06 	bl	80086ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]
	{
#if __cplusplus >= 201103L
	  _M_construct(__beg, __end, std::__iterator_category(__beg));
 80018c8:	68bc      	ldr	r4, [r7, #8]
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f8ba 	bl	8001a48 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 80018d4:	462b      	mov	r3, r5
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4621      	mov	r1, r4
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f8e0 	bl	8001aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>
#else
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_construct_aux(__beg, __end, _Integral());
#endif
	}
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bdb0      	pop	{r4, r5, r7, pc}

080018ea <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE4findERSC_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6839      	ldr	r1, [r7, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f917 	bl	8001b2c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>
 80018fe:	4603      	mov	r3, r0
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f946 	bl	8001ba4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8001918:	4603      	mov	r3, r0
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f935 	bl	8001bc6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 800195c:	4603      	mov	r3, r0
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f937 	bl	8001be2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
      { }
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80019b4:	e011      	b.n	80019da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x30>
	{
	  _M_erase(_S_right(__x));
 80019b6:	6838      	ldr	r0, [r7, #0]
 80019b8:	f000 f91e 	bl	8001bf8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019bc:	4603      	mov	r3, r0
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fff2 	bl	80019aa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 80019c6:	6838      	ldr	r0, [r7, #0]
 80019c8:	f000 f922 	bl	8001c10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 80019cc:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80019ce:	6839      	ldr	r1, [r7, #0]
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f929 	bl	8001c28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ea      	bne.n	80019b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xc>
	}
    }
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f929 	bl	8001c4a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f912 	bl	8001c62 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001a50:	bf00      	nop
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f006 fdfd 	bl	8008690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	68b8      	ldr	r0, [r7, #8]
 8001ab2:	f000 f8f5 	bl	8001ca0 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d911      	bls.n	8001ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8001ac0:	f107 0318 	add.w	r3, r7, #24
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f006 fdbf 	bl	800864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f006 fda6 	bl	8008624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	4619      	mov	r1, r3
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f006 fda7 	bl	8008630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8001ae2:	e005      	b.n	8001af0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tag+0x50>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8001ae8:	69f8      	ldr	r0, [r7, #28]
 8001aea:	f006 fd9f 	bl	800862c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001aee:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ffb1 	bl	8001a5e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f006 fd93 	bl	8008628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f8dd 	bl	8001cc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>

	__guard._M_guarded = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4619      	mov	r1, r3
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f006 fd8c 	bl	8008634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ffab 	bl	8001a7c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPhEEvT_S7_St20forward_iterator_tagEN6_GuardD1Ev>
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ff57 	bl	80019ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_beginEv>
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8e1 	bl	8001d06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4621      	mov	r1, r4
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8e7 	bl	8001d1e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>
 8001b50:	4603      	mov	r3, r0
 8001b52:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f825 	bl	8001ba4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	f107 020c 	add.w	r2, r7, #12
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff4a 	bl	8001a02 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEESE_>
 8001b6e:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10d      	bne.n	8001b90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8001b74:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8001b76:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f901 	bl	8001d80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7ff ff50 	bl	8001a2a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f807 	bl	8001ba4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	e000      	b.n	8001b9c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE4findERS7_+0x70>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    }
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}

08001ba4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	1d1a      	adds	r2, r3, #4
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f863 	bl	8001c82 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr()
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3310      	adds	r3, #16
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f8e0 	bl	8001d98 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8bb 	bl	8001db0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8cc 	bl	8001dda <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
 8001c6c:	6839      	ldr	r1, [r7, #0]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f006 fd1f 	bl	80086b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8001c74:	4603      	mov	r3, r0
 8001c76:	0fdb      	lsrs	r3, r3, #31
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001caa:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff feca 	bl	8001a48 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f000 f8b3 	bl	8001e24 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001cbe:	4603      	mov	r3, r0
    }
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bdb0      	pop	{r4, r5, r7, pc}

08001cc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_>:
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001cd4:	e00e      	b.n	8001cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0x2c>
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	75fb      	strb	r3, [r7, #23]
 8001cdc:	f107 0317 	add.w	r3, r7, #23
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff fc40 	bl	8001568 <_ZNSt11char_traitsIcE6assignERcRKc>
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1ec      	bne.n	8001cd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsIPhEEvPcT_S8_+0xe>
	}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3304      	adds	r3, #4
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d1e:	b590      	push	{r4, r7, lr}
 8001d20:	b087      	sub	sp, #28
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d2c:	e01a      	b.n	8001d64 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001d2e:	68fc      	ldr	r4, [r7, #12]
 8001d30:	68b8      	ldr	r0, [r7, #8]
 8001d32:	f000 f864 	bl	8001dfe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8001d36:	4603      	mov	r3, r0
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f7ff fe74 	bl	8001a2a <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	f7ff ff5c 	bl	8001c10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d58:	60b8      	str	r0, [r7, #8]
 8001d5a:	e003      	b.n	8001d64 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x46>
	  __x = _S_right(__x);
 8001d5c:	68b8      	ldr	r0, [r7, #8]
 8001d5e:	f7ff ff4b 	bl	8001bf8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d62:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1e1      	bne.n	8001d2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS7_+0x10>
      return iterator(__y);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff86 	bl	8001c82 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEC1EPSt18_Rb_tree_node_base>
 8001d76:	697b      	ldr	r3, [r7, #20]
    }
 8001d78:	4618      	mov	r0, r3
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f838 	bl	8001dfe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f84e 	bl	8001e42 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f84c 	bl	8001e58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	6838      	ldr	r0, [r7, #0]
 8001dc4:	f7ff feff 	bl	8001bc6 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f000 f84e 	bl	8001e6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>
      }
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd90      	pop	{r4, r7, pc}

08001dda <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f837 	bl	8001e58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2201      	movs	r2, #1
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 f849 	bl	8001e88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f84d 	bl	8001ea6 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 f854 	bl	8001ec2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>
 8001e1a:	4603      	mov	r3, r0
      }
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
    }
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() noexcept
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE7destroyISC_EEvRSE_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001e78:	6839      	ldr	r1, [r7, #0]
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f83a 	bl	8001ef4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f837 	bl	8001f0c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE9_M_valptrEv>:
      _M_valptr() const
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3310      	adds	r3, #16
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f83c 	bl	8001f30 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEclERKSB_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f006 fbde 	bl	80086a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE7destroyISC_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001efe:	6838      	ldr	r0, [r7, #0]
 8001f00:	f7ff ffeb 	bl	8001eda <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEED1Ev>
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEEE10deallocateEPSD_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	222c      	movs	r2, #44	@ 0x2c
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	4619      	mov	r1, r3
 8001f22:	68b8      	ldr	r0, [r7, #8]
 8001f24:	f006 fb5e 	bl	80085e4 <_ZdlPvj>
      }
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f805 	bl	8001f48 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjEEE7_M_addrEv>:
      _M_addr() const noexcept
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>:
      ~map() = default;
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fc84 	bl	8001876 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EED1Ev>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_Z41__static_initialization_and_destruction_0ii>:
  volatile uint32_t* reg = (volatile uint32_t*)addr;
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
}
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d102      	bne.n	8001f98 <_Z41__static_initialization_and_destruction_0ii+0x20>
static std::map<std::string, void(*)(uint8_t*, size_t)> handler_map;
 8001f92:	4809      	ldr	r0, [pc, #36]	@ (8001fb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001f94:	f7ff fb35 	bl	8001602 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEEC1Ev>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d102      	bne.n	8001fae <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001fa8:	4803      	ldr	r0, [pc, #12]	@ (8001fb8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001faa:	f7ff ffd8 	bl	8001f5e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPhjESt4lessIS5_ESaISt4pairIKS5_S8_EEED1Ev>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200006f0 	.word	0x200006f0

08001fbc <_GLOBAL__sub_I_huart_reg>:
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7ff ffd7 	bl	8001f78 <_Z41__static_initialization_and_destruction_0ii>
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_GLOBAL__sub_D_huart_reg>:
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff ffcf 	bl	8001f78 <_Z41__static_initialization_and_destruction_0ii>
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fdc:	480d      	ldr	r0, [pc, #52]	@ (8002014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fe0:	f7ff fab0 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe6:	490d      	ldr	r1, [pc, #52]	@ (800201c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <LoopForever+0xe>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8002028 <LoopForever+0x16>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800200a:	f006 fca5 	bl	8008958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800200e:	f7fe fa7b 	bl	8000508 <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   r0, =_estack
 8002014:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002020:	08008ac0 	.word	0x08008ac0
  ldr r2, =_sbss
 8002024:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002028:	20000858 	.word	0x20000858

0800202c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_2_IRQHandler>

0800202e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002038:	2003      	movs	r0, #3
 800203a:	f001 fd23 	bl	8003a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203e:	200f      	movs	r0, #15
 8002040:	f000 f80e 	bl	8002060 <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	e001      	b.n	8002054 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002050:	f7fe fec0 	bl	8000dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002054:	79fb      	ldrb	r3, [r7, #7]

}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800206c:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_InitTick+0x68>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d022      	beq.n	80020ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002074:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <HAL_InitTick+0x6c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_InitTick+0x68>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002080:	fbb1 f3f3 	udiv	r3, r1, r3
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f001 fd2e 	bl	8003aea <HAL_SYSTICK_Config>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b0f      	cmp	r3, #15
 8002098:	d809      	bhi.n	80020ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209a:	2200      	movs	r2, #0
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	f04f 30ff 	mov.w	r0, #4294967295
 80020a2:	f001 fcfa 	bl	8003a9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_InitTick+0x70>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e007      	b.n	80020be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e004      	b.n	80020be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000010 	.word	0x20000010
 80020cc:	20000000 	.word	0x20000000
 80020d0:	2000000c 	.word	0x2000000c

080020d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_IncTick+0x1c>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_IncTick+0x20>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a03      	ldr	r2, [pc, #12]	@ (80020f0 <HAL_IncTick+0x1c>)
 80020e4:	6013      	str	r3, [r2, #0]
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	20000708 	.word	0x20000708
 80020f4:	20000010 	.word	0x20000010

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000708 	.word	0x20000708

08002110 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	609a      	str	r2, [r3, #8]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	609a      	str	r2, [r3, #8]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3360      	adds	r3, #96	@ 0x60
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <LL_ADC_SetOffset+0x44>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	03fff000 	.word	0x03fff000

080021c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3360      	adds	r3, #96	@ 0x60
 80021ce:	461a      	mov	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3360      	adds	r3, #96	@ 0x60
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	431a      	orrs	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002216:	bf00      	nop
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002222:	b480      	push	{r7}
 8002224:	b087      	sub	sp, #28
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3360      	adds	r3, #96	@ 0x60
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	431a      	orrs	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3360      	adds	r3, #96	@ 0x60
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	431a      	orrs	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002282:	bf00      	nop
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	615a      	str	r2, [r3, #20]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3330      	adds	r3, #48	@ 0x30
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	4413      	add	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	211f      	movs	r1, #31
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	f003 011f 	and.w	r1, r3, #31
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	431a      	orrs	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3314      	adds	r3, #20
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	0e5b      	lsrs	r3, r3, #25
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	4413      	add	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	0d1b      	lsrs	r3, r3, #20
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2107      	movs	r1, #7
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	401a      	ands	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	0d1b      	lsrs	r3, r3, #20
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	431a      	orrs	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002356:	bf00      	nop
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	43db      	mvns	r3, r3
 800237e:	401a      	ands	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0318 	and.w	r3, r3, #24
 8002386:	4908      	ldr	r1, [pc, #32]	@ (80023a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002388:	40d9      	lsrs	r1, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	400b      	ands	r3, r1
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	431a      	orrs	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	0007ffff 	.word	0x0007ffff

080023ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6093      	str	r3, [r2, #8]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023e4:	d101      	bne.n	80023ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800240c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002430:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002434:	d101      	bne.n	800243a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <LL_ADC_IsEnabled+0x18>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_ADC_IsEnabled+0x1a>
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b04      	cmp	r3, #4
 8002480:	d101      	bne.n	8002486 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d101      	bne.n	80024ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e1a9      	b.n	800282a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7fe fc99 	bl	8000e1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff67 	bl	80023d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff4d 	bl	80023ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff82 	bl	8002420 <LL_ADC_IsInternalRegulatorEnabled>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d115      	bne.n	800254e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff66 	bl	80023f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800252c:	4b9c      	ldr	r3, [pc, #624]	@ (80027a0 <HAL_ADC_Init+0x2e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	4a9c      	ldr	r2, [pc, #624]	@ (80027a4 <HAL_ADC_Init+0x2e8>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	3301      	adds	r3, #1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002540:	e002      	b.n	8002548 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3b01      	subs	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff64 	bl	8002420 <LL_ADC_IsInternalRegulatorEnabled>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10d      	bne.n	800257a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff75 	bl	800246e <LL_ADC_REG_IsConversionOngoing>
 8002584:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 8142 	bne.w	8002818 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 813e 	bne.w	8002818 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025a4:	f043 0202 	orr.w	r2, r3, #2
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff49 	bl	8002448 <LL_ADC_IsEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d141      	bne.n	8002640 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025c4:	d004      	beq.n	80025d0 <HAL_ADC_Init+0x114>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a77      	ldr	r2, [pc, #476]	@ (80027a8 <HAL_ADC_Init+0x2ec>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d10f      	bne.n	80025f0 <HAL_ADC_Init+0x134>
 80025d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025d4:	f7ff ff38 	bl	8002448 <LL_ADC_IsEnabled>
 80025d8:	4604      	mov	r4, r0
 80025da:	4873      	ldr	r0, [pc, #460]	@ (80027a8 <HAL_ADC_Init+0x2ec>)
 80025dc:	f7ff ff34 	bl	8002448 <LL_ADC_IsEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4323      	orrs	r3, r4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e012      	b.n	8002616 <HAL_ADC_Init+0x15a>
 80025f0:	486e      	ldr	r0, [pc, #440]	@ (80027ac <HAL_ADC_Init+0x2f0>)
 80025f2:	f7ff ff29 	bl	8002448 <LL_ADC_IsEnabled>
 80025f6:	4604      	mov	r4, r0
 80025f8:	486d      	ldr	r0, [pc, #436]	@ (80027b0 <HAL_ADC_Init+0x2f4>)
 80025fa:	f7ff ff25 	bl	8002448 <LL_ADC_IsEnabled>
 80025fe:	4603      	mov	r3, r0
 8002600:	431c      	orrs	r4, r3
 8002602:	486c      	ldr	r0, [pc, #432]	@ (80027b4 <HAL_ADC_Init+0x2f8>)
 8002604:	f7ff ff20 	bl	8002448 <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	4323      	orrs	r3, r4
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002622:	d004      	beq.n	800262e <HAL_ADC_Init+0x172>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a5f      	ldr	r2, [pc, #380]	@ (80027a8 <HAL_ADC_Init+0x2ec>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_ADC_Init+0x176>
 800262e:	4a62      	ldr	r2, [pc, #392]	@ (80027b8 <HAL_ADC_Init+0x2fc>)
 8002630:	e000      	b.n	8002634 <HAL_ADC_Init+0x178>
 8002632:	4a62      	ldr	r2, [pc, #392]	@ (80027bc <HAL_ADC_Init+0x300>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f7ff fd68 	bl	8002110 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7f5b      	ldrb	r3, [r3, #29]
 8002644:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800264a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002650:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002656:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800265e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800266a:	2b01      	cmp	r3, #1
 800266c:	d106      	bne.n	800267c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	045b      	lsls	r3, r3, #17
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d009      	beq.n	8002698 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	4b48      	ldr	r3, [pc, #288]	@ (80027c0 <HAL_ADC_Init+0x304>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	69b9      	ldr	r1, [r7, #24]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fee4 	bl	8002494 <LL_ADC_INJ_IsConversionOngoing>
 80026cc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d17f      	bne.n	80027d4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d17c      	bne.n	80027d4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026de:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026e6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	430b      	orrs	r3, r1
 8002702:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d017      	beq.n	800273c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800271a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002724:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6911      	ldr	r1, [r2, #16]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	430b      	orrs	r3, r1
 8002736:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800273a:	e013      	b.n	8002764 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800274a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800275c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002760:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800276a:	2b01      	cmp	r3, #1
 800276c:	d12a      	bne.n	80027c4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002784:	4311      	orrs	r1, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002790:	430a      	orrs	r2, r1
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	e019      	b.n	80027d4 <HAL_ADC_Init+0x318>
 80027a0:	20000000 	.word	0x20000000
 80027a4:	053e2d63 	.word	0x053e2d63
 80027a8:	50000100 	.word	0x50000100
 80027ac:	50000400 	.word	0x50000400
 80027b0:	50000500 	.word	0x50000500
 80027b4:	50000600 	.word	0x50000600
 80027b8:	50000300 	.word	0x50000300
 80027bc:	50000700 	.word	0x50000700
 80027c0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d10c      	bne.n	80027f6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f023 010f 	bic.w	r1, r3, #15
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	1e5a      	subs	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027f4:	e007      	b.n	8002806 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 020f 	bic.w	r2, r2, #15
 8002804:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	f023 0303 	bic.w	r3, r3, #3
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002816:	e007      	b.n	8002828 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	f043 0210 	orr.w	r2, r3, #16
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002828:	7ffb      	ldrb	r3, [r7, #31]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	@ 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}
 8002832:	bf00      	nop

08002834 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b0b6      	sub	sp, #216	@ 0xd8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800284e:	2b01      	cmp	r3, #1
 8002850:	d102      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x24>
 8002852:	2302      	movs	r3, #2
 8002854:	f000 bc13 	b.w	800307e <HAL_ADC_ConfigChannel+0x84a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fe02 	bl	800246e <LL_ADC_REG_IsConversionOngoing>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	f040 83f3 	bne.w	8003058 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	f7ff fd18 	bl	80022b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fdf0 	bl	800246e <LL_ADC_REG_IsConversionOngoing>
 800288e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fdfc 	bl	8002494 <LL_ADC_INJ_IsConversionOngoing>
 800289c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f040 81d9 	bne.w	8002c5c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 81d4 	bne.w	8002c5c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028bc:	d10f      	bne.n	80028de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	4619      	mov	r1, r3
 80028ca:	f7ff fd1f 	bl	800230c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fcd9 	bl	800228e <LL_ADC_SetSamplingTimeCommonConfig>
 80028dc:	e00e      	b.n	80028fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f7ff fd0e 	bl	800230c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fcc9 	bl	800228e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	08db      	lsrs	r3, r3, #3
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b04      	cmp	r3, #4
 800291c:	d022      	beq.n	8002964 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6919      	ldr	r1, [r3, #16]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800292e:	f7ff fc23 	bl	8002178 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6919      	ldr	r1, [r3, #16]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	461a      	mov	r2, r3
 8002940:	f7ff fc6f 	bl	8002222 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002950:	2b01      	cmp	r3, #1
 8002952:	d102      	bne.n	800295a <HAL_ADC_ConfigChannel+0x126>
 8002954:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002958:	e000      	b.n	800295c <HAL_ADC_ConfigChannel+0x128>
 800295a:	2300      	movs	r3, #0
 800295c:	461a      	mov	r2, r3
 800295e:	f7ff fc7b 	bl	8002258 <LL_ADC_SetOffsetSaturation>
 8002962:	e17b      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fc28 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002970:	4603      	mov	r3, r0
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x15c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fc1d 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	f003 021f 	and.w	r2, r3, #31
 800298e:	e01e      	b.n	80029ce <HAL_ADC_ConfigChannel+0x19a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fc12 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 800299c:	4603      	mov	r3, r0
 800299e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e004      	b.n	80029cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80029c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x1b2>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	e018      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1e4>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80029fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e004      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d106      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fbe1 	bl	80021ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2101      	movs	r1, #1
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fbc5 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x222>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fbba 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	e01e      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x260>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fbaf 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002a74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e004      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x278>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	e018      	b.n	8002ade <HAL_ADC_ConfigChannel+0x2aa>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ac4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e004      	b.n	8002ade <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d106      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fb7e 	bl	80021ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fb62 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x2e8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fb57 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002b12:	4603      	mov	r3, r0
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	f003 021f 	and.w	r2, r3, #31
 8002b1a:	e01e      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x326>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fb4c 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	e004      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x33e>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0e9b      	lsrs	r3, r3, #26
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	e016      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x36c>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b92:	2320      	movs	r3, #32
 8002b94:	e004      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d106      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2102      	movs	r1, #2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fb1d 	bl	80021ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2103      	movs	r1, #3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fb01 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x3aa>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2103      	movs	r1, #3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff faf6 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	e017      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x3da>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2103      	movs	r1, #3
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff faeb 	bl	80021c0 <LL_ADC_GetOffsetChannel>
 8002bea:	4603      	mov	r3, r0
 8002bec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bf8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x3f2>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	e011      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x416>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d106      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	2103      	movs	r1, #3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fac8 	bl	80021ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fbf1 	bl	8002448 <LL_ADC_IsEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f040 813d 	bne.w	8002ee8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f7ff fb72 	bl	8002364 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4aa2      	ldr	r2, [pc, #648]	@ (8002f10 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	f040 812e 	bne.w	8002ee8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x480>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0e9b      	lsrs	r3, r3, #26
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e019      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x4b4>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cc4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e003      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2b09      	cmp	r3, #9
 8002ce0:	bf94      	ite	ls
 8002ce2:	2301      	movls	r3, #1
 8002ce4:	2300      	movhi	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d079      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x4d4>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	3301      	adds	r3, #1
 8002d00:	069b      	lsls	r3, r3, #26
 8002d02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d06:	e015      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x500>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d18:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e003      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	069b      	lsls	r3, r3, #26
 8002d30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x520>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	e017      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x550>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d64:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e003      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	ea42 0103 	orr.w	r1, r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x576>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	051b      	lsls	r3, r3, #20
 8002da8:	e018      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x5a8>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	e003      	b.n	8002dce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	e07e      	b.n	8002ede <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x5c8>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	3301      	adds	r3, #1
 8002df4:	069b      	lsls	r3, r3, #26
 8002df6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dfa:	e015      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x5f4>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e14:	2320      	movs	r3, #32
 8002e16:	e003      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	069b      	lsls	r3, r3, #26
 8002e24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x614>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2101      	movs	r1, #1
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	e017      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x644>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	61fb      	str	r3, [r7, #28]
  return result;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e60:	2320      	movs	r3, #32
 8002e62:	e003      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	ea42 0103 	orr.w	r1, r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x670>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4613      	mov	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	3b1e      	subs	r3, #30
 8002e9c:	051b      	lsls	r3, r3, #20
 8002e9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ea2:	e01b      	b.n	8002edc <HAL_ADC_ConfigChannel+0x6a8>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	613b      	str	r3, [r7, #16]
  return result;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e003      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f003 021f 	and.w	r2, r3, #31
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b1e      	subs	r3, #30
 8002ed6:	051b      	lsls	r3, r3, #20
 8002ed8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002edc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f7ff fa12 	bl	800230c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <HAL_ADC_ConfigChannel+0x6e0>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80be 	beq.w	8003072 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002efe:	d004      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x6d6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a04      	ldr	r2, [pc, #16]	@ (8002f18 <HAL_ADC_ConfigChannel+0x6e4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10a      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x6ec>
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <HAL_ADC_ConfigChannel+0x6e8>)
 8002f0c:	e009      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x6ee>
 8002f0e:	bf00      	nop
 8002f10:	407f0000 	.word	0x407f0000
 8002f14:	80080000 	.word	0x80080000
 8002f18:	50000100 	.word	0x50000100
 8002f1c:	50000300 	.word	0x50000300
 8002f20:	4b59      	ldr	r3, [pc, #356]	@ (8003088 <HAL_ADC_ConfigChannel+0x854>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f91a 	bl	800215c <LL_ADC_GetCommonPathInternalCh>
 8002f28:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a56      	ldr	r2, [pc, #344]	@ (800308c <HAL_ADC_ConfigChannel+0x858>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x70c>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a55      	ldr	r2, [pc, #340]	@ (8003090 <HAL_ADC_ConfigChannel+0x85c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d13a      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d134      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f54:	d005      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x72e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a4e      	ldr	r2, [pc, #312]	@ (8003094 <HAL_ADC_ConfigChannel+0x860>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	f040 8085 	bne.w	800306c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f6a:	d004      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x742>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a49      	ldr	r2, [pc, #292]	@ (8003098 <HAL_ADC_ConfigChannel+0x864>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x746>
 8002f76:	4a49      	ldr	r2, [pc, #292]	@ (800309c <HAL_ADC_ConfigChannel+0x868>)
 8002f78:	e000      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x748>
 8002f7a:	4a43      	ldr	r2, [pc, #268]	@ (8003088 <HAL_ADC_ConfigChannel+0x854>)
 8002f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f7ff f8d5 	bl	8002136 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f8c:	4b44      	ldr	r3, [pc, #272]	@ (80030a0 <HAL_ADC_ConfigChannel+0x86c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	4a44      	ldr	r2, [pc, #272]	@ (80030a4 <HAL_ADC_ConfigChannel+0x870>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fa6:	e002      	b.n	8002fae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f9      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb4:	e05a      	b.n	800306c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	@ (80030a8 <HAL_ADC_ConfigChannel+0x874>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d125      	bne.n	800300c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d11f      	bne.n	800300c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a31      	ldr	r2, [pc, #196]	@ (8003098 <HAL_ADC_ConfigChannel+0x864>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d104      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x7ac>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a34      	ldr	r2, [pc, #208]	@ (80030ac <HAL_ADC_ConfigChannel+0x878>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d047      	beq.n	8003070 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fe8:	d004      	beq.n	8002ff4 <HAL_ADC_ConfigChannel+0x7c0>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2a      	ldr	r2, [pc, #168]	@ (8003098 <HAL_ADC_ConfigChannel+0x864>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x7c4>
 8002ff4:	4a29      	ldr	r2, [pc, #164]	@ (800309c <HAL_ADC_ConfigChannel+0x868>)
 8002ff6:	e000      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x7c6>
 8002ff8:	4a23      	ldr	r2, [pc, #140]	@ (8003088 <HAL_ADC_ConfigChannel+0x854>)
 8002ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7ff f896 	bl	8002136 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800300a:	e031      	b.n	8003070 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a27      	ldr	r2, [pc, #156]	@ (80030b0 <HAL_ADC_ConfigChannel+0x87c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d12d      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800301a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d127      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <HAL_ADC_ConfigChannel+0x864>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003034:	d004      	beq.n	8003040 <HAL_ADC_ConfigChannel+0x80c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <HAL_ADC_ConfigChannel+0x864>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x810>
 8003040:	4a16      	ldr	r2, [pc, #88]	@ (800309c <HAL_ADC_ConfigChannel+0x868>)
 8003042:	e000      	b.n	8003046 <HAL_ADC_ConfigChannel+0x812>
 8003044:	4a10      	ldr	r2, [pc, #64]	@ (8003088 <HAL_ADC_ConfigChannel+0x854>)
 8003046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800304a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f7ff f870 	bl	8002136 <LL_ADC_SetCommonPathInternalCh>
 8003056:	e00c      	b.n	8003072 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800306a:	e002      	b.n	8003072 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800306c:	bf00      	nop
 800306e:	e000      	b.n	8003072 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003070:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800307a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800307e:	4618      	mov	r0, r3
 8003080:	37d8      	adds	r7, #216	@ 0xd8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	50000700 	.word	0x50000700
 800308c:	c3210000 	.word	0xc3210000
 8003090:	90c00010 	.word	0x90c00010
 8003094:	50000600 	.word	0x50000600
 8003098:	50000100 	.word	0x50000100
 800309c:	50000300 	.word	0x50000300
 80030a0:	20000000 	.word	0x20000000
 80030a4:	053e2d63 	.word	0x053e2d63
 80030a8:	c7520000 	.word	0xc7520000
 80030ac:	50000500 	.word	0x50000500
 80030b0:	cb840000 	.word	0xcb840000

080030b4 <LL_ADC_IsEnabled>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <LL_ADC_IsEnabled+0x18>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <LL_ADC_IsEnabled+0x1a>
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_ADC_REG_IsConversionOngoing>:
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d101      	bne.n	80030f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b0a1      	sub	sp, #132	@ 0x84
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800311a:	2302      	movs	r3, #2
 800311c:	e0e7      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003126:	2300      	movs	r3, #0
 8003128:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800312a:	2300      	movs	r3, #0
 800312c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003136:	d102      	bne.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003138:	4b6f      	ldr	r3, [pc, #444]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	e009      	b.n	8003152 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6e      	ldr	r2, [pc, #440]	@ (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d102      	bne.n	800314e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003148:	4b6d      	ldr	r3, [pc, #436]	@ (8003300 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	e001      	b.n	8003152 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0be      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ffb1 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 8003178:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ffab 	bl	80030da <LL_ADC_REG_IsConversionOngoing>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 80a0 	bne.w	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800318c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 809c 	bne.w	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800319c:	d004      	beq.n	80031a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a55      	ldr	r2, [pc, #340]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80031a8:	4b56      	ldr	r3, [pc, #344]	@ (8003304 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80031aa:	e000      	b.n	80031ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80031ac:	4b56      	ldr	r3, [pc, #344]	@ (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80031ae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d04b      	beq.n	8003250 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031ca:	035b      	lsls	r3, r3, #13
 80031cc:	430b      	orrs	r3, r1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031dc:	d004      	beq.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a45      	ldr	r2, [pc, #276]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d10f      	bne.n	8003208 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80031e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80031ec:	f7ff ff62 	bl	80030b4 <LL_ADC_IsEnabled>
 80031f0:	4604      	mov	r4, r0
 80031f2:	4841      	ldr	r0, [pc, #260]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031f4:	f7ff ff5e 	bl	80030b4 <LL_ADC_IsEnabled>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4323      	orrs	r3, r4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e012      	b.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003208:	483c      	ldr	r0, [pc, #240]	@ (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800320a:	f7ff ff53 	bl	80030b4 <LL_ADC_IsEnabled>
 800320e:	4604      	mov	r4, r0
 8003210:	483b      	ldr	r0, [pc, #236]	@ (8003300 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003212:	f7ff ff4f 	bl	80030b4 <LL_ADC_IsEnabled>
 8003216:	4603      	mov	r3, r0
 8003218:	431c      	orrs	r4, r3
 800321a:	483c      	ldr	r0, [pc, #240]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800321c:	f7ff ff4a 	bl	80030b4 <LL_ADC_IsEnabled>
 8003220:	4603      	mov	r3, r0
 8003222:	4323      	orrs	r3, r4
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d056      	beq.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003232:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800323a:	f023 030f 	bic.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	6811      	ldr	r1, [r2, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	6892      	ldr	r2, [r2, #8]
 8003246:	430a      	orrs	r2, r1
 8003248:	431a      	orrs	r2, r3
 800324a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800324c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800324e:	e047      	b.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003250:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003258:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800325a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003264:	d004      	beq.n	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a23      	ldr	r2, [pc, #140]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d10f      	bne.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003270:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003274:	f7ff ff1e 	bl	80030b4 <LL_ADC_IsEnabled>
 8003278:	4604      	mov	r4, r0
 800327a:	481f      	ldr	r0, [pc, #124]	@ (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800327c:	f7ff ff1a 	bl	80030b4 <LL_ADC_IsEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	4323      	orrs	r3, r4
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e012      	b.n	80032b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003290:	481a      	ldr	r0, [pc, #104]	@ (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003292:	f7ff ff0f 	bl	80030b4 <LL_ADC_IsEnabled>
 8003296:	4604      	mov	r4, r0
 8003298:	4819      	ldr	r0, [pc, #100]	@ (8003300 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800329a:	f7ff ff0b 	bl	80030b4 <LL_ADC_IsEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	431c      	orrs	r4, r3
 80032a2:	481a      	ldr	r0, [pc, #104]	@ (800330c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032a4:	f7ff ff06 	bl	80030b4 <LL_ADC_IsEnabled>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4323      	orrs	r3, r4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032c2:	f023 030f 	bic.w	r3, r3, #15
 80032c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032ca:	e009      	b.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	f043 0220 	orr.w	r2, r3, #32
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80032de:	e000      	b.n	80032e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3784      	adds	r7, #132	@ 0x84
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd90      	pop	{r4, r7, pc}
 80032f6:	bf00      	nop
 80032f8:	50000100 	.word	0x50000100
 80032fc:	50000400 	.word	0x50000400
 8003300:	50000500 	.word	0x50000500
 8003304:	50000300 	.word	0x50000300
 8003308:	50000700 	.word	0x50000700
 800330c:	50000600 	.word	0x50000600

08003310 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003318:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <LL_EXTI_EnableIT_0_31+0x20>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4904      	ldr	r1, [pc, #16]	@ (8003330 <LL_EXTI_EnableIT_0_31+0x20>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40010400 	.word	0x40010400

08003334 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <LL_EXTI_EnableIT_32_63+0x20>)
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	4904      	ldr	r1, [pc, #16]	@ (8003354 <LL_EXTI_EnableIT_32_63+0x20>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4313      	orrs	r3, r2
 8003346:	620b      	str	r3, [r1, #32]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40010400 	.word	0x40010400

08003358 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003360:	4b06      	ldr	r3, [pc, #24]	@ (800337c <LL_EXTI_DisableIT_0_31+0x24>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	43db      	mvns	r3, r3
 8003368:	4904      	ldr	r1, [pc, #16]	@ (800337c <LL_EXTI_DisableIT_0_31+0x24>)
 800336a:	4013      	ands	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40010400 	.word	0x40010400

08003380 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003388:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <LL_EXTI_DisableIT_32_63+0x24>)
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	43db      	mvns	r3, r3
 8003390:	4904      	ldr	r1, [pc, #16]	@ (80033a4 <LL_EXTI_DisableIT_32_63+0x24>)
 8003392:	4013      	ands	r3, r2
 8003394:	620b      	str	r3, [r1, #32]
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010400 	.word	0x40010400

080033a8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]

}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40010400 	.word	0x40010400

080033cc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <LL_EXTI_EnableEvent_32_63+0x20>)
 80033d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d8:	4904      	ldr	r1, [pc, #16]	@ (80033ec <LL_EXTI_EnableEvent_32_63+0x20>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4313      	orrs	r3, r2
 80033de:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40010400 	.word	0x40010400

080033f0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80033f8:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <LL_EXTI_DisableEvent_0_31+0x24>)
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	43db      	mvns	r3, r3
 8003400:	4904      	ldr	r1, [pc, #16]	@ (8003414 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003402:	4013      	ands	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40010400 	.word	0x40010400

08003418 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003420:	4b06      	ldr	r3, [pc, #24]	@ (800343c <LL_EXTI_DisableEvent_32_63+0x24>)
 8003422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	43db      	mvns	r3, r3
 8003428:	4904      	ldr	r1, [pc, #16]	@ (800343c <LL_EXTI_DisableEvent_32_63+0x24>)
 800342a:	4013      	ands	r3, r2
 800342c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40010400 	.word	0x40010400

08003440 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	4904      	ldr	r1, [pc, #16]	@ (8003460 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]

}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40010400 	.word	0x40010400

08003464 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800346e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003470:	4904      	ldr	r1, [pc, #16]	@ (8003484 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40010400 	.word	0x40010400

08003488 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	43db      	mvns	r3, r3
 8003498:	4904      	ldr	r1, [pc, #16]	@ (80034ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800349a:	4013      	ands	r3, r2
 800349c:	608b      	str	r3, [r1, #8]

}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40010400 	.word	0x40010400

080034b0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80034b8:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80034ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	43db      	mvns	r3, r3
 80034c0:	4904      	ldr	r1, [pc, #16]	@ (80034d4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010400 	.word	0x40010400

080034d8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	4904      	ldr	r1, [pc, #16]	@ (80034f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60cb      	str	r3, [r1, #12]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40010400 	.word	0x40010400

080034fc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003508:	4904      	ldr	r1, [pc, #16]	@ (800351c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4313      	orrs	r3, r2
 800350e:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40010400 	.word	0x40010400

08003520 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003528:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	43db      	mvns	r3, r3
 8003530:	4904      	ldr	r1, [pc, #16]	@ (8003544 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003532:	4013      	ands	r3, r2
 8003534:	60cb      	str	r3, [r1, #12]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010400 	.word	0x40010400

08003548 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003550:	4b06      	ldr	r3, [pc, #24]	@ (800356c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	43db      	mvns	r3, r3
 8003558:	4904      	ldr	r1, [pc, #16]	@ (800356c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800355a:	4013      	ands	r3, r2
 800355c:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40010400 	.word	0x40010400

08003570 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003578:	4a04      	ldr	r2, [pc, #16]	@ (800358c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6153      	str	r3, [r2, #20]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40010400 	.word	0x40010400

08003590 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003598:	4a04      	ldr	r2, [pc, #16]	@ (80035ac <LL_EXTI_ClearFlag_32_63+0x1c>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40010400 	.word	0x40010400

080035b0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	77fb      	strb	r3, [r7, #31]
 80035ca:	e181      	b.n	80038d0 <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035da:	d102      	bne.n	80035e2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e176      	b.n	80038d0 <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7f5b      	ldrb	r3, [r3, #29]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d108      	bne.n	80035fe <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fd fc91 	bl	8000f20 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003608:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b90      	ldr	r3, [pc, #576]	@ (8003870 <HAL_COMP_Init+0x2c0>)
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	430b      	orrs	r3, r1
 800363a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d016      	beq.n	8003678 <HAL_COMP_Init+0xc8>
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d113      	bne.n	8003678 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003650:	4b88      	ldr	r3, [pc, #544]	@ (8003874 <HAL_COMP_Init+0x2c4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	4a88      	ldr	r2, [pc, #544]	@ (8003878 <HAL_COMP_Init+0x2c8>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800366a:	e002      	b.n	8003672 <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3b01      	subs	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f9      	bne.n	800366c <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a7f      	ldr	r2, [pc, #508]	@ (800387c <HAL_COMP_Init+0x2cc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d028      	beq.n	80036d4 <HAL_COMP_Init+0x124>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7e      	ldr	r2, [pc, #504]	@ (8003880 <HAL_COMP_Init+0x2d0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d020      	beq.n	80036ce <HAL_COMP_Init+0x11e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a7c      	ldr	r2, [pc, #496]	@ (8003884 <HAL_COMP_Init+0x2d4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <HAL_COMP_Init+0x118>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7b      	ldr	r2, [pc, #492]	@ (8003888 <HAL_COMP_Init+0x2d8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d010      	beq.n	80036c2 <HAL_COMP_Init+0x112>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a79      	ldr	r2, [pc, #484]	@ (800388c <HAL_COMP_Init+0x2dc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d008      	beq.n	80036bc <HAL_COMP_Init+0x10c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a78      	ldr	r2, [pc, #480]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_COMP_Init+0x108>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e00f      	b.n	80036d8 <HAL_COMP_Init+0x128>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e00d      	b.n	80036d8 <HAL_COMP_Init+0x128>
 80036bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80036c0:	e00a      	b.n	80036d8 <HAL_COMP_Init+0x128>
 80036c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036c6:	e007      	b.n	80036d8 <HAL_COMP_Init+0x128>
 80036c8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80036cc:	e004      	b.n	80036d8 <HAL_COMP_Init+0x128>
 80036ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036d2:	e001      	b.n	80036d8 <HAL_COMP_Init+0x128>
 80036d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80036d8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80b6 	beq.w	8003854 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d011      	beq.n	8003718 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a65      	ldr	r2, [pc, #404]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_COMP_Init+0x158>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a64      	ldr	r2, [pc, #400]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d103      	bne.n	8003710 <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003708:	6938      	ldr	r0, [r7, #16]
 800370a:	f7ff feab 	bl	8003464 <LL_EXTI_EnableRisingTrig_32_63>
 800370e:	e014      	b.n	800373a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003710:	6938      	ldr	r0, [r7, #16]
 8003712:	f7ff fe95 	bl	8003440 <LL_EXTI_EnableRisingTrig_0_31>
 8003716:	e010      	b.n	800373a <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5c      	ldr	r2, [pc, #368]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_COMP_Init+0x17c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5b      	ldr	r2, [pc, #364]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d103      	bne.n	8003734 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800372c:	6938      	ldr	r0, [r7, #16]
 800372e:	f7ff febf 	bl	80034b0 <LL_EXTI_DisableRisingTrig_32_63>
 8003732:	e002      	b.n	800373a <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003734:	6938      	ldr	r0, [r7, #16]
 8003736:	f7ff fea7 	bl	8003488 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d011      	beq.n	800376a <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a51      	ldr	r2, [pc, #324]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_COMP_Init+0x1aa>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a4f      	ldr	r2, [pc, #316]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d103      	bne.n	8003762 <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800375a:	6938      	ldr	r0, [r7, #16]
 800375c:	f7ff fece 	bl	80034fc <LL_EXTI_EnableFallingTrig_32_63>
 8003760:	e014      	b.n	800378c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003762:	6938      	ldr	r0, [r7, #16]
 8003764:	f7ff feb8 	bl	80034d8 <LL_EXTI_EnableFallingTrig_0_31>
 8003768:	e010      	b.n	800378c <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a48      	ldr	r2, [pc, #288]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_COMP_Init+0x1ce>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a46      	ldr	r2, [pc, #280]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d103      	bne.n	8003786 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800377e:	6938      	ldr	r0, [r7, #16]
 8003780:	f7ff fee2 	bl	8003548 <LL_EXTI_DisableFallingTrig_32_63>
 8003784:	e002      	b.n	800378c <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003786:	6938      	ldr	r0, [r7, #16]
 8003788:	f7ff feca 	bl	8003520 <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3f      	ldr	r2, [pc, #252]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_COMP_Init+0x1f0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3e      	ldr	r2, [pc, #248]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d103      	bne.n	80037a8 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80037a0:	6938      	ldr	r0, [r7, #16]
 80037a2:	f7ff fef5 	bl	8003590 <LL_EXTI_ClearFlag_32_63>
 80037a6:	e002      	b.n	80037ae <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80037a8:	6938      	ldr	r0, [r7, #16]
 80037aa:	f7ff fee1 	bl	8003570 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d011      	beq.n	80037de <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a34      	ldr	r2, [pc, #208]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <HAL_COMP_Init+0x21e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a32      	ldr	r2, [pc, #200]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d103      	bne.n	80037d6 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80037ce:	6938      	ldr	r0, [r7, #16]
 80037d0:	f7ff fdfc 	bl	80033cc <LL_EXTI_EnableEvent_32_63>
 80037d4:	e014      	b.n	8003800 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80037d6:	6938      	ldr	r0, [r7, #16]
 80037d8:	f7ff fde6 	bl	80033a8 <LL_EXTI_EnableEvent_0_31>
 80037dc:	e010      	b.n	8003800 <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_COMP_Init+0x242>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a29      	ldr	r2, [pc, #164]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d103      	bne.n	80037fa <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80037f2:	6938      	ldr	r0, [r7, #16]
 80037f4:	f7ff fe10 	bl	8003418 <LL_EXTI_DisableEvent_32_63>
 80037f8:	e002      	b.n	8003800 <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80037fa:	6938      	ldr	r0, [r7, #16]
 80037fc:	f7ff fdf8 	bl	80033f0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d011      	beq.n	8003830 <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1f      	ldr	r2, [pc, #124]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_COMP_Init+0x270>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1e      	ldr	r2, [pc, #120]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d103      	bne.n	8003828 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003820:	6938      	ldr	r0, [r7, #16]
 8003822:	f7ff fd87 	bl	8003334 <LL_EXTI_EnableIT_32_63>
 8003826:	e04b      	b.n	80038c0 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003828:	6938      	ldr	r0, [r7, #16]
 800382a:	f7ff fd71 	bl	8003310 <LL_EXTI_EnableIT_0_31>
 800382e:	e047      	b.n	80038c0 <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a16      	ldr	r2, [pc, #88]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_COMP_Init+0x294>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a15      	ldr	r2, [pc, #84]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d103      	bne.n	800384c <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003844:	6938      	ldr	r0, [r7, #16]
 8003846:	f7ff fd9b 	bl	8003380 <LL_EXTI_DisableIT_32_63>
 800384a:	e039      	b.n	80038c0 <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800384c:	6938      	ldr	r0, [r7, #16]
 800384e:	f7ff fd83 	bl	8003358 <LL_EXTI_DisableIT_0_31>
 8003852:	e035      	b.n	80038c0 <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0d      	ldr	r2, [pc, #52]	@ (8003890 <HAL_COMP_Init+0x2e0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_COMP_Init+0x2b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a0c      	ldr	r2, [pc, #48]	@ (8003894 <HAL_COMP_Init+0x2e4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d117      	bne.n	8003898 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003868:	6938      	ldr	r0, [r7, #16]
 800386a:	f7ff fdd5 	bl	8003418 <LL_EXTI_DisableEvent_32_63>
 800386e:	e016      	b.n	800389e <HAL_COMP_Init+0x2ee>
 8003870:	ff007e0f 	.word	0xff007e0f
 8003874:	20000000 	.word	0x20000000
 8003878:	053e2d63 	.word	0x053e2d63
 800387c:	40010200 	.word	0x40010200
 8003880:	40010204 	.word	0x40010204
 8003884:	40010208 	.word	0x40010208
 8003888:	4001020c 	.word	0x4001020c
 800388c:	40010210 	.word	0x40010210
 8003890:	40010214 	.word	0x40010214
 8003894:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003898:	6938      	ldr	r0, [r7, #16]
 800389a:	f7ff fda9 	bl	80033f0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a0e      	ldr	r2, [pc, #56]	@ (80038dc <HAL_COMP_Init+0x32c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_COMP_Init+0x302>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0c      	ldr	r2, [pc, #48]	@ (80038e0 <HAL_COMP_Init+0x330>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d103      	bne.n	80038ba <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80038b2:	6938      	ldr	r0, [r7, #16]
 80038b4:	f7ff fd64 	bl	8003380 <LL_EXTI_DisableIT_32_63>
 80038b8:	e002      	b.n	80038c0 <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80038ba:	6938      	ldr	r0, [r7, #16]
 80038bc:	f7ff fd4c 	bl	8003358 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7f5b      	ldrb	r3, [r3, #29]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80038d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40010214 	.word	0x40010214
 80038e0:	40010218 	.word	0x40010218

080038e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003900:	4013      	ands	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800390c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003916:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <__NVIC_SetPriorityGrouping+0x44>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	60d3      	str	r3, [r2, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003930:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <__NVIC_GetPriorityGrouping+0x18>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 0307 	and.w	r3, r3, #7
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	db0b      	blt.n	8003972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	4907      	ldr	r1, [pc, #28]	@ (8003980 <__NVIC_EnableIRQ+0x38>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2001      	movs	r0, #1
 800396a:	fa00 f202 	lsl.w	r2, r0, r2
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e100 	.word	0xe000e100

08003984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	db0a      	blt.n	80039ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	490c      	ldr	r1, [pc, #48]	@ (80039d0 <__NVIC_SetPriority+0x4c>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	440b      	add	r3, r1
 80039a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ac:	e00a      	b.n	80039c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4908      	ldr	r1, [pc, #32]	@ (80039d4 <__NVIC_SetPriority+0x50>)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	3b04      	subs	r3, #4
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	440b      	add	r3, r1
 80039c2:	761a      	strb	r2, [r3, #24]
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000e100 	.word	0xe000e100
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	@ 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f1c3 0307 	rsb	r3, r3, #7
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	bf28      	it	cs
 80039f6:	2304      	movcs	r3, #4
 80039f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d902      	bls.n	8003a08 <NVIC_EncodePriority+0x30>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3b03      	subs	r3, #3
 8003a06:	e000      	b.n	8003a0a <NVIC_EncodePriority+0x32>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43da      	mvns	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	43d9      	mvns	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	4313      	orrs	r3, r2
         );
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3724      	adds	r7, #36	@ 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a50:	d301      	bcc.n	8003a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a52:	2301      	movs	r3, #1
 8003a54:	e00f      	b.n	8003a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a56:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <SysTick_Config+0x40>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a5e:	210f      	movs	r1, #15
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	f7ff ff8e 	bl	8003984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <SysTick_Config+0x40>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6e:	4b04      	ldr	r3, [pc, #16]	@ (8003a80 <SysTick_Config+0x40>)
 8003a70:	2207      	movs	r2, #7
 8003a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	e000e010 	.word	0xe000e010

08003a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff29 	bl	80038e4 <__NVIC_SetPriorityGrouping>
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa8:	f7ff ff40 	bl	800392c <__NVIC_GetPriorityGrouping>
 8003aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff ff90 	bl	80039d8 <NVIC_EncodePriority>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff5f 	bl	8003984 <__NVIC_SetPriority>
}
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff33 	bl	8003948 <__NVIC_EnableIRQ>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ffa4 	bl	8003a40 <SysTick_Config>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e054      	b.n	8003bc0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	7f5b      	ldrb	r3, [r3, #29]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fa4a 	bl	8000fc0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	791b      	ldrb	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a22      	ldr	r2, [pc, #136]	@ (8003bc8 <HAL_CRC_Init+0xc4>)
 8003b40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0218 	bic.w	r2, r2, #24
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	e00c      	b.n	8003b6e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6899      	ldr	r1, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f948 	bl	8003df4 <HAL_CRCEx_Polynomial_Set>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e028      	b.n	8003bc0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	795b      	ldrb	r3, [r3, #5]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7e:	611a      	str	r2, [r3, #16]
 8003b80:	e004      	b.n	8003b8c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6912      	ldr	r2, [r2, #16]
 8003b8a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	04c11db7 	.word	0x04c11db7

08003bcc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2202      	movs	r2, #2
 8003be0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d006      	beq.n	8003c08 <HAL_CRC_Calculate+0x3c>
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d829      	bhi.n	8003c52 <HAL_CRC_Calculate+0x86>
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d019      	beq.n	8003c36 <HAL_CRC_Calculate+0x6a>
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d01e      	beq.n	8003c44 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003c06:	e024      	b.n	8003c52 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e00a      	b.n	8003c24 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	441a      	add	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3301      	adds	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d3f0      	bcc.n	8003c0e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	613b      	str	r3, [r7, #16]
      break;
 8003c34:	e00e      	b.n	8003c54 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f812 	bl	8003c64 <CRC_Handle_8>
 8003c40:	6138      	str	r0, [r7, #16]
      break;
 8003c42:	e007      	b.n	8003c54 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f899 	bl	8003d80 <CRC_Handle_16>
 8003c4e:	6138      	str	r0, [r7, #16]
      break;
 8003c50:	e000      	b.n	8003c54 <HAL_CRC_Calculate+0x88>
      break;
 8003c52:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003c5a:	693b      	ldr	r3, [r7, #16]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	@ 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	e023      	b.n	8003cbe <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	3301      	adds	r3, #1
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	440b      	add	r3, r1
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003c90:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	3302      	adds	r3, #2
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	440b      	add	r3, r1
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003ca0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	3303      	adds	r3, #3
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	440b      	add	r3, r1
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003cb4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d3d6      	bcc.n	8003c76 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d04d      	beq.n	8003d6e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d116      	bne.n	8003d24 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	b21a      	sxth	r2, r3
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	3301      	adds	r3, #1
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	440b      	add	r3, r1
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b21b      	sxth	r3, r3
 8003d12:	4313      	orrs	r3, r2
 8003d14:	b21b      	sxth	r3, r3
 8003d16:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	8b7a      	ldrh	r2, [r7, #26]
 8003d22:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d11f      	bne.n	8003d6e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	3301      	adds	r3, #1
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	440b      	add	r3, r1
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	b21b      	sxth	r3, r3
 8003d4e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	8b7a      	ldrh	r2, [r7, #26]
 8003d5a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	3302      	adds	r3, #2
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3724      	adds	r7, #36	@ 0x24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e013      	b.n	8003dba <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	041a      	lsls	r2, r3, #16
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3302      	adds	r3, #2
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	440b      	add	r3, r1
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	4619      	mov	r1, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	3301      	adds	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d3e6      	bcc.n	8003d92 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	4413      	add	r3, r2
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003e04:	231f      	movs	r3, #31
 8003e06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
 8003e16:	e063      	b.n	8003ee0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003e18:	bf00      	nop
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1e5a      	subs	r2, r3, #1
 8003e1e:	613a      	str	r2, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d009      	beq.n	8003e38 <HAL_CRCEx_Polynomial_Set+0x44>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b18      	cmp	r3, #24
 8003e3c:	d846      	bhi.n	8003ecc <HAL_CRCEx_Polynomial_Set+0xd8>
 8003e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e44 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003ed3 	.word	0x08003ed3
 8003e48:	08003ecd 	.word	0x08003ecd
 8003e4c:	08003ecd 	.word	0x08003ecd
 8003e50:	08003ecd 	.word	0x08003ecd
 8003e54:	08003ecd 	.word	0x08003ecd
 8003e58:	08003ecd 	.word	0x08003ecd
 8003e5c:	08003ecd 	.word	0x08003ecd
 8003e60:	08003ecd 	.word	0x08003ecd
 8003e64:	08003ec1 	.word	0x08003ec1
 8003e68:	08003ecd 	.word	0x08003ecd
 8003e6c:	08003ecd 	.word	0x08003ecd
 8003e70:	08003ecd 	.word	0x08003ecd
 8003e74:	08003ecd 	.word	0x08003ecd
 8003e78:	08003ecd 	.word	0x08003ecd
 8003e7c:	08003ecd 	.word	0x08003ecd
 8003e80:	08003ecd 	.word	0x08003ecd
 8003e84:	08003eb5 	.word	0x08003eb5
 8003e88:	08003ecd 	.word	0x08003ecd
 8003e8c:	08003ecd 	.word	0x08003ecd
 8003e90:	08003ecd 	.word	0x08003ecd
 8003e94:	08003ecd 	.word	0x08003ecd
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003ecd 	.word	0x08003ecd
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	08003ea9 	.word	0x08003ea9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d913      	bls.n	8003ed6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003eb2:	e010      	b.n	8003ed6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b07      	cmp	r3, #7
 8003eb8:	d90f      	bls.n	8003eda <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ebe:	e00c      	b.n	8003eda <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d90b      	bls.n	8003ede <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003eca:	e008      	b.n	8003ede <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
        break;
 8003ed0:	e006      	b.n	8003ee0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e004      	b.n	8003ee0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ede:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10d      	bne.n	8003f02 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f023 0118 	bic.w	r1, r3, #24
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e014      	b.n	8003f4c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	791b      	ldrb	r3, [r3, #4]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fd f864 	bl	8001000 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	@ 0x28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_DAC_ConfigChannel+0x1c>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e19e      	b.n	80042b2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	795b      	ldrb	r3, [r3, #5]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_DAC_ConfigChannel+0x2c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e198      	b.n	80042b2 <HAL_DAC_ConfigChannel+0x35e>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d17a      	bne.n	800408a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003f94:	f7fe f8b0 	bl	80020f8 <HAL_GetTick>
 8003f98:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d13d      	bne.n	800401c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fa0:	e018      	b.n	8003fd4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003fa2:	f7fe f8a9 	bl	80020f8 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d911      	bls.n	8003fd4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f043 0208 	orr.w	r2, r3, #8
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e16e      	b.n	80042b2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1df      	bne.n	8003fa2 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fec:	e020      	b.n	8004030 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003fee:	f7fe f883 	bl	80020f8 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d90f      	bls.n	800401c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004002:	2b00      	cmp	r3, #0
 8004004:	da0a      	bge.n	800401c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f043 0208 	orr.w	r2, r3, #8
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2203      	movs	r2, #3
 8004016:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e14a      	b.n	80042b2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004022:	2b00      	cmp	r3, #0
 8004024:	dbe3      	blt.n	8003fee <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800402e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	ea02 0103 	and.w	r1, r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	409a      	lsls	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	21ff      	movs	r1, #255	@ 0xff
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	ea02 0103 	and.w	r1, r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	409a      	lsls	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d11d      	bne.n	80040ce <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	221f      	movs	r2, #31
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040aa:	4013      	ands	r3, r2
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c2:	4313      	orrs	r3, r2
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2207      	movs	r2, #7
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e6:	4013      	ands	r3, r2
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	623b      	str	r3, [r7, #32]
 80040f6:	e00f      	b.n	8004118 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d102      	bne.n	8004106 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004100:	2301      	movs	r3, #1
 8004102:	623b      	str	r3, [r7, #32]
 8004104:	e008      	b.n	8004118 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800410e:	2301      	movs	r3, #1
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	e001      	b.n	8004118 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004114:	2300      	movs	r3, #0
 8004116:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413a:	4013      	ands	r3, r2
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	791b      	ldrb	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d102      	bne.n	800414c <HAL_DAC_ConfigChannel+0x1f8>
 8004146:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800414a:	e000      	b.n	800414e <HAL_DAC_ConfigChannel+0x1fa>
 800414c:	2300      	movs	r3, #0
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004166:	4013      	ands	r3, r2
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	795b      	ldrb	r3, [r3, #5]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <HAL_DAC_ConfigChannel+0x224>
 8004172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004176:	e000      	b.n	800417a <HAL_DAC_ConfigChannel+0x226>
 8004178:	2300      	movs	r3, #0
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d114      	bne.n	80041ba <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004190:	f001 fc40 	bl	8005a14 <HAL_RCC_GetHCLKFreq>
 8004194:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4a48      	ldr	r2, [pc, #288]	@ (80042bc <HAL_DAC_ConfigChannel+0x368>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d904      	bls.n	80041a8 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a6:	e00f      	b.n	80041c8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4a45      	ldr	r2, [pc, #276]	@ (80042c0 <HAL_DAC_ConfigChannel+0x36c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d90a      	bls.n	80041c6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b8:	e006      	b.n	80041c8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c0:	4313      	orrs	r3, r2
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c4:	e000      	b.n	80041c8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80041c6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d6:	4313      	orrs	r3, r2
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	400a      	ands	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421a:	4013      	ands	r3, r2
 800421c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004232:	4313      	orrs	r3, r2
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	22c0      	movs	r2, #192	@ 0xc0
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43da      	mvns	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	400a      	ands	r2, r1
 8004258:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8004288:	fa01 f303 	lsl.w	r3, r1, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	ea02 0103 	and.w	r1, r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	409a      	lsls	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80042b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3728      	adds	r7, #40	@ 0x28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	09896800 	.word	0x09896800
 80042c0:	04c4b400 	.word	0x04c4b400

080042c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e08d      	b.n	80043f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	4b47      	ldr	r3, [pc, #284]	@ (80043fc <HAL_DMA_Init+0x138>)
 80042de:	429a      	cmp	r2, r3
 80042e0:	d80f      	bhi.n	8004302 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b45      	ldr	r3, [pc, #276]	@ (8004400 <HAL_DMA_Init+0x13c>)
 80042ea:	4413      	add	r3, r2
 80042ec:	4a45      	ldr	r2, [pc, #276]	@ (8004404 <HAL_DMA_Init+0x140>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	009a      	lsls	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a42      	ldr	r2, [pc, #264]	@ (8004408 <HAL_DMA_Init+0x144>)
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004300:	e00e      	b.n	8004320 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	4b40      	ldr	r3, [pc, #256]	@ (800440c <HAL_DMA_Init+0x148>)
 800430a:	4413      	add	r3, r2
 800430c:	4a3d      	ldr	r2, [pc, #244]	@ (8004404 <HAL_DMA_Init+0x140>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	091b      	lsrs	r3, r3, #4
 8004314:	009a      	lsls	r2, r3, #2
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a3c      	ldr	r2, [pc, #240]	@ (8004410 <HAL_DMA_Init+0x14c>)
 800431e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800435c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fa76 	bl	8004864 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004380:	d102      	bne.n	8004388 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800439c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d010      	beq.n	80043c8 <HAL_DMA_Init+0x104>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d80c      	bhi.n	80043c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa96 	bl	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	e008      	b.n	80043da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40020407 	.word	0x40020407
 8004400:	bffdfff8 	.word	0xbffdfff8
 8004404:	cccccccd 	.word	0xcccccccd
 8004408:	40020000 	.word	0x40020000
 800440c:	bffdfbf8 	.word	0xbffdfbf8
 8004410:	40020400 	.word	0x40020400

08004414 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_DMA_Start_IT+0x20>
 8004430:	2302      	movs	r3, #2
 8004432:	e066      	b.n	8004502 <HAL_DMA_Start_IT+0xee>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d155      	bne.n	80044f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f9bb 	bl	80047e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 020e 	orr.w	r2, r2, #14
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e00f      	b.n	80044ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0204 	bic.w	r2, r2, #4
 800449a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 020a 	orr.w	r2, r2, #10
 80044aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e005      	b.n	8004500 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
 80044fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004500:	7dfb      	ldrb	r3, [r7, #23]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d005      	beq.n	800452e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2204      	movs	r2, #4
 8004526:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e037      	b.n	800459e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 020e 	bic.w	r2, r2, #14
 800453c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800454c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004562:	f003 021f 	and.w	r2, r3, #31
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	2101      	movs	r1, #1
 800456c:	fa01 f202 	lsl.w	r2, r1, r2
 8004570:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800457a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00c      	beq.n	800459e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004592:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800459c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d00d      	beq.n	80045f0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2204      	movs	r2, #4
 80045d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e047      	b.n	8004680 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 020e 	bic.w	r2, r2, #14
 80045fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800461e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	2101      	movs	r1, #1
 800462e:	fa01 f202 	lsl.w	r2, r1, r2
 8004632:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800463c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004654:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800465e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	4798      	blx	r3
    }
  }
  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	2204      	movs	r2, #4
 80046ac:	409a      	lsls	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d026      	beq.n	8004704 <HAL_DMA_IRQHandler+0x7a>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d021      	beq.n	8004704 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d107      	bne.n	80046de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0204 	bic.w	r2, r2, #4
 80046dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	f003 021f 	and.w	r2, r3, #31
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	2104      	movs	r1, #4
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d071      	beq.n	80047de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004702:	e06c      	b.n	80047de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2202      	movs	r2, #2
 800470e:	409a      	lsls	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02e      	beq.n	8004776 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d029      	beq.n	8004776 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 020a 	bic.w	r2, r2, #10
 800473e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474c:	f003 021f 	and.w	r2, r3, #31
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	2102      	movs	r1, #2
 8004756:	fa01 f202 	lsl.w	r2, r1, r2
 800475a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d038      	beq.n	80047de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004774:	e033      	b.n	80047de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2208      	movs	r2, #8
 8004780:	409a      	lsls	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d02a      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d025      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 020e 	bic.w	r2, r2, #14
 80047a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a8:	f003 021f 	and.w	r2, r3, #31
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	2101      	movs	r1, #1
 80047b2:	fa01 f202 	lsl.w	r2, r1, r2
 80047b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
}
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004810:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004816:	f003 021f 	and.w	r2, r3, #31
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f202 	lsl.w	r2, r1, r2
 8004824:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b10      	cmp	r3, #16
 8004834:	d108      	bne.n	8004848 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004846:	e007      	b.n	8004858 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	4b16      	ldr	r3, [pc, #88]	@ (80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004874:	429a      	cmp	r2, r3
 8004876:	d802      	bhi.n	800487e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004878:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e001      	b.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800487e:	4b15      	ldr	r3, [pc, #84]	@ (80048d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004880:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3b08      	subs	r3, #8
 800488e:	4a12      	ldr	r2, [pc, #72]	@ (80048d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	009a      	lsls	r2, r3, #2
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a0b      	ldr	r2, [pc, #44]	@ (80048dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2201      	movs	r2, #1
 80048b8:	409a      	lsls	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40020407 	.word	0x40020407
 80048d0:	40020800 	.word	0x40020800
 80048d4:	40020820 	.word	0x40020820
 80048d8:	cccccccd 	.word	0xcccccccd
 80048dc:	40020880 	.word	0x40020880

080048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	461a      	mov	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a08      	ldr	r2, [pc, #32]	@ (8004924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004902:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3b01      	subs	r3, #1
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2201      	movs	r2, #1
 800490e:	409a      	lsls	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	1000823f 	.word	0x1000823f
 8004924:	40020940 	.word	0x40020940

08004928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004936:	e15a      	b.n	8004bee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	4013      	ands	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 814c 	beq.w	8004be8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d005      	beq.n	8004968 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004964:	2b02      	cmp	r3, #2
 8004966:	d130      	bne.n	80049ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	2203      	movs	r2, #3
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800499e:	2201      	movs	r2, #1
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	f003 0201 	and.w	r2, r3, #1
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d017      	beq.n	8004a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2203      	movs	r2, #3
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4013      	ands	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d123      	bne.n	8004a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	08da      	lsrs	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3208      	adds	r2, #8
 8004a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	220f      	movs	r2, #15
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	08da      	lsrs	r2, r3, #3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3208      	adds	r2, #8
 8004a54:	6939      	ldr	r1, [r7, #16]
 8004a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	2203      	movs	r2, #3
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 0203 	and.w	r2, r3, #3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80a6 	beq.w	8004be8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8004c0c <HAL_GPIO_Init+0x2e4>)
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8004c0c <HAL_GPIO_Init+0x2e4>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004aa8:	4b58      	ldr	r3, [pc, #352]	@ (8004c0c <HAL_GPIO_Init+0x2e4>)
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ab4:	4a56      	ldr	r2, [pc, #344]	@ (8004c10 <HAL_GPIO_Init+0x2e8>)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	089b      	lsrs	r3, r3, #2
 8004aba:	3302      	adds	r3, #2
 8004abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	220f      	movs	r2, #15
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ade:	d01f      	beq.n	8004b20 <HAL_GPIO_Init+0x1f8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a4c      	ldr	r2, [pc, #304]	@ (8004c14 <HAL_GPIO_Init+0x2ec>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d019      	beq.n	8004b1c <HAL_GPIO_Init+0x1f4>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a4b      	ldr	r2, [pc, #300]	@ (8004c18 <HAL_GPIO_Init+0x2f0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <HAL_GPIO_Init+0x1f0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a4a      	ldr	r2, [pc, #296]	@ (8004c1c <HAL_GPIO_Init+0x2f4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00d      	beq.n	8004b14 <HAL_GPIO_Init+0x1ec>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a49      	ldr	r2, [pc, #292]	@ (8004c20 <HAL_GPIO_Init+0x2f8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <HAL_GPIO_Init+0x1e8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a48      	ldr	r2, [pc, #288]	@ (8004c24 <HAL_GPIO_Init+0x2fc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d101      	bne.n	8004b0c <HAL_GPIO_Init+0x1e4>
 8004b08:	2305      	movs	r3, #5
 8004b0a:	e00a      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b0c:	2306      	movs	r3, #6
 8004b0e:	e008      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b10:	2304      	movs	r3, #4
 8004b12:	e006      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b14:	2303      	movs	r3, #3
 8004b16:	e004      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e002      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b20:	2300      	movs	r3, #0
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	f002 0203 	and.w	r2, r2, #3
 8004b28:	0092      	lsls	r2, r2, #2
 8004b2a:	4093      	lsls	r3, r2
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b32:	4937      	ldr	r1, [pc, #220]	@ (8004c10 <HAL_GPIO_Init+0x2e8>)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	3302      	adds	r3, #2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b40:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <HAL_GPIO_Init+0x300>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b64:	4a30      	ldr	r2, [pc, #192]	@ (8004c28 <HAL_GPIO_Init+0x300>)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c28 <HAL_GPIO_Init+0x300>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4013      	ands	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b8e:	4a26      	ldr	r2, [pc, #152]	@ (8004c28 <HAL_GPIO_Init+0x300>)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004b94:	4b24      	ldr	r3, [pc, #144]	@ (8004c28 <HAL_GPIO_Init+0x300>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c28 <HAL_GPIO_Init+0x300>)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004c28 <HAL_GPIO_Init+0x300>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004be2:	4a11      	ldr	r2, [pc, #68]	@ (8004c28 <HAL_GPIO_Init+0x300>)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	3301      	adds	r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f47f ae9d 	bne.w	8004938 <HAL_GPIO_Init+0x10>
  }
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40010000 	.word	0x40010000
 8004c14:	48000400 	.word	0x48000400
 8004c18:	48000800 	.word	0x48000800
 8004c1c:	48000c00 	.word	0x48000c00
 8004c20:	48001000 	.word	0x48001000
 8004c24:	48001400 	.word	0x48001400
 8004c28:	40010400 	.word	0x40010400

08004c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	807b      	strh	r3, [r7, #2]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c3c:	787b      	ldrb	r3, [r7, #1]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c42:	887a      	ldrh	r2, [r7, #2]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c48:	e002      	b.n	8004c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c4a:	887a      	ldrh	r2, [r7, #2]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e08d      	b.n	8004d8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fc f9dc 	bl	8001040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	@ 0x24
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d107      	bne.n	8004cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	e006      	b.n	8004ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d108      	bne.n	8004cfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfa:	605a      	str	r2, [r3, #4]
 8004cfc:	e007      	b.n	8004d0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69d9      	ldr	r1, [r3, #28]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1a      	ldr	r2, [r3, #32]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d138      	bne.n	8004e1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e032      	b.n	8004e1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2224      	movs	r2, #36	@ 0x24
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004de4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e000      	b.n	8004e1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e1a:	2302      	movs	r3, #2
  }
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d139      	bne.n	8004eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e033      	b.n	8004eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	@ 0x24
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
  }
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d141      	bne.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ece:	4b4b      	ldr	r3, [pc, #300]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eda:	d131      	bne.n	8004f40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004edc:	4b47      	ldr	r3, [pc, #284]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee2:	4a46      	ldr	r2, [pc, #280]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ee8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eec:	4b43      	ldr	r3, [pc, #268]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ef4:	4a41      	ldr	r2, [pc, #260]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004efa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004efc:	4b40      	ldr	r3, [pc, #256]	@ (8005000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2232      	movs	r2, #50	@ 0x32
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	4a3f      	ldr	r2, [pc, #252]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	0c9b      	lsrs	r3, r3, #18
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f12:	e002      	b.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f1a:	4b38      	ldr	r3, [pc, #224]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f26:	d102      	bne.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f2      	bne.n	8004f14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f2e:	4b33      	ldr	r3, [pc, #204]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f3a:	d158      	bne.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e057      	b.n	8004ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f40:	4b2e      	ldr	r3, [pc, #184]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f46:	4a2d      	ldr	r2, [pc, #180]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f50:	e04d      	b.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f58:	d141      	bne.n	8004fde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f5a:	4b28      	ldr	r3, [pc, #160]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f66:	d131      	bne.n	8004fcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f68:	4b24      	ldr	r3, [pc, #144]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f6e:	4a23      	ldr	r2, [pc, #140]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f78:	4b20      	ldr	r3, [pc, #128]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f80:	4a1e      	ldr	r2, [pc, #120]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f88:	4b1d      	ldr	r3, [pc, #116]	@ (8005000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2232      	movs	r2, #50	@ 0x32
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	4a1c      	ldr	r2, [pc, #112]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	0c9b      	lsrs	r3, r3, #18
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f9e:	e002      	b.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fa6:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb2:	d102      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f2      	bne.n	8004fa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fba:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc6:	d112      	bne.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e011      	b.n	8004ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fdc:	e007      	b.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fde:	4b07      	ldr	r3, [pc, #28]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fe6:	4a05      	ldr	r2, [pc, #20]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40007000 	.word	0x40007000
 8005000:	20000000 	.word	0x20000000
 8005004:	431bde83 	.word	0x431bde83

08005008 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800500c:	4b05      	ldr	r3, [pc, #20]	@ (8005024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a04      	ldr	r2, [pc, #16]	@ (8005024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005016:	6093      	str	r3, [r2, #8]
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40007000 	.word	0x40007000

08005028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e2fe      	b.n	8005638 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d075      	beq.n	8005132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005046:	4b97      	ldr	r3, [pc, #604]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005050:	4b94      	ldr	r3, [pc, #592]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b0c      	cmp	r3, #12
 800505e:	d102      	bne.n	8005066 <HAL_RCC_OscConfig+0x3e>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b03      	cmp	r3, #3
 8005064:	d002      	beq.n	800506c <HAL_RCC_OscConfig+0x44>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d10b      	bne.n	8005084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506c:	4b8d      	ldr	r3, [pc, #564]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d05b      	beq.n	8005130 <HAL_RCC_OscConfig+0x108>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d157      	bne.n	8005130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e2d9      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508c:	d106      	bne.n	800509c <HAL_RCC_OscConfig+0x74>
 800508e:	4b85      	ldr	r3, [pc, #532]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a84      	ldr	r2, [pc, #528]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e01d      	b.n	80050d8 <HAL_RCC_OscConfig+0xb0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCC_OscConfig+0x98>
 80050a6:	4b7f      	ldr	r3, [pc, #508]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a7e      	ldr	r2, [pc, #504]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80050ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4b7c      	ldr	r3, [pc, #496]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7b      	ldr	r2, [pc, #492]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80050b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	e00b      	b.n	80050d8 <HAL_RCC_OscConfig+0xb0>
 80050c0:	4b78      	ldr	r3, [pc, #480]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a77      	ldr	r2, [pc, #476]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80050c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b75      	ldr	r3, [pc, #468]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a74      	ldr	r2, [pc, #464]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80050d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d013      	beq.n	8005108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fd f80a 	bl	80020f8 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fd f806 	bl	80020f8 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	@ 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e29e      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050fa:	4b6a      	ldr	r3, [pc, #424]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0xc0>
 8005106:	e014      	b.n	8005132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fc fff6 	bl	80020f8 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005110:	f7fc fff2 	bl	80020f8 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	@ 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e28a      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005122:	4b60      	ldr	r3, [pc, #384]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0xe8>
 800512e:	e000      	b.n	8005132 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d075      	beq.n	800522a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513e:	4b59      	ldr	r3, [pc, #356]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005148:	4b56      	ldr	r3, [pc, #344]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	2b0c      	cmp	r3, #12
 8005156:	d102      	bne.n	800515e <HAL_RCC_OscConfig+0x136>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d002      	beq.n	8005164 <HAL_RCC_OscConfig+0x13c>
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b04      	cmp	r3, #4
 8005162:	d11f      	bne.n	80051a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005164:	4b4f      	ldr	r3, [pc, #316]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_RCC_OscConfig+0x154>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e25d      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517c:	4b49      	ldr	r3, [pc, #292]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	061b      	lsls	r3, r3, #24
 800518a:	4946      	ldr	r1, [pc, #280]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 800518c:	4313      	orrs	r3, r2
 800518e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005190:	4b45      	ldr	r3, [pc, #276]	@ (80052a8 <HAL_RCC_OscConfig+0x280>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7fc ff63 	bl	8002060 <HAL_InitTick>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d043      	beq.n	8005228 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e249      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d023      	beq.n	80051f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ac:	4b3d      	ldr	r3, [pc, #244]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3c      	ldr	r2, [pc, #240]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80051b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fc ff9e 	bl	80020f8 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c0:	f7fc ff9a 	bl	80020f8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e232      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d2:	4b34      	ldr	r3, [pc, #208]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051de:	4b31      	ldr	r3, [pc, #196]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	492d      	ldr	r1, [pc, #180]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
 80051f2:	e01a      	b.n	800522a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051f4:	4b2b      	ldr	r3, [pc, #172]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2a      	ldr	r2, [pc, #168]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 80051fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fc ff7a 	bl	80020f8 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005208:	f7fc ff76 	bl	80020f8 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e20e      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800521a:	4b22      	ldr	r3, [pc, #136]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0x1e0>
 8005226:	e000      	b.n	800522a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005228:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d041      	beq.n	80052ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01c      	beq.n	8005278 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800523e:	4b19      	ldr	r3, [pc, #100]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005244:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524e:	f7fc ff53 	bl	80020f8 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005256:	f7fc ff4f 	bl	80020f8 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e1e7      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005268:	4b0e      	ldr	r3, [pc, #56]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 800526a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ef      	beq.n	8005256 <HAL_RCC_OscConfig+0x22e>
 8005276:	e020      	b.n	80052ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005278:	4b0a      	ldr	r3, [pc, #40]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527e:	4a09      	ldr	r2, [pc, #36]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005288:	f7fc ff36 	bl	80020f8 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800528e:	e00d      	b.n	80052ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005290:	f7fc ff32 	bl	80020f8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d906      	bls.n	80052ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e1ca      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052ac:	4b8c      	ldr	r3, [pc, #560]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80052ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1ea      	bne.n	8005290 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80a6 	beq.w	8005414 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c8:	2300      	movs	r3, #0
 80052ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052cc:	4b84      	ldr	r3, [pc, #528]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80052ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_OscConfig+0x2b4>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <HAL_RCC_OscConfig+0x2b6>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00d      	beq.n	80052fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e2:	4b7f      	ldr	r3, [pc, #508]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	4a7e      	ldr	r2, [pc, #504]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80052e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ee:	4b7c      	ldr	r3, [pc, #496]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052fa:	2301      	movs	r3, #1
 80052fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052fe:	4b79      	ldr	r3, [pc, #484]	@ (80054e4 <HAL_RCC_OscConfig+0x4bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d118      	bne.n	800533c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800530a:	4b76      	ldr	r3, [pc, #472]	@ (80054e4 <HAL_RCC_OscConfig+0x4bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a75      	ldr	r2, [pc, #468]	@ (80054e4 <HAL_RCC_OscConfig+0x4bc>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005316:	f7fc feef 	bl	80020f8 <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531e:	f7fc feeb 	bl	80020f8 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e183      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005330:	4b6c      	ldr	r3, [pc, #432]	@ (80054e4 <HAL_RCC_OscConfig+0x4bc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d108      	bne.n	8005356 <HAL_RCC_OscConfig+0x32e>
 8005344:	4b66      	ldr	r3, [pc, #408]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534a:	4a65      	ldr	r2, [pc, #404]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005354:	e024      	b.n	80053a0 <HAL_RCC_OscConfig+0x378>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b05      	cmp	r3, #5
 800535c:	d110      	bne.n	8005380 <HAL_RCC_OscConfig+0x358>
 800535e:	4b60      	ldr	r3, [pc, #384]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005364:	4a5e      	ldr	r2, [pc, #376]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005366:	f043 0304 	orr.w	r3, r3, #4
 800536a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800536e:	4b5c      	ldr	r3, [pc, #368]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005374:	4a5a      	ldr	r2, [pc, #360]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800537e:	e00f      	b.n	80053a0 <HAL_RCC_OscConfig+0x378>
 8005380:	4b57      	ldr	r3, [pc, #348]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005386:	4a56      	ldr	r2, [pc, #344]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005390:	4b53      	ldr	r3, [pc, #332]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005396:	4a52      	ldr	r2, [pc, #328]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005398:	f023 0304 	bic.w	r3, r3, #4
 800539c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d016      	beq.n	80053d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7fc fea6 	bl	80020f8 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ae:	e00a      	b.n	80053c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b0:	f7fc fea2 	bl	80020f8 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e138      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c6:	4b46      	ldr	r3, [pc, #280]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ed      	beq.n	80053b0 <HAL_RCC_OscConfig+0x388>
 80053d4:	e015      	b.n	8005402 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d6:	f7fc fe8f 	bl	80020f8 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fc fe8b 	bl	80020f8 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e121      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053f4:	4b3a      	ldr	r3, [pc, #232]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1ed      	bne.n	80053de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005402:	7ffb      	ldrb	r3, [r7, #31]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d105      	bne.n	8005414 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005408:	4b35      	ldr	r3, [pc, #212]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 800540a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540c:	4a34      	ldr	r2, [pc, #208]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 800540e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005412:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d03c      	beq.n	800549a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01c      	beq.n	8005462 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005428:	4b2d      	ldr	r3, [pc, #180]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 800542a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800542e:	4a2c      	ldr	r2, [pc, #176]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005438:	f7fc fe5e 	bl	80020f8 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005440:	f7fc fe5a 	bl	80020f8 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e0f2      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005452:	4b23      	ldr	r3, [pc, #140]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005454:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0ef      	beq.n	8005440 <HAL_RCC_OscConfig+0x418>
 8005460:	e01b      	b.n	800549a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005462:	4b1f      	ldr	r3, [pc, #124]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 8005464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005468:	4a1d      	ldr	r2, [pc, #116]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005472:	f7fc fe41 	bl	80020f8 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800547a:	f7fc fe3d 	bl	80020f8 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e0d5      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800548c:	4b14      	ldr	r3, [pc, #80]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 800548e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1ef      	bne.n	800547a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80c9 	beq.w	8005636 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054a4:	4b0e      	ldr	r3, [pc, #56]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 030c 	and.w	r3, r3, #12
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	f000 8083 	beq.w	80055b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d15e      	bne.n	8005578 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ba:	4b09      	ldr	r3, [pc, #36]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a08      	ldr	r2, [pc, #32]	@ (80054e0 <HAL_RCC_OscConfig+0x4b8>)
 80054c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fc fe17 	bl	80020f8 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054cc:	e00c      	b.n	80054e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ce:	f7fc fe13 	bl	80020f8 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d905      	bls.n	80054e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e0ab      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054e8:	4b55      	ldr	r3, [pc, #340]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1ec      	bne.n	80054ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054f4:	4b52      	ldr	r3, [pc, #328]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	4b52      	ldr	r3, [pc, #328]	@ (8005644 <HAL_RCC_OscConfig+0x61c>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6a11      	ldr	r1, [r2, #32]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005504:	3a01      	subs	r2, #1
 8005506:	0112      	lsls	r2, r2, #4
 8005508:	4311      	orrs	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800550e:	0212      	lsls	r2, r2, #8
 8005510:	4311      	orrs	r1, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005516:	0852      	lsrs	r2, r2, #1
 8005518:	3a01      	subs	r2, #1
 800551a:	0552      	lsls	r2, r2, #21
 800551c:	4311      	orrs	r1, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005522:	0852      	lsrs	r2, r2, #1
 8005524:	3a01      	subs	r2, #1
 8005526:	0652      	lsls	r2, r2, #25
 8005528:	4311      	orrs	r1, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800552e:	06d2      	lsls	r2, r2, #27
 8005530:	430a      	orrs	r2, r1
 8005532:	4943      	ldr	r1, [pc, #268]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 8005534:	4313      	orrs	r3, r2
 8005536:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005538:	4b41      	ldr	r3, [pc, #260]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a40      	ldr	r2, [pc, #256]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 800553e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005542:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005544:	4b3e      	ldr	r3, [pc, #248]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4a3d      	ldr	r2, [pc, #244]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 800554a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800554e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fc fdd2 	bl	80020f8 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005558:	f7fc fdce 	bl	80020f8 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e066      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800556a:	4b35      	ldr	r3, [pc, #212]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f0      	beq.n	8005558 <HAL_RCC_OscConfig+0x530>
 8005576:	e05e      	b.n	8005636 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005578:	4b31      	ldr	r3, [pc, #196]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a30      	ldr	r2, [pc, #192]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 800557e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fc fdb8 	bl	80020f8 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558c:	f7fc fdb4 	bl	80020f8 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e04c      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800559e:	4b28      	ldr	r3, [pc, #160]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055aa:	4b25      	ldr	r3, [pc, #148]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	4924      	ldr	r1, [pc, #144]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 80055b0:	4b25      	ldr	r3, [pc, #148]	@ (8005648 <HAL_RCC_OscConfig+0x620>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	60cb      	str	r3, [r1, #12]
 80055b6:	e03e      	b.n	8005636 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e039      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005640 <HAL_RCC_OscConfig+0x618>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0203 	and.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d12c      	bne.n	8005632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	3b01      	subs	r3, #1
 80055e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d123      	bne.n	8005632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d11b      	bne.n	8005632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d113      	bne.n	8005632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	3b01      	subs	r3, #1
 8005618:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800561a:	429a      	cmp	r2, r3
 800561c:	d109      	bne.n	8005632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	3b01      	subs	r3, #1
 800562c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40021000 	.word	0x40021000
 8005644:	019f800c 	.word	0x019f800c
 8005648:	feeefffc 	.word	0xfeeefffc

0800564c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e11e      	b.n	80058a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005664:	4b91      	ldr	r3, [pc, #580]	@ (80058ac <HAL_RCC_ClockConfig+0x260>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d910      	bls.n	8005694 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b8e      	ldr	r3, [pc, #568]	@ (80058ac <HAL_RCC_ClockConfig+0x260>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 020f 	bic.w	r2, r3, #15
 800567a:	498c      	ldr	r1, [pc, #560]	@ (80058ac <HAL_RCC_ClockConfig+0x260>)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	4313      	orrs	r3, r2
 8005680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005682:	4b8a      	ldr	r3, [pc, #552]	@ (80058ac <HAL_RCC_ClockConfig+0x260>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d001      	beq.n	8005694 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e106      	b.n	80058a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d073      	beq.n	8005788 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d129      	bne.n	80056fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a8:	4b81      	ldr	r3, [pc, #516]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0f4      	b.n	80058a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056b8:	f000 f9e4 	bl	8005a84 <RCC_GetSysClockFreqFromPLLSource>
 80056bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4a7c      	ldr	r2, [pc, #496]	@ (80058b4 <HAL_RCC_ClockConfig+0x268>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d93f      	bls.n	8005746 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056c6:	4b7a      	ldr	r3, [pc, #488]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d033      	beq.n	8005746 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d12f      	bne.n	8005746 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056e6:	4b72      	ldr	r3, [pc, #456]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ee:	4a70      	ldr	r2, [pc, #448]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80056f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056f6:	2380      	movs	r3, #128	@ 0x80
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e024      	b.n	8005746 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d107      	bne.n	8005714 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005704:	4b6a      	ldr	r3, [pc, #424]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d109      	bne.n	8005724 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0c6      	b.n	80058a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005714:	4b66      	ldr	r3, [pc, #408]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0be      	b.n	80058a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005724:	f000 f914 	bl	8005950 <HAL_RCC_GetSysClockFreq>
 8005728:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4a61      	ldr	r2, [pc, #388]	@ (80058b4 <HAL_RCC_ClockConfig+0x268>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d909      	bls.n	8005746 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005732:	4b5f      	ldr	r3, [pc, #380]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800573a:	4a5d      	ldr	r2, [pc, #372]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 800573c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005740:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005742:	2380      	movs	r3, #128	@ 0x80
 8005744:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005746:	4b5a      	ldr	r3, [pc, #360]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f023 0203 	bic.w	r2, r3, #3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	4957      	ldr	r1, [pc, #348]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005754:	4313      	orrs	r3, r2
 8005756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005758:	f7fc fcce 	bl	80020f8 <HAL_GetTick>
 800575c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575e:	e00a      	b.n	8005776 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005760:	f7fc fcca 	bl	80020f8 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e095      	b.n	80058a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005776:	4b4e      	ldr	r3, [pc, #312]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 020c 	and.w	r2, r3, #12
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	429a      	cmp	r2, r3
 8005786:	d1eb      	bne.n	8005760 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d023      	beq.n	80057dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a0:	4b43      	ldr	r3, [pc, #268]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a42      	ldr	r2, [pc, #264]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80057a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057b8:	4b3d      	ldr	r3, [pc, #244]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057c0:	4a3b      	ldr	r2, [pc, #236]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80057c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c8:	4b39      	ldr	r3, [pc, #228]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	4936      	ldr	r1, [pc, #216]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
 80057da:	e008      	b.n	80057ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2b80      	cmp	r3, #128	@ 0x80
 80057e0:	d105      	bne.n	80057ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057e2:	4b33      	ldr	r3, [pc, #204]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	4a32      	ldr	r2, [pc, #200]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 80057e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ee:	4b2f      	ldr	r3, [pc, #188]	@ (80058ac <HAL_RCC_ClockConfig+0x260>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d21d      	bcs.n	8005838 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fc:	4b2b      	ldr	r3, [pc, #172]	@ (80058ac <HAL_RCC_ClockConfig+0x260>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 020f 	bic.w	r2, r3, #15
 8005804:	4929      	ldr	r1, [pc, #164]	@ (80058ac <HAL_RCC_ClockConfig+0x260>)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	4313      	orrs	r3, r2
 800580a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800580c:	f7fc fc74 	bl	80020f8 <HAL_GetTick>
 8005810:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005812:	e00a      	b.n	800582a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005814:	f7fc fc70 	bl	80020f8 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e03b      	b.n	80058a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b20      	ldr	r3, [pc, #128]	@ (80058ac <HAL_RCC_ClockConfig+0x260>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d1ed      	bne.n	8005814 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005844:	4b1a      	ldr	r3, [pc, #104]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	4917      	ldr	r1, [pc, #92]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005862:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	490f      	ldr	r1, [pc, #60]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 8005872:	4313      	orrs	r3, r2
 8005874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005876:	f000 f86b 	bl	8005950 <HAL_RCC_GetSysClockFreq>
 800587a:	4602      	mov	r2, r0
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <HAL_RCC_ClockConfig+0x264>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	490c      	ldr	r1, [pc, #48]	@ (80058b8 <HAL_RCC_ClockConfig+0x26c>)
 8005888:	5ccb      	ldrb	r3, [r1, r3]
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	4a0a      	ldr	r2, [pc, #40]	@ (80058bc <HAL_RCC_ClockConfig+0x270>)
 8005894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005896:	4b0a      	ldr	r3, [pc, #40]	@ (80058c0 <HAL_RCC_ClockConfig+0x274>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fc fbe0 	bl	8002060 <HAL_InitTick>
 80058a0:	4603      	mov	r3, r0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40022000 	.word	0x40022000
 80058b0:	40021000 	.word	0x40021000
 80058b4:	04c4b400 	.word	0x04c4b400
 80058b8:	08008a50 	.word	0x08008a50
 80058bc:	20000000 	.word	0x20000000
 80058c0:	2000000c 	.word	0x2000000c

080058c4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08c      	sub	sp, #48	@ 0x30
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80058d0:	2302      	movs	r3, #2
 80058d2:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d4:	2303      	movs	r3, #3
 80058d6:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	0c1b      	lsrs	r3, r3, #16
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 80058f0:	029b      	lsls	r3, r3, #10
 80058f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	0c1b      	lsrs	r3, r3, #16
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80058fe:	4b13      	ldr	r3, [pc, #76]	@ (800594c <HAL_RCC_MCOConfig+0x88>)
 8005900:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005902:	2101      	movs	r1, #1
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	fa01 f303 	lsl.w	r3, r1, r3
 800590a:	4910      	ldr	r1, [pc, #64]	@ (800594c <HAL_RCC_MCOConfig+0x88>)
 800590c:	4313      	orrs	r3, r2
 800590e:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	b29b      	uxth	r3, r3
 8005914:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	0d1b      	lsrs	r3, r3, #20
 800591a:	b2db      	uxtb	r3, r3
 800591c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800591e:	f107 0310 	add.w	r3, r7, #16
 8005922:	4619      	mov	r1, r3
 8005924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005926:	f7fe ffff 	bl	8004928 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800592a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d109      	bne.n	8005944 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8005930:	4b06      	ldr	r3, [pc, #24]	@ (800594c <HAL_RCC_MCOConfig+0x88>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	430b      	orrs	r3, r1
 800593e:	4903      	ldr	r1, [pc, #12]	@ (800594c <HAL_RCC_MCOConfig+0x88>)
 8005940:	4313      	orrs	r3, r2
 8005942:	608b      	str	r3, [r1, #8]
  }
}
 8005944:	bf00      	nop
 8005946:	3730      	adds	r7, #48	@ 0x30
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40021000 	.word	0x40021000

08005950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005956:	4b2c      	ldr	r3, [pc, #176]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	2b04      	cmp	r3, #4
 8005960:	d102      	bne.n	8005968 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005962:	4b2a      	ldr	r3, [pc, #168]	@ (8005a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	e047      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005968:	4b27      	ldr	r3, [pc, #156]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 030c 	and.w	r3, r3, #12
 8005970:	2b08      	cmp	r3, #8
 8005972:	d102      	bne.n	800597a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005974:	4b26      	ldr	r3, [pc, #152]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	e03e      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800597a:	4b23      	ldr	r3, [pc, #140]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 030c 	and.w	r3, r3, #12
 8005982:	2b0c      	cmp	r3, #12
 8005984:	d136      	bne.n	80059f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005986:	4b20      	ldr	r3, [pc, #128]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005990:	4b1d      	ldr	r3, [pc, #116]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	091b      	lsrs	r3, r3, #4
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	3301      	adds	r3, #1
 800599c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d10c      	bne.n	80059be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ac:	4a16      	ldr	r2, [pc, #88]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ae:	68d2      	ldr	r2, [r2, #12]
 80059b0:	0a12      	lsrs	r2, r2, #8
 80059b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	617b      	str	r3, [r7, #20]
      break;
 80059bc:	e00c      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059be:	4a13      	ldr	r2, [pc, #76]	@ (8005a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c6:	4a10      	ldr	r2, [pc, #64]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c8:	68d2      	ldr	r2, [r2, #12]
 80059ca:	0a12      	lsrs	r2, r2, #8
 80059cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059d0:	fb02 f303 	mul.w	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]
      break;
 80059d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	0e5b      	lsrs	r3, r3, #25
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	3301      	adds	r3, #1
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	e001      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80059f8:	693b      	ldr	r3, [r7, #16]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	00f42400 	.word	0x00f42400
 8005a10:	017d7840 	.word	0x017d7840

08005a14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a18:	4b03      	ldr	r3, [pc, #12]	@ (8005a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000000 	.word	0x20000000

08005a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a30:	f7ff fff0 	bl	8005a14 <HAL_RCC_GetHCLKFreq>
 8005a34:	4602      	mov	r2, r0
 8005a36:	4b06      	ldr	r3, [pc, #24]	@ (8005a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	4904      	ldr	r1, [pc, #16]	@ (8005a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a42:	5ccb      	ldrb	r3, [r1, r3]
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40021000 	.word	0x40021000
 8005a54:	08008a60 	.word	0x08008a60

08005a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a5c:	f7ff ffda 	bl	8005a14 <HAL_RCC_GetHCLKFreq>
 8005a60:	4602      	mov	r2, r0
 8005a62:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	0adb      	lsrs	r3, r3, #11
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	4904      	ldr	r1, [pc, #16]	@ (8005a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a6e:	5ccb      	ldrb	r3, [r1, r3]
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	08008a60 	.word	0x08008a60

08005a84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a94:	4b1b      	ldr	r3, [pc, #108]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	091b      	lsrs	r3, r3, #4
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d10c      	bne.n	8005ac2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aa8:	4a17      	ldr	r2, [pc, #92]	@ (8005b08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	4a14      	ldr	r2, [pc, #80]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ab2:	68d2      	ldr	r2, [r2, #12]
 8005ab4:	0a12      	lsrs	r2, r2, #8
 8005ab6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	617b      	str	r3, [r7, #20]
    break;
 8005ac0:	e00c      	b.n	8005adc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ac2:	4a12      	ldr	r2, [pc, #72]	@ (8005b0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	4a0e      	ldr	r2, [pc, #56]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005acc:	68d2      	ldr	r2, [r2, #12]
 8005ace:	0a12      	lsrs	r2, r2, #8
 8005ad0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]
    break;
 8005ada:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005adc:	4b09      	ldr	r3, [pc, #36]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	0e5b      	lsrs	r3, r3, #25
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005af6:	687b      	ldr	r3, [r7, #4]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40021000 	.word	0x40021000
 8005b08:	017d7840 	.word	0x017d7840
 8005b0c:	00f42400 	.word	0x00f42400

08005b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b18:	2300      	movs	r3, #0
 8005b1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8098 	beq.w	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b32:	4b43      	ldr	r3, [pc, #268]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3e:	4b40      	ldr	r3, [pc, #256]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b42:	4a3f      	ldr	r2, [pc, #252]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b56:	2301      	movs	r3, #1
 8005b58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a39      	ldr	r2, [pc, #228]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b66:	f7fc fac7 	bl	80020f8 <HAL_GetTick>
 8005b6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b6c:	e009      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6e:	f7fc fac3 	bl	80020f8 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d902      	bls.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	74fb      	strb	r3, [r7, #19]
        break;
 8005b80:	e005      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b82:	4b30      	ldr	r3, [pc, #192]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ef      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d159      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b94:	4b2a      	ldr	r3, [pc, #168]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01e      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d019      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bb0:	4b23      	ldr	r3, [pc, #140]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bbc:	4b20      	ldr	r3, [pc, #128]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bdc:	4a18      	ldr	r2, [pc, #96]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bee:	f7fc fa83 	bl	80020f8 <HAL_GetTick>
 8005bf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bf4:	e00b      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf6:	f7fc fa7f 	bl	80020f8 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d902      	bls.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	74fb      	strb	r3, [r7, #19]
            break;
 8005c0c:	e006      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0ec      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c22:	4b07      	ldr	r3, [pc, #28]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c30:	4903      	ldr	r1, [pc, #12]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c38:	e008      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c3a:	7cfb      	ldrb	r3, [r7, #19]
 8005c3c:	74bb      	strb	r3, [r7, #18]
 8005c3e:	e005      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c48:	7cfb      	ldrb	r3, [r7, #19]
 8005c4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c4c:	7c7b      	ldrb	r3, [r7, #17]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d105      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c52:	4ba7      	ldr	r3, [pc, #668]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c56:	4aa6      	ldr	r2, [pc, #664]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c6a:	4ba1      	ldr	r3, [pc, #644]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	f023 0203 	bic.w	r2, r3, #3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	499d      	ldr	r1, [pc, #628]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c8c:	4b98      	ldr	r3, [pc, #608]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c92:	f023 020c 	bic.w	r2, r3, #12
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	4995      	ldr	r1, [pc, #596]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cae:	4b90      	ldr	r3, [pc, #576]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	498c      	ldr	r1, [pc, #560]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cd0:	4b87      	ldr	r3, [pc, #540]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	4984      	ldr	r1, [pc, #528]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	497b      	ldr	r1, [pc, #492]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d14:	4b76      	ldr	r3, [pc, #472]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	4973      	ldr	r1, [pc, #460]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d36:	4b6e      	ldr	r3, [pc, #440]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	496a      	ldr	r1, [pc, #424]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d58:	4b65      	ldr	r3, [pc, #404]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4962      	ldr	r1, [pc, #392]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d88:	4959      	ldr	r1, [pc, #356]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d9c:	4b54      	ldr	r3, [pc, #336]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005da2:	f023 0203 	bic.w	r2, r3, #3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	4951      	ldr	r1, [pc, #324]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	4948      	ldr	r1, [pc, #288]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d015      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005de0:	4b43      	ldr	r3, [pc, #268]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dee:	4940      	ldr	r1, [pc, #256]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dfe:	d105      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e00:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	4a3a      	ldr	r2, [pc, #232]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e0a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d015      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e18:	4b35      	ldr	r3, [pc, #212]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e26:	4932      	ldr	r1, [pc, #200]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e36:	d105      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e38:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e42:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d015      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e50:	4b27      	ldr	r3, [pc, #156]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5e:	4924      	ldr	r1, [pc, #144]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e6e:	d105      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e70:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4a1e      	ldr	r2, [pc, #120]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d015      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e88:	4b19      	ldr	r3, [pc, #100]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e96:	4916      	ldr	r1, [pc, #88]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ea6:	d105      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea8:	4b11      	ldr	r3, [pc, #68]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4a10      	ldr	r2, [pc, #64]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d019      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	4908      	ldr	r1, [pc, #32]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ede:	d109      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee0:	4b03      	ldr	r3, [pc, #12]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	4a02      	ldr	r2, [pc, #8]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eea:	60d3      	str	r3, [r2, #12]
 8005eec:	e002      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005eee:	bf00      	nop
 8005ef0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d015      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f00:	4b29      	ldr	r3, [pc, #164]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0e:	4926      	ldr	r1, [pc, #152]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f1e:	d105      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f20:	4b21      	ldr	r3, [pc, #132]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a20      	ldr	r2, [pc, #128]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d015      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f38:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f46:	4918      	ldr	r1, [pc, #96]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f56:	d105      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f58:	4b13      	ldr	r3, [pc, #76]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	4a12      	ldr	r2, [pc, #72]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d015      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f70:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f7e:	490a      	ldr	r1, [pc, #40]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f8e:	d105      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f90:	4b05      	ldr	r3, [pc, #20]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	4a04      	ldr	r2, [pc, #16]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40021000 	.word	0x40021000

08005fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e09d      	b.n	80060fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d108      	bne.n	8005fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fce:	d009      	beq.n	8005fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	61da      	str	r2, [r3, #28]
 8005fd6:	e005      	b.n	8005fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb f894 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800601a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006024:	d902      	bls.n	800602c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e002      	b.n	8006032 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800602c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006030:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800603a:	d007      	beq.n	800604c <HAL_SPI_Init+0xa0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006044:	d002      	beq.n	800604c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	ea42 0103 	orr.w	r1, r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006096:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	0c1b      	lsrs	r3, r3, #16
 80060a8:	f003 0204 	and.w	r2, r3, #4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80060c8:	ea42 0103 	orr.w	r1, r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e049      	b.n	80061a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fb f843 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f000 fa49 	bl	80065d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e049      	b.n	8006256 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f841 	bl	800625e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f000 f9f2 	bl	80065d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b086      	sub	sp, #24
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIM_IC_ConfigChannel+0x1e>
 800628c:	2302      	movs	r3, #2
 800628e:	e088      	b.n	80063a2 <HAL_TIM_IC_ConfigChannel+0x130>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d11b      	bne.n	80062d6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80062ae:	f000 fa47 	bl	8006740 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699a      	ldr	r2, [r3, #24]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 020c 	bic.w	r2, r2, #12
 80062c0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6999      	ldr	r1, [r3, #24]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	619a      	str	r2, [r3, #24]
 80062d4:	e060      	b.n	8006398 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d11c      	bne.n	8006316 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80062ec:	f000 facb 	bl	8006886 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80062fe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6999      	ldr	r1, [r3, #24]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	021a      	lsls	r2, r3, #8
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	619a      	str	r2, [r3, #24]
 8006314:	e040      	b.n	8006398 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d11b      	bne.n	8006354 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800632c:	f000 fb18 	bl	8006960 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 020c 	bic.w	r2, r2, #12
 800633e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69d9      	ldr	r1, [r3, #28]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	61da      	str	r2, [r3, #28]
 8006352:	e021      	b.n	8006398 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b0c      	cmp	r3, #12
 8006358:	d11c      	bne.n	8006394 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800636a:	f000 fb35 	bl	80069d8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800637c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69d9      	ldr	r1, [r3, #28]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	021a      	lsls	r2, r3, #8
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	61da      	str	r2, [r3, #28]
 8006392:	e001      	b.n	8006398 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_TIM_ConfigClockSource+0x1c>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e0f6      	b.n	80065b6 <HAL_TIM_ConfigClockSource+0x20a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80063e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a6f      	ldr	r2, [pc, #444]	@ (80065c0 <HAL_TIM_ConfigClockSource+0x214>)
 8006402:	4293      	cmp	r3, r2
 8006404:	f000 80c1 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1de>
 8006408:	4a6d      	ldr	r2, [pc, #436]	@ (80065c0 <HAL_TIM_ConfigClockSource+0x214>)
 800640a:	4293      	cmp	r3, r2
 800640c:	f200 80c6 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 8006410:	4a6c      	ldr	r2, [pc, #432]	@ (80065c4 <HAL_TIM_ConfigClockSource+0x218>)
 8006412:	4293      	cmp	r3, r2
 8006414:	f000 80b9 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1de>
 8006418:	4a6a      	ldr	r2, [pc, #424]	@ (80065c4 <HAL_TIM_ConfigClockSource+0x218>)
 800641a:	4293      	cmp	r3, r2
 800641c:	f200 80be 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 8006420:	4a69      	ldr	r2, [pc, #420]	@ (80065c8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	f000 80b1 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1de>
 8006428:	4a67      	ldr	r2, [pc, #412]	@ (80065c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	f200 80b6 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 8006430:	4a66      	ldr	r2, [pc, #408]	@ (80065cc <HAL_TIM_ConfigClockSource+0x220>)
 8006432:	4293      	cmp	r3, r2
 8006434:	f000 80a9 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1de>
 8006438:	4a64      	ldr	r2, [pc, #400]	@ (80065cc <HAL_TIM_ConfigClockSource+0x220>)
 800643a:	4293      	cmp	r3, r2
 800643c:	f200 80ae 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 8006440:	4a63      	ldr	r2, [pc, #396]	@ (80065d0 <HAL_TIM_ConfigClockSource+0x224>)
 8006442:	4293      	cmp	r3, r2
 8006444:	f000 80a1 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1de>
 8006448:	4a61      	ldr	r2, [pc, #388]	@ (80065d0 <HAL_TIM_ConfigClockSource+0x224>)
 800644a:	4293      	cmp	r3, r2
 800644c:	f200 80a6 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 8006450:	4a60      	ldr	r2, [pc, #384]	@ (80065d4 <HAL_TIM_ConfigClockSource+0x228>)
 8006452:	4293      	cmp	r3, r2
 8006454:	f000 8099 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1de>
 8006458:	4a5e      	ldr	r2, [pc, #376]	@ (80065d4 <HAL_TIM_ConfigClockSource+0x228>)
 800645a:	4293      	cmp	r3, r2
 800645c:	f200 809e 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 8006460:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006464:	f000 8091 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1de>
 8006468:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800646c:	f200 8096 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 8006470:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006474:	f000 8089 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1de>
 8006478:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800647c:	f200 808e 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 8006480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006484:	d03e      	beq.n	8006504 <HAL_TIM_ConfigClockSource+0x158>
 8006486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800648a:	f200 8087 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006492:	f000 8086 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x1f6>
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649a:	d87f      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 800649c:	2b70      	cmp	r3, #112	@ 0x70
 800649e:	d01a      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x12a>
 80064a0:	2b70      	cmp	r3, #112	@ 0x70
 80064a2:	d87b      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 80064a4:	2b60      	cmp	r3, #96	@ 0x60
 80064a6:	d050      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x19e>
 80064a8:	2b60      	cmp	r3, #96	@ 0x60
 80064aa:	d877      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 80064ac:	2b50      	cmp	r3, #80	@ 0x50
 80064ae:	d03c      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x17e>
 80064b0:	2b50      	cmp	r3, #80	@ 0x50
 80064b2:	d873      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 80064b4:	2b40      	cmp	r3, #64	@ 0x40
 80064b6:	d058      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x1be>
 80064b8:	2b40      	cmp	r3, #64	@ 0x40
 80064ba:	d86f      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 80064bc:	2b30      	cmp	r3, #48	@ 0x30
 80064be:	d064      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x1de>
 80064c0:	2b30      	cmp	r3, #48	@ 0x30
 80064c2:	d86b      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d060      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x1de>
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d867      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x1f0>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d05c      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x1de>
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d05a      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x1de>
 80064d4:	e062      	b.n	800659c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064e6:	f000 fad1 	bl	8006a8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	609a      	str	r2, [r3, #8]
      break;
 8006502:	e04f      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006514:	f000 faba 	bl	8006a8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006526:	609a      	str	r2, [r3, #8]
      break;
 8006528:	e03c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006536:	461a      	mov	r2, r3
 8006538:	f000 f976 	bl	8006828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2150      	movs	r1, #80	@ 0x50
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fa85 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 8006548:	e02c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006556:	461a      	mov	r2, r3
 8006558:	f000 f9d2 	bl	8006900 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2160      	movs	r1, #96	@ 0x60
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fa75 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 8006568:	e01c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006576:	461a      	mov	r2, r3
 8006578:	f000 f956 	bl	8006828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2140      	movs	r1, #64	@ 0x40
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fa65 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 8006588:	e00c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f000 fa5c 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 800659a:	e003      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
      break;
 80065a0:	e000      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80065a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	00100070 	.word	0x00100070
 80065c4:	00100060 	.word	0x00100060
 80065c8:	00100050 	.word	0x00100050
 80065cc:	00100040 	.word	0x00100040
 80065d0:	00100030 	.word	0x00100030
 80065d4:	00100020 	.word	0x00100020

080065d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a4c      	ldr	r2, [pc, #304]	@ (800671c <TIM_Base_SetConfig+0x144>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d017      	beq.n	8006620 <TIM_Base_SetConfig+0x48>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f6:	d013      	beq.n	8006620 <TIM_Base_SetConfig+0x48>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a49      	ldr	r2, [pc, #292]	@ (8006720 <TIM_Base_SetConfig+0x148>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00f      	beq.n	8006620 <TIM_Base_SetConfig+0x48>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a48      	ldr	r2, [pc, #288]	@ (8006724 <TIM_Base_SetConfig+0x14c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00b      	beq.n	8006620 <TIM_Base_SetConfig+0x48>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a47      	ldr	r2, [pc, #284]	@ (8006728 <TIM_Base_SetConfig+0x150>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d007      	beq.n	8006620 <TIM_Base_SetConfig+0x48>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a46      	ldr	r2, [pc, #280]	@ (800672c <TIM_Base_SetConfig+0x154>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_Base_SetConfig+0x48>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a45      	ldr	r2, [pc, #276]	@ (8006730 <TIM_Base_SetConfig+0x158>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d108      	bne.n	8006632 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a39      	ldr	r2, [pc, #228]	@ (800671c <TIM_Base_SetConfig+0x144>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d023      	beq.n	8006682 <TIM_Base_SetConfig+0xaa>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006640:	d01f      	beq.n	8006682 <TIM_Base_SetConfig+0xaa>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a36      	ldr	r2, [pc, #216]	@ (8006720 <TIM_Base_SetConfig+0x148>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01b      	beq.n	8006682 <TIM_Base_SetConfig+0xaa>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a35      	ldr	r2, [pc, #212]	@ (8006724 <TIM_Base_SetConfig+0x14c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d017      	beq.n	8006682 <TIM_Base_SetConfig+0xaa>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a34      	ldr	r2, [pc, #208]	@ (8006728 <TIM_Base_SetConfig+0x150>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <TIM_Base_SetConfig+0xaa>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a33      	ldr	r2, [pc, #204]	@ (800672c <TIM_Base_SetConfig+0x154>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00f      	beq.n	8006682 <TIM_Base_SetConfig+0xaa>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a33      	ldr	r2, [pc, #204]	@ (8006734 <TIM_Base_SetConfig+0x15c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00b      	beq.n	8006682 <TIM_Base_SetConfig+0xaa>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a32      	ldr	r2, [pc, #200]	@ (8006738 <TIM_Base_SetConfig+0x160>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d007      	beq.n	8006682 <TIM_Base_SetConfig+0xaa>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a31      	ldr	r2, [pc, #196]	@ (800673c <TIM_Base_SetConfig+0x164>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_Base_SetConfig+0xaa>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a2c      	ldr	r2, [pc, #176]	@ (8006730 <TIM_Base_SetConfig+0x158>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d108      	bne.n	8006694 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a18      	ldr	r2, [pc, #96]	@ (800671c <TIM_Base_SetConfig+0x144>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <TIM_Base_SetConfig+0x110>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1a      	ldr	r2, [pc, #104]	@ (800672c <TIM_Base_SetConfig+0x154>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00f      	beq.n	80066e8 <TIM_Base_SetConfig+0x110>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006734 <TIM_Base_SetConfig+0x15c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <TIM_Base_SetConfig+0x110>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <TIM_Base_SetConfig+0x160>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_Base_SetConfig+0x110>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a18      	ldr	r2, [pc, #96]	@ (800673c <TIM_Base_SetConfig+0x164>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_Base_SetConfig+0x110>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a13      	ldr	r2, [pc, #76]	@ (8006730 <TIM_Base_SetConfig+0x158>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d103      	bne.n	80066f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d105      	bne.n	800670e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f023 0201 	bic.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	611a      	str	r2, [r3, #16]
  }
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40012c00 	.word	0x40012c00
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800
 8006728:	40000c00 	.word	0x40000c00
 800672c:	40013400 	.word	0x40013400
 8006730:	40015000 	.word	0x40015000
 8006734:	40014000 	.word	0x40014000
 8006738:	40014400 	.word	0x40014400
 800673c:	40014800 	.word	0x40014800

08006740 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f023 0201 	bic.w	r2, r3, #1
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4a28      	ldr	r2, [pc, #160]	@ (800680c <TIM_TI1_SetConfig+0xcc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01b      	beq.n	80067a6 <TIM_TI1_SetConfig+0x66>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006774:	d017      	beq.n	80067a6 <TIM_TI1_SetConfig+0x66>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a25      	ldr	r2, [pc, #148]	@ (8006810 <TIM_TI1_SetConfig+0xd0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <TIM_TI1_SetConfig+0x66>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4a24      	ldr	r2, [pc, #144]	@ (8006814 <TIM_TI1_SetConfig+0xd4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <TIM_TI1_SetConfig+0x66>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4a23      	ldr	r2, [pc, #140]	@ (8006818 <TIM_TI1_SetConfig+0xd8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <TIM_TI1_SetConfig+0x66>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a22      	ldr	r2, [pc, #136]	@ (800681c <TIM_TI1_SetConfig+0xdc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <TIM_TI1_SetConfig+0x66>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a21      	ldr	r2, [pc, #132]	@ (8006820 <TIM_TI1_SetConfig+0xe0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_TI1_SetConfig+0x66>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a20      	ldr	r2, [pc, #128]	@ (8006824 <TIM_TI1_SetConfig+0xe4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d101      	bne.n	80067aa <TIM_TI1_SetConfig+0x6a>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <TIM_TI1_SetConfig+0x6c>
 80067aa:	2300      	movs	r3, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0303 	bic.w	r3, r3, #3
 80067b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	e003      	b.n	80067ca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f023 030a 	bic.w	r3, r3, #10
 80067e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f003 030a 	and.w	r3, r3, #10
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	40000c00 	.word	0x40000c00
 800681c:	40013400 	.word	0x40013400
 8006820:	40014000 	.word	0x40014000
 8006824:	40015000 	.word	0x40015000

08006828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f023 030a 	bic.w	r3, r3, #10
 8006864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	621a      	str	r2, [r3, #32]
}
 800687a:	bf00      	nop
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006886:	b480      	push	{r7}
 8006888:	b087      	sub	sp, #28
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f023 0210 	bic.w	r2, r3, #16
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	031b      	lsls	r3, r3, #12
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0210 	bic.w	r2, r3, #16
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800692a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	031b      	lsls	r3, r3, #12
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800693c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	621a      	str	r2, [r3, #32]
}
 8006954:	bf00      	nop
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f023 0303 	bic.w	r3, r3, #3
 800698c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800699c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80069b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	621a      	str	r2, [r3, #32]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	031b      	lsls	r3, r3, #12
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006a2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	031b      	lsls	r3, r3, #12
 8006a30:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f043 0307 	orr.w	r3, r3, #7
 8006a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	609a      	str	r2, [r3, #8]
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	021a      	lsls	r2, r3, #8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	609a      	str	r2, [r3, #8]
}
 8006ac0:	bf00      	nop
 8006ac2:	371c      	adds	r7, #28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e074      	b.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a34      	ldr	r2, [pc, #208]	@ (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a33      	ldr	r2, [pc, #204]	@ (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a31      	ldr	r2, [pc, #196]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d108      	bne.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a21      	ldr	r2, [pc, #132]	@ (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d022      	beq.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b64:	d01d      	beq.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d018      	beq.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1d      	ldr	r2, [pc, #116]	@ (8006bec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d013      	beq.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00e      	beq.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a15      	ldr	r2, [pc, #84]	@ (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d009      	beq.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a18      	ldr	r2, [pc, #96]	@ (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d004      	beq.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a11      	ldr	r2, [pc, #68]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d10c      	bne.n	8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40012c00 	.word	0x40012c00
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40015000 	.word	0x40015000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40014000 	.word	0x40014000

08006bf8 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_TIMEx_TISelection+0x1e>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e073      	b.n	8006cfe <HAL_TIMEx_TISelection+0x106>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b0c      	cmp	r3, #12
 8006c22:	d864      	bhi.n	8006cee <HAL_TIMEx_TISelection+0xf6>
 8006c24:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <HAL_TIMEx_TISelection+0x34>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c61 	.word	0x08006c61
 8006c30:	08006cef 	.word	0x08006cef
 8006c34:	08006cef 	.word	0x08006cef
 8006c38:	08006cef 	.word	0x08006cef
 8006c3c:	08006cad 	.word	0x08006cad
 8006c40:	08006cef 	.word	0x08006cef
 8006c44:	08006cef 	.word	0x08006cef
 8006c48:	08006cef 	.word	0x08006cef
 8006c4c:	08006cc3 	.word	0x08006cc3
 8006c50:	08006cef 	.word	0x08006cef
 8006c54:	08006cef 	.word	0x08006cef
 8006c58:	08006cef 	.word	0x08006cef
 8006c5c:	08006cd9 	.word	0x08006cd9
  {
    case TIM_CHANNEL_1:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c66:	f023 010f 	bic.w	r1, r3, #15
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* If required, set OR bit to request HSE/32 clock */
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a24      	ldr	r2, [pc, #144]	@ (8006d0c <HAL_TIMEx_TISelection+0x114>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <HAL_TIMEx_TISelection+0x90>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a23      	ldr	r2, [pc, #140]	@ (8006d10 <HAL_TIMEx_TISelection+0x118>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d108      	bne.n	8006c9a <HAL_TIMEx_TISelection+0xa2>
      {
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0201 	orr.w	r2, r2, #1
 8006c96:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      else
      {
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
      }
      break;
 8006c98:	e02c      	b.n	8006cf4 <HAL_TIMEx_TISelection+0xfc>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006caa:	e023      	b.n	8006cf4 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_2:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb2:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8006cc0:	e018      	b.n	8006cf4 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_3:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cc8:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8006cd6:	e00d      	b.n	8006cf4 <HAL_TIMEx_TISelection+0xfc>
    case TIM_CHANNEL_4:
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cde:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8006cec:	e002      	b.n	8006cf4 <HAL_TIMEx_TISelection+0xfc>
    default:
      status = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800

08006d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e042      	b.n	8006dac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d106      	bne.n	8006d3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7fa fac3 	bl	80012c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2224      	movs	r2, #36	@ 0x24
 8006d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0201 	bic.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fe8e 	bl	8007a80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fb8f 	bl	8007488 <UART_SetConfig>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e01b      	b.n	8006dac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 ff0d 	bl	8007bc4 <UART_CheckIdleState>
 8006daa:	4603      	mov	r3, r0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b0ba      	sub	sp, #232	@ 0xe8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006dda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006dde:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006de2:	4013      	ands	r3, r2
 8006de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d11b      	bne.n	8006e28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d015      	beq.n	8006e28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d105      	bne.n	8006e14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8300 	beq.w	800741e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
      }
      return;
 8006e26:	e2fa      	b.n	800741e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8123 	beq.w	8007078 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e36:	4b8d      	ldr	r3, [pc, #564]	@ (800706c <HAL_UART_IRQHandler+0x2b8>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e42:	4b8b      	ldr	r3, [pc, #556]	@ (8007070 <HAL_UART_IRQHandler+0x2bc>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 8116 	beq.w	8007078 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d011      	beq.n	8006e7c <HAL_UART_IRQHandler+0xc8>
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e72:	f043 0201 	orr.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d011      	beq.n	8006eac <HAL_UART_IRQHandler+0xf8>
 8006e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea2:	f043 0204 	orr.w	r2, r3, #4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d011      	beq.n	8006edc <HAL_UART_IRQHandler+0x128>
 8006eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed2:	f043 0202 	orr.w	r2, r3, #2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d017      	beq.n	8006f18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d105      	bne.n	8006f00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ef4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ef8:	4b5c      	ldr	r3, [pc, #368]	@ (800706c <HAL_UART_IRQHandler+0x2b8>)
 8006efa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2208      	movs	r2, #8
 8006f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f0e:	f043 0208 	orr.w	r2, r3, #8
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d012      	beq.n	8006f4a <HAL_UART_IRQHandler+0x196>
 8006f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00c      	beq.n	8006f4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f40:	f043 0220 	orr.w	r2, r3, #32
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8266 	beq.w	8007422 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d013      	beq.n	8006f8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9e:	2b40      	cmp	r3, #64	@ 0x40
 8006fa0:	d005      	beq.n	8006fae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fa6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d054      	beq.n	8007058 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 f807 	bl	8007fc2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fbe:	2b40      	cmp	r3, #64	@ 0x40
 8006fc0:	d146      	bne.n	8007050 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1d9      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007014:	2b00      	cmp	r3, #0
 8007016:	d017      	beq.n	8007048 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800701e:	4a15      	ldr	r2, [pc, #84]	@ (8007074 <HAL_UART_IRQHandler+0x2c0>)
 8007020:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007028:	4618      	mov	r0, r3
 800702a:	f7fd fac7 	bl	80045bc <HAL_DMA_Abort_IT>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d019      	beq.n	8007068 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800703a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007042:	4610      	mov	r0, r2
 8007044:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007046:	e00f      	b.n	8007068 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fa13 	bl	8007474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704e:	e00b      	b.n	8007068 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fa0f 	bl	8007474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007056:	e007      	b.n	8007068 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fa0b 	bl	8007474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007066:	e1dc      	b.n	8007422 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007068:	bf00      	nop
    return;
 800706a:	e1da      	b.n	8007422 <HAL_UART_IRQHandler+0x66e>
 800706c:	10000001 	.word	0x10000001
 8007070:	04000120 	.word	0x04000120
 8007074:	08008279 	.word	0x08008279

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800707c:	2b01      	cmp	r3, #1
 800707e:	f040 8170 	bne.w	8007362 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007086:	f003 0310 	and.w	r3, r3, #16
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 8169 	beq.w	8007362 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8162 	beq.w	8007362 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2210      	movs	r2, #16
 80070a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b0:	2b40      	cmp	r3, #64	@ 0x40
 80070b2:	f040 80d8 	bne.w	8007266 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80af 	beq.w	800722c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070d8:	429a      	cmp	r2, r3
 80070da:	f080 80a7 	bcs.w	800722c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f040 8087 	bne.w	800720a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800712a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007132:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800713e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1da      	bne.n	80070fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007158:	f023 0301 	bic.w	r3, r3, #1
 800715c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800716a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800716e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007172:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800717c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e1      	bne.n	8007146 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3308      	adds	r3, #8
 8007188:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3308      	adds	r3, #8
 80071a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e3      	bne.n	8007182 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071d8:	f023 0310 	bic.w	r3, r3, #16
 80071dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e4      	bne.n	80071c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007204:	4618      	mov	r0, r3
 8007206:	f7fd f980 	bl	800450a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800721c:	b29b      	uxth	r3, r3
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	b29b      	uxth	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7fa fab9 	bl	800179c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800722a:	e0fc      	b.n	8007426 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007236:	429a      	cmp	r2, r3
 8007238:	f040 80f5 	bne.w	8007426 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b20      	cmp	r3, #32
 800724c:	f040 80eb 	bne.w	8007426 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fa fa9c 	bl	800179c <HAL_UARTEx_RxEventCallback>
      return;
 8007264:	e0df      	b.n	8007426 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007272:	b29b      	uxth	r3, r3
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80d1 	beq.w	800742a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80cc 	beq.w	800742a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e4      	bne.n	8007292 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3308      	adds	r3, #8
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	623b      	str	r3, [r7, #32]
   return(result);
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072de:	f023 0301 	bic.w	r3, r3, #1
 80072e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80072f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e1      	bne.n	80072c8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2220      	movs	r2, #32
 8007308:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	60fb      	str	r3, [r7, #12]
   return(result);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f023 0310 	bic.w	r3, r3, #16
 800732c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	69b9      	ldr	r1, [r7, #24]
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	617b      	str	r3, [r7, #20]
   return(result);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e4      	bne.n	8007318 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fa fa1e 	bl	800179c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007360:	e063      	b.n	800742a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00e      	beq.n	800738c <HAL_UART_IRQHandler+0x5d8>
 800736e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d008      	beq.n	800738c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 ffb8 	bl	80082fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800738a:	e051      	b.n	8007430 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800738c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007394:	2b00      	cmp	r3, #0
 8007396:	d014      	beq.n	80073c2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800739c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d105      	bne.n	80073b0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80073a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d008      	beq.n	80073c2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d03a      	beq.n	800742e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	4798      	blx	r3
    }
    return;
 80073c0:	e035      	b.n	800742e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <HAL_UART_IRQHandler+0x62e>
 80073ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 ff62 	bl	80082a4 <UART_EndTransmit_IT>
    return;
 80073e0:	e026      	b.n	8007430 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d009      	beq.n	8007402 <HAL_UART_IRQHandler+0x64e>
 80073ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 ff91 	bl	8008322 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007400:	e016      	b.n	8007430 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d010      	beq.n	8007430 <HAL_UART_IRQHandler+0x67c>
 800740e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007412:	2b00      	cmp	r3, #0
 8007414:	da0c      	bge.n	8007430 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 ff79 	bl	800830e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800741c:	e008      	b.n	8007430 <HAL_UART_IRQHandler+0x67c>
      return;
 800741e:	bf00      	nop
 8007420:	e006      	b.n	8007430 <HAL_UART_IRQHandler+0x67c>
    return;
 8007422:	bf00      	nop
 8007424:	e004      	b.n	8007430 <HAL_UART_IRQHandler+0x67c>
      return;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <HAL_UART_IRQHandler+0x67c>
      return;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <HAL_UART_IRQHandler+0x67c>
    return;
 800742e:	bf00      	nop
  }
}
 8007430:	37e8      	adds	r7, #232	@ 0xe8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop

08007438 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800748c:	b08c      	sub	sp, #48	@ 0x30
 800748e:	af00      	add	r7, sp, #0
 8007490:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	431a      	orrs	r2, r3
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	431a      	orrs	r2, r3
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	4baa      	ldr	r3, [pc, #680]	@ (8007760 <UART_SetConfig+0x2d8>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	6812      	ldr	r2, [r2, #0]
 80074be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074c0:	430b      	orrs	r3, r1
 80074c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a9f      	ldr	r2, [pc, #636]	@ (8007764 <UART_SetConfig+0x2dc>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d004      	beq.n	80074f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074f0:	4313      	orrs	r3, r2
 80074f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80074fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	6812      	ldr	r2, [r2, #0]
 8007506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007508:	430b      	orrs	r3, r1
 800750a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	f023 010f 	bic.w	r1, r3, #15
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a90      	ldr	r2, [pc, #576]	@ (8007768 <UART_SetConfig+0x2e0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d125      	bne.n	8007578 <UART_SetConfig+0xf0>
 800752c:	4b8f      	ldr	r3, [pc, #572]	@ (800776c <UART_SetConfig+0x2e4>)
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	2b03      	cmp	r3, #3
 8007538:	d81a      	bhi.n	8007570 <UART_SetConfig+0xe8>
 800753a:	a201      	add	r2, pc, #4	@ (adr r2, 8007540 <UART_SetConfig+0xb8>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	08007551 	.word	0x08007551
 8007544:	08007561 	.word	0x08007561
 8007548:	08007559 	.word	0x08007559
 800754c:	08007569 	.word	0x08007569
 8007550:	2301      	movs	r3, #1
 8007552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007556:	e116      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007558:	2302      	movs	r3, #2
 800755a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800755e:	e112      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007560:	2304      	movs	r3, #4
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007566:	e10e      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007568:	2308      	movs	r3, #8
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800756e:	e10a      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007570:	2310      	movs	r3, #16
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007576:	e106      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a7c      	ldr	r2, [pc, #496]	@ (8007770 <UART_SetConfig+0x2e8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d138      	bne.n	80075f4 <UART_SetConfig+0x16c>
 8007582:	4b7a      	ldr	r3, [pc, #488]	@ (800776c <UART_SetConfig+0x2e4>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007588:	f003 030c 	and.w	r3, r3, #12
 800758c:	2b0c      	cmp	r3, #12
 800758e:	d82d      	bhi.n	80075ec <UART_SetConfig+0x164>
 8007590:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <UART_SetConfig+0x110>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075cd 	.word	0x080075cd
 800759c:	080075ed 	.word	0x080075ed
 80075a0:	080075ed 	.word	0x080075ed
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	080075dd 	.word	0x080075dd
 80075ac:	080075ed 	.word	0x080075ed
 80075b0:	080075ed 	.word	0x080075ed
 80075b4:	080075ed 	.word	0x080075ed
 80075b8:	080075d5 	.word	0x080075d5
 80075bc:	080075ed 	.word	0x080075ed
 80075c0:	080075ed 	.word	0x080075ed
 80075c4:	080075ed 	.word	0x080075ed
 80075c8:	080075e5 	.word	0x080075e5
 80075cc:	2300      	movs	r3, #0
 80075ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d2:	e0d8      	b.n	8007786 <UART_SetConfig+0x2fe>
 80075d4:	2302      	movs	r3, #2
 80075d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075da:	e0d4      	b.n	8007786 <UART_SetConfig+0x2fe>
 80075dc:	2304      	movs	r3, #4
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	e0d0      	b.n	8007786 <UART_SetConfig+0x2fe>
 80075e4:	2308      	movs	r3, #8
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ea:	e0cc      	b.n	8007786 <UART_SetConfig+0x2fe>
 80075ec:	2310      	movs	r3, #16
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f2:	e0c8      	b.n	8007786 <UART_SetConfig+0x2fe>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a5e      	ldr	r2, [pc, #376]	@ (8007774 <UART_SetConfig+0x2ec>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d125      	bne.n	800764a <UART_SetConfig+0x1c2>
 80075fe:	4b5b      	ldr	r3, [pc, #364]	@ (800776c <UART_SetConfig+0x2e4>)
 8007600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007604:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007608:	2b30      	cmp	r3, #48	@ 0x30
 800760a:	d016      	beq.n	800763a <UART_SetConfig+0x1b2>
 800760c:	2b30      	cmp	r3, #48	@ 0x30
 800760e:	d818      	bhi.n	8007642 <UART_SetConfig+0x1ba>
 8007610:	2b20      	cmp	r3, #32
 8007612:	d00a      	beq.n	800762a <UART_SetConfig+0x1a2>
 8007614:	2b20      	cmp	r3, #32
 8007616:	d814      	bhi.n	8007642 <UART_SetConfig+0x1ba>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <UART_SetConfig+0x19a>
 800761c:	2b10      	cmp	r3, #16
 800761e:	d008      	beq.n	8007632 <UART_SetConfig+0x1aa>
 8007620:	e00f      	b.n	8007642 <UART_SetConfig+0x1ba>
 8007622:	2300      	movs	r3, #0
 8007624:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007628:	e0ad      	b.n	8007786 <UART_SetConfig+0x2fe>
 800762a:	2302      	movs	r3, #2
 800762c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007630:	e0a9      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007632:	2304      	movs	r3, #4
 8007634:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007638:	e0a5      	b.n	8007786 <UART_SetConfig+0x2fe>
 800763a:	2308      	movs	r3, #8
 800763c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007640:	e0a1      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007642:	2310      	movs	r3, #16
 8007644:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007648:	e09d      	b.n	8007786 <UART_SetConfig+0x2fe>
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a4a      	ldr	r2, [pc, #296]	@ (8007778 <UART_SetConfig+0x2f0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d125      	bne.n	80076a0 <UART_SetConfig+0x218>
 8007654:	4b45      	ldr	r3, [pc, #276]	@ (800776c <UART_SetConfig+0x2e4>)
 8007656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800765e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007660:	d016      	beq.n	8007690 <UART_SetConfig+0x208>
 8007662:	2bc0      	cmp	r3, #192	@ 0xc0
 8007664:	d818      	bhi.n	8007698 <UART_SetConfig+0x210>
 8007666:	2b80      	cmp	r3, #128	@ 0x80
 8007668:	d00a      	beq.n	8007680 <UART_SetConfig+0x1f8>
 800766a:	2b80      	cmp	r3, #128	@ 0x80
 800766c:	d814      	bhi.n	8007698 <UART_SetConfig+0x210>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <UART_SetConfig+0x1f0>
 8007672:	2b40      	cmp	r3, #64	@ 0x40
 8007674:	d008      	beq.n	8007688 <UART_SetConfig+0x200>
 8007676:	e00f      	b.n	8007698 <UART_SetConfig+0x210>
 8007678:	2300      	movs	r3, #0
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800767e:	e082      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007680:	2302      	movs	r3, #2
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007686:	e07e      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007688:	2304      	movs	r3, #4
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800768e:	e07a      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007690:	2308      	movs	r3, #8
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007696:	e076      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007698:	2310      	movs	r3, #16
 800769a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769e:	e072      	b.n	8007786 <UART_SetConfig+0x2fe>
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a35      	ldr	r2, [pc, #212]	@ (800777c <UART_SetConfig+0x2f4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d12a      	bne.n	8007700 <UART_SetConfig+0x278>
 80076aa:	4b30      	ldr	r3, [pc, #192]	@ (800776c <UART_SetConfig+0x2e4>)
 80076ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076b8:	d01a      	beq.n	80076f0 <UART_SetConfig+0x268>
 80076ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076be:	d81b      	bhi.n	80076f8 <UART_SetConfig+0x270>
 80076c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076c4:	d00c      	beq.n	80076e0 <UART_SetConfig+0x258>
 80076c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076ca:	d815      	bhi.n	80076f8 <UART_SetConfig+0x270>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <UART_SetConfig+0x250>
 80076d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076d4:	d008      	beq.n	80076e8 <UART_SetConfig+0x260>
 80076d6:	e00f      	b.n	80076f8 <UART_SetConfig+0x270>
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076de:	e052      	b.n	8007786 <UART_SetConfig+0x2fe>
 80076e0:	2302      	movs	r3, #2
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076e6:	e04e      	b.n	8007786 <UART_SetConfig+0x2fe>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ee:	e04a      	b.n	8007786 <UART_SetConfig+0x2fe>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076f6:	e046      	b.n	8007786 <UART_SetConfig+0x2fe>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076fe:	e042      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a17      	ldr	r2, [pc, #92]	@ (8007764 <UART_SetConfig+0x2dc>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d13a      	bne.n	8007780 <UART_SetConfig+0x2f8>
 800770a:	4b18      	ldr	r3, [pc, #96]	@ (800776c <UART_SetConfig+0x2e4>)
 800770c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007710:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007714:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007718:	d01a      	beq.n	8007750 <UART_SetConfig+0x2c8>
 800771a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800771e:	d81b      	bhi.n	8007758 <UART_SetConfig+0x2d0>
 8007720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007724:	d00c      	beq.n	8007740 <UART_SetConfig+0x2b8>
 8007726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800772a:	d815      	bhi.n	8007758 <UART_SetConfig+0x2d0>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <UART_SetConfig+0x2b0>
 8007730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007734:	d008      	beq.n	8007748 <UART_SetConfig+0x2c0>
 8007736:	e00f      	b.n	8007758 <UART_SetConfig+0x2d0>
 8007738:	2300      	movs	r3, #0
 800773a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773e:	e022      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007740:	2302      	movs	r3, #2
 8007742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007746:	e01e      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007748:	2304      	movs	r3, #4
 800774a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774e:	e01a      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007750:	2308      	movs	r3, #8
 8007752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007756:	e016      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007758:	2310      	movs	r3, #16
 800775a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800775e:	e012      	b.n	8007786 <UART_SetConfig+0x2fe>
 8007760:	cfff69f3 	.word	0xcfff69f3
 8007764:	40008000 	.word	0x40008000
 8007768:	40013800 	.word	0x40013800
 800776c:	40021000 	.word	0x40021000
 8007770:	40004400 	.word	0x40004400
 8007774:	40004800 	.word	0x40004800
 8007778:	40004c00 	.word	0x40004c00
 800777c:	40005000 	.word	0x40005000
 8007780:	2310      	movs	r3, #16
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4aae      	ldr	r2, [pc, #696]	@ (8007a44 <UART_SetConfig+0x5bc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	f040 8097 	bne.w	80078c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007792:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007796:	2b08      	cmp	r3, #8
 8007798:	d823      	bhi.n	80077e2 <UART_SetConfig+0x35a>
 800779a:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <UART_SetConfig+0x318>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077c5 	.word	0x080077c5
 80077a4:	080077e3 	.word	0x080077e3
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077e3 	.word	0x080077e3
 80077b0:	080077d3 	.word	0x080077d3
 80077b4:	080077e3 	.word	0x080077e3
 80077b8:	080077e3 	.word	0x080077e3
 80077bc:	080077e3 	.word	0x080077e3
 80077c0:	080077db 	.word	0x080077db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c4:	f7fe f932 	bl	8005a2c <HAL_RCC_GetPCLK1Freq>
 80077c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077ca:	e010      	b.n	80077ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077cc:	4b9e      	ldr	r3, [pc, #632]	@ (8007a48 <UART_SetConfig+0x5c0>)
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077d0:	e00d      	b.n	80077ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077d2:	f7fe f8bd 	bl	8005950 <HAL_RCC_GetSysClockFreq>
 80077d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077d8:	e009      	b.n	80077ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077e0:	e005      	b.n	80077ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8130 	beq.w	8007a56 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fa:	4a94      	ldr	r2, [pc, #592]	@ (8007a4c <UART_SetConfig+0x5c4>)
 80077fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007800:	461a      	mov	r2, r3
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	fbb3 f3f2 	udiv	r3, r3, r2
 8007808:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	4613      	mov	r3, r2
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	4413      	add	r3, r2
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	429a      	cmp	r2, r3
 8007818:	d305      	bcc.n	8007826 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	429a      	cmp	r2, r3
 8007824:	d903      	bls.n	800782e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800782c:	e113      	b.n	8007a56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	2200      	movs	r2, #0
 8007832:	60bb      	str	r3, [r7, #8]
 8007834:	60fa      	str	r2, [r7, #12]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783a:	4a84      	ldr	r2, [pc, #528]	@ (8007a4c <UART_SetConfig+0x5c4>)
 800783c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007840:	b29b      	uxth	r3, r3
 8007842:	2200      	movs	r2, #0
 8007844:	603b      	str	r3, [r7, #0]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800784c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007850:	f7f8 fce2 	bl	8000218 <__aeabi_uldivmod>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4610      	mov	r0, r2
 800785a:	4619      	mov	r1, r3
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	020b      	lsls	r3, r1, #8
 8007866:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800786a:	0202      	lsls	r2, r0, #8
 800786c:	6979      	ldr	r1, [r7, #20]
 800786e:	6849      	ldr	r1, [r1, #4]
 8007870:	0849      	lsrs	r1, r1, #1
 8007872:	2000      	movs	r0, #0
 8007874:	460c      	mov	r4, r1
 8007876:	4605      	mov	r5, r0
 8007878:	eb12 0804 	adds.w	r8, r2, r4
 800787c:	eb43 0905 	adc.w	r9, r3, r5
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	469a      	mov	sl, r3
 8007888:	4693      	mov	fp, r2
 800788a:	4652      	mov	r2, sl
 800788c:	465b      	mov	r3, fp
 800788e:	4640      	mov	r0, r8
 8007890:	4649      	mov	r1, r9
 8007892:	f7f8 fcc1 	bl	8000218 <__aeabi_uldivmod>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4613      	mov	r3, r2
 800789c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078a4:	d308      	bcc.n	80078b8 <UART_SetConfig+0x430>
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078ac:	d204      	bcs.n	80078b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6a3a      	ldr	r2, [r7, #32]
 80078b4:	60da      	str	r2, [r3, #12]
 80078b6:	e0ce      	b.n	8007a56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078be:	e0ca      	b.n	8007a56 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c8:	d166      	bne.n	8007998 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80078ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078ce:	2b08      	cmp	r3, #8
 80078d0:	d827      	bhi.n	8007922 <UART_SetConfig+0x49a>
 80078d2:	a201      	add	r2, pc, #4	@ (adr r2, 80078d8 <UART_SetConfig+0x450>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007905 	.word	0x08007905
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	08007923 	.word	0x08007923
 80078e8:	08007913 	.word	0x08007913
 80078ec:	08007923 	.word	0x08007923
 80078f0:	08007923 	.word	0x08007923
 80078f4:	08007923 	.word	0x08007923
 80078f8:	0800791b 	.word	0x0800791b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078fc:	f7fe f896 	bl	8005a2c <HAL_RCC_GetPCLK1Freq>
 8007900:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007902:	e014      	b.n	800792e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007904:	f7fe f8a8 	bl	8005a58 <HAL_RCC_GetPCLK2Freq>
 8007908:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800790a:	e010      	b.n	800792e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800790c:	4b4e      	ldr	r3, [pc, #312]	@ (8007a48 <UART_SetConfig+0x5c0>)
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007910:	e00d      	b.n	800792e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007912:	f7fe f81d 	bl	8005950 <HAL_RCC_GetSysClockFreq>
 8007916:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007918:	e009      	b.n	800792e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800791a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007920:	e005      	b.n	800792e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800792c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8090 	beq.w	8007a56 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793a:	4a44      	ldr	r2, [pc, #272]	@ (8007a4c <UART_SetConfig+0x5c4>)
 800793c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007940:	461a      	mov	r2, r3
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	fbb3 f3f2 	udiv	r3, r3, r2
 8007948:	005a      	lsls	r2, r3, #1
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	085b      	lsrs	r3, r3, #1
 8007950:	441a      	add	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	fbb2 f3f3 	udiv	r3, r2, r3
 800795a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b0f      	cmp	r3, #15
 8007960:	d916      	bls.n	8007990 <UART_SetConfig+0x508>
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007968:	d212      	bcs.n	8007990 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	b29b      	uxth	r3, r3
 800796e:	f023 030f 	bic.w	r3, r3, #15
 8007972:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	b29b      	uxth	r3, r3
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	b29a      	uxth	r2, r3
 8007980:	8bfb      	ldrh	r3, [r7, #30]
 8007982:	4313      	orrs	r3, r2
 8007984:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	8bfa      	ldrh	r2, [r7, #30]
 800798c:	60da      	str	r2, [r3, #12]
 800798e:	e062      	b.n	8007a56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007996:	e05e      	b.n	8007a56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007998:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800799c:	2b08      	cmp	r3, #8
 800799e:	d828      	bhi.n	80079f2 <UART_SetConfig+0x56a>
 80079a0:	a201      	add	r2, pc, #4	@ (adr r2, 80079a8 <UART_SetConfig+0x520>)
 80079a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a6:	bf00      	nop
 80079a8:	080079cd 	.word	0x080079cd
 80079ac:	080079d5 	.word	0x080079d5
 80079b0:	080079dd 	.word	0x080079dd
 80079b4:	080079f3 	.word	0x080079f3
 80079b8:	080079e3 	.word	0x080079e3
 80079bc:	080079f3 	.word	0x080079f3
 80079c0:	080079f3 	.word	0x080079f3
 80079c4:	080079f3 	.word	0x080079f3
 80079c8:	080079eb 	.word	0x080079eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079cc:	f7fe f82e 	bl	8005a2c <HAL_RCC_GetPCLK1Freq>
 80079d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079d2:	e014      	b.n	80079fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079d4:	f7fe f840 	bl	8005a58 <HAL_RCC_GetPCLK2Freq>
 80079d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079da:	e010      	b.n	80079fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a48 <UART_SetConfig+0x5c0>)
 80079de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079e0:	e00d      	b.n	80079fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079e2:	f7fd ffb5 	bl	8005950 <HAL_RCC_GetSysClockFreq>
 80079e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079e8:	e009      	b.n	80079fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079f0:	e005      	b.n	80079fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079fc:	bf00      	nop
    }

    if (pclk != 0U)
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d028      	beq.n	8007a56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a08:	4a10      	ldr	r2, [pc, #64]	@ (8007a4c <UART_SetConfig+0x5c4>)
 8007a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	441a      	add	r2, r3
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	2b0f      	cmp	r3, #15
 8007a2c:	d910      	bls.n	8007a50 <UART_SetConfig+0x5c8>
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a34:	d20c      	bcs.n	8007a50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60da      	str	r2, [r3, #12]
 8007a40:	e009      	b.n	8007a56 <UART_SetConfig+0x5ce>
 8007a42:	bf00      	nop
 8007a44:	40008000 	.word	0x40008000
 8007a48:	00f42400 	.word	0x00f42400
 8007a4c:	08008a68 	.word	0x08008a68
      }
      else
      {
        ret = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a72:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3730      	adds	r7, #48	@ 0x30
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b14:	f003 0310 	and.w	r3, r3, #16
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01a      	beq.n	8007b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b7e:	d10a      	bne.n	8007b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	605a      	str	r2, [r3, #4]
  }
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b098      	sub	sp, #96	@ 0x60
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bd4:	f7fa fa90 	bl	80020f8 <HAL_GetTick>
 8007bd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d12f      	bne.n	8007c48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007be8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f88e 	bl	8007d18 <UART_WaitOnFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d022      	beq.n	8007c48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e6      	bne.n	8007c02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e063      	b.n	8007d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0304 	and.w	r3, r3, #4
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d149      	bne.n	8007cea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f857 	bl	8007d18 <UART_WaitOnFlagUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d03c      	beq.n	8007cea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e6      	bne.n	8007c70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f023 0301 	bic.w	r3, r3, #1
 8007cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cc2:	61fa      	str	r2, [r7, #28]
 8007cc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	69b9      	ldr	r1, [r7, #24]
 8007cc8:	69fa      	ldr	r2, [r7, #28]
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e5      	bne.n	8007ca2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e012      	b.n	8007d10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2220      	movs	r2, #32
 8007cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3758      	adds	r7, #88	@ 0x58
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d28:	e04f      	b.n	8007dca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d30:	d04b      	beq.n	8007dca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d32:	f7fa f9e1 	bl	80020f8 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e04e      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0304 	and.w	r3, r3, #4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d037      	beq.n	8007dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b80      	cmp	r3, #128	@ 0x80
 8007d5e:	d034      	beq.n	8007dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b40      	cmp	r3, #64	@ 0x40
 8007d64:	d031      	beq.n	8007dca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d110      	bne.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2208      	movs	r2, #8
 8007d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f920 	bl	8007fc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2208      	movs	r2, #8
 8007d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e029      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007da4:	d111      	bne.n	8007dca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 f906 	bl	8007fc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e00f      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69da      	ldr	r2, [r3, #28]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	bf0c      	ite	eq
 8007dda:	2301      	moveq	r3, #1
 8007ddc:	2300      	movne	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d0a0      	beq.n	8007d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b096      	sub	sp, #88	@ 0x58
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	88fa      	ldrh	r2, [r7, #6]
 8007e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2222      	movs	r2, #34	@ 0x22
 8007e1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d02d      	beq.n	8007e86 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e30:	4a40      	ldr	r2, [pc, #256]	@ (8007f34 <UART_Start_Receive_DMA+0x140>)
 8007e32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8007f38 <UART_Start_Receive_DMA+0x144>)
 8007e3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e44:	4a3d      	ldr	r2, [pc, #244]	@ (8007f3c <UART_Start_Receive_DMA+0x148>)
 8007e46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e4e:	2200      	movs	r2, #0
 8007e50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3324      	adds	r3, #36	@ 0x24
 8007e5e:	4619      	mov	r1, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e64:	461a      	mov	r2, r3
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	f7fc fad4 	bl	8004414 <HAL_DMA_Start_IT>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d009      	beq.n	8007e86 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2210      	movs	r2, #16
 8007e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e051      	b.n	8007f2a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d018      	beq.n	8007ec0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ea2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eb4:	e841 2300 	strex	r3, r2, [r1]
 8007eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e6      	bne.n	8007e8e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3308      	adds	r3, #8
 8007ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3308      	adds	r3, #8
 8007ede:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ee0:	637a      	str	r2, [r7, #52]	@ 0x34
 8007ee2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e5      	bne.n	8007ec0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3308      	adds	r3, #8
 8007efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	613b      	str	r3, [r7, #16]
   return(result);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3308      	adds	r3, #8
 8007f12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f14:	623a      	str	r2, [r7, #32]
 8007f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	69f9      	ldr	r1, [r7, #28]
 8007f1a:	6a3a      	ldr	r2, [r7, #32]
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e5      	bne.n	8007ef4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3758      	adds	r7, #88	@ 0x58
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	0800808f 	.word	0x0800808f
 8007f38:	080081bb 	.word	0x080081bb
 8007f3c:	080081f9 	.word	0x080081f9

08007f40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b08f      	sub	sp, #60	@ 0x3c
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f68:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e6      	bne.n	8007f48 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3308      	adds	r3, #8
 8007f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f9a:	61ba      	str	r2, [r7, #24]
 8007f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6979      	ldr	r1, [r7, #20]
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e5      	bne.n	8007f7a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007fb6:	bf00      	nop
 8007fb8:	373c      	adds	r7, #60	@ 0x3c
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b095      	sub	sp, #84	@ 0x54
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e6      	bne.n	8007fca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	61fb      	str	r3, [r7, #28]
   return(result);
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008012:	f023 0301 	bic.w	r3, r3, #1
 8008016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008020:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008022:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e3      	bne.n	8007ffc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008038:	2b01      	cmp	r3, #1
 800803a:	d118      	bne.n	800806e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	60bb      	str	r3, [r7, #8]
   return(result);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f023 0310 	bic.w	r3, r3, #16
 8008050:	647b      	str	r3, [r7, #68]	@ 0x44
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800805a:	61bb      	str	r3, [r7, #24]
 800805c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6979      	ldr	r1, [r7, #20]
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	613b      	str	r3, [r7, #16]
   return(result);
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e6      	bne.n	800803c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2220      	movs	r2, #32
 8008072:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008082:	bf00      	nop
 8008084:	3754      	adds	r7, #84	@ 0x54
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b09c      	sub	sp, #112	@ 0x70
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d171      	bne.n	800818e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80080aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80080c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80080de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e6      	bne.n	80080b2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3308      	adds	r3, #8
 80080ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f6:	f023 0301 	bic.w	r3, r3, #1
 80080fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80080fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3308      	adds	r3, #8
 8008102:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008104:	647a      	str	r2, [r7, #68]	@ 0x44
 8008106:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008108:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800810a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800810c:	e841 2300 	strex	r3, r2, [r1]
 8008110:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e5      	bne.n	80080e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3308      	adds	r3, #8
 800811e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	623b      	str	r3, [r7, #32]
   return(result);
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800812e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008138:	633a      	str	r2, [r7, #48]	@ 0x30
 800813a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800813e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e5      	bne.n	8008118 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800814c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800814e:	2220      	movs	r2, #32
 8008150:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008158:	2b01      	cmp	r3, #1
 800815a:	d118      	bne.n	800818e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800815c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	60fb      	str	r3, [r7, #12]
   return(result);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f023 0310 	bic.w	r3, r3, #16
 8008170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800817a:	61fb      	str	r3, [r7, #28]
 800817c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	69b9      	ldr	r1, [r7, #24]
 8008180:	69fa      	ldr	r2, [r7, #28]
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	617b      	str	r3, [r7, #20]
   return(result);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e6      	bne.n	800815c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800818e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008190:	2200      	movs	r2, #0
 8008192:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008198:	2b01      	cmp	r3, #1
 800819a:	d107      	bne.n	80081ac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800819c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800819e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081a2:	4619      	mov	r1, r3
 80081a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80081a6:	f7f9 faf9 	bl	800179c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081aa:	e002      	b.n	80081b2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80081ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80081ae:	f7ff f94d 	bl	800744c <HAL_UART_RxCpltCallback>
}
 80081b2:	bf00      	nop
 80081b4:	3770      	adds	r7, #112	@ 0x70
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d109      	bne.n	80081ea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	b29b      	uxth	r3, r3
 80081e0:	4619      	mov	r1, r3
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f7f9 fada 	bl	800179c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081e8:	e002      	b.n	80081f0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7ff f938 	bl	8007460 <HAL_UART_RxHalfCpltCallback>
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008204:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800820c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008214:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008220:	2b80      	cmp	r3, #128	@ 0x80
 8008222:	d109      	bne.n	8008238 <UART_DMAError+0x40>
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2b21      	cmp	r3, #33	@ 0x21
 8008228:	d106      	bne.n	8008238 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2200      	movs	r2, #0
 800822e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008232:	6978      	ldr	r0, [r7, #20]
 8008234:	f7ff fe84 	bl	8007f40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008242:	2b40      	cmp	r3, #64	@ 0x40
 8008244:	d109      	bne.n	800825a <UART_DMAError+0x62>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b22      	cmp	r3, #34	@ 0x22
 800824a:	d106      	bne.n	800825a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2200      	movs	r2, #0
 8008250:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008254:	6978      	ldr	r0, [r7, #20]
 8008256:	f7ff feb4 	bl	8007fc2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008260:	f043 0210 	orr.w	r2, r3, #16
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800826a:	6978      	ldr	r0, [r7, #20]
 800826c:	f7ff f902 	bl	8007474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008270:	bf00      	nop
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7ff f8ec 	bl	8007474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082c0:	61fb      	str	r3, [r7, #28]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	61bb      	str	r3, [r7, #24]
 80082cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6979      	ldr	r1, [r7, #20]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	613b      	str	r3, [r7, #16]
   return(result);
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e6      	bne.n	80082ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff f8a3 	bl	8007438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082f2:	bf00      	nop
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800832a:	bf00      	nop
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008336:	b480      	push	{r7}
 8008338:	b085      	sub	sp, #20
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_UARTEx_DisableFifoMode+0x16>
 8008348:	2302      	movs	r3, #2
 800834a:	e027      	b.n	800839c <HAL_UARTEx_DisableFifoMode+0x66>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2224      	movs	r2, #36	@ 0x24
 8008358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0201 	bic.w	r2, r2, #1
 8008372:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800837a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083bc:	2302      	movs	r3, #2
 80083be:	e02d      	b.n	800841c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2224      	movs	r2, #36	@ 0x24
 80083cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0201 	bic.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f8a3 	bl	8008548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008434:	2b01      	cmp	r3, #1
 8008436:	d101      	bne.n	800843c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008438:	2302      	movs	r3, #2
 800843a:	e02d      	b.n	8008498 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2224      	movs	r2, #36	@ 0x24
 8008448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0201 	bic.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f865 	bl	8008548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2220      	movs	r2, #32
 800848a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08c      	sub	sp, #48	@ 0x30
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	d142      	bne.n	800853e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e03b      	b.n	8008540 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	461a      	mov	r2, r3
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f7ff fc8a 	bl	8007df4 <UART_Start_Receive_DMA>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80084e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d124      	bne.n	8008538 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d11d      	bne.n	8008532 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2210      	movs	r2, #16
 80084fc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	617b      	str	r3, [r7, #20]
   return(result);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	f043 0310 	orr.w	r3, r3, #16
 8008512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851c:	627b      	str	r3, [r7, #36]	@ 0x24
 800851e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	6a39      	ldr	r1, [r7, #32]
 8008522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	61fb      	str	r3, [r7, #28]
   return(result);
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e6      	bne.n	80084fe <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008530:	e002      	b.n	8008538 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800853c:	e000      	b.n	8008540 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800853e:	2302      	movs	r3, #2
  }
}
 8008540:	4618      	mov	r0, r3
 8008542:	3730      	adds	r7, #48	@ 0x30
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008554:	2b00      	cmp	r3, #0
 8008556:	d108      	bne.n	800856a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008568:	e031      	b.n	80085ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800856a:	2308      	movs	r3, #8
 800856c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800856e:	2308      	movs	r3, #8
 8008570:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	0e5b      	lsrs	r3, r3, #25
 800857a:	b2db      	uxtb	r3, r3
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	0f5b      	lsrs	r3, r3, #29
 800858a:	b2db      	uxtb	r3, r3
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	7b3a      	ldrb	r2, [r7, #12]
 8008596:	4911      	ldr	r1, [pc, #68]	@ (80085dc <UARTEx_SetNbDataToProcess+0x94>)
 8008598:	5c8a      	ldrb	r2, [r1, r2]
 800859a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800859e:	7b3a      	ldrb	r2, [r7, #12]
 80085a0:	490f      	ldr	r1, [pc, #60]	@ (80085e0 <UARTEx_SetNbDataToProcess+0x98>)
 80085a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	7b7a      	ldrb	r2, [r7, #13]
 80085b4:	4909      	ldr	r1, [pc, #36]	@ (80085dc <UARTEx_SetNbDataToProcess+0x94>)
 80085b6:	5c8a      	ldrb	r2, [r1, r2]
 80085b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085bc:	7b7a      	ldrb	r2, [r7, #13]
 80085be:	4908      	ldr	r1, [pc, #32]	@ (80085e0 <UARTEx_SetNbDataToProcess+0x98>)
 80085c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	08008a80 	.word	0x08008a80
 80085e0:	08008a88 	.word	0x08008a88

080085e4 <_ZdlPvj>:
 80085e4:	f000 b875 	b.w	80086d2 <_ZdlPv>

080085e8 <_Znwj>:
 80085e8:	2801      	cmp	r0, #1
 80085ea:	bf38      	it	cc
 80085ec:	2001      	movcc	r0, #1
 80085ee:	b510      	push	{r4, lr}
 80085f0:	4604      	mov	r4, r0
 80085f2:	4620      	mov	r0, r4
 80085f4:	f000 f880 	bl	80086f8 <malloc>
 80085f8:	b100      	cbz	r0, 80085fc <_Znwj+0x14>
 80085fa:	bd10      	pop	{r4, pc}
 80085fc:	f000 f86c 	bl	80086d8 <_ZSt15get_new_handlerv>
 8008600:	b908      	cbnz	r0, 8008606 <_Znwj+0x1e>
 8008602:	f000 f871 	bl	80086e8 <abort>
 8008606:	4780      	blx	r0
 8008608:	e7f3      	b.n	80085f2 <_Znwj+0xa>

0800860a <_ZNSaIcEC1Ev>:
 800860a:	4770      	bx	lr

0800860c <_ZNSaIcED1Ev>:
 800860c:	4770      	bx	lr

0800860e <_ZSt17__throw_bad_allocv>:
 800860e:	b508      	push	{r3, lr}
 8008610:	f000 f86a 	bl	80086e8 <abort>

08008614 <_ZSt20__throw_length_errorPKc>:
 8008614:	b508      	push	{r3, lr}
 8008616:	f000 f867 	bl	80086e8 <abort>

0800861a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800861a:	b10a      	cbz	r2, 8008620 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800861c:	f000 b92a 	b.w	8008874 <memcmp>
 8008620:	4610      	mov	r0, r2
 8008622:	4770      	bx	lr

08008624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8008624:	6001      	str	r1, [r0, #0]
 8008626:	4770      	bx	lr

08008628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8008628:	6800      	ldr	r0, [r0, #0]
 800862a:	4770      	bx	lr

0800862c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800862c:	3008      	adds	r0, #8
 800862e:	4770      	bx	lr

08008630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8008630:	6081      	str	r1, [r0, #8]
 8008632:	4770      	bx	lr

08008634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8008634:	6803      	ldr	r3, [r0, #0]
 8008636:	6041      	str	r1, [r0, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	545a      	strb	r2, [r3, r1]
 800863c:	4770      	bx	lr

0800863e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800863e:	f850 3b08 	ldr.w	r3, [r0], #8
 8008642:	1a1b      	subs	r3, r3, r0
 8008644:	4258      	negs	r0, r3
 8008646:	4158      	adcs	r0, r3
 8008648:	4770      	bx	lr
	...

0800864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800864c:	b508      	push	{r3, lr}
 800864e:	680b      	ldr	r3, [r1, #0]
 8008650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008654:	d302      	bcc.n	800865c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8008656:	480d      	ldr	r0, [pc, #52]	@ (800868c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008658:	f7ff ffdc 	bl	8008614 <_ZSt20__throw_length_errorPKc>
 800865c:	4293      	cmp	r3, r2
 800865e:	d90b      	bls.n	8008678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008660:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8008664:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008668:	d206      	bcs.n	8008678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800866a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800866e:	bf2a      	itet	cs
 8008670:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8008674:	6008      	strcc	r0, [r1, #0]
 8008676:	600b      	strcs	r3, [r1, #0]
 8008678:	6808      	ldr	r0, [r1, #0]
 800867a:	3001      	adds	r0, #1
 800867c:	d501      	bpl.n	8008682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800867e:	f7ff ffc6 	bl	800860e <_ZSt17__throw_bad_allocv>
 8008682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008686:	f7ff bfaf 	b.w	80085e8 <_Znwj>
 800868a:	bf00      	nop
 800868c:	08008a90 	.word	0x08008a90

08008690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008690:	b510      	push	{r4, lr}
 8008692:	4604      	mov	r4, r0
 8008694:	f7ff ffd3 	bl	800863e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8008698:	b920      	cbnz	r0, 80086a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800869a:	6820      	ldr	r0, [r4, #0]
 800869c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a0:	f000 b817 	b.w	80086d2 <_ZdlPv>
 80086a4:	bd10      	pop	{r4, pc}

080086a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80086a6:	b510      	push	{r4, lr}
 80086a8:	4604      	mov	r4, r0
 80086aa:	f7ff fff1 	bl	8008690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80086ae:	4620      	mov	r0, r4
 80086b0:	bd10      	pop	{r4, pc}

080086b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 80086b2:	b538      	push	{r3, r4, r5, lr}
 80086b4:	6845      	ldr	r5, [r0, #4]
 80086b6:	684c      	ldr	r4, [r1, #4]
 80086b8:	6800      	ldr	r0, [r0, #0]
 80086ba:	6809      	ldr	r1, [r1, #0]
 80086bc:	42a5      	cmp	r5, r4
 80086be:	462a      	mov	r2, r5
 80086c0:	bf28      	it	cs
 80086c2:	4622      	movcs	r2, r4
 80086c4:	f7ff ffa9 	bl	800861a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80086c8:	b900      	cbnz	r0, 80086cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 80086ca:	1b28      	subs	r0, r5, r4
 80086cc:	bd38      	pop	{r3, r4, r5, pc}

080086ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80086ce:	6001      	str	r1, [r0, #0]
 80086d0:	4770      	bx	lr

080086d2 <_ZdlPv>:
 80086d2:	f000 b819 	b.w	8008708 <free>
	...

080086d8 <_ZSt15get_new_handlerv>:
 80086d8:	4b02      	ldr	r3, [pc, #8]	@ (80086e4 <_ZSt15get_new_handlerv+0xc>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	f3bf 8f5b 	dmb	ish
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	2000070c 	.word	0x2000070c

080086e8 <abort>:
 80086e8:	b508      	push	{r3, lr}
 80086ea:	2006      	movs	r0, #6
 80086ec:	f000 f902 	bl	80088f4 <raise>
 80086f0:	2001      	movs	r0, #1
 80086f2:	f7f8 fee5 	bl	80014c0 <_exit>
	...

080086f8 <malloc>:
 80086f8:	4b02      	ldr	r3, [pc, #8]	@ (8008704 <malloc+0xc>)
 80086fa:	4601      	mov	r1, r0
 80086fc:	6818      	ldr	r0, [r3, #0]
 80086fe:	f000 b82d 	b.w	800875c <_malloc_r>
 8008702:	bf00      	nop
 8008704:	20000014 	.word	0x20000014

08008708 <free>:
 8008708:	4b02      	ldr	r3, [pc, #8]	@ (8008714 <free+0xc>)
 800870a:	4601      	mov	r1, r0
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	f000 b949 	b.w	80089a4 <_free_r>
 8008712:	bf00      	nop
 8008714:	20000014 	.word	0x20000014

08008718 <sbrk_aligned>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	4e0f      	ldr	r6, [pc, #60]	@ (8008758 <sbrk_aligned+0x40>)
 800871c:	460c      	mov	r4, r1
 800871e:	6831      	ldr	r1, [r6, #0]
 8008720:	4605      	mov	r5, r0
 8008722:	b911      	cbnz	r1, 800872a <sbrk_aligned+0x12>
 8008724:	f000 f902 	bl	800892c <_sbrk_r>
 8008728:	6030      	str	r0, [r6, #0]
 800872a:	4621      	mov	r1, r4
 800872c:	4628      	mov	r0, r5
 800872e:	f000 f8fd 	bl	800892c <_sbrk_r>
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	d103      	bne.n	800873e <sbrk_aligned+0x26>
 8008736:	f04f 34ff 	mov.w	r4, #4294967295
 800873a:	4620      	mov	r0, r4
 800873c:	bd70      	pop	{r4, r5, r6, pc}
 800873e:	1cc4      	adds	r4, r0, #3
 8008740:	f024 0403 	bic.w	r4, r4, #3
 8008744:	42a0      	cmp	r0, r4
 8008746:	d0f8      	beq.n	800873a <sbrk_aligned+0x22>
 8008748:	1a21      	subs	r1, r4, r0
 800874a:	4628      	mov	r0, r5
 800874c:	f000 f8ee 	bl	800892c <_sbrk_r>
 8008750:	3001      	adds	r0, #1
 8008752:	d1f2      	bne.n	800873a <sbrk_aligned+0x22>
 8008754:	e7ef      	b.n	8008736 <sbrk_aligned+0x1e>
 8008756:	bf00      	nop
 8008758:	20000710 	.word	0x20000710

0800875c <_malloc_r>:
 800875c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008760:	1ccd      	adds	r5, r1, #3
 8008762:	f025 0503 	bic.w	r5, r5, #3
 8008766:	3508      	adds	r5, #8
 8008768:	2d0c      	cmp	r5, #12
 800876a:	bf38      	it	cc
 800876c:	250c      	movcc	r5, #12
 800876e:	2d00      	cmp	r5, #0
 8008770:	4606      	mov	r6, r0
 8008772:	db01      	blt.n	8008778 <_malloc_r+0x1c>
 8008774:	42a9      	cmp	r1, r5
 8008776:	d904      	bls.n	8008782 <_malloc_r+0x26>
 8008778:	230c      	movs	r3, #12
 800877a:	6033      	str	r3, [r6, #0]
 800877c:	2000      	movs	r0, #0
 800877e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008782:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008858 <_malloc_r+0xfc>
 8008786:	f000 f869 	bl	800885c <__malloc_lock>
 800878a:	f8d8 3000 	ldr.w	r3, [r8]
 800878e:	461c      	mov	r4, r3
 8008790:	bb44      	cbnz	r4, 80087e4 <_malloc_r+0x88>
 8008792:	4629      	mov	r1, r5
 8008794:	4630      	mov	r0, r6
 8008796:	f7ff ffbf 	bl	8008718 <sbrk_aligned>
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	4604      	mov	r4, r0
 800879e:	d158      	bne.n	8008852 <_malloc_r+0xf6>
 80087a0:	f8d8 4000 	ldr.w	r4, [r8]
 80087a4:	4627      	mov	r7, r4
 80087a6:	2f00      	cmp	r7, #0
 80087a8:	d143      	bne.n	8008832 <_malloc_r+0xd6>
 80087aa:	2c00      	cmp	r4, #0
 80087ac:	d04b      	beq.n	8008846 <_malloc_r+0xea>
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	4639      	mov	r1, r7
 80087b2:	4630      	mov	r0, r6
 80087b4:	eb04 0903 	add.w	r9, r4, r3
 80087b8:	f000 f8b8 	bl	800892c <_sbrk_r>
 80087bc:	4581      	cmp	r9, r0
 80087be:	d142      	bne.n	8008846 <_malloc_r+0xea>
 80087c0:	6821      	ldr	r1, [r4, #0]
 80087c2:	1a6d      	subs	r5, r5, r1
 80087c4:	4629      	mov	r1, r5
 80087c6:	4630      	mov	r0, r6
 80087c8:	f7ff ffa6 	bl	8008718 <sbrk_aligned>
 80087cc:	3001      	adds	r0, #1
 80087ce:	d03a      	beq.n	8008846 <_malloc_r+0xea>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	442b      	add	r3, r5
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	f8d8 3000 	ldr.w	r3, [r8]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	bb62      	cbnz	r2, 8008838 <_malloc_r+0xdc>
 80087de:	f8c8 7000 	str.w	r7, [r8]
 80087e2:	e00f      	b.n	8008804 <_malloc_r+0xa8>
 80087e4:	6822      	ldr	r2, [r4, #0]
 80087e6:	1b52      	subs	r2, r2, r5
 80087e8:	d420      	bmi.n	800882c <_malloc_r+0xd0>
 80087ea:	2a0b      	cmp	r2, #11
 80087ec:	d917      	bls.n	800881e <_malloc_r+0xc2>
 80087ee:	1961      	adds	r1, r4, r5
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	6025      	str	r5, [r4, #0]
 80087f4:	bf18      	it	ne
 80087f6:	6059      	strne	r1, [r3, #4]
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	bf08      	it	eq
 80087fc:	f8c8 1000 	streq.w	r1, [r8]
 8008800:	5162      	str	r2, [r4, r5]
 8008802:	604b      	str	r3, [r1, #4]
 8008804:	4630      	mov	r0, r6
 8008806:	f000 f82f 	bl	8008868 <__malloc_unlock>
 800880a:	f104 000b 	add.w	r0, r4, #11
 800880e:	1d23      	adds	r3, r4, #4
 8008810:	f020 0007 	bic.w	r0, r0, #7
 8008814:	1ac2      	subs	r2, r0, r3
 8008816:	bf1c      	itt	ne
 8008818:	1a1b      	subne	r3, r3, r0
 800881a:	50a3      	strne	r3, [r4, r2]
 800881c:	e7af      	b.n	800877e <_malloc_r+0x22>
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	42a3      	cmp	r3, r4
 8008822:	bf0c      	ite	eq
 8008824:	f8c8 2000 	streq.w	r2, [r8]
 8008828:	605a      	strne	r2, [r3, #4]
 800882a:	e7eb      	b.n	8008804 <_malloc_r+0xa8>
 800882c:	4623      	mov	r3, r4
 800882e:	6864      	ldr	r4, [r4, #4]
 8008830:	e7ae      	b.n	8008790 <_malloc_r+0x34>
 8008832:	463c      	mov	r4, r7
 8008834:	687f      	ldr	r7, [r7, #4]
 8008836:	e7b6      	b.n	80087a6 <_malloc_r+0x4a>
 8008838:	461a      	mov	r2, r3
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	42a3      	cmp	r3, r4
 800883e:	d1fb      	bne.n	8008838 <_malloc_r+0xdc>
 8008840:	2300      	movs	r3, #0
 8008842:	6053      	str	r3, [r2, #4]
 8008844:	e7de      	b.n	8008804 <_malloc_r+0xa8>
 8008846:	230c      	movs	r3, #12
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	4630      	mov	r0, r6
 800884c:	f000 f80c 	bl	8008868 <__malloc_unlock>
 8008850:	e794      	b.n	800877c <_malloc_r+0x20>
 8008852:	6005      	str	r5, [r0, #0]
 8008854:	e7d6      	b.n	8008804 <_malloc_r+0xa8>
 8008856:	bf00      	nop
 8008858:	20000714 	.word	0x20000714

0800885c <__malloc_lock>:
 800885c:	4801      	ldr	r0, [pc, #4]	@ (8008864 <__malloc_lock+0x8>)
 800885e:	f000 b89f 	b.w	80089a0 <__retarget_lock_acquire_recursive>
 8008862:	bf00      	nop
 8008864:	20000854 	.word	0x20000854

08008868 <__malloc_unlock>:
 8008868:	4801      	ldr	r0, [pc, #4]	@ (8008870 <__malloc_unlock+0x8>)
 800886a:	f000 b89a 	b.w	80089a2 <__retarget_lock_release_recursive>
 800886e:	bf00      	nop
 8008870:	20000854 	.word	0x20000854

08008874 <memcmp>:
 8008874:	b510      	push	{r4, lr}
 8008876:	3901      	subs	r1, #1
 8008878:	4402      	add	r2, r0
 800887a:	4290      	cmp	r0, r2
 800887c:	d101      	bne.n	8008882 <memcmp+0xe>
 800887e:	2000      	movs	r0, #0
 8008880:	e005      	b.n	800888e <memcmp+0x1a>
 8008882:	7803      	ldrb	r3, [r0, #0]
 8008884:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008888:	42a3      	cmp	r3, r4
 800888a:	d001      	beq.n	8008890 <memcmp+0x1c>
 800888c:	1b18      	subs	r0, r3, r4
 800888e:	bd10      	pop	{r4, pc}
 8008890:	3001      	adds	r0, #1
 8008892:	e7f2      	b.n	800887a <memcmp+0x6>

08008894 <memset>:
 8008894:	4402      	add	r2, r0
 8008896:	4603      	mov	r3, r0
 8008898:	4293      	cmp	r3, r2
 800889a:	d100      	bne.n	800889e <memset+0xa>
 800889c:	4770      	bx	lr
 800889e:	f803 1b01 	strb.w	r1, [r3], #1
 80088a2:	e7f9      	b.n	8008898 <memset+0x4>

080088a4 <_raise_r>:
 80088a4:	291f      	cmp	r1, #31
 80088a6:	b538      	push	{r3, r4, r5, lr}
 80088a8:	4605      	mov	r5, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	d904      	bls.n	80088b8 <_raise_r+0x14>
 80088ae:	2316      	movs	r3, #22
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	f04f 30ff 	mov.w	r0, #4294967295
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088ba:	b112      	cbz	r2, 80088c2 <_raise_r+0x1e>
 80088bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088c0:	b94b      	cbnz	r3, 80088d6 <_raise_r+0x32>
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 f830 	bl	8008928 <_getpid_r>
 80088c8:	4622      	mov	r2, r4
 80088ca:	4601      	mov	r1, r0
 80088cc:	4628      	mov	r0, r5
 80088ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088d2:	f000 b817 	b.w	8008904 <_kill_r>
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d00a      	beq.n	80088f0 <_raise_r+0x4c>
 80088da:	1c59      	adds	r1, r3, #1
 80088dc:	d103      	bne.n	80088e6 <_raise_r+0x42>
 80088de:	2316      	movs	r3, #22
 80088e0:	6003      	str	r3, [r0, #0]
 80088e2:	2001      	movs	r0, #1
 80088e4:	e7e7      	b.n	80088b6 <_raise_r+0x12>
 80088e6:	2100      	movs	r1, #0
 80088e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088ec:	4620      	mov	r0, r4
 80088ee:	4798      	blx	r3
 80088f0:	2000      	movs	r0, #0
 80088f2:	e7e0      	b.n	80088b6 <_raise_r+0x12>

080088f4 <raise>:
 80088f4:	4b02      	ldr	r3, [pc, #8]	@ (8008900 <raise+0xc>)
 80088f6:	4601      	mov	r1, r0
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	f7ff bfd3 	b.w	80088a4 <_raise_r>
 80088fe:	bf00      	nop
 8008900:	20000014 	.word	0x20000014

08008904 <_kill_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4d07      	ldr	r5, [pc, #28]	@ (8008924 <_kill_r+0x20>)
 8008908:	2300      	movs	r3, #0
 800890a:	4604      	mov	r4, r0
 800890c:	4608      	mov	r0, r1
 800890e:	4611      	mov	r1, r2
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	f7f8 fdc5 	bl	80014a0 <_kill>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d102      	bne.n	8008920 <_kill_r+0x1c>
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	b103      	cbz	r3, 8008920 <_kill_r+0x1c>
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	bf00      	nop
 8008924:	20000850 	.word	0x20000850

08008928 <_getpid_r>:
 8008928:	f7f8 bdb2 	b.w	8001490 <_getpid>

0800892c <_sbrk_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d06      	ldr	r5, [pc, #24]	@ (8008948 <_sbrk_r+0x1c>)
 8008930:	2300      	movs	r3, #0
 8008932:	4604      	mov	r4, r0
 8008934:	4608      	mov	r0, r1
 8008936:	602b      	str	r3, [r5, #0]
 8008938:	f7f8 fdce 	bl	80014d8 <_sbrk>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_sbrk_r+0x1a>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_sbrk_r+0x1a>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	20000850 	.word	0x20000850

0800894c <__errno>:
 800894c:	4b01      	ldr	r3, [pc, #4]	@ (8008954 <__errno+0x8>)
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20000014 	.word	0x20000014

08008958 <__libc_init_array>:
 8008958:	b570      	push	{r4, r5, r6, lr}
 800895a:	4d0d      	ldr	r5, [pc, #52]	@ (8008990 <__libc_init_array+0x38>)
 800895c:	4c0d      	ldr	r4, [pc, #52]	@ (8008994 <__libc_init_array+0x3c>)
 800895e:	1b64      	subs	r4, r4, r5
 8008960:	10a4      	asrs	r4, r4, #2
 8008962:	2600      	movs	r6, #0
 8008964:	42a6      	cmp	r6, r4
 8008966:	d109      	bne.n	800897c <__libc_init_array+0x24>
 8008968:	4d0b      	ldr	r5, [pc, #44]	@ (8008998 <__libc_init_array+0x40>)
 800896a:	4c0c      	ldr	r4, [pc, #48]	@ (800899c <__libc_init_array+0x44>)
 800896c:	f000 f864 	bl	8008a38 <_init>
 8008970:	1b64      	subs	r4, r4, r5
 8008972:	10a4      	asrs	r4, r4, #2
 8008974:	2600      	movs	r6, #0
 8008976:	42a6      	cmp	r6, r4
 8008978:	d105      	bne.n	8008986 <__libc_init_array+0x2e>
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008980:	4798      	blx	r3
 8008982:	3601      	adds	r6, #1
 8008984:	e7ee      	b.n	8008964 <__libc_init_array+0xc>
 8008986:	f855 3b04 	ldr.w	r3, [r5], #4
 800898a:	4798      	blx	r3
 800898c:	3601      	adds	r6, #1
 800898e:	e7f2      	b.n	8008976 <__libc_init_array+0x1e>
 8008990:	08008ab0 	.word	0x08008ab0
 8008994:	08008ab0 	.word	0x08008ab0
 8008998:	08008ab0 	.word	0x08008ab0
 800899c:	08008ab8 	.word	0x08008ab8

080089a0 <__retarget_lock_acquire_recursive>:
 80089a0:	4770      	bx	lr

080089a2 <__retarget_lock_release_recursive>:
 80089a2:	4770      	bx	lr

080089a4 <_free_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4605      	mov	r5, r0
 80089a8:	2900      	cmp	r1, #0
 80089aa:	d041      	beq.n	8008a30 <_free_r+0x8c>
 80089ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089b0:	1f0c      	subs	r4, r1, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfb8      	it	lt
 80089b6:	18e4      	addlt	r4, r4, r3
 80089b8:	f7ff ff50 	bl	800885c <__malloc_lock>
 80089bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008a34 <_free_r+0x90>)
 80089be:	6813      	ldr	r3, [r2, #0]
 80089c0:	b933      	cbnz	r3, 80089d0 <_free_r+0x2c>
 80089c2:	6063      	str	r3, [r4, #4]
 80089c4:	6014      	str	r4, [r2, #0]
 80089c6:	4628      	mov	r0, r5
 80089c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089cc:	f7ff bf4c 	b.w	8008868 <__malloc_unlock>
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	d908      	bls.n	80089e6 <_free_r+0x42>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	1821      	adds	r1, r4, r0
 80089d8:	428b      	cmp	r3, r1
 80089da:	bf01      	itttt	eq
 80089dc:	6819      	ldreq	r1, [r3, #0]
 80089de:	685b      	ldreq	r3, [r3, #4]
 80089e0:	1809      	addeq	r1, r1, r0
 80089e2:	6021      	streq	r1, [r4, #0]
 80089e4:	e7ed      	b.n	80089c2 <_free_r+0x1e>
 80089e6:	461a      	mov	r2, r3
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	b10b      	cbz	r3, 80089f0 <_free_r+0x4c>
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	d9fa      	bls.n	80089e6 <_free_r+0x42>
 80089f0:	6811      	ldr	r1, [r2, #0]
 80089f2:	1850      	adds	r0, r2, r1
 80089f4:	42a0      	cmp	r0, r4
 80089f6:	d10b      	bne.n	8008a10 <_free_r+0x6c>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	4401      	add	r1, r0
 80089fc:	1850      	adds	r0, r2, r1
 80089fe:	4283      	cmp	r3, r0
 8008a00:	6011      	str	r1, [r2, #0]
 8008a02:	d1e0      	bne.n	80089c6 <_free_r+0x22>
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	6053      	str	r3, [r2, #4]
 8008a0a:	4408      	add	r0, r1
 8008a0c:	6010      	str	r0, [r2, #0]
 8008a0e:	e7da      	b.n	80089c6 <_free_r+0x22>
 8008a10:	d902      	bls.n	8008a18 <_free_r+0x74>
 8008a12:	230c      	movs	r3, #12
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	e7d6      	b.n	80089c6 <_free_r+0x22>
 8008a18:	6820      	ldr	r0, [r4, #0]
 8008a1a:	1821      	adds	r1, r4, r0
 8008a1c:	428b      	cmp	r3, r1
 8008a1e:	bf04      	itt	eq
 8008a20:	6819      	ldreq	r1, [r3, #0]
 8008a22:	685b      	ldreq	r3, [r3, #4]
 8008a24:	6063      	str	r3, [r4, #4]
 8008a26:	bf04      	itt	eq
 8008a28:	1809      	addeq	r1, r1, r0
 8008a2a:	6021      	streq	r1, [r4, #0]
 8008a2c:	6054      	str	r4, [r2, #4]
 8008a2e:	e7ca      	b.n	80089c6 <_free_r+0x22>
 8008a30:	bd38      	pop	{r3, r4, r5, pc}
 8008a32:	bf00      	nop
 8008a34:	20000714 	.word	0x20000714

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
