
homework1_calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003f68  08003f68  00004f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa8  08003fa8  00005190  2**0
                  CONTENTS
  4 .ARM          00000000  08003fa8  08003fa8  00005190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fa8  08003fa8  00005190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fac  08003fac  00004fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08003fb0  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000190  08004140  00005190  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  08004140  000057c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004cb1  00000000  00000000  000051c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012b8  00000000  00000000  00009e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  0000b130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000488  00000000  00000000  0000b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bbc  00000000  00000000  0000bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000065a0  00000000  00000000  0002f79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e275c  00000000  00000000  00035d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118498  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d58  00000000  00000000  001184dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011a234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003f4c 	.word	0x08003f4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	08003f4c 	.word	0x08003f4c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <getHead>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

double getHead(void){
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	if (stack_head!=-1)
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <getHead+0x38>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d007      	beq.n	8000b9e <getHead+0x1e>
	{
		return stack[stack_head];
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <getHead+0x38>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <getHead+0x3c>)
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	4413      	add	r3, r2
 8000b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9c:	e002      	b.n	8000ba4 <getHead+0x24>
	}
	else
		return -1;
 8000b9e:	f04f 0200 	mov.w	r2, #0
 8000ba2:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <getHead+0x40>)
}
 8000ba4:	ec43 2b17 	vmov	d7, r2, r3
 8000ba8:	eeb0 0a47 	vmov.f32	s0, s14
 8000bac:	eef0 0a67 	vmov.f32	s1, s15
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	20000120 	.word	0x20000120
 8000bbc:	200001b8 	.word	0x200001b8
 8000bc0:	bff00000 	.word	0xbff00000

08000bc4 <isEmpty>:
int isEmpty(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
	if (stack_head == -1)
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <isEmpty+0x20>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d101      	bne.n	8000bd6 <isEmpty+0x12>
	{
		return 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <isEmpty+0x14>
	}
	else
		return 0;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000120 	.word	0x20000120

08000be8 <setxdigit>:
void setxdigit(double num, int x)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	ed87 0b02 	vstr	d0, [r7, #8]
 8000bf2:	6078      	str	r0, [r7, #4]
	while(num < pow(10, x - 1))
 8000bf4:	e00a      	b.n	8000c0c <setxdigit+0x24>
	{
		num *= 10;
 8000bf6:	f04f 0200 	mov.w	r2, #0
 8000bfa:	4b41      	ldr	r3, [pc, #260]	@ (8000d00 <setxdigit+0x118>)
 8000bfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c00:	f7ff fcc6 	bl	8000590 <__aeabi_dmul>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while(num < pow(10, x - 1))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fc53 	bl	80004bc <__aeabi_i2d>
 8000c16:	4602      	mov	r2, r0
 8000c18:	460b      	mov	r3, r1
 8000c1a:	ec43 2b11 	vmov	d1, r2, r3
 8000c1e:	ed9f 0b36 	vldr	d0, [pc, #216]	@ 8000cf8 <setxdigit+0x110>
 8000c22:	f002 fa33 	bl	800308c <pow>
 8000c26:	ec53 2b10 	vmov	r2, r3, d0
 8000c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c2e:	f7ff ff21 	bl	8000a74 <__aeabi_dcmplt>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1de      	bne.n	8000bf6 <setxdigit+0xe>
	}

	// 将num转换为整数
	int temp = (int)num;
 8000c38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c3c:	f7ff ff58 	bl	8000af0 <__aeabi_d2iz>
 8000c40:	4603      	mov	r3, r0
 8000c42:	61fb      	str	r3, [r7, #28]
	int count = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
	while (temp % 10 == 0 )
 8000c48:	e00a      	b.n	8000c60 <setxdigit+0x78>
	{
		temp /= 10;
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000d04 <setxdigit+0x11c>)
 8000c4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c52:	1092      	asrs	r2, r2, #2
 8000c54:	17db      	asrs	r3, r3, #31
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	61fb      	str	r3, [r7, #28]
		count++;
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
	while (temp % 10 == 0 )
 8000c60:	69f9      	ldr	r1, [r7, #28]
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <setxdigit+0x11c>)
 8000c64:	fb83 2301 	smull	r2, r3, r3, r1
 8000c68:	109a      	asrs	r2, r3, #2
 8000c6a:	17cb      	asrs	r3, r1, #31
 8000c6c:	1ad2      	subs	r2, r2, r3
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	1aca      	subs	r2, r1, r3
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d0e6      	beq.n	8000c4a <setxdigit+0x62>
	}
	int j = count;
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	617b      	str	r3, [r7, #20]
	while ( j > 0)
 8000c80:	e008      	b.n	8000c94 <setxdigit+0xac>
	{
		digits[x - j] = 0; // 0填充
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	4a1f      	ldr	r2, [pc, #124]	@ (8000d08 <setxdigit+0x120>)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	54d1      	strb	r1, [r2, r3]
		j --;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
	while ( j > 0)
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	dcf3      	bgt.n	8000c82 <setxdigit+0x9a>

	}
	// 从最低位开始提取每一位数字
	for (int i = x - 1 - count; i >= 0; --i) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	1e5a      	subs	r2, r3, #1
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	e01f      	b.n	8000ce6 <setxdigit+0xfe>
		digits[j] = temp % 10;
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <setxdigit+0x11c>)
 8000caa:	fb83 1302 	smull	r1, r3, r3, r2
 8000cae:	1099      	asrs	r1, r3, #2
 8000cb0:	17d3      	asrs	r3, r2, #31
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	1ad1      	subs	r1, r2, r3
 8000cbe:	b2c9      	uxtb	r1, r1
 8000cc0:	4a11      	ldr	r2, [pc, #68]	@ (8000d08 <setxdigit+0x120>)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
		temp /= 10;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <setxdigit+0x11c>)
 8000cce:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd2:	1092      	asrs	r2, r2, #2
 8000cd4:	17db      	asrs	r3, r3, #31
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	61fb      	str	r3, [r7, #28]
		j++;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
	for (int i = x - 1 - count; i >= 0; --i) {
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	dadc      	bge.n	8000ca6 <setxdigit+0xbe>
	}
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	40240000 	.word	0x40240000
 8000d00:	40240000 	.word	0x40240000
 8000d04:	66666667 	.word	0x66666667
 8000d08:	200001b0 	.word	0x200001b0

08000d0c <getFirstFourDigits>:
void getFirstFourDigits(double num) {
 8000d0c:	b5b0      	push	{r4, r5, r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	ed87 0b00 	vstr	d0, [r7]
    // 如果数值为负，则取其绝对值
    if (num != fabs(num))
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8000d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d22:	f7ff fe9d 	bl	8000a60 <__aeabi_dcmpeq>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10e      	bne.n	8000d4a <getFirstFourDigits+0x3e>
    {
    	num = fabs(num);
 8000d2c:	683c      	ldr	r4, [r7, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8000d34:	e9c7 4500 	strd	r4, r5, [r7]
    	setxdigit(num, 3);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	ed97 0b00 	vldr	d0, [r7]
 8000d3e:	f7ff ff53 	bl	8000be8 <setxdigit>
    	digits[3] = 36;
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <getFirstFourDigits+0x50>)
 8000d44:	2224      	movs	r2, #36	@ 0x24
 8000d46:	70da      	strb	r2, [r3, #3]
    }
    else
    {
    	setxdigit(num,4);
    }
}
 8000d48:	e004      	b.n	8000d54 <getFirstFourDigits+0x48>
    	setxdigit(num,4);
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	ed97 0b00 	vldr	d0, [r7]
 8000d50:	f7ff ff4a 	bl	8000be8 <setxdigit>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5c:	200001b0 	.word	0x200001b0

08000d60 <get_char>:
uint8_t get_char(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	static int i = 0;
	int j;
	HAL_GPIO_WritePin(rowsport[i], rows[i], GPIO_PIN_SET);
 8000d66:	4b89      	ldr	r3, [pc, #548]	@ (8000f8c <get_char+0x22c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a89      	ldr	r2, [pc, #548]	@ (8000f90 <get_char+0x230>)
 8000d6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d70:	4b86      	ldr	r3, [pc, #536]	@ (8000f8c <get_char+0x22c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a87      	ldr	r2, [pc, #540]	@ (8000f94 <get_char+0x234>)
 8000d76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f001 fb91 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rowsport[(i+1)%5], rows[(i+1)%5], GPIO_PIN_RESET);
 8000d82:	4b82      	ldr	r3, [pc, #520]	@ (8000f8c <get_char+0x22c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	1c59      	adds	r1, r3, #1
 8000d88:	4b83      	ldr	r3, [pc, #524]	@ (8000f98 <get_char+0x238>)
 8000d8a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d8e:	105a      	asrs	r2, r3, #1
 8000d90:	17cb      	asrs	r3, r1, #31
 8000d92:	1ad2      	subs	r2, r2, r3
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	1aca      	subs	r2, r1, r3
 8000d9c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f90 <get_char+0x230>)
 8000d9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000da2:	4b7a      	ldr	r3, [pc, #488]	@ (8000f8c <get_char+0x22c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	1c59      	adds	r1, r3, #1
 8000da8:	4b7b      	ldr	r3, [pc, #492]	@ (8000f98 <get_char+0x238>)
 8000daa:	fb83 2301 	smull	r2, r3, r3, r1
 8000dae:	105a      	asrs	r2, r3, #1
 8000db0:	17cb      	asrs	r3, r1, #31
 8000db2:	1ad2      	subs	r2, r2, r3
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	1aca      	subs	r2, r1, r3
 8000dbc:	4b75      	ldr	r3, [pc, #468]	@ (8000f94 <get_char+0x234>)
 8000dbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f001 fb6d 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rowsport[(i+2)%5], rows[(i+2)%5], GPIO_PIN_RESET);
 8000dca:	4b70      	ldr	r3, [pc, #448]	@ (8000f8c <get_char+0x22c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1c99      	adds	r1, r3, #2
 8000dd0:	4b71      	ldr	r3, [pc, #452]	@ (8000f98 <get_char+0x238>)
 8000dd2:	fb83 2301 	smull	r2, r3, r3, r1
 8000dd6:	105a      	asrs	r2, r3, #1
 8000dd8:	17cb      	asrs	r3, r1, #31
 8000dda:	1ad2      	subs	r2, r2, r3
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	1aca      	subs	r2, r1, r3
 8000de4:	4b6a      	ldr	r3, [pc, #424]	@ (8000f90 <get_char+0x230>)
 8000de6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000dea:	4b68      	ldr	r3, [pc, #416]	@ (8000f8c <get_char+0x22c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1c99      	adds	r1, r3, #2
 8000df0:	4b69      	ldr	r3, [pc, #420]	@ (8000f98 <get_char+0x238>)
 8000df2:	fb83 2301 	smull	r2, r3, r3, r1
 8000df6:	105a      	asrs	r2, r3, #1
 8000df8:	17cb      	asrs	r3, r1, #31
 8000dfa:	1ad2      	subs	r2, r2, r3
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	1aca      	subs	r2, r1, r3
 8000e04:	4b63      	ldr	r3, [pc, #396]	@ (8000f94 <get_char+0x234>)
 8000e06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f001 fb49 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rowsport[(i+3)%5], rows[(i+3)%5], GPIO_PIN_RESET);
 8000e12:	4b5e      	ldr	r3, [pc, #376]	@ (8000f8c <get_char+0x22c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1cd9      	adds	r1, r3, #3
 8000e18:	4b5f      	ldr	r3, [pc, #380]	@ (8000f98 <get_char+0x238>)
 8000e1a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e1e:	105a      	asrs	r2, r3, #1
 8000e20:	17cb      	asrs	r3, r1, #31
 8000e22:	1ad2      	subs	r2, r2, r3
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	1aca      	subs	r2, r1, r3
 8000e2c:	4b58      	ldr	r3, [pc, #352]	@ (8000f90 <get_char+0x230>)
 8000e2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e32:	4b56      	ldr	r3, [pc, #344]	@ (8000f8c <get_char+0x22c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1cd9      	adds	r1, r3, #3
 8000e38:	4b57      	ldr	r3, [pc, #348]	@ (8000f98 <get_char+0x238>)
 8000e3a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e3e:	105a      	asrs	r2, r3, #1
 8000e40:	17cb      	asrs	r3, r1, #31
 8000e42:	1ad2      	subs	r2, r2, r3
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	1aca      	subs	r2, r1, r3
 8000e4c:	4b51      	ldr	r3, [pc, #324]	@ (8000f94 <get_char+0x234>)
 8000e4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	f001 fb25 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rowsport[(i+4)%5], rows[(i+4)%5], GPIO_PIN_RESET);
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f8c <get_char+0x22c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1d19      	adds	r1, r3, #4
 8000e60:	4b4d      	ldr	r3, [pc, #308]	@ (8000f98 <get_char+0x238>)
 8000e62:	fb83 2301 	smull	r2, r3, r3, r1
 8000e66:	105a      	asrs	r2, r3, #1
 8000e68:	17cb      	asrs	r3, r1, #31
 8000e6a:	1ad2      	subs	r2, r2, r3
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	1aca      	subs	r2, r1, r3
 8000e74:	4b46      	ldr	r3, [pc, #280]	@ (8000f90 <get_char+0x230>)
 8000e76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e7a:	4b44      	ldr	r3, [pc, #272]	@ (8000f8c <get_char+0x22c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	1d19      	adds	r1, r3, #4
 8000e80:	4b45      	ldr	r3, [pc, #276]	@ (8000f98 <get_char+0x238>)
 8000e82:	fb83 2301 	smull	r2, r3, r3, r1
 8000e86:	105a      	asrs	r2, r3, #1
 8000e88:	17cb      	asrs	r3, r1, #31
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	1aca      	subs	r2, r1, r3
 8000e94:	4b3f      	ldr	r3, [pc, #252]	@ (8000f94 <get_char+0x234>)
 8000e96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f001 fb01 	bl	80024a4 <HAL_GPIO_WritePin>
	for (j = 0; j < 3; ++j)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	e033      	b.n	8000f10 <get_char+0x1b0>
	{
		if (HAL_GPIO_ReadPin(colsport[j], cols[j]) == GPIO_PIN_SET)
 8000ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8000f9c <get_char+0x23c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eb0:	493b      	ldr	r1, [pc, #236]	@ (8000fa0 <get_char+0x240>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4610      	mov	r0, r2
 8000ebc:	f001 fada 	bl	8002474 <HAL_GPIO_ReadPin>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d121      	bne.n	8000f0a <get_char+0x1aa>
		{
			HAL_GPIO_WritePin(rowsport[i], rows[i], GPIO_PIN_RESET);
 8000ec6:	4b31      	ldr	r3, [pc, #196]	@ (8000f8c <get_char+0x22c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a31      	ldr	r2, [pc, #196]	@ (8000f90 <get_char+0x230>)
 8000ecc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f8c <get_char+0x22c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8000f94 <get_char+0x234>)
 8000ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	f001 fae1 	bl	80024a4 <HAL_GPIO_WritePin>
			if (flag != 0)
 8000ee2:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <get_char+0x244>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <get_char+0x18e>
				return '&';
 8000eea:	2326      	movs	r3, #38	@ 0x26
 8000eec:	e049      	b.n	8000f82 <get_char+0x222>
			flag = 1 ;
 8000eee:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <get_char+0x244>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
			return keyboard[i][j];
 8000ef4:	4b25      	ldr	r3, [pc, #148]	@ (8000f8c <get_char+0x22c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	492b      	ldr	r1, [pc, #172]	@ (8000fa8 <get_char+0x248>)
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	18ca      	adds	r2, r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	e03b      	b.n	8000f82 <get_char+0x222>
	for (j = 0; j < 3; ++j)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	ddc8      	ble.n	8000ea8 <get_char+0x148>
		}
	}
	++ i;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <get_char+0x22c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f8c <get_char+0x22c>)
 8000f1e:	6013      	str	r3, [r2, #0]
	if(i == 5)i = 0;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <get_char+0x22c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d102      	bne.n	8000f2e <get_char+0x1ce>
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <get_char+0x22c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET)
 8000f2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f32:	481e      	ldr	r0, [pc, #120]	@ (8000fac <get_char+0x24c>)
 8000f34:	f001 fa9e 	bl	8002474 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10b      	bne.n	8000f56 <get_char+0x1f6>
	{
		if (flag != 0)
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <get_char+0x244>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <get_char+0x1ea>
			return '&';
 8000f46:	2326      	movs	r3, #38	@ 0x26
 8000f48:	e01b      	b.n	8000f82 <get_char+0x222>
		flag = 1;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <get_char+0x244>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
		return keyboard[5][0];
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <get_char+0x248>)
 8000f52:	7bdb      	ldrb	r3, [r3, #15]
 8000f54:	e015      	b.n	8000f82 <get_char+0x222>
	}
	close();
 8000f56:	f000 f82d 	bl	8000fb4 <close>
	if(flag != 0 ) counter++;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <get_char+0x244>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d004      	beq.n	8000f6c <get_char+0x20c>
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <get_char+0x250>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	4a11      	ldr	r2, [pc, #68]	@ (8000fb0 <get_char+0x250>)
 8000f6a:	6013      	str	r3, [r2, #0]
	if(counter == 250) { flag = 0; counter = 0; }
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <get_char+0x250>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2bfa      	cmp	r3, #250	@ 0xfa
 8000f72:	d105      	bne.n	8000f80 <get_char+0x220>
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <get_char+0x244>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <get_char+0x250>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
	return '&';
 8000f80:	2326      	movs	r3, #38	@ 0x26
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000678 	.word	0x20000678
 8000f90:	20000014 	.word	0x20000014
 8000f94:	20000028 	.word	0x20000028
 8000f98:	66666667 	.word	0x66666667
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	200001ac 	.word	0x200001ac
 8000fa8:	200000a4 	.word	0x200000a4
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	200004dc 	.word	0x200004dc

08000fb4 <close>:

void close(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	int i = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(digport[i], digpin[i], GPIO_PIN_RESET);
 8000fbe:	4a7c      	ldr	r2, [pc, #496]	@ (80011b0 <close+0x1fc>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fc6:	4a7b      	ldr	r2, [pc, #492]	@ (80011b4 <close+0x200>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f001 fa67 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(digport[(i + 1) % 4], digpin[(i + 1) % 4], GPIO_PIN_RESET);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	425a      	negs	r2, r3
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	f002 0203 	and.w	r2, r2, #3
 8000fe4:	bf58      	it	pl
 8000fe6:	4253      	negpl	r3, r2
 8000fe8:	4a71      	ldr	r2, [pc, #452]	@ (80011b0 <close+0x1fc>)
 8000fea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	425a      	negs	r2, r3
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	bf58      	it	pl
 8000ffe:	4253      	negpl	r3, r2
 8001000:	4a6c      	ldr	r2, [pc, #432]	@ (80011b4 <close+0x200>)
 8001002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	f001 fa4b 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(digport[(i + 2) % 4], digpin[(i + 2) % 4], GPIO_PIN_RESET);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3302      	adds	r3, #2
 8001012:	425a      	negs	r2, r3
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	bf58      	it	pl
 800101e:	4253      	negpl	r3, r2
 8001020:	4a63      	ldr	r2, [pc, #396]	@ (80011b0 <close+0x1fc>)
 8001022:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3302      	adds	r3, #2
 800102a:	425a      	negs	r2, r3
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	f002 0203 	and.w	r2, r2, #3
 8001034:	bf58      	it	pl
 8001036:	4253      	negpl	r3, r2
 8001038:	4a5e      	ldr	r2, [pc, #376]	@ (80011b4 <close+0x200>)
 800103a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	f001 fa2f 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(digport[(i + 3) % 4], digpin[(i + 3) % 4], GPIO_PIN_RESET);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3303      	adds	r3, #3
 800104a:	425a      	negs	r2, r3
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	bf58      	it	pl
 8001056:	4253      	negpl	r3, r2
 8001058:	4a55      	ldr	r2, [pc, #340]	@ (80011b0 <close+0x1fc>)
 800105a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3303      	adds	r3, #3
 8001062:	425a      	negs	r2, r3
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	f002 0203 	and.w	r2, r2, #3
 800106c:	bf58      	it	pl
 800106e:	4253      	negpl	r3, r2
 8001070:	4a50      	ldr	r2, [pc, #320]	@ (80011b4 <close+0x200>)
 8001072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001076:	2200      	movs	r2, #0
 8001078:	4619      	mov	r1, r3
 800107a:	f001 fa13 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rowsport[i], rows[i], GPIO_PIN_RESET);
 800107e:	4a4e      	ldr	r2, [pc, #312]	@ (80011b8 <close+0x204>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001086:	4a4d      	ldr	r2, [pc, #308]	@ (80011bc <close+0x208>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	f001 fa07 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rowsport[(i+1)%5], rows[(i+1)%5], GPIO_PIN_RESET);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1c59      	adds	r1, r3, #1
 800109a:	4b49      	ldr	r3, [pc, #292]	@ (80011c0 <close+0x20c>)
 800109c:	fb83 2301 	smull	r2, r3, r3, r1
 80010a0:	105a      	asrs	r2, r3, #1
 80010a2:	17cb      	asrs	r3, r1, #31
 80010a4:	1ad2      	subs	r2, r2, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	1aca      	subs	r2, r1, r3
 80010ae:	4b42      	ldr	r3, [pc, #264]	@ (80011b8 <close+0x204>)
 80010b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	1c59      	adds	r1, r3, #1
 80010b8:	4b41      	ldr	r3, [pc, #260]	@ (80011c0 <close+0x20c>)
 80010ba:	fb83 2301 	smull	r2, r3, r3, r1
 80010be:	105a      	asrs	r2, r3, #1
 80010c0:	17cb      	asrs	r3, r1, #31
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	1aca      	subs	r2, r1, r3
 80010cc:	4b3b      	ldr	r3, [pc, #236]	@ (80011bc <close+0x208>)
 80010ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	f001 f9e5 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rowsport[(i+2)%5], rows[(i+2)%5], GPIO_PIN_RESET);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1c99      	adds	r1, r3, #2
 80010de:	4b38      	ldr	r3, [pc, #224]	@ (80011c0 <close+0x20c>)
 80010e0:	fb83 2301 	smull	r2, r3, r3, r1
 80010e4:	105a      	asrs	r2, r3, #1
 80010e6:	17cb      	asrs	r3, r1, #31
 80010e8:	1ad2      	subs	r2, r2, r3
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	1aca      	subs	r2, r1, r3
 80010f2:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <close+0x204>)
 80010f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	1c99      	adds	r1, r3, #2
 80010fc:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <close+0x20c>)
 80010fe:	fb83 2301 	smull	r2, r3, r3, r1
 8001102:	105a      	asrs	r2, r3, #1
 8001104:	17cb      	asrs	r3, r1, #31
 8001106:	1ad2      	subs	r2, r2, r3
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	1aca      	subs	r2, r1, r3
 8001110:	4b2a      	ldr	r3, [pc, #168]	@ (80011bc <close+0x208>)
 8001112:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f001 f9c3 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rowsport[(i+3)%5], rows[(i+3)%5], GPIO_PIN_RESET);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	1cd9      	adds	r1, r3, #3
 8001122:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <close+0x20c>)
 8001124:	fb83 2301 	smull	r2, r3, r3, r1
 8001128:	105a      	asrs	r2, r3, #1
 800112a:	17cb      	asrs	r3, r1, #31
 800112c:	1ad2      	subs	r2, r2, r3
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	1aca      	subs	r2, r1, r3
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <close+0x204>)
 8001138:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1cd9      	adds	r1, r3, #3
 8001140:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <close+0x20c>)
 8001142:	fb83 2301 	smull	r2, r3, r3, r1
 8001146:	105a      	asrs	r2, r3, #1
 8001148:	17cb      	asrs	r3, r1, #31
 800114a:	1ad2      	subs	r2, r2, r3
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	1aca      	subs	r2, r1, r3
 8001154:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <close+0x208>)
 8001156:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	f001 f9a1 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rowsport[(i+4)%5], rows[(i+4)%5], GPIO_PIN_RESET);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	1d19      	adds	r1, r3, #4
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <close+0x20c>)
 8001168:	fb83 2301 	smull	r2, r3, r3, r1
 800116c:	105a      	asrs	r2, r3, #1
 800116e:	17cb      	asrs	r3, r1, #31
 8001170:	1ad2      	subs	r2, r2, r3
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	1aca      	subs	r2, r1, r3
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <close+0x204>)
 800117c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1d19      	adds	r1, r3, #4
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <close+0x20c>)
 8001186:	fb83 2301 	smull	r2, r3, r3, r1
 800118a:	105a      	asrs	r2, r3, #1
 800118c:	17cb      	asrs	r3, r1, #31
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	1aca      	subs	r2, r1, r3
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <close+0x208>)
 800119a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	f001 f97f 	bl	80024a4 <HAL_GPIO_WritePin>

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000034 	.word	0x20000034
 80011b4:	20000044 	.word	0x20000044
 80011b8:	20000014 	.word	0x20000014
 80011bc:	20000028 	.word	0x20000028
 80011c0:	66666667 	.word	0x66666667

080011c4 <keep_char>:

void keep_char(uint8_t c)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]

	if (c == '&')
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b26      	cmp	r3, #38	@ 0x26
 80011d2:	d030      	beq.n	8001236 <keep_char+0x72>
		return;
	if (c != '\b' && end < 33 )
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d010      	beq.n	80011fc <keep_char+0x38>
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <keep_char+0x80>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d80c      	bhi.n	80011fc <keep_char+0x38>
	{
		end += 1;
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <keep_char+0x80>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <keep_char+0x80>)
 80011ec:	701a      	strb	r2, [r3, #0]
		expression[end] = c;
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <keep_char+0x80>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <keep_char+0x84>)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	5453      	strb	r3, [r2, r1]
 80011fa:	e012      	b.n	8001222 <keep_char+0x5e>
	}
	 else if (c == '\b' && end > 3)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d10f      	bne.n	8001222 <keep_char+0x5e>
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <keep_char+0x80>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d90b      	bls.n	8001222 <keep_char+0x5e>
	{
		expression[end] = '\b';
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <keep_char+0x80>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <keep_char+0x84>)
 8001212:	2108      	movs	r1, #8
 8001214:	5499      	strb	r1, [r3, r2]
		end --;
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <keep_char+0x80>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	3b01      	subs	r3, #1
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <keep_char+0x80>)
 8001220:	701a      	strb	r2, [r3, #0]
	}
	if (c == 'E')
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b45      	cmp	r3, #69	@ 0x45
 8001226:	d107      	bne.n	8001238 <keep_char+0x74>
	{
		expression[end] = '\0';
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <keep_char+0x80>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <keep_char+0x84>)
 8001230:	2100      	movs	r1, #0
 8001232:	5499      	strb	r1, [r3, r2]
 8001234:	e000      	b.n	8001238 <keep_char+0x74>
		return;
 8001236:	bf00      	nop
	}
	//HAL_Delay(0);
}
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2000011c 	.word	0x2000011c
 8001248:	200000b8 	.word	0x200000b8

0800124c <show_4char>:
        return GPIO_PIN_RESET; // 默认返回RESET，表示无变化或等待下�?变化
    }
}

void show_4char()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	int j;
    static int m = 0;

	HAL_GPIO_WritePin(digport[m], digpin[m], GPIO_PIN_SET);
 8001252:	4b5e      	ldr	r3, [pc, #376]	@ (80013cc <show_4char+0x180>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a5e      	ldr	r2, [pc, #376]	@ (80013d0 <show_4char+0x184>)
 8001258:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800125c:	4b5b      	ldr	r3, [pc, #364]	@ (80013cc <show_4char+0x180>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a5c      	ldr	r2, [pc, #368]	@ (80013d4 <show_4char+0x188>)
 8001262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001266:	2201      	movs	r2, #1
 8001268:	4619      	mov	r1, r3
 800126a:	f001 f91b 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(digport[(m + 1) % 4], digpin[(m + 1) % 4], GPIO_PIN_RESET);
 800126e:	4b57      	ldr	r3, [pc, #348]	@ (80013cc <show_4char+0x180>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	425a      	negs	r2, r3
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	bf58      	it	pl
 8001280:	4253      	negpl	r3, r2
 8001282:	4a53      	ldr	r2, [pc, #332]	@ (80013d0 <show_4char+0x184>)
 8001284:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001288:	4b50      	ldr	r3, [pc, #320]	@ (80013cc <show_4char+0x180>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	425a      	negs	r2, r3
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	f002 0203 	and.w	r2, r2, #3
 8001298:	bf58      	it	pl
 800129a:	4253      	negpl	r3, r2
 800129c:	4a4d      	ldr	r2, [pc, #308]	@ (80013d4 <show_4char+0x188>)
 800129e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	f001 f8fd 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(digport[(m + 2) % 4], digpin[(m + 2) % 4], GPIO_PIN_RESET);
 80012aa:	4b48      	ldr	r3, [pc, #288]	@ (80013cc <show_4char+0x180>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3302      	adds	r3, #2
 80012b0:	425a      	negs	r2, r3
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	bf58      	it	pl
 80012bc:	4253      	negpl	r3, r2
 80012be:	4a44      	ldr	r2, [pc, #272]	@ (80013d0 <show_4char+0x184>)
 80012c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012c4:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <show_4char+0x180>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3302      	adds	r3, #2
 80012ca:	425a      	negs	r2, r3
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	f002 0203 	and.w	r2, r2, #3
 80012d4:	bf58      	it	pl
 80012d6:	4253      	negpl	r3, r2
 80012d8:	4a3e      	ldr	r2, [pc, #248]	@ (80013d4 <show_4char+0x188>)
 80012da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012de:	2200      	movs	r2, #0
 80012e0:	4619      	mov	r1, r3
 80012e2:	f001 f8df 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(digport[(m + 3) % 4], digpin[(m + 3) % 4], GPIO_PIN_RESET);
 80012e6:	4b39      	ldr	r3, [pc, #228]	@ (80013cc <show_4char+0x180>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3303      	adds	r3, #3
 80012ec:	425a      	negs	r2, r3
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	bf58      	it	pl
 80012f8:	4253      	negpl	r3, r2
 80012fa:	4a35      	ldr	r2, [pc, #212]	@ (80013d0 <show_4char+0x184>)
 80012fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001300:	4b32      	ldr	r3, [pc, #200]	@ (80013cc <show_4char+0x180>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3303      	adds	r3, #3
 8001306:	425a      	negs	r2, r3
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	bf58      	it	pl
 8001312:	4253      	negpl	r3, r2
 8001314:	4a2f      	ldr	r2, [pc, #188]	@ (80013d4 <show_4char+0x188>)
 8001316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	f001 f8c1 	bl	80024a4 <HAL_GPIO_WritePin>

	for (j = 0; j < 7; ++j)
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	e03e      	b.n	80013a6 <show_4char+0x15a>
		HAL_GPIO_WritePin(segport[j], segpin[j],codes[expression[end - m] >= '0' && expression[end - m]<='9' ? expression[end - m] - '0' : expression[end - m] - 'A'+10] & 1<<j ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001328:	4a2b      	ldr	r2, [pc, #172]	@ (80013d8 <show_4char+0x18c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001330:	4a2a      	ldr	r2, [pc, #168]	@ (80013dc <show_4char+0x190>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001338:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <show_4char+0x194>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <show_4char+0x180>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a27      	ldr	r2, [pc, #156]	@ (80013e4 <show_4char+0x198>)
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	2b2f      	cmp	r3, #47	@ 0x2f
 800134a:	d913      	bls.n	8001374 <show_4char+0x128>
 800134c:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <show_4char+0x194>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <show_4char+0x180>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4a22      	ldr	r2, [pc, #136]	@ (80013e4 <show_4char+0x198>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	2b39      	cmp	r3, #57	@ 0x39
 800135e:	d809      	bhi.n	8001374 <show_4char+0x128>
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <show_4char+0x194>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <show_4char+0x180>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	4a1d      	ldr	r2, [pc, #116]	@ (80013e4 <show_4char+0x198>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	3b30      	subs	r3, #48	@ 0x30
 8001372:	e008      	b.n	8001386 <show_4char+0x13a>
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <show_4char+0x194>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <show_4char+0x180>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	4a18      	ldr	r2, [pc, #96]	@ (80013e4 <show_4char+0x198>)
 8001382:	5cd3      	ldrb	r3, [r2, r3]
 8001384:	3b37      	subs	r3, #55	@ 0x37
 8001386:	4a18      	ldr	r2, [pc, #96]	@ (80013e8 <show_4char+0x19c>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	461a      	mov	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	fa42 f303 	asr.w	r3, r2, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	f001 f882 	bl	80024a4 <HAL_GPIO_WritePin>
	for (j = 0; j < 7; ++j)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3301      	adds	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	ddbd      	ble.n	8001328 <show_4char+0xdc>

	//HAL_Delay(0);
	m++;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <show_4char+0x180>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <show_4char+0x180>)
 80013b4:	6013      	str	r3, [r2, #0]
	if(m == 4) m = 0;
 80013b6:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <show_4char+0x180>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d102      	bne.n	80013c4 <show_4char+0x178>
 80013be:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <show_4char+0x180>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
	//close();
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000067c 	.word	0x2000067c
 80013d0:	20000034 	.word	0x20000034
 80013d4:	20000044 	.word	0x20000044
 80013d8:	2000004c 	.word	0x2000004c
 80013dc:	2000006c 	.word	0x2000006c
 80013e0:	2000011c 	.word	0x2000011c
 80013e4:	200000b8 	.word	0x200000b8
 80013e8:	2000007c 	.word	0x2000007c

080013ec <push>:

void push(double c)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	ed87 0b00 	vstr	d0, [r7]
	stack_head++;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <push+0x34>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <push+0x34>)
 80013fe:	6013      	str	r3, [r2, #0]
	stack[stack_head] = c;
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <push+0x34>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <push+0x38>)
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	18d1      	adds	r1, r2, r3
 800140a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800140e:	e9c1 2300 	strd	r2, r3, [r1]
	return;
 8001412:	bf00      	nop
}
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000120 	.word	0x20000120
 8001424:	200001b8 	.word	0x200001b8

08001428 <pop>:

void pop(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
	if (stack_head>=0)
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <pop+0x38>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db10      	blt.n	8001456 <pop+0x2e>
	{
		stack[stack_head] = '\0';
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <pop+0x38>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <pop+0x3c>)
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	18d1      	adds	r1, r2, r3
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	e9c1 2300 	strd	r2, r3, [r1]
		stack_head--;
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <pop+0x38>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3b01      	subs	r3, #1
 8001450:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <pop+0x38>)
 8001452:	6013      	str	r3, [r2, #0]
	}
	return;
 8001454:	bf00      	nop
 8001456:	bf00      	nop
}
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20000120 	.word	0x20000120
 8001464:	200001b8 	.word	0x200001b8

08001468 <get>:
uint8_t get(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	return stack[stack_head];
 800146c:	4b07      	ldr	r3, [pc, #28]	@ (800148c <get+0x24>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <get+0x28>)
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fb5f 	bl	8000b40 <__aeabi_d2uiz>
 8001482:	4603      	mov	r3, r0
 8001484:	b2db      	uxtb	r3, r3
}
 8001486:	4618      	mov	r0, r3
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000120 	.word	0x20000120
 8001490:	200001b8 	.word	0x200001b8
 8001494:	00000000 	.word	0x00000000

08001498 <calculate>:

void calculate(int* suf)
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    //int length = end - 3;
    int i = 4, count = 0, temp = 0, num = 0;
 80014a0:	2304      	movs	r3, #4
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
    int node = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
    stack_head = -1;
 80014b4:	4bbc      	ldr	r3, [pc, #752]	@ (80017a8 <calculate+0x310>)
 80014b6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ba:	601a      	str	r2, [r3, #0]

    while (expression[i]!=0)
 80014bc:	e0f7      	b.n	80016ae <calculate+0x216>
    {
        temp = i;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	617b      	str	r3, [r7, #20]
        count = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
        num = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
        while (expression[i] <= '9' && expression[i] >= '0') {
 80014ca:	e005      	b.n	80014d8 <calculate+0x40>
            count += 1;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
            i++;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3301      	adds	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
        while (expression[i] <= '9' && expression[i] >= '0') {
 80014d8:	4ab4      	ldr	r2, [pc, #720]	@ (80017ac <calculate+0x314>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b39      	cmp	r3, #57	@ 0x39
 80014e2:	d83c      	bhi.n	800155e <calculate+0xc6>
 80014e4:	4ab1      	ldr	r2, [pc, #708]	@ (80017ac <calculate+0x314>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80014ee:	d8ed      	bhi.n	80014cc <calculate+0x34>
        }

        while (i - temp > 0) {
 80014f0:	e035      	b.n	800155e <calculate+0xc6>
            count--;
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
            num += (expression[temp] - '0') * pow(10, count);
 80014f8:	4aac      	ldr	r2, [pc, #688]	@ (80017ac <calculate+0x314>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3b30      	subs	r3, #48	@ 0x30
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ffda 	bl	80004bc <__aeabi_i2d>
 8001508:	4604      	mov	r4, r0
 800150a:	460d      	mov	r5, r1
 800150c:	69b8      	ldr	r0, [r7, #24]
 800150e:	f7fe ffd5 	bl	80004bc <__aeabi_i2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	ec43 2b11 	vmov	d1, r2, r3
 800151a:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 80017a0 <calculate+0x308>
 800151e:	f001 fdb5 	bl	800308c <pow>
 8001522:	ec53 2b10 	vmov	r2, r3, d0
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f7ff f831 	bl	8000590 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4614      	mov	r4, r2
 8001534:	461d      	mov	r5, r3
 8001536:	6938      	ldr	r0, [r7, #16]
 8001538:	f7fe ffc0 	bl	80004bc <__aeabi_i2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7fe fe6e 	bl	8000224 <__adddf3>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff face 	bl	8000af0 <__aeabi_d2iz>
 8001554:	4603      	mov	r3, r0
 8001556:	613b      	str	r3, [r7, #16]
            temp++;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
        while (i - temp > 0) {
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	dcc4      	bgt.n	80014f2 <calculate+0x5a>
        }
        suf[node] = num;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	601a      	str	r2, [r3, #0]
        node++;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3301      	adds	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]

        if ((expression[i] <'0' ||expression[i] > '9')&& expression[i]!=0)
 800157a:	4a8c      	ldr	r2, [pc, #560]	@ (80017ac <calculate+0x314>)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b2f      	cmp	r3, #47	@ 0x2f
 8001584:	d906      	bls.n	8001594 <calculate+0xfc>
 8001586:	4a89      	ldr	r2, [pc, #548]	@ (80017ac <calculate+0x314>)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b39      	cmp	r3, #57	@ 0x39
 8001590:	f240 808d 	bls.w	80016ae <calculate+0x216>
 8001594:	4a85      	ldr	r2, [pc, #532]	@ (80017ac <calculate+0x314>)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8086 	beq.w	80016ae <calculate+0x216>
        {
			while (isEmpty() != 1 &&precedence(expression[i]) <= precedence(get()) )
 80015a2:	e05e      	b.n	8001662 <calculate+0x1ca>
				{
					switch(get())
 80015a4:	f7ff ff60 	bl	8001468 <get>
 80015a8:	4603      	mov	r3, r0
 80015aa:	3b41      	subs	r3, #65	@ 0x41
 80015ac:	2b17      	cmp	r3, #23
 80015ae:	d853      	bhi.n	8001658 <calculate+0x1c0>
 80015b0:	a201      	add	r2, pc, #4	@ (adr r2, 80015b8 <calculate+0x120>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	08001619 	.word	0x08001619
 80015bc:	08001659 	.word	0x08001659
 80015c0:	08001659 	.word	0x08001659
 80015c4:	08001649 	.word	0x08001649
 80015c8:	08001659 	.word	0x08001659
 80015cc:	08001659 	.word	0x08001659
 80015d0:	08001659 	.word	0x08001659
 80015d4:	08001659 	.word	0x08001659
 80015d8:	08001659 	.word	0x08001659
 80015dc:	08001659 	.word	0x08001659
 80015e0:	08001659 	.word	0x08001659
 80015e4:	08001659 	.word	0x08001659
 80015e8:	08001629 	.word	0x08001629
 80015ec:	08001659 	.word	0x08001659
 80015f0:	08001659 	.word	0x08001659
 80015f4:	08001659 	.word	0x08001659
 80015f8:	08001659 	.word	0x08001659
 80015fc:	08001659 	.word	0x08001659
 8001600:	08001659 	.word	0x08001659
 8001604:	08001659 	.word	0x08001659
 8001608:	08001659 	.word	0x08001659
 800160c:	08001659 	.word	0x08001659
 8001610:	08001659 	.word	0x08001659
 8001614:	08001639 	.word	0x08001639
					{
					case 'A':suf[node] = -1;break;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e017      	b.n	8001658 <calculate+0x1c0>
					case 'M':suf[node] = -2;break;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	f06f 0201 	mvn.w	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e00f      	b.n	8001658 <calculate+0x1c0>
					case 'X':suf[node] = -3;break;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	f06f 0202 	mvn.w	r2, #2
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e007      	b.n	8001658 <calculate+0x1c0>
					case 'D':suf[node] = -4;break;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	f06f 0203 	mvn.w	r2, #3
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	bf00      	nop
					}
					pop();
 8001658:	f7ff fee6 	bl	8001428 <pop>
					node ++;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
			while (isEmpty() != 1 &&precedence(expression[i]) <= precedence(get()) )
 8001662:	f7ff faaf 	bl	8000bc4 <isEmpty>
 8001666:	4603      	mov	r3, r0
 8001668:	2b01      	cmp	r3, #1
 800166a:	d010      	beq.n	800168e <calculate+0x1f6>
 800166c:	4a4f      	ldr	r2, [pc, #316]	@ (80017ac <calculate+0x314>)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f89b 	bl	80017b0 <precedence>
 800167a:	4604      	mov	r4, r0
 800167c:	f7ff fef4 	bl	8001468 <get>
 8001680:	4603      	mov	r3, r0
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f894 	bl	80017b0 <precedence>
 8001688:	4603      	mov	r3, r0
 800168a:	429c      	cmp	r4, r3
 800168c:	dd8a      	ble.n	80015a4 <calculate+0x10c>
				}
			push(expression[i]);
 800168e:	4a47      	ldr	r2, [pc, #284]	@ (80017ac <calculate+0x314>)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff00 	bl	800049c <__aeabi_ui2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	ec43 2b10 	vmov	d0, r2, r3
 80016a4:	f7ff fea2 	bl	80013ec <push>
			i++;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	3301      	adds	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
    while (expression[i]!=0)
 80016ae:	4a3f      	ldr	r2, [pc, #252]	@ (80017ac <calculate+0x314>)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f47f af01 	bne.w	80014be <calculate+0x26>
       	}
     }

	 while (isEmpty() != 1)
 80016bc:	e05d      	b.n	800177a <calculate+0x2e2>
	 {
		 switch(get())
 80016be:	f7ff fed3 	bl	8001468 <get>
 80016c2:	4603      	mov	r3, r0
 80016c4:	3b41      	subs	r3, #65	@ 0x41
 80016c6:	2b17      	cmp	r3, #23
 80016c8:	d852      	bhi.n	8001770 <calculate+0x2d8>
 80016ca:	a201      	add	r2, pc, #4	@ (adr r2, 80016d0 <calculate+0x238>)
 80016cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d0:	08001731 	.word	0x08001731
 80016d4:	08001771 	.word	0x08001771
 80016d8:	08001771 	.word	0x08001771
 80016dc:	08001761 	.word	0x08001761
 80016e0:	08001771 	.word	0x08001771
 80016e4:	08001771 	.word	0x08001771
 80016e8:	08001771 	.word	0x08001771
 80016ec:	08001771 	.word	0x08001771
 80016f0:	08001771 	.word	0x08001771
 80016f4:	08001771 	.word	0x08001771
 80016f8:	08001771 	.word	0x08001771
 80016fc:	08001771 	.word	0x08001771
 8001700:	08001741 	.word	0x08001741
 8001704:	08001771 	.word	0x08001771
 8001708:	08001771 	.word	0x08001771
 800170c:	08001771 	.word	0x08001771
 8001710:	08001771 	.word	0x08001771
 8001714:	08001771 	.word	0x08001771
 8001718:	08001771 	.word	0x08001771
 800171c:	08001771 	.word	0x08001771
 8001720:	08001771 	.word	0x08001771
 8001724:	08001771 	.word	0x08001771
 8001728:	08001771 	.word	0x08001771
 800172c:	08001751 	.word	0x08001751
				{case 'A':suf[node] = -1;break;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e017      	b.n	8001770 <calculate+0x2d8>
				case 'M':suf[node] = -2;break;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	f06f 0201 	mvn.w	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e00f      	b.n	8001770 <calculate+0x2d8>
				case 'X':suf[node] = -3;break;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	f06f 0202 	mvn.w	r2, #2
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e007      	b.n	8001770 <calculate+0x2d8>
				case 'D':suf[node] = -4;break;}
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	f06f 0203 	mvn.w	r2, #3
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	bf00      	nop
		 pop();
 8001770:	f7ff fe5a 	bl	8001428 <pop>
		 node++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
	 while (isEmpty() != 1)
 800177a:	f7ff fa23 	bl	8000bc4 <isEmpty>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	d19c      	bne.n	80016be <calculate+0x226>
	 }
     suf[node] = -5;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	f06f 0204 	mvn.w	r2, #4
 8001790:	601a      	str	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bdb0      	pop	{r4, r5, r7, pc}
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w
 80017a0:	00000000 	.word	0x00000000
 80017a4:	40240000 	.word	0x40240000
 80017a8:	20000120 	.word	0x20000120
 80017ac:	200000b8 	.word	0x200000b8

080017b0 <precedence>:
int precedence(uint8_t op)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
    switch (op)
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	3b41      	subs	r3, #65	@ 0x41
 80017be:	2b17      	cmp	r3, #23
 80017c0:	d836      	bhi.n	8001830 <precedence+0x80>
 80017c2:	a201      	add	r2, pc, #4	@ (adr r2, 80017c8 <precedence+0x18>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001831 	.word	0x08001831
 80017d0:	08001831 	.word	0x08001831
 80017d4:	0800182d 	.word	0x0800182d
 80017d8:	08001831 	.word	0x08001831
 80017dc:	08001831 	.word	0x08001831
 80017e0:	08001831 	.word	0x08001831
 80017e4:	08001831 	.word	0x08001831
 80017e8:	08001831 	.word	0x08001831
 80017ec:	08001831 	.word	0x08001831
 80017f0:	08001831 	.word	0x08001831
 80017f4:	08001831 	.word	0x08001831
 80017f8:	08001829 	.word	0x08001829
 80017fc:	08001831 	.word	0x08001831
 8001800:	08001831 	.word	0x08001831
 8001804:	08001831 	.word	0x08001831
 8001808:	08001831 	.word	0x08001831
 800180c:	08001831 	.word	0x08001831
 8001810:	08001831 	.word	0x08001831
 8001814:	08001831 	.word	0x08001831
 8001818:	08001831 	.word	0x08001831
 800181c:	08001831 	.word	0x08001831
 8001820:	08001831 	.word	0x08001831
 8001824:	0800182d 	.word	0x0800182d
    {
        case 'A':
        case 'M':
            return 1;
 8001828:	2301      	movs	r3, #1
 800182a:	e002      	b.n	8001832 <precedence+0x82>
        case 'X':
        case 'D':
            return 2;
 800182c:	2302      	movs	r3, #2
 800182e:	e000      	b.n	8001832 <precedence+0x82>
        default:
            return 0;
 8001830:	2300      	movs	r3, #0
    }
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop

08001840 <calresult>:
double calresult(int * suf)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	double result;
	double a, b;
	stack_head = -1;
 8001848:	4b56      	ldr	r3, [pc, #344]	@ (80019a4 <calresult+0x164>)
 800184a:	f04f 32ff 	mov.w	r2, #4294967295
 800184e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	e00c      	b.n	8001870 <calresult+0x30>
	    stack[i] = 0;
 8001856:	4a54      	ldr	r2, [pc, #336]	@ (80019a8 <calresult+0x168>)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	18d1      	adds	r1, r2, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 100; i++) {
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3301      	adds	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2b63      	cmp	r3, #99	@ 0x63
 8001874:	ddef      	ble.n	8001856 <calresult+0x16>
	}
	for(int i = 0;suf[i] != -5 ;++i)
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	e07c      	b.n	8001976 <calresult+0x136>
	{
		if (suf[i] >=0)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0e      	blt.n	80018a8 <calresult+0x68>
			push(suf[i]);
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe11 	bl	80004bc <__aeabi_i2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	ec43 2b10 	vmov	d0, r2, r3
 80018a2:	f7ff fda3 	bl	80013ec <push>
 80018a6:	e063      	b.n	8001970 <calresult+0x130>
		else
			{b=get();pop();a = get();pop();
 80018a8:	f7ff fdde 	bl	8001468 <get>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fdf4 	bl	800049c <__aeabi_ui2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80018bc:	f7ff fdb4 	bl	8001428 <pop>
 80018c0:	f7ff fdd2 	bl	8001468 <get>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fde8 	bl	800049c <__aeabi_ui2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80018d4:	f7ff fda8 	bl	8001428 <pop>
		if (suf[i] == -1) {result = a + b;}
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e6:	d109      	bne.n	80018fc <calresult+0xbc>
 80018e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f0:	f7fe fc98 	bl	8000224 <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (suf[i] == -2) {result = a - b;}
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f113 0f02 	cmn.w	r3, #2
 800190a:	d109      	bne.n	8001920 <calresult+0xe0>
 800190c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001910:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001914:	f7fe fc84 	bl	8000220 <__aeabi_dsub>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (suf[i] == -3) {result = a * b;}
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f113 0f03 	cmn.w	r3, #3
 800192e:	d109      	bne.n	8001944 <calresult+0x104>
 8001930:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001938:	f7fe fe2a 	bl	8000590 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (suf[i] == -4) {result = a / b;}
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f113 0f04 	cmn.w	r3, #4
 8001952:	d109      	bne.n	8001968 <calresult+0x128>
 8001954:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001958:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800195c:	f7fe ff42 	bl	80007e4 <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	e9c7 2308 	strd	r2, r3, [r7, #32]
			push(result);}
 8001968:	ed97 0b08 	vldr	d0, [r7, #32]
 800196c:	f7ff fd3e 	bl	80013ec <push>
	for(int i = 0;suf[i] != -5 ;++i)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	3301      	adds	r3, #1
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f113 0f05 	cmn.w	r3, #5
 8001984:	f47f af7a 	bne.w	800187c <calresult+0x3c>
	}
	return getHead();
 8001988:	f7ff f8fa 	bl	8000b80 <getHead>
 800198c:	eeb0 7a40 	vmov.f32	s14, s0
 8001990:	eef0 7a60 	vmov.f32	s15, s1
}
 8001994:	eeb0 0a47 	vmov.f32	s0, s14
 8001998:	eef0 0a67 	vmov.f32	s1, s15
 800199c:	3728      	adds	r7, #40	@ 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000120 	.word	0x20000120
 80019a8:	200001b8 	.word	0x200001b8

080019ac <show_result>:

void show_result(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
	int  j;
	static int k = 0;
	HAL_GPIO_WritePin(digport[k], digpin[k], GPIO_PIN_SET);
 80019b2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae8 <show_result+0x13c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a4d      	ldr	r2, [pc, #308]	@ (8001aec <show_result+0x140>)
 80019b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019bc:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae8 <show_result+0x13c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a4b      	ldr	r2, [pc, #300]	@ (8001af0 <show_result+0x144>)
 80019c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4619      	mov	r1, r3
 80019ca:	f000 fd6b 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(digport[(k + 1) % 4], digpin[(k + 1) % 4], GPIO_PIN_RESET);
 80019ce:	4b46      	ldr	r3, [pc, #280]	@ (8001ae8 <show_result+0x13c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	425a      	negs	r2, r3
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	bf58      	it	pl
 80019e0:	4253      	negpl	r3, r2
 80019e2:	4a42      	ldr	r2, [pc, #264]	@ (8001aec <show_result+0x140>)
 80019e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019e8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae8 <show_result+0x13c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	425a      	negs	r2, r3
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	f002 0203 	and.w	r2, r2, #3
 80019f8:	bf58      	it	pl
 80019fa:	4253      	negpl	r3, r2
 80019fc:	4a3c      	ldr	r2, [pc, #240]	@ (8001af0 <show_result+0x144>)
 80019fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a02:	2200      	movs	r2, #0
 8001a04:	4619      	mov	r1, r3
 8001a06:	f000 fd4d 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(digport[(k + 2) % 4], digpin[(k + 2) % 4], GPIO_PIN_RESET);
 8001a0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ae8 <show_result+0x13c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	425a      	negs	r2, r3
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	f002 0203 	and.w	r2, r2, #3
 8001a1a:	bf58      	it	pl
 8001a1c:	4253      	negpl	r3, r2
 8001a1e:	4a33      	ldr	r2, [pc, #204]	@ (8001aec <show_result+0x140>)
 8001a20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a24:	4b30      	ldr	r3, [pc, #192]	@ (8001ae8 <show_result+0x13c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3302      	adds	r3, #2
 8001a2a:	425a      	negs	r2, r3
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	bf58      	it	pl
 8001a36:	4253      	negpl	r3, r2
 8001a38:	4a2d      	ldr	r2, [pc, #180]	@ (8001af0 <show_result+0x144>)
 8001a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4619      	mov	r1, r3
 8001a42:	f000 fd2f 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(digport[(k + 3) % 4], digpin[(k + 3) % 4], GPIO_PIN_RESET);
 8001a46:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <show_result+0x13c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3303      	adds	r3, #3
 8001a4c:	425a      	negs	r2, r3
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	f002 0203 	and.w	r2, r2, #3
 8001a56:	bf58      	it	pl
 8001a58:	4253      	negpl	r3, r2
 8001a5a:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <show_result+0x140>)
 8001a5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <show_result+0x13c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3303      	adds	r3, #3
 8001a66:	425a      	negs	r2, r3
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	bf58      	it	pl
 8001a72:	4253      	negpl	r3, r2
 8001a74:	4a1e      	ldr	r2, [pc, #120]	@ (8001af0 <show_result+0x144>)
 8001a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f000 fd11 	bl	80024a4 <HAL_GPIO_WritePin>

	for (j = 0; j < 7; ++j)
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e01c      	b.n	8001ac2 <show_result+0x116>
		HAL_GPIO_WritePin(segport[j], segpin[j],codes[digits[k]]&1<<j ? GPIO_PIN_SET:GPIO_PIN_RESET);
 8001a88:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <show_result+0x148>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a90:	4a19      	ldr	r2, [pc, #100]	@ (8001af8 <show_result+0x14c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <show_result+0x13c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <show_result+0x150>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <show_result+0x154>)
 8001aa4:	5c9b      	ldrb	r3, [r3, r2]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	fa42 f303 	asr.w	r3, r2, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f000 fcf4 	bl	80024a4 <HAL_GPIO_WritePin>
	for (j = 0; j < 7; ++j)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b06      	cmp	r3, #6
 8001ac6:	dddf      	ble.n	8001a88 <show_result+0xdc>

	//HAL_Delay(0);
	k++;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <show_result+0x13c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a06      	ldr	r2, [pc, #24]	@ (8001ae8 <show_result+0x13c>)
 8001ad0:	6013      	str	r3, [r2, #0]
	if(k == 4) k = 0;
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <show_result+0x13c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d102      	bne.n	8001ae0 <show_result+0x134>
 8001ada:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <show_result+0x13c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
	//close();
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000680 	.word	0x20000680
 8001aec:	20000034 	.word	0x20000034
 8001af0:	20000044 	.word	0x20000044
 8001af4:	2000004c 	.word	0x2000004c
 8001af8:	2000006c 	.word	0x2000006c
 8001afc:	200001b0 	.word	0x200001b0
 8001b00:	2000007c 	.word	0x2000007c

08001b04 <doCalculate>:
//void (*result_callback)();
//void register_keep_callback(void (*cb)){keep_callback = cb;}
//void register_calculate_callback(void (*cb)){calculate_callback = cb;}
//void register_result_callback(void (*cb)){result_callback = cb;}
void doCalculate()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  calculate(suf);
 8001b08:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <doCalculate+0x3c>)
 8001b0a:	f7ff fcc5 	bl	8001498 <calculate>
  num = calresult(suf);
 8001b0e:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <doCalculate+0x3c>)
 8001b10:	f7ff fe96 	bl	8001840 <calresult>
 8001b14:	eeb0 7a40 	vmov.f32	s14, s0
 8001b18:	eef0 7a60 	vmov.f32	s15, s1
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <doCalculate+0x40>)
 8001b1e:	ed83 7b00 	vstr	d7, [r3]
  getFirstFourDigits(num);
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <doCalculate+0x40>)
 8001b24:	ed93 7b00 	vldr	d7, [r3]
 8001b28:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2c:	eef0 0a67 	vmov.f32	s1, s15
 8001b30:	f7ff f8ec 	bl	8000d0c <getFirstFourDigits>
  flag2 =1;
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <doCalculate+0x44>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200004e8 	.word	0x200004e8
 8001b44:	200004e0 	.word	0x200004e0
 8001b48:	200004d8 	.word	0x200004d8

08001b4c <state_check>:

void state_check()
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  int i = get_char();
 8001b52:	f7ff f905 	bl	8000d60 <get_char>
 8001b56:	4603      	mov	r3, r0
 8001b58:	607b      	str	r3, [r7, #4]
  keep_char(i);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb30 	bl	80011c4 <keep_char>

  if (flag2 == 1)
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <state_check+0x34>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d102      	bne.n	8001b72 <state_check+0x26>
  {
	  show_result();
 8001b6c:	f7ff ff1e 	bl	80019ac <show_result>
  }
  else
  {
	  show_4char();
  }
}
 8001b70:	e001      	b.n	8001b76 <state_check+0x2a>
	  show_4char();
 8001b72:	f7ff fb6b 	bl	800124c <show_4char>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200004d8 	.word	0x200004d8

08001b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b88:	f000 f99d 	bl	8001ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8c:	f000 f816 	bl	8001bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b90:	f000 f854 	bl	8001c3c <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	if (expression[end] == '\0' && flag2 == 0)
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <main+0x2c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <main+0x30>)
 8001b9c:	5c9b      	ldrb	r3, [r3, r2]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f8      	bne.n	8001b94 <main+0x10>
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <main+0x34>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f4      	bne.n	8001b94 <main+0x10>
	{
	  doCalculate();
 8001baa:	f7ff ffab 	bl	8001b04 <doCalculate>
	if (expression[end] == '\0' && flag2 == 0)
 8001bae:	e7f1      	b.n	8001b94 <main+0x10>
 8001bb0:	2000011c 	.word	0x2000011c
 8001bb4:	200000b8 	.word	0x200000b8
 8001bb8:	200004d8 	.word	0x200004d8

08001bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b094      	sub	sp, #80	@ 0x50
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	2238      	movs	r2, #56	@ 0x38
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 fa2c 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bde:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001be2:	f000 fc77 	bl	80024d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf0:	2340      	movs	r3, #64	@ 0x40
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fd1d 	bl	800263c <HAL_RCC_OscConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001c08:	f000 f8c6 	bl	8001d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c10:	2301      	movs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 f81b 	bl	8002c60 <HAL_RCC_ClockConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001c30:	f000 f8b2 	bl	8001d98 <Error_Handler>
  }
}
 8001c34:	bf00      	nop
 8001c36:	3750      	adds	r7, #80	@ 0x50
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	@ 0x28
 8001c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c52:	4b4d      	ldr	r3, [pc, #308]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	4a4c      	ldr	r2, [pc, #304]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b47      	ldr	r3, [pc, #284]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	4a46      	ldr	r2, [pc, #280]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c76:	4b44      	ldr	r3, [pc, #272]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b41      	ldr	r3, [pc, #260]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	4a40      	ldr	r2, [pc, #256]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca6:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <MX_GPIO_Init+0x14c>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001cb8:	4834      	ldr	r0, [pc, #208]	@ (8001d8c <MX_GPIO_Init+0x150>)
 8001cba:	f000 fbf3 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG6_Pin|SEG5_Pin|SEG4_Pin|SEG7_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc8:	f000 fbec 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KR3_Pin|KR2_Pin|KR1_Pin|KR0_Pin
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f640 7103 	movw	r1, #3843	@ 0xf03
 8001cd2:	482f      	ldr	r0, [pc, #188]	@ (8001d90 <MX_GPIO_Init+0x154>)
 8001cd4:	f000 fbe6 	bl	80024a4 <HAL_GPIO_WritePin>
                          |DIG0_Pin|DIG1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8001cd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4827      	ldr	r0, [pc, #156]	@ (8001d8c <MX_GPIO_Init+0x150>)
 8001cee:	f000 fa3f 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG2_Pin DIG3_Pin */
  GPIO_InitStruct.Pin = DIG2_Pin|DIG3_Pin;
 8001cf2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4820      	ldr	r0, [pc, #128]	@ (8001d8c <MX_GPIO_Init+0x150>)
 8001d0c:	f000 fa30 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG6_Pin SEG5_Pin SEG4_Pin SEG7_Pin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG5_Pin|SEG4_Pin|SEG7_Pin;
 8001d10:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d2c:	f000 fa20 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin KR1_Pin KR0_Pin
                           DIG0_Pin DIG1_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin|KR1_Pin|KR0_Pin
 8001d30:	f640 7303 	movw	r3, #3843	@ 0xf03
 8001d34:	617b      	str	r3, [r7, #20]
                          |DIG0_Pin|DIG1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	4811      	ldr	r0, [pc, #68]	@ (8001d90 <MX_GPIO_Init+0x154>)
 8001d4a:	f000 fa11 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : KC0_Pin */
  GPIO_InitStruct.Pin = KC0_Pin;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KC0_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <MX_GPIO_Init+0x158>)
 8001d62:	f000 fa05 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC1_Pin|KC2_Pin;
 8001d66:	2360      	movs	r3, #96	@ 0x60
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_GPIO_Init+0x154>)
 8001d7a:	f000 f9f9 	bl	8002170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	@ 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000800 	.word	0x48000800
 8001d90:	48000400 	.word	0x48000400
 8001d94:	48000c00 	.word	0x48000c00

08001d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <Error_Handler+0x8>

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <HAL_MspInit+0x44>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dae:	4a0e      	ldr	r2, [pc, #56]	@ (8001de8 <HAL_MspInit+0x44>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_MspInit+0x44>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_MspInit+0x44>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <HAL_MspInit+0x44>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_MspInit+0x44>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001dda:	f000 fc1f 	bl	800261c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000

08001dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <NMI_Handler+0x4>

08001df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <HardFault_Handler+0x4>

08001dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <MemManage_Handler+0x4>

08001e04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e42:	f000 f893 	bl	8001f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  state_check();
 8001e46:	f7ff fe81 	bl	8001b4c <state_check>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <SystemInit+0x20>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <SystemInit+0x20>)
 8001e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e74:	480d      	ldr	r0, [pc, #52]	@ (8001eac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e78:	f7ff ffea 	bl	8001e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e7e:	490d      	ldr	r1, [pc, #52]	@ (8001eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e80:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <LoopForever+0xe>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e94:	4c0a      	ldr	r4, [pc, #40]	@ (8001ec0 <LoopForever+0x16>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ea2:	f001 f8cf 	bl	8003044 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ea6:	f7ff fe6d 	bl	8001b84 <main>

08001eaa <LoopForever>:

LoopForever:
    b LoopForever
 8001eaa:	e7fe      	b.n	8001eaa <LoopForever>
  ldr   r0, =_estack
 8001eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001eb8:	08003fb0 	.word	0x08003fb0
  ldr r2, =_sbss
 8001ebc:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001ec0:	200007c0 	.word	0x200007c0

08001ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <ADC1_2_IRQHandler>

08001ec6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 f91b 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed6:	200f      	movs	r0, #15
 8001ed8:	f000 f80e 	bl	8001ef8 <HAL_InitTick>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	e001      	b.n	8001eec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee8:	f7ff ff5c 	bl	8001da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eec:	79fb      	ldrb	r3, [r7, #7]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <HAL_InitTick+0x68>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d022      	beq.n	8001f52 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_InitTick+0x6c>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <HAL_InitTick+0x68>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f918 	bl	8002156 <HAL_SYSTICK_Config>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10f      	bne.n	8001f4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	d809      	bhi.n	8001f46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f32:	2200      	movs	r2, #0
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3a:	f000 f8f2 	bl	8002122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <HAL_InitTick+0x70>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e007      	b.n	8001f56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e004      	b.n	8001f56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000012c 	.word	0x2000012c
 8001f64:	20000124 	.word	0x20000124
 8001f68:	20000128 	.word	0x20000128

08001f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_IncTick+0x1c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_IncTick+0x20>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a03      	ldr	r2, [pc, #12]	@ (8001f88 <HAL_IncTick+0x1c>)
 8001f7c:	6013      	str	r3, [r2, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	20000684 	.word	0x20000684
 8001f8c:	2000012c 	.word	0x2000012c

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000684 	.word	0x20000684

08001fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fda:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	@ (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	@ (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	@ 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	@ 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f7ff ff8e 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff47 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff5e 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff90 	bl	8002060 <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5f 	bl	800200c <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ffb2 	bl	80020c8 <SysTick_Config>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800217e:	e15a      	b.n	8002436 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 814c 	beq.w	8002430 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d005      	beq.n	80021b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d130      	bne.n	8002212 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021e6:	2201      	movs	r2, #1
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	f003 0201 	and.w	r2, r3, #1
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b03      	cmp	r3, #3
 800221c:	d017      	beq.n	800224e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	2203      	movs	r2, #3
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d123      	bne.n	80022a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	08da      	lsrs	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3208      	adds	r2, #8
 8002262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	6939      	ldr	r1, [r7, #16]
 800229e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	2203      	movs	r2, #3
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0203 	and.w	r2, r3, #3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80a6 	beq.w	8002430 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e4:	4b5b      	ldr	r3, [pc, #364]	@ (8002454 <HAL_GPIO_Init+0x2e4>)
 80022e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002454 <HAL_GPIO_Init+0x2e4>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80022f0:	4b58      	ldr	r3, [pc, #352]	@ (8002454 <HAL_GPIO_Init+0x2e4>)
 80022f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fc:	4a56      	ldr	r2, [pc, #344]	@ (8002458 <HAL_GPIO_Init+0x2e8>)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002326:	d01f      	beq.n	8002368 <HAL_GPIO_Init+0x1f8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a4c      	ldr	r2, [pc, #304]	@ (800245c <HAL_GPIO_Init+0x2ec>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d019      	beq.n	8002364 <HAL_GPIO_Init+0x1f4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a4b      	ldr	r2, [pc, #300]	@ (8002460 <HAL_GPIO_Init+0x2f0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_GPIO_Init+0x1f0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a4a      	ldr	r2, [pc, #296]	@ (8002464 <HAL_GPIO_Init+0x2f4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00d      	beq.n	800235c <HAL_GPIO_Init+0x1ec>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a49      	ldr	r2, [pc, #292]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <HAL_GPIO_Init+0x1e8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a48      	ldr	r2, [pc, #288]	@ (800246c <HAL_GPIO_Init+0x2fc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_GPIO_Init+0x1e4>
 8002350:	2305      	movs	r3, #5
 8002352:	e00a      	b.n	800236a <HAL_GPIO_Init+0x1fa>
 8002354:	2306      	movs	r3, #6
 8002356:	e008      	b.n	800236a <HAL_GPIO_Init+0x1fa>
 8002358:	2304      	movs	r3, #4
 800235a:	e006      	b.n	800236a <HAL_GPIO_Init+0x1fa>
 800235c:	2303      	movs	r3, #3
 800235e:	e004      	b.n	800236a <HAL_GPIO_Init+0x1fa>
 8002360:	2302      	movs	r3, #2
 8002362:	e002      	b.n	800236a <HAL_GPIO_Init+0x1fa>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_GPIO_Init+0x1fa>
 8002368:	2300      	movs	r3, #0
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	f002 0203 	and.w	r2, r2, #3
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	4093      	lsls	r3, r2
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800237a:	4937      	ldr	r1, [pc, #220]	@ (8002458 <HAL_GPIO_Init+0x2e8>)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002388:	4b39      	ldr	r3, [pc, #228]	@ (8002470 <HAL_GPIO_Init+0x300>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ac:	4a30      	ldr	r2, [pc, #192]	@ (8002470 <HAL_GPIO_Init+0x300>)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <HAL_GPIO_Init+0x300>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023d6:	4a26      	ldr	r2, [pc, #152]	@ (8002470 <HAL_GPIO_Init+0x300>)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023dc:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <HAL_GPIO_Init+0x300>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002400:	4a1b      	ldr	r2, [pc, #108]	@ (8002470 <HAL_GPIO_Init+0x300>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002406:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <HAL_GPIO_Init+0x300>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800242a:	4a11      	ldr	r2, [pc, #68]	@ (8002470 <HAL_GPIO_Init+0x300>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	f47f ae9d 	bne.w	8002180 <HAL_GPIO_Init+0x10>
  }
}
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40021000 	.word	0x40021000
 8002458:	40010000 	.word	0x40010000
 800245c:	48000400 	.word	0x48000400
 8002460:	48000800 	.word	0x48000800
 8002464:	48000c00 	.word	0x48000c00
 8002468:	48001000 	.word	0x48001000
 800246c:	48001400 	.word	0x48001400
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e001      	b.n	8002496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c0:	e002      	b.n	80024c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d141      	bne.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ee:	d131      	bne.n	8002554 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024f0:	4b47      	ldr	r3, [pc, #284]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024f6:	4a46      	ldr	r2, [pc, #280]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002500:	4b43      	ldr	r3, [pc, #268]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002508:	4a41      	ldr	r2, [pc, #260]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800250e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002510:	4b40      	ldr	r3, [pc, #256]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2232      	movs	r2, #50	@ 0x32
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	4a3f      	ldr	r2, [pc, #252]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	0c9b      	lsrs	r3, r3, #18
 8002522:	3301      	adds	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002526:	e002      	b.n	800252e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3b01      	subs	r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800252e:	4b38      	ldr	r3, [pc, #224]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800253a:	d102      	bne.n	8002542 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f2      	bne.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002542:	4b33      	ldr	r3, [pc, #204]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800254e:	d158      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e057      	b.n	8002604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002554:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800255a:	4a2d      	ldr	r2, [pc, #180]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002564:	e04d      	b.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800256c:	d141      	bne.n	80025f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800257a:	d131      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800257c:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002582:	4a23      	ldr	r2, [pc, #140]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800258c:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002594:	4a1e      	ldr	r2, [pc, #120]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800259a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800259c:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2232      	movs	r2, #50	@ 0x32
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	0c9b      	lsrs	r3, r3, #18
 80025ae:	3301      	adds	r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b2:	e002      	b.n	80025ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c6:	d102      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f2      	bne.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025da:	d112      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e011      	b.n	8002604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025f0:	e007      	b.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025f2:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002600:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40007000 	.word	0x40007000
 8002614:	20000124 	.word	0x20000124
 8002618:	431bde83 	.word	0x431bde83

0800261c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262a:	6093      	str	r3, [r2, #8]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40007000 	.word	0x40007000

0800263c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e2fe      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d075      	beq.n	8002746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265a:	4b97      	ldr	r3, [pc, #604]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002664:	4b94      	ldr	r3, [pc, #592]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d102      	bne.n	800267a <HAL_RCC_OscConfig+0x3e>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d002      	beq.n	8002680 <HAL_RCC_OscConfig+0x44>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d10b      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	4b8d      	ldr	r3, [pc, #564]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05b      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d157      	bne.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e2d9      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x74>
 80026a2:	4b85      	ldr	r3, [pc, #532]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a84      	ldr	r2, [pc, #528]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x98>
 80026ba:	4b7f      	ldr	r3, [pc, #508]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a7e      	ldr	r2, [pc, #504]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b7c      	ldr	r3, [pc, #496]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7b      	ldr	r2, [pc, #492]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026d4:	4b78      	ldr	r3, [pc, #480]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a77      	ldr	r2, [pc, #476]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b75      	ldr	r3, [pc, #468]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a74      	ldr	r2, [pc, #464]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff fc4c 	bl	8001f90 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff fc48 	bl	8001f90 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e29e      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270e:	4b6a      	ldr	r3, [pc, #424]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xc0>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7ff fc38 	bl	8001f90 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff fc34 	bl	8001f90 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e28a      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002736:	4b60      	ldr	r3, [pc, #384]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d075      	beq.n	800283e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002752:	4b59      	ldr	r3, [pc, #356]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800275c:	4b56      	ldr	r3, [pc, #344]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d102      	bne.n	8002772 <HAL_RCC_OscConfig+0x136>
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d002      	beq.n	8002778 <HAL_RCC_OscConfig+0x13c>
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d11f      	bne.n	80027b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	4b4f      	ldr	r3, [pc, #316]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x154>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e25d      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b49      	ldr	r3, [pc, #292]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4946      	ldr	r1, [pc, #280]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027a4:	4b45      	ldr	r3, [pc, #276]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fba5 	bl	8001ef8 <HAL_InitTick>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d043      	beq.n	800283c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e249      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3c      	ldr	r2, [pc, #240]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff fbe0 	bl	8001f90 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7ff fbdc 	bl	8001f90 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e232      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e6:	4b34      	ldr	r3, [pc, #208]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	492d      	ldr	r1, [pc, #180]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
 8002806:	e01a      	b.n	800283e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002808:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2a      	ldr	r2, [pc, #168]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800280e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff fbbc 	bl	8001f90 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281c:	f7ff fbb8 	bl	8001f90 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e20e      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800282e:	4b22      	ldr	r3, [pc, #136]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1e0>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d041      	beq.n	80028ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01c      	beq.n	800288c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002852:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002858:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7ff fb95 	bl	8001f90 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7ff fb91 	bl	8001f90 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1e7      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287c:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ef      	beq.n	800286a <HAL_RCC_OscConfig+0x22e>
 800288a:	e020      	b.n	80028ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002892:	4a09      	ldr	r2, [pc, #36]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7ff fb78 	bl	8001f90 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a2:	e00d      	b.n	80028c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7ff fb74 	bl	8001f90 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d906      	bls.n	80028c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1ca      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	20000128 	.word	0x20000128
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80028c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ea      	bne.n	80028a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80a6 	beq.w	8002a28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028e0:	4b84      	ldr	r3, [pc, #528]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2b4>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x2b6>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	4b7f      	ldr	r3, [pc, #508]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	4a7e      	ldr	r2, [pc, #504]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002900:	6593      	str	r3, [r2, #88]	@ 0x58
 8002902:	4b7c      	ldr	r3, [pc, #496]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800290e:	2301      	movs	r3, #1
 8002910:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002912:	4b79      	ldr	r3, [pc, #484]	@ (8002af8 <HAL_RCC_OscConfig+0x4bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800291e:	4b76      	ldr	r3, [pc, #472]	@ (8002af8 <HAL_RCC_OscConfig+0x4bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	@ (8002af8 <HAL_RCC_OscConfig+0x4bc>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7ff fb31 	bl	8001f90 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7ff fb2d 	bl	8001f90 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e183      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002944:	4b6c      	ldr	r3, [pc, #432]	@ (8002af8 <HAL_RCC_OscConfig+0x4bc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <HAL_RCC_OscConfig+0x32e>
 8002958:	4b66      	ldr	r3, [pc, #408]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	4a65      	ldr	r2, [pc, #404]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002968:	e024      	b.n	80029b4 <HAL_RCC_OscConfig+0x378>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d110      	bne.n	8002994 <HAL_RCC_OscConfig+0x358>
 8002972:	4b60      	ldr	r3, [pc, #384]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	4a5e      	ldr	r2, [pc, #376]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002982:	4b5c      	ldr	r3, [pc, #368]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002988:	4a5a      	ldr	r2, [pc, #360]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002992:	e00f      	b.n	80029b4 <HAL_RCC_OscConfig+0x378>
 8002994:	4b57      	ldr	r3, [pc, #348]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	4a56      	ldr	r2, [pc, #344]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029a4:	4b53      	ldr	r3, [pc, #332]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	4a52      	ldr	r2, [pc, #328]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d016      	beq.n	80029ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7ff fae8 	bl	8001f90 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7ff fae4 	bl	8001f90 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e138      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	4b46      	ldr	r3, [pc, #280]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ed      	beq.n	80029c4 <HAL_RCC_OscConfig+0x388>
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7ff fad1 	bl	8001f90 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7ff facd 	bl	8001f90 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e121      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a08:	4b3a      	ldr	r3, [pc, #232]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1ed      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1c:	4b35      	ldr	r3, [pc, #212]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	4a34      	ldr	r2, [pc, #208]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03c      	beq.n	8002aae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a42:	4a2c      	ldr	r2, [pc, #176]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7ff faa0 	bl	8001f90 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a54:	f7ff fa9c 	bl	8001f90 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e0f2      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a66:	4b23      	ldr	r3, [pc, #140]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ef      	beq.n	8002a54 <HAL_RCC_OscConfig+0x418>
 8002a74:	e01b      	b.n	8002aae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a76:	4b1f      	ldr	r3, [pc, #124]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7ff fa83 	bl	8001f90 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8e:	f7ff fa7f 	bl	8001f90 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0d5      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa0:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ef      	bne.n	8002a8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80c9 	beq.w	8002c4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	f000 8083 	beq.w	8002bcc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d15e      	bne.n	8002b8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a08      	ldr	r2, [pc, #32]	@ (8002af4 <HAL_RCC_OscConfig+0x4b8>)
 8002ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7ff fa59 	bl	8001f90 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae0:	e00c      	b.n	8002afc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7ff fa55 	bl	8001f90 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d905      	bls.n	8002afc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e0ab      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	4b55      	ldr	r3, [pc, #340]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ec      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b08:	4b52      	ldr	r3, [pc, #328]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4b52      	ldr	r3, [pc, #328]	@ (8002c58 <HAL_RCC_OscConfig+0x61c>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6a11      	ldr	r1, [r2, #32]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b22:	0212      	lsls	r2, r2, #8
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b2a:	0852      	lsrs	r2, r2, #1
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	0552      	lsls	r2, r2, #21
 8002b30:	4311      	orrs	r1, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b36:	0852      	lsrs	r2, r2, #1
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	0652      	lsls	r2, r2, #25
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b42:	06d2      	lsls	r2, r2, #27
 8002b44:	430a      	orrs	r2, r1
 8002b46:	4943      	ldr	r1, [pc, #268]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b4c:	4b41      	ldr	r3, [pc, #260]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a40      	ldr	r2, [pc, #256]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b58:	4b3e      	ldr	r3, [pc, #248]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7ff fa14 	bl	8001f90 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7ff fa10 	bl	8001f90 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e066      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7e:	4b35      	ldr	r3, [pc, #212]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x530>
 8002b8a:	e05e      	b.n	8002c4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a30      	ldr	r2, [pc, #192]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7ff f9fa 	bl	8001f90 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7ff f9f6 	bl	8001f90 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e04c      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb2:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bbe:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	4924      	ldr	r1, [pc, #144]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002bc4:	4b25      	ldr	r3, [pc, #148]	@ (8002c5c <HAL_RCC_OscConfig+0x620>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	60cb      	str	r3, [r1, #12]
 8002bca:	e03e      	b.n	8002c4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e039      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <HAL_RCC_OscConfig+0x618>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d12c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d123      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d11b      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d113      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d109      	bne.n	8002c46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	019f800c 	.word	0x019f800c
 8002c5c:	feeefffc 	.word	0xfeeefffc

08002c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e11e      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b91      	ldr	r3, [pc, #580]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 020f 	bic.w	r2, r3, #15
 8002c8e:	498c      	ldr	r1, [pc, #560]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e106      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d073      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d129      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbc:	4b81      	ldr	r3, [pc, #516]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0f4      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ccc:	f000 f966 	bl	8002f9c <RCC_GetSysClockFreqFromPLLSource>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4a7c      	ldr	r2, [pc, #496]	@ (8002ec8 <HAL_RCC_ClockConfig+0x268>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d93f      	bls.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cda:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d033      	beq.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d12f      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfa:	4b72      	ldr	r3, [pc, #456]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d02:	4a70      	ldr	r2, [pc, #448]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e024      	b.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d18:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0c6      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d28:	4b66      	ldr	r3, [pc, #408]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0be      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d38:	f000 f8ce 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4a61      	ldr	r2, [pc, #388]	@ (8002ec8 <HAL_RCC_ClockConfig+0x268>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d909      	bls.n	8002d5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d46:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d4e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d56:	2380      	movs	r3, #128	@ 0x80
 8002d58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4957      	ldr	r1, [pc, #348]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6c:	f7ff f910 	bl	8001f90 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7ff f90c 	bl	8001f90 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e095      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d023      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db4:	4b43      	ldr	r3, [pc, #268]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4a42      	ldr	r2, [pc, #264]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002dd4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b39      	ldr	r3, [pc, #228]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4936      	ldr	r1, [pc, #216]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b80      	cmp	r3, #128	@ 0x80
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002df6:	4b33      	ldr	r3, [pc, #204]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4a32      	ldr	r2, [pc, #200]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002dfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e02:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d21d      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 020f 	bic.w	r2, r3, #15
 8002e18:	4929      	ldr	r1, [pc, #164]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e20:	f7ff f8b6 	bl	8001f90 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7ff f8b2 	bl	8001f90 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e03b      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1ed      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4917      	ldr	r1, [pc, #92]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490f      	ldr	r1, [pc, #60]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e8a:	f000 f825 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <HAL_RCC_ClockConfig+0x264>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490c      	ldr	r1, [pc, #48]	@ (8002ecc <HAL_RCC_ClockConfig+0x26c>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <HAL_RCC_ClockConfig+0x270>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_RCC_ClockConfig+0x274>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff f822 	bl	8001ef8 <HAL_InitTick>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	04c4b400 	.word	0x04c4b400
 8002ecc:	08003f68 	.word	0x08003f68
 8002ed0:	20000124 	.word	0x20000124
 8002ed4:	20000128 	.word	0x20000128

08002ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ede:	4b2c      	ldr	r3, [pc, #176]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d102      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eea:	4b2a      	ldr	r3, [pc, #168]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e047      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ef0:	4b27      	ldr	r3, [pc, #156]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002efc:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e03e      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f02:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d136      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f0e:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f18:	4b1d      	ldr	r3, [pc, #116]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3301      	adds	r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d10c      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	4a16      	ldr	r2, [pc, #88]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f36:	68d2      	ldr	r2, [r2, #12]
 8002f38:	0a12      	lsrs	r2, r2, #8
 8002f3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	617b      	str	r3, [r7, #20]
      break;
 8002f44:	e00c      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f46:	4a13      	ldr	r2, [pc, #76]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4a10      	ldr	r2, [pc, #64]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f50:	68d2      	ldr	r2, [r2, #12]
 8002f52:	0a12      	lsrs	r2, r2, #8
 8002f54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f58:	fb02 f303 	mul.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
      break;
 8002f5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0e5b      	lsrs	r3, r3, #25
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e001      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f80:	693b      	ldr	r3, [r7, #16]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800301c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	@ (800301c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d10c      	bne.n	8002fda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fc0:	4a17      	ldr	r2, [pc, #92]	@ (8003020 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fca:	68d2      	ldr	r2, [r2, #12]
 8002fcc:	0a12      	lsrs	r2, r2, #8
 8002fce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	617b      	str	r3, [r7, #20]
    break;
 8002fd8:	e00c      	b.n	8002ff4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fda:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800301c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fe4:	68d2      	ldr	r2, [r2, #12]
 8002fe6:	0a12      	lsrs	r2, r2, #8
 8002fe8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]
    break;
 8002ff2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ff4:	4b09      	ldr	r3, [pc, #36]	@ (800301c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0e5b      	lsrs	r3, r3, #25
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800300e:	687b      	ldr	r3, [r7, #4]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40021000 	.word	0x40021000
 8003020:	007a1200 	.word	0x007a1200
 8003024:	00f42400 	.word	0x00f42400

08003028 <memset>:
 8003028:	4402      	add	r2, r0
 800302a:	4603      	mov	r3, r0
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	f803 1b01 	strb.w	r1, [r3], #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <__errno>:
 8003038:	4b01      	ldr	r3, [pc, #4]	@ (8003040 <__errno+0x8>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000130 	.word	0x20000130

08003044 <__libc_init_array>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	4d0d      	ldr	r5, [pc, #52]	@ (800307c <__libc_init_array+0x38>)
 8003048:	4c0d      	ldr	r4, [pc, #52]	@ (8003080 <__libc_init_array+0x3c>)
 800304a:	1b64      	subs	r4, r4, r5
 800304c:	10a4      	asrs	r4, r4, #2
 800304e:	2600      	movs	r6, #0
 8003050:	42a6      	cmp	r6, r4
 8003052:	d109      	bne.n	8003068 <__libc_init_array+0x24>
 8003054:	4d0b      	ldr	r5, [pc, #44]	@ (8003084 <__libc_init_array+0x40>)
 8003056:	4c0c      	ldr	r4, [pc, #48]	@ (8003088 <__libc_init_array+0x44>)
 8003058:	f000 ff78 	bl	8003f4c <_init>
 800305c:	1b64      	subs	r4, r4, r5
 800305e:	10a4      	asrs	r4, r4, #2
 8003060:	2600      	movs	r6, #0
 8003062:	42a6      	cmp	r6, r4
 8003064:	d105      	bne.n	8003072 <__libc_init_array+0x2e>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	f855 3b04 	ldr.w	r3, [r5], #4
 800306c:	4798      	blx	r3
 800306e:	3601      	adds	r6, #1
 8003070:	e7ee      	b.n	8003050 <__libc_init_array+0xc>
 8003072:	f855 3b04 	ldr.w	r3, [r5], #4
 8003076:	4798      	blx	r3
 8003078:	3601      	adds	r6, #1
 800307a:	e7f2      	b.n	8003062 <__libc_init_array+0x1e>
 800307c:	08003fa8 	.word	0x08003fa8
 8003080:	08003fa8 	.word	0x08003fa8
 8003084:	08003fa8 	.word	0x08003fa8
 8003088:	08003fac 	.word	0x08003fac

0800308c <pow>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	ed2d 8b02 	vpush	{d8}
 8003092:	eeb0 8a40 	vmov.f32	s16, s0
 8003096:	eef0 8a60 	vmov.f32	s17, s1
 800309a:	ec55 4b11 	vmov	r4, r5, d1
 800309e:	f000 f873 	bl	8003188 <__ieee754_pow>
 80030a2:	4622      	mov	r2, r4
 80030a4:	462b      	mov	r3, r5
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	ec57 6b10 	vmov	r6, r7, d0
 80030ae:	f7fd fd09 	bl	8000ac4 <__aeabi_dcmpun>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d13b      	bne.n	800312e <pow+0xa2>
 80030b6:	ec51 0b18 	vmov	r0, r1, d8
 80030ba:	2200      	movs	r2, #0
 80030bc:	2300      	movs	r3, #0
 80030be:	f7fd fccf 	bl	8000a60 <__aeabi_dcmpeq>
 80030c2:	b1b8      	cbz	r0, 80030f4 <pow+0x68>
 80030c4:	2200      	movs	r2, #0
 80030c6:	2300      	movs	r3, #0
 80030c8:	4620      	mov	r0, r4
 80030ca:	4629      	mov	r1, r5
 80030cc:	f7fd fcc8 	bl	8000a60 <__aeabi_dcmpeq>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d146      	bne.n	8003162 <pow+0xd6>
 80030d4:	ec45 4b10 	vmov	d0, r4, r5
 80030d8:	f000 f848 	bl	800316c <finite>
 80030dc:	b338      	cbz	r0, 800312e <pow+0xa2>
 80030de:	2200      	movs	r2, #0
 80030e0:	2300      	movs	r3, #0
 80030e2:	4620      	mov	r0, r4
 80030e4:	4629      	mov	r1, r5
 80030e6:	f7fd fcc5 	bl	8000a74 <__aeabi_dcmplt>
 80030ea:	b300      	cbz	r0, 800312e <pow+0xa2>
 80030ec:	f7ff ffa4 	bl	8003038 <__errno>
 80030f0:	2322      	movs	r3, #34	@ 0x22
 80030f2:	e01b      	b.n	800312c <pow+0xa0>
 80030f4:	ec47 6b10 	vmov	d0, r6, r7
 80030f8:	f000 f838 	bl	800316c <finite>
 80030fc:	b9e0      	cbnz	r0, 8003138 <pow+0xac>
 80030fe:	eeb0 0a48 	vmov.f32	s0, s16
 8003102:	eef0 0a68 	vmov.f32	s1, s17
 8003106:	f000 f831 	bl	800316c <finite>
 800310a:	b1a8      	cbz	r0, 8003138 <pow+0xac>
 800310c:	ec45 4b10 	vmov	d0, r4, r5
 8003110:	f000 f82c 	bl	800316c <finite>
 8003114:	b180      	cbz	r0, 8003138 <pow+0xac>
 8003116:	4632      	mov	r2, r6
 8003118:	463b      	mov	r3, r7
 800311a:	4630      	mov	r0, r6
 800311c:	4639      	mov	r1, r7
 800311e:	f7fd fcd1 	bl	8000ac4 <__aeabi_dcmpun>
 8003122:	2800      	cmp	r0, #0
 8003124:	d0e2      	beq.n	80030ec <pow+0x60>
 8003126:	f7ff ff87 	bl	8003038 <__errno>
 800312a:	2321      	movs	r3, #33	@ 0x21
 800312c:	6003      	str	r3, [r0, #0]
 800312e:	ecbd 8b02 	vpop	{d8}
 8003132:	ec47 6b10 	vmov	d0, r6, r7
 8003136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003138:	2200      	movs	r2, #0
 800313a:	2300      	movs	r3, #0
 800313c:	4630      	mov	r0, r6
 800313e:	4639      	mov	r1, r7
 8003140:	f7fd fc8e 	bl	8000a60 <__aeabi_dcmpeq>
 8003144:	2800      	cmp	r0, #0
 8003146:	d0f2      	beq.n	800312e <pow+0xa2>
 8003148:	eeb0 0a48 	vmov.f32	s0, s16
 800314c:	eef0 0a68 	vmov.f32	s1, s17
 8003150:	f000 f80c 	bl	800316c <finite>
 8003154:	2800      	cmp	r0, #0
 8003156:	d0ea      	beq.n	800312e <pow+0xa2>
 8003158:	ec45 4b10 	vmov	d0, r4, r5
 800315c:	f000 f806 	bl	800316c <finite>
 8003160:	e7c3      	b.n	80030ea <pow+0x5e>
 8003162:	4f01      	ldr	r7, [pc, #4]	@ (8003168 <pow+0xdc>)
 8003164:	2600      	movs	r6, #0
 8003166:	e7e2      	b.n	800312e <pow+0xa2>
 8003168:	3ff00000 	.word	0x3ff00000

0800316c <finite>:
 800316c:	b082      	sub	sp, #8
 800316e:	ed8d 0b00 	vstr	d0, [sp]
 8003172:	9801      	ldr	r0, [sp, #4]
 8003174:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003178:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800317c:	0fc0      	lsrs	r0, r0, #31
 800317e:	b002      	add	sp, #8
 8003180:	4770      	bx	lr
 8003182:	0000      	movs	r0, r0
 8003184:	0000      	movs	r0, r0
	...

08003188 <__ieee754_pow>:
 8003188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318c:	b091      	sub	sp, #68	@ 0x44
 800318e:	ed8d 1b00 	vstr	d1, [sp]
 8003192:	e9dd 1900 	ldrd	r1, r9, [sp]
 8003196:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800319a:	ea5a 0001 	orrs.w	r0, sl, r1
 800319e:	ec57 6b10 	vmov	r6, r7, d0
 80031a2:	d113      	bne.n	80031cc <__ieee754_pow+0x44>
 80031a4:	19b3      	adds	r3, r6, r6
 80031a6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80031aa:	4152      	adcs	r2, r2
 80031ac:	4298      	cmp	r0, r3
 80031ae:	4b98      	ldr	r3, [pc, #608]	@ (8003410 <__ieee754_pow+0x288>)
 80031b0:	4193      	sbcs	r3, r2
 80031b2:	f080 84ea 	bcs.w	8003b8a <__ieee754_pow+0xa02>
 80031b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031ba:	4630      	mov	r0, r6
 80031bc:	4639      	mov	r1, r7
 80031be:	f7fd f831 	bl	8000224 <__adddf3>
 80031c2:	ec41 0b10 	vmov	d0, r0, r1
 80031c6:	b011      	add	sp, #68	@ 0x44
 80031c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031cc:	4a91      	ldr	r2, [pc, #580]	@ (8003414 <__ieee754_pow+0x28c>)
 80031ce:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80031d2:	4590      	cmp	r8, r2
 80031d4:	463d      	mov	r5, r7
 80031d6:	4633      	mov	r3, r6
 80031d8:	d806      	bhi.n	80031e8 <__ieee754_pow+0x60>
 80031da:	d101      	bne.n	80031e0 <__ieee754_pow+0x58>
 80031dc:	2e00      	cmp	r6, #0
 80031de:	d1ea      	bne.n	80031b6 <__ieee754_pow+0x2e>
 80031e0:	4592      	cmp	sl, r2
 80031e2:	d801      	bhi.n	80031e8 <__ieee754_pow+0x60>
 80031e4:	d10e      	bne.n	8003204 <__ieee754_pow+0x7c>
 80031e6:	b169      	cbz	r1, 8003204 <__ieee754_pow+0x7c>
 80031e8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80031ec:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80031f0:	431d      	orrs	r5, r3
 80031f2:	d1e0      	bne.n	80031b6 <__ieee754_pow+0x2e>
 80031f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80031f8:	18db      	adds	r3, r3, r3
 80031fa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80031fe:	4152      	adcs	r2, r2
 8003200:	429d      	cmp	r5, r3
 8003202:	e7d4      	b.n	80031ae <__ieee754_pow+0x26>
 8003204:	2d00      	cmp	r5, #0
 8003206:	46c3      	mov	fp, r8
 8003208:	da3a      	bge.n	8003280 <__ieee754_pow+0xf8>
 800320a:	4a83      	ldr	r2, [pc, #524]	@ (8003418 <__ieee754_pow+0x290>)
 800320c:	4592      	cmp	sl, r2
 800320e:	d84d      	bhi.n	80032ac <__ieee754_pow+0x124>
 8003210:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8003214:	4592      	cmp	sl, r2
 8003216:	f240 84c7 	bls.w	8003ba8 <__ieee754_pow+0xa20>
 800321a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800321e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003222:	2a14      	cmp	r2, #20
 8003224:	dd0f      	ble.n	8003246 <__ieee754_pow+0xbe>
 8003226:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800322a:	fa21 f402 	lsr.w	r4, r1, r2
 800322e:	fa04 f202 	lsl.w	r2, r4, r2
 8003232:	428a      	cmp	r2, r1
 8003234:	f040 84b8 	bne.w	8003ba8 <__ieee754_pow+0xa20>
 8003238:	f004 0401 	and.w	r4, r4, #1
 800323c:	f1c4 0402 	rsb	r4, r4, #2
 8003240:	2900      	cmp	r1, #0
 8003242:	d158      	bne.n	80032f6 <__ieee754_pow+0x16e>
 8003244:	e00e      	b.n	8003264 <__ieee754_pow+0xdc>
 8003246:	2900      	cmp	r1, #0
 8003248:	d154      	bne.n	80032f4 <__ieee754_pow+0x16c>
 800324a:	f1c2 0214 	rsb	r2, r2, #20
 800324e:	fa4a f402 	asr.w	r4, sl, r2
 8003252:	fa04 f202 	lsl.w	r2, r4, r2
 8003256:	4552      	cmp	r2, sl
 8003258:	f040 84a3 	bne.w	8003ba2 <__ieee754_pow+0xa1a>
 800325c:	f004 0401 	and.w	r4, r4, #1
 8003260:	f1c4 0402 	rsb	r4, r4, #2
 8003264:	4a6d      	ldr	r2, [pc, #436]	@ (800341c <__ieee754_pow+0x294>)
 8003266:	4592      	cmp	sl, r2
 8003268:	d12e      	bne.n	80032c8 <__ieee754_pow+0x140>
 800326a:	f1b9 0f00 	cmp.w	r9, #0
 800326e:	f280 8494 	bge.w	8003b9a <__ieee754_pow+0xa12>
 8003272:	496a      	ldr	r1, [pc, #424]	@ (800341c <__ieee754_pow+0x294>)
 8003274:	4632      	mov	r2, r6
 8003276:	463b      	mov	r3, r7
 8003278:	2000      	movs	r0, #0
 800327a:	f7fd fab3 	bl	80007e4 <__aeabi_ddiv>
 800327e:	e7a0      	b.n	80031c2 <__ieee754_pow+0x3a>
 8003280:	2400      	movs	r4, #0
 8003282:	bbc1      	cbnz	r1, 80032f6 <__ieee754_pow+0x16e>
 8003284:	4a63      	ldr	r2, [pc, #396]	@ (8003414 <__ieee754_pow+0x28c>)
 8003286:	4592      	cmp	sl, r2
 8003288:	d1ec      	bne.n	8003264 <__ieee754_pow+0xdc>
 800328a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800328e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8003292:	431a      	orrs	r2, r3
 8003294:	f000 8479 	beq.w	8003b8a <__ieee754_pow+0xa02>
 8003298:	4b61      	ldr	r3, [pc, #388]	@ (8003420 <__ieee754_pow+0x298>)
 800329a:	4598      	cmp	r8, r3
 800329c:	d908      	bls.n	80032b0 <__ieee754_pow+0x128>
 800329e:	f1b9 0f00 	cmp.w	r9, #0
 80032a2:	f2c0 8476 	blt.w	8003b92 <__ieee754_pow+0xa0a>
 80032a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80032aa:	e78a      	b.n	80031c2 <__ieee754_pow+0x3a>
 80032ac:	2402      	movs	r4, #2
 80032ae:	e7e8      	b.n	8003282 <__ieee754_pow+0xfa>
 80032b0:	f1b9 0f00 	cmp.w	r9, #0
 80032b4:	f04f 0000 	mov.w	r0, #0
 80032b8:	f04f 0100 	mov.w	r1, #0
 80032bc:	da81      	bge.n	80031c2 <__ieee754_pow+0x3a>
 80032be:	e9dd 0300 	ldrd	r0, r3, [sp]
 80032c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80032c6:	e77c      	b.n	80031c2 <__ieee754_pow+0x3a>
 80032c8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80032cc:	d106      	bne.n	80032dc <__ieee754_pow+0x154>
 80032ce:	4632      	mov	r2, r6
 80032d0:	463b      	mov	r3, r7
 80032d2:	4630      	mov	r0, r6
 80032d4:	4639      	mov	r1, r7
 80032d6:	f7fd f95b 	bl	8000590 <__aeabi_dmul>
 80032da:	e772      	b.n	80031c2 <__ieee754_pow+0x3a>
 80032dc:	4a51      	ldr	r2, [pc, #324]	@ (8003424 <__ieee754_pow+0x29c>)
 80032de:	4591      	cmp	r9, r2
 80032e0:	d109      	bne.n	80032f6 <__ieee754_pow+0x16e>
 80032e2:	2d00      	cmp	r5, #0
 80032e4:	db07      	blt.n	80032f6 <__ieee754_pow+0x16e>
 80032e6:	ec47 6b10 	vmov	d0, r6, r7
 80032ea:	b011      	add	sp, #68	@ 0x44
 80032ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f0:	f000 bd52 	b.w	8003d98 <__ieee754_sqrt>
 80032f4:	2400      	movs	r4, #0
 80032f6:	ec47 6b10 	vmov	d0, r6, r7
 80032fa:	9302      	str	r3, [sp, #8]
 80032fc:	f000 fc88 	bl	8003c10 <fabs>
 8003300:	9b02      	ldr	r3, [sp, #8]
 8003302:	ec51 0b10 	vmov	r0, r1, d0
 8003306:	bb53      	cbnz	r3, 800335e <__ieee754_pow+0x1d6>
 8003308:	4b44      	ldr	r3, [pc, #272]	@ (800341c <__ieee754_pow+0x294>)
 800330a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800330e:	429a      	cmp	r2, r3
 8003310:	d002      	beq.n	8003318 <__ieee754_pow+0x190>
 8003312:	f1b8 0f00 	cmp.w	r8, #0
 8003316:	d122      	bne.n	800335e <__ieee754_pow+0x1d6>
 8003318:	f1b9 0f00 	cmp.w	r9, #0
 800331c:	da05      	bge.n	800332a <__ieee754_pow+0x1a2>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	2000      	movs	r0, #0
 8003324:	493d      	ldr	r1, [pc, #244]	@ (800341c <__ieee754_pow+0x294>)
 8003326:	f7fd fa5d 	bl	80007e4 <__aeabi_ddiv>
 800332a:	2d00      	cmp	r5, #0
 800332c:	f6bf af49 	bge.w	80031c2 <__ieee754_pow+0x3a>
 8003330:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8003334:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8003338:	ea58 0804 	orrs.w	r8, r8, r4
 800333c:	d108      	bne.n	8003350 <__ieee754_pow+0x1c8>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	f7fc ff6b 	bl	8000220 <__aeabi_dsub>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	e794      	b.n	800327a <__ieee754_pow+0xf2>
 8003350:	2c01      	cmp	r4, #1
 8003352:	f47f af36 	bne.w	80031c2 <__ieee754_pow+0x3a>
 8003356:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800335a:	4619      	mov	r1, r3
 800335c:	e731      	b.n	80031c2 <__ieee754_pow+0x3a>
 800335e:	0feb      	lsrs	r3, r5, #31
 8003360:	3b01      	subs	r3, #1
 8003362:	ea53 0204 	orrs.w	r2, r3, r4
 8003366:	d102      	bne.n	800336e <__ieee754_pow+0x1e6>
 8003368:	4632      	mov	r2, r6
 800336a:	463b      	mov	r3, r7
 800336c:	e7e9      	b.n	8003342 <__ieee754_pow+0x1ba>
 800336e:	3c01      	subs	r4, #1
 8003370:	431c      	orrs	r4, r3
 8003372:	d016      	beq.n	80033a2 <__ieee754_pow+0x21a>
 8003374:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8003400 <__ieee754_pow+0x278>
 8003378:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800337c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003380:	f240 8112 	bls.w	80035a8 <__ieee754_pow+0x420>
 8003384:	4b28      	ldr	r3, [pc, #160]	@ (8003428 <__ieee754_pow+0x2a0>)
 8003386:	459a      	cmp	sl, r3
 8003388:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <__ieee754_pow+0x298>)
 800338a:	d916      	bls.n	80033ba <__ieee754_pow+0x232>
 800338c:	4598      	cmp	r8, r3
 800338e:	d80b      	bhi.n	80033a8 <__ieee754_pow+0x220>
 8003390:	f1b9 0f00 	cmp.w	r9, #0
 8003394:	da0b      	bge.n	80033ae <__ieee754_pow+0x226>
 8003396:	2000      	movs	r0, #0
 8003398:	b011      	add	sp, #68	@ 0x44
 800339a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339e:	f000 bcf3 	b.w	8003d88 <__math_oflow>
 80033a2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8003408 <__ieee754_pow+0x280>
 80033a6:	e7e7      	b.n	8003378 <__ieee754_pow+0x1f0>
 80033a8:	f1b9 0f00 	cmp.w	r9, #0
 80033ac:	dcf3      	bgt.n	8003396 <__ieee754_pow+0x20e>
 80033ae:	2000      	movs	r0, #0
 80033b0:	b011      	add	sp, #68	@ 0x44
 80033b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b6:	f000 bcdf 	b.w	8003d78 <__math_uflow>
 80033ba:	4598      	cmp	r8, r3
 80033bc:	d20c      	bcs.n	80033d8 <__ieee754_pow+0x250>
 80033be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033c2:	2200      	movs	r2, #0
 80033c4:	2300      	movs	r3, #0
 80033c6:	f7fd fb55 	bl	8000a74 <__aeabi_dcmplt>
 80033ca:	3800      	subs	r0, #0
 80033cc:	bf18      	it	ne
 80033ce:	2001      	movne	r0, #1
 80033d0:	f1b9 0f00 	cmp.w	r9, #0
 80033d4:	daec      	bge.n	80033b0 <__ieee754_pow+0x228>
 80033d6:	e7df      	b.n	8003398 <__ieee754_pow+0x210>
 80033d8:	4b10      	ldr	r3, [pc, #64]	@ (800341c <__ieee754_pow+0x294>)
 80033da:	4598      	cmp	r8, r3
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	d924      	bls.n	800342c <__ieee754_pow+0x2a4>
 80033e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033e6:	2300      	movs	r3, #0
 80033e8:	f7fd fb44 	bl	8000a74 <__aeabi_dcmplt>
 80033ec:	3800      	subs	r0, #0
 80033ee:	bf18      	it	ne
 80033f0:	2001      	movne	r0, #1
 80033f2:	f1b9 0f00 	cmp.w	r9, #0
 80033f6:	dccf      	bgt.n	8003398 <__ieee754_pow+0x210>
 80033f8:	e7da      	b.n	80033b0 <__ieee754_pow+0x228>
 80033fa:	bf00      	nop
 80033fc:	f3af 8000 	nop.w
 8003400:	00000000 	.word	0x00000000
 8003404:	3ff00000 	.word	0x3ff00000
 8003408:	00000000 	.word	0x00000000
 800340c:	bff00000 	.word	0xbff00000
 8003410:	fff00000 	.word	0xfff00000
 8003414:	7ff00000 	.word	0x7ff00000
 8003418:	433fffff 	.word	0x433fffff
 800341c:	3ff00000 	.word	0x3ff00000
 8003420:	3fefffff 	.word	0x3fefffff
 8003424:	3fe00000 	.word	0x3fe00000
 8003428:	43f00000 	.word	0x43f00000
 800342c:	4b5a      	ldr	r3, [pc, #360]	@ (8003598 <__ieee754_pow+0x410>)
 800342e:	f7fc fef7 	bl	8000220 <__aeabi_dsub>
 8003432:	a351      	add	r3, pc, #324	@ (adr r3, 8003578 <__ieee754_pow+0x3f0>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	4604      	mov	r4, r0
 800343a:	460d      	mov	r5, r1
 800343c:	f7fd f8a8 	bl	8000590 <__aeabi_dmul>
 8003440:	a34f      	add	r3, pc, #316	@ (adr r3, 8003580 <__ieee754_pow+0x3f8>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	4606      	mov	r6, r0
 8003448:	460f      	mov	r7, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fd f89f 	bl	8000590 <__aeabi_dmul>
 8003452:	4b52      	ldr	r3, [pc, #328]	@ (800359c <__ieee754_pow+0x414>)
 8003454:	4682      	mov	sl, r0
 8003456:	468b      	mov	fp, r1
 8003458:	2200      	movs	r2, #0
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f7fd f897 	bl	8000590 <__aeabi_dmul>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	a148      	add	r1, pc, #288	@ (adr r1, 8003588 <__ieee754_pow+0x400>)
 8003468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800346c:	f7fc fed8 	bl	8000220 <__aeabi_dsub>
 8003470:	4622      	mov	r2, r4
 8003472:	462b      	mov	r3, r5
 8003474:	f7fd f88c 	bl	8000590 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	2000      	movs	r0, #0
 800347e:	4948      	ldr	r1, [pc, #288]	@ (80035a0 <__ieee754_pow+0x418>)
 8003480:	f7fc fece 	bl	8000220 <__aeabi_dsub>
 8003484:	4622      	mov	r2, r4
 8003486:	4680      	mov	r8, r0
 8003488:	4689      	mov	r9, r1
 800348a:	462b      	mov	r3, r5
 800348c:	4620      	mov	r0, r4
 800348e:	4629      	mov	r1, r5
 8003490:	f7fd f87e 	bl	8000590 <__aeabi_dmul>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4640      	mov	r0, r8
 800349a:	4649      	mov	r1, r9
 800349c:	f7fd f878 	bl	8000590 <__aeabi_dmul>
 80034a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8003590 <__ieee754_pow+0x408>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f7fd f873 	bl	8000590 <__aeabi_dmul>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4650      	mov	r0, sl
 80034b0:	4659      	mov	r1, fp
 80034b2:	f7fc feb5 	bl	8000220 <__aeabi_dsub>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4680      	mov	r8, r0
 80034bc:	4689      	mov	r9, r1
 80034be:	4630      	mov	r0, r6
 80034c0:	4639      	mov	r1, r7
 80034c2:	f7fc feaf 	bl	8000224 <__adddf3>
 80034c6:	2400      	movs	r4, #0
 80034c8:	4632      	mov	r2, r6
 80034ca:	463b      	mov	r3, r7
 80034cc:	4620      	mov	r0, r4
 80034ce:	460d      	mov	r5, r1
 80034d0:	f7fc fea6 	bl	8000220 <__aeabi_dsub>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4640      	mov	r0, r8
 80034da:	4649      	mov	r1, r9
 80034dc:	f7fc fea0 	bl	8000220 <__aeabi_dsub>
 80034e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034e8:	2300      	movs	r3, #0
 80034ea:	9304      	str	r3, [sp, #16]
 80034ec:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80034f0:	4606      	mov	r6, r0
 80034f2:	460f      	mov	r7, r1
 80034f4:	4652      	mov	r2, sl
 80034f6:	465b      	mov	r3, fp
 80034f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034fc:	f7fc fe90 	bl	8000220 <__aeabi_dsub>
 8003500:	4622      	mov	r2, r4
 8003502:	462b      	mov	r3, r5
 8003504:	f7fd f844 	bl	8000590 <__aeabi_dmul>
 8003508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800350c:	4680      	mov	r8, r0
 800350e:	4689      	mov	r9, r1
 8003510:	4630      	mov	r0, r6
 8003512:	4639      	mov	r1, r7
 8003514:	f7fd f83c 	bl	8000590 <__aeabi_dmul>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4640      	mov	r0, r8
 800351e:	4649      	mov	r1, r9
 8003520:	f7fc fe80 	bl	8000224 <__adddf3>
 8003524:	4652      	mov	r2, sl
 8003526:	465b      	mov	r3, fp
 8003528:	4606      	mov	r6, r0
 800352a:	460f      	mov	r7, r1
 800352c:	4620      	mov	r0, r4
 800352e:	4629      	mov	r1, r5
 8003530:	f7fd f82e 	bl	8000590 <__aeabi_dmul>
 8003534:	460b      	mov	r3, r1
 8003536:	4602      	mov	r2, r0
 8003538:	4680      	mov	r8, r0
 800353a:	4689      	mov	r9, r1
 800353c:	4630      	mov	r0, r6
 800353e:	4639      	mov	r1, r7
 8003540:	f7fc fe70 	bl	8000224 <__adddf3>
 8003544:	4b17      	ldr	r3, [pc, #92]	@ (80035a4 <__ieee754_pow+0x41c>)
 8003546:	4299      	cmp	r1, r3
 8003548:	4604      	mov	r4, r0
 800354a:	460d      	mov	r5, r1
 800354c:	468a      	mov	sl, r1
 800354e:	468b      	mov	fp, r1
 8003550:	f340 82ef 	ble.w	8003b32 <__ieee754_pow+0x9aa>
 8003554:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003558:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800355c:	4303      	orrs	r3, r0
 800355e:	f000 81e8 	beq.w	8003932 <__ieee754_pow+0x7aa>
 8003562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	2300      	movs	r3, #0
 800356a:	f7fd fa83 	bl	8000a74 <__aeabi_dcmplt>
 800356e:	3800      	subs	r0, #0
 8003570:	bf18      	it	ne
 8003572:	2001      	movne	r0, #1
 8003574:	e710      	b.n	8003398 <__ieee754_pow+0x210>
 8003576:	bf00      	nop
 8003578:	60000000 	.word	0x60000000
 800357c:	3ff71547 	.word	0x3ff71547
 8003580:	f85ddf44 	.word	0xf85ddf44
 8003584:	3e54ae0b 	.word	0x3e54ae0b
 8003588:	55555555 	.word	0x55555555
 800358c:	3fd55555 	.word	0x3fd55555
 8003590:	652b82fe 	.word	0x652b82fe
 8003594:	3ff71547 	.word	0x3ff71547
 8003598:	3ff00000 	.word	0x3ff00000
 800359c:	3fd00000 	.word	0x3fd00000
 80035a0:	3fe00000 	.word	0x3fe00000
 80035a4:	408fffff 	.word	0x408fffff
 80035a8:	4bd5      	ldr	r3, [pc, #852]	@ (8003900 <__ieee754_pow+0x778>)
 80035aa:	402b      	ands	r3, r5
 80035ac:	2200      	movs	r2, #0
 80035ae:	b92b      	cbnz	r3, 80035bc <__ieee754_pow+0x434>
 80035b0:	4bd4      	ldr	r3, [pc, #848]	@ (8003904 <__ieee754_pow+0x77c>)
 80035b2:	f7fc ffed 	bl	8000590 <__aeabi_dmul>
 80035b6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80035ba:	468b      	mov	fp, r1
 80035bc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80035c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80035c4:	4413      	add	r3, r2
 80035c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80035c8:	4bcf      	ldr	r3, [pc, #828]	@ (8003908 <__ieee754_pow+0x780>)
 80035ca:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80035ce:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80035d2:	459b      	cmp	fp, r3
 80035d4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80035d8:	dd08      	ble.n	80035ec <__ieee754_pow+0x464>
 80035da:	4bcc      	ldr	r3, [pc, #816]	@ (800390c <__ieee754_pow+0x784>)
 80035dc:	459b      	cmp	fp, r3
 80035de:	f340 81a5 	ble.w	800392c <__ieee754_pow+0x7a4>
 80035e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80035e4:	3301      	adds	r3, #1
 80035e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80035e8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80035ec:	f04f 0a00 	mov.w	sl, #0
 80035f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80035f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80035f6:	4bc6      	ldr	r3, [pc, #792]	@ (8003910 <__ieee754_pow+0x788>)
 80035f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80035fc:	ed93 7b00 	vldr	d7, [r3]
 8003600:	4629      	mov	r1, r5
 8003602:	ec53 2b17 	vmov	r2, r3, d7
 8003606:	ed8d 7b06 	vstr	d7, [sp, #24]
 800360a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800360e:	f7fc fe07 	bl	8000220 <__aeabi_dsub>
 8003612:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003616:	4606      	mov	r6, r0
 8003618:	460f      	mov	r7, r1
 800361a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800361e:	f7fc fe01 	bl	8000224 <__adddf3>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	2000      	movs	r0, #0
 8003628:	49ba      	ldr	r1, [pc, #744]	@ (8003914 <__ieee754_pow+0x78c>)
 800362a:	f7fd f8db 	bl	80007e4 <__aeabi_ddiv>
 800362e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4630      	mov	r0, r6
 8003638:	4639      	mov	r1, r7
 800363a:	f7fc ffa9 	bl	8000590 <__aeabi_dmul>
 800363e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003642:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8003646:	106d      	asrs	r5, r5, #1
 8003648:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800364c:	f04f 0b00 	mov.w	fp, #0
 8003650:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003654:	4661      	mov	r1, ip
 8003656:	2200      	movs	r2, #0
 8003658:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800365c:	4658      	mov	r0, fp
 800365e:	46e1      	mov	r9, ip
 8003660:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8003664:	4614      	mov	r4, r2
 8003666:	461d      	mov	r5, r3
 8003668:	f7fc ff92 	bl	8000590 <__aeabi_dmul>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4630      	mov	r0, r6
 8003672:	4639      	mov	r1, r7
 8003674:	f7fc fdd4 	bl	8000220 <__aeabi_dsub>
 8003678:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800367c:	4606      	mov	r6, r0
 800367e:	460f      	mov	r7, r1
 8003680:	4620      	mov	r0, r4
 8003682:	4629      	mov	r1, r5
 8003684:	f7fc fdcc 	bl	8000220 <__aeabi_dsub>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003690:	f7fc fdc6 	bl	8000220 <__aeabi_dsub>
 8003694:	465a      	mov	r2, fp
 8003696:	464b      	mov	r3, r9
 8003698:	f7fc ff7a 	bl	8000590 <__aeabi_dmul>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4630      	mov	r0, r6
 80036a2:	4639      	mov	r1, r7
 80036a4:	f7fc fdbc 	bl	8000220 <__aeabi_dsub>
 80036a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80036ac:	f7fc ff70 	bl	8000590 <__aeabi_dmul>
 80036b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	f7fc ff68 	bl	8000590 <__aeabi_dmul>
 80036c0:	a37d      	add	r3, pc, #500	@ (adr r3, 80038b8 <__ieee754_pow+0x730>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	4604      	mov	r4, r0
 80036c8:	460d      	mov	r5, r1
 80036ca:	f7fc ff61 	bl	8000590 <__aeabi_dmul>
 80036ce:	a37c      	add	r3, pc, #496	@ (adr r3, 80038c0 <__ieee754_pow+0x738>)
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f7fc fda6 	bl	8000224 <__adddf3>
 80036d8:	4622      	mov	r2, r4
 80036da:	462b      	mov	r3, r5
 80036dc:	f7fc ff58 	bl	8000590 <__aeabi_dmul>
 80036e0:	a379      	add	r3, pc, #484	@ (adr r3, 80038c8 <__ieee754_pow+0x740>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f7fc fd9d 	bl	8000224 <__adddf3>
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	f7fc ff4f 	bl	8000590 <__aeabi_dmul>
 80036f2:	a377      	add	r3, pc, #476	@ (adr r3, 80038d0 <__ieee754_pow+0x748>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f7fc fd94 	bl	8000224 <__adddf3>
 80036fc:	4622      	mov	r2, r4
 80036fe:	462b      	mov	r3, r5
 8003700:	f7fc ff46 	bl	8000590 <__aeabi_dmul>
 8003704:	a374      	add	r3, pc, #464	@ (adr r3, 80038d8 <__ieee754_pow+0x750>)
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	f7fc fd8b 	bl	8000224 <__adddf3>
 800370e:	4622      	mov	r2, r4
 8003710:	462b      	mov	r3, r5
 8003712:	f7fc ff3d 	bl	8000590 <__aeabi_dmul>
 8003716:	a372      	add	r3, pc, #456	@ (adr r3, 80038e0 <__ieee754_pow+0x758>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f7fc fd82 	bl	8000224 <__adddf3>
 8003720:	4622      	mov	r2, r4
 8003722:	4606      	mov	r6, r0
 8003724:	460f      	mov	r7, r1
 8003726:	462b      	mov	r3, r5
 8003728:	4620      	mov	r0, r4
 800372a:	4629      	mov	r1, r5
 800372c:	f7fc ff30 	bl	8000590 <__aeabi_dmul>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4630      	mov	r0, r6
 8003736:	4639      	mov	r1, r7
 8003738:	f7fc ff2a 	bl	8000590 <__aeabi_dmul>
 800373c:	465a      	mov	r2, fp
 800373e:	4604      	mov	r4, r0
 8003740:	460d      	mov	r5, r1
 8003742:	464b      	mov	r3, r9
 8003744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003748:	f7fc fd6c 	bl	8000224 <__adddf3>
 800374c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003750:	f7fc ff1e 	bl	8000590 <__aeabi_dmul>
 8003754:	4622      	mov	r2, r4
 8003756:	462b      	mov	r3, r5
 8003758:	f7fc fd64 	bl	8000224 <__adddf3>
 800375c:	465a      	mov	r2, fp
 800375e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003762:	464b      	mov	r3, r9
 8003764:	4658      	mov	r0, fp
 8003766:	4649      	mov	r1, r9
 8003768:	f7fc ff12 	bl	8000590 <__aeabi_dmul>
 800376c:	4b6a      	ldr	r3, [pc, #424]	@ (8003918 <__ieee754_pow+0x790>)
 800376e:	2200      	movs	r2, #0
 8003770:	4606      	mov	r6, r0
 8003772:	460f      	mov	r7, r1
 8003774:	f7fc fd56 	bl	8000224 <__adddf3>
 8003778:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800377c:	f7fc fd52 	bl	8000224 <__adddf3>
 8003780:	46d8      	mov	r8, fp
 8003782:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8003786:	460d      	mov	r5, r1
 8003788:	465a      	mov	r2, fp
 800378a:	460b      	mov	r3, r1
 800378c:	4640      	mov	r0, r8
 800378e:	4649      	mov	r1, r9
 8003790:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8003794:	f7fc fefc 	bl	8000590 <__aeabi_dmul>
 8003798:	465c      	mov	r4, fp
 800379a:	4680      	mov	r8, r0
 800379c:	4689      	mov	r9, r1
 800379e:	4b5e      	ldr	r3, [pc, #376]	@ (8003918 <__ieee754_pow+0x790>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	4620      	mov	r0, r4
 80037a4:	4629      	mov	r1, r5
 80037a6:	f7fc fd3b 	bl	8000220 <__aeabi_dsub>
 80037aa:	4632      	mov	r2, r6
 80037ac:	463b      	mov	r3, r7
 80037ae:	f7fc fd37 	bl	8000220 <__aeabi_dsub>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80037ba:	f7fc fd31 	bl	8000220 <__aeabi_dsub>
 80037be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037c2:	f7fc fee5 	bl	8000590 <__aeabi_dmul>
 80037c6:	4622      	mov	r2, r4
 80037c8:	4606      	mov	r6, r0
 80037ca:	460f      	mov	r7, r1
 80037cc:	462b      	mov	r3, r5
 80037ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037d2:	f7fc fedd 	bl	8000590 <__aeabi_dmul>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4630      	mov	r0, r6
 80037dc:	4639      	mov	r1, r7
 80037de:	f7fc fd21 	bl	8000224 <__adddf3>
 80037e2:	4606      	mov	r6, r0
 80037e4:	460f      	mov	r7, r1
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4640      	mov	r0, r8
 80037ec:	4649      	mov	r1, r9
 80037ee:	f7fc fd19 	bl	8000224 <__adddf3>
 80037f2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80037f6:	a33c      	add	r3, pc, #240	@ (adr r3, 80038e8 <__ieee754_pow+0x760>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	4658      	mov	r0, fp
 80037fe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8003802:	460d      	mov	r5, r1
 8003804:	f7fc fec4 	bl	8000590 <__aeabi_dmul>
 8003808:	465c      	mov	r4, fp
 800380a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800380e:	4642      	mov	r2, r8
 8003810:	464b      	mov	r3, r9
 8003812:	4620      	mov	r0, r4
 8003814:	4629      	mov	r1, r5
 8003816:	f7fc fd03 	bl	8000220 <__aeabi_dsub>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4630      	mov	r0, r6
 8003820:	4639      	mov	r1, r7
 8003822:	f7fc fcfd 	bl	8000220 <__aeabi_dsub>
 8003826:	a332      	add	r3, pc, #200	@ (adr r3, 80038f0 <__ieee754_pow+0x768>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fc feb0 	bl	8000590 <__aeabi_dmul>
 8003830:	a331      	add	r3, pc, #196	@ (adr r3, 80038f8 <__ieee754_pow+0x770>)
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	4606      	mov	r6, r0
 8003838:	460f      	mov	r7, r1
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	f7fc fea7 	bl	8000590 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4630      	mov	r0, r6
 8003848:	4639      	mov	r1, r7
 800384a:	f7fc fceb 	bl	8000224 <__adddf3>
 800384e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003850:	4b32      	ldr	r3, [pc, #200]	@ (800391c <__ieee754_pow+0x794>)
 8003852:	4413      	add	r3, r2
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f7fc fce4 	bl	8000224 <__adddf3>
 800385c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003860:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003862:	f7fc fe2b 	bl	80004bc <__aeabi_i2d>
 8003866:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003868:	4b2d      	ldr	r3, [pc, #180]	@ (8003920 <__ieee754_pow+0x798>)
 800386a:	4413      	add	r3, r2
 800386c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003870:	4606      	mov	r6, r0
 8003872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003876:	460f      	mov	r7, r1
 8003878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800387c:	f7fc fcd2 	bl	8000224 <__adddf3>
 8003880:	4642      	mov	r2, r8
 8003882:	464b      	mov	r3, r9
 8003884:	f7fc fcce 	bl	8000224 <__adddf3>
 8003888:	4632      	mov	r2, r6
 800388a:	463b      	mov	r3, r7
 800388c:	f7fc fcca 	bl	8000224 <__adddf3>
 8003890:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8003894:	4632      	mov	r2, r6
 8003896:	463b      	mov	r3, r7
 8003898:	4658      	mov	r0, fp
 800389a:	460d      	mov	r5, r1
 800389c:	f7fc fcc0 	bl	8000220 <__aeabi_dsub>
 80038a0:	4642      	mov	r2, r8
 80038a2:	464b      	mov	r3, r9
 80038a4:	f7fc fcbc 	bl	8000220 <__aeabi_dsub>
 80038a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038ac:	f7fc fcb8 	bl	8000220 <__aeabi_dsub>
 80038b0:	465c      	mov	r4, fp
 80038b2:	4602      	mov	r2, r0
 80038b4:	e036      	b.n	8003924 <__ieee754_pow+0x79c>
 80038b6:	bf00      	nop
 80038b8:	4a454eef 	.word	0x4a454eef
 80038bc:	3fca7e28 	.word	0x3fca7e28
 80038c0:	93c9db65 	.word	0x93c9db65
 80038c4:	3fcd864a 	.word	0x3fcd864a
 80038c8:	a91d4101 	.word	0xa91d4101
 80038cc:	3fd17460 	.word	0x3fd17460
 80038d0:	518f264d 	.word	0x518f264d
 80038d4:	3fd55555 	.word	0x3fd55555
 80038d8:	db6fabff 	.word	0xdb6fabff
 80038dc:	3fdb6db6 	.word	0x3fdb6db6
 80038e0:	33333303 	.word	0x33333303
 80038e4:	3fe33333 	.word	0x3fe33333
 80038e8:	e0000000 	.word	0xe0000000
 80038ec:	3feec709 	.word	0x3feec709
 80038f0:	dc3a03fd 	.word	0xdc3a03fd
 80038f4:	3feec709 	.word	0x3feec709
 80038f8:	145b01f5 	.word	0x145b01f5
 80038fc:	be3e2fe0 	.word	0xbe3e2fe0
 8003900:	7ff00000 	.word	0x7ff00000
 8003904:	43400000 	.word	0x43400000
 8003908:	0003988e 	.word	0x0003988e
 800390c:	000bb679 	.word	0x000bb679
 8003910:	08003f98 	.word	0x08003f98
 8003914:	3ff00000 	.word	0x3ff00000
 8003918:	40080000 	.word	0x40080000
 800391c:	08003f78 	.word	0x08003f78
 8003920:	08003f88 	.word	0x08003f88
 8003924:	460b      	mov	r3, r1
 8003926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800392a:	e5d7      	b.n	80034dc <__ieee754_pow+0x354>
 800392c:	f04f 0a01 	mov.w	sl, #1
 8003930:	e65e      	b.n	80035f0 <__ieee754_pow+0x468>
 8003932:	a3b4      	add	r3, pc, #720	@ (adr r3, 8003c04 <__ieee754_pow+0xa7c>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	4630      	mov	r0, r6
 800393a:	4639      	mov	r1, r7
 800393c:	f7fc fc72 	bl	8000224 <__adddf3>
 8003940:	4642      	mov	r2, r8
 8003942:	e9cd 0100 	strd	r0, r1, [sp]
 8003946:	464b      	mov	r3, r9
 8003948:	4620      	mov	r0, r4
 800394a:	4629      	mov	r1, r5
 800394c:	f7fc fc68 	bl	8000220 <__aeabi_dsub>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003958:	f7fd f8aa 	bl	8000ab0 <__aeabi_dcmpgt>
 800395c:	2800      	cmp	r0, #0
 800395e:	f47f ae00 	bne.w	8003562 <__ieee754_pow+0x3da>
 8003962:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8003966:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800396a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800396e:	fa43 fa0a 	asr.w	sl, r3, sl
 8003972:	44da      	add	sl, fp
 8003974:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8003978:	489d      	ldr	r0, [pc, #628]	@ (8003bf0 <__ieee754_pow+0xa68>)
 800397a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800397e:	4108      	asrs	r0, r1
 8003980:	ea00 030a 	and.w	r3, r0, sl
 8003984:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8003988:	f1c1 0114 	rsb	r1, r1, #20
 800398c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8003990:	fa4a fa01 	asr.w	sl, sl, r1
 8003994:	f1bb 0f00 	cmp.w	fp, #0
 8003998:	4640      	mov	r0, r8
 800399a:	4649      	mov	r1, r9
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	bfb8      	it	lt
 80039a2:	f1ca 0a00 	rsblt	sl, sl, #0
 80039a6:	f7fc fc3b 	bl	8000220 <__aeabi_dsub>
 80039aa:	4680      	mov	r8, r0
 80039ac:	4689      	mov	r9, r1
 80039ae:	4632      	mov	r2, r6
 80039b0:	463b      	mov	r3, r7
 80039b2:	4640      	mov	r0, r8
 80039b4:	4649      	mov	r1, r9
 80039b6:	f7fc fc35 	bl	8000224 <__adddf3>
 80039ba:	2400      	movs	r4, #0
 80039bc:	a37c      	add	r3, pc, #496	@ (adr r3, 8003bb0 <__ieee754_pow+0xa28>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	4620      	mov	r0, r4
 80039c4:	460d      	mov	r5, r1
 80039c6:	f7fc fde3 	bl	8000590 <__aeabi_dmul>
 80039ca:	4642      	mov	r2, r8
 80039cc:	e9cd 0100 	strd	r0, r1, [sp]
 80039d0:	464b      	mov	r3, r9
 80039d2:	4620      	mov	r0, r4
 80039d4:	4629      	mov	r1, r5
 80039d6:	f7fc fc23 	bl	8000220 <__aeabi_dsub>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4630      	mov	r0, r6
 80039e0:	4639      	mov	r1, r7
 80039e2:	f7fc fc1d 	bl	8000220 <__aeabi_dsub>
 80039e6:	a374      	add	r3, pc, #464	@ (adr r3, 8003bb8 <__ieee754_pow+0xa30>)
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f7fc fdd0 	bl	8000590 <__aeabi_dmul>
 80039f0:	a373      	add	r3, pc, #460	@ (adr r3, 8003bc0 <__ieee754_pow+0xa38>)
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	4680      	mov	r8, r0
 80039f8:	4689      	mov	r9, r1
 80039fa:	4620      	mov	r0, r4
 80039fc:	4629      	mov	r1, r5
 80039fe:	f7fc fdc7 	bl	8000590 <__aeabi_dmul>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4640      	mov	r0, r8
 8003a08:	4649      	mov	r1, r9
 8003a0a:	f7fc fc0b 	bl	8000224 <__adddf3>
 8003a0e:	4604      	mov	r4, r0
 8003a10:	460d      	mov	r5, r1
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a1a:	f7fc fc03 	bl	8000224 <__adddf3>
 8003a1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a22:	4680      	mov	r8, r0
 8003a24:	4689      	mov	r9, r1
 8003a26:	f7fc fbfb 	bl	8000220 <__aeabi_dsub>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4620      	mov	r0, r4
 8003a30:	4629      	mov	r1, r5
 8003a32:	f7fc fbf5 	bl	8000220 <__aeabi_dsub>
 8003a36:	4642      	mov	r2, r8
 8003a38:	4606      	mov	r6, r0
 8003a3a:	460f      	mov	r7, r1
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	4640      	mov	r0, r8
 8003a40:	4649      	mov	r1, r9
 8003a42:	f7fc fda5 	bl	8000590 <__aeabi_dmul>
 8003a46:	a360      	add	r3, pc, #384	@ (adr r3, 8003bc8 <__ieee754_pow+0xa40>)
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	460d      	mov	r5, r1
 8003a50:	f7fc fd9e 	bl	8000590 <__aeabi_dmul>
 8003a54:	a35e      	add	r3, pc, #376	@ (adr r3, 8003bd0 <__ieee754_pow+0xa48>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f7fc fbe1 	bl	8000220 <__aeabi_dsub>
 8003a5e:	4622      	mov	r2, r4
 8003a60:	462b      	mov	r3, r5
 8003a62:	f7fc fd95 	bl	8000590 <__aeabi_dmul>
 8003a66:	a35c      	add	r3, pc, #368	@ (adr r3, 8003bd8 <__ieee754_pow+0xa50>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f7fc fbda 	bl	8000224 <__adddf3>
 8003a70:	4622      	mov	r2, r4
 8003a72:	462b      	mov	r3, r5
 8003a74:	f7fc fd8c 	bl	8000590 <__aeabi_dmul>
 8003a78:	a359      	add	r3, pc, #356	@ (adr r3, 8003be0 <__ieee754_pow+0xa58>)
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f7fc fbcf 	bl	8000220 <__aeabi_dsub>
 8003a82:	4622      	mov	r2, r4
 8003a84:	462b      	mov	r3, r5
 8003a86:	f7fc fd83 	bl	8000590 <__aeabi_dmul>
 8003a8a:	a357      	add	r3, pc, #348	@ (adr r3, 8003be8 <__ieee754_pow+0xa60>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f7fc fbc8 	bl	8000224 <__adddf3>
 8003a94:	4622      	mov	r2, r4
 8003a96:	462b      	mov	r3, r5
 8003a98:	f7fc fd7a 	bl	8000590 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	f7fc fbbc 	bl	8000220 <__aeabi_dsub>
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	460d      	mov	r5, r1
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	f7fc fd6c 	bl	8000590 <__aeabi_dmul>
 8003ab8:	2200      	movs	r2, #0
 8003aba:	e9cd 0100 	strd	r0, r1, [sp]
 8003abe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	f7fc fbab 	bl	8000220 <__aeabi_dsub>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ad2:	f7fc fe87 	bl	80007e4 <__aeabi_ddiv>
 8003ad6:	4632      	mov	r2, r6
 8003ad8:	4604      	mov	r4, r0
 8003ada:	460d      	mov	r5, r1
 8003adc:	463b      	mov	r3, r7
 8003ade:	4640      	mov	r0, r8
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	f7fc fd55 	bl	8000590 <__aeabi_dmul>
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	463b      	mov	r3, r7
 8003aea:	f7fc fb9b 	bl	8000224 <__adddf3>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4620      	mov	r0, r4
 8003af4:	4629      	mov	r1, r5
 8003af6:	f7fc fb93 	bl	8000220 <__aeabi_dsub>
 8003afa:	4642      	mov	r2, r8
 8003afc:	464b      	mov	r3, r9
 8003afe:	f7fc fb8f 	bl	8000220 <__aeabi_dsub>
 8003b02:	460b      	mov	r3, r1
 8003b04:	4602      	mov	r2, r0
 8003b06:	493b      	ldr	r1, [pc, #236]	@ (8003bf4 <__ieee754_pow+0xa6c>)
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f7fc fb89 	bl	8000220 <__aeabi_dsub>
 8003b0e:	ec41 0b10 	vmov	d0, r0, r1
 8003b12:	ee10 3a90 	vmov	r3, s1
 8003b16:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8003b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b1e:	da30      	bge.n	8003b82 <__ieee754_pow+0x9fa>
 8003b20:	4650      	mov	r0, sl
 8003b22:	f000 f87d 	bl	8003c20 <scalbn>
 8003b26:	ec51 0b10 	vmov	r0, r1, d0
 8003b2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b2e:	f7ff bbd2 	b.w	80032d6 <__ieee754_pow+0x14e>
 8003b32:	4c31      	ldr	r4, [pc, #196]	@ (8003bf8 <__ieee754_pow+0xa70>)
 8003b34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d91a      	bls.n	8003b72 <__ieee754_pow+0x9ea>
 8003b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003bfc <__ieee754_pow+0xa74>)
 8003b3e:	440b      	add	r3, r1
 8003b40:	4303      	orrs	r3, r0
 8003b42:	d009      	beq.n	8003b58 <__ieee754_pow+0x9d0>
 8003b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f7fc ff92 	bl	8000a74 <__aeabi_dcmplt>
 8003b50:	3800      	subs	r0, #0
 8003b52:	bf18      	it	ne
 8003b54:	2001      	movne	r0, #1
 8003b56:	e42b      	b.n	80033b0 <__ieee754_pow+0x228>
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	f7fc fb60 	bl	8000220 <__aeabi_dsub>
 8003b60:	4632      	mov	r2, r6
 8003b62:	463b      	mov	r3, r7
 8003b64:	f7fc ff9a 	bl	8000a9c <__aeabi_dcmpge>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d1eb      	bne.n	8003b44 <__ieee754_pow+0x9bc>
 8003b6c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8003c0c <__ieee754_pow+0xa84>
 8003b70:	e6f7      	b.n	8003962 <__ieee754_pow+0x7da>
 8003b72:	469a      	mov	sl, r3
 8003b74:	4b22      	ldr	r3, [pc, #136]	@ (8003c00 <__ieee754_pow+0xa78>)
 8003b76:	459a      	cmp	sl, r3
 8003b78:	f63f aef3 	bhi.w	8003962 <__ieee754_pow+0x7da>
 8003b7c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8003b80:	e715      	b.n	80039ae <__ieee754_pow+0x826>
 8003b82:	ec51 0b10 	vmov	r0, r1, d0
 8003b86:	4619      	mov	r1, r3
 8003b88:	e7cf      	b.n	8003b2a <__ieee754_pow+0x9a2>
 8003b8a:	491a      	ldr	r1, [pc, #104]	@ (8003bf4 <__ieee754_pow+0xa6c>)
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7ff bb18 	b.w	80031c2 <__ieee754_pow+0x3a>
 8003b92:	2000      	movs	r0, #0
 8003b94:	2100      	movs	r1, #0
 8003b96:	f7ff bb14 	b.w	80031c2 <__ieee754_pow+0x3a>
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	4639      	mov	r1, r7
 8003b9e:	f7ff bb10 	b.w	80031c2 <__ieee754_pow+0x3a>
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	f7ff bb5e 	b.w	8003264 <__ieee754_pow+0xdc>
 8003ba8:	2400      	movs	r4, #0
 8003baa:	f7ff bb49 	b.w	8003240 <__ieee754_pow+0xb8>
 8003bae:	bf00      	nop
 8003bb0:	00000000 	.word	0x00000000
 8003bb4:	3fe62e43 	.word	0x3fe62e43
 8003bb8:	fefa39ef 	.word	0xfefa39ef
 8003bbc:	3fe62e42 	.word	0x3fe62e42
 8003bc0:	0ca86c39 	.word	0x0ca86c39
 8003bc4:	be205c61 	.word	0xbe205c61
 8003bc8:	72bea4d0 	.word	0x72bea4d0
 8003bcc:	3e663769 	.word	0x3e663769
 8003bd0:	c5d26bf1 	.word	0xc5d26bf1
 8003bd4:	3ebbbd41 	.word	0x3ebbbd41
 8003bd8:	af25de2c 	.word	0xaf25de2c
 8003bdc:	3f11566a 	.word	0x3f11566a
 8003be0:	16bebd93 	.word	0x16bebd93
 8003be4:	3f66c16c 	.word	0x3f66c16c
 8003be8:	5555553e 	.word	0x5555553e
 8003bec:	3fc55555 	.word	0x3fc55555
 8003bf0:	fff00000 	.word	0xfff00000
 8003bf4:	3ff00000 	.word	0x3ff00000
 8003bf8:	4090cbff 	.word	0x4090cbff
 8003bfc:	3f6f3400 	.word	0x3f6f3400
 8003c00:	3fe00000 	.word	0x3fe00000
 8003c04:	652b82fe 	.word	0x652b82fe
 8003c08:	3c971547 	.word	0x3c971547
 8003c0c:	4090cc00 	.word	0x4090cc00

08003c10 <fabs>:
 8003c10:	ec51 0b10 	vmov	r0, r1, d0
 8003c14:	4602      	mov	r2, r0
 8003c16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003c1a:	ec43 2b10 	vmov	d0, r2, r3
 8003c1e:	4770      	bx	lr

08003c20 <scalbn>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	ec55 4b10 	vmov	r4, r5, d0
 8003c26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	462b      	mov	r3, r5
 8003c2e:	b991      	cbnz	r1, 8003c56 <scalbn+0x36>
 8003c30:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003c34:	4323      	orrs	r3, r4
 8003c36:	d03d      	beq.n	8003cb4 <scalbn+0x94>
 8003c38:	4b35      	ldr	r3, [pc, #212]	@ (8003d10 <scalbn+0xf0>)
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f7fc fca6 	bl	8000590 <__aeabi_dmul>
 8003c44:	4b33      	ldr	r3, [pc, #204]	@ (8003d14 <scalbn+0xf4>)
 8003c46:	429e      	cmp	r6, r3
 8003c48:	4604      	mov	r4, r0
 8003c4a:	460d      	mov	r5, r1
 8003c4c:	da0f      	bge.n	8003c6e <scalbn+0x4e>
 8003c4e:	a328      	add	r3, pc, #160	@ (adr r3, 8003cf0 <scalbn+0xd0>)
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	e01e      	b.n	8003c94 <scalbn+0x74>
 8003c56:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003c5a:	4291      	cmp	r1, r2
 8003c5c:	d10b      	bne.n	8003c76 <scalbn+0x56>
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4620      	mov	r0, r4
 8003c62:	4629      	mov	r1, r5
 8003c64:	f7fc fade 	bl	8000224 <__adddf3>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	e022      	b.n	8003cb4 <scalbn+0x94>
 8003c6e:	460b      	mov	r3, r1
 8003c70:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003c74:	3936      	subs	r1, #54	@ 0x36
 8003c76:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003c7a:	4296      	cmp	r6, r2
 8003c7c:	dd0d      	ble.n	8003c9a <scalbn+0x7a>
 8003c7e:	2d00      	cmp	r5, #0
 8003c80:	a11d      	add	r1, pc, #116	@ (adr r1, 8003cf8 <scalbn+0xd8>)
 8003c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c86:	da02      	bge.n	8003c8e <scalbn+0x6e>
 8003c88:	a11d      	add	r1, pc, #116	@ (adr r1, 8003d00 <scalbn+0xe0>)
 8003c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c8e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003cf8 <scalbn+0xd8>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f7fc fc7c 	bl	8000590 <__aeabi_dmul>
 8003c98:	e7e6      	b.n	8003c68 <scalbn+0x48>
 8003c9a:	1872      	adds	r2, r6, r1
 8003c9c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8003ca0:	428a      	cmp	r2, r1
 8003ca2:	dcec      	bgt.n	8003c7e <scalbn+0x5e>
 8003ca4:	2a00      	cmp	r2, #0
 8003ca6:	dd08      	ble.n	8003cba <scalbn+0x9a>
 8003ca8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003cac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003cb0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003cb4:	ec45 4b10 	vmov	d0, r4, r5
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8003cbe:	da08      	bge.n	8003cd2 <scalbn+0xb2>
 8003cc0:	2d00      	cmp	r5, #0
 8003cc2:	a10b      	add	r1, pc, #44	@ (adr r1, 8003cf0 <scalbn+0xd0>)
 8003cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cc8:	dac1      	bge.n	8003c4e <scalbn+0x2e>
 8003cca:	a10f      	add	r1, pc, #60	@ (adr r1, 8003d08 <scalbn+0xe8>)
 8003ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cd0:	e7bd      	b.n	8003c4e <scalbn+0x2e>
 8003cd2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003cd6:	3236      	adds	r2, #54	@ 0x36
 8003cd8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003cdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <scalbn+0xf8>)
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	e7d4      	b.n	8003c94 <scalbn+0x74>
 8003cea:	bf00      	nop
 8003cec:	f3af 8000 	nop.w
 8003cf0:	c2f8f359 	.word	0xc2f8f359
 8003cf4:	01a56e1f 	.word	0x01a56e1f
 8003cf8:	8800759c 	.word	0x8800759c
 8003cfc:	7e37e43c 	.word	0x7e37e43c
 8003d00:	8800759c 	.word	0x8800759c
 8003d04:	fe37e43c 	.word	0xfe37e43c
 8003d08:	c2f8f359 	.word	0xc2f8f359
 8003d0c:	81a56e1f 	.word	0x81a56e1f
 8003d10:	43500000 	.word	0x43500000
 8003d14:	ffff3cb0 	.word	0xffff3cb0
 8003d18:	3c900000 	.word	0x3c900000

08003d1c <with_errno>:
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	ed2d 8b02 	vpush	{d8}
 8003d22:	eeb0 8a40 	vmov.f32	s16, s0
 8003d26:	eef0 8a60 	vmov.f32	s17, s1
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	f7ff f984 	bl	8003038 <__errno>
 8003d30:	eeb0 0a48 	vmov.f32	s0, s16
 8003d34:	eef0 0a68 	vmov.f32	s1, s17
 8003d38:	ecbd 8b02 	vpop	{d8}
 8003d3c:	6004      	str	r4, [r0, #0]
 8003d3e:	bd10      	pop	{r4, pc}

08003d40 <xflow>:
 8003d40:	4603      	mov	r3, r0
 8003d42:	b507      	push	{r0, r1, r2, lr}
 8003d44:	ec51 0b10 	vmov	r0, r1, d0
 8003d48:	b183      	cbz	r3, 8003d6c <xflow+0x2c>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003d50:	e9cd 2300 	strd	r2, r3, [sp]
 8003d54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d58:	f7fc fc1a 	bl	8000590 <__aeabi_dmul>
 8003d5c:	ec41 0b10 	vmov	d0, r0, r1
 8003d60:	2022      	movs	r0, #34	@ 0x22
 8003d62:	b003      	add	sp, #12
 8003d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d68:	f7ff bfd8 	b.w	8003d1c <with_errno>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	e7ee      	b.n	8003d50 <xflow+0x10>
 8003d72:	0000      	movs	r0, r0
 8003d74:	0000      	movs	r0, r0
	...

08003d78 <__math_uflow>:
 8003d78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003d80 <__math_uflow+0x8>
 8003d7c:	f7ff bfe0 	b.w	8003d40 <xflow>
 8003d80:	00000000 	.word	0x00000000
 8003d84:	10000000 	.word	0x10000000

08003d88 <__math_oflow>:
 8003d88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003d90 <__math_oflow+0x8>
 8003d8c:	f7ff bfd8 	b.w	8003d40 <xflow>
 8003d90:	00000000 	.word	0x00000000
 8003d94:	70000000 	.word	0x70000000

08003d98 <__ieee754_sqrt>:
 8003d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	4a68      	ldr	r2, [pc, #416]	@ (8003f40 <__ieee754_sqrt+0x1a8>)
 8003d9e:	ec55 4b10 	vmov	r4, r5, d0
 8003da2:	43aa      	bics	r2, r5
 8003da4:	462b      	mov	r3, r5
 8003da6:	4621      	mov	r1, r4
 8003da8:	d110      	bne.n	8003dcc <__ieee754_sqrt+0x34>
 8003daa:	4622      	mov	r2, r4
 8003dac:	4620      	mov	r0, r4
 8003dae:	4629      	mov	r1, r5
 8003db0:	f7fc fbee 	bl	8000590 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4620      	mov	r0, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f7fc fa32 	bl	8000224 <__adddf3>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	460d      	mov	r5, r1
 8003dc4:	ec45 4b10 	vmov	d0, r4, r5
 8003dc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dcc:	2d00      	cmp	r5, #0
 8003dce:	dc0e      	bgt.n	8003dee <__ieee754_sqrt+0x56>
 8003dd0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8003dd4:	4322      	orrs	r2, r4
 8003dd6:	d0f5      	beq.n	8003dc4 <__ieee754_sqrt+0x2c>
 8003dd8:	b19d      	cbz	r5, 8003e02 <__ieee754_sqrt+0x6a>
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4620      	mov	r0, r4
 8003dde:	4629      	mov	r1, r5
 8003de0:	f7fc fa1e 	bl	8000220 <__aeabi_dsub>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	f7fc fcfc 	bl	80007e4 <__aeabi_ddiv>
 8003dec:	e7e8      	b.n	8003dc0 <__ieee754_sqrt+0x28>
 8003dee:	152a      	asrs	r2, r5, #20
 8003df0:	d115      	bne.n	8003e1e <__ieee754_sqrt+0x86>
 8003df2:	2000      	movs	r0, #0
 8003df4:	e009      	b.n	8003e0a <__ieee754_sqrt+0x72>
 8003df6:	0acb      	lsrs	r3, r1, #11
 8003df8:	3a15      	subs	r2, #21
 8003dfa:	0549      	lsls	r1, r1, #21
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0fa      	beq.n	8003df6 <__ieee754_sqrt+0x5e>
 8003e00:	e7f7      	b.n	8003df2 <__ieee754_sqrt+0x5a>
 8003e02:	462a      	mov	r2, r5
 8003e04:	e7fa      	b.n	8003dfc <__ieee754_sqrt+0x64>
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	3001      	adds	r0, #1
 8003e0a:	02dc      	lsls	r4, r3, #11
 8003e0c:	d5fb      	bpl.n	8003e06 <__ieee754_sqrt+0x6e>
 8003e0e:	1e44      	subs	r4, r0, #1
 8003e10:	1b12      	subs	r2, r2, r4
 8003e12:	f1c0 0420 	rsb	r4, r0, #32
 8003e16:	fa21 f404 	lsr.w	r4, r1, r4
 8003e1a:	4323      	orrs	r3, r4
 8003e1c:	4081      	lsls	r1, r0
 8003e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e22:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8003e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e2a:	07d2      	lsls	r2, r2, #31
 8003e2c:	bf5c      	itt	pl
 8003e2e:	005b      	lslpl	r3, r3, #1
 8003e30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8003e34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e38:	bf58      	it	pl
 8003e3a:	0049      	lslpl	r1, r1, #1
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8003e42:	106d      	asrs	r5, r5, #1
 8003e44:	0049      	lsls	r1, r1, #1
 8003e46:	2016      	movs	r0, #22
 8003e48:	4632      	mov	r2, r6
 8003e4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8003e4e:	1917      	adds	r7, r2, r4
 8003e50:	429f      	cmp	r7, r3
 8003e52:	bfde      	ittt	le
 8003e54:	193a      	addle	r2, r7, r4
 8003e56:	1bdb      	suble	r3, r3, r7
 8003e58:	1936      	addle	r6, r6, r4
 8003e5a:	0fcf      	lsrs	r7, r1, #31
 8003e5c:	3801      	subs	r0, #1
 8003e5e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8003e62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003e66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003e6a:	d1f0      	bne.n	8003e4e <__ieee754_sqrt+0xb6>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	2720      	movs	r7, #32
 8003e70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8003e74:	429a      	cmp	r2, r3
 8003e76:	eb00 0e0c 	add.w	lr, r0, ip
 8003e7a:	db02      	blt.n	8003e82 <__ieee754_sqrt+0xea>
 8003e7c:	d113      	bne.n	8003ea6 <__ieee754_sqrt+0x10e>
 8003e7e:	458e      	cmp	lr, r1
 8003e80:	d811      	bhi.n	8003ea6 <__ieee754_sqrt+0x10e>
 8003e82:	f1be 0f00 	cmp.w	lr, #0
 8003e86:	eb0e 000c 	add.w	r0, lr, ip
 8003e8a:	da42      	bge.n	8003f12 <__ieee754_sqrt+0x17a>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	db40      	blt.n	8003f12 <__ieee754_sqrt+0x17a>
 8003e90:	f102 0801 	add.w	r8, r2, #1
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	458e      	cmp	lr, r1
 8003e98:	bf88      	it	hi
 8003e9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003e9e:	eba1 010e 	sub.w	r1, r1, lr
 8003ea2:	4464      	add	r4, ip
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8003eaa:	3f01      	subs	r7, #1
 8003eac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8003eb0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003eb4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003eb8:	d1dc      	bne.n	8003e74 <__ieee754_sqrt+0xdc>
 8003eba:	4319      	orrs	r1, r3
 8003ebc:	d01b      	beq.n	8003ef6 <__ieee754_sqrt+0x15e>
 8003ebe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8003f44 <__ieee754_sqrt+0x1ac>
 8003ec2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8003f48 <__ieee754_sqrt+0x1b0>
 8003ec6:	e9da 0100 	ldrd	r0, r1, [sl]
 8003eca:	e9db 2300 	ldrd	r2, r3, [fp]
 8003ece:	f7fc f9a7 	bl	8000220 <__aeabi_dsub>
 8003ed2:	e9da 8900 	ldrd	r8, r9, [sl]
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4640      	mov	r0, r8
 8003edc:	4649      	mov	r1, r9
 8003ede:	f7fc fdd3 	bl	8000a88 <__aeabi_dcmple>
 8003ee2:	b140      	cbz	r0, 8003ef6 <__ieee754_sqrt+0x15e>
 8003ee4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003ee8:	e9da 0100 	ldrd	r0, r1, [sl]
 8003eec:	e9db 2300 	ldrd	r2, r3, [fp]
 8003ef0:	d111      	bne.n	8003f16 <__ieee754_sqrt+0x17e>
 8003ef2:	3601      	adds	r6, #1
 8003ef4:	463c      	mov	r4, r7
 8003ef6:	1072      	asrs	r2, r6, #1
 8003ef8:	0863      	lsrs	r3, r4, #1
 8003efa:	07f1      	lsls	r1, r6, #31
 8003efc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8003f00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8003f04:	bf48      	it	mi
 8003f06:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8003f0a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8003f0e:	4618      	mov	r0, r3
 8003f10:	e756      	b.n	8003dc0 <__ieee754_sqrt+0x28>
 8003f12:	4690      	mov	r8, r2
 8003f14:	e7be      	b.n	8003e94 <__ieee754_sqrt+0xfc>
 8003f16:	f7fc f985 	bl	8000224 <__adddf3>
 8003f1a:	e9da 8900 	ldrd	r8, r9, [sl]
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4640      	mov	r0, r8
 8003f24:	4649      	mov	r1, r9
 8003f26:	f7fc fda5 	bl	8000a74 <__aeabi_dcmplt>
 8003f2a:	b120      	cbz	r0, 8003f36 <__ieee754_sqrt+0x19e>
 8003f2c:	1ca0      	adds	r0, r4, #2
 8003f2e:	bf08      	it	eq
 8003f30:	3601      	addeq	r6, #1
 8003f32:	3402      	adds	r4, #2
 8003f34:	e7df      	b.n	8003ef6 <__ieee754_sqrt+0x15e>
 8003f36:	1c63      	adds	r3, r4, #1
 8003f38:	f023 0401 	bic.w	r4, r3, #1
 8003f3c:	e7db      	b.n	8003ef6 <__ieee754_sqrt+0x15e>
 8003f3e:	bf00      	nop
 8003f40:	7ff00000 	.word	0x7ff00000
 8003f44:	20000188 	.word	0x20000188
 8003f48:	20000180 	.word	0x20000180

08003f4c <_init>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr

08003f58 <_fini>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr
