
adc_sm_em.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000613c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006314  08006314  00007314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063bc  080063bc  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080063bc  080063bc  000073bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c4  080063c4  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080063c4  080063c4  000073c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080063cc  080063cc  000073cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080063d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  20000064  08006438  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  08006438  00008078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003eabc  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ce  00000000  00000000  00046b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001cbec  00000000  00000000  0004c11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  00068d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003690  00000000  00000000  0006a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ece5  00000000  00000000  0006db60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034ceb  00000000  00000000  0009c845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013336f  00000000  00000000  000d1530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  0020489f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006014  00000000  00000000  00204958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0020a96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000005dd  00000000  00000000  0020a9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000b0  00000000  00000000  0020af97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000064 	.word	0x20000064
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080062fc 	.word	0x080062fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000068 	.word	0x20000068
 8000214:	080062fc 	.word	0x080062fc

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b96a 	b.w	8000514 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	460c      	mov	r4, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14e      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000264:	4694      	mov	ip, r2
 8000266:	458c      	cmp	ip, r1
 8000268:	4686      	mov	lr, r0
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	d962      	bls.n	8000336 <__udivmoddi4+0xde>
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0320 	rsb	r3, r2, #32
 8000276:	4091      	lsls	r1, r2
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	4319      	orrs	r1, r3
 8000282:	fa00 fe02 	lsl.w	lr, r0, r2
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fa1f f68c 	uxth.w	r6, ip
 800028e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	fb07 1114 	mls	r1, r7, r4, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb04 f106 	mul.w	r1, r4, r6
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ae:	f080 8112 	bcs.w	80004d6 <__udivmoddi4+0x27e>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 810f 	bls.w	80004d6 <__udivmoddi4+0x27e>
 80002b8:	3c02      	subs	r4, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a59      	subs	r1, r3, r1
 80002be:	fa1f f38e 	uxth.w	r3, lr
 80002c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002c6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	fb00 f606 	mul.w	r6, r0, r6
 80002d2:	429e      	cmp	r6, r3
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x94>
 80002d6:	eb1c 0303 	adds.w	r3, ip, r3
 80002da:	f100 31ff 	add.w	r1, r0, #4294967295
 80002de:	f080 80fc 	bcs.w	80004da <__udivmoddi4+0x282>
 80002e2:	429e      	cmp	r6, r3
 80002e4:	f240 80f9 	bls.w	80004da <__udivmoddi4+0x282>
 80002e8:	4463      	add	r3, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	1b9b      	subs	r3, r3, r6
 80002ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa6>
 80002f6:	40d3      	lsrs	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xba>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb4>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa6>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x150>
 800031a:	42a3      	cmp	r3, r4
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xcc>
 800031e:	4290      	cmp	r0, r2
 8000320:	f0c0 80f0 	bcc.w	8000504 <__udivmoddi4+0x2ac>
 8000324:	1a86      	subs	r6, r0, r2
 8000326:	eb64 0303 	sbc.w	r3, r4, r3
 800032a:	2001      	movs	r0, #1
 800032c:	2d00      	cmp	r5, #0
 800032e:	d0e6      	beq.n	80002fe <__udivmoddi4+0xa6>
 8000330:	e9c5 6300 	strd	r6, r3, [r5]
 8000334:	e7e3      	b.n	80002fe <__udivmoddi4+0xa6>
 8000336:	2a00      	cmp	r2, #0
 8000338:	f040 8090 	bne.w	800045c <__udivmoddi4+0x204>
 800033c:	eba1 040c 	sub.w	r4, r1, ip
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	fa1f f78c 	uxth.w	r7, ip
 8000348:	2101      	movs	r1, #1
 800034a:	fbb4 f6f8 	udiv	r6, r4, r8
 800034e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000352:	fb08 4416 	mls	r4, r8, r6, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb07 f006 	mul.w	r0, r7, r6
 800035e:	4298      	cmp	r0, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x11c>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f106 34ff 	add.w	r4, r6, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x11a>
 800036c:	4298      	cmp	r0, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2b4>
 8000372:	4626      	mov	r6, r4
 8000374:	1a1c      	subs	r4, r3, r0
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb4 f0f8 	udiv	r0, r4, r8
 800037e:	fb08 4410 	mls	r4, r8, r0, r4
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	fb00 f707 	mul.w	r7, r0, r7
 800038a:	429f      	cmp	r7, r3
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x148>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 34ff 	add.w	r4, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x146>
 8000398:	429f      	cmp	r7, r3
 800039a:	f200 80b0 	bhi.w	80004fe <__udivmoddi4+0x2a6>
 800039e:	4620      	mov	r0, r4
 80003a0:	1bdb      	subs	r3, r3, r7
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x9c>
 80003a8:	f1c1 0620 	rsb	r6, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f706 	lsr.w	r7, r2, r6
 80003b2:	431f      	orrs	r7, r3
 80003b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b8:	fa04 f301 	lsl.w	r3, r4, r1
 80003bc:	ea43 030c 	orr.w	r3, r3, ip
 80003c0:	40f4      	lsrs	r4, r6
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	0c38      	lsrs	r0, r7, #16
 80003c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003cc:	fbb4 fef0 	udiv	lr, r4, r0
 80003d0:	fa1f fc87 	uxth.w	ip, r7
 80003d4:	fb00 441e 	mls	r4, r0, lr, r4
 80003d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003dc:	fb0e f90c 	mul.w	r9, lr, ip
 80003e0:	45a1      	cmp	r9, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90a      	bls.n	80003fe <__udivmoddi4+0x1a6>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ee:	f080 8084 	bcs.w	80004fa <__udivmoddi4+0x2a2>
 80003f2:	45a1      	cmp	r9, r4
 80003f4:	f240 8081 	bls.w	80004fa <__udivmoddi4+0x2a2>
 80003f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	eba4 0409 	sub.w	r4, r4, r9
 8000402:	fa1f f983 	uxth.w	r9, r3
 8000406:	fbb4 f3f0 	udiv	r3, r4, r0
 800040a:	fb00 4413 	mls	r4, r0, r3, r4
 800040e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000412:	fb03 fc0c 	mul.w	ip, r3, ip
 8000416:	45a4      	cmp	ip, r4
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1d2>
 800041a:	193c      	adds	r4, r7, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000420:	d267      	bcs.n	80004f2 <__udivmoddi4+0x29a>
 8000422:	45a4      	cmp	ip, r4
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0x29a>
 8000426:	3b02      	subs	r3, #2
 8000428:	443c      	add	r4, r7
 800042a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800042e:	fba0 9302 	umull	r9, r3, r0, r2
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	429c      	cmp	r4, r3
 8000438:	46ce      	mov	lr, r9
 800043a:	469c      	mov	ip, r3
 800043c:	d351      	bcc.n	80004e2 <__udivmoddi4+0x28a>
 800043e:	d04e      	beq.n	80004de <__udivmoddi4+0x286>
 8000440:	b155      	cbz	r5, 8000458 <__udivmoddi4+0x200>
 8000442:	ebb8 030e 	subs.w	r3, r8, lr
 8000446:	eb64 040c 	sbc.w	r4, r4, ip
 800044a:	fa04 f606 	lsl.w	r6, r4, r6
 800044e:	40cb      	lsrs	r3, r1
 8000450:	431e      	orrs	r6, r3
 8000452:	40cc      	lsrs	r4, r1
 8000454:	e9c5 6400 	strd	r6, r4, [r5]
 8000458:	2100      	movs	r1, #0
 800045a:	e750      	b.n	80002fe <__udivmoddi4+0xa6>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f103 	lsr.w	r1, r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa24 f303 	lsr.w	r3, r4, r3
 800046c:	4094      	lsls	r4, r2
 800046e:	430c      	orrs	r4, r1
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa00 fe02 	lsl.w	lr, r0, r2
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000480:	fb08 3110 	mls	r1, r8, r0, r3
 8000484:	0c23      	lsrs	r3, r4, #16
 8000486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048a:	fb00 f107 	mul.w	r1, r0, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x24c>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 36ff 	add.w	r6, r0, #4294967295
 800049a:	d22c      	bcs.n	80004f6 <__udivmoddi4+0x29e>
 800049c:	4299      	cmp	r1, r3
 800049e:	d92a      	bls.n	80004f6 <__udivmoddi4+0x29e>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ac:	fb08 3311 	mls	r3, r8, r1, r3
 80004b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b4:	fb01 f307 	mul.w	r3, r1, r7
 80004b8:	42a3      	cmp	r3, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x276>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004c4:	d213      	bcs.n	80004ee <__udivmoddi4+0x296>
 80004c6:	42a3      	cmp	r3, r4
 80004c8:	d911      	bls.n	80004ee <__udivmoddi4+0x296>
 80004ca:	3902      	subs	r1, #2
 80004cc:	4464      	add	r4, ip
 80004ce:	1ae4      	subs	r4, r4, r3
 80004d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d4:	e739      	b.n	800034a <__udivmoddi4+0xf2>
 80004d6:	4604      	mov	r4, r0
 80004d8:	e6f0      	b.n	80002bc <__udivmoddi4+0x64>
 80004da:	4608      	mov	r0, r1
 80004dc:	e706      	b.n	80002ec <__udivmoddi4+0x94>
 80004de:	45c8      	cmp	r8, r9
 80004e0:	d2ae      	bcs.n	8000440 <__udivmoddi4+0x1e8>
 80004e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7a8      	b.n	8000440 <__udivmoddi4+0x1e8>
 80004ee:	4631      	mov	r1, r6
 80004f0:	e7ed      	b.n	80004ce <__udivmoddi4+0x276>
 80004f2:	4603      	mov	r3, r0
 80004f4:	e799      	b.n	800042a <__udivmoddi4+0x1d2>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e7d4      	b.n	80004a4 <__udivmoddi4+0x24c>
 80004fa:	46d6      	mov	lr, sl
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1a6>
 80004fe:	4463      	add	r3, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e74d      	b.n	80003a0 <__udivmoddi4+0x148>
 8000504:	4606      	mov	r6, r0
 8000506:	4623      	mov	r3, r4
 8000508:	4608      	mov	r0, r1
 800050a:	e70f      	b.n	800032c <__udivmoddi4+0xd4>
 800050c:	3e02      	subs	r6, #2
 800050e:	4463      	add	r3, ip
 8000510:	e730      	b.n	8000374 <__udivmoddi4+0x11c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <gpio_handler>:
static void MX_TIM6_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

void gpio_handler(uint8_t* data, size_t size)
{
 8000518:	b500      	push	{lr}
  // format: PA<0/00-15>:<0/1/A>
  char port_id = data[1];
  int pin_num;
  char level;
  if (data[3] == ':')
 800051a:	78c2      	ldrb	r2, [r0, #3]
  {
    pin_num = data[2] - '0';
 800051c:	7883      	ldrb	r3, [r0, #2]
  char port_id = data[1];
 800051e:	f890 c001 	ldrb.w	ip, [r0, #1]
  if (data[3] == ':')
 8000522:	2a3a      	cmp	r2, #58	@ 0x3a
    pin_num = data[2] - '0';
 8000524:	f1a3 0330 	sub.w	r3, r3, #48	@ 0x30
  if (data[3] == ':')
 8000528:	d01e      	beq.n	8000568 <gpio_handler+0x50>
    level = data[4];
  }
  else
  {
    pin_num = (data[2]-'0') * 10 + (data[3]-'0');
 800052a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800052e:	3a30      	subs	r2, #48	@ 0x30
    level = data[5];
 8000530:	f890 e005 	ldrb.w	lr, [r0, #5]
    pin_num = (data[2]-'0') * 10 + (data[3]-'0');
 8000534:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  }
  GPIO_TypeDef* port = 0;
  switch (port_id)
 8000538:	f1ac 0141 	sub.w	r1, ip, #65	@ 0x41
 800053c:	2903      	cmp	r1, #3
 800053e:	d901      	bls.n	8000544 <gpio_handler+0x2c>
//    else
//    {
//      LL_GPIO_SetPinMode(port, 1 << pin_num, LL_GPIO_MODE_ALTERNATE);
//    }
  }
}
 8000540:	f85d fb04 	ldr.w	pc, [sp], #4
      HAL_GPIO_WritePin(port, 1 << pin_num, level ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000544:	f1ae 0231 	sub.w	r2, lr, #49	@ 0x31
 8000548:	2101      	movs	r1, #1
 800054a:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800054e:	4099      	lsls	r1, r3
 8000550:	f100 4090 	add.w	r0, r0, #1207959552	@ 0x48000000
 8000554:	fab2 f282 	clz	r2, r2
}
 8000558:	f85d eb04 	ldr.w	lr, [sp], #4
      HAL_GPIO_WritePin(port, 1 << pin_num, level ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800055c:	0952      	lsrs	r2, r2, #5
 800055e:	b289      	uxth	r1, r1
 8000560:	f5a0 3082 	sub.w	r0, r0, #66560	@ 0x10400
 8000564:	f002 bc50 	b.w	8002e08 <HAL_GPIO_WritePin>
    level = data[4];
 8000568:	f890 e004 	ldrb.w	lr, [r0, #4]
 800056c:	e7e4      	b.n	8000538 <gpio_handler+0x20>
 800056e:	bf00      	nop

08000570 <spi_handler>:

void spi_handler(uint8_t* data, size_t size)
{
  SPI_HandleTypeDef* hspi = &hspi3;
  if (data[0] == 'M')
 8000570:	7803      	ldrb	r3, [r0, #0]
 8000572:	2b4d      	cmp	r3, #77	@ 0x4d
{
 8000574:	4684      	mov	ip, r0
  if (data[0] == 'M')
 8000576:	d002      	beq.n	800057e <spi_handler+0xe>
    LL_SPI_SetClockPolarity(hspi->Instance, cpol);
    LL_SPI_SetClockPhase(hspi->Instance, cpha);
    LL_SPI_Enable(hspi->Instance);
    LL_SPI_Disable(hspi->Instance);
  }
  else if (data[0] == 'W')
 8000578:	2b57      	cmp	r3, #87	@ 0x57
 800057a:	d020      	beq.n	80005be <spi_handler+0x4e>
//    // return: <CONTENT(binary)>
//    uint8_t buffer[100];
//    HAL_SPI_Receive(hspi, buffer, data[1], 1000);
//    HAL_UART_Transmit(&huart2, buffer, data[1], 1000);
//  }
}
 800057c:	4770      	bx	lr
    LL_SPI_SetClockPolarity(hspi->Instance, cpol);
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <spi_handler+0x60>)
    uint32_t cpol = data[1] == '1' ? SPI_POLARITY_HIGH : SPI_POLARITY_LOW;
 8000580:	7841      	ldrb	r1, [r0, #1]
    LL_SPI_SetClockPolarity(hspi->Instance, cpol);
 8000582:	681b      	ldr	r3, [r3, #0]
    uint32_t cpha = data[2] == '1' ? SPI_PHASE_2EDGE : SPI_PHASE_1EDGE;
 8000584:	7880      	ldrb	r0, [r0, #2]
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8000586:	681a      	ldr	r2, [r3, #0]
    uint32_t cpol = data[1] == '1' ? SPI_POLARITY_HIGH : SPI_POLARITY_LOW;
 8000588:	f1a1 0131 	sub.w	r1, r1, #49	@ 0x31
 800058c:	fab1 f181 	clz	r1, r1
 8000590:	0949      	lsrs	r1, r1, #5
 8000592:	f022 0202 	bic.w	r2, r2, #2
 8000596:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800059a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f022 0201 	bic.w	r2, r2, #1
 80005a2:	2831      	cmp	r0, #49	@ 0x31
 80005a4:	bf08      	it	eq
 80005a6:	f042 0201 	orreq.w	r2, r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80005b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80005ba:	601a      	str	r2, [r3, #0]
}
 80005bc:	4770      	bx	lr
    HAL_SPI_Transmit(hspi, data+1, size-1, 1000);
 80005be:	3901      	subs	r1, #1
 80005c0:	b28a      	uxth	r2, r1
 80005c2:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <spi_handler+0x60>)
 80005c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c8:	f10c 0101 	add.w	r1, ip, #1
 80005cc:	f004 b956 	b.w	800487c <HAL_SPI_Transmit>
 80005d0:	200009cc 	.word	0x200009cc

080005d4 <i2c_handler>:
 * define 2 mode:
 * 1. write: "W" data[0] = 'W' if W: data[1] = addr data[2:] = the content you want to write
 * 2. read: "R" data[0] = 'R' if R: data[1] = addr data[2] = length
 */
void i2c_handler(uint8_t * data, size_t size)
{
 80005d4:	b510      	push	{r4, lr}
	if (data[0] == 'W')
 80005d6:	7803      	ldrb	r3, [r0, #0]
 80005d8:	2b57      	cmp	r3, #87	@ 0x57
{
 80005da:	b088      	sub	sp, #32
 80005dc:	4602      	mov	r2, r0
	if (data[0] == 'W')
 80005de:	d003      	beq.n	80005e8 <i2c_handler+0x14>
		{
			result = -1 ;
		}
		uart_transmit(&result, 1);
	}
	else if (data[0] == 'R')
 80005e0:	2b52      	cmp	r3, #82	@ 0x52
 80005e2:	d018      	beq.n	8000616 <i2c_handler+0x42>
		{
			i2c_buffer[0] = -1;
		}
		uart_transmit(i2c_buffer, length + 1);
	}
}
 80005e4:	b008      	add	sp, #32
 80005e6:	bd10      	pop	{r4, pc}
		uint8_t result = 0;
 80005e8:	460c      	mov	r4, r1
		if (HAL_I2C_Master_Transmit(&hi2c1, data[1], data+2 , size - 2, size) !=  HAL_OK)
 80005ea:	1e8b      	subs	r3, r1, #2
		uint8_t result = 0;
 80005ec:	f04f 0c00 	mov.w	ip, #0
		if (HAL_I2C_Master_Transmit(&hi2c1, data[1], data+2 , size - 2, size) !=  HAL_OK)
 80005f0:	7841      	ldrb	r1, [r0, #1]
 80005f2:	4816      	ldr	r0, [pc, #88]	@ (800064c <i2c_handler+0x78>)
 80005f4:	9400      	str	r4, [sp, #0]
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	3202      	adds	r2, #2
		uint8_t result = 0;
 80005fa:	f88d c00c 	strb.w	ip, [sp, #12]
		if (HAL_I2C_Master_Transmit(&hi2c1, data[1], data+2 , size - 2, size) !=  HAL_OK)
 80005fe:	f002 ff51 	bl	80034a4 <HAL_I2C_Master_Transmit>
 8000602:	b110      	cbz	r0, 800060a <i2c_handler+0x36>
			result = -1 ;
 8000604:	23ff      	movs	r3, #255	@ 0xff
 8000606:	f88d 300c 	strb.w	r3, [sp, #12]
		uart_transmit(&result, 1);
 800060a:	2101      	movs	r1, #1
 800060c:	a803      	add	r0, sp, #12
 800060e:	f000 fd8d 	bl	800112c <uart_transmit>
}
 8000612:	b008      	add	sp, #32
 8000614:	bd10      	pop	{r4, pc}
		if (length > 16)
 8000616:	7883      	ldrb	r3, [r0, #2]
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000618:	7841      	ldrb	r1, [r0, #1]
		if (length > 16)
 800061a:	2b10      	cmp	r3, #16
 800061c:	bf28      	it	cs
 800061e:	2310      	movcs	r3, #16
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000620:	1c5c      	adds	r4, r3, #1
		i2c_buffer[0] = 0;
 8000622:	2000      	movs	r0, #0
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000624:	b2e4      	uxtb	r4, r4
		i2c_buffer[0] = 0;
 8000626:	f88d 000c 	strb.w	r0, [sp, #12]
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 800062a:	9400      	str	r4, [sp, #0]
 800062c:	4807      	ldr	r0, [pc, #28]	@ (800064c <i2c_handler+0x78>)
 800062e:	f10d 020d 	add.w	r2, sp, #13
 8000632:	f003 f8a7 	bl	8003784 <HAL_I2C_Master_Receive>
 8000636:	b110      	cbz	r0, 800063e <i2c_handler+0x6a>
			i2c_buffer[0] = -1;
 8000638:	23ff      	movs	r3, #255	@ 0xff
 800063a:	f88d 300c 	strb.w	r3, [sp, #12]
		uart_transmit(i2c_buffer, length + 1);
 800063e:	4621      	mov	r1, r4
 8000640:	a803      	add	r0, sp, #12
 8000642:	f000 fd73 	bl	800112c <uart_transmit>
}
 8000646:	b008      	add	sp, #32
 8000648:	bd10      	pop	{r4, pc}
 800064a:	bf00      	nop
 800064c:	20000a30 	.word	0x20000a30

08000650 <HAL_ADC_ConvCpltCallback>:
uint8_t adc_buffer[2050];
int adc_ongoing = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000650:	b508      	push	{r3, lr}
	if (hadc != &hadc1)
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <HAL_ADC_ConvCpltCallback+0x20>)
 8000654:	4283      	cmp	r3, r0
 8000656:	d000      	beq.n	800065a <HAL_ADC_ConvCpltCallback+0xa>
		return;
	adc_ongoing = 0;
	HAL_ADC_Stop_DMA(hadc);
	HAL_TIM_Base_Stop(&htim6);
}
 8000658:	bd08      	pop	{r3, pc}
	adc_ongoing = 0;
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_ADC_ConvCpltCallback+0x24>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 8000660:	f001 feb6 	bl	80023d0 <HAL_ADC_Stop_DMA>
}
 8000664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim6);
 8000668:	4803      	ldr	r0, [pc, #12]	@ (8000678 <HAL_ADC_ConvCpltCallback+0x28>)
 800066a:	f004 bb0f 	b.w	8004c8c <HAL_TIM_Base_Stop>
 800066e:	bf00      	nop
 8000670:	20000b08 	.word	0x20000b08
 8000674:	20000084 	.word	0x20000084
 8000678:	20000980 	.word	0x20000980

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b510      	push	{r4, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000680:	2238      	movs	r2, #56	@ 0x38
 8000682:	2100      	movs	r1, #0
 8000684:	a806      	add	r0, sp, #24
 8000686:	f005 fd59 	bl	800613c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000694:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000698:	9305      	str	r3, [sp, #20]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	2403      	movs	r4, #3
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	f003 f982 	bl	80039a4 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 80006a2:	2205      	movs	r2, #5
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2001      	movs	r0, #1
 80006a6:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80006aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80006b2:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006ba:	233c      	movs	r3, #60	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 80006bc:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006be:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f003 f9ea 	bl	8003a98 <HAL_RCC_OscConfig>
 80006c4:	b108      	cbz	r0, 80006ca <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <SystemClock_Config+0x4c>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ca:	2104      	movs	r1, #4
 80006cc:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d0:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006de:	f003 fc83 	bl	8003fe8 <HAL_RCC_ClockConfig>
 80006e2:	4602      	mov	r2, r0
 80006e4:	b108      	cbz	r0, 80006ea <SystemClock_Config+0x6e>
 80006e6:	b672      	cpsid	i
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <SystemClock_Config+0x6c>
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80006ea:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <SystemClock_Config+0x7c>)
 80006ec:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80006f0:	f003 fc18 	bl	8003f24 <HAL_RCC_MCOConfig>
}
 80006f4:	b014      	add	sp, #80	@ 0x50
 80006f6:	bd10      	pop	{r4, pc}
 80006f8:	00060400 	.word	0x00060400

080006fc <main>:
{
 80006fc:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	2400      	movs	r4, #0
{
 8000700:	b096      	sub	sp, #88	@ 0x58
  HAL_Init();
 8000702:	f001 f8a5 	bl	8001850 <HAL_Init>
  SystemClock_Config();
 8000706:	f7ff ffb9 	bl	800067c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 800070e:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000712:	4da5      	ldr	r5, [pc, #660]	@ (80009a8 <main+0x2ac>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	9412      	str	r4, [sp, #72]	@ 0x48
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000716:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8000718:	48a4      	ldr	r0, [pc, #656]	@ (80009ac <main+0x2b0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000720:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000722:	f003 0320 	and.w	r3, r3, #32
 8000726:	9306      	str	r3, [sp, #24]
 8000728:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800072a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800072c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000730:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000732:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000738:	9307      	str	r3, [sp, #28]
 800073a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000744:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	9308      	str	r3, [sp, #32]
 800074c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8000750:	2101      	movs	r1, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	430b      	orrs	r3, r1
 8000754:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000756:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000758:	400b      	ands	r3, r1
 800075a:	9309      	str	r3, [sp, #36]	@ 0x24
 800075c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000766:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 800076e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8000772:	f002 fb49 	bl	8002e08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000776:	4622      	mov	r2, r4
 8000778:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800077c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000780:	f002 fb42 	bl	8002e08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000784:	4622      	mov	r2, r4
 8000786:	488a      	ldr	r0, [pc, #552]	@ (80009b0 <main+0x2b4>)
 8000788:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800078c:	f002 fb3c 	bl	8002e08 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 8000794:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000796:	4887      	ldr	r0, [pc, #540]	@ (80009b4 <main+0x2b8>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000798:	9412      	str	r4, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800079a:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Pin = con_Pin;
 800079c:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	e9cd 730e 	strd	r7, r3, [sp, #56]	@ 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a6:	f002 fa21 	bl	8002bec <HAL_GPIO_Init>
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 80007aa:	4880      	ldr	r0, [pc, #512]	@ (80009ac <main+0x2b0>)
 80007ac:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f002 fa19 	bl	8002bec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	a90e      	add	r1, sp, #56	@ 0x38
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	e9cd 760e 	strd	r7, r6, [sp, #56]	@ 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f002 fa10 	bl	8002bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	4877      	ldr	r0, [pc, #476]	@ (80009b0 <main+0x2b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007d2:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	e9cd 640f 	strd	r6, r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f002 fa06 	bl	8002bec <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007e0:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	64ab      	str	r3, [r5, #72]	@ 0x48
 80007e8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	9303      	str	r3, [sp, #12]
 80007f0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007f2:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	64ab      	str	r3, [r5, #72]	@ 0x48
 80007fa:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	9304      	str	r3, [sp, #16]
 8000802:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000804:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000806:	4333      	orrs	r3, r6
 8000808:	64ab      	str	r3, [r5, #72]	@ 0x48
 800080a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800080c:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800080e:	4622      	mov	r2, r4
 8000810:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000812:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000814:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000816:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000818:	f001 fee8 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800081c:	200b      	movs	r0, #11
 800081e:	f001 ff21 	bl	8002664 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 8000822:	4622      	mov	r2, r4
 8000824:	4621      	mov	r1, r4
 8000826:	2063      	movs	r0, #99	@ 0x63
 8000828:	f001 fee0 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 800082c:	2063      	movs	r0, #99	@ 0x63
 800082e:	f001 ff19 	bl	8002664 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 8000832:	4861      	ldr	r0, [pc, #388]	@ (80009b8 <main+0x2bc>)
 8000834:	4b61      	ldr	r3, [pc, #388]	@ (80009bc <main+0x2c0>)
 8000836:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000838:	f240 1301 	movw	r3, #257	@ 0x101
 800083c:	8083      	strh	r3, [r0, #4]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800083e:	2508      	movs	r5, #8
 8000840:	f241 0321 	movw	r3, #4129	@ 0x1021
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000844:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000848:	e9c0 3502 	strd	r3, r5, [r0, #8]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800084c:	6184      	str	r4, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800084e:	6206      	str	r6, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000850:	f001 ff6a 	bl	8002728 <HAL_CRC_Init>
 8000854:	b108      	cbz	r0, 800085a <main+0x15e>
 8000856:	b672      	cpsid	i
  while (1)
 8000858:	e7fe      	b.n	8000858 <main+0x15c>
  huart2.Instance = USART2;
 800085a:	4c59      	ldr	r4, [pc, #356]	@ (80009c0 <main+0x2c4>)
  huart2.Init.BaudRate = 115200;
 800085c:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 80009dc <main+0x2e0>
  huart2.Init.Parity = UART_PARITY_NONE;
 8000860:	6120      	str	r0, [r4, #16]
  huart2.Init.BaudRate = 115200;
 8000862:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000866:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086a:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800086e:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart2.Init.BaudRate = 115200;
 8000872:	e9c4 c300 	strd	ip, r3, [r4]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000876:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087a:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	f005 f86f 	bl	8005960 <HAL_UART_Init>
 8000882:	b108      	cbz	r0, 8000888 <main+0x18c>
 8000884:	b672      	cpsid	i
  while (1)
 8000886:	e7fe      	b.n	8000886 <main+0x18a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000888:	4601      	mov	r1, r0
 800088a:	4620      	mov	r0, r4
 800088c:	f005 f910 	bl	8005ab0 <HAL_UARTEx_SetTxFifoThreshold>
 8000890:	b108      	cbz	r0, 8000896 <main+0x19a>
 8000892:	b672      	cpsid	i
  while (1)
 8000894:	e7fe      	b.n	8000894 <main+0x198>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000896:	4601      	mov	r1, r0
 8000898:	4620      	mov	r0, r4
 800089a:	f005 f94b 	bl	8005b34 <HAL_UARTEx_SetRxFifoThreshold>
 800089e:	b108      	cbz	r0, 80008a4 <main+0x1a8>
 80008a0:	b672      	cpsid	i
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <main+0x1a6>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008a4:	4620      	mov	r0, r4
 80008a6:	f005 f8e5 	bl	8005a74 <HAL_UARTEx_DisableFifoMode>
 80008aa:	4601      	mov	r1, r0
 80008ac:	b108      	cbz	r0, 80008b2 <main+0x1b6>
 80008ae:	b672      	cpsid	i
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <main+0x1b4>
  hadc1.Instance = ADC1;
 80008b2:	4c44      	ldr	r4, [pc, #272]	@ (80009c4 <main+0x2c8>)
  ADC_MultiModeTypeDef multimode = {0};
 80008b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80008b6:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	9001      	str	r0, [sp, #4]
 80008bc:	2220      	movs	r2, #32
 80008be:	a80e      	add	r0, sp, #56	@ 0x38
 80008c0:	f005 fc3c 	bl	800613c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c4:	9901      	ldr	r1, [sp, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008c6:	6226      	str	r6, [r4, #32]
  hadc1.Instance = ADC1;
 80008c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80008cc:	6023      	str	r3, [r4, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ce:	2604      	movs	r6, #4
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80008d0:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d4:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008d6:	e9c4 1101 	strd	r1, r1, [r4, #4]
  hadc1.Init.GainCompensation = 0;
 80008da:	e9c4 1103 	strd	r1, r1, [r4, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008de:	6327      	str	r7, [r4, #48]	@ 0x30
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e0:	6161      	str	r1, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e2:	83a1      	strh	r1, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e4:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e8:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ec:	63e1      	str	r1, [r4, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008ee:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f2:	61a6      	str	r6, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80008f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f6:	f000 ffcd 	bl	8001894 <HAL_ADC_Init>
 80008fa:	b108      	cbz	r0, 8000900 <main+0x204>
 80008fc:	b672      	cpsid	i
  while (1)
 80008fe:	e7fe      	b.n	80008fe <main+0x202>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000900:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000902:	a90b      	add	r1, sp, #44	@ 0x2c
 8000904:	4620      	mov	r0, r4
 8000906:	f001 fdab 	bl	8002460 <HAL_ADCEx_MultiModeConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	b108      	cbz	r0, 8000912 <main+0x216>
 800090e:	b672      	cpsid	i
  while (1)
 8000910:	e7fe      	b.n	8000910 <main+0x214>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000912:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000914:	4c2c      	ldr	r4, [pc, #176]	@ (80009c8 <main+0x2cc>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000916:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfig.Offset = 0;
 8000918:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091a:	2306      	movs	r3, #6
 800091c:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000920:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000922:	237f      	movs	r3, #127	@ 0x7f
 8000924:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000926:	9612      	str	r6, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000928:	f001 f91e 	bl	8001b68 <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	b108      	cbz	r0, 8000934 <main+0x238>
 8000930:	b672      	cpsid	i
  while (1)
 8000932:	e7fe      	b.n	8000932 <main+0x236>
  hspi3.Instance = SPI3;
 8000934:	4825      	ldr	r0, [pc, #148]	@ (80009cc <main+0x2d0>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000936:	4926      	ldr	r1, [pc, #152]	@ (80009d0 <main+0x2d4>)
 8000938:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800093c:	e9c0 1200 	strd	r1, r2, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000944:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800094c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800094e:	2218      	movs	r2, #24
 8000950:	61c2      	str	r2, [r0, #28]
  hspi3.Init.CRCPolynomial = 7;
 8000952:	2207      	movs	r2, #7
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000958:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCPolynomial = 7;
 800095c:	e9c0 320a 	strd	r3, r2, [r0, #40]	@ 0x28
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000960:	e9c0 350c 	strd	r3, r5, [r0, #48]	@ 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000964:	f003 ff0c 	bl	8004780 <HAL_SPI_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	b108      	cbz	r0, 8000970 <main+0x274>
 800096c:	b672      	cpsid	i
  while (1)
 800096e:	e7fe      	b.n	800096e <main+0x272>
  htim6.Instance = TIM6;
 8000970:	4818      	ldr	r0, [pc, #96]	@ (80009d4 <main+0x2d8>)
 8000972:	4919      	ldr	r1, [pc, #100]	@ (80009d8 <main+0x2dc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	9310      	str	r3, [sp, #64]	@ 0x40
  htim6.Init.Period = 149;
 8000976:	2295      	movs	r2, #149	@ 0x95
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  htim6.Init.Prescaler = 0;
 800097c:	e9c0 1300 	strd	r1, r3, [r0]
  htim6.Init.Period = 149;
 8000980:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000984:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000986:	f004 f8a7 	bl	8004ad8 <HAL_TIM_Base_Init>
 800098a:	b108      	cbz	r0, 8000990 <main+0x294>
 800098c:	b672      	cpsid	i
  while (1)
 800098e:	e7fe      	b.n	800098e <main+0x292>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000990:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000992:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000994:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <main+0x2d8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000998:	a90e      	add	r1, sp, #56	@ 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800099a:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800099c:	f004 f98a 	bl	8004cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b1e8      	cbz	r0, 80009e0 <main+0x2e4>
 80009a4:	b672      	cpsid	i
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <main+0x2aa>
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000800 	.word	0x48000800
 80009b0:	48000400 	.word	0x48000400
 80009b4:	48001800 	.word	0x48001800
 80009b8:	20000a84 	.word	0x20000a84
 80009bc:	40023000 	.word	0x40023000
 80009c0:	200008ec 	.word	0x200008ec
 80009c4:	20000b08 	.word	0x20000b08
 80009c8:	04300002 	.word	0x04300002
 80009cc:	200009cc 	.word	0x200009cc
 80009d0:	40003c00 	.word	0x40003c00
 80009d4:	20000980 	.word	0x20000980
 80009d8:	40001000 	.word	0x40001000
 80009dc:	40004400 	.word	0x40004400
  hi2c1.Instance = I2C1;
 80009e0:	4c2c      	ldr	r4, [pc, #176]	@ (8000a94 <main+0x398>)
 80009e2:	492d      	ldr	r1, [pc, #180]	@ (8000a98 <main+0x39c>)
  hi2c1.Init.Timing = 0x10E32879;
 80009e4:	4a2d      	ldr	r2, [pc, #180]	@ (8000a9c <main+0x3a0>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e6:	6223      	str	r3, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e8:	2501      	movs	r5, #1
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ea:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10E32879;
 80009ec:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80009f4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f8:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fc:	f002 fcf8 	bl	80033f0 <HAL_I2C_Init>
 8000a00:	4601      	mov	r1, r0
 8000a02:	b108      	cbz	r0, 8000a08 <main+0x30c>
 8000a04:	b672      	cpsid	i
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <main+0x30a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f002 ff75 	bl	80038f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a0e:	4601      	mov	r1, r0
 8000a10:	b108      	cbz	r0, 8000a16 <main+0x31a>
 8000a12:	b672      	cpsid	i
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <main+0x318>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a16:	4620      	mov	r0, r4
 8000a18:	f002 ff98 	bl	800394c <HAL_I2CEx_ConfigDigitalFilter>
 8000a1c:	b108      	cbz	r0, 8000a22 <main+0x326>
 8000a1e:	b672      	cpsid	i
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <main+0x324>
  uart_init();
 8000a22:	f000 fe8d 	bl	8001740 <uart_init>
  uart_register_handler("GPIO", gpio_handler);
 8000a26:	491e      	ldr	r1, [pc, #120]	@ (8000aa0 <main+0x3a4>)
 8000a28:	481e      	ldr	r0, [pc, #120]	@ (8000aa4 <main+0x3a8>)
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 8000a2a:	4c1f      	ldr	r4, [pc, #124]	@ (8000aa8 <main+0x3ac>)
  uart_register_handler("GPIO", gpio_handler);
 8000a2c:	f000 fe06 	bl	800163c <uart_register_handler>
  uart_register_handler("SPI", spi_handler);
 8000a30:	491e      	ldr	r1, [pc, #120]	@ (8000aac <main+0x3b0>)
 8000a32:	481f      	ldr	r0, [pc, #124]	@ (8000ab0 <main+0x3b4>)
 8000a34:	f000 fe02 	bl	800163c <uart_register_handler>
  uart_register_handler("I2C", i2c_handler);
 8000a38:	481e      	ldr	r0, [pc, #120]	@ (8000ab4 <main+0x3b8>)
 8000a3a:	491f      	ldr	r1, [pc, #124]	@ (8000ab8 <main+0x3bc>)
 8000a3c:	f000 fdfe 	bl	800163c <uart_register_handler>
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 8000a40:	4629      	mov	r1, r5
 8000a42:	481e      	ldr	r0, [pc, #120]	@ (8000abc <main+0x3c0>)
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 8000a44:	4d1d      	ldr	r5, [pc, #116]	@ (8000abc <main+0x3c0>)
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 8000a46:	f002 f9d9 	bl	8002dfc <HAL_GPIO_ReadPin>
  arm_float_to_q15((float32_t *)&FFT_Input_Q15_f[0], (q15_t *)&aFFT_Input_Q15[0], FFT_Length*2);
 8000a4a:	491d      	ldr	r1, [pc, #116]	@ (8000ac0 <main+0x3c4>)
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 8000a4c:	4603      	mov	r3, r0
  arm_float_to_q15((float32_t *)&FFT_Input_Q15_f[0], (q15_t *)&aFFT_Input_Q15[0], FFT_Length*2);
 8000a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a52:	481c      	ldr	r0, [pc, #112]	@ (8000ac4 <main+0x3c8>)
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 8000a54:	7023      	strb	r3, [r4, #0]
  arm_float_to_q15((float32_t *)&FFT_Input_Q15_f[0], (q15_t *)&aFFT_Input_Q15[0], FFT_Length*2);
 8000a56:	f005 f8d3 	bl	8005c00 <arm_float_to_q15>
 8000a5a:	e002      	b.n	8000a62 <main+0x366>
	  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 8000a5c:	f002 f9ce 	bl	8002dfc <HAL_GPIO_ReadPin>
 8000a60:	7020      	strb	r0, [r4, #0]
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 8000a62:	2101      	movs	r1, #1
 8000a64:	4628      	mov	r0, r5
 8000a66:	f002 f9c9 	bl	8002dfc <HAL_GPIO_ReadPin>
 8000a6a:	7822      	ldrb	r2, [r4, #0]
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	429a      	cmp	r2, r3
	  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 8000a70:	f04f 0101 	mov.w	r1, #1
 8000a74:	4628      	mov	r0, r5
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 8000a76:	d0f1      	beq.n	8000a5c <main+0x360>
		  HAL_TIM_Base_Start(&htim6);
 8000a78:	4813      	ldr	r0, [pc, #76]	@ (8000ac8 <main+0x3cc>)
 8000a7a:	f004 f8cd 	bl	8004c18 <HAL_TIM_Base_Start>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buffer, 2050);
 8000a7e:	f640 0202 	movw	r2, #2050	@ 0x802
 8000a82:	4912      	ldr	r1, [pc, #72]	@ (8000acc <main+0x3d0>)
 8000a84:	4812      	ldr	r0, [pc, #72]	@ (8000ad0 <main+0x3d4>)
 8000a86:	f001 fbdf 	bl	8002248 <HAL_ADC_Start_DMA>
		  adc_ongoing = 1;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <main+0x3d8>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
		  while (adc_ongoing)
 8000a90:	e7fe      	b.n	8000a90 <main+0x394>
 8000a92:	bf00      	nop
 8000a94:	20000a30 	.word	0x20000a30
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	10e32879 	.word	0x10e32879
 8000aa0:	08000519 	.word	0x08000519
 8000aa4:	08006314 	.word	0x08006314
 8000aa8:	20000080 	.word	0x20000080
 8000aac:	08000571 	.word	0x08000571
 8000ab0:	0800631c 	.word	0x0800631c
 8000ab4:	08006320 	.word	0x08006320
 8000ab8:	080005d5 	.word	0x080005d5
 8000abc:	48000800 	.word	0x48000800
 8000ac0:	20000b74 	.word	0x20000b74
 8000ac4:	20000c3c 	.word	0x20000c3c
 8000ac8:	20000980 	.word	0x20000980
 8000acc:	20000088 	.word	0x20000088
 8000ad0:	20000b08 	.word	0x20000b08
 8000ad4:	20000084 	.word	0x20000084

08000ad8 <Error_Handler>:
 8000ad8:	b672      	cpsid	i
  while (1)
 8000ada:	e7fe      	b.n	8000ada <Error_Handler+0x2>

08000adc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <HAL_MspInit+0x30>)
 8000ade:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ae0:	f042 0201 	orr.w	r2, r2, #1
 8000ae4:	661a      	str	r2, [r3, #96]	@ 0x60
 8000ae6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8000ae8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	f002 0201 	and.w	r2, r2, #1
 8000aee:	9200      	str	r2, [sp, #0]
 8000af0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000af4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000af8:	659a      	str	r2, [r3, #88]	@ 0x58
 8000afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b06:	f002 bfbf 	b.w	8003a88 <HAL_PWREx_DisableUCPDDeadBattery>
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b10:	b570      	push	{r4, r5, r6, lr}
 8000b12:	4604      	mov	r4, r0
 8000b14:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	2254      	movs	r2, #84	@ 0x54
 8000b1a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000b20:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000b24:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b26:	f005 fb09 	bl	800613c <memset>
  if(hadc->Instance==ADC1)
 8000b2a:	6823      	ldr	r3, [r4, #0]
 8000b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b30:	d001      	beq.n	8000b36 <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b32:	b01c      	add	sp, #112	@ 0x70
 8000b34:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b36:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000b3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3e:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b40:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000b42:	9318      	str	r3, [sp, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f003 fb78 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d136      	bne.n	8000bba <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <HAL_ADC_MspInit+0xb8>)
    hdma_adc1.Instance = DMA1_Channel1;
 8000b4e:	4d1f      	ldr	r5, [pc, #124]	@ (8000bcc <HAL_ADC_MspInit+0xbc>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000b56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b5a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000b5e:	9200      	str	r2, [sp, #0]
 8000b60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b64:	f042 0201 	orr.w	r2, r2, #1
 8000b68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b74:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f002 f831 	bl	8002bec <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b8a:	4a11      	ldr	r2, [pc, #68]	@ (8000bd0 <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b8c:	622e      	str	r6, [r5, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b94:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b98:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b9a:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b9e:	4628      	mov	r0, r5
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba4:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ba8:	e9c5 3606 	strd	r3, r6, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bac:	f001 fe70 	bl	8002890 <HAL_DMA_Init>
 8000bb0:	b930      	cbnz	r0, 8000bc0 <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bb2:	6565      	str	r5, [r4, #84]	@ 0x54
 8000bb4:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8000bb6:	b01c      	add	sp, #112	@ 0x70
 8000bb8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000bba:	f7ff ff8d 	bl	8000ad8 <Error_Handler>
 8000bbe:	e7c5      	b.n	8000b4c <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8000bc0:	f7ff ff8a 	bl	8000ad8 <Error_Handler>
 8000bc4:	e7f5      	b.n	8000bb2 <HAL_ADC_MspInit+0xa2>
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	20000aa8 	.word	0x20000aa8
 8000bd0:	40020008 	.word	0x40020008

08000bd4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_CRC_MspInit+0x28>)
 8000bd6:	6802      	ldr	r2, [r0, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d000      	beq.n	8000bde <HAL_CRC_MspInit+0xa>
 8000bdc:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bde:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
{
 8000be2:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000be4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000bea:	649a      	str	r2, [r3, #72]	@ 0x48
 8000bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023000 	.word	0x40023000

08000c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4604      	mov	r4, r0
 8000c04:	b09f      	sub	sp, #124	@ 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	2254      	movs	r2, #84	@ 0x54
 8000c0a:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000c10:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8000c14:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c16:	f005 fa91 	bl	800613c <memset>
  if(hi2c->Instance==I2C1)
 8000c1a:	4b24      	ldr	r3, [pc, #144]	@ (8000cac <HAL_I2C_MspInit+0xac>)
 8000c1c:	6822      	ldr	r2, [r4, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d001      	beq.n	8000c26 <HAL_I2C_MspInit+0x26>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c22:	b01f      	add	sp, #124	@ 0x7c
 8000c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c26:	2340      	movs	r3, #64	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c28:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c2a:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2c:	f003 fb04 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d138      	bne.n	8000ca6 <HAL_I2C_MspInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4c1e      	ldr	r4, [pc, #120]	@ (8000cb0 <HAL_I2C_MspInit+0xb0>)
 8000c36:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000c3e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000c50:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c58:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c5a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c5e:	2600      	movs	r6, #0
 8000c60:	2700      	movs	r7, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c64:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c6e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c74:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f001 ffb9 	bl	8002bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c80:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c88:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f001 ffae 	bl	8002bec <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000c92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c96:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000c98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9e:	9303      	str	r3, [sp, #12]
 8000ca0:	9b03      	ldr	r3, [sp, #12]
}
 8000ca2:	b01f      	add	sp, #124	@ 0x7c
 8000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8000ca6:	f7ff ff17 	bl	8000ad8 <Error_Handler>
 8000caa:	e7c3      	b.n	8000c34 <HAL_I2C_MspInit+0x34>
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	48000400 	.word	0x48000400

08000cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 8000cba:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <HAL_SPI_MspInit+0x70>)
 8000cbc:	6801      	ldr	r1, [r0, #0]
{
 8000cbe:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 8000cc2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000cc8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000ccc:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI3)
 8000cce:	d002      	beq.n	8000cd6 <HAL_SPI_MspInit+0x1e>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000cd0:	b009      	add	sp, #36	@ 0x24
 8000cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cda:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cde:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8000d20 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cea:	659a      	str	r2, [r3, #88]	@ 0x58
 8000cec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000cee:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8000cf2:	9200      	str	r2, [sp, #0]
 8000cf4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cf8:	f042 0204 	orr.w	r2, r2, #4
 8000cfc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d08:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d0a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d10:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f001 ff6b 	bl	8002bec <HAL_GPIO_Init>
}
 8000d16:	b009      	add	sp, #36	@ 0x24
 8000d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d1c:	f3af 8000 	nop.w
 8000d20:	00001400 	.word	0x00001400
 8000d24:	00000002 	.word	0x00000002
 8000d28:	40003c00 	.word	0x40003c00
 8000d2c:	48000800 	.word	0x48000800

08000d30 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <HAL_TIM_Base_MspInit+0x28>)
 8000d32:	6802      	ldr	r2, [r0, #0]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d000      	beq.n	8000d3a <HAL_TIM_Base_MspInit+0xa>
 8000d38:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d3a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 8000d3e:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d42:	f042 0210 	orr.w	r2, r2, #16
 8000d46:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000d52:	b002      	add	sp, #8
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40001000 	.word	0x40001000

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b530      	push	{r4, r5, lr}
 8000d5e:	4604      	mov	r4, r0
 8000d60:	b09d      	sub	sp, #116	@ 0x74
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d64:	2254      	movs	r2, #84	@ 0x54
 8000d66:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000d6c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000d70:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d72:	f005 f9e3 	bl	800613c <memset>
  if(huart->Instance==USART2)
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <HAL_UART_MspInit+0xc4>)
 8000d78:	6822      	ldr	r2, [r4, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d001      	beq.n	8000d82 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d7e:	b01d      	add	sp, #116	@ 0x74
 8000d80:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d82:	2202      	movs	r2, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000d84:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d86:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d88:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000d8a:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8c:	f003 fa54 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d13f      	bne.n	8000e14 <HAL_UART_MspInit+0xb8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d94:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	4824      	ldr	r0, [pc, #144]	@ (8000e28 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8000d9a:	4d24      	ldr	r5, [pc, #144]	@ (8000e2c <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000da0:	659a      	str	r2, [r3, #88]	@ 0x58
 8000da2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000da4:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000da8:	9200      	str	r2, [sp, #0]
 8000daa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dae:	f042 0202 	orr.w	r2, r2, #2
 8000db2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000dbc:	2218      	movs	r2, #24
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000dc4:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f001 ff0a 	bl	8002bec <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000dd8:	4915      	ldr	r1, [pc, #84]	@ (8000e30 <HAL_UART_MspInit+0xd4>)
 8000dda:	221a      	movs	r2, #26
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000de2:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000de4:	2280      	movs	r2, #128	@ 0x80
 8000de6:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8000dea:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8000dee:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8000df2:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000df4:	f001 fd4c 	bl	8002890 <HAL_DMA_Init>
 8000df8:	b978      	cbnz	r0, 8000e1a <HAL_UART_MspInit+0xbe>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e00:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000e04:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e06:	f001 fbf1 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e0a:	2026      	movs	r0, #38	@ 0x26
 8000e0c:	f001 fc2a 	bl	8002664 <HAL_NVIC_EnableIRQ>
}
 8000e10:	b01d      	add	sp, #116	@ 0x74
 8000e12:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8000e14:	f7ff fe60 	bl	8000ad8 <Error_Handler>
 8000e18:	e7bc      	b.n	8000d94 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8000e1a:	f7ff fe5d 	bl	8000ad8 <Error_Handler>
 8000e1e:	e7ec      	b.n	8000dfa <HAL_UART_MspInit+0x9e>
 8000e20:	40004400 	.word	0x40004400
 8000e24:	40021000 	.word	0x40021000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	2000088c 	.word	0x2000088c
 8000e30:	40020494 	.word	0x40020494

08000e34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler>
 8000e36:	bf00      	nop

08000e38 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <HardFault_Handler>
 8000e3a:	bf00      	nop

08000e3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler>
 8000e3e:	bf00      	nop

08000e40 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <BusFault_Handler>
 8000e42:	bf00      	nop

08000e44 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler>
 8000e46:	bf00      	nop

08000e48 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 bd0c 	b.w	8001870 <HAL_IncTick>

08000e58 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e58:	4801      	ldr	r0, [pc, #4]	@ (8000e60 <DMA1_Channel1_IRQHandler+0x8>)
 8000e5a:	f001 be79 	b.w	8002b50 <HAL_DMA_IRQHandler>
 8000e5e:	bf00      	nop
 8000e60:	20000aa8 	.word	0x20000aa8

08000e64 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e64:	4801      	ldr	r0, [pc, #4]	@ (8000e6c <USART2_IRQHandler+0x8>)
 8000e66:	f004 b86f 	b.w	8004f48 <HAL_UART_IRQHandler>
 8000e6a:	bf00      	nop
 8000e6c:	200008ec 	.word	0x200008ec

08000e70 <DMA2_Channel8_IRQHandler>:
void DMA2_Channel8_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e70:	4801      	ldr	r0, [pc, #4]	@ (8000e78 <DMA2_Channel8_IRQHandler+0x8>)
 8000e72:	f001 be6d 	b.w	8002b50 <HAL_DMA_IRQHandler>
 8000e76:	bf00      	nop
 8000e78:	2000088c 	.word	0x2000088c

08000e7c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	4770      	bx	lr

08000e80 <_kill>:

int _kill(int pid, int sig)
{
 8000e80:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e82:	f005 f9b7 	bl	80061f4 <__errno>
 8000e86:	2316      	movs	r3, #22
 8000e88:	6003      	str	r3, [r0, #0]
  return -1;
}
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8e:	bd08      	pop	{r3, pc}

08000e90 <_exit>:

void _exit (int status)
{
 8000e90:	b508      	push	{r3, lr}
  errno = EINVAL;
 8000e92:	f005 f9af 	bl	80061f4 <__errno>
 8000e96:	2316      	movs	r3, #22
 8000e98:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8000e9a:	e7fe      	b.n	8000e9a <_exit+0xa>

08000e9c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	490c      	ldr	r1, [pc, #48]	@ (8000ed0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8000ea0:	680b      	ldr	r3, [r1, #0]
{
 8000ea2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4c0c      	ldr	r4, [pc, #48]	@ (8000ed8 <_sbrk+0x3c>)
 8000ea6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000ea8:	b12b      	cbz	r3, 8000eb6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4418      	add	r0, r3
 8000eac:	4290      	cmp	r0, r2
 8000eae:	d807      	bhi.n	8000ec0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000eb0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <_sbrk+0x40>)
 8000eb8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4418      	add	r0, r3
 8000ebc:	4290      	cmp	r0, r2
 8000ebe:	d9f7      	bls.n	8000eb0 <_sbrk+0x14>
    errno = ENOMEM;
 8000ec0:	f005 f998 	bl	80061f4 <__errno>
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	bd10      	pop	{r4, pc}
 8000ed0:	20000d04 	.word	0x20000d04
 8000ed4:	20020000 	.word	0x20020000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	20001078 	.word	0x20001078

08000ee0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ee0:	4a03      	ldr	r2, [pc, #12]	@ (8000ef0 <SystemInit+0x10>)
 8000ee2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000ee6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <_ZL17reg_write_handlerPhj>:
  uart_transmit((uint8_t*)&value, 4);
}

static void reg_write_handler(uint8_t* data, size_t size)
{
  if (size != 12)
 8000ef4:	290c      	cmp	r1, #12
 8000ef6:	d10b      	bne.n	8000f10 <_ZL17reg_write_handlerPhj+0x1c>
    return;

  uint32_t addr = *(uint32_t*)data;
  volatile uint32_t* reg = (volatile uint32_t*)addr;
 8000ef8:	6802      	ldr	r2, [r0, #0]
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
 8000efa:	6841      	ldr	r1, [r0, #4]
 8000efc:	6813      	ldr	r3, [r2, #0]
{
 8000efe:	b410      	push	{r4}
  *reg = (*reg & ~mask) | value;
 8000f00:	6884      	ldr	r4, [r0, #8]
 8000f02:	ea23 0304 	bic.w	r3, r3, r4
 8000f06:	430b      	orrs	r3, r1
}
 8000f08:	f85d 4b04 	ldr.w	r4, [sp], #4
  *reg = (*reg & ~mask) | value;
 8000f0c:	6013      	str	r3, [r2, #0]
}
 8000f0e:	4770      	bx	lr
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_ZL16reg_read_handlerPhj>:
  if (size != 4)
 8000f14:	2904      	cmp	r1, #4
 8000f16:	d000      	beq.n	8000f1a <_ZL16reg_read_handlerPhj+0x6>
 8000f18:	4770      	bx	lr
{
 8000f1a:	b530      	push	{r4, r5, lr}
  volatile uint32_t* reg = (volatile uint32_t*)addr;
 8000f1c:	6803      	ldr	r3, [r0, #0]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8000f1e:	4d11      	ldr	r5, [pc, #68]	@ (8000f64 <_ZL16reg_read_handlerPhj+0x50>)
  uint32_t value = *reg;
 8000f20:	681a      	ldr	r2, [r3, #0]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8000f22:	6828      	ldr	r0, [r5, #0]
 8000f24:	460c      	mov	r4, r1
  uint8_t tx_buf[4] = {0x55, 0xA5,
 8000f26:	4910      	ldr	r1, [pc, #64]	@ (8000f68 <_ZL16reg_read_handlerPhj+0x54>)
{
 8000f28:	b083      	sub	sp, #12
  uint32_t value = *reg;
 8000f2a:	e9cd 2100 	strd	r2, r1, [sp]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8000f2e:	230a      	movs	r3, #10
 8000f30:	4622      	mov	r2, r4
 8000f32:	a901      	add	r1, sp, #4
 8000f34:	f003 ff18 	bl	8004d68 <HAL_UART_Transmit>
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8000f38:	4622      	mov	r2, r4
 8000f3a:	4669      	mov	r1, sp
 8000f3c:	480b      	ldr	r0, [pc, #44]	@ (8000f6c <_ZL16reg_read_handlerPhj+0x58>)
 8000f3e:	f001 fc31 	bl	80027a4 <HAL_CRC_Calculate>
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8000f42:	4622      	mov	r2, r4
 8000f44:	4669      	mov	r1, sp
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8000f46:	4604      	mov	r4, r0
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8000f48:	2305      	movs	r3, #5
 8000f4a:	6828      	ldr	r0, [r5, #0]
 8000f4c:	f003 ff0c 	bl	8004d68 <HAL_UART_Transmit>
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8000f50:	6828      	ldr	r0, [r5, #0]
  tx_buf[0] = crc & 0xFF;
 8000f52:	f8ad 4004 	strh.w	r4, [sp, #4]
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8000f56:	230a      	movs	r3, #10
 8000f58:	2202      	movs	r2, #2
 8000f5a:	a901      	add	r1, sp, #4
 8000f5c:	f003 ff04 	bl	8004d68 <HAL_UART_Transmit>
}
 8000f60:	b003      	add	sp, #12
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	20000008 	.word	0x20000008
 8000f68:	0004a555 	.word	0x0004a555
 8000f6c:	20000a84 	.word	0x20000a84

08000f70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f74:	b083      	sub	sp, #12
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000f76:	9001      	str	r0, [sp, #4]
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	f000 80d3 	beq.w	8001124 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x1b4>
      { return static_cast<_Link_type>(__x->_M_right); }
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	f8d3 800c 	ldr.w	r8, [r3, #12]
      while (__x != 0)
 8000f84:	f1b8 0f00 	cmp.w	r8, #0
 8000f88:	f000 80ba 	beq.w	8001100 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x190>
      { return static_cast<_Link_type>(__x->_M_right); }
 8000f8c:	f8d8 900c 	ldr.w	r9, [r8, #12]
      while (__x != 0)
 8000f90:	f1b9 0f00 	cmp.w	r9, #0
 8000f94:	f000 80a0 	beq.w	80010d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x168>
      { return static_cast<_Link_type>(__x->_M_right); }
 8000f98:	f8d9 a00c 	ldr.w	sl, [r9, #12]
      while (__x != 0)
 8000f9c:	f1ba 0f00 	cmp.w	sl, #0
 8000fa0:	f000 8086 	beq.w	80010b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x140>
      { return static_cast<_Link_type>(__x->_M_right); }
 8000fa4:	f8da 400c 	ldr.w	r4, [sl, #12]
      while (__x != 0)
 8000fa8:	2c00      	cmp	r4, #0
 8000faa:	d058      	beq.n	800105e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xee>
      { return static_cast<_Link_type>(__x->_M_right); }
 8000fac:	68e5      	ldr	r5, [r4, #12]
      while (__x != 0)
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d032      	beq.n	8001018 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xa8>
      { return static_cast<_Link_type>(__x->_M_right); }
 8000fb2:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      while (__x != 0)
 8000fb6:	f1bb 0f00 	cmp.w	fp, #0
 8000fba:	d03e      	beq.n	800103a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xca>
      { return static_cast<_Link_type>(__x->_M_right); }
 8000fbc:	f8db 600c 	ldr.w	r6, [fp, #12]
      while (__x != 0)
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d060      	beq.n	8001086 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x116>
      { return static_cast<_Link_type>(__x->_M_right); }
 8000fc4:	68f7      	ldr	r7, [r6, #12]
      while (__x != 0)
 8000fc6:	b1af      	cbz	r7, 8000ff4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x84>
	{
	  _M_erase(_S_right(__x));
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	9700      	str	r7, [sp, #0]
 8000fcc:	f7ff ffd0 	bl	8000f70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0>
      { _M_string_length = __length; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
 8000fd0:	9a00      	ldr	r2, [sp, #0]
      { return static_cast<_Link_type>(__x->_M_left); }
 8000fd2:	68bf      	ldr	r7, [r7, #8]
 8000fd4:	6910      	ldr	r0, [r2, #16]
      _GLIBCXX20_CONSTEXPR
      const_pointer
      _M_local_data() const
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8000fd6:	f102 0118 	add.w	r1, r2, #24

      _GLIBCXX20_CONSTEXPR
      bool
      _M_is_local() const
      {
	if (_M_data() == _M_local_data())
 8000fda:	4288      	cmp	r0, r1
 8000fdc:	d004      	beq.n	8000fe8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x78>
      }

      _GLIBCXX20_CONSTEXPR
      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8000fde:	6991      	ldr	r1, [r2, #24]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000fe0:	3101      	adds	r1, #1
 8000fe2:	f004 fecf 	bl	8005d84 <_ZdlPvj>
 8000fe6:	9a00      	ldr	r2, [sp, #0]
 8000fe8:	212c      	movs	r1, #44	@ 0x2c
 8000fea:	4610      	mov	r0, r2
 8000fec:	f004 feca 	bl	8005d84 <_ZdlPvj>
      while (__x != 0)
 8000ff0:	2f00      	cmp	r7, #0
 8000ff2:	d1e9      	bne.n	8000fc8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x58>
      { return _M_dataplus._M_p; }
 8000ff4:	6930      	ldr	r0, [r6, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8000ff6:	68b7      	ldr	r7, [r6, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8000ff8:	f106 0318 	add.w	r3, r6, #24
	if (_M_data() == _M_local_data())
 8000ffc:	4298      	cmp	r0, r3
 8000ffe:	d003      	beq.n	8001008 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x98>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001000:	69b1      	ldr	r1, [r6, #24]
 8001002:	3101      	adds	r1, #1
 8001004:	f004 febe 	bl	8005d84 <_ZdlPvj>
 8001008:	212c      	movs	r1, #44	@ 0x2c
 800100a:	4630      	mov	r0, r6
 800100c:	f004 feba 	bl	8005d84 <_ZdlPvj>
      while (__x != 0)
 8001010:	2f00      	cmp	r7, #0
 8001012:	d038      	beq.n	8001086 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x116>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
 8001014:	463e      	mov	r6, r7
 8001016:	e7d5      	b.n	8000fc4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x54>
      { return _M_dataplus._M_p; }
 8001018:	6920      	ldr	r0, [r4, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800101a:	68a5      	ldr	r5, [r4, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800101c:	f104 0318 	add.w	r3, r4, #24
	if (_M_data() == _M_local_data())
 8001020:	4298      	cmp	r0, r3
 8001022:	d003      	beq.n	800102c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xbc>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001024:	69a1      	ldr	r1, [r4, #24]
 8001026:	3101      	adds	r1, #1
 8001028:	f004 feac 	bl	8005d84 <_ZdlPvj>
 800102c:	212c      	movs	r1, #44	@ 0x2c
 800102e:	4620      	mov	r0, r4
 8001030:	f004 fea8 	bl	8005d84 <_ZdlPvj>
      while (__x != 0)
 8001034:	b19d      	cbz	r5, 800105e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xee>
	  __x = __y;
 8001036:	462c      	mov	r4, r5
 8001038:	e7b8      	b.n	8000fac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x3c>
      { return _M_dataplus._M_p; }
 800103a:	6928      	ldr	r0, [r5, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800103c:	68ae      	ldr	r6, [r5, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800103e:	f105 0318 	add.w	r3, r5, #24
	if (_M_data() == _M_local_data())
 8001042:	4298      	cmp	r0, r3
 8001044:	d003      	beq.n	800104e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xde>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001046:	69a9      	ldr	r1, [r5, #24]
 8001048:	3101      	adds	r1, #1
 800104a:	f004 fe9b 	bl	8005d84 <_ZdlPvj>
 800104e:	212c      	movs	r1, #44	@ 0x2c
 8001050:	4628      	mov	r0, r5
 8001052:	f004 fe97 	bl	8005d84 <_ZdlPvj>
      while (__x != 0)
 8001056:	2e00      	cmp	r6, #0
 8001058:	d0de      	beq.n	8001018 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xa8>
	  __x = __y;
 800105a:	4635      	mov	r5, r6
 800105c:	e7a9      	b.n	8000fb2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x42>
      { return _M_dataplus._M_p; }
 800105e:	f8da 0010 	ldr.w	r0, [sl, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001062:	f8da 4008 	ldr.w	r4, [sl, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001066:	f10a 0318 	add.w	r3, sl, #24
	if (_M_data() == _M_local_data())
 800106a:	4298      	cmp	r0, r3
 800106c:	d004      	beq.n	8001078 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x108>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800106e:	f8da 1018 	ldr.w	r1, [sl, #24]
 8001072:	3101      	adds	r1, #1
 8001074:	f004 fe86 	bl	8005d84 <_ZdlPvj>
 8001078:	212c      	movs	r1, #44	@ 0x2c
 800107a:	4650      	mov	r0, sl
 800107c:	f004 fe82 	bl	8005d84 <_ZdlPvj>
      while (__x != 0)
 8001080:	b1b4      	cbz	r4, 80010b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x140>
	  __x = __y;
 8001082:	46a2      	mov	sl, r4
 8001084:	e78e      	b.n	8000fa4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x34>
      { return _M_dataplus._M_p; }
 8001086:	f8db 0010 	ldr.w	r0, [fp, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800108a:	f8db 6008 	ldr.w	r6, [fp, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800108e:	f10b 0318 	add.w	r3, fp, #24
	if (_M_data() == _M_local_data())
 8001092:	4298      	cmp	r0, r3
 8001094:	d004      	beq.n	80010a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x130>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001096:	f8db 1018 	ldr.w	r1, [fp, #24]
 800109a:	3101      	adds	r1, #1
 800109c:	f004 fe72 	bl	8005d84 <_ZdlPvj>
 80010a0:	212c      	movs	r1, #44	@ 0x2c
 80010a2:	4658      	mov	r0, fp
 80010a4:	f004 fe6e 	bl	8005d84 <_ZdlPvj>
      while (__x != 0)
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d0c6      	beq.n	800103a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xca>
	  __x = __y;
 80010ac:	46b3      	mov	fp, r6
 80010ae:	e785      	b.n	8000fbc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x4c>
      { return _M_dataplus._M_p; }
 80010b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 80010b4:	f8d9 4008 	ldr.w	r4, [r9, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 80010b8:	f109 0318 	add.w	r3, r9, #24
	if (_M_data() == _M_local_data())
 80010bc:	4298      	cmp	r0, r3
 80010be:	d004      	beq.n	80010ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x15a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80010c0:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80010c4:	3101      	adds	r1, #1
 80010c6:	f004 fe5d 	bl	8005d84 <_ZdlPvj>
 80010ca:	212c      	movs	r1, #44	@ 0x2c
 80010cc:	4648      	mov	r0, r9
 80010ce:	f004 fe59 	bl	8005d84 <_ZdlPvj>
      while (__x != 0)
 80010d2:	b10c      	cbz	r4, 80010d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x168>
	  __x = __y;
 80010d4:	46a1      	mov	r9, r4
 80010d6:	e75f      	b.n	8000f98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x28>
      { return _M_dataplus._M_p; }
 80010d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 80010dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 80010e0:	f108 0318 	add.w	r3, r8, #24
	if (_M_data() == _M_local_data())
 80010e4:	4298      	cmp	r0, r3
 80010e6:	d004      	beq.n	80010f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x182>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80010e8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80010ec:	3101      	adds	r1, #1
 80010ee:	f004 fe49 	bl	8005d84 <_ZdlPvj>
 80010f2:	212c      	movs	r1, #44	@ 0x2c
 80010f4:	4640      	mov	r0, r8
 80010f6:	f004 fe45 	bl	8005d84 <_ZdlPvj>
      while (__x != 0)
 80010fa:	b10c      	cbz	r4, 8001100 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x190>
	  __x = __y;
 80010fc:	46a0      	mov	r8, r4
 80010fe:	e745      	b.n	8000f8c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x1c>
      { return _M_dataplus._M_p; }
 8001100:	9a01      	ldr	r2, [sp, #4]
 8001102:	6910      	ldr	r0, [r2, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001104:	6894      	ldr	r4, [r2, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001106:	f102 0318 	add.w	r3, r2, #24
	if (_M_data() == _M_local_data())
 800110a:	4298      	cmp	r0, r3
 800110c:	d003      	beq.n	8001116 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x1a6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800110e:	6991      	ldr	r1, [r2, #24]
 8001110:	3101      	adds	r1, #1
 8001112:	f004 fe37 	bl	8005d84 <_ZdlPvj>
 8001116:	9801      	ldr	r0, [sp, #4]
 8001118:	212c      	movs	r1, #44	@ 0x2c
 800111a:	f004 fe33 	bl	8005d84 <_ZdlPvj>
      while (__x != 0)
 800111e:	b10c      	cbz	r4, 8001124 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x1b4>
	  __x = __y;
 8001120:	9401      	str	r4, [sp, #4]
 8001122:	e72c      	b.n	8000f7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0xe>
	}
    }
 8001124:	b003      	add	sp, #12
 8001126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800112a:	bf00      	nop

0800112c <uart_transmit>:
{
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	b082      	sub	sp, #8
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001130:	4e12      	ldr	r6, [pc, #72]	@ (800117c <uart_transmit+0x50>)
      (uint8_t)(size & 0xFF), (uint8_t)(size >> 8)};
 8001132:	f8ad 1006 	strh.w	r1, [sp, #6]
  uint8_t tx_buf[4] = {0x55, 0xA5,
 8001136:	f24a 5255 	movw	r2, #42325	@ 0xa555
 800113a:	f8ad 2004 	strh.w	r2, [sp, #4]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 800113e:	2204      	movs	r2, #4
{
 8001140:	460c      	mov	r4, r1
 8001142:	4605      	mov	r5, r0
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001144:	eb0d 0102 	add.w	r1, sp, r2
 8001148:	230a      	movs	r3, #10
 800114a:	6830      	ldr	r0, [r6, #0]
 800114c:	f003 fe0c 	bl	8004d68 <HAL_UART_Transmit>
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8001150:	4622      	mov	r2, r4
 8001152:	4629      	mov	r1, r5
 8001154:	480a      	ldr	r0, [pc, #40]	@ (8001180 <uart_transmit+0x54>)
 8001156:	f001 fb25 	bl	80027a4 <HAL_CRC_Calculate>
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 800115a:	4629      	mov	r1, r5
 800115c:	1c63      	adds	r3, r4, #1
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 800115e:	4605      	mov	r5, r0
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8001160:	b2a2      	uxth	r2, r4
 8001162:	6830      	ldr	r0, [r6, #0]
 8001164:	f003 fe00 	bl	8004d68 <HAL_UART_Transmit>
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8001168:	6830      	ldr	r0, [r6, #0]
  tx_buf[0] = crc & 0xFF;
 800116a:	f8ad 5004 	strh.w	r5, [sp, #4]
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 800116e:	230a      	movs	r3, #10
 8001170:	2202      	movs	r2, #2
 8001172:	a901      	add	r1, sp, #4
 8001174:	f003 fdf8 	bl	8004d68 <HAL_UART_Transmit>
}
 8001178:	b002      	add	sp, #8
 800117a:	bd70      	pop	{r4, r5, r6, pc}
 800117c:	20000008 	.word	0x20000008
 8001180:	20000a84 	.word	0x20000a84

08001184 <HAL_UARTEx_RxEventCallback>:
  if (huart != huart_reg)
 8001184:	4b81      	ldr	r3, [pc, #516]	@ (800138c <HAL_UARTEx_RxEventCallback+0x208>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4283      	cmp	r3, r0
 800118a:	d000      	beq.n	800118e <HAL_UARTEx_RxEventCallback+0xa>
 800118c:	4770      	bx	lr
{
 800118e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  auto end = rx_buf + Size;
 8001192:	4a7f      	ldr	r2, [pc, #508]	@ (8001390 <HAL_UARTEx_RxEventCallback+0x20c>)
 8001194:	eb02 0c01 	add.w	ip, r2, r1
  for (auto* p = rx_buf; p < end; )
 8001198:	4594      	cmp	ip, r2
{
 800119a:	b08b      	sub	sp, #44	@ 0x2c
  for (auto* p = rx_buf; p < end; )
 800119c:	f240 80b5 	bls.w	800130a <HAL_UARTEx_RxEventCallback+0x186>
  if (end - begin < 8)
 80011a0:	2907      	cmp	r1, #7
 80011a2:	f240 80b2 	bls.w	800130a <HAL_UARTEx_RxEventCallback+0x186>
  for (auto* p = rx_buf; p < end; )
 80011a6:	4690      	mov	r8, r2
 80011a8:	f8cd c000 	str.w	ip, [sp]
  if (*begin++ != 0x55)
 80011ac:	f898 3000 	ldrb.w	r3, [r8]
 80011b0:	2b55      	cmp	r3, #85	@ 0x55
 80011b2:	f040 80a8 	bne.w	8001306 <HAL_UARTEx_RxEventCallback+0x182>
  if (*begin++ != 0xA5)
 80011b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80011ba:	2ba5      	cmp	r3, #165	@ 0xa5
 80011bc:	f040 80a3 	bne.w	8001306 <HAL_UARTEx_RxEventCallback+0x182>
  if (size > end - begin + 2 || size < 2)
 80011c0:	9b00      	ldr	r3, [sp, #0]
 80011c2:	f8b8 9002 	ldrh.w	r9, [r8, #2]
  size += *begin++ << 8;
 80011c6:	f108 0604 	add.w	r6, r8, #4
  if (size > end - begin + 2 || size < 2)
 80011ca:	1b9b      	subs	r3, r3, r6
 80011cc:	3302      	adds	r3, #2
 80011ce:	4599      	cmp	r9, r3
 80011d0:	f300 8099 	bgt.w	8001306 <HAL_UARTEx_RxEventCallback+0x182>
 80011d4:	f1b9 0f01 	cmp.w	r9, #1
 80011d8:	f340 8095 	ble.w	8001306 <HAL_UARTEx_RxEventCallback+0x182>
  int crc = begin[size] + (begin[size+1] << 8);
 80011dc:	eb06 0709 	add.w	r7, r6, r9
 80011e0:	f816 4009 	ldrb.w	r4, [r6, r9]
 80011e4:	787b      	ldrb	r3, [r7, #1]
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 80011e6:	486b      	ldr	r0, [pc, #428]	@ (8001394 <HAL_UARTEx_RxEventCallback+0x210>)
 80011e8:	464a      	mov	r2, r9
 80011ea:	4631      	mov	r1, r6
  int crc = begin[size] + (begin[size+1] << 8);
 80011ec:	eb04 2403 	add.w	r4, r4, r3, lsl #8
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 80011f0:	f001 fad8 	bl	80027a4 <HAL_CRC_Calculate>
  if (calc != crc)
 80011f4:	4284      	cmp	r4, r0
 80011f6:	f040 8086 	bne.w	8001306 <HAL_UARTEx_RxEventCallback+0x182>
 80011fa:	46b2      	mov	sl, r6
 80011fc:	4633      	mov	r3, r6
 80011fe:	e001      	b.n	8001204 <HAL_UARTEx_RxEventCallback+0x80>
  for (; p != end; ++p)
 8001200:	429f      	cmp	r7, r3
 8001202:	d075      	beq.n	80012f0 <HAL_UARTEx_RxEventCallback+0x16c>
    if (*p == ':')
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	2a3a      	cmp	r2, #58	@ 0x3a
 8001208:	461d      	mov	r5, r3
 800120a:	461c      	mov	r4, r3
 800120c:	f103 0301 	add.w	r3, r3, #1
 8001210:	d1f6      	bne.n	8001200 <HAL_UARTEx_RxEventCallback+0x7c>
  if (p != end)
 8001212:	42af      	cmp	r7, r5
 8001214:	d06c      	beq.n	80012f0 <HAL_UARTEx_RxEventCallback+0x16c>
	: allocator_type(__a), _M_p(__dat) { }
 8001216:	ab06      	add	r3, sp, #24
 8001218:	9304      	str	r3, [sp, #16]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 800121a:	1bab      	subs	r3, r5, r6
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 800121c:	2200      	movs	r2, #0
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
 800121e:	2b0f      	cmp	r3, #15
 8001220:	9205      	str	r2, [sp, #20]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001222:	9303      	str	r3, [sp, #12]
	if (__dnew > size_type(_S_local_capacity))
 8001224:	f200 80a9 	bhi.w	800137a <HAL_UARTEx_RxEventCallback+0x1f6>
 8001228:	a806      	add	r0, sp, #24
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 800122a:	42ae      	cmp	r6, r5
 800122c:	d014      	beq.n	8001258 <HAL_UARTEx_RxEventCallback+0xd4>
 800122e:	eba4 0208 	sub.w	r2, r4, r8
 8001232:	1f53      	subs	r3, r2, #5
 8001234:	2b05      	cmp	r3, #5
 8001236:	d904      	bls.n	8001242 <HAL_UARTEx_RxEventCallback+0xbe>
 8001238:	f108 0305 	add.w	r3, r8, #5
 800123c:	1ac3      	subs	r3, r0, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d873      	bhi.n	800132a <HAL_UARTEx_RxEventCallback+0x1a6>
 8001242:	3c01      	subs	r4, #1
 8001244:	f108 0303 	add.w	r3, r8, #3
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001248:	f813 2f01 	ldrb.w	r2, [r3, #1]!
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 800124c:	f800 2b01 	strb.w	r2, [r0], #1
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001250:	429c      	cmp	r4, r3
 8001252:	d1f9      	bne.n	8001248 <HAL_UARTEx_RxEventCallback+0xc4>
      { return _M_dataplus._M_p; }
 8001254:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8001258:	2200      	movs	r2, #0
      { _M_string_length = __length; }
 800125a:	9305      	str	r3, [sp, #20]
 800125c:	54c2      	strb	r2, [r0, r3]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800125e:	4b4e      	ldr	r3, [pc, #312]	@ (8001398 <HAL_UARTEx_RxEventCallback+0x214>)
 8001260:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001264:	689c      	ldr	r4, [r3, #8]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
 8001266:	2c00      	cmp	r4, #0
 8001268:	d03a      	beq.n	80012e0 <HAL_UARTEx_RxEventCallback+0x15c>
 800126a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800126e:	9701      	str	r7, [sp, #4]
 8001270:	1d19      	adds	r1, r3, #4
 8001272:	4657      	mov	r7, sl
 8001274:	46aa      	mov	sl, r5
 8001276:	460d      	mov	r5, r1
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 8001278:	6966      	ldr	r6, [r4, #20]
       *  If the result of the comparison is nonzero returns it,
       *  otherwise the shorter one is ordered first.
      */
      _GLIBCXX20_CONSTEXPR
      int
      compare(const basic_string& __str) const
 800127a:	6920      	ldr	r0, [r4, #16]
 800127c:	42be      	cmp	r6, r7
 800127e:	4632      	mov	r2, r6
 8001280:	bf28      	it	cs
 8001282:	463a      	movcs	r2, r7
 8001284:	4659      	mov	r1, fp
	if (__n == 0)
 8001286:	b112      	cbz	r2, 800128e <HAL_UARTEx_RxEventCallback+0x10a>
	return __builtin_memcmp(__s1, __s2, __n);
 8001288:	f004 ff48 	bl	800611c <memcmp>
	const size_type __size = this->size();
	const size_type __osize = __str.size();
	const size_type __len = std::min(__size, __osize);

	int __r = traits_type::compare(_M_data(), __str.data(), __len);
	if (!__r)
 800128c:	b900      	cbnz	r0, 8001290 <HAL_UARTEx_RxEventCallback+0x10c>
	const difference_type __d = difference_type(__n1 - __n2);
 800128e:	1bf0      	subs	r0, r6, r7
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001290:	2800      	cmp	r0, #0
      { return static_cast<_Link_type>(__x->_M_right); }
 8001292:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001296:	db03      	blt.n	80012a0 <HAL_UARTEx_RxEventCallback+0x11c>
      while (__x != 0)
 8001298:	b13a      	cbz	r2, 80012aa <HAL_UARTEx_RxEventCallback+0x126>
 800129a:	4625      	mov	r5, r4
 800129c:	4614      	mov	r4, r2
 800129e:	e7eb      	b.n	8001278 <HAL_UARTEx_RxEventCallback+0xf4>
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d064      	beq.n	800136e <HAL_UARTEx_RxEventCallback+0x1ea>
	  __y = __x, __x = _S_left(__x);
	else
	  __x = _S_right(__x);
 80012a4:	460a      	mov	r2, r1
 80012a6:	4614      	mov	r4, r2
 80012a8:	e7e6      	b.n	8001278 <HAL_UARTEx_RxEventCallback+0xf4>
 80012aa:	4655      	mov	r5, sl
 80012ac:	46ba      	mov	sl, r7
 80012ae:	9f01      	ldr	r7, [sp, #4]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80012b0:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <HAL_UARTEx_RxEventCallback+0x218>)
 80012b2:	429c      	cmp	r4, r3
 80012b4:	d014      	beq.n	80012e0 <HAL_UARTEx_RxEventCallback+0x15c>
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80012b6:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
 80012ba:	45b2      	cmp	sl, r6
 80012bc:	4652      	mov	r2, sl
 80012be:	bf28      	it	cs
 80012c0:	4632      	movcs	r2, r6
	if (__n == 0)
 80012c2:	b11a      	cbz	r2, 80012cc <HAL_UARTEx_RxEventCallback+0x148>
	return __builtin_memcmp(__s1, __s2, __n);
 80012c4:	4658      	mov	r0, fp
 80012c6:	f004 ff29 	bl	800611c <memcmp>
	if (!__r)
 80012ca:	b908      	cbnz	r0, 80012d0 <HAL_UARTEx_RxEventCallback+0x14c>
	const difference_type __d = difference_type(__n1 - __n2);
 80012cc:	ebaa 0006 	sub.w	r0, sl, r6
	      || _M_impl._M_key_compare(__k,
 80012d0:	2800      	cmp	r0, #0
 80012d2:	db05      	blt.n	80012e0 <HAL_UARTEx_RxEventCallback+0x15c>
      ++p;
 80012d4:	1c68      	adds	r0, r5, #1
      it->second(p, end-p);
 80012d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012d8:	1a39      	subs	r1, r7, r0
 80012da:	4798      	blx	r3
      { return _M_dataplus._M_p; }
 80012dc:	f8dd b010 	ldr.w	fp, [sp, #16]
	if (_M_data() == _M_local_data())
 80012e0:	ab06      	add	r3, sp, #24
 80012e2:	459b      	cmp	fp, r3
 80012e4:	d004      	beq.n	80012f0 <HAL_UARTEx_RxEventCallback+0x16c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80012e6:	9906      	ldr	r1, [sp, #24]
 80012e8:	4658      	mov	r0, fp
 80012ea:	3101      	adds	r1, #1
 80012ec:	f004 fd4a 	bl	8005d84 <_ZdlPvj>
  for (auto* p = rx_buf; p < end; )
 80012f0:	9b00      	ldr	r3, [sp, #0]
  return size + 6;
 80012f2:	f109 0906 	add.w	r9, r9, #6
    p += res;
 80012f6:	44c8      	add	r8, r9
  for (auto* p = rx_buf; p < end; )
 80012f8:	4543      	cmp	r3, r8
 80012fa:	d904      	bls.n	8001306 <HAL_UARTEx_RxEventCallback+0x182>
  if (end - begin < 8)
 80012fc:	eba3 0308 	sub.w	r3, r3, r8
 8001300:	2b07      	cmp	r3, #7
 8001302:	f73f af53 	bgt.w	80011ac <HAL_UARTEx_RxEventCallback+0x28>
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <HAL_UARTEx_RxEventCallback+0x208>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4921      	ldr	r1, [pc, #132]	@ (8001390 <HAL_UARTEx_RxEventCallback+0x20c>)
 800130c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001310:	4618      	mov	r0, r3
 8001312:	f004 fc51 	bl	8005bb8 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	6813      	ldr	r3, [r2, #0]
 800131e:	f023 0304 	bic.w	r3, r3, #4
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	b00b      	add	sp, #44	@ 0x2c
 8001326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800132a:	1f14      	subs	r4, r2, #4
 800132c:	f024 0103 	bic.w	r1, r4, #3
 8001330:	4401      	add	r1, r0
 8001332:	4603      	mov	r3, r0
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001334:	f85a 2b04 	ldr.w	r2, [sl], #4
	__c1 = __c2;
 8001338:	f843 2b04 	str.w	r2, [r3], #4
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 800133c:	428b      	cmp	r3, r1
 800133e:	d1f9      	bne.n	8001334 <HAL_UARTEx_RxEventCallback+0x1b0>
 8001340:	f024 0303 	bic.w	r3, r4, #3
 8001344:	07a4      	lsls	r4, r4, #30
 8001346:	eb06 0203 	add.w	r2, r6, r3
 800134a:	eb00 0103 	add.w	r1, r0, r3
 800134e:	d081      	beq.n	8001254 <HAL_UARTEx_RxEventCallback+0xd0>
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001350:	5cf4      	ldrb	r4, [r6, r3]
 8001352:	54c4      	strb	r4, [r0, r3]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001354:	1c53      	adds	r3, r2, #1
 8001356:	429d      	cmp	r5, r3
 8001358:	f43f af7c 	beq.w	8001254 <HAL_UARTEx_RxEventCallback+0xd0>
	    traits_type::assign(*__p, *__k1); // These types are off.
 800135c:	7853      	ldrb	r3, [r2, #1]
 800135e:	704b      	strb	r3, [r1, #1]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001360:	1c93      	adds	r3, r2, #2
 8001362:	429d      	cmp	r5, r3
 8001364:	f43f af76 	beq.w	8001254 <HAL_UARTEx_RxEventCallback+0xd0>
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001368:	7893      	ldrb	r3, [r2, #2]
 800136a:	708b      	strb	r3, [r1, #2]
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 800136c:	e772      	b.n	8001254 <HAL_UARTEx_RxEventCallback+0xd0>
      while (__x != 0)
 800136e:	4629      	mov	r1, r5
 8001370:	460c      	mov	r4, r1
 8001372:	4655      	mov	r5, sl
 8001374:	46ba      	mov	sl, r7
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	e79a      	b.n	80012b0 <HAL_UARTEx_RxEventCallback+0x12c>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800137a:	a804      	add	r0, sp, #16
 800137c:	a903      	add	r1, sp, #12
 800137e:	f004 fddb 	bl	8005f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
	    _M_capacity(__dnew);
 8001382:	9b03      	ldr	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 8001384:	9004      	str	r0, [sp, #16]
      { _M_allocated_capacity = __capacity; }
 8001386:	9306      	str	r3, [sp, #24]
 8001388:	e74f      	b.n	800122a <HAL_UARTEx_RxEventCallback+0xa6>
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	20000d20 	.word	0x20000d20
 8001394:	20000a84 	.word	0x20000a84
 8001398:	20000d08 	.word	0x20000d08
 800139c:	20000d0c 	.word	0x20000d0c
 80013a0:	20000004 	.word	0x20000004

080013a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80013a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80013a8:	688c      	ldr	r4, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80013aa:	b083      	sub	sp, #12
 80013ac:	468b      	mov	fp, r1
 80013ae:	4681      	mov	r9, r0
 80013b0:	9201      	str	r2, [sp, #4]
      while (__x != 0)
 80013b2:	2c00      	cmp	r4, #0
 80013b4:	d049      	beq.n	800144a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0xa6>
 80013b6:	e9d2 8700 	ldrd	r8, r7, [r2]
	return __builtin_memcmp(__s1, __s2, __n);
 80013ba:	6966      	ldr	r6, [r4, #20]
      compare(const basic_string& __str) const
 80013bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80013c0:	42b7      	cmp	r7, r6
 80013c2:	463d      	mov	r5, r7
 80013c4:	bf28      	it	cs
 80013c6:	4635      	movcs	r5, r6
 80013c8:	4640      	mov	r0, r8
 80013ca:	462a      	mov	r2, r5
	if (__n == 0)
 80013cc:	b11d      	cbz	r5, 80013d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x32>
	return __builtin_memcmp(__s1, __s2, __n);
 80013ce:	4651      	mov	r1, sl
 80013d0:	f004 fea4 	bl	800611c <memcmp>
	if (!__r)
 80013d4:	b900      	cbnz	r0, 80013d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x34>
	const difference_type __d = difference_type(__n1 - __n2);
 80013d6:	1bb8      	subs	r0, r7, r6
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80013d8:	2800      	cmp	r0, #0
 80013da:	db19      	blt.n	8001410 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x6c>
      { return static_cast<_Link_type>(__x->_M_right); }
 80013dc:	68e2      	ldr	r2, [r4, #12]
      while (__x != 0)
 80013de:	b10a      	cbz	r2, 80013e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x40>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80013e0:	4614      	mov	r4, r2
 80013e2:	e7ea      	b.n	80013ba <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x16>
      while (__x != 0)
 80013e4:	46a3      	mov	fp, r4
	if (__n == 0)
 80013e6:	b18d      	cbz	r5, 800140c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x68>
	return __builtin_memcmp(__s1, __s2, __n);
 80013e8:	462a      	mov	r2, r5
 80013ea:	4641      	mov	r1, r8
 80013ec:	4650      	mov	r0, sl
 80013ee:	f004 fe95 	bl	800611c <memcmp>
	if (!__r)
 80013f2:	b158      	cbz	r0, 800140c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x68>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80013f4:	2800      	cmp	r0, #0
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80013f6:	f04f 0300 	mov.w	r3, #0
    }
 80013fa:	4648      	mov	r0, r9
 80013fc:	bfb4      	ite	lt
 80013fe:	e9c9 3b00 	strdlt	r3, fp, [r9]
      : first(__a), second(__b) { }
 8001402:	e9c9 4300 	strdge	r4, r3, [r9]
 8001406:	b003      	add	sp, #12
 8001408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const difference_type __d = difference_type(__n1 - __n2);
 800140c:	1bf0      	subs	r0, r6, r7
 800140e:	e7f1      	b.n	80013f4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x50>
      { return static_cast<_Link_type>(__x->_M_left); }
 8001410:	68a2      	ldr	r2, [r4, #8]
      while (__x != 0)
 8001412:	2a00      	cmp	r2, #0
 8001414:	d1e4      	bne.n	80013e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x3c>
	  if (__j == begin())
 8001416:	f8db 300c 	ldr.w	r3, [fp, #12]
 800141a:	429c      	cmp	r4, r3
 800141c:	d00e      	beq.n	800143c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x98>
	_M_node = _Rb_tree_decrement(_M_node);
 800141e:	4620      	mov	r0, r4
 8001420:	f004 fd1a 	bl	8005e58 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8001424:	9b01      	ldr	r3, [sp, #4]
 8001426:	e9d0 a604 	ldrd	sl, r6, [r0, #16]
 800142a:	e9d3 8700 	ldrd	r8, r7, [r3]
 800142e:	42be      	cmp	r6, r7
	return *this;
 8001430:	46a3      	mov	fp, r4
 8001432:	4635      	mov	r5, r6
	_M_node = _Rb_tree_decrement(_M_node);
 8001434:	4604      	mov	r4, r0
 8001436:	bf28      	it	cs
 8001438:	463d      	movcs	r5, r7
	return *this;
 800143a:	e7d4      	b.n	80013e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x42>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800143c:	2300      	movs	r3, #0
    }
 800143e:	4648      	mov	r0, r9
 8001440:	e9c9 3400 	strd	r3, r4, [r9]
 8001444:	b003      	add	sp, #12
 8001446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  if (__j == begin())
 800144a:	f8db 300c 	ldr.w	r3, [fp, #12]
      { return &this->_M_impl._M_header; }
 800144e:	1d0c      	adds	r4, r1, #4
	  if (__j == begin())
 8001450:	429c      	cmp	r4, r3
 8001452:	d1e4      	bne.n	800141e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x7a>
 8001454:	e7f2      	b.n	800143c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x98>
 8001456:	bf00      	nop

08001458 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145c:	461f      	mov	r7, r3
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	4606      	mov	r6, r0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001462:	202c      	movs	r0, #44	@ 0x2c
 8001464:	460d      	mov	r5, r1
 8001466:	f004 fc8f 	bl	8005d88 <_Znwj>
      _Tuple_impl(_Tuple_impl&&) = default;
#else
      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(static_cast<_Base&&>(__in))
 800146a:	683f      	ldr	r7, [r7, #0]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 800146c:	f100 0918 	add.w	r9, r0, #24
      { return _M_dataplus._M_p; }
 8001470:	46b8      	mov	r8, r7
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8001472:	f100 0310 	add.w	r3, r0, #16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8001476:	f8c0 9010 	str.w	r9, [r0, #16]
 800147a:	9303      	str	r3, [sp, #12]
      { return _M_dataplus._M_p; }
 800147c:	f858 3b08 	ldr.w	r3, [r8], #8
	if (_M_data() == _M_local_data())
 8001480:	4543      	cmp	r3, r8
 8001482:	4604      	mov	r4, r0
 8001484:	f000 80c7 	beq.w	8001616 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1be>
      { _M_dataplus._M_p = __p; }
 8001488:	6103      	str	r3, [r0, #16]
      { _M_allocated_capacity = __capacity; }
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	6183      	str	r3, [r0, #24]
      { _M_string_length = __length; }
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6163      	str	r3, [r4, #20]
      { return &this->_M_impl._M_header; }
 8001492:	f106 0b04 	add.w	fp, r6, #4
 8001496:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
 8001498:	45ab      	cmp	fp, r5
      { _M_dataplus._M_p = __p; }
 800149a:	f8c7 8000 	str.w	r8, [r7]
      { _M_string_length = __length; }
 800149e:	607b      	str	r3, [r7, #4]
	__c1 = __c2;
 80014a0:	723b      	strb	r3, [r7, #8]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80014a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80014a4:	462f      	mov	r7, r5
 80014a6:	d05f      	beq.n	8001568 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x110>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80014a8:	696b      	ldr	r3, [r5, #20]
 80014aa:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80014ae:	692a      	ldr	r2, [r5, #16]
 80014b0:	9301      	str	r3, [sp, #4]
      compare(const basic_string& __str) const
 80014b2:	4543      	cmp	r3, r8
 80014b4:	bf28      	it	cs
 80014b6:	4643      	movcs	r3, r8
 80014b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	9202      	str	r2, [sp, #8]
	if (__n == 0)
 80014c0:	b32b      	cbz	r3, 800150e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xb6>
	return __builtin_memcmp(__s1, __s2, __n);
 80014c2:	9902      	ldr	r1, [sp, #8]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4650      	mov	r0, sl
 80014c8:	f004 fe28 	bl	800611c <memcmp>
	if (!__r)
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d103      	bne.n	80014d8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x80>
	const difference_type __d = difference_type(__n1 - __n2);
 80014d0:	9b01      	ldr	r3, [sp, #4]
 80014d2:	eba8 0303 	sub.w	r3, r8, r3
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db1e      	blt.n	8001518 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xc0>
 80014da:	9a00      	ldr	r2, [sp, #0]
 80014dc:	9802      	ldr	r0, [sp, #8]
 80014de:	4651      	mov	r1, sl
 80014e0:	f004 fe1c 	bl	800611c <memcmp>
	if (!__r)
 80014e4:	b910      	cbnz	r0, 80014ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x94>
	const difference_type __d = difference_type(__n1 - __n2);
 80014e6:	9b01      	ldr	r3, [sp, #4]
 80014e8:	eba3 0008 	sub.w	r0, r3, r8
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80014ec:	2800      	cmp	r0, #0
 80014ee:	db6b      	blt.n	80015c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x170>
	if (_M_data() == _M_local_data())
 80014f0:	45ca      	cmp	sl, r9
 80014f2:	d004      	beq.n	80014fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xa6>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80014f4:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80014f6:	4650      	mov	r0, sl
 80014f8:	3101      	adds	r1, #1
 80014fa:	f004 fc43 	bl	8005d84 <_ZdlPvj>
 80014fe:	4620      	mov	r0, r4
 8001500:	212c      	movs	r1, #44	@ 0x2c
 8001502:	f004 fc3f 	bl	8005d84 <_ZdlPvj>
      }
 8001506:	4638      	mov	r0, r7
 8001508:	b009      	add	sp, #36	@ 0x24
 800150a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const difference_type __d = difference_type(__n1 - __n2);
 800150e:	9b01      	ldr	r3, [sp, #4]
 8001510:	eba8 0303 	sub.w	r3, r8, r3
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001514:	2b00      	cmp	r3, #0
 8001516:	dae6      	bge.n	80014e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x8e>
	  if (__pos._M_node == _M_leftmost()) // begin()
 8001518:	68f3      	ldr	r3, [r6, #12]
 800151a:	42ab      	cmp	r3, r5
 800151c:	d016      	beq.n	800154c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf4>
	_M_node = _Rb_tree_decrement(_M_node);
 800151e:	4628      	mov	r0, r5
 8001520:	f004 fc9a 	bl	8005e58 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8001524:	4603      	mov	r3, r0
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001526:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 800152a:	45a8      	cmp	r8, r5
 800152c:	4642      	mov	r2, r8
 800152e:	bf28      	it	cs
 8001530:	462a      	movcs	r2, r5
	if (__n == 0)
 8001532:	b12a      	cbz	r2, 8001540 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xe8>
	return __builtin_memcmp(__s1, __s2, __n);
 8001534:	4651      	mov	r1, sl
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	f004 fdf0 	bl	800611c <memcmp>
	if (!__r)
 800153c:	9b00      	ldr	r3, [sp, #0]
 800153e:	b908      	cbnz	r0, 8001544 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xec>
	const difference_type __d = difference_type(__n1 - __n2);
 8001540:	eba5 0008 	sub.w	r0, r5, r8
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001544:	2800      	cmp	r0, #0
 8001546:	da58      	bge.n	80015fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1a2>
	      if (_S_right(__before._M_node) == 0)
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	b31a      	cbz	r2, 8001594 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x13c>
			    || _M_impl._M_key_compare(_S_key(__z),
 800154c:	2001      	movs	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800154e:	465b      	mov	r3, fp
 8001550:	463a      	mov	r2, r7
 8001552:	4621      	mov	r1, r4
 8001554:	f004 fc82 	bl	8005e5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001558:	6973      	ldr	r3, [r6, #20]
 800155a:	4627      	mov	r7, r4
 800155c:	3301      	adds	r3, #1
      }
 800155e:	4638      	mov	r0, r7
      ++_M_impl._M_node_count;
 8001560:	6173      	str	r3, [r6, #20]
      }
 8001562:	b009      	add	sp, #36	@ 0x24
 8001564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001568:	6973      	ldr	r3, [r6, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d045      	beq.n	80015fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1a2>
 800156e:	6933      	ldr	r3, [r6, #16]
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001570:	6965      	ldr	r5, [r4, #20]
      compare(const basic_string& __str) const
 8001572:	6921      	ldr	r1, [r4, #16]
 8001574:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
 8001578:	42af      	cmp	r7, r5
 800157a:	463a      	mov	r2, r7
 800157c:	bf28      	it	cs
 800157e:	462a      	movcs	r2, r5
	if (__n == 0)
 8001580:	2a00      	cmp	r2, #0
 8001582:	d046      	beq.n	8001612 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1ba>
	return __builtin_memcmp(__s1, __s2, __n);
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	f004 fdc9 	bl	800611c <memcmp>
	if (!__r)
 800158a:	9b00      	ldr	r3, [sp, #0]
 800158c:	2800      	cmp	r0, #0
 800158e:	d040      	beq.n	8001612 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1ba>
 8001590:	2800      	cmp	r0, #0
 8001592:	da32      	bge.n	80015fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1a2>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001594:	459b      	cmp	fp, r3
 8001596:	d04f      	beq.n	8001638 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1e0>
 8001598:	e9d4 a804 	ldrd	sl, r8, [r4, #16]
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	6919      	ldr	r1, [r3, #16]
 80015a0:	9201      	str	r2, [sp, #4]
 80015a2:	4542      	cmp	r2, r8
 80015a4:	bf28      	it	cs
 80015a6:	4642      	movcs	r2, r8
 80015a8:	9102      	str	r1, [sp, #8]
 80015aa:	461f      	mov	r7, r3
 80015ac:	9200      	str	r2, [sp, #0]
	if (__n == 0)
 80015ae:	9b00      	ldr	r3, [sp, #0]
 80015b0:	b12b      	cbz	r3, 80015be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x166>
	return __builtin_memcmp(__s1, __s2, __n);
 80015b2:	9902      	ldr	r1, [sp, #8]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4650      	mov	r0, sl
 80015b8:	f004 fdb0 	bl	800611c <memcmp>
 80015bc:	b910      	cbnz	r0, 80015c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x16c>
	const difference_type __d = difference_type(__n1 - __n2);
 80015be:	9b01      	ldr	r3, [sp, #4]
 80015c0:	eba8 0003 	sub.w	r0, r8, r3
			    || _M_impl._M_key_compare(_S_key(__z),
 80015c4:	0fc0      	lsrs	r0, r0, #31
 80015c6:	e7c2      	b.n	800154e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf6>
	  if (__pos._M_node == _M_rightmost())
 80015c8:	6933      	ldr	r3, [r6, #16]
 80015ca:	42ab      	cmp	r3, r5
 80015cc:	d0e2      	beq.n	8001594 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x13c>
	_M_node = _Rb_tree_increment(_M_node);
 80015ce:	4628      	mov	r0, r5
 80015d0:	f004 fc40 	bl	8005e54 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80015d4:	6942      	ldr	r2, [r0, #20]
 80015d6:	9204      	str	r2, [sp, #16]
 80015d8:	4542      	cmp	r2, r8
 80015da:	bf28      	it	cs
 80015dc:	4642      	movcs	r2, r8
 80015de:	6901      	ldr	r1, [r0, #16]
 80015e0:	4603      	mov	r3, r0
	if (__n == 0)
 80015e2:	b12a      	cbz	r2, 80015f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x198>
	return __builtin_memcmp(__s1, __s2, __n);
 80015e4:	9005      	str	r0, [sp, #20]
 80015e6:	4650      	mov	r0, sl
 80015e8:	f004 fd98 	bl	800611c <memcmp>
	if (!__r)
 80015ec:	9b05      	ldr	r3, [sp, #20]
 80015ee:	b910      	cbnz	r0, 80015f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x19e>
	const difference_type __d = difference_type(__n1 - __n2);
 80015f0:	9a04      	ldr	r2, [sp, #16]
 80015f2:	eba8 0002 	sub.w	r0, r8, r2
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80015f6:	2800      	cmp	r0, #0
 80015f8:	db18      	blt.n	800162c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1d4>
	    return _M_get_insert_unique_pos(__k);
 80015fa:	9a03      	ldr	r2, [sp, #12]
 80015fc:	4631      	mov	r1, r6
 80015fe:	a806      	add	r0, sp, #24
 8001600:	f7ff fed0 	bl	80013a4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>
 8001604:	e9dd 3706 	ldrd	r3, r7, [sp, #24]
	if (__res.second)
 8001608:	b167      	cbz	r7, 8001624 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x1cc>
			    || _M_impl._M_key_compare(_S_key(__z),
 800160a:	2b00      	cmp	r3, #0
 800160c:	d19e      	bne.n	800154c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf4>
 800160e:	463b      	mov	r3, r7
 8001610:	e7c0      	b.n	8001594 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x13c>
 8001612:	1b78      	subs	r0, r7, r5
 8001614:	e7bc      	b.n	8001590 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x138>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 8001616:	687a      	ldr	r2, [r7, #4]
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 8001618:	4641      	mov	r1, r8
 800161a:	3201      	adds	r2, #1
 800161c:	4648      	mov	r0, r9
 800161e:	f004 fe15 	bl	800624c <memcpy>
 8001622:	e734      	b.n	800148e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x36>
 8001624:	f8d4 a010 	ldr.w	sl, [r4, #16]
	if (__res.second)
 8001628:	461f      	mov	r7, r3
 800162a:	e761      	b.n	80014f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x98>
	      if (_S_right(__pos._M_node) == 0)
 800162c:	68ea      	ldr	r2, [r5, #12]
 800162e:	2a00      	cmp	r2, #0
 8001630:	d0bd      	beq.n	80015ae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x156>
 8001632:	461f      	mov	r7, r3
			    || _M_impl._M_key_compare(_S_key(__z),
 8001634:	2001      	movs	r0, #1
 8001636:	e78a      	b.n	800154e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf6>
 8001638:	465f      	mov	r7, fp
 800163a:	e787      	b.n	800154c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0xf4>

0800163c <uart_register_handler>:
{
 800163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001640:	b08b      	sub	sp, #44	@ 0x2c
	: allocator_type(__a), _M_p(__dat) { }
 8001642:	f10d 0a18 	add.w	sl, sp, #24
 8001646:	f8cd a010 	str.w	sl, [sp, #16]
	if (__s == 0)
 800164a:	2800      	cmp	r0, #0
 800164c:	d06e      	beq.n	800172c <uart_register_handler+0xf0>
 800164e:	4689      	mov	r9, r1
 8001650:	4605      	mov	r5, r0
	return __builtin_strlen(__s);
 8001652:	f7fe fde1 	bl	8000218 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 8001656:	280f      	cmp	r0, #15
 8001658:	4604      	mov	r4, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800165a:	9003      	str	r0, [sp, #12]
	if (__dnew > size_type(_S_local_capacity))
 800165c:	d857      	bhi.n	800170e <uart_register_handler+0xd2>
	if (__n == 1)
 800165e:	2801      	cmp	r0, #1
 8001660:	d122      	bne.n	80016a8 <uart_register_handler+0x6c>
	__c1 = __c2;
 8001662:	782b      	ldrb	r3, [r5, #0]
 8001664:	f88d 3018 	strb.w	r3, [sp, #24]
      { return _M_dataplus._M_p; }
 8001668:	4652      	mov	r2, sl
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800166a:	4f32      	ldr	r7, [pc, #200]	@ (8001734 <uart_register_handler+0xf8>)
      { _M_string_length = __length; }
 800166c:	9405      	str	r4, [sp, #20]
 800166e:	2300      	movs	r3, #0
 8001670:	5513      	strb	r3, [r2, r4]
 8001672:	68bc      	ldr	r4, [r7, #8]
      while (__x != 0)
 8001674:	2c00      	cmp	r4, #0
 8001676:	d03c      	beq.n	80016f2 <uart_register_handler+0xb6>
 8001678:	e9dd 6b04 	ldrd	r6, fp, [sp, #16]
 800167c:	3704      	adds	r7, #4
 800167e:	46b8      	mov	r8, r7
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001680:	6965      	ldr	r5, [r4, #20]
      compare(const basic_string& __str) const
 8001682:	455d      	cmp	r5, fp
 8001684:	462a      	mov	r2, r5
 8001686:	bf28      	it	cs
 8001688:	465a      	movcs	r2, fp
	if (__n == 0)
 800168a:	b122      	cbz	r2, 8001696 <uart_register_handler+0x5a>
	return __builtin_memcmp(__s1, __s2, __n);
 800168c:	6920      	ldr	r0, [r4, #16]
 800168e:	4631      	mov	r1, r6
 8001690:	f004 fd44 	bl	800611c <memcmp>
	if (!__r)
 8001694:	b908      	cbnz	r0, 800169a <uart_register_handler+0x5e>
	const difference_type __d = difference_type(__n1 - __n2);
 8001696:	eba5 000b 	sub.w	r0, r5, fp
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800169a:	2800      	cmp	r0, #0
 800169c:	db08      	blt.n	80016b0 <uart_register_handler+0x74>
      { return static_cast<_Link_type>(__x->_M_left); }
 800169e:	68a3      	ldr	r3, [r4, #8]
      while (__x != 0)
 80016a0:	b153      	cbz	r3, 80016b8 <uart_register_handler+0x7c>
 80016a2:	46a0      	mov	r8, r4
      { return _M_dataplus._M_p; }
 80016a4:	461c      	mov	r4, r3
 80016a6:	e7eb      	b.n	8001680 <uart_register_handler+0x44>
	if (__n == 0)
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d0dd      	beq.n	8001668 <uart_register_handler+0x2c>
 80016ac:	4650      	mov	r0, sl
 80016ae:	e036      	b.n	800171e <uart_register_handler+0xe2>
      { return static_cast<_Link_type>(__x->_M_right); }
 80016b0:	68e3      	ldr	r3, [r4, #12]
      while (__x != 0)
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f6      	bne.n	80016a4 <uart_register_handler+0x68>
 80016b6:	4644      	mov	r4, r8
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 80016b8:	42bc      	cmp	r4, r7
 80016ba:	d01b      	beq.n	80016f4 <uart_register_handler+0xb8>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80016bc:	6965      	ldr	r5, [r4, #20]
      compare(const basic_string& __str) const
 80016be:	455d      	cmp	r5, fp
 80016c0:	462a      	mov	r2, r5
 80016c2:	bf28      	it	cs
 80016c4:	465a      	movcs	r2, fp
	if (__n == 0)
 80016c6:	b122      	cbz	r2, 80016d2 <uart_register_handler+0x96>
	return __builtin_memcmp(__s1, __s2, __n);
 80016c8:	6921      	ldr	r1, [r4, #16]
 80016ca:	4630      	mov	r0, r6
 80016cc:	f004 fd26 	bl	800611c <memcmp>
	if (!__r)
 80016d0:	b908      	cbnz	r0, 80016d6 <uart_register_handler+0x9a>
	const difference_type __d = difference_type(__n1 - __n2);
 80016d2:	ebab 0005 	sub.w	r0, fp, r5
 80016d6:	2800      	cmp	r0, #0
 80016d8:	db0c      	blt.n	80016f4 <uart_register_handler+0xb8>
	if (_M_data() == _M_local_data())
 80016da:	4556      	cmp	r6, sl
  handler_map[cmd] = cb;
 80016dc:	f8c4 9028 	str.w	r9, [r4, #40]	@ 0x28
 80016e0:	d004      	beq.n	80016ec <uart_register_handler+0xb0>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80016e2:	9906      	ldr	r1, [sp, #24]
 80016e4:	4630      	mov	r0, r6
 80016e6:	3101      	adds	r1, #1
 80016e8:	f004 fb4c 	bl	8005d84 <_ZdlPvj>
}
 80016ec:	b00b      	add	sp, #44	@ 0x2c
 80016ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016f2:	1d3c      	adds	r4, r7, #4
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80016f4:	ab02      	add	r3, sp, #8
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80016f6:	aa04      	add	r2, sp, #16
 80016f8:	4621      	mov	r1, r4
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	9203      	str	r2, [sp, #12]
 80016fe:	480d      	ldr	r0, [pc, #52]	@ (8001734 <uart_register_handler+0xf8>)
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <uart_register_handler+0xfc>)
 8001702:	ab03      	add	r3, sp, #12
 8001704:	f7ff fea8 	bl	8001458 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS5_EESM_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>
      { return _M_dataplus._M_p; }
 8001708:	9e04      	ldr	r6, [sp, #16]
 800170a:	4604      	mov	r4, r0
 800170c:	e7e5      	b.n	80016da <uart_register_handler+0x9e>
	    _M_data(_M_create(__dnew, size_type(0)));
 800170e:	2200      	movs	r2, #0
 8001710:	a903      	add	r1, sp, #12
 8001712:	a804      	add	r0, sp, #16
 8001714:	f004 fc10 	bl	8005f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8001718:	9b03      	ldr	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 800171a:	9004      	str	r0, [sp, #16]
      { _M_allocated_capacity = __capacity; }
 800171c:	9306      	str	r3, [sp, #24]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800171e:	4622      	mov	r2, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f004 fd93 	bl	800624c <memcpy>
      { return _M_dataplus._M_p; }
 8001726:	e9dd 4203 	ldrd	r4, r2, [sp, #12]
 800172a:	e79e      	b.n	800166a <uart_register_handler+0x2e>
	  std::__throw_logic_error(__N("basic_string: "
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <uart_register_handler+0x100>)
 800172e:	f004 fbfc 	bl	8005f2a <_ZSt19__throw_logic_errorPKc>
 8001732:	bf00      	nop
 8001734:	20000d08 	.word	0x20000d08
 8001738:	08006378 	.word	0x08006378
 800173c:	0800633c 	.word	0x0800633c

08001740 <uart_init>:
{
 8001740:	b508      	push	{r3, lr}
  uart_register_handler("RDR", reg_read_handler);
 8001742:	490b      	ldr	r1, [pc, #44]	@ (8001770 <uart_init+0x30>)
 8001744:	480b      	ldr	r0, [pc, #44]	@ (8001774 <uart_init+0x34>)
 8001746:	f7ff ff79 	bl	800163c <uart_register_handler>
  uart_register_handler("WRR", reg_write_handler);
 800174a:	490b      	ldr	r1, [pc, #44]	@ (8001778 <uart_init+0x38>)
 800174c:	480b      	ldr	r0, [pc, #44]	@ (800177c <uart_init+0x3c>)
 800174e:	f7ff ff75 	bl	800163c <uart_register_handler>
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <uart_init+0x40>)
 8001754:	490b      	ldr	r1, [pc, #44]	@ (8001784 <uart_init+0x44>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	f44f 7202 	mov.w	r2, #520	@ 0x208
 800175c:	f004 fa2c 	bl	8005bb8 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <uart_init+0x48>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	6813      	ldr	r3, [r2, #0]
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6013      	str	r3, [r2, #0]
}
 800176e:	bd08      	pop	{r3, pc}
 8001770:	08000f15 	.word	0x08000f15
 8001774:	08006370 	.word	0x08006370
 8001778:	08000ef5 	.word	0x08000ef5
 800177c:	08006374 	.word	0x08006374
 8001780:	20000008 	.word	0x20000008
 8001784:	20000d20 	.word	0x20000d20
 8001788:	20000004 	.word	0x20000004

0800178c <_GLOBAL__sub_I_huart_reg>:
      _M_header._M_color = _S_red;
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <_GLOBAL__sub_I_huart_reg+0x14>)
 800178e:	2200      	movs	r2, #0
      _M_header._M_left = &_M_header;
 8001790:	1d19      	adds	r1, r3, #4
 8001792:	e9c3 2102 	strd	r2, r1, [r3, #8]
      _M_node_count = 0;
 8001796:	e9c3 1204 	strd	r1, r2, [r3, #16]
      _M_header._M_color = _S_red;
 800179a:	711a      	strb	r2, [r3, #4]
}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000d08 	.word	0x20000d08

080017a4 <_GLOBAL__sub_D_huart_reg>:
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80017a4:	4b01      	ldr	r3, [pc, #4]	@ (80017ac <_GLOBAL__sub_D_huart_reg+0x8>)
      { _M_erase(_M_begin()); }
 80017a6:	6898      	ldr	r0, [r3, #8]
 80017a8:	f7ff bbe2 	b.w	8000f70 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0>
 80017ac:	20000d08 	.word	0x20000d08

080017b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017b0:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b4:	f7ff fb94 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b8:	480c      	ldr	r0, [pc, #48]	@ (80017ec <LoopForever+0x6>)
  ldr r1, =_edata
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <LoopForever+0xe>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d0:	4c0a      	ldr	r4, [pc, #40]	@ (80017fc <LoopForever+0x16>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017de:	f004 fd0f 	bl	8006200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017e2:	f7fe ff8b 	bl	80006fc <main>

080017e6 <LoopForever>:

LoopForever:
    b LoopForever
 80017e6:	e7fe      	b.n	80017e6 <LoopForever>
  ldr   r0, =_estack
 80017e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017f4:	080063d4 	.word	0x080063d4
  ldr r2, =_sbss
 80017f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80017fc:	20001078 	.word	0x20001078

08001800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_2_IRQHandler>
	...

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <HAL_InitTick+0x40>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b90b      	cbnz	r3, 8001810 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 800180c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800180e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001810:	490d      	ldr	r1, [pc, #52]	@ (8001848 <HAL_InitTick+0x44>)
 8001812:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001816:	4605      	mov	r5, r0
 8001818:	fbb2 f3f3 	udiv	r3, r2, r3
 800181c:	6808      	ldr	r0, [r1, #0]
 800181e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001822:	f000 ff2d 	bl	8002680 <HAL_SYSTICK_Config>
 8001826:	4604      	mov	r4, r0
 8001828:	2800      	cmp	r0, #0
 800182a:	d1ef      	bne.n	800180c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182c:	2d0f      	cmp	r5, #15
 800182e:	d8ed      	bhi.n	800180c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	4602      	mov	r2, r0
 8001832:	4629      	mov	r1, r5
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f000 fed8 	bl	80025ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_InitTick+0x48>)
 800183e:	4620      	mov	r0, r4
 8001840:	601d      	str	r5, [r3, #0]
}
 8001842:	bd38      	pop	{r3, r4, r5, pc}
 8001844:	2000000c 	.word	0x2000000c
 8001848:	20000000 	.word	0x20000000
 800184c:	20000010 	.word	0x20000010

08001850 <HAL_Init>:
{
 8001850:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001852:	2003      	movs	r0, #3
 8001854:	f000 feb8 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001858:	200f      	movs	r0, #15
 800185a:	f7ff ffd3 	bl	8001804 <HAL_InitTick>
 800185e:	b110      	cbz	r0, 8001866 <HAL_Init+0x16>
    status = HAL_ERROR;
 8001860:	2401      	movs	r4, #1
}
 8001862:	4620      	mov	r0, r4
 8001864:	bd10      	pop	{r4, pc}
 8001866:	4604      	mov	r4, r0
    HAL_MspInit();
 8001868:	f7ff f938 	bl	8000adc <HAL_MspInit>
}
 800186c:	4620      	mov	r0, r4
 800186e:	bd10      	pop	{r4, pc}

08001870 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001870:	4a03      	ldr	r2, [pc, #12]	@ (8001880 <HAL_IncTick+0x10>)
 8001872:	4904      	ldr	r1, [pc, #16]	@ (8001884 <HAL_IncTick+0x14>)
 8001874:	6813      	ldr	r3, [r2, #0]
 8001876:	6809      	ldr	r1, [r1, #0]
 8001878:	440b      	add	r3, r1
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000f28 	.word	0x20000f28
 8001884:	2000000c 	.word	0x2000000c

08001888 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001888:	4b01      	ldr	r3, [pc, #4]	@ (8001890 <HAL_GetTick+0x8>)
 800188a:	6818      	ldr	r0, [r3, #0]
}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000f28 	.word	0x20000f28

08001894 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001894:	b530      	push	{r4, r5, lr}
 8001896:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001898:	2300      	movs	r3, #0
 800189a:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800189c:	2800      	cmp	r0, #0
 800189e:	d05c      	beq.n	800195a <HAL_ADC_Init+0xc6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a0:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80018a2:	4604      	mov	r4, r0
 80018a4:	2d00      	cmp	r5, #0
 80018a6:	f000 80cc 	beq.w	8001a42 <HAL_ADC_Init+0x1ae>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018aa:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	009d      	lsls	r5, r3, #2
 80018b0:	d505      	bpl.n	80018be <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018b2:	6893      	ldr	r3, [r2, #8]
 80018b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018bc:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018be:	6893      	ldr	r3, [r2, #8]
 80018c0:	00d8      	lsls	r0, r3, #3
 80018c2:	d419      	bmi.n	80018f8 <HAL_ADC_Init+0x64>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018c4:	4b78      	ldr	r3, [pc, #480]	@ (8001aa8 <HAL_ADC_Init+0x214>)
 80018c6:	4879      	ldr	r0, [pc, #484]	@ (8001aac <HAL_ADC_Init+0x218>)
 80018c8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80018ca:	6891      	ldr	r1, [r2, #8]
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	fba0 0303 	umull	r0, r3, r0, r3
 80018d2:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80018d6:	099b      	lsrs	r3, r3, #6
 80018d8:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80018dc:	3301      	adds	r3, #1
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80018e4:	6091      	str	r1, [r2, #8]
 80018e6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80018e8:	9b01      	ldr	r3, [sp, #4]
 80018ea:	b12b      	cbz	r3, 80018f8 <HAL_ADC_Init+0x64>
    {
      wait_loop_index--;
 80018ec:	9b01      	ldr	r3, [sp, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80018f2:	9b01      	ldr	r3, [sp, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f9      	bne.n	80018ec <HAL_ADC_Init+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018f8:	6893      	ldr	r3, [r2, #8]
 80018fa:	00d9      	lsls	r1, r3, #3
 80018fc:	d430      	bmi.n	8001960 <HAL_ADC_Init+0xcc>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001900:	f043 0310 	orr.w	r3, r3, #16
 8001904:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001906:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001908:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190a:	4303      	orrs	r3, r0
 800190c:	6623      	str	r3, [r4, #96]	@ 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800190e:	6893      	ldr	r3, [r2, #8]
 8001910:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001914:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001916:	d11c      	bne.n	8001952 <HAL_ADC_Init+0xbe>
 8001918:	06db      	lsls	r3, r3, #27
 800191a:	d41a      	bmi.n	8001952 <HAL_ADC_Init+0xbe>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800191e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001928:	6893      	ldr	r3, [r2, #8]
 800192a:	07dd      	lsls	r5, r3, #31
 800192c:	d432      	bmi.n	8001994 <HAL_ADC_Init+0x100>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800192e:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8001932:	d017      	beq.n	8001964 <HAL_ADC_Init+0xd0>
 8001934:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab0 <HAL_ADC_Init+0x21c>)
 8001936:	429a      	cmp	r2, r3
 8001938:	d014      	beq.n	8001964 <HAL_ADC_Init+0xd0>
 800193a:	495e      	ldr	r1, [pc, #376]	@ (8001ab4 <HAL_ADC_Init+0x220>)
 800193c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab8 <HAL_ADC_Init+0x224>)
 800193e:	6889      	ldr	r1, [r1, #8]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	430b      	orrs	r3, r1
 8001944:	495d      	ldr	r1, [pc, #372]	@ (8001abc <HAL_ADC_Init+0x228>)
 8001946:	6889      	ldr	r1, [r1, #8]
 8001948:	430b      	orrs	r3, r1
 800194a:	07d9      	lsls	r1, r3, #31
 800194c:	d422      	bmi.n	8001994 <HAL_ADC_Init+0x100>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800194e:	495c      	ldr	r1, [pc, #368]	@ (8001ac0 <HAL_ADC_Init+0x22c>)
 8001950:	e01a      	b.n	8001988 <HAL_ADC_Init+0xf4>
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001952:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001954:	f043 0310 	orr.w	r3, r3, #16
 8001958:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800195a:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800195c:	b003      	add	sp, #12
 800195e:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001960:	2000      	movs	r0, #0
 8001962:	e7d4      	b.n	800190e <HAL_ADC_Init+0x7a>
 8001964:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001968:	4b51      	ldr	r3, [pc, #324]	@ (8001ab0 <HAL_ADC_Init+0x21c>)
 800196a:	688d      	ldr	r5, [r1, #8]
 800196c:	6899      	ldr	r1, [r3, #8]
 800196e:	07c9      	lsls	r1, r1, #31
 8001970:	d410      	bmi.n	8001994 <HAL_ADC_Init+0x100>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001972:	07ed      	lsls	r5, r5, #31
 8001974:	d40e      	bmi.n	8001994 <HAL_ADC_Init+0x100>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001976:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800197a:	f000 8092 	beq.w	8001aa2 <HAL_ADC_Init+0x20e>
 800197e:	4950      	ldr	r1, [pc, #320]	@ (8001ac0 <HAL_ADC_Init+0x22c>)
 8001980:	4d50      	ldr	r5, [pc, #320]	@ (8001ac4 <HAL_ADC_Init+0x230>)
 8001982:	429a      	cmp	r2, r3
 8001984:	bf08      	it	eq
 8001986:	4629      	moveq	r1, r5
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001988:	688b      	ldr	r3, [r1, #8]
 800198a:	6865      	ldr	r5, [r4, #4]
 800198c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001990:	432b      	orrs	r3, r5
 8001992:	608b      	str	r3, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 8001994:	68e5      	ldr	r5, [r4, #12]
 8001996:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001998:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 800199c:	432b      	orrs	r3, r5
 800199e:	68a5      	ldr	r5, [r4, #8]
 80019a0:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a2:	7f65      	ldrb	r5, [r4, #29]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a4:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 80019a6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019ae:	d04e      	beq.n	8001a4e <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80019b2:	b121      	cbz	r1, 80019be <HAL_ADC_Init+0x12a>
                   | hadc->Init.ExternalTrigConvEdge
 80019b4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019b6:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019ba:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019bc:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019be:	68d5      	ldr	r5, [r2, #12]
 80019c0:	4941      	ldr	r1, [pc, #260]	@ (8001ac8 <HAL_ADC_Init+0x234>)
 80019c2:	4029      	ands	r1, r5
 80019c4:	4319      	orrs	r1, r3
 80019c6:	60d1      	str	r1, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80019c8:	6913      	ldr	r3, [r2, #16]
 80019ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80019cc:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6113      	str	r3, [r2, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019d4:	6893      	ldr	r3, [r2, #8]
 80019d6:	071b      	lsls	r3, r3, #28
 80019d8:	d424      	bmi.n	8001a24 <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019da:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019dc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019e0:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019e2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019e6:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019e8:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ec:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019f0:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80019f2:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019f4:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019f6:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80019f8:	2900      	cmp	r1, #0
 80019fa:	d035      	beq.n	8001a68 <HAL_ADC_Init+0x1d4>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a00:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a02:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8001a06:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8001a14:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d031      	beq.n	8001a80 <HAL_ADC_Init+0x1ec>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a1c:	6913      	ldr	r3, [r2, #16]
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a24:	6963      	ldr	r3, [r4, #20]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d016      	beq.n	8001a58 <HAL_ADC_Init+0x1c4>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a2a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001a2c:	f023 030f 	bic.w	r3, r3, #15
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a32:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001a34:	f023 0303 	bic.w	r3, r3, #3
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8001a3e:	b003      	add	sp, #12
 8001a40:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001a42:	f7ff f865 	bl	8000b10 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001a46:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8001a48:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8001a4c:	e72d      	b.n	80018aa <HAL_ADC_Init+0x16>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a4e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001a50:	3901      	subs	r1, #1
 8001a52:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001a56:	e7ab      	b.n	80019b0 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a58:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001a5a:	6a23      	ldr	r3, [r4, #32]
 8001a5c:	f021 010f 	bic.w	r1, r1, #15
 8001a60:	3b01      	subs	r3, #1
 8001a62:	430b      	orrs	r3, r1
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	e7e4      	b.n	8001a32 <HAL_ADC_Init+0x19e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a6c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a6e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8001a72:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a76:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a7a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a7e:	e7c9      	b.n	8001a14 <HAL_ADC_Init+0x180>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a80:	6911      	ldr	r1, [r2, #16]
 8001a82:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a84:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8001a86:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8001a8a:	f021 0104 	bic.w	r1, r1, #4
 8001a8e:	432b      	orrs	r3, r5
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6113      	str	r3, [r2, #16]
 8001aa0:	e7c0      	b.n	8001a24 <HAL_ADC_Init+0x190>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aa2:	4908      	ldr	r1, [pc, #32]	@ (8001ac4 <HAL_ADC_Init+0x230>)
 8001aa4:	e770      	b.n	8001988 <HAL_ADC_Init+0xf4>
 8001aa6:	bf00      	nop
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	053e2d63 	.word	0x053e2d63
 8001ab0:	50000100 	.word	0x50000100
 8001ab4:	50000400 	.word	0x50000400
 8001ab8:	50000500 	.word	0x50000500
 8001abc:	50000600 	.word	0x50000600
 8001ac0:	50000700 	.word	0x50000700
 8001ac4:	50000300 	.word	0x50000300
 8001ac8:	fff04007 	.word	0xfff04007

08001acc <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop

08001ad0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ad2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001ad4:	f7ff fffa 	bl	8001acc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ad8:	bd08      	pop	{r3, pc}
 8001ada:	bf00      	nop

08001adc <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ae0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ae2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ae4:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8001ae8:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001aec:	d11d      	bne.n	8001b2a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001aee:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001af4:	65da      	str	r2, [r3, #92]	@ 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001af6:	680a      	ldr	r2, [r1, #0]
 8001af8:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001afc:	68ca      	ldr	r2, [r1, #12]
 8001afe:	d01b      	beq.n	8001b38 <ADC_DMAConvCplt+0x58>
 8001b00:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001b04:	d10d      	bne.n	8001b22 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001b06:	68ca      	ldr	r2, [r1, #12]
 8001b08:	0494      	lsls	r4, r2, #18
 8001b0a:	d40a      	bmi.n	8001b22 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b12:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b16:	04d1      	lsls	r1, r2, #19
 8001b18:	d403      	bmi.n	8001b22 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd94 	bl	8000650 <HAL_ADC_ConvCpltCallback>
}
 8001b28:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b2a:	06d2      	lsls	r2, r2, #27
 8001b2c:	d40a      	bmi.n	8001b44 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b36:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001b38:	0790      	lsls	r0, r2, #30
 8001b3a:	d5e7      	bpl.n	8001b0c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd87 	bl	8000650 <HAL_ADC_ConvCpltCallback>
 8001b42:	e7f1      	b.n	8001b28 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ffc9 	bl	8001adc <HAL_ADC_ErrorCallback>
}
 8001b4a:	bd10      	pop	{r4, pc}

08001b4c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b4c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8001b4e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b50:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b56:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b58:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b60:	f7ff ffbc 	bl	8001adc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b64:	bd08      	pop	{r3, pc}
 8001b66:	bf00      	nop

08001b68 <HAL_ADC_ConfigChannel>:
{
 8001b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8001b6c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8001b70:	b082      	sub	sp, #8
 8001b72:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001b74:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001b76:	f04f 0000 	mov.w	r0, #0
 8001b7a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001b7c:	f000 811e 	beq.w	8001dbc <HAL_ADC_ConfigChannel+0x254>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b80:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b88:	6894      	ldr	r4, [r2, #8]
 8001b8a:	0764      	lsls	r4, r4, #29
 8001b8c:	d467      	bmi.n	8001c5e <HAL_ADC_ConfigChannel+0xf6>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b8e:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b90:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8001b94:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b98:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8001b9c:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b9e:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8001ba2:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001ba6:	f854 500e 	ldr.w	r5, [r4, lr]
 8001baa:	261f      	movs	r6, #31
 8001bac:	fa00 f00c 	lsl.w	r0, r0, ip
 8001bb0:	fa06 fc0c 	lsl.w	ip, r6, ip
 8001bb4:	ea25 0c0c 	bic.w	ip, r5, ip
 8001bb8:	ea40 000c 	orr.w	r0, r0, ip
 8001bbc:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bc0:	6890      	ldr	r0, [r2, #8]
 8001bc2:	0747      	lsls	r7, r0, #29
 8001bc4:	d555      	bpl.n	8001c72 <HAL_ADC_ConfigChannel+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bc6:	6890      	ldr	r0, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bc8:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bca:	6894      	ldr	r4, [r2, #8]
 8001bcc:	07e5      	lsls	r5, r4, #31
 8001bce:	d412      	bmi.n	8001bf6 <HAL_ADC_ConfigChannel+0x8e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bd0:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001bd2:	4cba      	ldr	r4, [pc, #744]	@ (8001ebc <HAL_ADC_ConfigChannel+0x354>)
 8001bd4:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8001bd8:	f006 0718 	and.w	r7, r6, #24
 8001bdc:	40fc      	lsrs	r4, r7
 8001bde:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8001be2:	4004      	ands	r4, r0
 8001be4:	ea25 0507 	bic.w	r5, r5, r7
 8001be8:	432c      	orrs	r4, r5
 8001bea:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bee:	4cb4      	ldr	r4, [pc, #720]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x358>)
 8001bf0:	42a6      	cmp	r6, r4
 8001bf2:	f000 8090 	beq.w	8001d16 <HAL_ADC_ConfigChannel+0x1ae>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bf6:	49b3      	ldr	r1, [pc, #716]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x35c>)
 8001bf8:	4208      	tst	r0, r1
 8001bfa:	d02e      	beq.n	8001c5a <HAL_ADC_ConfigChannel+0xf2>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bfc:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8001c00:	f000 80da 	beq.w	8001db8 <HAL_ADC_ConfigChannel+0x250>
 8001c04:	4db0      	ldr	r5, [pc, #704]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x360>)
 8001c06:	49b1      	ldr	r1, [pc, #708]	@ (8001ecc <HAL_ADC_ConfigChannel+0x364>)
 8001c08:	4cb1      	ldr	r4, [pc, #708]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x368>)
 8001c0a:	42aa      	cmp	r2, r5
 8001c0c:	bf08      	it	eq
 8001c0e:	4621      	moveq	r1, r4
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001c10:	4cb0      	ldr	r4, [pc, #704]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x36c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c12:	6889      	ldr	r1, [r1, #8]
 8001c14:	42a0      	cmp	r0, r4
 8001c16:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 8001c1a:	f000 80d3 	beq.w	8001dc4 <HAL_ADC_ConfigChannel+0x25c>
 8001c1e:	4cae      	ldr	r4, [pc, #696]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x370>)
 8001c20:	42a0      	cmp	r0, r4
 8001c22:	f000 80cf 	beq.w	8001dc4 <HAL_ADC_ConfigChannel+0x25c>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c26:	4cad      	ldr	r4, [pc, #692]	@ (8001edc <HAL_ADC_ConfigChannel+0x374>)
 8001c28:	42a0      	cmp	r0, r4
 8001c2a:	f000 80f4 	beq.w	8001e16 <HAL_ADC_ConfigChannel+0x2ae>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c2e:	4cac      	ldr	r4, [pc, #688]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x378>)
 8001c30:	42a0      	cmp	r0, r4
 8001c32:	d112      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c34:	0249      	lsls	r1, r1, #9
 8001c36:	d410      	bmi.n	8001c5a <HAL_ADC_ConfigChannel+0xf2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c38:	49a3      	ldr	r1, [pc, #652]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x360>)
 8001c3a:	428a      	cmp	r2, r1
 8001c3c:	d00d      	beq.n	8001c5a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c3e:	48a4      	ldr	r0, [pc, #656]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x368>)
 8001c40:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 8001c44:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8001c48:	bf08      	it	eq
 8001c4a:	4601      	moveq	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c4c:	688a      	ldr	r2, [r1, #8]
 8001c4e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001c52:	432a      	orrs	r2, r5
 8001c54:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001c58:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	e003      	b.n	8001c66 <HAL_ADC_ConfigChannel+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c60:	f042 0220 	orr.w	r2, r2, #32
 8001c64:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8001c6c:	b002      	add	sp, #8
 8001c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c72:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c74:	6808      	ldr	r0, [r1, #0]
 8001c76:	0726      	lsls	r6, r4, #28
 8001c78:	d4a7      	bmi.n	8001bca <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c7a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8001c7c:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8001c80:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c82:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8001c84:	40b4      	lsls	r4, r6
 8001c86:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c8a:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8001c8e:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c92:	f102 0714 	add.w	r7, r2, #20
 8001c96:	f000 812d 	beq.w	8001ef4 <HAL_ADC_ConfigChannel+0x38c>
  MODIFY_REG(*preg,
 8001c9a:	40b5      	lsls	r5, r6
 8001c9c:	583e      	ldr	r6, [r7, r0]
 8001c9e:	4034      	ands	r4, r6
 8001ca0:	432c      	orrs	r4, r5
 8001ca2:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ca4:	6950      	ldr	r0, [r2, #20]
 8001ca6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001caa:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cac:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001cb0:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cb2:	68d6      	ldr	r6, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cb4:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb6:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001cba:	4684      	mov	ip, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cbc:	f000 80d6 	beq.w	8001e6c <HAL_ADC_ConfigChannel+0x304>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cc0:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8001cc4:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8001cc6:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8001cca:	40b5      	lsls	r5, r6
 8001ccc:	4e85      	ldr	r6, [pc, #532]	@ (8001ee4 <HAL_ADC_ConfigChannel+0x37c>)
 8001cce:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001cd2:	ea0c 0606 	and.w	r6, ip, r6
 8001cd6:	4306      	orrs	r6, r0
 8001cd8:	4335      	orrs	r5, r6
 8001cda:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8001cde:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce2:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8001ce4:	698e      	ldr	r6, [r1, #24]
 8001ce6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8001cea:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8001cee:	4330      	orrs	r0, r6
 8001cf0:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf4:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001cf6:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8001cf8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8001cfc:	f1a5 0501 	sub.w	r5, r5, #1
 8001d00:	fab5 f585 	clz	r5, r5
 8001d04:	096d      	lsrs	r5, r5, #5
 8001d06:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8001d0a:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8001d0e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d12:	6808      	ldr	r0, [r1, #0]
}
 8001d14:	e759      	b.n	8001bca <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	f000 8092 	beq.w	8001e40 <HAL_ADC_ConfigChannel+0x2d8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d20:	2c00      	cmp	r4, #0
 8001d22:	f000 80ef 	beq.w	8001f04 <HAL_ADC_ConfigChannel+0x39c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001d26:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d2a:	3401      	adds	r4, #1
 8001d2c:	f004 041f 	and.w	r4, r4, #31
 8001d30:	2c09      	cmp	r4, #9
 8001d32:	f240 80e7 	bls.w	8001f04 <HAL_ADC_ConfigChannel+0x39c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001d3a:	2c00      	cmp	r4, #0
 8001d3c:	f000 8186 	beq.w	800204c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d40:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d44:	3401      	adds	r4, #1
 8001d46:	06a4      	lsls	r4, r4, #26
 8001d48:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001d50:	2d00      	cmp	r5, #0
 8001d52:	f000 8180 	beq.w	8002056 <HAL_ADC_ConfigChannel+0x4ee>
  return __builtin_clz(value);
 8001d56:	fab5 f585 	clz	r5, r5
 8001d5a:	3501      	adds	r5, #1
 8001d5c:	f005 051f 	and.w	r5, r5, #31
 8001d60:	2601      	movs	r6, #1
 8001d62:	fa06 f505 	lsl.w	r5, r6, r5
 8001d66:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	f000 8170 	beq.w	8002052 <HAL_ADC_ConfigChannel+0x4ea>
  return __builtin_clz(value);
 8001d72:	fab0 f080 	clz	r0, r0
 8001d76:	1c45      	adds	r5, r0, #1
 8001d78:	f005 051f 	and.w	r5, r5, #31
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f06f 061d 	mvn.w	r6, #29
 8001d82:	fb10 6005 	smlabb	r0, r0, r5, r6
 8001d86:	0500      	lsls	r0, r0, #20
 8001d88:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8c:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d8e:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8001d90:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d92:	f005 0504 	and.w	r5, r5, #4
 8001d96:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8001d9a:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001d9e:	fa04 f700 	lsl.w	r7, r4, r0
 8001da2:	f04f 0c07 	mov.w	ip, #7
 8001da6:	5974      	ldr	r4, [r6, r5]
 8001da8:	fa0c f000 	lsl.w	r0, ip, r0
 8001dac:	ea24 0000 	bic.w	r0, r4, r0
 8001db0:	4338      	orrs	r0, r7
 8001db2:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001db4:	6808      	ldr	r0, [r1, #0]
}
 8001db6:	e71e      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x8e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001db8:	4945      	ldr	r1, [pc, #276]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x368>)
 8001dba:	e729      	b.n	8001c10 <HAL_ADC_ConfigChannel+0xa8>
  __HAL_LOCK(hadc);
 8001dbc:	2002      	movs	r0, #2
}
 8001dbe:	b002      	add	sp, #8
 8001dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dc4:	020c      	lsls	r4, r1, #8
 8001dc6:	f53f af48 	bmi.w	8001c5a <HAL_ADC_ConfigChannel+0xf2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dca:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8001dce:	d04b      	beq.n	8001e68 <HAL_ADC_ConfigChannel+0x300>
 8001dd0:	4945      	ldr	r1, [pc, #276]	@ (8001ee8 <HAL_ADC_ConfigChannel+0x380>)
 8001dd2:	428a      	cmp	r2, r1
 8001dd4:	f47f af41 	bne.w	8001c5a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dd8:	483c      	ldr	r0, [pc, #240]	@ (8001ecc <HAL_ADC_ConfigChannel+0x364>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dda:	4a44      	ldr	r2, [pc, #272]	@ (8001eec <HAL_ADC_ConfigChannel+0x384>)
 8001ddc:	4c44      	ldr	r4, [pc, #272]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x388>)
 8001dde:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001de0:	6881      	ldr	r1, [r0, #8]
 8001de2:	0992      	lsrs	r2, r2, #6
 8001de4:	fba4 4202 	umull	r4, r2, r4, r2
 8001de8:	0992      	lsrs	r2, r2, #6
 8001dea:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8001dee:	3201      	adds	r2, #1
 8001df0:	4329      	orrs	r1, r5
 8001df2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001dfc:	6081      	str	r1, [r0, #8]
 8001dfe:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001e00:	9a01      	ldr	r2, [sp, #4]
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	f43f af29 	beq.w	8001c5a <HAL_ADC_ConfigChannel+0xf2>
            wait_loop_index--;
 8001e08:	9a01      	ldr	r2, [sp, #4]
 8001e0a:	3a01      	subs	r2, #1
 8001e0c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001e0e:	9a01      	ldr	r2, [sp, #4]
 8001e10:	2a00      	cmp	r2, #0
 8001e12:	d1f9      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x2a0>
 8001e14:	e721      	b.n	8001c5a <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e16:	01c8      	lsls	r0, r1, #7
 8001e18:	f53f af1f 	bmi.w	8001c5a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e1c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8001e20:	f000 810a 	beq.w	8002038 <HAL_ADC_ConfigChannel+0x4d0>
 8001e24:	4c28      	ldr	r4, [pc, #160]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x360>)
 8001e26:	4929      	ldr	r1, [pc, #164]	@ (8001ecc <HAL_ADC_ConfigChannel+0x364>)
 8001e28:	4829      	ldr	r0, [pc, #164]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x368>)
 8001e2a:	42a2      	cmp	r2, r4
 8001e2c:	bf08      	it	eq
 8001e2e:	4601      	moveq	r1, r0
 8001e30:	688a      	ldr	r2, [r1, #8]
 8001e32:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001e36:	432a      	orrs	r2, r5
 8001e38:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001e3c:	608a      	str	r2, [r1, #8]
}
 8001e3e:	e70c      	b.n	8001c5a <HAL_ADC_ConfigChannel+0xf2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e40:	0e80      	lsrs	r0, r0, #26
 8001e42:	3001      	adds	r0, #1
 8001e44:	f000 051f 	and.w	r5, r0, #31
 8001e48:	2401      	movs	r4, #1
 8001e4a:	0680      	lsls	r0, r0, #26
 8001e4c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001e50:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e52:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e54:	ea44 0400 	orr.w	r4, r4, r0
 8001e58:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e5c:	d977      	bls.n	8001f4e <HAL_ADC_ConfigChannel+0x3e6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e5e:	381e      	subs	r0, #30
 8001e60:	0500      	lsls	r0, r0, #20
 8001e62:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8001e66:	e791      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x224>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e68:	4819      	ldr	r0, [pc, #100]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x368>)
 8001e6a:	e7b6      	b.n	8001dda <HAL_ADC_ConfigChannel+0x272>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e6c:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8001e6e:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e70:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e74:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e78:	2e00      	cmp	r6, #0
 8001e7a:	d16a      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x3ea>
 8001e7c:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e80:	4285      	cmp	r5, r0
 8001e82:	f000 8097 	beq.w	8001fb4 <HAL_ADC_ConfigChannel+0x44c>
 8001e86:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8001e88:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e8a:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8001e8e:	4285      	cmp	r5, r0
 8001e90:	f000 80a2 	beq.w	8001fd8 <HAL_ADC_ConfigChannel+0x470>
 8001e94:	68a5      	ldr	r5, [r4, #8]
 8001e96:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e98:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e9c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8001ea0:	4285      	cmp	r5, r0
 8001ea2:	f000 80ae 	beq.w	8002002 <HAL_ADC_ConfigChannel+0x49a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ea6:	68e5      	ldr	r5, [r4, #12]
 8001ea8:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eaa:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eae:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8001eb2:	42a0      	cmp	r0, r4
 8001eb4:	f000 80ba 	beq.w	800202c <HAL_ADC_ConfigChannel+0x4c4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001eb8:	4660      	mov	r0, ip
 8001eba:	e686      	b.n	8001bca <HAL_ADC_ConfigChannel+0x62>
 8001ebc:	0007ffff 	.word	0x0007ffff
 8001ec0:	407f0000 	.word	0x407f0000
 8001ec4:	80080000 	.word	0x80080000
 8001ec8:	50000100 	.word	0x50000100
 8001ecc:	50000700 	.word	0x50000700
 8001ed0:	50000300 	.word	0x50000300
 8001ed4:	c3210000 	.word	0xc3210000
 8001ed8:	90c00010 	.word	0x90c00010
 8001edc:	c7520000 	.word	0xc7520000
 8001ee0:	cb840000 	.word	0xcb840000
 8001ee4:	03fff000 	.word	0x03fff000
 8001ee8:	50000600 	.word	0x50000600
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	053e2d63 	.word	0x053e2d63
  MODIFY_REG(*preg,
 8001ef4:	583d      	ldr	r5, [r7, r0]
 8001ef6:	402c      	ands	r4, r5
 8001ef8:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001efa:	6950      	ldr	r0, [r2, #20]
 8001efc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8001f00:	6150      	str	r0, [r2, #20]
}
 8001f02:	e6d3      	b.n	8001cac <HAL_ADC_ConfigChannel+0x144>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001f08:	2c00      	cmp	r4, #0
 8001f0a:	f000 8099 	beq.w	8002040 <HAL_ADC_ConfigChannel+0x4d8>
  return __builtin_clz(value);
 8001f0e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f12:	3401      	adds	r4, #1
 8001f14:	06a4      	lsls	r4, r4, #26
 8001f16:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001f1e:	2d00      	cmp	r5, #0
 8001f20:	f000 808c 	beq.w	800203c <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8001f24:	fab5 f585 	clz	r5, r5
 8001f28:	3501      	adds	r5, #1
 8001f2a:	f005 051f 	and.w	r5, r5, #31
 8001f2e:	2601      	movs	r6, #1
 8001f30:	fa06 f505 	lsl.w	r5, r6, r5
 8001f34:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	f000 8083 	beq.w	8002046 <HAL_ADC_ConfigChannel+0x4de>
  return __builtin_clz(value);
 8001f40:	fab0 f080 	clz	r0, r0
 8001f44:	3001      	adds	r0, #1
 8001f46:	f000 001f 	and.w	r0, r0, #31
 8001f4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001f4e:	0500      	lsls	r0, r0, #20
 8001f50:	e71c      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8001f56:	b11e      	cbz	r6, 8001f60 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8001f58:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f5c:	42b5      	cmp	r5, r6
 8001f5e:	d029      	beq.n	8001fb4 <HAL_ADC_ConfigChannel+0x44c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f60:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8001f62:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f64:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	fa9c f6ac 	rbit	r6, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6c:	f104 0708 	add.w	r7, r4, #8
 8001f70:	46be      	mov	lr, r7
  if (value == 0U)
 8001f72:	b11e      	cbz	r6, 8001f7c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001f74:	fab6 f686 	clz	r6, r6
 8001f78:	42ae      	cmp	r6, r5
 8001f7a:	d02f      	beq.n	8001fdc <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f7c:	68a5      	ldr	r5, [r4, #8]
 8001f7e:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f80:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f88:	f104 060c 	add.w	r6, r4, #12
 8001f8c:	46b0      	mov	r8, r6
  if (value == 0U)
 8001f8e:	f1be 0f00 	cmp.w	lr, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0x434>
  return __builtin_clz(value);
 8001f94:	fabe fe8e 	clz	lr, lr
 8001f98:	45ae      	cmp	lr, r5
 8001f9a:	d034      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x49e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f9c:	68e5      	ldr	r5, [r4, #12]
 8001f9e:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fa0:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	fa9c f5ac 	rbit	r5, ip
  if (value == 0U)
 8001fa8:	2d00      	cmp	r5, #0
 8001faa:	f43f ae0e 	beq.w	8001bca <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8001fae:	fab5 f085 	clz	r0, r5
 8001fb2:	e77e      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x34a>
  MODIFY_REG(*preg,
 8001fb4:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8001fb6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001fba:	6610      	str	r0, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fbc:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fc0:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001fc2:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8001fc4:	f3cc 0612 	ubfx	r6, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fc8:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fcc:	4660      	mov	r0, ip
 8001fce:	2e00      	cmp	r6, #0
 8001fd0:	d1ca      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x400>
 8001fd2:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8001fd6:	e75a      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x326>
 8001fd8:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8001fdc:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001fde:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001fe2:	6650      	str	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fe4:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fe8:	68a0      	ldr	r0, [r4, #8]
 8001fea:	68a5      	ldr	r5, [r4, #8]
 8001fec:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff0:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ff2:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ff6:	4660      	mov	r0, ip
 8001ff8:	2e00      	cmp	r6, #0
 8001ffa:	d1c3      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x41c>
 8001ffc:	f3cc 6084 	ubfx	r0, ip, #26, #5
 8002000:	e74e      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x338>
 8002002:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8002006:	6838      	ldr	r0, [r7, #0]
 8002008:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800200c:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800200e:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002012:	68e0      	ldr	r0, [r4, #12]
 8002014:	68e4      	ldr	r4, [r4, #12]
 8002016:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800201a:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800201c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002020:	4660      	mov	r0, ip
 8002022:	2d00      	cmp	r5, #0
 8002024:	d1be      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x43c>
 8002026:	f3cc 6084 	ubfx	r0, ip, #26, #5
 800202a:	e742      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x34a>
  MODIFY_REG(*preg,
 800202c:	6830      	ldr	r0, [r6, #0]
 800202e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002032:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002034:	6808      	ldr	r0, [r1, #0]
}
 8002036:	e5c8      	b.n	8001bca <HAL_ADC_ConfigChannel+0x62>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002038:	4908      	ldr	r1, [pc, #32]	@ (800205c <HAL_ADC_ConfigChannel+0x4f4>)
 800203a:	e6f9      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x2c8>
 800203c:	2502      	movs	r5, #2
 800203e:	e779      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x3cc>
 8002040:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8002044:	e769      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x3b2>
 8002046:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 800204a:	e69f      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x224>
 800204c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8002050:	e67c      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x1e4>
 8002052:	4803      	ldr	r0, [pc, #12]	@ (8002060 <HAL_ADC_ConfigChannel+0x4f8>)
 8002054:	e69a      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x224>
 8002056:	2502      	movs	r5, #2
 8002058:	e685      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x1fe>
 800205a:	bf00      	nop
 800205c:	50000300 	.word	0x50000300
 8002060:	fe500000 	.word	0xfe500000

08002064 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002064:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	f012 0f04 	tst.w	r2, #4
{
 800206c:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002072:	d101      	bne.n	8002078 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002074:	0716      	lsls	r6, r2, #28
 8002076:	d53c      	bpl.n	80020f2 <ADC_ConversionStop+0x8e>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	0195      	lsls	r5, r2, #6
 800207c:	d504      	bpl.n	8002088 <ADC_ConversionStop+0x24>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800207e:	8ba0      	ldrh	r0, [r4, #28]
 8002080:	f240 1201 	movw	r2, #257	@ 0x101
 8002084:	4290      	cmp	r0, r2
 8002086:	d045      	beq.n	8002114 <ADC_ConversionStop+0xb0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002088:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	d033      	beq.n	80020f6 <ADC_ConversionStop+0x92>
 800208e:	0750      	lsls	r0, r2, #29
 8002090:	d502      	bpl.n	8002098 <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	0792      	lsls	r2, r2, #30
 8002096:	d559      	bpl.n	800214c <ADC_ConversionStop+0xe8>
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002098:	2901      	cmp	r1, #1
 800209a:	d055      	beq.n	8002148 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	0710      	lsls	r0, r2, #28
 80020a0:	d50a      	bpl.n	80020b8 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	0792      	lsls	r2, r2, #30
 80020a6:	d407      	bmi.n	80020b8 <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020ae:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 80020b8:	2903      	cmp	r1, #3
 80020ba:	d145      	bne.n	8002148 <ADC_ConversionStop+0xe4>
 80020bc:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 80020be:	f7ff fbe3 	bl	8001888 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020c2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80020c4:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	421d      	tst	r5, r3
 80020ca:	d012      	beq.n	80020f2 <ADC_ConversionStop+0x8e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80020cc:	f7ff fbdc 	bl	8001888 <HAL_GetTick>
 80020d0:	1b80      	subs	r0, r0, r6
 80020d2:	2805      	cmp	r0, #5
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020d4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80020d6:	d9f6      	bls.n	80020c6 <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	422a      	tst	r2, r5
 80020dc:	d0f3      	beq.n	80020c6 <ADC_ConversionStop+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80020e0:	f043 0310 	orr.w	r3, r3, #16
 80020e4:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6623      	str	r3, [r4, #96]	@ 0x60
          return HAL_ERROR;
 80020ee:	2001      	movs	r0, #1
}
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80020f2:	2000      	movs	r0, #0
}
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020f6:	0716      	lsls	r6, r2, #28
 80020f8:	d50a      	bpl.n	8002110 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	0795      	lsls	r5, r2, #30
 80020fe:	d407      	bmi.n	8002110 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002106:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800210a:	f042 0220 	orr.w	r2, r2, #32
 800210e:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002110:	2508      	movs	r5, #8
 8002112:	e7d4      	b.n	80020be <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	0650      	lsls	r0, r2, #25
 8002118:	d406      	bmi.n	8002128 <ADC_ConversionStop+0xc4>
 800211a:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <ADC_ConversionStop+0xfc>)
 800211c:	e001      	b.n	8002122 <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800211e:	3a01      	subs	r2, #1
 8002120:	d0dd      	beq.n	80020de <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	0649      	lsls	r1, r1, #25
 8002126:	d5fa      	bpl.n	800211e <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002128:	2240      	movs	r2, #64	@ 0x40
 800212a:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	0756      	lsls	r6, r2, #29
 8002130:	d50a      	bpl.n	8002148 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	0795      	lsls	r5, r2, #30
 8002136:	d407      	bmi.n	8002148 <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800213e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002142:	f042 0210 	orr.w	r2, r2, #16
 8002146:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002148:	2504      	movs	r5, #4
 800214a:	e7b8      	b.n	80020be <ADC_ConversionStop+0x5a>
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002152:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002156:	f042 0210 	orr.w	r2, r2, #16
 800215a:	609a      	str	r2, [r3, #8]
}
 800215c:	e79c      	b.n	8002098 <ADC_ConversionStop+0x34>
 800215e:	bf00      	nop
 8002160:	a3400000 	.word	0xa3400000

08002164 <ADC_Enable>:
{
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002168:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800216a:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800216c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	07d2      	lsls	r2, r2, #31
 8002172:	d434      	bmi.n	80021de <ADC_Enable+0x7a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002174:	6899      	ldr	r1, [r3, #8]
 8002176:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <ADC_Enable+0xc8>)
 8002178:	4211      	tst	r1, r2
 800217a:	4604      	mov	r4, r0
 800217c:	d132      	bne.n	80021e4 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002184:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002188:	f042 0201 	orr.w	r2, r2, #1
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800218c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	d048      	beq.n	8002226 <ADC_Enable+0xc2>
 8002194:	4826      	ldr	r0, [pc, #152]	@ (8002230 <ADC_Enable+0xcc>)
 8002196:	4a27      	ldr	r2, [pc, #156]	@ (8002234 <ADC_Enable+0xd0>)
 8002198:	4927      	ldr	r1, [pc, #156]	@ (8002238 <ADC_Enable+0xd4>)
 800219a:	4283      	cmp	r3, r0
 800219c:	bf08      	it	eq
 800219e:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021a0:	6893      	ldr	r3, [r2, #8]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	d429      	bmi.n	80021fa <ADC_Enable+0x96>
    tickstart = HAL_GetTick();
 80021a6:	f7ff fb6f 	bl	8001888 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 80021b0:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021b2:	d414      	bmi.n	80021de <ADC_Enable+0x7a>
  MODIFY_REG(ADCx->CR,
 80021b4:	4e21      	ldr	r6, [pc, #132]	@ (800223c <ADC_Enable+0xd8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	07d0      	lsls	r0, r2, #31
 80021ba:	d404      	bmi.n	80021c6 <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	4032      	ands	r2, r6
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021c6:	f7ff fb5f 	bl	8001888 <HAL_GetTick>
 80021ca:	1b43      	subs	r3, r0, r5
 80021cc:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021ce:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021d0:	d902      	bls.n	80021d8 <ADC_Enable+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	07d1      	lsls	r1, r2, #31
 80021d6:	d505      	bpl.n	80021e4 <ADC_Enable+0x80>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	07d2      	lsls	r2, r2, #31
 80021dc:	d5eb      	bpl.n	80021b6 <ADC_Enable+0x52>
  return HAL_OK;
 80021de:	2000      	movs	r0, #0
}
 80021e0:	b002      	add	sp, #8
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80021e6:	f043 0310 	orr.w	r3, r3, #16
 80021ea:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 80021ee:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6623      	str	r3, [r4, #96]	@ 0x60
}
 80021f6:	b002      	add	sp, #8
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021fa:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <ADC_Enable+0xdc>)
 80021fc:	4a11      	ldr	r2, [pc, #68]	@ (8002244 <ADC_Enable+0xe0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	3301      	adds	r3, #1
 800220a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002212:	9b01      	ldr	r3, [sp, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0c6      	beq.n	80021a6 <ADC_Enable+0x42>
        wait_loop_index--;
 8002218:	9b01      	ldr	r3, [sp, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800221e:	9b01      	ldr	r3, [sp, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <ADC_Enable+0xb4>
 8002224:	e7bf      	b.n	80021a6 <ADC_Enable+0x42>
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <ADC_Enable+0xd4>)
 8002228:	e7ba      	b.n	80021a0 <ADC_Enable+0x3c>
 800222a:	bf00      	nop
 800222c:	8000003f 	.word	0x8000003f
 8002230:	50000100 	.word	0x50000100
 8002234:	50000700 	.word	0x50000700
 8002238:	50000300 	.word	0x50000300
 800223c:	7fffffc0 	.word	0x7fffffc0
 8002240:	20000000 	.word	0x20000000
 8002244:	053e2d63 	.word	0x053e2d63

08002248 <HAL_ADC_Start_DMA>:
{
 8002248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800224c:	6805      	ldr	r5, [r0, #0]
 800224e:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
{
 8002252:	4604      	mov	r4, r0
 8002254:	460e      	mov	r6, r1
 8002256:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002258:	d022      	beq.n	80022a0 <HAL_ADC_Start_DMA+0x58>
 800225a:	4a39      	ldr	r2, [pc, #228]	@ (8002340 <HAL_ADC_Start_DMA+0xf8>)
 800225c:	4839      	ldr	r0, [pc, #228]	@ (8002344 <HAL_ADC_Start_DMA+0xfc>)
 800225e:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <HAL_ADC_Start_DMA+0x100>)
 8002260:	4295      	cmp	r5, r2
 8002262:	bf08      	it	eq
 8002264:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002266:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002268:	68ab      	ldr	r3, [r5, #8]
 800226a:	075b      	lsls	r3, r3, #29
 800226c:	d415      	bmi.n	800229a <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 800226e:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8002272:	2b01      	cmp	r3, #1
 8002274:	d011      	beq.n	800229a <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002276:	4b35      	ldr	r3, [pc, #212]	@ (800234c <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 8002278:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800227a:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800227c:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 8002280:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002284:	d00e      	beq.n	80022a4 <HAL_ADC_Start_DMA+0x5c>
 8002286:	f240 2321 	movw	r3, #545	@ 0x221
 800228a:	fa23 f308 	lsr.w	r3, r3, r8
 800228e:	4003      	ands	r3, r0
 8002290:	d108      	bne.n	80022a4 <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 8002292:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8002296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 800229a:	2002      	movs	r0, #2
}
 800229c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022a0:	4829      	ldr	r0, [pc, #164]	@ (8002348 <HAL_ADC_Start_DMA+0x100>)
 80022a2:	e7e0      	b.n	8002266 <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 80022a4:	4620      	mov	r0, r4
 80022a6:	f7ff ff5d 	bl	8002164 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d13f      	bne.n	800232e <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 80022ae:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b0:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80022b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022be:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <HAL_ADC_Start_DMA+0xf8>)
 80022c2:	4299      	cmp	r1, r3
 80022c4:	d038      	beq.n	8002338 <HAL_ADC_Start_DMA+0xf0>
 80022c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022ca:	4299      	cmp	r1, r3
 80022cc:	d034      	beq.n	8002338 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ce:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80022d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022d4:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022d6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022d8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80022da:	4d1d      	ldr	r5, [pc, #116]	@ (8002350 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022dc:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022e0:	bf1c      	itt	ne
 80022e2:	6e23      	ldrne	r3, [r4, #96]	@ 0x60
 80022e4:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80022e8:	6623      	str	r3, [r4, #96]	@ 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ea:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022ec:	4d19      	ldr	r5, [pc, #100]	@ (8002354 <HAL_ADC_Start_DMA+0x10c>)
 80022ee:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022f0:	4d19      	ldr	r5, [pc, #100]	@ (8002358 <HAL_ADC_Start_DMA+0x110>)
 80022f2:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022f4:	251c      	movs	r5, #28
 80022f6:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 80022f8:	2500      	movs	r5, #0
 80022fa:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022fe:	684d      	ldr	r5, [r1, #4]
 8002300:	f045 0510 	orr.w	r5, r5, #16
 8002304:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002306:	68cd      	ldr	r5, [r1, #12]
 8002308:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800230c:	463b      	mov	r3, r7
 800230e:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002310:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002312:	3140      	adds	r1, #64	@ 0x40
 8002314:	f000 fb4e 	bl	80029b4 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002318:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800231a:	6893      	ldr	r3, [r2, #8]
 800231c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6093      	str	r3, [r2, #8]
}
 800232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800232e:	2300      	movs	r3, #0
 8002330:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8002334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002338:	f1b8 0f00 	cmp.w	r8, #0
 800233c:	d1cb      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x8e>
 800233e:	e7c6      	b.n	80022ce <HAL_ADC_Start_DMA+0x86>
 8002340:	50000100 	.word	0x50000100
 8002344:	50000700 	.word	0x50000700
 8002348:	50000300 	.word	0x50000300
 800234c:	50000600 	.word	0x50000600
 8002350:	08001ae1 	.word	0x08001ae1
 8002354:	08001ad1 	.word	0x08001ad1
 8002358:	08001b4d 	.word	0x08001b4d

0800235c <ADC_Disable>:
{
 800235c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800235e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	0795      	lsls	r5, r2, #30
 8002364:	d502      	bpl.n	800236c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002366:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8002368:	2000      	movs	r0, #0
}
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	07d4      	lsls	r4, r2, #31
 8002370:	d5fa      	bpl.n	8002368 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	f002 020d 	and.w	r2, r2, #13
 8002378:	2a01      	cmp	r2, #1
 800237a:	4604      	mov	r4, r0
 800237c:	d009      	beq.n	8002392 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002380:	f043 0310 	orr.w	r3, r3, #16
 8002384:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002386:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 800238e:	2001      	movs	r0, #1
}
 8002390:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002398:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800239c:	2103      	movs	r1, #3
 800239e:	f042 0202 	orr.w	r2, r2, #2
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80023a6:	f7ff fa6f 	bl	8001888 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80023b0:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023b2:	d403      	bmi.n	80023bc <ADC_Disable+0x60>
 80023b4:	e7d8      	b.n	8002368 <ADC_Disable+0xc>
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	07db      	lsls	r3, r3, #31
 80023ba:	d5d5      	bpl.n	8002368 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023bc:	f7ff fa64 	bl	8001888 <HAL_GetTick>
 80023c0:	1b40      	subs	r0, r0, r5
 80023c2:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023c4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023c6:	d9f6      	bls.n	80023b6 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	07d2      	lsls	r2, r2, #31
 80023cc:	d5f3      	bpl.n	80023b6 <ADC_Disable+0x5a>
 80023ce:	e7d6      	b.n	800237e <ADC_Disable+0x22>

080023d0 <HAL_ADC_Stop_DMA>:
{
 80023d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 80023d2:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d028      	beq.n	800242c <HAL_ADC_Stop_DMA+0x5c>
 80023da:	2301      	movs	r3, #1
 80023dc:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80023e0:	2103      	movs	r1, #3
 80023e2:	4604      	mov	r4, r0
 80023e4:	f7ff fe3e 	bl	8002064 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80023e8:	4605      	mov	r5, r0
 80023ea:	b9d0      	cbnz	r0, 8002422 <HAL_ADC_Stop_DMA+0x52>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023ec:	6823      	ldr	r3, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80023ee:	6d60      	ldr	r0, [r4, #84]	@ 0x54
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	60da      	str	r2, [r3, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80023f8:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80023fc:	2a02      	cmp	r2, #2
 80023fe:	d018      	beq.n	8002432 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	f022 0210 	bic.w	r2, r2, #16
 8002406:	605a      	str	r2, [r3, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff ffa7 	bl	800235c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800240e:	4605      	mov	r5, r0
 8002410:	b938      	cbnz	r0, 8002422 <HAL_ADC_Stop_DMA+0x52>
      ADC_STATE_CLR_SET(hadc->State,
 8002412:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002414:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	65e3      	str	r3, [r4, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8002422:	2300      	movs	r3, #0
 8002424:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8002428:	4628      	mov	r0, r5
 800242a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hadc);
 800242c:	2502      	movs	r5, #2
}
 800242e:	4628      	mov	r0, r5
 8002430:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002432:	f000 fb17 	bl	8002a64 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002436:	4605      	mov	r5, r0
 8002438:	b160      	cbz	r0, 8002454 <HAL_ADC_Stop_DMA+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800243a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800243c:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800243e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002442:	65e3      	str	r3, [r4, #92]	@ 0x5c
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002444:	6853      	ldr	r3, [r2, #4]
 8002446:	f023 0310 	bic.w	r3, r3, #16
      (void)ADC_Disable(hadc);
 800244a:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800244c:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 800244e:	f7ff ff85 	bl	800235c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002452:	e7e6      	b.n	8002422 <HAL_ADC_Stop_DMA+0x52>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002454:	6822      	ldr	r2, [r4, #0]
 8002456:	6853      	ldr	r3, [r2, #4]
 8002458:	f023 0310 	bic.w	r3, r3, #16
 800245c:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 800245e:	e7d3      	b.n	8002408 <HAL_ADC_Stop_DMA+0x38>

08002460 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002460:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002462:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002466:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8002468:	2a01      	cmp	r2, #1
{
 800246a:	b09d      	sub	sp, #116	@ 0x74
  __HAL_LOCK(hadc);
 800246c:	d057      	beq.n	800251e <HAL_ADCEx_MultiModeConfigChannel+0xbe>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800246e:	6802      	ldr	r2, [r0, #0]
 8002470:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002472:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8002474:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002476:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800247a:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 800247c:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002480:	9419      	str	r4, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002482:	d00b      	beq.n	800249c <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8002484:	4d4a      	ldr	r5, [pc, #296]	@ (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002486:	42aa      	cmp	r2, r5
 8002488:	d047      	beq.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0xba>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800248c:	f883 4058 	strb.w	r4, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	f042 0220 	orr.w	r2, r2, #32
 8002494:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002496:	b01d      	add	sp, #116	@ 0x74
 8002498:	bc70      	pop	{r4, r5, r6}
 800249a:	4770      	bx	lr
 800249c:	4845      	ldr	r0, [pc, #276]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800249e:	6880      	ldr	r0, [r0, #8]
 80024a0:	0740      	lsls	r0, r0, #29
 80024a2:	d50b      	bpl.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80024a4:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024a8:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 80024b6:	b01d      	add	sp, #116	@ 0x74
 80024b8:	bc70      	pop	{r4, r5, r6}
 80024ba:	4770      	bx	lr
 80024bc:	6890      	ldr	r0, [r2, #8]
 80024be:	0740      	lsls	r0, r0, #29
 80024c0:	d4f1      	bmi.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024c2:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80024c6:	d02e      	beq.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 80024c8:	483a      	ldr	r0, [pc, #232]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024ca:	4282      	cmp	r2, r0
 80024cc:	d02b      	beq.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d05a      	beq.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024d2:	4839      	ldr	r0, [pc, #228]	@ (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80024d4:	684c      	ldr	r4, [r1, #4]
 80024d6:	6882      	ldr	r2, [r0, #8]
 80024d8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024dc:	4322      	orrs	r2, r4
 80024de:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 80024e2:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80024e6:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024e8:	4a31      	ldr	r2, [pc, #196]	@ (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024ea:	4c34      	ldr	r4, [pc, #208]	@ (80025bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024ec:	6895      	ldr	r5, [r2, #8]
 80024ee:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80024f2:	6892      	ldr	r2, [r2, #8]
 80024f4:	68a4      	ldr	r4, [r4, #8]
 80024f6:	07e4      	lsls	r4, r4, #31
 80024f8:	d40d      	bmi.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024fa:	432a      	orrs	r2, r5
 80024fc:	43d2      	mvns	r2, r2
 80024fe:	f002 0201 	and.w	r2, r2, #1
 8002502:	b142      	cbz	r2, 8002516 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        MODIFY_REG(tmpADC_Common->CCR,
 8002504:	6884      	ldr	r4, [r0, #8]
 8002506:	688a      	ldr	r2, [r1, #8]
 8002508:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 800250c:	4332      	orrs	r2, r6
 800250e:	f021 010f 	bic.w	r1, r1, #15
 8002512:	430a      	orrs	r2, r1
 8002514:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002516:	2000      	movs	r0, #0
 8002518:	e7ca      	b.n	80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 800251a:	4829      	ldr	r0, [pc, #164]	@ (80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 800251c:	e7bf      	b.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 800251e:	2002      	movs	r0, #2
}
 8002520:	b01d      	add	sp, #116	@ 0x74
 8002522:	bc70      	pop	{r4, r5, r6}
 8002524:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002526:	b1b6      	cbz	r6, 8002556 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002528:	4826      	ldr	r0, [pc, #152]	@ (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800252a:	684c      	ldr	r4, [r1, #4]
 800252c:	6882      	ldr	r2, [r0, #8]
 800252e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002532:	4322      	orrs	r2, r4
 8002534:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 8002538:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800253c:	6082      	str	r2, [r0, #8]
 800253e:	481d      	ldr	r0, [pc, #116]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002540:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002544:	6892      	ldr	r2, [r2, #8]
 8002546:	6880      	ldr	r0, [r0, #8]
 8002548:	07c0      	lsls	r0, r0, #31
 800254a:	d4e4      	bmi.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800254c:	43d2      	mvns	r2, r2
 800254e:	481d      	ldr	r0, [pc, #116]	@ (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8002550:	f002 0201 	and.w	r2, r2, #1
 8002554:	e7d5      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002556:	491b      	ldr	r1, [pc, #108]	@ (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8002558:	688a      	ldr	r2, [r1, #8]
 800255a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800255e:	608a      	str	r2, [r1, #8]
 8002560:	4914      	ldr	r1, [pc, #80]	@ (80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002562:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	6889      	ldr	r1, [r1, #8]
 800256a:	07cd      	lsls	r5, r1, #31
 800256c:	d4d3      	bmi.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800256e:	43d2      	mvns	r2, r2
 8002570:	4914      	ldr	r1, [pc, #80]	@ (80025c4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8002572:	f002 0201 	and.w	r2, r2, #1
 8002576:	2a00      	cmp	r2, #0
 8002578:	d0cd      	beq.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800257a:	688a      	ldr	r2, [r1, #8]
 800257c:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8002580:	f022 020f 	bic.w	r2, r2, #15
 8002584:	608a      	str	r2, [r1, #8]
 8002586:	e7c6      	b.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002588:	490b      	ldr	r1, [pc, #44]	@ (80025b8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800258a:	4c09      	ldr	r4, [pc, #36]	@ (80025b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800258c:	688a      	ldr	r2, [r1, #8]
 800258e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002592:	608a      	str	r2, [r1, #8]
 8002594:	68a4      	ldr	r4, [r4, #8]
 8002596:	f8d0 2408 	ldr.w	r2, [r0, #1032]	@ 0x408
 800259a:	f500 60a0 	add.w	r0, r0, #1280	@ 0x500
 800259e:	6880      	ldr	r0, [r0, #8]
 80025a0:	07c5      	lsls	r5, r0, #31
 80025a2:	d4b8      	bmi.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a4:	4322      	orrs	r2, r4
 80025a6:	43d2      	mvns	r2, r2
 80025a8:	f002 0201 	and.w	r2, r2, #1
 80025ac:	e7e3      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80025ae:	bf00      	nop
 80025b0:	50000400 	.word	0x50000400
 80025b4:	50000100 	.word	0x50000100
 80025b8:	50000700 	.word	0x50000700
 80025bc:	50000600 	.word	0x50000600
 80025c0:	50000500 	.word	0x50000500
 80025c4:	50000300 	.word	0x50000300

080025c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c8:	4907      	ldr	r1, [pc, #28]	@ (80025e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80025ca:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ce:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025da:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80025e2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_NVIC_SetPriority+0x70>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f6:	f1c3 0e07 	rsb	lr, r3, #7
 80025fa:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002602:	bf28      	it	cs
 8002604:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002608:	f1bc 0f06 	cmp.w	ip, #6
 800260c:	d91c      	bls.n	8002648 <HAL_NVIC_SetPriority+0x5c>
 800260e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	fa03 f30c 	lsl.w	r3, r3, ip
 800261a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	fa03 f30e 	lsl.w	r3, r3, lr
 8002626:	ea21 0303 	bic.w	r3, r1, r3
 800262a:	fa03 f30c 	lsl.w	r3, r3, ip
 800262e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002632:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002636:	db0a      	blt.n	800264e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002638:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800263c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002640:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002644:	f85d fb04 	ldr.w	pc, [sp], #4
 8002648:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	4694      	mov	ip, r2
 800264c:	e7e7      	b.n	800261e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	4a04      	ldr	r2, [pc, #16]	@ (8002660 <HAL_NVIC_SetPriority+0x74>)
 8002650:	f000 000f 	and.w	r0, r0, #15
 8002654:	4402      	add	r2, r0
 8002656:	7613      	strb	r3, [r2, #24]
 8002658:	f85d fb04 	ldr.w	pc, [sp], #4
 800265c:	e000ed00 	.word	0xe000ed00
 8002660:	e000ecfc 	.word	0xe000ecfc

08002664 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002664:	2800      	cmp	r0, #0
 8002666:	db07      	blt.n	8002678 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002668:	4a04      	ldr	r2, [pc, #16]	@ (800267c <HAL_NVIC_EnableIRQ+0x18>)
 800266a:	0941      	lsrs	r1, r0, #5
 800266c:	2301      	movs	r3, #1
 800266e:	f000 001f 	and.w	r0, r0, #31
 8002672:	4083      	lsls	r3, r0
 8002674:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002680:	3801      	subs	r0, #1
 8002682:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002686:	d301      	bcc.n	800268c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002688:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800268a:	4770      	bx	lr
{
 800268c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002692:	4c07      	ldr	r4, [pc, #28]	@ (80026b0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002694:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800269a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800269e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	6119      	str	r1, [r3, #16]
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80026b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80026b8:	0897      	lsrs	r7, r2, #2
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
  {
    if ((BufferLength % 4U) == 1U)
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80026ba:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80026bc:	d015      	beq.n	80026ea <CRC_Handle_8+0x36>
 80026be:	468c      	mov	ip, r1
 80026c0:	eb01 0687 	add.w	r6, r1, r7, lsl #2
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80026c4:	f89c 3001 	ldrb.w	r3, [ip, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80026c8:	f89c 8000 	ldrb.w	r8, [ip]
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80026cc:	f89c 4003 	ldrb.w	r4, [ip, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80026d0:	f89c e002 	ldrb.w	lr, [ip, #2]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80026d4:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80026d6:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80026da:	4323      	orrs	r3, r4
  for (i = 0U; i < (BufferLength / 4U); i++)
 80026dc:	f10c 0c04 	add.w	ip, ip, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80026e0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  for (i = 0U; i < (BufferLength / 4U); i++)
 80026e4:	45b4      	cmp	ip, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80026e6:	602b      	str	r3, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80026e8:	d1ec      	bne.n	80026c4 <CRC_Handle_8+0x10>
  if ((BufferLength % 4U) != 0U)
 80026ea:	f012 0203 	ands.w	r2, r2, #3
 80026ee:	d00c      	beq.n	800270a <CRC_Handle_8+0x56>
    if ((BufferLength % 4U) == 1U)
 80026f0:	2a01      	cmp	r2, #1
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80026f2:	f811 4027 	ldrb.w	r4, [r1, r7, lsl #2]
 80026f6:	ea4f 0787 	mov.w	r7, r7, lsl #2
    if ((BufferLength % 4U) == 1U)
 80026fa:	d009      	beq.n	8002710 <CRC_Handle_8+0x5c>
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80026fc:	4439      	add	r1, r7
    if ((BufferLength % 4U) == 2U)
 80026fe:	2a02      	cmp	r2, #2
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002700:	784b      	ldrb	r3, [r1, #1]
 8002702:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      *pReg = data;
 8002706:	802b      	strh	r3, [r5, #0]
    if ((BufferLength % 4U) == 2U)
 8002708:	d107      	bne.n	800271a <CRC_Handle_8+0x66>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800270a:	6828      	ldr	r0, [r5, #0]
}
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002710:	702c      	strb	r4, [r5, #0]
  return hcrc->Instance->DR;
 8002712:	6805      	ldr	r5, [r0, #0]
 8002714:	6828      	ldr	r0, [r5, #0]
}
 8002716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800271a:	788b      	ldrb	r3, [r1, #2]
 800271c:	702b      	strb	r3, [r5, #0]
  return hcrc->Instance->DR;
 800271e:	6805      	ldr	r5, [r0, #0]
 8002720:	6828      	ldr	r0, [r5, #0]
}
 8002722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002726:	bf00      	nop

08002728 <HAL_CRC_Init>:
  if (hcrc == NULL)
 8002728:	2800      	cmp	r0, #0
 800272a:	d036      	beq.n	800279a <HAL_CRC_Init+0x72>
{
 800272c:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800272e:	7f43      	ldrb	r3, [r0, #29]
 8002730:	4604      	mov	r4, r0
 8002732:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002736:	b363      	cbz	r3, 8002792 <HAL_CRC_Init+0x6a>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002738:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800273a:	2202      	movs	r2, #2
 800273c:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800273e:	b9f3      	cbnz	r3, 800277e <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	4a17      	ldr	r2, [pc, #92]	@ (80027a0 <HAL_CRC_Init+0x78>)
 8002744:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	f022 0218 	bic.w	r2, r2, #24
 800274c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800274e:	7962      	ldrb	r2, [r4, #5]
 8002750:	b18a      	cbz	r2, 8002776 <HAL_CRC_Init+0x4e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002752:	6922      	ldr	r2, [r4, #16]
 8002754:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	6961      	ldr	r1, [r4, #20]
 800275a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800275e:	430a      	orrs	r2, r1
 8002760:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	69a1      	ldr	r1, [r4, #24]
 8002766:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800276a:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
 800276c:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800276e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8002770:	7761      	strb	r1, [r4, #29]
  return HAL_OK;
 8002772:	2000      	movs	r0, #0
}
 8002774:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002776:	f04f 32ff 	mov.w	r2, #4294967295
 800277a:	611a      	str	r2, [r3, #16]
 800277c:	e7eb      	b.n	8002756 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800277e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002782:	4620      	mov	r0, r4
 8002784:	f000 f84c 	bl	8002820 <HAL_CRCEx_Polynomial_Set>
 8002788:	b908      	cbnz	r0, 800278e <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	e7df      	b.n	800274e <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 800278e:	2001      	movs	r0, #1
}
 8002790:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002792:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8002794:	f7fe fa1e 	bl	8000bd4 <HAL_CRC_MspInit>
 8002798:	e7ce      	b.n	8002738 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 800279a:	2001      	movs	r0, #1
}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	04c11db7 	.word	0x04c11db7

080027a4 <HAL_CRC_Calculate>:
{
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_CRC_DR_RESET(hcrc);
 80027a6:	6805      	ldr	r5, [r0, #0]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80027a8:	2302      	movs	r3, #2
 80027aa:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80027ac:	68ab      	ldr	r3, [r5, #8]
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	60ab      	str	r3, [r5, #8]
  switch (hcrc->InputDataFormat)
 80027b4:	6a03      	ldr	r3, [r0, #32]
 80027b6:	2b02      	cmp	r3, #2
{
 80027b8:	4606      	mov	r6, r0
 80027ba:	468c      	mov	ip, r1
 80027bc:	4617      	mov	r7, r2
  switch (hcrc->InputDataFormat)
 80027be:	d007      	beq.n	80027d0 <HAL_CRC_Calculate+0x2c>
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d022      	beq.n	800280a <HAL_CRC_Calculate+0x66>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d01b      	beq.n	8002800 <HAL_CRC_Calculate+0x5c>
  hcrc->State = HAL_CRC_STATE_READY;
 80027c8:	2301      	movs	r3, #1
 80027ca:	7773      	strb	r3, [r6, #29]
  switch (hcrc->InputDataFormat)
 80027cc:	2000      	movs	r0, #0
}
 80027ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80027d0:	0851      	lsrs	r1, r2, #1
 80027d2:	d00c      	beq.n	80027ee <HAL_CRC_Calculate+0x4a>
 80027d4:	2300      	movs	r3, #0
 80027d6:	f10c 0002 	add.w	r0, ip, #2
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80027da:	f83c 2023 	ldrh.w	r2, [ip, r3, lsl #2]
 80027de:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80027e2:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80027e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 80027e8:	428b      	cmp	r3, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80027ea:	602c      	str	r4, [r5, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80027ec:	d1f5      	bne.n	80027da <HAL_CRC_Calculate+0x36>
  }
  if ((BufferLength % 2U) != 0U)
 80027ee:	07fb      	lsls	r3, r7, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 80027f0:	bf44      	itt	mi
 80027f2:	f83c 3021 	ldrhmi.w	r3, [ip, r1, lsl #2]
 80027f6:	802b      	strhmi	r3, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80027f8:	2301      	movs	r3, #1
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80027fa:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80027fc:	7773      	strb	r3, [r6, #29]
}
 80027fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002800:	f7ff ff58 	bl	80026b4 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 8002804:	2301      	movs	r3, #1
 8002806:	7773      	strb	r3, [r6, #29]
}
 8002808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (index = 0U; index < BufferLength; index++)
 800280a:	2a00      	cmp	r2, #0
 800280c:	d0f4      	beq.n	80027f8 <HAL_CRC_Calculate+0x54>
 800280e:	3904      	subs	r1, #4
 8002810:	eb01 0782 	add.w	r7, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 8002814:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8002818:	602b      	str	r3, [r5, #0]
      for (index = 0U; index < BufferLength; index++)
 800281a:	42b9      	cmp	r1, r7
 800281c:	d1fa      	bne.n	8002814 <HAL_CRC_Calculate+0x70>
 800281e:	e7eb      	b.n	80027f8 <HAL_CRC_Calculate+0x54>

08002820 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002820:	07cb      	lsls	r3, r1, #31
 8002822:	d51a      	bpl.n	800285a <HAL_CRCEx_Polynomial_Set+0x3a>
{
 8002824:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002826:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002828:	3b01      	subs	r3, #1
 800282a:	1c5c      	adds	r4, r3, #1
 800282c:	fa21 fc03 	lsr.w	ip, r1, r3
 8002830:	d015      	beq.n	800285e <HAL_CRCEx_Polynomial_Set+0x3e>
 8002832:	f01c 0f01 	tst.w	ip, #1
 8002836:	d0f7      	beq.n	8002828 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8002838:	2a18      	cmp	r2, #24
 800283a:	d811      	bhi.n	8002860 <HAL_CRCEx_Polynomial_Set+0x40>
 800283c:	e8df f002 	tbb	[pc, r2]
 8002840:	10101016 	.word	0x10101016
 8002844:	10101010 	.word	0x10101010
 8002848:	10101024 	.word	0x10101024
 800284c:	10101010 	.word	0x10101010
 8002850:	10101021 	.word	0x10101021
 8002854:	10101010 	.word	0x10101010
 8002858:	14          	.byte	0x14
 8002859:	00          	.byte	0x00
 800285a:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800285c:	4770      	bx	lr
    switch (PolyLength)
 800285e:	b12a      	cbz	r2, 800286c <HAL_CRCEx_Polynomial_Set+0x4c>
 8002860:	2001      	movs	r0, #1
}
 8002862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002866:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
 8002868:	2b06      	cmp	r3, #6
 800286a:	d8f9      	bhi.n	8002860 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800286c:	6804      	ldr	r4, [r0, #0]
 800286e:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002870:	68a3      	ldr	r3, [r4, #8]
 8002872:	f023 0318 	bic.w	r3, r3, #24
 8002876:	4313      	orrs	r3, r2
 8002878:	2000      	movs	r0, #0
 800287a:	60a3      	str	r3, [r4, #8]
}
 800287c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002880:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
 8002882:	2b07      	cmp	r3, #7
 8002884:	d9f2      	bls.n	800286c <HAL_CRCEx_Polynomial_Set+0x4c>
 8002886:	e7eb      	b.n	8002860 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
 8002888:	2b0f      	cmp	r3, #15
 800288a:	d9ef      	bls.n	800286c <HAL_CRCEx_Polynomial_Set+0x4c>
 800288c:	e7e8      	b.n	8002860 <HAL_CRCEx_Polynomial_Set+0x40>
 800288e:	bf00      	nop

08002890 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002890:	2800      	cmp	r0, #0
 8002892:	d076      	beq.n	8002982 <HAL_DMA_Init+0xf2>
{
 8002894:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002896:	4a3c      	ldr	r2, [pc, #240]	@ (8002988 <HAL_DMA_Init+0xf8>)
 8002898:	6804      	ldr	r4, [r0, #0]
 800289a:	4294      	cmp	r4, r2
 800289c:	4603      	mov	r3, r0
 800289e:	d95c      	bls.n	800295a <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80028a0:	493a      	ldr	r1, [pc, #232]	@ (800298c <HAL_DMA_Init+0xfc>)
 80028a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002990 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 80028a4:	483b      	ldr	r0, [pc, #236]	@ (8002994 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80028a6:	4421      	add	r1, r4
 80028a8:	fba2 2101 	umull	r2, r1, r2, r1
 80028ac:	0909      	lsrs	r1, r1, #4
 80028ae:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b0:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028b2:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 80028b8:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028ba:	4e35      	ldr	r6, [pc, #212]	@ (8002990 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028bc:	4f36      	ldr	r7, [pc, #216]	@ (8002998 <HAL_DMA_Init+0x108>)
 80028be:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c2:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 80028c4:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c6:	4302      	orrs	r2, r0
 80028c8:	6958      	ldr	r0, [r3, #20]
 80028ca:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028cc:	6998      	ldr	r0, [r3, #24]
 80028ce:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 80028d0:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028d2:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d6:	69d8      	ldr	r0, [r3, #28]
 80028d8:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028da:	b2e0      	uxtb	r0, r4
 80028dc:	3808      	subs	r0, #8
 80028de:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e2:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028e4:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e8:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 80028ea:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 80028ee:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028f0:	4e25      	ldr	r6, [pc, #148]	@ (8002988 <HAL_DMA_Init+0xf8>)
 80028f2:	4a2a      	ldr	r2, [pc, #168]	@ (800299c <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80028f4:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028f8:	42b4      	cmp	r4, r6
 80028fa:	bf98      	it	ls
 80028fc:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80028fe:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002902:	2401      	movs	r4, #1
 8002904:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002908:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800290a:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800290e:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002912:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002914:	649e      	str	r6, [r3, #72]	@ 0x48
 8002916:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800291a:	d027      	beq.n	800296c <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800291c:	685e      	ldr	r6, [r3, #4]
 800291e:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002920:	3e01      	subs	r6, #1
 8002922:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002924:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002928:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800292c:	d824      	bhi.n	8002978 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800292e:	4a1c      	ldr	r2, [pc, #112]	@ (80029a0 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002930:	481c      	ldr	r0, [pc, #112]	@ (80029a4 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002932:	442a      	add	r2, r5
 8002934:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002936:	3d01      	subs	r5, #1
 8002938:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800293a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800293c:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002940:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002942:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002944:	4a18      	ldr	r2, [pc, #96]	@ (80029a8 <HAL_DMA_Init+0x118>)
 8002946:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002948:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800294a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800294c:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800294e:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8002952:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8002956:	bcf0      	pop	{r4, r5, r6, r7}
 8002958:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800295a:	4914      	ldr	r1, [pc, #80]	@ (80029ac <HAL_DMA_Init+0x11c>)
 800295c:	4a0c      	ldr	r2, [pc, #48]	@ (8002990 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 800295e:	4814      	ldr	r0, [pc, #80]	@ (80029b0 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002960:	4421      	add	r1, r4
 8002962:	fba2 2101 	umull	r2, r1, r2, r1
 8002966:	0909      	lsrs	r1, r1, #4
 8002968:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 800296a:	e7a1      	b.n	80028b0 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800296c:	2400      	movs	r4, #0
 800296e:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002970:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002974:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8002978:	2200      	movs	r2, #0
 800297a:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800297e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002980:	e7e2      	b.n	8002948 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8002982:	2001      	movs	r0, #1
}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40020407 	.word	0x40020407
 800298c:	bffdfbf8 	.word	0xbffdfbf8
 8002990:	cccccccd 	.word	0xcccccccd
 8002994:	40020400 	.word	0x40020400
 8002998:	40020800 	.word	0x40020800
 800299c:	40020820 	.word	0x40020820
 80029a0:	1000823f 	.word	0x1000823f
 80029a4:	40020940 	.word	0x40020940
 80029a8:	40020900 	.word	0x40020900
 80029ac:	bffdfff8 	.word	0xbffdfff8
 80029b0:	40020000 	.word	0x40020000

080029b4 <HAL_DMA_Start_IT>:
{
 80029b4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80029b6:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 80029ba:	2c01      	cmp	r4, #1
 80029bc:	d009      	beq.n	80029d2 <HAL_DMA_Start_IT+0x1e>
 80029be:	2401      	movs	r4, #1
 80029c0:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80029c4:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 80029c8:	2c01      	cmp	r4, #1
 80029ca:	d005      	beq.n	80029d8 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80029cc:	2300      	movs	r3, #0
 80029ce:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 80029d2:	2002      	movs	r0, #2
}
 80029d4:	bcf0      	pop	{r4, r5, r6, r7}
 80029d6:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80029d8:	2402      	movs	r4, #2
 80029da:	f880 4025 	strb.w	r4, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029de:	2400      	movs	r4, #0
 80029e0:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80029e2:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029e4:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 80029e6:	6825      	ldr	r5, [r4, #0]
 80029e8:	f025 0501 	bic.w	r5, r5, #1
 80029ec:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ee:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	@ 0x50
 80029f2:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80029f4:	b115      	cbz	r5, 80029fc <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f6:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	@ 0x58
 80029fa:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029fc:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 80029fe:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8002a00:	f006 0c1f 	and.w	ip, r6, #31
 8002a04:	2601      	movs	r6, #1
 8002a06:	fa06 f60c 	lsl.w	r6, r6, ip
 8002a0a:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002a0c:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a0e:	6883      	ldr	r3, [r0, #8]
 8002a10:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8002a12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8002a14:	bf0b      	itete	eq
 8002a16:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8002a18:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002a1a:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8002a1c:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8002a1e:	b1bb      	cbz	r3, 8002a50 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	f043 030e 	orr.w	r3, r3, #14
 8002a26:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a28:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	03d2      	lsls	r2, r2, #15
 8002a2e:	d503      	bpl.n	8002a38 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a36:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002a38:	b11d      	cbz	r5, 8002a42 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a3a:	682b      	ldr	r3, [r5, #0]
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a40:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002a4a:	6023      	str	r3, [r4, #0]
}
 8002a4c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a4e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	f043 030a 	orr.w	r3, r3, #10
 8002a5e:	6023      	str	r3, [r4, #0]
 8002a60:	e7e2      	b.n	8002a28 <HAL_DMA_Start_IT+0x74>
 8002a62:	bf00      	nop

08002a64 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a64:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002a68:	2a02      	cmp	r2, #2
{
 8002a6a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a6c:	d009      	beq.n	8002a82 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6e:	2204      	movs	r2, #4
 8002a70:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002a72:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8002a74:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8002a76:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8002a78:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8002a7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002a80:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a82:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a84:	6c59      	ldr	r1, [r3, #68]	@ 0x44
{
 8002a86:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a88:	6c84      	ldr	r4, [r0, #72]	@ 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a8a:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a8c:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a8e:	f020 000e 	bic.w	r0, r0, #14
 8002a92:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a94:	6820      	ldr	r0, [r4, #0]
 8002a96:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8002a9a:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8002a9c:	6810      	ldr	r0, [r2, #0]
 8002a9e:	f020 0001 	bic.w	r0, r0, #1
 8002aa2:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aa4:	f001 011f 	and.w	r1, r1, #31
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aac:	e9d3 4114 	ldrd	r4, r1, [r3, #80]	@ 0x50
 8002ab0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ab2:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ab4:	6044      	str	r4, [r0, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8002ab6:	b131      	cbz	r1, 8002ac6 <HAL_DMA_Abort+0x62>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ab8:	680a      	ldr	r2, [r1, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aba:	e9d3 0416 	ldrd	r0, r4, [r3, #88]	@ 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002abe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ac2:	600a      	str	r2, [r1, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ac4:	6044      	str	r4, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8002ac8:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002aca:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8002ad2:	2000      	movs	r0, #0
}
 8002ad4:	bc30      	pop	{r4, r5}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_DMA_Abort_IT>:
{
 8002ad8:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ada:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d009      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae4:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8002ae6:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae8:	63c1      	str	r1, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002aea:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002aee:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    status = HAL_ERROR;
 8002af2:	4618      	mov	r0, r3
}
 8002af4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af6:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002af8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002afa:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002afc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002afe:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b00:	f021 010e 	bic.w	r1, r1, #14
 8002b04:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002b06:	6819      	ldr	r1, [r3, #0]
 8002b08:	f021 0101 	bic.w	r1, r1, #1
 8002b0c:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b0e:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b10:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b16:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b18:	f002 021f 	and.w	r2, r2, #31
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b20:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	@ 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b24:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b26:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002b28:	b132      	cbz	r2, 8002b38 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b2a:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b2c:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	@ 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b34:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b36:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8002b38:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8002b3c:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002b42:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8002b46:	b103      	cbz	r3, 8002b4a <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8002b48:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002b4a:	2000      	movs	r0, #0
}
 8002b4c:	bd38      	pop	{r3, r4, r5, pc}
 8002b4e:	bf00      	nop

08002b50 <HAL_DMA_IRQHandler>:
{
 8002b50:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002b52:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b54:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8002b56:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b58:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002b5a:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2204      	movs	r2, #4
 8002b62:	409a      	lsls	r2, r3
 8002b64:	420a      	tst	r2, r1
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x36>
 8002b68:	f014 0f04 	tst.w	r4, #4
 8002b6c:	d00b      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b6e:	682b      	ldr	r3, [r5, #0]
 8002b70:	069b      	lsls	r3, r3, #26
 8002b72:	d403      	bmi.n	8002b7c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	f023 0304 	bic.w	r3, r3, #4
 8002b7a:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8002b7c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b7e:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002b80:	b1cb      	cbz	r3, 8002bb6 <HAL_DMA_IRQHandler+0x66>
}
 8002b82:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002b84:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002b86:	2202      	movs	r2, #2
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	420a      	tst	r2, r1
 8002b8c:	d015      	beq.n	8002bba <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8002b8e:	f014 0f02 	tst.w	r4, #2
 8002b92:	d012      	beq.n	8002bba <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b94:	682b      	ldr	r3, [r5, #0]
 8002b96:	0699      	lsls	r1, r3, #26
 8002b98:	d406      	bmi.n	8002ba8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b9a:	682b      	ldr	r3, [r5, #0]
 8002b9c:	f023 030a 	bic.w	r3, r3, #10
 8002ba0:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8002ba8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002baa:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8002bac:	2100      	movs	r1, #0
 8002bae:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e5      	bne.n	8002b82 <HAL_DMA_IRQHandler+0x32>
}
 8002bb6:	bc70      	pop	{r4, r5, r6}
 8002bb8:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002bba:	2208      	movs	r2, #8
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	420a      	tst	r2, r1
 8002bc0:	d0f9      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8002bc2:	0722      	lsls	r2, r4, #28
 8002bc4:	d5f7      	bpl.n	8002bb6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc6:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8002bc8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bca:	f022 020e 	bic.w	r2, r2, #14
 8002bce:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8002bd6:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bd8:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bda:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002bdc:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002be0:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8002be4:	2900      	cmp	r1, #0
 8002be6:	d0e6      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x66>
}
 8002be8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002bea:	4708      	bx	r1

08002bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bf0:	680c      	ldr	r4, [r1, #0]
{
 8002bf2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bf4:	2c00      	cmp	r4, #0
 8002bf6:	f000 8089 	beq.w	8002d0c <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8002bfa:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bfc:	f04f 0b01 	mov.w	fp, #1
 8002c00:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8002c04:	ea1e 0a04 	ands.w	sl, lr, r4
 8002c08:	d07b      	beq.n	8002d02 <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c0a:	684d      	ldr	r5, [r1, #4]
 8002c0c:	f005 0203 	and.w	r2, r5, #3
 8002c10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c14:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c16:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c1a:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c1e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c22:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c26:	d974      	bls.n	8002d12 <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c28:	2a03      	cmp	r2, #3
 8002c2a:	f040 80b0 	bne.w	8002d8e <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2e:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8002c32:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c36:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c3a:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c3c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002c40:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c42:	d05e      	beq.n	8002d02 <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c44:	4f66      	ldr	r7, [pc, #408]	@ (8002de0 <HAL_GPIO_Init+0x1f4>)
 8002c46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	663a      	str	r2, [r7, #96]	@ 0x60
 8002c4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c50:	f002 0201 	and.w	r2, r2, #1
 8002c54:	9203      	str	r2, [sp, #12]
 8002c56:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c58:	f023 0203 	bic.w	r2, r3, #3
 8002c5c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8002c60:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c64:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c68:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c6a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002c6e:	260f      	movs	r6, #15
 8002c70:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c74:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c78:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c7c:	d01d      	beq.n	8002cba <HAL_GPIO_Init+0xce>
 8002c7e:	4e59      	ldr	r6, [pc, #356]	@ (8002de4 <HAL_GPIO_Init+0x1f8>)
 8002c80:	42b0      	cmp	r0, r6
 8002c82:	f000 8097 	beq.w	8002db4 <HAL_GPIO_Init+0x1c8>
 8002c86:	4e58      	ldr	r6, [pc, #352]	@ (8002de8 <HAL_GPIO_Init+0x1fc>)
 8002c88:	42b0      	cmp	r0, r6
 8002c8a:	f000 809a 	beq.w	8002dc2 <HAL_GPIO_Init+0x1d6>
 8002c8e:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8002df0 <HAL_GPIO_Init+0x204>
 8002c92:	4570      	cmp	r0, lr
 8002c94:	f000 8087 	beq.w	8002da6 <HAL_GPIO_Init+0x1ba>
 8002c98:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8002df4 <HAL_GPIO_Init+0x208>
 8002c9c:	4570      	cmp	r0, lr
 8002c9e:	f000 8097 	beq.w	8002dd0 <HAL_GPIO_Init+0x1e4>
 8002ca2:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8002df8 <HAL_GPIO_Init+0x20c>
 8002ca6:	4570      	cmp	r0, lr
 8002ca8:	bf0c      	ite	eq
 8002caa:	f04f 0e05 	moveq.w	lr, #5
 8002cae:	f04f 0e06 	movne.w	lr, #6
 8002cb2:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002cb6:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cba:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002dec <HAL_GPIO_Init+0x200>)
 8002cbe:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc0:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8002cc2:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002cc6:	4e49      	ldr	r6, [pc, #292]	@ (8002dec <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8002cc8:	bf54      	ite	pl
 8002cca:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002ccc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8002cd0:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8002cd2:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd4:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002cd6:	4e45      	ldr	r6, [pc, #276]	@ (8002dec <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8002cd8:	bf54      	ite	pl
 8002cda:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002cdc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8002ce0:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8002ce2:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce4:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002ce6:	4e41      	ldr	r6, [pc, #260]	@ (8002dec <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8002ce8:	bf54      	ite	pl
 8002cea:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002cec:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8002cf0:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cf2:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf4:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002cf6:	4d3d      	ldr	r5, [pc, #244]	@ (8002dec <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8002cf8:	bf54      	ite	pl
 8002cfa:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002cfc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8002d00:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8002d02:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d04:	fa34 f203 	lsrs.w	r2, r4, r3
 8002d08:	f47f af7a 	bne.w	8002c00 <HAL_GPIO_Init+0x14>
  }
}
 8002d0c:	b005      	add	sp, #20
 8002d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002d12:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d16:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d18:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d1c:	fa06 f80c 	lsl.w	r8, r6, ip
 8002d20:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8002d24:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d28:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d2e:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d32:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8002d36:	fa0e fe03 	lsl.w	lr, lr, r3
 8002d3a:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8002d3e:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8002d42:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d46:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d4a:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d4e:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d52:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002d54:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d58:	f47f af69 	bne.w	8002c2e <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d5c:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8002d5e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d62:	f003 0e07 	and.w	lr, r3, #7
 8002d66:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002d6a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d6e:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8002d72:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d76:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d78:	260f      	movs	r6, #15
 8002d7a:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d7e:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d80:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d84:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002d88:	f8c8 e020 	str.w	lr, [r8, #32]
 8002d8c:	e74f      	b.n	8002c2e <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 8002d8e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d92:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d94:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d98:	fa06 fe0c 	lsl.w	lr, r6, ip
 8002d9c:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8002da0:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da4:	e743      	b.n	8002c2e <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002da6:	f04f 0e03 	mov.w	lr, #3
 8002daa:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002dae:	ea47 070c 	orr.w	r7, r7, ip
 8002db2:	e782      	b.n	8002cba <HAL_GPIO_Init+0xce>
 8002db4:	f04f 0e01 	mov.w	lr, #1
 8002db8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002dbc:	ea47 070c 	orr.w	r7, r7, ip
 8002dc0:	e77b      	b.n	8002cba <HAL_GPIO_Init+0xce>
 8002dc2:	f04f 0e02 	mov.w	lr, #2
 8002dc6:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002dca:	ea47 070c 	orr.w	r7, r7, ip
 8002dce:	e774      	b.n	8002cba <HAL_GPIO_Init+0xce>
 8002dd0:	f04f 0e04 	mov.w	lr, #4
 8002dd4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002dd8:	ea47 070c 	orr.w	r7, r7, ip
 8002ddc:	e76d      	b.n	8002cba <HAL_GPIO_Init+0xce>
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	48000400 	.word	0x48000400
 8002de8:	48000800 	.word	0x48000800
 8002dec:	40010400 	.word	0x40010400
 8002df0:	48000c00 	.word	0x48000c00
 8002df4:	48001000 	.word	0x48001000
 8002df8:	48001400 	.word	0x48001400

08002dfc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002dfc:	6903      	ldr	r3, [r0, #16]
 8002dfe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002e00:	bf14      	ite	ne
 8002e02:	2001      	movne	r0, #1
 8002e04:	2000      	moveq	r0, #0
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e08:	b10a      	cbz	r2, 8002e0e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e0a:	6181      	str	r1, [r0, #24]
 8002e0c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop

08002e14 <I2C_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8002e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                                                    uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	0414      	lsls	r4, r2, #16
 8002e1e:	f140 808a 	bpl.w	8002f36 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x122>
 8002e22:	4604      	mov	r4, r0
 8002e24:	4688      	mov	r8, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e26:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e2a:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e2c:	f016 0610 	ands.w	r6, r6, #16
 8002e30:	f000 8084 	beq.w	8002f3c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x128>
  uint32_t error_code = 0;
 8002e34:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e36:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 8002e3a:	4645      	mov	r5, r8
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	4637      	mov	r7, r6

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	0692      	lsls	r2, r2, #26
 8002e42:	d429      	bmi.n	8002e98 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x84>
 8002e44:	bb5f      	cbnz	r7, 8002e9e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7fe fd1f 	bl	8001888 <HAL_GetTick>
 8002e4a:	1b40      	subs	r0, r0, r5
 8002e4c:	2819      	cmp	r0, #25
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e4e:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e50:	d9f5      	bls.n	8002e3e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e52:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002e54:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e58:	6999      	ldr	r1, [r3, #24]
 8002e5a:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8002e5c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e5e:	d50b      	bpl.n	8002e78 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
 8002e60:	0440      	lsls	r0, r0, #17
 8002e62:	d409      	bmi.n	8002e78 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 8002e64:	2a20      	cmp	r2, #32
 8002e66:	d007      	beq.n	8002e78 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e6e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e70:	f7fe fd0a 	bl	8001888 <HAL_GetTick>
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002e76:	4605      	mov	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	0691      	lsls	r1, r2, #26
 8002e7c:	d4df      	bmi.n	8002e3e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e7e:	f7fe fd03 	bl	8001888 <HAL_GetTick>
 8002e82:	1b40      	subs	r0, r0, r5
 8002e84:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e86:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e88:	d9f6      	bls.n	8002e78 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	0692      	lsls	r2, r2, #26
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	f04f 0620 	mov.w	r6, #32

              status = HAL_ERROR;
 8002e92:	f04f 0701 	mov.w	r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e96:	d5d5      	bpl.n	8002e44 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x30>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e98:	b90f      	cbnz	r7, 8002e9e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e9e:	f046 0604 	orr.w	r6, r6, #4

    status = HAL_ERROR;
 8002ea2:	2501      	movs	r5, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ea4:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ea6:	05d7      	lsls	r7, r2, #23
 8002ea8:	d531      	bpl.n	8002f0e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xfa>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eaa:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eae:	0550      	lsls	r0, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eb0:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002eb2:	f046 0601 	orr.w	r6, r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eb6:	d504      	bpl.n	8002ec2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xae>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ebc:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002ebe:	f046 0608 	orr.w	r6, r6, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ec2:	0592      	lsls	r2, r2, #22
 8002ec4:	d504      	bpl.n	8002ed0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002eca:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ece:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	0795      	lsls	r5, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002ed4:	bf44      	itt	mi
 8002ed6:	2200      	movmi	r2, #0
 8002ed8:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	07d0      	lsls	r0, r2, #31
 8002ede:	d403      	bmi.n	8002ee8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	481a      	ldr	r0, [pc, #104]	@ (8002f54 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x140>)
 8002eec:	4002      	ands	r2, r0
 8002eee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002ef0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8002ef6:	4333      	orrs	r3, r6
 8002ef8:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efe:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002f08:	2001      	movs	r0, #1
}
 8002f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f0e:	0551      	lsls	r1, r2, #21
 8002f10:	d4d2      	bmi.n	8002eb8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa4>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f12:	0597      	lsls	r7, r2, #22
 8002f14:	d4d7      	bmi.n	8002ec6 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb2>
  if (status != HAL_OK)
 8002f16:	2d00      	cmp	r5, #0
 8002f18:	d1da      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7fe fcb5 	bl	8001888 <HAL_GetTick>
 8002f1e:	eba0 0008 	sub.w	r0, r0, r8
 8002f22:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f24:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	d902      	bls.n	8002f2e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x11a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	0411      	lsls	r1, r2, #16
 8002f2c:	d408      	bmi.n	8002f40 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	0412      	lsls	r2, r2, #16
 8002f32:	f53f af7a 	bmi.w	8002e2a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x16>
  return HAL_OK;
 8002f36:	2000      	movs	r0, #0
}
 8002f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	4635      	mov	r5, r6
 8002f3e:	e7b1      	b.n	8002ea4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x90>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f40:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	2220      	movs	r2, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	4313      	orrs	r3, r2
 8002f46:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4c:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
          return HAL_ERROR;
 8002f50:	e7d7      	b.n	8002f02 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xee>
 8002f52:	bf00      	nop
 8002f54:	fe00e800 	.word	0xfe00e800

08002f58 <I2C_WaitOnFlagUntilTimeout>:
{
 8002f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f5c:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f5e:	6800      	ldr	r0, [r0, #0]
{
 8002f60:	4688      	mov	r8, r1
 8002f62:	4617      	mov	r7, r2
 8002f64:	461e      	mov	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f66:	f04f 0a10 	mov.w	sl, #16
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6a:	6983      	ldr	r3, [r0, #24]
 8002f6c:	ea38 0303 	bics.w	r3, r8, r3
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	42bb      	cmp	r3, r7
 8002f78:	d16a      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xf8>
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f7a:	6984      	ldr	r4, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f7c:	f014 0410 	ands.w	r4, r4, #16
 8002f80:	d064      	beq.n	800304c <I2C_WaitOnFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f82:	1c71      	adds	r1, r6, #1
 8002f84:	f8c0 a01c 	str.w	sl, [r0, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f88:	d165      	bne.n	8003056 <I2C_WaitOnFlagUntilTimeout+0xfe>
 8002f8a:	6983      	ldr	r3, [r0, #24]
 8002f8c:	069a      	lsls	r2, r3, #26
 8002f8e:	d5fc      	bpl.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x32>
  uint32_t error_code = 0;
 8002f90:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f92:	2320      	movs	r3, #32
 8002f94:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002f96:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8002f9a:	2201      	movs	r2, #1
  itflag = hi2c->Instance->ISR;
 8002f9c:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f9e:	05d9      	lsls	r1, r3, #23
 8002fa0:	d531      	bpl.n	8003006 <I2C_WaitOnFlagUntilTimeout+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fa6:	055e      	lsls	r6, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fa8:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002faa:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fae:	d504      	bpl.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fb4:	61c2      	str	r2, [r0, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002fb6:	f044 0408 	orr.w	r4, r4, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002fba:	059a      	lsls	r2, r3, #22
 8002fbc:	d504      	bpl.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002fc2:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fc6:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fc8:	6983      	ldr	r3, [r0, #24]
 8002fca:	0799      	lsls	r1, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8002fcc:	bf44      	itt	mi
 8002fce:	2300      	movmi	r3, #0
 8002fd0:	6283      	strmi	r3, [r0, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd2:	6983      	ldr	r3, [r0, #24]
 8002fd4:	07da      	lsls	r2, r3, #31
 8002fd6:	d403      	bmi.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x88>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fd8:	6983      	ldr	r3, [r0, #24]
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6183      	str	r3, [r0, #24]
    I2C_RESET_CR2(hi2c);
 8002fe0:	6843      	ldr	r3, [r0, #4]
 8002fe2:	4a3b      	ldr	r2, [pc, #236]	@ (80030d0 <I2C_WaitOnFlagUntilTimeout+0x178>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= error_code;
 8002fe8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8002fee:	4323      	orrs	r3, r4
 8002ff0:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8003000:	2001      	movs	r0, #1
}
 8003002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003006:	0559      	lsls	r1, r3, #21
 8003008:	d4d2      	bmi.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800300a:	059b      	lsls	r3, r3, #22
 800300c:	d4d7      	bmi.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x66>
  if (status != HAL_OK)
 800300e:	2a00      	cmp	r2, #0
 8003010:	d1da      	bne.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8003012:	1c73      	adds	r3, r6, #1
 8003014:	d0a9      	beq.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003016:	f7fe fc37 	bl	8001888 <HAL_GetTick>
 800301a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800301c:	1ac3      	subs	r3, r0, r3
 800301e:	42b3      	cmp	r3, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003020:	6828      	ldr	r0, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	d801      	bhi.n	8003028 <I2C_WaitOnFlagUntilTimeout+0xd0>
 8003024:	2e00      	cmp	r6, #0
 8003026:	d19e      	bne.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003028:	6983      	ldr	r3, [r0, #24]
 800302a:	ea38 0303 	bics.w	r3, r8, r3
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	42bb      	cmp	r3, r7
 8003036:	d196      	bne.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800303a:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800303c:	430b      	orrs	r3, r1
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800303e:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003040:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003042:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003046:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
          return HAL_ERROR;
 800304a:	e7d6      	b.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 800304c:	4622      	mov	r2, r4
 800304e:	e7a5      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x44>
  return HAL_OK;
 8003050:	2000      	movs	r0, #0
}
 8003052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t error_code = 0;
 8003056:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8003058:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	46a3      	mov	fp, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800305e:	6983      	ldr	r3, [r0, #24]
 8003060:	069b      	lsls	r3, r3, #26
 8003062:	d42f      	bmi.n	80030c4 <I2C_WaitOnFlagUntilTimeout+0x16c>
 8003064:	f1bb 0f00 	cmp.w	fp, #0
 8003068:	d195      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x3e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7fe fc0d 	bl	8001888 <HAL_GetTick>
 800306e:	eba0 0009 	sub.w	r0, r0, r9
 8003072:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003074:	6828      	ldr	r0, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003076:	d301      	bcc.n	800307c <I2C_WaitOnFlagUntilTimeout+0x124>
 8003078:	2e00      	cmp	r6, #0
 800307a:	d1f0      	bne.n	800305e <I2C_WaitOnFlagUntilTimeout+0x106>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800307c:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 800307e:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003082:	6982      	ldr	r2, [r0, #24]
 8003084:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 8003086:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003088:	d50b      	bpl.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x14a>
 800308a:	044a      	lsls	r2, r1, #17
 800308c:	d409      	bmi.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x14a>
              (tmp1 != I2C_CR2_STOP) && \
 800308e:	2b20      	cmp	r3, #32
 8003090:	d007      	beq.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x14a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003092:	6843      	ldr	r3, [r0, #4]
 8003094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003098:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 800309a:	f7fe fbf5 	bl	8001888 <HAL_GetTick>
 800309e:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030a0:	6828      	ldr	r0, [r5, #0]
 80030a2:	6983      	ldr	r3, [r0, #24]
 80030a4:	0699      	lsls	r1, r3, #26
 80030a6:	d4da      	bmi.n	800305e <I2C_WaitOnFlagUntilTimeout+0x106>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030a8:	f7fe fbee 	bl	8001888 <HAL_GetTick>
 80030ac:	eba0 0009 	sub.w	r0, r0, r9
 80030b0:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030b2:	6828      	ldr	r0, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030b4:	d9f5      	bls.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x14a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030b6:	6983      	ldr	r3, [r0, #24]
 80030b8:	069b      	lsls	r3, r3, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	f04f 0420 	mov.w	r4, #32
              status = HAL_ERROR;
 80030be:	f04f 0b01 	mov.w	fp, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030c2:	d5cf      	bpl.n	8003064 <I2C_WaitOnFlagUntilTimeout+0x10c>
    if (status == HAL_OK)
 80030c4:	f1bb 0f00 	cmp.w	fp, #0
 80030c8:	f43f af63 	beq.w	8002f92 <I2C_WaitOnFlagUntilTimeout+0x3a>
 80030cc:	e763      	b.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x3e>
 80030ce:	bf00      	nop
 80030d0:	fe00e800 	.word	0xfe00e800

080030d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d4:	6803      	ldr	r3, [r0, #0]
{
 80030d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030da:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030dc:	6998      	ldr	r0, [r3, #24]
 80030de:	0684      	lsls	r4, r0, #26
 80030e0:	d45e      	bmi.n	80031a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
 80030e2:	460e      	mov	r6, r1
 80030e4:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e6:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 80030ea:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030ec:	f012 0c10 	ands.w	ip, r2, #16
 80030f0:	d059      	beq.n	80031a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f2:	1c70      	adds	r0, r6, #1
 80030f4:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030f8:	d160      	bne.n	80031bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe8>
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	0691      	lsls	r1, r2, #26
 80030fe:	d5fc      	bpl.n	80030fa <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
  uint32_t error_code = 0;
 8003100:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003102:	2220      	movs	r2, #32
 8003104:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003106:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 800310a:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800310c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800310e:	05d0      	lsls	r0, r2, #23
 8003110:	d532      	bpl.n	8003178 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003112:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003116:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003118:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800311a:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800311e:	d504      	bpl.n	800312a <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003120:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003124:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8003126:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800312a:	0596      	lsls	r6, r2, #22
 800312c:	d504      	bpl.n	8003138 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800312e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003132:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003136:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800313c:	bf44      	itt	mi
 800313e:	2200      	movmi	r2, #0
 8003140:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	07d1      	lsls	r1, r2, #31
 8003146:	d403      	bmi.n	8003150 <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4836      	ldr	r0, [pc, #216]	@ (800322c <I2C_WaitOnSTOPFlagUntilTimeout+0x158>)
 8003154:	4002      	ands	r2, r0
 8003156:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8003158:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800315a:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 800315e:	ea43 030c 	orr.w	r3, r3, ip
 8003162:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800316c:	2300      	movs	r3, #0
 800316e:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8003172:	2001      	movs	r0, #1
}
 8003174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003178:	0550      	lsls	r0, r2, #21
 800317a:	d4d1      	bmi.n	8003120 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800317c:	0594      	lsls	r4, r2, #22
 800317e:	d4d6      	bmi.n	800312e <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  if (status != HAL_OK)
 8003180:	2900      	cmp	r1, #0
 8003182:	d1d9      	bne.n	8003138 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003184:	f7fe fb80 	bl	8001888 <HAL_GetTick>
 8003188:	1bc0      	subs	r0, r0, r7
 800318a:	42b0      	cmp	r0, r6
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800318c:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	d800      	bhi.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0xbe>
 8003190:	b91e      	cbnz	r6, 800319a <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	f012 0220 	ands.w	r2, r2, #32
 8003198:	d007      	beq.n	80031aa <I2C_WaitOnSTOPFlagUntilTimeout+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	0692      	lsls	r2, r2, #26
 800319e:	d5a4      	bpl.n	80030ea <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80031a0:	2000      	movs	r0, #0
}
 80031a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	4661      	mov	r1, ip
 80031a8:	e7b0      	b.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031aa:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ae:	430b      	orrs	r3, r1
 80031b0:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 80031ba:	e7d7      	b.n	800316c <I2C_WaitOnSTOPFlagUntilTimeout+0x98>
  uint32_t error_code = 0;
 80031bc:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 80031be:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	0692      	lsls	r2, r2, #26
 80031c6:	d42c      	bmi.n	8003222 <I2C_WaitOnSTOPFlagUntilTimeout+0x14e>
 80031c8:	f1ba 0f00 	cmp.w	sl, #0
 80031cc:	d19b      	bne.n	8003106 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7fe fb5b 	bl	8001888 <HAL_GetTick>
 80031d2:	eba0 0009 	sub.w	r0, r0, r9
 80031d6:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031d8:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031da:	d301      	bcc.n	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x10c>
 80031dc:	2e00      	cmp	r6, #0
 80031de:	d1f0      	bne.n	80031c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031e0:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80031e2:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031e6:	6999      	ldr	r1, [r3, #24]
 80031e8:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 80031ea:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031ec:	d50b      	bpl.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
 80031ee:	0441      	lsls	r1, r0, #17
 80031f0:	d409      	bmi.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              (tmp1 != I2C_CR2_STOP) && \
 80031f2:	2a20      	cmp	r2, #32
 80031f4:	d007      	beq.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031fc:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80031fe:	f7fe fb43 	bl	8001888 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003202:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8003204:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	0690      	lsls	r0, r2, #26
 800320a:	d4da      	bmi.n	80031c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800320c:	f7fe fb3c 	bl	8001888 <HAL_GetTick>
 8003210:	eba0 0009 	sub.w	r0, r0, r9
 8003214:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003216:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003218:	d9f5      	bls.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800321a:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800321c:	f04f 0a01 	mov.w	sl, #1
 8003220:	e7cf      	b.n	80031c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
    if (status == HAL_OK)
 8003222:	f1ba 0f00 	cmp.w	sl, #0
 8003226:	f43f af6c 	beq.w	8003102 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800322a:	e76c      	b.n	8003106 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800322c:	fe00e800 	.word	0xfe00e800

08003230 <I2C_WaitOnRXNEFlagUntilTimeout>:
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003230:	6803      	ldr	r3, [r0, #0]
{
 8003232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003236:	4605      	mov	r5, r0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003238:	6998      	ldr	r0, [r3, #24]
 800323a:	0744      	lsls	r4, r0, #29
 800323c:	f100 8091 	bmi.w	8003362 <I2C_WaitOnRXNEFlagUntilTimeout+0x132>
 8003240:	460e      	mov	r6, r1
 8003242:	4617      	mov	r7, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003244:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8003248:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800324a:	f012 0c10 	ands.w	ip, r2, #16
 800324e:	d067      	beq.n	8003320 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003250:	1c70      	adds	r0, r6, #1
 8003252:	f8c3 801c 	str.w	r8, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003256:	f040 808f 	bne.w	8003378 <I2C_WaitOnRXNEFlagUntilTimeout+0x148>
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	0691      	lsls	r1, r2, #26
 800325e:	d5fc      	bpl.n	800325a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  uint32_t error_code = 0;
 8003260:	2400      	movs	r4, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003262:	2220      	movs	r2, #32
 8003264:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003266:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 800326a:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800326c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800326e:	05d0      	lsls	r0, r2, #23
 8003270:	d538      	bpl.n	80032e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003272:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003276:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003278:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800327a:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800327e:	d504      	bpl.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003280:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003284:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8003286:	f04c 0c08 	orr.w	ip, ip, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800328a:	0594      	lsls	r4, r2, #22
 800328c:	d504      	bpl.n	8003298 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800328e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003292:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003296:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	0792      	lsls	r2, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800329c:	bf44      	itt	mi
 800329e:	2200      	movmi	r2, #0
 80032a0:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	07d7      	lsls	r7, r2, #31
 80032a6:	d403      	bmi.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	484e      	ldr	r0, [pc, #312]	@ (80033ec <I2C_WaitOnRXNEFlagUntilTimeout+0x1bc>)
 80032b4:	4002      	ands	r2, r0
 80032b6:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80032b8:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ba:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	2020      	movs	r0, #32
    hi2c->ErrorCode |= error_code;
 80032be:	ea42 020c 	orr.w	r2, r2, ip
 80032c2:	646a      	str	r2, [r5, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	f885 1040 	strb.w	r1, [r5, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032cc:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	069e      	lsls	r6, r3, #26
 80032d4:	d526      	bpl.n	8003324 <I2C_WaitOnRXNEFlagUntilTimeout+0xf4>
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80032d6:	f7fe fad7 	bl	8001888 <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80032da:	682b      	ldr	r3, [r5, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
    status = HAL_ERROR;
 80032de:	2001      	movs	r0, #1
}
 80032e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032e4:	0550      	lsls	r0, r2, #21
 80032e6:	d4cb      	bmi.n	8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032e8:	0590      	lsls	r0, r2, #22
 80032ea:	d4d0      	bmi.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
  if (status != HAL_OK)
 80032ec:	2900      	cmp	r1, #0
 80032ee:	d1d3      	bne.n	8003298 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	0694      	lsls	r4, r2, #26
 80032f4:	d51c      	bpl.n	8003330 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80032f6:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	06d0      	lsls	r0, r2, #27
 80032fc:	d517      	bpl.n	800332e <I2C_WaitOnRXNEFlagUntilTimeout+0xfe>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032fe:	2020      	movs	r0, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	2410      	movs	r4, #16
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003302:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	61dc      	str	r4, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003306:	646a      	str	r2, [r5, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003308:	61d8      	str	r0, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	4c37      	ldr	r4, [pc, #220]	@ (80033ec <I2C_WaitOnRXNEFlagUntilTimeout+0x1bc>)
 800330e:	4022      	ands	r2, r4
 8003310:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003312:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8003316:	f885 1040 	strb.w	r1, [r5, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800331a:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
 800331e:	e7da      	b.n	80032d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
  HAL_StatusTypeDef status = HAL_OK;
 8003320:	4661      	mov	r1, ip
 8003322:	e7a3      	b.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003324:	f7fe fab0 	bl	8001888 <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	e7d7      	b.n	80032de <I2C_WaitOnRXNEFlagUntilTimeout+0xae>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332e:	6469      	str	r1, [r5, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003330:	f7fe faaa 	bl	8001888 <HAL_GetTick>
 8003334:	1bc0      	subs	r0, r0, r7
 8003336:	4286      	cmp	r6, r0
 8003338:	d215      	bcs.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0x136>
 800333a:	6829      	ldr	r1, [r5, #0]
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800333c:	698a      	ldr	r2, [r1, #24]
 800333e:	f012 0204 	ands.w	r2, r2, #4
 8003342:	460b      	mov	r3, r1
 8003344:	d109      	bne.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0x12a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003346:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003348:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800334c:	2020      	movs	r0, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800334e:	4303      	orrs	r3, r0
 8003350:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003352:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003356:	698b      	ldr	r3, [r1, #24]
 8003358:	e7c1      	b.n	80032de <I2C_WaitOnRXNEFlagUntilTimeout+0xae>
 800335a:	698a      	ldr	r2, [r1, #24]
 800335c:	0751      	lsls	r1, r2, #29
 800335e:	f57f af73 	bpl.w	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
    status = HAL_ERROR;
 8003362:	2000      	movs	r0, #0
 8003364:	e7bc      	b.n	80032e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	4619      	mov	r1, r3
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800336a:	2e00      	cmp	r6, #0
 800336c:	d0e6      	beq.n	800333c <I2C_WaitOnRXNEFlagUntilTimeout+0x10c>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	0752      	lsls	r2, r2, #29
 8003372:	f57f af69 	bpl.w	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
 8003376:	e7f4      	b.n	8003362 <I2C_WaitOnRXNEFlagUntilTimeout+0x132>
  uint32_t error_code = 0;
 8003378:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 800337a:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	0692      	lsls	r2, r2, #26
 8003382:	d42d      	bmi.n	80033e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1b0>
 8003384:	f1ba 0f00 	cmp.w	sl, #0
 8003388:	f47f af6d 	bne.w	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800338c:	f7fe fa7c 	bl	8001888 <HAL_GetTick>
 8003390:	eba0 0009 	sub.w	r0, r0, r9
 8003394:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003396:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003398:	d301      	bcc.n	800339e <I2C_WaitOnRXNEFlagUntilTimeout+0x16e>
 800339a:	2e00      	cmp	r6, #0
 800339c:	d1ef      	bne.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0x14e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800339e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80033a0:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033a4:	6999      	ldr	r1, [r3, #24]
 80033a6:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 80033a8:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033aa:	d50b      	bpl.n	80033c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x194>
 80033ac:	0441      	lsls	r1, r0, #17
 80033ae:	d409      	bmi.n	80033c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x194>
              (tmp1 != I2C_CR2_STOP) && \
 80033b0:	2a20      	cmp	r2, #32
 80033b2:	d007      	beq.n	80033c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x194>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ba:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80033bc:	f7fe fa64 	bl	8001888 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c0:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80033c2:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	0690      	lsls	r0, r2, #26
 80033c8:	d4d9      	bmi.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0x14e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ca:	f7fe fa5d 	bl	8001888 <HAL_GetTick>
 80033ce:	eba0 0009 	sub.w	r0, r0, r9
 80033d2:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033d4:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033d6:	d9f5      	bls.n	80033c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x194>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80033da:	f04f 0a01 	mov.w	sl, #1
 80033de:	e7ce      	b.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0x14e>
    if (status == HAL_OK)
 80033e0:	f1ba 0f00 	cmp.w	sl, #0
 80033e4:	f43f af3d 	beq.w	8003262 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80033e8:	e73d      	b.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 80033ea:	bf00      	nop
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d054      	beq.n	800349e <HAL_I2C_Init+0xae>
{
 80033f4:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80033fa:	4604      	mov	r4, r0
 80033fc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003400:	2b00      	cmp	r3, #0
 8003402:	d047      	beq.n	8003494 <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 8003404:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003406:	2224      	movs	r2, #36	@ 0x24
 8003408:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800340c:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800340e:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8003410:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003414:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8003418:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800341a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800341c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800341e:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003420:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003424:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003426:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003428:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800342a:	d009      	beq.n	8003440 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800342c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003430:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003432:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003434:	d107      	bne.n	8003446 <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	e006      	b.n	800344e <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003440:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003444:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800344c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344e:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003450:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003452:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8003456:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800345a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800345c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800345e:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003460:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003462:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003464:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003468:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800346c:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800346e:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003470:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003472:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003474:	4301      	orrs	r1, r0
 8003476:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	f041 0101 	orr.w	r1, r1, #1
 800347e:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003484:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003486:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8003490:	4610      	mov	r0, r2
}
 8003492:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003494:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8003498:	f7fd fbb2 	bl	8000c00 <HAL_I2C_MspInit>
 800349c:	e7b2      	b.n	8003404 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800349e:	2001      	movs	r0, #1
}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop

080034a4 <HAL_I2C_Master_Transmit>:
{
 80034a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a8:	4615      	mov	r5, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034aa:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80034ae:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b0:	2a20      	cmp	r2, #32
{
 80034b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b4:	f040 8088 	bne.w	80035c8 <HAL_I2C_Master_Transmit+0x124>
 80034b8:	461f      	mov	r7, r3
    __HAL_LOCK(hi2c);
 80034ba:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80034be:	2b01      	cmp	r3, #1
 80034c0:	4604      	mov	r4, r0
 80034c2:	f000 8081 	beq.w	80035c8 <HAL_I2C_Master_Transmit+0x124>
 80034c6:	2301      	movs	r3, #1
 80034c8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80034cc:	468b      	mov	fp, r1
 80034ce:	f7fe f9db 	bl	8001888 <HAL_GetTick>
 80034d2:	4682      	mov	sl, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034d4:	4601      	mov	r1, r0
 80034d6:	4620      	mov	r0, r4
 80034d8:	f7ff fc9c 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 80034dc:	2800      	cmp	r0, #0
 80034de:	d16f      	bne.n	80035c0 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034e0:	2321      	movs	r3, #33	@ 0x21
 80034e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034e6:	2310      	movs	r3, #16
 80034e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80034ee:	8567      	strh	r7, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034f2:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr  = pData;
 80034f4:	6265      	str	r5, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f6:	b292      	uxth	r2, r2
 80034f8:	2aff      	cmp	r2, #255	@ 0xff
    hi2c->XferISR   = NULL;
 80034fa:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034fc:	f3cb 0b09 	ubfx	fp, fp, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003500:	d866      	bhi.n	80035d0 <HAL_I2C_Master_Transmit+0x12c>
      hi2c->XferSize = hi2c->XferCount;
 8003502:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003504:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 8003506:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 8003508:	2a00      	cmp	r2, #0
 800350a:	f040 812c 	bne.w	8003766 <HAL_I2C_Master_Transmit+0x2c2>
  MODIFY_REG(hi2c->Instance->CR2, \
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4999      	ldr	r1, [pc, #612]	@ (8003778 <HAL_I2C_Master_Transmit+0x2d4>)
 8003512:	400a      	ands	r2, r1
 8003514:	ea42 020b 	orr.w	r2, r2, fp
 8003518:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800351c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003520:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 8003522:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003524:	b292      	uxth	r2, r2
 8003526:	2a00      	cmp	r2, #0
 8003528:	f000 80a6 	beq.w	8003678 <HAL_I2C_Master_Transmit+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352c:	f04f 0910 	mov.w	r9, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003530:	699d      	ldr	r5, [r3, #24]
 8003532:	f015 0502 	ands.w	r5, r5, #2
 8003536:	f040 8089 	bne.w	800364c <HAL_I2C_Master_Transmit+0x1a8>
  uint32_t itflag   = hi2c->Instance->ISR;
 800353a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800353c:	f012 0210 	ands.w	r2, r2, #16
 8003540:	f000 8082 	beq.w	8003648 <HAL_I2C_Master_Transmit+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003544:	1c70      	adds	r0, r6, #1
 8003546:	f8c3 901c 	str.w	r9, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800354a:	f040 80d3 	bne.w	80036f4 <HAL_I2C_Master_Transmit+0x250>
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	0691      	lsls	r1, r2, #26
 8003552:	d5fc      	bpl.n	800354e <HAL_I2C_Master_Transmit+0xaa>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003554:	2220      	movs	r2, #32
 8003556:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003558:	f045 0204 	orr.w	r2, r5, #4
    status = HAL_ERROR;
 800355c:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800355e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003560:	05cd      	lsls	r5, r1, #23
 8003562:	d550      	bpl.n	8003606 <HAL_I2C_Master_Transmit+0x162>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003564:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003568:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800356a:	0548      	lsls	r0, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800356c:	f042 0201 	orr.w	r2, r2, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003570:	d504      	bpl.n	800357c <HAL_I2C_Master_Transmit+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003572:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003576:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8003578:	f042 0208 	orr.w	r2, r2, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800357c:	058e      	lsls	r6, r1, #22
 800357e:	d504      	bpl.n	800358a <HAL_I2C_Master_Transmit+0xe6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003580:	f44f 7100 	mov.w	r1, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003584:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003588:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800358a:	6999      	ldr	r1, [r3, #24]
 800358c:	0788      	lsls	r0, r1, #30
    hi2c->Instance->TXDR = 0x00U;
 800358e:	bf44      	itt	mi
 8003590:	2100      	movmi	r1, #0
 8003592:	6299      	strmi	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003594:	6999      	ldr	r1, [r3, #24]
 8003596:	07c9      	lsls	r1, r1, #31
 8003598:	d403      	bmi.n	80035a2 <HAL_I2C_Master_Transmit+0xfe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800359a:	6999      	ldr	r1, [r3, #24]
 800359c:	f041 0101 	orr.w	r1, r1, #1
 80035a0:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	4d75      	ldr	r5, [pc, #468]	@ (800377c <HAL_I2C_Master_Transmit+0x2d8>)
 80035a6:	4029      	ands	r1, r5
 80035a8:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80035aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ac:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	2120      	movs	r1, #32
    hi2c->ErrorCode |= error_code;
 80035b0:	4313      	orrs	r3, r2
 80035b2:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 80035b4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80035c0:	2001      	movs	r0, #1
}
 80035c2:	b003      	add	sp, #12
 80035c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80035c8:	2002      	movs	r0, #2
}
 80035ca:	b003      	add	sp, #12
 80035cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d0:	22ff      	movs	r2, #255	@ 0xff
 80035d2:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d4:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 80035d8:	20fe      	movs	r0, #254	@ 0xfe
      xfermode = I2C_RELOAD_MODE;
 80035da:	f04f 7780 	mov.w	r7, #16777216	@ 0x1000000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035de:	ea41 020b 	orr.w	r2, r1, fp
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035e2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80035e6:	6299      	str	r1, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035e8:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80035ea:	8520      	strh	r0, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80035ec:	3901      	subs	r1, #1
 80035ee:	b289      	uxth	r1, r1
 80035f0:	8561      	strh	r1, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	4860      	ldr	r0, [pc, #384]	@ (8003778 <HAL_I2C_Master_Transmit+0x2d4>)
      hi2c->pBuffPtr++;
 80035f6:	6265      	str	r5, [r4, #36]	@ 0x24
  MODIFY_REG(hi2c->Instance->CR2, \
 80035f8:	4001      	ands	r1, r0
 80035fa:	430a      	orrs	r2, r1
 80035fc:	433a      	orrs	r2, r7
 80035fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003602:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003604:	e78d      	b.n	8003522 <HAL_I2C_Master_Transmit+0x7e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003606:	054f      	lsls	r7, r1, #21
 8003608:	d4b3      	bmi.n	8003572 <HAL_I2C_Master_Transmit+0xce>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800360a:	058d      	lsls	r5, r1, #22
 800360c:	d4b8      	bmi.n	8003580 <HAL_I2C_Master_Transmit+0xdc>
  if (status != HAL_OK)
 800360e:	2800      	cmp	r0, #0
 8003610:	d1bb      	bne.n	800358a <HAL_I2C_Master_Transmit+0xe6>
    if (Timeout != HAL_MAX_DELAY)
 8003612:	1c72      	adds	r2, r6, #1
 8003614:	d08c      	beq.n	8003530 <HAL_I2C_Master_Transmit+0x8c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fe f937 	bl	8001888 <HAL_GetTick>
 800361a:	eba0 030a 	sub.w	r3, r0, sl
 800361e:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003620:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003622:	d301      	bcc.n	8003628 <HAL_I2C_Master_Transmit+0x184>
 8003624:	2e00      	cmp	r6, #0
 8003626:	d183      	bne.n	8003530 <HAL_I2C_Master_Transmit+0x8c>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	f012 0202 	ands.w	r2, r2, #2
 800362e:	f47f af7f 	bne.w	8003530 <HAL_I2C_Master_Transmit+0x8c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003632:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8003634:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8003638:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	430b      	orrs	r3, r1
 800363c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800363e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003642:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 8003646:	e7bb      	b.n	80035c0 <HAL_I2C_Master_Transmit+0x11c>
  HAL_StatusTypeDef status = HAL_OK;
 8003648:	4610      	mov	r0, r2
 800364a:	e788      	b.n	800355e <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800364c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800364e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003650:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003654:	6299      	str	r1, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003656:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003658:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800365a:	3901      	subs	r1, #1
 800365c:	b289      	uxth	r1, r1
 800365e:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003660:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003662:	3a01      	subs	r2, #1
 8003664:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003666:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8003668:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800366a:	b101      	cbz	r1, 800366e <HAL_I2C_Master_Transmit+0x1ca>
 800366c:	b1ca      	cbz	r2, 80036a2 <HAL_I2C_Master_Transmit+0x1fe>
    while (hi2c->XferCount > 0U)
 800366e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003670:	b292      	uxth	r2, r2
 8003672:	2a00      	cmp	r2, #0
 8003674:	f47f af5c 	bne.w	8003530 <HAL_I2C_Master_Transmit+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003678:	4652      	mov	r2, sl
 800367a:	4631      	mov	r1, r6
 800367c:	4620      	mov	r0, r4
 800367e:	f7ff fd29 	bl	80030d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003682:	2800      	cmp	r0, #0
 8003684:	d19c      	bne.n	80035c0 <HAL_I2C_Master_Transmit+0x11c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003686:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003688:	4d3c      	ldr	r5, [pc, #240]	@ (800377c <HAL_I2C_Master_Transmit+0x2d8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368a:	2120      	movs	r1, #32
 800368c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	402a      	ands	r2, r5
 8003692:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003694:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003698:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800369c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80036a0:	e78f      	b.n	80035c2 <HAL_I2C_Master_Transmit+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036a2:	f8cd a000 	str.w	sl, [sp]
 80036a6:	4633      	mov	r3, r6
 80036a8:	2180      	movs	r1, #128	@ 0x80
 80036aa:	4620      	mov	r0, r4
 80036ac:	f7ff fc54 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d185      	bne.n	80035c0 <HAL_I2C_Master_Transmit+0x11c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036b4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80036b6:	6823      	ldr	r3, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036b8:	b292      	uxth	r2, r2
 80036ba:	2aff      	cmp	r2, #255	@ 0xff
 80036bc:	d90c      	bls.n	80036d8 <HAL_I2C_Master_Transmit+0x234>
  MODIFY_REG(hi2c->Instance->CR2, \
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	492f      	ldr	r1, [pc, #188]	@ (8003780 <HAL_I2C_Master_Transmit+0x2dc>)
 80036c2:	400a      	ands	r2, r1
 80036c4:	ea42 020b 	orr.w	r2, r2, fp
 80036c8:	f042 72ff 	orr.w	r2, r2, #33423360	@ 0x1fe0000
 80036cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d0:	21ff      	movs	r1, #255	@ 0xff
 80036d2:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80036d4:	605a      	str	r2, [r3, #4]
}
 80036d6:	e7ca      	b.n	800366e <HAL_I2C_Master_Transmit+0x1ca>
          hi2c->XferSize = hi2c->XferCount;
 80036d8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80036da:	4829      	ldr	r0, [pc, #164]	@ (8003780 <HAL_I2C_Master_Transmit+0x2dc>)
 80036dc:	6859      	ldr	r1, [r3, #4]
          hi2c->XferSize = hi2c->XferCount;
 80036de:	b292      	uxth	r2, r2
 80036e0:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036e2:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036e4:	ea4b 4202 	orr.w	r2, fp, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80036e8:	4001      	ands	r1, r0
 80036ea:	430a      	orrs	r2, r1
 80036ec:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80036f0:	605a      	str	r2, [r3, #4]
}
 80036f2:	e7bc      	b.n	800366e <HAL_I2C_Master_Transmit+0x1ca>
  uint32_t tickstart = Tickstart;
 80036f4:	4657      	mov	r7, sl
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	46a8      	mov	r8, r5
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	0692      	lsls	r2, r2, #26
 80036fc:	d42e      	bmi.n	800375c <HAL_I2C_Master_Transmit+0x2b8>
 80036fe:	f1b8 0f00 	cmp.w	r8, #0
 8003702:	f47f af29 	bne.w	8003558 <HAL_I2C_Master_Transmit+0xb4>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe f8bf 	bl	8001888 <HAL_GetTick>
 800370a:	1bc0      	subs	r0, r0, r7
 800370c:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800370e:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003710:	d301      	bcc.n	8003716 <HAL_I2C_Master_Transmit+0x272>
 8003712:	2e00      	cmp	r6, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0x254>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003716:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8003718:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8003720:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003722:	d50b      	bpl.n	800373c <HAL_I2C_Master_Transmit+0x298>
 8003724:	0441      	lsls	r1, r0, #17
 8003726:	d409      	bmi.n	800373c <HAL_I2C_Master_Transmit+0x298>
              (tmp1 != I2C_CR2_STOP) && \
 8003728:	2a20      	cmp	r2, #32
 800372a:	d007      	beq.n	800373c <HAL_I2C_Master_Transmit+0x298>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003732:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003734:	f7fe f8a8 	bl	8001888 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003738:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800373a:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	0690      	lsls	r0, r2, #26
 8003740:	d4da      	bmi.n	80036f8 <HAL_I2C_Master_Transmit+0x254>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003742:	f7fe f8a1 	bl	8001888 <HAL_GetTick>
 8003746:	1bc0      	subs	r0, r0, r7
 8003748:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800374a:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800374c:	d9f6      	bls.n	800373c <HAL_I2C_Master_Transmit+0x298>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800374e:	699a      	ldr	r2, [r3, #24]
 8003750:	0692      	lsls	r2, r2, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003752:	f04f 0520 	mov.w	r5, #32
              status = HAL_ERROR;
 8003756:	f04f 0801 	mov.w	r8, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800375a:	d5d0      	bpl.n	80036fe <HAL_I2C_Master_Transmit+0x25a>
    if (status == HAL_OK)
 800375c:	f1b8 0f00 	cmp.w	r8, #0
 8003760:	f43f aef8 	beq.w	8003554 <HAL_I2C_Master_Transmit+0xb0>
 8003764:	e6f8      	b.n	8003558 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize--;
 8003766:	3a01      	subs	r2, #1
 8003768:	b290      	uxth	r0, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800376a:	1c41      	adds	r1, r0, #1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800376c:	b2c9      	uxtb	r1, r1
 800376e:	0409      	lsls	r1, r1, #16
      xfermode = I2C_AUTOEND_MODE;
 8003770:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 8003774:	e733      	b.n	80035de <HAL_I2C_Master_Transmit+0x13a>
 8003776:	bf00      	nop
 8003778:	fc009800 	.word	0xfc009800
 800377c:	fe00e800 	.word	0xfe00e800
 8003780:	fc009c00 	.word	0xfc009c00

08003784 <HAL_I2C_Master_Receive>:
{
 8003784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003788:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800378a:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
{
 800378e:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003790:	2820      	cmp	r0, #32
{
 8003792:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003794:	f040 808c 	bne.w	80038b0 <HAL_I2C_Master_Receive+0x12c>
 8003798:	4698      	mov	r8, r3
    __HAL_LOCK(hi2c);
 800379a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800379e:	2b01      	cmp	r3, #1
 80037a0:	f000 8086 	beq.w	80038b0 <HAL_I2C_Master_Receive+0x12c>
 80037a4:	2301      	movs	r3, #1
 80037a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80037aa:	460f      	mov	r7, r1
 80037ac:	4691      	mov	r9, r2
 80037ae:	f7fe f86b 	bl	8001888 <HAL_GetTick>
 80037b2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037b4:	4601      	mov	r1, r0
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7ff fb2c 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d173      	bne.n	80038a8 <HAL_I2C_Master_Receive+0x124>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c0:	2322      	movs	r3, #34	@ 0x22
 80037c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037c6:	2310      	movs	r3, #16
 80037c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037cc:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80037ce:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80037d4:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr  = pData;
 80037d6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2bff      	cmp	r3, #255	@ 0xff
    hi2c->XferISR   = NULL;
 80037de:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e0:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e4:	d868      	bhi.n	80038b8 <HAL_I2C_Master_Receive+0x134>
      hi2c->XferSize = hi2c->XferCount;
 80037e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80037e8:	4840      	ldr	r0, [pc, #256]	@ (80038ec <HAL_I2C_Master_Receive+0x168>)
 80037ea:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037f0:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f2:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80037f6:	4001      	ands	r1, r0
 80037f8:	430b      	orrs	r3, r1
 80037fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037fe:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 8003802:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8003804:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003806:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003808:	462a      	mov	r2, r5
 800380a:	4631      	mov	r1, r6
 800380c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800380e:	2b00      	cmp	r3, #0
 8003810:	d039      	beq.n	8003886 <HAL_I2C_Master_Receive+0x102>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003812:	f7ff fd0d 	bl	8003230 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003816:	2800      	cmp	r0, #0
 8003818:	d146      	bne.n	80038a8 <HAL_I2C_Master_Receive+0x124>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800381e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003820:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003822:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003824:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003826:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003828:	3b01      	subs	r3, #1
 800382a:	b29b      	uxth	r3, r3
 800382c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800382e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003830:	3a01      	subs	r2, #1
 8003832:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8003834:	3101      	adds	r1, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003836:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003838:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800383a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0e1      	beq.n	8003804 <HAL_I2C_Master_Receive+0x80>
 8003840:	2a00      	cmp	r2, #0
 8003842:	d1df      	bne.n	8003804 <HAL_I2C_Master_Receive+0x80>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003844:	2180      	movs	r1, #128	@ 0x80
 8003846:	9500      	str	r5, [sp, #0]
 8003848:	4633      	mov	r3, r6
 800384a:	4620      	mov	r0, r4
 800384c:	f7ff fb84 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003850:	21ff      	movs	r1, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003852:	bb48      	cbnz	r0, 80038a8 <HAL_I2C_Master_Receive+0x124>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003854:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003856:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 80038f4 <HAL_I2C_Master_Receive+0x170>
 800385a:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800385c:	b29b      	uxth	r3, r3
 800385e:	428b      	cmp	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003860:	4660      	mov	r0, ip
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003862:	d935      	bls.n	80038d0 <HAL_I2C_Master_Receive+0x14c>
  MODIFY_REG(hi2c->Instance->CR2, \
 8003864:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003866:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003868:	ea03 030c 	and.w	r3, r3, ip
 800386c:	433b      	orrs	r3, r7
 800386e:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8003872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003876:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8003878:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800387a:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	462a      	mov	r2, r5
 800387e:	4631      	mov	r1, r6
 8003880:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1c5      	bne.n	8003812 <HAL_I2C_Master_Receive+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003886:	f7ff fc25 	bl	80030d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800388a:	b968      	cbnz	r0, 80038a8 <HAL_I2C_Master_Receive+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800388c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800388e:	4d18      	ldr	r5, [pc, #96]	@ (80038f0 <HAL_I2C_Master_Receive+0x16c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003890:	2120      	movs	r1, #32
 8003892:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	402a      	ands	r2, r5
 8003898:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800389a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800389e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038a2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80038a6:	e000      	b.n	80038aa <HAL_I2C_Master_Receive+0x126>
      return HAL_ERROR;
 80038a8:	2001      	movs	r0, #1
}
 80038aa:	b003      	add	sp, #12
 80038ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 80038b0:	2002      	movs	r0, #2
}
 80038b2:	b003      	add	sp, #12
 80038b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 80038b8:	6853      	ldr	r3, [r2, #4]
 80038ba:	490c      	ldr	r1, [pc, #48]	@ (80038ec <HAL_I2C_Master_Receive+0x168>)
 80038bc:	400b      	ands	r3, r1
 80038be:	433b      	orrs	r3, r7
 80038c0:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 80038c4:	f443 3392 	orr.w	r3, r3, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038c8:	21ff      	movs	r1, #255	@ 0xff
 80038ca:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80038cc:	6053      	str	r3, [r2, #4]
}
 80038ce:	e799      	b.n	8003804 <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 80038d0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80038d2:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038d8:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038da:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80038de:	4001      	ands	r1, r0
 80038e0:	430b      	orrs	r3, r1
 80038e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038e6:	6053      	str	r3, [r2, #4]
}
 80038e8:	e78c      	b.n	8003804 <HAL_I2C_Master_Receive+0x80>
 80038ea:	bf00      	nop
 80038ec:	fc009800 	.word	0xfc009800
 80038f0:	fe00e800 	.word	0xfe00e800
 80038f4:	fc009c00 	.word	0xfc009c00

080038f8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80038fc:	2a20      	cmp	r2, #32
 80038fe:	d123      	bne.n	8003948 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003900:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003904:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003908:	2a01      	cmp	r2, #1
 800390a:	4603      	mov	r3, r0
 800390c:	d01c      	beq.n	8003948 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800390e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003910:	2024      	movs	r0, #36	@ 0x24
{
 8003912:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003918:	6810      	ldr	r0, [r2, #0]
 800391a:	f020 0001 	bic.w	r0, r0, #1
 800391e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003920:	6810      	ldr	r0, [r2, #0]
 8003922:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003926:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003928:	6810      	ldr	r0, [r2, #0]
 800392a:	4301      	orrs	r1, r0
 800392c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800392e:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003930:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8003934:	f041 0101 	orr.w	r1, r1, #1
 8003938:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800393a:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800393e:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8003942:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003944:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8003948:	2002      	movs	r0, #2
}
 800394a:	4770      	bx	lr

0800394c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8003950:	2a20      	cmp	r2, #32
 8003952:	d122      	bne.n	800399a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8003954:	b500      	push	{lr}
 8003956:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800395e:	2a01      	cmp	r2, #1
 8003960:	4603      	mov	r3, r0
 8003962:	d01c      	beq.n	800399e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003964:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003966:	2024      	movs	r0, #36	@ 0x24
 8003968:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800396c:	6810      	ldr	r0, [r2, #0]
 800396e:	f020 0001 	bic.w	r0, r0, #1
 8003972:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003974:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003976:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800397a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800397e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003980:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8003986:	f041 0101 	orr.w	r1, r1, #1
 800398a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800398c:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003990:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8003994:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003996:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800399a:	2002      	movs	r0, #2
}
 800399c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800399e:	2002      	movs	r0, #2
}
 80039a0:	f85d fb04 	ldr.w	pc, [sp], #4

080039a4 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039a4:	4a35      	ldr	r2, [pc, #212]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80039a6:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039a8:	b960      	cbnz	r0, 80039c4 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039b2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039b6:	d01b      	beq.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039c0:	2000      	movs	r0, #0
}
 80039c2:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039c4:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80039c8:	d006      	beq.n	80039d8 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039d2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80039d4:	2000      	movs	r0, #0
}
 80039d6:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039e4:	d029      	beq.n	8003a3a <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039ee:	e7f1      	b.n	80039d4 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039f8:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039fa:	4821      	ldr	r0, [pc, #132]	@ (8003a80 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80039fc:	4921      	ldr	r1, [pc, #132]	@ (8003a84 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a06:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a08:	6803      	ldr	r3, [r0, #0]
 8003a0a:	2032      	movs	r0, #50	@ 0x32
 8003a0c:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a10:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a12:	fba1 1303 	umull	r1, r3, r1, r3
 8003a16:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a18:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a1a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a1e:	d506      	bpl.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x8a>
 8003a20:	e000      	b.n	8003a24 <HAL_PWREx_ControlVoltageScaling+0x80>
 8003a22:	b123      	cbz	r3, 8003a2e <HAL_PWREx_ControlVoltageScaling+0x8a>
 8003a24:	6951      	ldr	r1, [r2, #20]
 8003a26:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003a28:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a2c:	d4f9      	bmi.n	8003a22 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a2e:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	055b      	lsls	r3, r3, #21
 8003a34:	d5ce      	bpl.n	80039d4 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8003a36:	2003      	movs	r0, #3
 8003a38:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a42:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a44:	480e      	ldr	r0, [pc, #56]	@ (8003a80 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003a46:	490f      	ldr	r1, [pc, #60]	@ (8003a84 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a50:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a52:	6803      	ldr	r3, [r0, #0]
 8003a54:	2032      	movs	r0, #50	@ 0x32
 8003a56:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a5a:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a5c:	fba1 1303 	umull	r1, r3, r1, r3
 8003a60:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a62:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a64:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a68:	d5e1      	bpl.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x8a>
 8003a6a:	e001      	b.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0de      	beq.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x8a>
 8003a70:	6951      	ldr	r1, [r2, #20]
 8003a72:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003a74:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a78:	d5d9      	bpl.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x8a>
 8003a7a:	e7f7      	b.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0xc8>
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	20000000 	.word	0x20000000
 8003a84:	431bde83 	.word	0x431bde83

08003a88 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a88:	4a02      	ldr	r2, [pc, #8]	@ (8003a94 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8003a8a:	6893      	ldr	r3, [r2, #8]
 8003a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a90:	6093      	str	r3, [r2, #8]
}
 8003a92:	4770      	bx	lr
 8003a94:	40007000 	.word	0x40007000

08003a98 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	f000 81bd 	beq.w	8003e18 <HAL_RCC_OscConfig+0x380>
{
 8003a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa2:	6803      	ldr	r3, [r0, #0]
 8003aa4:	07d9      	lsls	r1, r3, #31
{
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	d512      	bpl.n	8003ad2 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aac:	49a6      	ldr	r1, [pc, #664]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003aae:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ab0:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab2:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ab6:	2a0c      	cmp	r2, #12
 8003ab8:	f000 80d0 	beq.w	8003c5c <HAL_RCC_OscConfig+0x1c4>
 8003abc:	2a08      	cmp	r2, #8
 8003abe:	f040 80d2 	bne.w	8003c66 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac2:	4aa1      	ldr	r2, [pc, #644]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	0392      	lsls	r2, r2, #14
 8003ac8:	d503      	bpl.n	8003ad2 <HAL_RCC_OscConfig+0x3a>
 8003aca:	6862      	ldr	r2, [r4, #4]
 8003acc:	2a00      	cmp	r2, #0
 8003ace:	f000 8137 	beq.w	8003d40 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad2:	079a      	lsls	r2, r3, #30
 8003ad4:	d522      	bpl.n	8003b1c <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	4a9c      	ldr	r2, [pc, #624]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003ad8:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ada:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003adc:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	f000 80f8 	beq.w	8003cd6 <HAL_RCC_OscConfig+0x23e>
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	f040 80fa 	bne.w	8003ce0 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aec:	4b96      	ldr	r3, [pc, #600]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	055b      	lsls	r3, r3, #21
 8003af2:	d503      	bpl.n	8003afc <HAL_RCC_OscConfig+0x64>
 8003af4:	68e3      	ldr	r3, [r4, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8122 	beq.w	8003d40 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4a92      	ldr	r2, [pc, #584]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003afe:	6920      	ldr	r0, [r4, #16]
 8003b00:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b02:	4992      	ldr	r1, [pc, #584]	@ (8003d4c <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003b08:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003b0c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b0e:	6808      	ldr	r0, [r1, #0]
 8003b10:	f7fd fe78 	bl	8001804 <HAL_InitTick>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	f040 8113 	bne.w	8003d40 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	071a      	lsls	r2, r3, #28
 8003b1e:	d519      	bpl.n	8003b54 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b20:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b22:	4d89      	ldr	r5, [pc, #548]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80c2 	beq.w	8003cae <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8003b2a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fd fea7 	bl	8001888 <HAL_GetTick>
 8003b3a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b3c:	e005      	b.n	8003b4a <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3e:	f7fd fea3 	bl	8001888 <HAL_GetTick>
 8003b42:	1b80      	subs	r0, r0, r6
 8003b44:	2802      	cmp	r0, #2
 8003b46:	f200 8117 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b4a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8003b4e:	079b      	lsls	r3, r3, #30
 8003b50:	d5f5      	bpl.n	8003b3e <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	075d      	lsls	r5, r3, #29
 8003b56:	d541      	bpl.n	8003bdc <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b58:	4b7b      	ldr	r3, [pc, #492]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003b5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b5c:	00d0      	lsls	r0, r2, #3
 8003b5e:	f100 810f 	bmi.w	8003d80 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b64:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003b68:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b74:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b76:	4e76      	ldr	r6, [pc, #472]	@ (8003d50 <HAL_RCC_OscConfig+0x2b8>)
 8003b78:	6833      	ldr	r3, [r6, #0]
 8003b7a:	05d9      	lsls	r1, r3, #23
 8003b7c:	f140 812e 	bpl.w	8003ddc <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b80:	68a3      	ldr	r3, [r4, #8]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	f000 80fe 	beq.w	8003d84 <HAL_RCC_OscConfig+0x2ec>
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	f000 8184 	beq.w	8003e96 <HAL_RCC_OscConfig+0x3fe>
 8003b8e:	4e6e      	ldr	r6, [pc, #440]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003b90:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8003b9c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8003ba0:	f022 0204 	bic.w	r2, r2, #4
 8003ba4:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f040 80f2 	bne.w	8003d92 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fd fe6b 	bl	8001888 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003bb6:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb8:	e005      	b.n	8003bc6 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fd fe65 	bl	8001888 <HAL_GetTick>
 8003bbe:	1bc0      	subs	r0, r0, r7
 8003bc0:	4540      	cmp	r0, r8
 8003bc2:	f200 80d9 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc6:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8003bca:	0799      	lsls	r1, r3, #30
 8003bcc:	d4f5      	bmi.n	8003bba <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bce:	b125      	cbz	r5, 8003bda <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003bd2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	069a      	lsls	r2, r3, #26
 8003bde:	d518      	bpl.n	8003c12 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003be0:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003be2:	4d59      	ldr	r5, [pc, #356]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80e5 	beq.w	8003db4 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8003bea:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7fd fe47 	bl	8001888 <HAL_GetTick>
 8003bfa:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bfc:	e005      	b.n	8003c0a <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bfe:	f7fd fe43 	bl	8001888 <HAL_GetTick>
 8003c02:	1b80      	subs	r0, r0, r6
 8003c04:	2802      	cmp	r0, #2
 8003c06:	f200 80b7 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c0a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8003c0e:	079b      	lsls	r3, r3, #30
 8003c10:	d5f5      	bpl.n	8003bfe <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c12:	69e3      	ldr	r3, [r4, #28]
 8003c14:	b1f3      	cbz	r3, 8003c54 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c16:	4d4c      	ldr	r5, [pc, #304]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003c18:	68aa      	ldr	r2, [r5, #8]
 8003c1a:	f002 020c 	and.w	r2, r2, #12
 8003c1e:	2a0c      	cmp	r2, #12
 8003c20:	f000 8147 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c24:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	682b      	ldr	r3, [r5, #0]
 8003c28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c2c:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c2e:	f000 80f5 	beq.w	8003e1c <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd fe29 	bl	8001888 <HAL_GetTick>
 8003c36:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c38:	e005      	b.n	8003c46 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fd fe25 	bl	8001888 <HAL_GetTick>
 8003c3e:	1b00      	subs	r0, r0, r4
 8003c40:	2802      	cmp	r0, #2
 8003c42:	f200 8099 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c46:	682b      	ldr	r3, [r5, #0]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	d4f6      	bmi.n	8003c3a <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c4c:	68ea      	ldr	r2, [r5, #12]
 8003c4e:	4b41      	ldr	r3, [pc, #260]	@ (8003d54 <HAL_RCC_OscConfig+0x2bc>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8003c54:	2000      	movs	r0, #0
}
 8003c56:	b002      	add	sp, #8
 8003c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c5c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c60:	2903      	cmp	r1, #3
 8003c62:	f43f af2e 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c66:	6863      	ldr	r3, [r4, #4]
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6c:	d055      	beq.n	8003d1a <HAL_RCC_OscConfig+0x282>
 8003c6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c72:	f000 80c4 	beq.w	8003dfe <HAL_RCC_OscConfig+0x366>
 8003c76:	4d34      	ldr	r5, [pc, #208]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003c78:	682a      	ldr	r2, [r5, #0]
 8003c7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c7e:	602a      	str	r2, [r5, #0]
 8003c80:	682a      	ldr	r2, [r5, #0]
 8003c82:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c86:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d14b      	bne.n	8003d24 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fdfc 	bl	8001888 <HAL_GetTick>
 8003c90:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c92:	e004      	b.n	8003c9e <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fd fdf8 	bl	8001888 <HAL_GetTick>
 8003c98:	1b80      	subs	r0, r0, r6
 8003c9a:	2864      	cmp	r0, #100	@ 0x64
 8003c9c:	d86c      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	0399      	lsls	r1, r3, #14
 8003ca2:	d4f7      	bmi.n	8003c94 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	079a      	lsls	r2, r3, #30
 8003ca8:	f57f af38 	bpl.w	8003b1c <HAL_RCC_OscConfig+0x84>
 8003cac:	e713      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8003cae:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8003cba:	f7fd fde5 	bl	8001888 <HAL_GetTick>
 8003cbe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc0:	e004      	b.n	8003ccc <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fd fde1 	bl	8001888 <HAL_GetTick>
 8003cc6:	1b80      	subs	r0, r0, r6
 8003cc8:	2802      	cmp	r0, #2
 8003cca:	d855      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ccc:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8003cd0:	079f      	lsls	r7, r3, #30
 8003cd2:	d4f6      	bmi.n	8003cc2 <HAL_RCC_OscConfig+0x22a>
 8003cd4:	e73d      	b.n	8003b52 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd6:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003cda:	2a02      	cmp	r2, #2
 8003cdc:	f43f af06 	beq.w	8003aec <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce0:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8003ce2:	4d19      	ldr	r5, [pc, #100]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d037      	beq.n	8003d58 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fdca 	bl	8001888 <HAL_GetTick>
 8003cf4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf6:	e004      	b.n	8003d02 <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf8:	f7fd fdc6 	bl	8001888 <HAL_GetTick>
 8003cfc:	1b80      	subs	r0, r0, r6
 8003cfe:	2802      	cmp	r0, #2
 8003d00:	d83a      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	055f      	lsls	r7, r3, #21
 8003d06:	d5f7      	bpl.n	8003cf8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d08:	686b      	ldr	r3, [r5, #4]
 8003d0a:	6922      	ldr	r2, [r4, #16]
 8003d0c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003d10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003d14:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	e700      	b.n	8003b1c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003d1c:	6813      	ldr	r3, [r2, #0]
 8003d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d22:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003d24:	f7fd fdb0 	bl	8001888 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d28:	4e07      	ldr	r6, [pc, #28]	@ (8003d48 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8003d2a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2c:	e004      	b.n	8003d38 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d2e:	f7fd fdab 	bl	8001888 <HAL_GetTick>
 8003d32:	1b40      	subs	r0, r0, r5
 8003d34:	2864      	cmp	r0, #100	@ 0x64
 8003d36:	d81f      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d38:	6833      	ldr	r3, [r6, #0]
 8003d3a:	039f      	lsls	r7, r3, #14
 8003d3c:	d5f7      	bpl.n	8003d2e <HAL_RCC_OscConfig+0x296>
 8003d3e:	e7b1      	b.n	8003ca4 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8003d40:	2001      	movs	r0, #1
}
 8003d42:	b002      	add	sp, #8
 8003d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	20000010 	.word	0x20000010
 8003d50:	40007000 	.word	0x40007000
 8003d54:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d60:	f7fd fd92 	bl	8001888 <HAL_GetTick>
 8003d64:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d66:	682b      	ldr	r3, [r5, #0]
 8003d68:	0559      	lsls	r1, r3, #21
 8003d6a:	f57f aed6 	bpl.w	8003b1a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6e:	f7fd fd8b 	bl	8001888 <HAL_GetTick>
 8003d72:	1b80      	subs	r0, r0, r6
 8003d74:	2802      	cmp	r0, #2
 8003d76:	d9f6      	bls.n	8003d66 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8003d78:	2003      	movs	r0, #3
}
 8003d7a:	b002      	add	sp, #8
 8003d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8003d80:	2500      	movs	r5, #0
 8003d82:	e6f8      	b.n	8003b76 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d84:	4a65      	ldr	r2, [pc, #404]	@ (8003f1c <HAL_RCC_OscConfig+0x484>)
 8003d86:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8003d92:	f7fd fd79 	bl	8001888 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d96:	4f61      	ldr	r7, [pc, #388]	@ (8003f1c <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8003d98:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9e:	e004      	b.n	8003daa <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fd fd72 	bl	8001888 <HAL_GetTick>
 8003da4:	1b80      	subs	r0, r0, r6
 8003da6:	4540      	cmp	r0, r8
 8003da8:	d8e6      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dae:	079b      	lsls	r3, r3, #30
 8003db0:	d5f6      	bpl.n	8003da0 <HAL_RCC_OscConfig+0x308>
 8003db2:	e70c      	b.n	8003bce <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8003db4:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fd62 	bl	8001888 <HAL_GetTick>
 8003dc4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc6:	e004      	b.n	8003dd2 <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dc8:	f7fd fd5e 	bl	8001888 <HAL_GetTick>
 8003dcc:	1b80      	subs	r0, r0, r6
 8003dce:	2802      	cmp	r0, #2
 8003dd0:	d8d2      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8003dd6:	079f      	lsls	r7, r3, #30
 8003dd8:	d4f6      	bmi.n	8003dc8 <HAL_RCC_OscConfig+0x330>
 8003dda:	e71a      	b.n	8003c12 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ddc:	6833      	ldr	r3, [r6, #0]
 8003dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003de4:	f7fd fd50 	bl	8001888 <HAL_GetTick>
 8003de8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dea:	6833      	ldr	r3, [r6, #0]
 8003dec:	05da      	lsls	r2, r3, #23
 8003dee:	f53f aec7 	bmi.w	8003b80 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df2:	f7fd fd49 	bl	8001888 <HAL_GetTick>
 8003df6:	1bc0      	subs	r0, r0, r7
 8003df8:	2802      	cmp	r0, #2
 8003dfa:	d9f6      	bls.n	8003dea <HAL_RCC_OscConfig+0x352>
 8003dfc:	e7bc      	b.n	8003d78 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e02:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e14:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e16:	e785      	b.n	8003d24 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8003e18:	2001      	movs	r0, #1
}
 8003e1a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fd34 	bl	8001888 <HAL_GetTick>
 8003e20:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e22:	e004      	b.n	8003e2e <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fd fd30 	bl	8001888 <HAL_GetTick>
 8003e28:	1b80      	subs	r0, r0, r6
 8003e2a:	2802      	cmp	r0, #2
 8003e2c:	d8a4      	bhi.n	8003d78 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	0199      	lsls	r1, r3, #6
 8003e32:	d4f7      	bmi.n	8003e24 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e34:	68e9      	ldr	r1, [r5, #12]
 8003e36:	4b3a      	ldr	r3, [pc, #232]	@ (8003f20 <HAL_RCC_OscConfig+0x488>)
 8003e38:	6a22      	ldr	r2, [r4, #32]
 8003e3a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3c:	4e37      	ldr	r6, [pc, #220]	@ (8003f1c <HAL_RCC_OscConfig+0x484>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e3e:	400b      	ands	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8003e46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003e4a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8003e4e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8003e52:	3801      	subs	r0, #1
 8003e54:	0849      	lsrs	r1, r1, #1
 8003e56:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003e5a:	3901      	subs	r1, #1
 8003e5c:	0852      	lsrs	r2, r2, #1
 8003e5e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003e62:	3a01      	subs	r2, #1
 8003e64:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003e68:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8003e6a:	682b      	ldr	r3, [r5, #0]
 8003e6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e70:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e72:	68eb      	ldr	r3, [r5, #12]
 8003e74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e78:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003e7a:	f7fd fd05 	bl	8001888 <HAL_GetTick>
 8003e7e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e80:	e005      	b.n	8003e8e <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fd fd01 	bl	8001888 <HAL_GetTick>
 8003e86:	1b00      	subs	r0, r0, r4
 8003e88:	2802      	cmp	r0, #2
 8003e8a:	f63f af75 	bhi.w	8003d78 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	6833      	ldr	r3, [r6, #0]
 8003e90:	019a      	lsls	r2, r3, #6
 8003e92:	d5f6      	bpl.n	8003e82 <HAL_RCC_OscConfig+0x3ea>
 8003e94:	e6de      	b.n	8003c54 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e96:	4b21      	ldr	r3, [pc, #132]	@ (8003f1c <HAL_RCC_OscConfig+0x484>)
 8003e98:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003e9c:	f042 0204 	orr.w	r2, r2, #4
 8003ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8003ea4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb0:	e76f      	b.n	8003d92 <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	f43f af44 	beq.w	8003d40 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8003eb8:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	6a22      	ldr	r2, [r4, #32]
 8003ebc:	f003 0103 	and.w	r1, r3, #3
 8003ec0:	4291      	cmp	r1, r2
 8003ec2:	f47f af3d 	bne.w	8003d40 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003ec8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ecc:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003ed2:	f47f af35 	bne.w	8003d40 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003ed8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003edc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003ee0:	f47f af2e 	bne.w	8003d40 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ee4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003ee6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eea:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8003eee:	f47f af27 	bne.w	8003d40 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ef4:	0852      	lsrs	r2, r2, #1
 8003ef6:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8003efa:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003efc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003f00:	f47f af1e 	bne.w	8003d40 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f04:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003f06:	0852      	lsrs	r2, r2, #1
 8003f08:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8003f0c:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f0e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003f12:	bf14      	ite	ne
 8003f14:	2001      	movne	r0, #1
 8003f16:	2000      	moveq	r0, #0
 8003f18:	e69d      	b.n	8003c56 <HAL_RCC_OscConfig+0x1be>
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	019f800c 	.word	0x019f800c

08003f24 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	b087      	sub	sp, #28
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	9303      	str	r3, [sp, #12]
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8003f2c:	2502      	movs	r5, #2
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e9cd 5301 	strd	r5, r3, [sp, #4]
  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8003f34:	4f0f      	ldr	r7, [pc, #60]	@ (8003f74 <HAL_RCC_MCOConfig+0x50>)
{
 8003f36:	4604      	mov	r4, r0
 8003f38:	4616      	mov	r6, r2
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8003f3a:	f3c0 4003 	ubfx	r0, r0, #16, #4
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8003f3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f40:	2301      	movs	r3, #1
 8003f42:	4083      	lsls	r3, r0
 8003f44:	4313      	orrs	r3, r2
 8003f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8003f48:	f500 1090 	add.w	r0, r0, #1179648	@ 0x120000

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8003f4c:	b2a3      	uxth	r3, r4
 8003f4e:	9300      	str	r3, [sp, #0]
{
 8003f50:	460d      	mov	r5, r1
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8003f52:	f3c4 5307 	ubfx	r3, r4, #20, #8
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8003f56:	0280      	lsls	r0, r0, #10
 8003f58:	4669      	mov	r1, sp
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8003f5a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8003f5c:	f7fe fe46 	bl	8002bec <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8003f60:	00e3      	lsls	r3, r4, #3
 8003f62:	d405      	bmi.n	8003f70 <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003f6a:	4333      	orrs	r3, r6
 8003f6c:	432b      	orrs	r3, r5
 8003f6e:	60bb      	str	r3, [r7, #8]
  }
}
 8003f70:	b007      	add	sp, #28
 8003f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f74:	40021000 	.word	0x40021000

08003f78 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f78:	4b18      	ldr	r3, [pc, #96]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x64>)
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	f002 020c 	and.w	r2, r2, #12
 8003f80:	2a04      	cmp	r2, #4
 8003f82:	d026      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	f002 020c 	and.w	r2, r2, #12
 8003f8a:	2a08      	cmp	r2, #8
 8003f8c:	d023      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	f002 020c 	and.w	r2, r2, #12
 8003f94:	2a0c      	cmp	r2, #12
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8003f98:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8003f9a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f9c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f9e:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fa0:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fa2:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8003fa6:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fa8:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fac:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fb0:	bf0c      	ite	eq
 8003fb2:	4b0b      	ldreq	r3, [pc, #44]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fb4:	4b0b      	ldrne	r3, [pc, #44]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fb6:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fbc:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x64>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003fc8:	3301      	adds	r3, #1
 8003fca:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003fcc:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003fd0:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003fd2:	4804      	ldr	r0, [pc, #16]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003fd4:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003fd6:	4802      	ldr	r0, [pc, #8]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x68>)
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	017d7840 	.word	0x017d7840
 8003fe4:	00f42400 	.word	0x00f42400

08003fe8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	f000 80ee 	beq.w	80041ca <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fee:	4a78      	ldr	r2, [pc, #480]	@ (80041d0 <HAL_RCC_ClockConfig+0x1e8>)
{
 8003ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff4:	6813      	ldr	r3, [r2, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	428b      	cmp	r3, r1
 8003ffc:	460d      	mov	r5, r1
 8003ffe:	4604      	mov	r4, r0
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	6813      	ldr	r3, [r2, #0]
 8004004:	f023 030f 	bic.w	r3, r3, #15
 8004008:	430b      	orrs	r3, r1
 800400a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400c:	6813      	ldr	r3, [r2, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	428b      	cmp	r3, r1
 8004014:	d002      	beq.n	800401c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004016:	2001      	movs	r0, #1
}
 8004018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	07df      	lsls	r7, r3, #31
 8004020:	d569      	bpl.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004022:	6867      	ldr	r7, [r4, #4]
 8004024:	2f03      	cmp	r7, #3
 8004026:	f000 80a0 	beq.w	800416a <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402a:	4b6a      	ldr	r3, [pc, #424]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402c:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004030:	f000 8097 	beq.w	8004162 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004034:	055b      	lsls	r3, r3, #21
 8004036:	d5ee      	bpl.n	8004016 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004038:	f7ff ff9e 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800403c:	4b66      	ldr	r3, [pc, #408]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
 800403e:	4298      	cmp	r0, r3
 8004040:	f240 80c0 	bls.w	80041c4 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004044:	4a63      	ldr	r2, [pc, #396]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004046:	6893      	ldr	r3, [r2, #8]
 8004048:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800404c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004050:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004052:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4e5f      	ldr	r6, [pc, #380]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004058:	68b3      	ldr	r3, [r6, #8]
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	433b      	orrs	r3, r7
 8004060:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004062:	f7fd fc11 	bl	8001888 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004066:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800406a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406c:	e004      	b.n	8004078 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406e:	f7fd fc0b 	bl	8001888 <HAL_GetTick>
 8004072:	1bc0      	subs	r0, r0, r7
 8004074:	4540      	cmp	r0, r8
 8004076:	d871      	bhi.n	800415c <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004078:	68b3      	ldr	r3, [r6, #8]
 800407a:	6862      	ldr	r2, [r4, #4]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004084:	d1f3      	bne.n	800406e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	079f      	lsls	r7, r3, #30
 800408a:	d436      	bmi.n	80040fa <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 800408c:	f1b9 0f00 	cmp.w	r9, #0
 8004090:	d003      	beq.n	800409a <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004092:	68b3      	ldr	r3, [r6, #8]
 8004094:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004098:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800409a:	4e4d      	ldr	r6, [pc, #308]	@ (80041d0 <HAL_RCC_ClockConfig+0x1e8>)
 800409c:	6833      	ldr	r3, [r6, #0]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	42ab      	cmp	r3, r5
 80040a4:	d846      	bhi.n	8004134 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	075a      	lsls	r2, r3, #29
 80040aa:	d506      	bpl.n	80040ba <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	4949      	ldr	r1, [pc, #292]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 80040ae:	68e0      	ldr	r0, [r4, #12]
 80040b0:	688a      	ldr	r2, [r1, #8]
 80040b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040b6:	4302      	orrs	r2, r0
 80040b8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ba:	071b      	lsls	r3, r3, #28
 80040bc:	d507      	bpl.n	80040ce <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040be:	4a45      	ldr	r2, [pc, #276]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 80040c0:	6921      	ldr	r1, [r4, #16]
 80040c2:	6893      	ldr	r3, [r2, #8]
 80040c4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80040c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040cc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ce:	f7ff ff53 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 80040d2:	4a40      	ldr	r2, [pc, #256]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 80040d4:	4c41      	ldr	r4, [pc, #260]	@ (80041dc <HAL_RCC_ClockConfig+0x1f4>)
 80040d6:	6892      	ldr	r2, [r2, #8]
 80040d8:	4941      	ldr	r1, [pc, #260]	@ (80041e0 <HAL_RCC_ClockConfig+0x1f8>)
 80040da:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80040de:	4603      	mov	r3, r0
 80040e0:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80040e2:	4840      	ldr	r0, [pc, #256]	@ (80041e4 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040e4:	f002 021f 	and.w	r2, r2, #31
 80040e8:	40d3      	lsrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80040ec:	6800      	ldr	r0, [r0, #0]
}
 80040ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80040f2:	f7fd bb87 	b.w	8001804 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f6:	079e      	lsls	r6, r3, #30
 80040f8:	d5cf      	bpl.n	800409a <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fa:	0758      	lsls	r0, r3, #29
 80040fc:	d504      	bpl.n	8004108 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fe:	4935      	ldr	r1, [pc, #212]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004100:	688a      	ldr	r2, [r1, #8]
 8004102:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004106:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	0719      	lsls	r1, r3, #28
 800410a:	d506      	bpl.n	800411a <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800410c:	4a31      	ldr	r2, [pc, #196]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800410e:	6893      	ldr	r3, [r2, #8]
 8004110:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004114:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004118:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411a:	4a2e      	ldr	r2, [pc, #184]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800411c:	68a1      	ldr	r1, [r4, #8]
 800411e:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004120:	4e2b      	ldr	r6, [pc, #172]	@ (80041d0 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004122:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004126:	430b      	orrs	r3, r1
 8004128:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800412a:	6833      	ldr	r3, [r6, #0]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	42ab      	cmp	r3, r5
 8004132:	d9b8      	bls.n	80040a6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004134:	6833      	ldr	r3, [r6, #0]
 8004136:	f023 030f 	bic.w	r3, r3, #15
 800413a:	432b      	orrs	r3, r5
 800413c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800413e:	f7fd fba3 	bl	8001888 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004142:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004146:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004148:	6833      	ldr	r3, [r6, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	42ab      	cmp	r3, r5
 8004150:	d0a9      	beq.n	80040a6 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004152:	f7fd fb99 	bl	8001888 <HAL_GetTick>
 8004156:	1bc0      	subs	r0, r0, r7
 8004158:	4540      	cmp	r0, r8
 800415a:	d9f5      	bls.n	8004148 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 800415c:	2003      	movs	r0, #3
}
 800415e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004162:	039a      	lsls	r2, r3, #14
 8004164:	f53f af68 	bmi.w	8004038 <HAL_RCC_ClockConfig+0x50>
 8004168:	e755      	b.n	8004016 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416a:	4a1a      	ldr	r2, [pc, #104]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	0188      	lsls	r0, r1, #6
 8004170:	f57f af51 	bpl.w	8004016 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004174:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004176:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004178:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800417a:	4e17      	ldr	r6, [pc, #92]	@ (80041d8 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800417c:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8004180:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004182:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004186:	bf0c      	ite	eq
 8004188:	4817      	ldreq	r0, [pc, #92]	@ (80041e8 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800418a:	4818      	ldrne	r0, [pc, #96]	@ (80041ec <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800418c:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800418e:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004192:	4810      	ldr	r0, [pc, #64]	@ (80041d4 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004194:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004198:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800419c:	68c1      	ldr	r1, [r0, #12]
 800419e:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80041a2:	3101      	adds	r1, #1
 80041a4:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80041a6:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80041aa:	42b2      	cmp	r2, r6
 80041ac:	d90a      	bls.n	80041c4 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041ae:	6882      	ldr	r2, [r0, #8]
 80041b0:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 80041b4:	f43f af46 	beq.w	8004044 <HAL_RCC_ClockConfig+0x5c>
 80041b8:	0799      	lsls	r1, r3, #30
 80041ba:	d503      	bpl.n	80041c4 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041bc:	68a3      	ldr	r3, [r4, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f43f af40 	beq.w	8004044 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041c4:	f04f 0900 	mov.w	r9, #0
 80041c8:	e745      	b.n	8004056 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 80041ca:	2001      	movs	r0, #1
}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40022000 	.word	0x40022000
 80041d4:	40021000 	.word	0x40021000
 80041d8:	04c4b400 	.word	0x04c4b400
 80041dc:	0800632c 	.word	0x0800632c
 80041e0:	20000000 	.word	0x20000000
 80041e4:	20000010 	.word	0x20000010
 80041e8:	017d7840 	.word	0x017d7840
 80041ec:	00f42400 	.word	0x00f42400

080041f0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <HAL_RCC_GetPCLK1Freq+0x18>)
 80041f2:	4a06      	ldr	r2, [pc, #24]	@ (800420c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80041f4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80041f6:	4906      	ldr	r1, [pc, #24]	@ (8004210 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80041fc:	6808      	ldr	r0, [r1, #0]
 80041fe:	5cd3      	ldrb	r3, [r2, r3]
 8004200:	f003 031f 	and.w	r3, r3, #31
}
 8004204:	40d8      	lsrs	r0, r3
 8004206:	4770      	bx	lr
 8004208:	40021000 	.word	0x40021000
 800420c:	08006324 	.word	0x08006324
 8004210:	20000000 	.word	0x20000000

08004214 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004216:	4a06      	ldr	r2, [pc, #24]	@ (8004230 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004218:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800421a:	4906      	ldr	r1, [pc, #24]	@ (8004234 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800421c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004220:	6808      	ldr	r0, [r1, #0]
 8004222:	5cd3      	ldrb	r3, [r2, r3]
 8004224:	f003 031f 	and.w	r3, r3, #31
}
 8004228:	40d8      	lsrs	r0, r3
 800422a:	4770      	bx	lr
 800422c:	40021000 	.word	0x40021000
 8004230:	08006324 	.word	0x08006324
 8004234:	20000000 	.word	0x20000000

08004238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800423c:	6803      	ldr	r3, [r0, #0]
{
 800423e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004240:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8004244:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004246:	d052      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004248:	4bac      	ldr	r3, [pc, #688]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800424a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800424c:	00d5      	lsls	r5, r2, #3
 800424e:	f140 813a 	bpl.w	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    FlagStatus       pwrclkchanged = RESET;
 8004252:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004254:	4daa      	ldr	r5, [pc, #680]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004256:	682b      	ldr	r3, [r5, #0]
 8004258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800425c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425e:	f7fd fb13 	bl	8001888 <HAL_GetTick>
 8004262:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004264:	e005      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004266:	f7fd fb0f 	bl	8001888 <HAL_GetTick>
 800426a:	1b83      	subs	r3, r0, r6
 800426c:	2b02      	cmp	r3, #2
 800426e:	f200 8135 	bhi.w	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004272:	682b      	ldr	r3, [r5, #0]
 8004274:	05d8      	lsls	r0, r3, #23
 8004276:	d5f6      	bpl.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004278:	4da0      	ldr	r5, [pc, #640]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800427a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800427c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004280:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004284:	d026      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004286:	4293      	cmp	r3, r2
 8004288:	d024      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800428a:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800428e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004296:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800429a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800429e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a2:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a6:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042aa:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80042ac:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b0:	d510      	bpl.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd fae9 	bl	8001888 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80042ba:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042bc:	e005      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fd fae3 	bl	8001888 <HAL_GetTick>
 80042c2:	1b80      	subs	r0, r0, r6
 80042c4:	4540      	cmp	r0, r8
 80042c6:	f200 8109 	bhi.w	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ca:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80042ce:	079b      	lsls	r3, r3, #30
 80042d0:	d5f5      	bpl.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80042d4:	4989      	ldr	r1, [pc, #548]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d6:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80042da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042e4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042e6:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 80042e8:	2f00      	cmp	r7, #0
 80042ea:	f040 80fc 	bne.w	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ee:	07dd      	lsls	r5, r3, #31
 80042f0:	d508      	bpl.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f2:	4982      	ldr	r1, [pc, #520]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f4:	6865      	ldr	r5, [r4, #4]
 80042f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80042fa:	f022 0203 	bic.w	r2, r2, #3
 80042fe:	432a      	orrs	r2, r5
 8004300:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004304:	0799      	lsls	r1, r3, #30
 8004306:	d508      	bpl.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004308:	497c      	ldr	r1, [pc, #496]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800430a:	68a5      	ldr	r5, [r4, #8]
 800430c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004310:	f022 020c 	bic.w	r2, r2, #12
 8004314:	432a      	orrs	r2, r5
 8004316:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800431a:	075a      	lsls	r2, r3, #29
 800431c:	d508      	bpl.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800431e:	4977      	ldr	r1, [pc, #476]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004320:	68e5      	ldr	r5, [r4, #12]
 8004322:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004326:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800432a:	432a      	orrs	r2, r5
 800432c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004330:	071f      	lsls	r7, r3, #28
 8004332:	d508      	bpl.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004334:	4971      	ldr	r1, [pc, #452]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004336:	6925      	ldr	r5, [r4, #16]
 8004338:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800433c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004340:	432a      	orrs	r2, r5
 8004342:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004346:	06de      	lsls	r6, r3, #27
 8004348:	d508      	bpl.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800434a:	496c      	ldr	r1, [pc, #432]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800434c:	6965      	ldr	r5, [r4, #20]
 800434e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004352:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004356:	432a      	orrs	r2, r5
 8004358:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800435c:	069d      	lsls	r5, r3, #26
 800435e:	d508      	bpl.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004360:	4966      	ldr	r1, [pc, #408]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004362:	69a5      	ldr	r5, [r4, #24]
 8004364:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004368:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800436c:	432a      	orrs	r2, r5
 800436e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004372:	0659      	lsls	r1, r3, #25
 8004374:	d508      	bpl.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004376:	4961      	ldr	r1, [pc, #388]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004378:	69e5      	ldr	r5, [r4, #28]
 800437a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800437e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004382:	432a      	orrs	r2, r5
 8004384:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004388:	061a      	lsls	r2, r3, #24
 800438a:	d508      	bpl.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438c:	495b      	ldr	r1, [pc, #364]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800438e:	6a25      	ldr	r5, [r4, #32]
 8004390:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004394:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004398:	432a      	orrs	r2, r5
 800439a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800439e:	05df      	lsls	r7, r3, #23
 80043a0:	d508      	bpl.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043a2:	4956      	ldr	r1, [pc, #344]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80043a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80043aa:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80043ae:	432a      	orrs	r2, r5
 80043b0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043b4:	039e      	lsls	r6, r3, #14
 80043b6:	d508      	bpl.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043b8:	4950      	ldr	r1, [pc, #320]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043ba:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80043bc:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 80043c0:	f022 0203 	bic.w	r2, r2, #3
 80043c4:	432a      	orrs	r2, r5
 80043c6:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043ca:	059d      	lsls	r5, r3, #22
 80043cc:	d508      	bpl.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ce:	494b      	ldr	r1, [pc, #300]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d0:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80043d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80043d6:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80043da:	432a      	orrs	r2, r5
 80043dc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043e0:	0559      	lsls	r1, r3, #21
 80043e2:	d50b      	bpl.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e4:	4945      	ldr	r1, [pc, #276]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80043e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80043ec:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80043f0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043f2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043fa:	d07a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043fc:	051a      	lsls	r2, r3, #20
 80043fe:	d50b      	bpl.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004400:	493e      	ldr	r1, [pc, #248]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004402:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8004404:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004408:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800440c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800440e:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004412:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004416:	d075      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2cc>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004418:	04df      	lsls	r7, r3, #19
 800441a:	d50b      	bpl.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800441c:	4937      	ldr	r1, [pc, #220]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800441e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8004420:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004424:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004428:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800442a:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800442e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004432:	d06c      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004434:	049e      	lsls	r6, r3, #18
 8004436:	d50b      	bpl.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004438:	4930      	ldr	r1, [pc, #192]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800443a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800443c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004440:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004444:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004446:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800444a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800444e:	d063      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004450:	045d      	lsls	r5, r3, #17
 8004452:	d50b      	bpl.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004454:	4929      	ldr	r1, [pc, #164]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004456:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8004458:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800445c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004460:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004462:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004466:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800446a:	d05a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800446c:	0419      	lsls	r1, r3, #16
 800446e:	d50b      	bpl.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004470:	4922      	ldr	r1, [pc, #136]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004472:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8004474:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004478:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800447c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800447e:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004482:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004486:	d051      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004488:	03da      	lsls	r2, r3, #15
 800448a:	d50b      	bpl.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800448c:	491b      	ldr	r1, [pc, #108]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800448e:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8004490:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004494:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8004498:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800449a:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800449e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80044a2:	d048      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044a4:	035b      	lsls	r3, r3, #13
 80044a6:	d50b      	bpl.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044a8:	4a14      	ldr	r2, [pc, #80]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044aa:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80044ac:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80044b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80044b4:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80044b6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044ba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80044be:	d03f      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x308>
  }

#endif /* QUADSPI */

  return status;
}
 80044c0:	b002      	add	sp, #8
 80044c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80044c8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80044cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80044d8:	2701      	movs	r7, #1
 80044da:	e6bb      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044dc:	6823      	ldr	r3, [r4, #0]
        status = ret;
 80044de:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 80044e0:	2f00      	cmp	r7, #0
 80044e2:	f43f af04 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e6:	4905      	ldr	r1, [pc, #20]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044e8:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80044ea:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80044ee:	658a      	str	r2, [r1, #88]	@ 0x58
 80044f0:	e6fd      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f2:	68ca      	ldr	r2, [r1, #12]
 80044f4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80044f8:	60ca      	str	r2, [r1, #12]
 80044fa:	e77f      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80044fc:	40021000 	.word	0x40021000
 8004500:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004504:	68ca      	ldr	r2, [r1, #12]
 8004506:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800450a:	60ca      	str	r2, [r1, #12]
 800450c:	e784      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800450e:	68ca      	ldr	r2, [r1, #12]
 8004510:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004514:	60ca      	str	r2, [r1, #12]
 8004516:	e78d      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004518:	68ca      	ldr	r2, [r1, #12]
 800451a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800451e:	60ca      	str	r2, [r1, #12]
 8004520:	e796      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x218>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004522:	68ca      	ldr	r2, [r1, #12]
 8004524:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004528:	60ca      	str	r2, [r1, #12]
 800452a:	e79f      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800452c:	68ca      	ldr	r2, [r1, #12]
 800452e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004532:	60ca      	str	r2, [r1, #12]
 8004534:	e7a8      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004536:	68ca      	ldr	r2, [r1, #12]
 8004538:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800453c:	60ca      	str	r2, [r1, #12]
 800453e:	e7b1      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004540:	68d3      	ldr	r3, [r2, #12]
 8004542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004546:	60d3      	str	r3, [r2, #12]
}
 8004548:	b002      	add	sp, #8
 800454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800454e:	bf00      	nop

08004550 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004554:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004556:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004558:	460e      	mov	r6, r1
 800455a:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800455c:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004560:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004562:	f7fd f991 	bl	8001888 <HAL_GetTick>
 8004566:	4437      	add	r7, r6
 8004568:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800456a:	f7fd f98d 	bl	8001888 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800456e:	4b32      	ldr	r3, [pc, #200]	@ (8004638 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004570:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004578:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800457c:	0d1b      	lsrs	r3, r3, #20
 800457e:	fb07 f303 	mul.w	r3, r7, r3
 8004582:	3601      	adds	r6, #1
 8004584:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004586:	d111      	bne.n	80045ac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8004588:	68a3      	ldr	r3, [r4, #8]
 800458a:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800458e:	d009      	beq.n	80045a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004590:	7b23      	ldrb	r3, [r4, #12]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004598:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800459c:	68a3      	ldr	r3, [r4, #8]
 800459e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80045a2:	d1f5      	bne.n	8004590 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 80045a4:	2000      	movs	r0, #0
}
 80045a6:	b002      	add	sp, #8
 80045a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ac:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045ae:	4623      	mov	r3, r4
 80045b0:	e013      	b.n	80045da <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 80045b2:	7b23      	ldrb	r3, [r4, #12]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80045ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045be:	f7fd f963 	bl	8001888 <HAL_GetTick>
 80045c2:	eba0 0008 	sub.w	r0, r0, r8
 80045c6:	42b8      	cmp	r0, r7
 80045c8:	d20c      	bcs.n	80045e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 80045ca:	9a01      	ldr	r2, [sp, #4]
      count--;
 80045cc:	9b01      	ldr	r3, [sp, #4]
 80045ce:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 80045d0:	2a00      	cmp	r2, #0
      count--;
 80045d2:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d4:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 80045d6:	bf08      	it	eq
 80045d8:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80045e0:	d1e7      	bne.n	80045b2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 80045e2:	e7df      	b.n	80045a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e4:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e8:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ea:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045f2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f4:	d013      	beq.n	800461e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045f6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80045f8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80045fc:	d107      	bne.n	800460e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800460c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800460e:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004610:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8004612:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004616:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800461a:	2003      	movs	r0, #3
 800461c:	e7c3      	b.n	80045a6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800461e:	68aa      	ldr	r2, [r5, #8]
 8004620:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004624:	d002      	beq.n	800462c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004626:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800462a:	d1e4      	bne.n	80045f6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e7df      	b.n	80045f6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 8004636:	bf00      	nop
 8004638:	20000000 	.word	0x20000000

0800463c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004640:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8004642:	2300      	movs	r3, #0
{
 8004644:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 8004646:	f88d 3007 	strb.w	r3, [sp, #7]
 800464a:	eb01 0902 	add.w	r9, r1, r2
{
 800464e:	4617      	mov	r7, r2
 8004650:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004652:	f7fd f919 	bl	8001888 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004656:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 800477c <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800465a:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 800465e:	f7fd f913 	bl	8001888 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004662:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 8004666:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004668:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800466c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004670:	0d1b      	lsrs	r3, r3, #20
 8004672:	fb0a f303 	mul.w	r3, sl, r3
 8004676:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8004678:	1c73      	adds	r3, r6, #1
 800467a:	bf18      	it	ne
 800467c:	4683      	movne	fp, r0
 800467e:	d130      	bne.n	80046e2 <SPI_EndRxTxTransaction+0xa6>
 8004680:	68a3      	ldr	r3, [r4, #8]
 8004682:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8004686:	d1fb      	bne.n	8004680 <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004688:	f7fd f8fe 	bl	8001888 <HAL_GetTick>
 800468c:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8004690:	f7fd f8fa 	bl	8001888 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004694:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004698:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800469a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800469e:	fb09 f303 	mul.w	r3, r9, r3
 80046a2:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 80046a4:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046a6:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046a8:	d130      	bne.n	800470c <SPI_EndRxTxTransaction+0xd0>
 80046aa:	68a3      	ldr	r3, [r4, #8]
 80046ac:	061a      	lsls	r2, r3, #24
 80046ae:	d4fc      	bmi.n	80046aa <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046b0:	463a      	mov	r2, r7
 80046b2:	4631      	mov	r1, r6
 80046b4:	4628      	mov	r0, r5
 80046b6:	f7ff ff4b 	bl	8004550 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80046ba:	bb58      	cbnz	r0, 8004714 <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80046bc:	b005      	add	sp, #20
 80046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046c2:	f7fd f8e1 	bl	8001888 <HAL_GetTick>
 80046c6:	eba0 000b 	sub.w	r0, r0, fp
 80046ca:	4582      	cmp	sl, r0
 80046cc:	d92a      	bls.n	8004724 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 80046ce:	9a02      	ldr	r2, [sp, #8]
      count--;
 80046d0:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80046d2:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 80046d4:	2a00      	cmp	r2, #0
      count--;
 80046d6:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80046da:	bf08      	it	eq
 80046dc:	f04f 0a00 	moveq.w	sl, #0
      count--;
 80046e0:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80046e2:	68a3      	ldr	r3, [r4, #8]
 80046e4:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80046e8:	d1eb      	bne.n	80046c2 <SPI_EndRxTxTransaction+0x86>
 80046ea:	e7cd      	b.n	8004688 <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046ec:	f7fd f8cc 	bl	8001888 <HAL_GetTick>
 80046f0:	eba0 0008 	sub.w	r0, r0, r8
 80046f4:	4581      	cmp	r9, r0
 80046f6:	d915      	bls.n	8004724 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 80046f8:	9a03      	ldr	r2, [sp, #12]
      count--;
 80046fa:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fc:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 80046fe:	2a00      	cmp	r2, #0
      count--;
 8004700:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004704:	bf08      	it	eq
 8004706:	f04f 0900 	moveq.w	r9, #0
      count--;
 800470a:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800470c:	68a3      	ldr	r3, [r4, #8]
 800470e:	061b      	lsls	r3, r3, #24
 8004710:	d4ec      	bmi.n	80046ec <SPI_EndRxTxTransaction+0xb0>
 8004712:	e7cd      	b.n	80046b0 <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004714:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004716:	f043 0320 	orr.w	r3, r3, #32
 800471a:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800471c:	2003      	movs	r0, #3
}
 800471e:	b005      	add	sp, #20
 8004720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004724:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004728:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800472e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004732:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004734:	d016      	beq.n	8004764 <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004736:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8004738:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800473c:	d107      	bne.n	800474e <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800474c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800474e:	2301      	movs	r3, #1
 8004750:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004754:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8004756:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004758:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800475c:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004760:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004762:	e7db      	b.n	800471c <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004764:	68aa      	ldr	r2, [r5, #8]
 8004766:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800476a:	d002      	beq.n	8004772 <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800476c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004770:	d1e1      	bne.n	8004736 <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	e7dc      	b.n	8004736 <SPI_EndRxTxTransaction+0xfa>
 800477c:	20000000 	.word	0x20000000

08004780 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004780:	2800      	cmp	r0, #0
 8004782:	d077      	beq.n	8004874 <HAL_SPI_Init+0xf4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004784:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8004786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800478c:	2a00      	cmp	r2, #0
 800478e:	d057      	beq.n	8004840 <HAL_SPI_Init+0xc0>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004790:	2300      	movs	r3, #0
 8004792:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004796:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479a:	2100      	movs	r1, #0
 800479c:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800479e:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d05a      	beq.n	800485c <HAL_SPI_Init+0xdc>
  __HAL_SPI_DISABLE(hspi);
 80047a6:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047a8:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80047aa:	2302      	movs	r3, #2
 80047ac:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80047b0:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047b2:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80047b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ba:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047bc:	d846      	bhi.n	800484c <HAL_SPI_Init+0xcc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047be:	d154      	bne.n	800486a <HAL_SPI_Init+0xea>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047c0:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047c2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047c6:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047ce:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047d2:	6862      	ldr	r2, [r4, #4]
 80047d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047d8:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 80047dc:	431a      	orrs	r2, r3
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	4313      	orrs	r3, r2
 80047e6:	6962      	ldr	r2, [r4, #20]
 80047e8:	f002 0201 	and.w	r2, r2, #1
 80047ec:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047f0:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047fc:	69e3      	ldr	r3, [r4, #28]
 80047fe:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8004802:	6a23      	ldr	r3, [r4, #32]
 8004804:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8004808:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 800480c:	4313      	orrs	r3, r2
 800480e:	ea43 0308 	orr.w	r3, r3, r8
 8004812:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004814:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004816:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004818:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800481c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800481e:	ea4e 0306 	orr.w	r3, lr, r6
 8004822:	ea43 030c 	orr.w	r3, r3, ip
 8004826:	4303      	orrs	r3, r0
 8004828:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482a:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800482c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004832:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004834:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004836:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004838:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
}
 800483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004840:	6843      	ldr	r3, [r0, #4]
 8004842:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004846:	d0a6      	beq.n	8004796 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004848:	61c2      	str	r2, [r0, #28]
 800484a:	e7a4      	b.n	8004796 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800484c:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8004850:	d112      	bne.n	8004878 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004852:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004854:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004856:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800485a:	e7b6      	b.n	80047ca <HAL_SPI_Init+0x4a>
    hspi->Lock = HAL_UNLOCKED;
 800485c:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8004860:	4620      	mov	r0, r4
 8004862:	f7fc fa29 	bl	8000cb8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004866:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004868:	e79d      	b.n	80047a6 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800486a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800486e:	2500      	movs	r5, #0
 8004870:	62a5      	str	r5, [r4, #40]	@ 0x28
 8004872:	e7aa      	b.n	80047ca <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8004874:	2001      	movs	r0, #1
}
 8004876:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004878:	2000      	movs	r0, #0
 800487a:	e7f8      	b.n	800486e <HAL_SPI_Init+0xee>

0800487c <HAL_SPI_Transmit>:
{
 800487c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004880:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004882:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 8004886:	2801      	cmp	r0, #1
{
 8004888:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 800488a:	d07a      	beq.n	8004982 <HAL_SPI_Transmit+0x106>
 800488c:	461d      	mov	r5, r3
 800488e:	2301      	movs	r3, #1
 8004890:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004894:	4689      	mov	r9, r1
 8004896:	4690      	mov	r8, r2
 8004898:	f7fc fff6 	bl	8001888 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800489c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80048a0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80048a2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80048a4:	b2df      	uxtb	r7, r3
 80048a6:	d007      	beq.n	80048b8 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 80048a8:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 80048ae:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80048b2:	b003      	add	sp, #12
 80048b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 80048b8:	f1b9 0f00 	cmp.w	r9, #0
 80048bc:	d0f5      	beq.n	80048aa <HAL_SPI_Transmit+0x2e>
 80048be:	f1b8 0f00 	cmp.w	r8, #0
 80048c2:	d0f2      	beq.n	80048aa <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c4:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80048c6:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048c8:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048cc:	2100      	movs	r1, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048ce:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048d4:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 80048d8:	e9c4 1113 	strd	r1, r1, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048dc:	6621      	str	r1, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 80048de:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80048e2:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048e6:	6421      	str	r1, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80048e8:	f8a4 1044 	strh.w	r1, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80048ec:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 80048f0:	4618      	mov	r0, r3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f2:	d070      	beq.n	80049d6 <HAL_SPI_Transmit+0x15a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	0652      	lsls	r2, r2, #25
 80048f8:	d403      	bmi.n	8004902 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004900:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004902:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004904:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004906:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800490a:	d93f      	bls.n	800498c <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490c:	2900      	cmp	r1, #0
 800490e:	f000 80a2 	beq.w	8004a56 <HAL_SPI_Transmit+0x1da>
 8004912:	f1b8 0f01 	cmp.w	r8, #1
 8004916:	f000 809e 	beq.w	8004a56 <HAL_SPI_Transmit+0x1da>
    while (hspi->TxXferCount > 0U)
 800491a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800491c:	b292      	uxth	r2, r2
 800491e:	b1ba      	cbz	r2, 8004950 <HAL_SPI_Transmit+0xd4>
 8004920:	1c69      	adds	r1, r5, #1
 8004922:	f040 808f 	bne.w	8004a44 <HAL_SPI_Transmit+0x1c8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	0792      	lsls	r2, r2, #30
 800492a:	f140 80ac 	bpl.w	8004a86 <HAL_SPI_Transmit+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800492e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004930:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004934:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8004936:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800493a:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800493c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004940:	fa1f fc8c 	uxth.w	ip, ip
 8004944:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004948:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800494a:	b292      	uxth	r2, r2
 800494c:	2a00      	cmp	r2, #0
 800494e:	d1ea      	bne.n	8004926 <HAL_SPI_Transmit+0xaa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004950:	4632      	mov	r2, r6
 8004952:	4629      	mov	r1, r5
 8004954:	4620      	mov	r0, r4
 8004956:	f7ff fe71 	bl	800463c <SPI_EndRxTxTransaction>
 800495a:	b108      	cbz	r0, 8004960 <HAL_SPI_Transmit+0xe4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800495c:	2320      	movs	r3, #32
 800495e:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	b933      	cbnz	r3, 8004972 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	68d3      	ldr	r3, [r2, #12]
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	6893      	ldr	r3, [r2, #8]
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004972:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004974:	2b00      	cmp	r3, #0
 8004976:	d198      	bne.n	80048aa <HAL_SPI_Transmit+0x2e>
    hspi->State = HAL_SPI_STATE_READY;
 8004978:	2201      	movs	r2, #1
 800497a:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 800497e:	461f      	mov	r7, r3
 8004980:	e793      	b.n	80048aa <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8004982:	2702      	movs	r7, #2
}
 8004984:	4638      	mov	r0, r7
 8004986:	b003      	add	sp, #12
 8004988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498c:	2900      	cmp	r1, #0
 800498e:	d06c      	beq.n	8004a6a <HAL_SPI_Transmit+0x1ee>
 8004990:	f1b8 0f01 	cmp.w	r8, #1
 8004994:	d069      	beq.n	8004a6a <HAL_SPI_Transmit+0x1ee>
    while (hspi->TxXferCount > 0U)
 8004996:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0d8      	beq.n	8004950 <HAL_SPI_Transmit+0xd4>
 800499e:	1c68      	adds	r0, r5, #1
 80049a0:	d012      	beq.n	80049c8 <HAL_SPI_Transmit+0x14c>
 80049a2:	e033      	b.n	8004a0c <HAL_SPI_Transmit+0x190>
        if (hspi->TxXferCount > 1U)
 80049a4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ac:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 80049ae:	d973      	bls.n	8004a98 <HAL_SPI_Transmit+0x21c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049b0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80049b4:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 80049b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b8:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049ba:	3b02      	subs	r3, #2
 80049bc:	b29b      	uxth	r3, r3
 80049be:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80049c0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80049c2:	b289      	uxth	r1, r1
 80049c4:	2900      	cmp	r1, #0
 80049c6:	d0c3      	beq.n	8004950 <HAL_SPI_Transmit+0xd4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	6893      	ldr	r3, [r2, #8]
 80049cc:	0799      	lsls	r1, r3, #30
 80049ce:	d4e9      	bmi.n	80049a4 <HAL_SPI_Transmit+0x128>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d0:	f7fc ff5a 	bl	8001888 <HAL_GetTick>
 80049d4:	e7f4      	b.n	80049c0 <HAL_SPI_Transmit+0x144>
    __HAL_SPI_DISABLE(hspi);
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e785      	b.n	80048f4 <HAL_SPI_Transmit+0x78>
        if (hspi->TxXferCount > 1U)
 80049e8:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80049ec:	b292      	uxth	r2, r2
 80049ee:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f0:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 80049f2:	d966      	bls.n	8004ac2 <HAL_SPI_Transmit+0x246>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f4:	f831 2b02 	ldrh.w	r2, [r1], #2
 80049f8:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80049fa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049fc:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049fe:	3b02      	subs	r3, #2
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004a04:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0a1      	beq.n	8004950 <HAL_SPI_Transmit+0xd4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	0792      	lsls	r2, r2, #30
 8004a12:	d4e9      	bmi.n	80049e8 <HAL_SPI_Transmit+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a14:	f7fc ff38 	bl	8001888 <HAL_GetTick>
 8004a18:	1b83      	subs	r3, r0, r6
 8004a1a:	42ab      	cmp	r3, r5
 8004a1c:	d3f2      	bcc.n	8004a04 <HAL_SPI_Transmit+0x188>
          hspi->State = HAL_SPI_STATE_READY;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8004a24:	2703      	movs	r7, #3
 8004a26:	e740      	b.n	80048aa <HAL_SPI_Transmit+0x2e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a28:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004a2a:	f832 3b02 	ldrh.w	r3, [r2], #2
 8004a2e:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8004a30:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a32:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004a3a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d086      	beq.n	8004950 <HAL_SPI_Transmit+0xd4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	6883      	ldr	r3, [r0, #8]
 8004a46:	079b      	lsls	r3, r3, #30
 8004a48:	d4ee      	bmi.n	8004a28 <HAL_SPI_Transmit+0x1ac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a4a:	f7fc ff1d 	bl	8001888 <HAL_GetTick>
 8004a4e:	1b83      	subs	r3, r0, r6
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	d3f2      	bcc.n	8004a3a <HAL_SPI_Transmit+0x1be>
 8004a54:	e7e3      	b.n	8004a1e <HAL_SPI_Transmit+0x1a2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a56:	4649      	mov	r1, r9
 8004a58:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004a5c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004a5e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a60:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a62:	3a01      	subs	r2, #1
 8004a64:	b292      	uxth	r2, r2
 8004a66:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 8004a68:	e757      	b.n	800491a <HAL_SPI_Transmit+0x9e>
      if (hspi->TxXferCount > 1U)
 8004a6a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004a6c:	b292      	uxth	r2, r2
 8004a6e:	2a01      	cmp	r2, #1
 8004a70:	d91c      	bls.n	8004aac <HAL_SPI_Transmit+0x230>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a72:	4649      	mov	r1, r9
 8004a74:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004a78:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8004a7a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7c:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004a7e:	3b02      	subs	r3, #2
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004a84:	e787      	b.n	8004996 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a86:	f7fc feff 	bl	8001888 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8004a8a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f43f af5e 	beq.w	8004950 <HAL_SPI_Transmit+0xd4>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	e746      	b.n	8004926 <HAL_SPI_Transmit+0xaa>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a98:	7803      	ldrb	r3, [r0, #0]
 8004a9a:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8004a9c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8004a9e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004aa0:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8004aa2:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8004aa4:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8004aa6:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004aa8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004aaa:	e789      	b.n	80049c0 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aac:	f899 2000 	ldrb.w	r2, [r9]
 8004ab0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8004ab2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ab8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004ac0:	e769      	b.n	8004996 <HAL_SPI_Transmit+0x11a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ac2:	7802      	ldrb	r2, [r0, #0]
 8004ac4:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8004ac6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8004ac8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004aca:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8004acc:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8004ace:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8004ad0:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004ad2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004ad4:	e796      	b.n	8004a04 <HAL_SPI_Transmit+0x188>
 8004ad6:	bf00      	nop

08004ad8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	f000 8099 	beq.w	8004c10 <HAL_TIM_Base_Init+0x138>
{
 8004ade:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d07d      	beq.n	8004bea <HAL_TIM_Base_Init+0x112>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aee:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af0:	4948      	ldr	r1, [pc, #288]	@ (8004c14 <HAL_TIM_Base_Init+0x13c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004af2:	2202      	movs	r2, #2
 8004af4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af8:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8004afa:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004afc:	d061      	beq.n	8004bc2 <HAL_TIM_Base_Init+0xea>
 8004afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b02:	d029      	beq.n	8004b58 <HAL_TIM_Base_Init+0x80>
 8004b04:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	d025      	beq.n	8004b58 <HAL_TIM_Base_Init+0x80>
 8004b0c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004b10:	428b      	cmp	r3, r1
 8004b12:	d021      	beq.n	8004b58 <HAL_TIM_Base_Init+0x80>
 8004b14:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004b18:	428b      	cmp	r3, r1
 8004b1a:	d01d      	beq.n	8004b58 <HAL_TIM_Base_Init+0x80>
 8004b1c:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8004b20:	428b      	cmp	r3, r1
 8004b22:	d04e      	beq.n	8004bc2 <HAL_TIM_Base_Init+0xea>
 8004b24:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	d04a      	beq.n	8004bc2 <HAL_TIM_Base_Init+0xea>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b2c:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 8004b30:	428b      	cmp	r3, r1
 8004b32:	d05f      	beq.n	8004bf4 <HAL_TIM_Base_Init+0x11c>
 8004b34:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	d05b      	beq.n	8004bf4 <HAL_TIM_Base_Init+0x11c>
 8004b3c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004b40:	428b      	cmp	r3, r1
 8004b42:	d057      	beq.n	8004bf4 <HAL_TIM_Base_Init+0x11c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b44:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b46:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b48:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b4e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004b50:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b52:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b54:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b56:	e010      	b.n	8004b7a <HAL_TIM_Base_Init+0xa2>
    tmpcr1 |= Structure->CounterMode;
 8004b58:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b5c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b60:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b62:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b66:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b68:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b6e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b70:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8004b72:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004b74:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b76:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b78:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	07d2      	lsls	r2, r2, #31
 8004b82:	d503      	bpl.n	8004b8c <HAL_TIM_Base_Init+0xb4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b92:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004b96:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004b9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004b9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004ba2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004baa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004bae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004bb2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004bb6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004bba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004bbe:	2000      	movs	r0, #0
}
 8004bc0:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004bc2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004bca:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bcc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd0:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd2:	69a1      	ldr	r1, [r4, #24]
 8004bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bd8:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8004bda:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bdc:	68e2      	ldr	r2, [r4, #12]
 8004bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004be0:	6862      	ldr	r2, [r4, #4]
 8004be2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004be4:	6962      	ldr	r2, [r4, #20]
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004be8:	e7c7      	b.n	8004b7a <HAL_TIM_Base_Init+0xa2>
    htim->Lock = HAL_UNLOCKED;
 8004bea:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004bee:	f7fc f89f 	bl	8000d30 <HAL_TIM_Base_MspInit>
 8004bf2:	e77c      	b.n	8004aee <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfc:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c02:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c04:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8004c06:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004c08:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c0a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c0c:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c0e:	e7e9      	b.n	8004be4 <HAL_TIM_Base_Init+0x10c>
    return HAL_ERROR;
 8004c10:	2001      	movs	r0, #1
}
 8004c12:	4770      	bx	lr
 8004c14:	40012c00 	.word	0x40012c00

08004c18 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004c18:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d12f      	bne.n	8004c80 <HAL_TIM_Base_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c20:	6803      	ldr	r3, [r0, #0]
 8004c22:	4a18      	ldr	r2, [pc, #96]	@ (8004c84 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c26:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2c:	d01a      	beq.n	8004c64 <HAL_TIM_Base_Start+0x4c>
 8004c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c32:	d017      	beq.n	8004c64 <HAL_TIM_Base_Start+0x4c>
 8004c34:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <HAL_TIM_Base_Start+0x4c>
 8004c3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00f      	beq.n	8004c64 <HAL_TIM_Base_Start+0x4c>
 8004c44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <HAL_TIM_Base_Start+0x4c>
 8004c4c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <HAL_TIM_Base_Start+0x4c>
 8004c54:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <HAL_TIM_Base_Start+0x4c>
 8004c5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d107      	bne.n	8004c74 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c64:	6899      	ldr	r1, [r3, #8]
 8004c66:	4a08      	ldr	r2, [pc, #32]	@ (8004c88 <HAL_TIM_Base_Start+0x70>)
 8004c68:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6a:	2a06      	cmp	r2, #6
 8004c6c:	d006      	beq.n	8004c7c <HAL_TIM_Base_Start+0x64>
 8004c6e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004c72:	d003      	beq.n	8004c7c <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	4770      	bx	lr
    return HAL_ERROR;
 8004c80:	2001      	movs	r0, #1
}
 8004c82:	4770      	bx	lr
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	00010007 	.word	0x00010007

08004c8c <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8004c8c:	6803      	ldr	r3, [r0, #0]
 8004c8e:	6a19      	ldr	r1, [r3, #32]
 8004c90:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004c94:	4211      	tst	r1, r2
 8004c96:	d108      	bne.n	8004caa <HAL_TIM_Base_Stop+0x1e>
 8004c98:	6a19      	ldr	r1, [r3, #32]
 8004c9a:	f244 4244 	movw	r2, #17476	@ 0x4444
 8004c9e:	4211      	tst	r1, r2
 8004ca0:	d103      	bne.n	8004caa <HAL_TIM_Base_Stop+0x1e>
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d04e      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 8004cbc:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cbe:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cc0:	4d27      	ldr	r5, [pc, #156]	@ (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cc8:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8004cca:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ccc:	680c      	ldr	r4, [r1, #0]
 8004cce:	4684      	mov	ip, r0
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cd2:	d02c      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cd4:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004cd8:	42aa      	cmp	r2, r5
 8004cda:	d033      	beq.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004cdc:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8004ce0:	42aa      	cmp	r2, r5
 8004ce2:	d024      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cec:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cee:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8004cf2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d00b      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d007      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d003      	beq.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004d0c:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d104      	bne.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d14:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d16:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1a:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d1c:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004d1e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004d26:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  return HAL_OK;
}
 8004d2a:	bc30      	pop	{r4, r5}
 8004d2c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d2e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d34:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d3e:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8004d40:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d42:	e7e7      	b.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x60>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d44:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d4a:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d4c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d54:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 8004d56:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d58:	e7dc      	b.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  __HAL_LOCK(htim);
 8004d5a:	2002      	movs	r0, #2
}
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40000400 	.word	0x40000400

08004d68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d6c:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6e:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8004d72:	2820      	cmp	r0, #32
 8004d74:	d151      	bne.n	8004e1a <HAL_UART_Transmit+0xb2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d76:	4688      	mov	r8, r1
 8004d78:	b109      	cbz	r1, 8004d7e <HAL_UART_Transmit+0x16>
 8004d7a:	4617      	mov	r7, r2
 8004d7c:	b912      	cbnz	r2, 8004d84 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d84:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d86:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d8a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8c:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d90:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8004d94:	f7fc fd78 	bl	8001888 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d98:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8004d9a:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8004da2:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 8004da6:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da8:	d046      	beq.n	8004e38 <HAL_UART_Transmit+0xd0>
    while (huart->TxXferCount > 0U)
 8004daa:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dae:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8004db0:	b292      	uxth	r2, r2
 8004db2:	b1aa      	cbz	r2, 8004de0 <HAL_UART_Transmit+0x78>
 8004db4:	1c68      	adds	r0, r5, #1
 8004db6:	d125      	bne.n	8004e04 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	0612      	lsls	r2, r2, #24
 8004dbc:	d5fc      	bpl.n	8004db8 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8004dbe:	f1b8 0f00 	cmp.w	r8, #0
 8004dc2:	d025      	beq.n	8004e10 <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dc4:	f818 2b01 	ldrb.w	r2, [r8], #1
 8004dc8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8004dca:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8004dce:	3a01      	subs	r2, #1
 8004dd0:	b292      	uxth	r2, r2
 8004dd2:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004dd6:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8004dda:	b292      	uxth	r2, r2
 8004ddc:	2a00      	cmp	r2, #0
 8004dde:	d1e9      	bne.n	8004db4 <HAL_UART_Transmit+0x4c>
 8004de0:	1c69      	adds	r1, r5, #1
 8004de2:	d125      	bne.n	8004e30 <HAL_UART_Transmit+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	0652      	lsls	r2, r2, #25
 8004de8:	d5fc      	bpl.n	8004de4 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8004dea:	2320      	movs	r3, #32
 8004dec:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8004df0:	2000      	movs	r0, #0
 8004df2:	e7c5      	b.n	8004d80 <HAL_UART_Transmit+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df4:	f7fc fd48 	bl	8001888 <HAL_GetTick>
 8004df8:	1b80      	subs	r0, r0, r6
 8004dfa:	4285      	cmp	r5, r0
 8004dfc:	d322      	bcc.n	8004e44 <HAL_UART_Transmit+0xdc>
 8004dfe:	b30d      	cbz	r5, 8004e44 <HAL_UART_Transmit+0xdc>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	0617      	lsls	r7, r2, #24
 8004e08:	d5f4      	bpl.n	8004df4 <HAL_UART_Transmit+0x8c>
      if (pdata8bits == NULL)
 8004e0a:	f1b8 0f00 	cmp.w	r8, #0
 8004e0e:	d1d9      	bne.n	8004dc4 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e10:	f839 2b02 	ldrh.w	r2, [r9], #2
 8004e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e18:	e7d6      	b.n	8004dc8 <HAL_UART_Transmit+0x60>
    return HAL_BUSY;
 8004e1a:	2002      	movs	r0, #2
}
 8004e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e20:	f7fc fd32 	bl	8001888 <HAL_GetTick>
 8004e24:	1b83      	subs	r3, r0, r6
 8004e26:	429d      	cmp	r5, r3
 8004e28:	d30c      	bcc.n	8004e44 <HAL_UART_Transmit+0xdc>
 8004e2a:	b15d      	cbz	r5, 8004e44 <HAL_UART_Transmit+0xdc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	065b      	lsls	r3, r3, #25
 8004e34:	d5f4      	bpl.n	8004e20 <HAL_UART_Transmit+0xb8>
 8004e36:	e7d8      	b.n	8004dea <HAL_UART_Transmit+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1b5      	bne.n	8004daa <HAL_UART_Transmit+0x42>
 8004e3e:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8004e40:	4698      	mov	r8, r3
 8004e42:	e7b2      	b.n	8004daa <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 8004e44:	2320      	movs	r3, #32
 8004e46:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8004e4a:	2003      	movs	r0, #3
}
 8004e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004e50 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop

08004e54 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop

08004e58 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop

08004e5c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop

08004e60 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e60:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e62:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e64:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
{
 8004e68:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e6a:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	0612      	lsls	r2, r2, #24
 8004e72:	d501      	bpl.n	8004e78 <UART_DMAError+0x18>
 8004e74:	2921      	cmp	r1, #33	@ 0x21
 8004e76:	d00d      	beq.n	8004e94 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	0652      	lsls	r2, r2, #25
 8004e7c:	d501      	bpl.n	8004e82 <UART_DMAError+0x22>
 8004e7e:	2c22      	cmp	r4, #34	@ 0x22
 8004e80:	d023      	beq.n	8004eca <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e82:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8004e86:	f043 0310 	orr.w	r3, r3, #16
 8004e8a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e8e:	f7ff ffe5 	bl	8004e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e92:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004e9e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	e843 2100 	strex	r1, r2, [r3]
 8004ea6:	2900      	cmp	r1, #0
 8004ea8:	d1f7      	bne.n	8004e9a <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	f103 0208 	add.w	r2, r3, #8
 8004eae:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004eb2:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	f103 0c08 	add.w	ip, r3, #8
 8004eba:	e84c 2100 	strex	r1, r2, [ip]
 8004ebe:	2900      	cmp	r1, #0
 8004ec0:	d1f3      	bne.n	8004eaa <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 8004ec8:	e7d6      	b.n	8004e78 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ed4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	e843 2100 	strex	r1, r2, [r3]
 8004edc:	2900      	cmp	r1, #0
 8004ede:	d1f7      	bne.n	8004ed0 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ee0:	4c13      	ldr	r4, [pc, #76]	@ (8004f30 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	f103 0208 	add.w	r2, r3, #8
 8004ee6:	e852 2f00 	ldrex	r2, [r2]
 8004eea:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	f103 0c08 	add.w	ip, r3, #8
 8004ef0:	e84c 2100 	strex	r1, r2, [ip]
 8004ef4:	2900      	cmp	r1, #0
 8004ef6:	d1f4      	bne.n	8004ee2 <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8004efa:	2a01      	cmp	r2, #1
 8004efc:	d006      	beq.n	8004f0c <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efe:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxISR = NULL;
 8004f06:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f08:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 8004f0a:	e7ba      	b.n	8004e82 <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f10:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	e843 2100 	strex	r1, r2, [r3]
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	d0f0      	beq.n	8004efe <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	e853 2f00 	ldrex	r2, [r3]
 8004f20:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	e843 2100 	strex	r1, r2, [r3]
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	d1ef      	bne.n	8004f0c <UART_DMAError+0xac>
 8004f2c:	e7e7      	b.n	8004efe <UART_DMAError+0x9e>
 8004f2e:	bf00      	nop
 8004f30:	effffffe 	.word	0xeffffffe

08004f34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f34:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f36:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004f3e:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f42:	f7ff ff8b 	bl	8004e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f46:	bd08      	pop	{r3, pc}

08004f48 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f48:	6803      	ldr	r3, [r0, #0]
 8004f4a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f4c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f4e:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 8004f52:	ea12 0f0c 	tst.w	r2, ip
{
 8004f56:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f58:	689d      	ldr	r5, [r3, #8]
{
 8004f5a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8004f5c:	d145      	bne.n	8004fea <HAL_UART_IRQHandler+0xa2>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f5e:	0696      	lsls	r6, r2, #26
 8004f60:	d507      	bpl.n	8004f72 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f62:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f66:	f005 5e80 	and.w	lr, r5, #268435456	@ 0x10000000
 8004f6a:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8004f6e:	f040 8106 	bne.w	800517e <HAL_UART_IRQHandler+0x236>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f72:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8004f74:	2801      	cmp	r0, #1
 8004f76:	f000 80d3 	beq.w	8005120 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f7a:	02d6      	lsls	r6, r2, #11
 8004f7c:	d41d      	bmi.n	8004fba <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f7e:	0616      	lsls	r6, r2, #24
 8004f80:	d506      	bpl.n	8004f90 <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f82:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f86:	f001 0080 	and.w	r0, r1, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f8a:	4328      	orrs	r0, r5
 8004f8c:	f040 80fe 	bne.w	800518c <HAL_UART_IRQHandler+0x244>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f90:	0650      	lsls	r0, r2, #25
 8004f92:	d51c      	bpl.n	8004fce <HAL_UART_IRQHandler+0x86>
 8004f94:	064e      	lsls	r6, r1, #25
 8004f96:	d51a      	bpl.n	8004fce <HAL_UART_IRQHandler+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	e843 2100 	strex	r1, r2, [r3]
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	d1f7      	bne.n	8004f98 <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fa8:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004faa:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004fac:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 8004fb0:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f7ff ff4c 	bl	8004e50 <HAL_UART_TxCpltCallback>
}
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fba:	0268      	lsls	r0, r5, #9
 8004fbc:	d5df      	bpl.n	8004f7e <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fbe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004fc2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004fca:	f000 bd4d 	b.w	8005a68 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004fce:	0215      	lsls	r5, r2, #8
 8004fd0:	d502      	bpl.n	8004fd8 <HAL_UART_IRQHandler+0x90>
 8004fd2:	0048      	lsls	r0, r1, #1
 8004fd4:	f100 80ff 	bmi.w	80051d6 <HAL_UART_IRQHandler+0x28e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004fd8:	01d3      	lsls	r3, r2, #7
 8004fda:	d5ed      	bpl.n	8004fb8 <HAL_UART_IRQHandler+0x70>
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	daeb      	bge.n	8004fb8 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004fe0:	4620      	mov	r0, r4
}
 8004fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004fe6:	f000 bd41 	b.w	8005a6c <HAL_UARTEx_RxFifoFullCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004fea:	48b7      	ldr	r0, [pc, #732]	@ (80052c8 <HAL_UART_IRQHandler+0x380>)
 8004fec:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ff0:	48b6      	ldr	r0, [pc, #728]	@ (80052cc <HAL_UART_IRQHandler+0x384>)
 8004ff2:	4008      	ands	r0, r1
 8004ff4:	ea50 000c 	orrs.w	r0, r0, ip
 8004ff8:	d0bb      	beq.n	8004f72 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ffa:	07d6      	lsls	r6, r2, #31
 8004ffc:	d509      	bpl.n	8005012 <HAL_UART_IRQHandler+0xca>
 8004ffe:	05c8      	lsls	r0, r1, #23
 8005000:	d507      	bpl.n	8005012 <HAL_UART_IRQHandler+0xca>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005002:	2001      	movs	r0, #1
 8005004:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005006:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800500a:	f040 0001 	orr.w	r0, r0, #1
 800500e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005012:	0796      	lsls	r6, r2, #30
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005014:	f002 0004 	and.w	r0, r2, #4
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005018:	f140 80aa 	bpl.w	8005170 <HAL_UART_IRQHandler+0x228>
 800501c:	07ee      	lsls	r6, r5, #31
 800501e:	d510      	bpl.n	8005042 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005020:	2602      	movs	r6, #2
 8005022:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005024:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8005028:	f046 0604 	orr.w	r6, r6, #4
 800502c:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005030:	b138      	cbz	r0, 8005042 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005032:	2004      	movs	r0, #4
 8005034:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005036:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800503a:	f040 0002 	orr.w	r0, r0, #2
 800503e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005042:	0710      	lsls	r0, r2, #28
 8005044:	d50c      	bpl.n	8005060 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005046:	f001 0020 	and.w	r0, r1, #32
 800504a:	ea50 000c 	orrs.w	r0, r0, ip
 800504e:	d007      	beq.n	8005060 <HAL_UART_IRQHandler+0x118>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005050:	2008      	movs	r0, #8
 8005052:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005054:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8005058:	f040 0008 	orr.w	r0, r0, #8
 800505c:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005060:	0516      	lsls	r6, r2, #20
 8005062:	d50a      	bpl.n	800507a <HAL_UART_IRQHandler+0x132>
 8005064:	0148      	lsls	r0, r1, #5
 8005066:	d508      	bpl.n	800507a <HAL_UART_IRQHandler+0x132>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005068:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800506c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800506e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8005072:	f040 0020 	orr.w	r0, r0, #32
 8005076:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800507a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800507e:	2800      	cmp	r0, #0
 8005080:	d09a      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005082:	0696      	lsls	r6, r2, #26
 8005084:	d506      	bpl.n	8005094 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005086:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800508a:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 800508e:	4329      	orrs	r1, r5
 8005090:	f040 8095 	bne.w	80051be <HAL_UART_IRQHandler+0x276>
      errorcode = huart->ErrorCode;
 8005094:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005098:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800509a:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800509e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80050a2:	ea52 0501 	orrs.w	r5, r2, r1
 80050a6:	f000 80cc 	beq.w	8005242 <HAL_UART_IRQHandler+0x2fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ae:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	e843 2100 	strex	r1, r2, [r3]
 80050b6:	2900      	cmp	r1, #0
 80050b8:	d1f7      	bne.n	80050aa <HAL_UART_IRQHandler+0x162>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050ba:	4885      	ldr	r0, [pc, #532]	@ (80052d0 <HAL_UART_IRQHandler+0x388>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	f103 0208 	add.w	r2, r3, #8
 80050c0:	e852 2f00 	ldrex	r2, [r2]
 80050c4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	f103 0508 	add.w	r5, r3, #8
 80050ca:	e845 2100 	strex	r1, r2, [r5]
 80050ce:	2900      	cmp	r1, #0
 80050d0:	d1f4      	bne.n	80050bc <HAL_UART_IRQHandler+0x174>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80050d4:	2a01      	cmp	r2, #1
 80050d6:	d061      	beq.n	800519c <HAL_UART_IRQHandler+0x254>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80050da:	2120      	movs	r1, #32
 80050dc:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	66e2      	str	r2, [r4, #108]	@ 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e2:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 80050e4:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e6:	064d      	lsls	r5, r1, #25
 80050e8:	d571      	bpl.n	80051ce <HAL_UART_IRQHandler+0x286>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	f103 0208 	add.w	r2, r3, #8
 80050ee:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	f103 0008 	add.w	r0, r3, #8
 80050fa:	e840 2100 	strex	r1, r2, [r0]
 80050fe:	2900      	cmp	r1, #0
 8005100:	d1f3      	bne.n	80050ea <HAL_UART_IRQHandler+0x1a2>
          if (huart->hdmarx != NULL)
 8005102:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005106:	2800      	cmp	r0, #0
 8005108:	d061      	beq.n	80051ce <HAL_UART_IRQHandler+0x286>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800510a:	4b72      	ldr	r3, [pc, #456]	@ (80052d4 <HAL_UART_IRQHandler+0x38c>)
 800510c:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800510e:	f7fd fce3 	bl	8002ad8 <HAL_DMA_Abort_IT>
 8005112:	2800      	cmp	r0, #0
 8005114:	f43f af50 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005118:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800511c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800511e:	e032      	b.n	8005186 <HAL_UART_IRQHandler+0x23e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005120:	06d0      	lsls	r0, r2, #27
 8005122:	f57f af2a 	bpl.w	8004f7a <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005126:	06ce      	lsls	r6, r1, #27
 8005128:	f57f af27 	bpl.w	8004f7a <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800512c:	2210      	movs	r2, #16
 800512e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005130:	6899      	ldr	r1, [r3, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005132:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005136:	0648      	lsls	r0, r1, #25
 8005138:	f140 8089 	bpl.w	800524e <HAL_UART_IRQHandler+0x306>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800513c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005140:	6805      	ldr	r5, [r0, #0]
 8005142:	6869      	ldr	r1, [r5, #4]
 8005144:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8005146:	2900      	cmp	r1, #0
 8005148:	f000 80b6 	beq.w	80052b8 <HAL_UART_IRQHandler+0x370>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800514c:	4291      	cmp	r1, r2
 800514e:	f080 80b3 	bcs.w	80052b8 <HAL_UART_IRQHandler+0x370>
        huart->RxXferCount = nb_remaining_rx_data;
 8005152:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005156:	6829      	ldr	r1, [r5, #0]
 8005158:	0689      	lsls	r1, r1, #26
 800515a:	d541      	bpl.n	80051e0 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800515c:	2302      	movs	r3, #2
 800515e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005160:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 8005164:	1a51      	subs	r1, r2, r1
 8005166:	4620      	mov	r0, r4
 8005168:	b289      	uxth	r1, r1
 800516a:	f7fc f80b 	bl	8001184 <HAL_UARTEx_RxEventCallback>
}
 800516e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005170:	2800      	cmp	r0, #0
 8005172:	f43f af66 	beq.w	8005042 <HAL_UART_IRQHandler+0xfa>
 8005176:	07ee      	lsls	r6, r5, #31
 8005178:	f53f af5b 	bmi.w	8005032 <HAL_UART_IRQHandler+0xea>
 800517c:	e761      	b.n	8005042 <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 800517e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8005180:	2b00      	cmp	r3, #0
 8005182:	f43f af19 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x70>
}
 8005186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800518a:	4718      	bx	r3
    if (huart->TxISR != NULL)
 800518c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800518e:	2b00      	cmp	r3, #0
 8005190:	f43f af12 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 8005194:	4620      	mov	r0, r4
}
 8005196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800519a:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	e843 2100 	strex	r1, r2, [r3]
 80051a8:	2900      	cmp	r1, #0
 80051aa:	d095      	beq.n	80050d8 <HAL_UART_IRQHandler+0x190>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	e853 2f00 	ldrex	r2, [r3]
 80051b0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	e843 2100 	strex	r1, r2, [r3]
 80051b8:	2900      	cmp	r1, #0
 80051ba:	d1ef      	bne.n	800519c <HAL_UART_IRQHandler+0x254>
 80051bc:	e78c      	b.n	80050d8 <HAL_UART_IRQHandler+0x190>
        if (huart->RxISR != NULL)
 80051be:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80051c0:	2a00      	cmp	r2, #0
 80051c2:	f43f af67 	beq.w	8005094 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80051c6:	4620      	mov	r0, r4
 80051c8:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	e762      	b.n	8005094 <HAL_UART_IRQHandler+0x14c>
            HAL_UART_ErrorCallback(huart);
 80051ce:	4620      	mov	r0, r4
 80051d0:	f7ff fe44 	bl	8004e5c <HAL_UART_ErrorCallback>
}
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80051d6:	4620      	mov	r0, r4
}
 80051d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80051dc:	f000 bc48 	b.w	8005a70 <HAL_UARTEx_TxFifoEmptyCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	e843 2100 	strex	r1, r2, [r3]
 80051ec:	2900      	cmp	r1, #0
 80051ee:	d1f7      	bne.n	80051e0 <HAL_UART_IRQHandler+0x298>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	f103 0208 	add.w	r2, r3, #8
 80051f4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	f103 0508 	add.w	r5, r3, #8
 8005200:	e845 2100 	strex	r1, r2, [r5]
 8005204:	2900      	cmp	r1, #0
 8005206:	d1f3      	bne.n	80051f0 <HAL_UART_IRQHandler+0x2a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	f103 0208 	add.w	r2, r3, #8
 800520c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	f103 0508 	add.w	r5, r3, #8
 8005218:	e845 2100 	strex	r1, r2, [r5]
 800521c:	2900      	cmp	r1, #0
 800521e:	d1f3      	bne.n	8005208 <HAL_UART_IRQHandler+0x2c0>
          huart->RxState = HAL_UART_STATE_READY;
 8005220:	2220      	movs	r2, #32
 8005222:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005226:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	e843 2100 	strex	r1, r2, [r3]
 8005234:	2900      	cmp	r1, #0
 8005236:	d1f7      	bne.n	8005228 <HAL_UART_IRQHandler+0x2e0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005238:	f7fd fc14 	bl	8002a64 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800523c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
 8005240:	e78c      	b.n	800515c <HAL_UART_IRQHandler+0x214>
        HAL_UART_ErrorCallback(huart);
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff fe0a 	bl	8004e5c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 800524c:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800524e:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 8005252:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 8005256:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005258:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 800525a:	2900      	cmp	r1, #0
 800525c:	f43f aeac 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x70>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005260:	1a12      	subs	r2, r2, r0
 8005262:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8005264:	2900      	cmp	r1, #0
 8005266:	f43f aea7 	beq.w	8004fb8 <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800526e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	e843 2000 	strex	r0, r2, [r3]
 8005276:	2800      	cmp	r0, #0
 8005278:	d1f7      	bne.n	800526a <HAL_UART_IRQHandler+0x322>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800527a:	4d15      	ldr	r5, [pc, #84]	@ (80052d0 <HAL_UART_IRQHandler+0x388>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	f103 0208 	add.w	r2, r3, #8
 8005280:	e852 2f00 	ldrex	r2, [r2]
 8005284:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	f103 0608 	add.w	r6, r3, #8
 800528a:	e846 2000 	strex	r0, r2, [r6]
 800528e:	2800      	cmp	r0, #0
 8005290:	d1f4      	bne.n	800527c <HAL_UART_IRQHandler+0x334>
        huart->RxState = HAL_UART_STATE_READY;
 8005292:	2220      	movs	r2, #32
 8005294:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8005298:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	e843 2000 	strex	r0, r2, [r3]
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d1f7      	bne.n	800529c <HAL_UART_IRQHandler+0x354>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ac:	2302      	movs	r3, #2
 80052ae:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7fb ff67 	bl	8001184 <HAL_UARTEx_RxEventCallback>
}
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
        if (nb_remaining_rx_data == huart->RxXferSize)
 80052b8:	4291      	cmp	r1, r2
 80052ba:	f47f ae7d 	bne.w	8004fb8 <HAL_UART_IRQHandler+0x70>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80052be:	682b      	ldr	r3, [r5, #0]
 80052c0:	069b      	lsls	r3, r3, #26
 80052c2:	d4f3      	bmi.n	80052ac <HAL_UART_IRQHandler+0x364>
}
 80052c4:	bd70      	pop	{r4, r5, r6, pc}
 80052c6:	bf00      	nop
 80052c8:	10000001 	.word	0x10000001
 80052cc:	04000120 	.word	0x04000120
 80052d0:	effffffe 	.word	0xeffffffe
 80052d4:	08004f35 	.word	0x08004f35

080052d8 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052d8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80052da:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80052dc:	2301      	movs	r3, #1
 80052de:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d002      	beq.n	80052ec <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 80052e6:	f7ff fdb7 	bl	8004e58 <HAL_UART_RxHalfCpltCallback>
}
 80052ea:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052ec:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 80052f0:	0849      	lsrs	r1, r1, #1
 80052f2:	f7fb ff47 	bl	8001184 <HAL_UARTEx_RxEventCallback>
}
 80052f6:	bd08      	pop	{r3, pc}

080052f8 <UART_DMAReceiveCplt>:
{
 80052f8:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80052fa:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052fc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	f012 0220 	ands.w	r2, r2, #32
 8005304:	d128      	bne.n	8005358 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8005306:	6803      	ldr	r3, [r0, #0]
 8005308:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005310:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	e843 2100 	strex	r1, r2, [r3]
 8005318:	2900      	cmp	r1, #0
 800531a:	d1f7      	bne.n	800530c <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	f103 0208 	add.w	r2, r3, #8
 8005320:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005324:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	f103 0c08 	add.w	ip, r3, #8
 800532c:	e84c 2100 	strex	r1, r2, [ip]
 8005330:	2900      	cmp	r1, #0
 8005332:	d1f3      	bne.n	800531c <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	f103 0208 	add.w	r2, r3, #8
 8005338:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	f103 0c08 	add.w	ip, r3, #8
 8005344:	e84c 2100 	strex	r1, r2, [ip]
 8005348:	2900      	cmp	r1, #0
 800534a:	d1f3      	bne.n	8005334 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 800534c:	2220      	movs	r2, #32
 800534e:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005352:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8005354:	2a01      	cmp	r2, #1
 8005356:	d007      	beq.n	8005368 <UART_DMAReceiveCplt+0x70>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005358:	2300      	movs	r3, #0
 800535a:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800535c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d013      	beq.n	800538a <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8005362:	f7ff fd77 	bl	8004e54 <HAL_UART_RxCpltCallback>
}
 8005366:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	e843 2100 	strex	r1, r2, [r3]
 8005374:	2900      	cmp	r1, #0
 8005376:	d0ef      	beq.n	8005358 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	e853 2f00 	ldrex	r2, [r3]
 800537c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	e843 2100 	strex	r1, r2, [r3]
 8005384:	2900      	cmp	r1, #0
 8005386:	d1ef      	bne.n	8005368 <UART_DMAReceiveCplt+0x70>
 8005388:	e7e6      	b.n	8005358 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800538a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800538e:	f7fb fef9 	bl	8001184 <HAL_UARTEx_RxEventCallback>
}
 8005392:	bd08      	pop	{r3, pc}

08005394 <UART_SetConfig>:
{
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005398:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800539a:	6882      	ldr	r2, [r0, #8]
 800539c:	6900      	ldr	r0, [r0, #16]
 800539e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053a2:	4302      	orrs	r2, r0
 80053a4:	430a      	orrs	r2, r1
 80053a6:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a8:	49a0      	ldr	r1, [pc, #640]	@ (800562c <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053aa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053ac:	4029      	ands	r1, r5
 80053ae:	430a      	orrs	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053b6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80053bc:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053be:	499c      	ldr	r1, [pc, #624]	@ (8005630 <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053c2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053c4:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053c6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053c8:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 80053cc:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053d0:	f000 80d1 	beq.w	8005576 <UART_SetConfig+0x1e2>
    tmpreg |= huart->Init.OneBitSampling;
 80053d4:	6a26      	ldr	r6, [r4, #32]
 80053d6:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053de:	f022 020f 	bic.w	r2, r2, #15
 80053e2:	432a      	orrs	r2, r5
 80053e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e6:	4a93      	ldr	r2, [pc, #588]	@ (8005634 <UART_SetConfig+0x2a0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d039      	beq.n	8005460 <UART_SetConfig+0xcc>
 80053ec:	4a92      	ldr	r2, [pc, #584]	@ (8005638 <UART_SetConfig+0x2a4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d012      	beq.n	8005418 <UART_SetConfig+0x84>
 80053f2:	4a92      	ldr	r2, [pc, #584]	@ (800563c <UART_SetConfig+0x2a8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	f000 80a6 	beq.w	8005546 <UART_SetConfig+0x1b2>
 80053fa:	4a91      	ldr	r2, [pc, #580]	@ (8005640 <UART_SetConfig+0x2ac>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d043      	beq.n	8005488 <UART_SetConfig+0xf4>
 8005400:	4a90      	ldr	r2, [pc, #576]	@ (8005644 <UART_SetConfig+0x2b0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f000 808f 	beq.w	8005526 <UART_SetConfig+0x192>
        ret = HAL_ERROR;
 8005408:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800540a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800540c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8005410:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8005414:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 8005416:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005418:	4b8b      	ldr	r3, [pc, #556]	@ (8005648 <UART_SetConfig+0x2b4>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b0c      	cmp	r3, #12
 8005424:	d8f0      	bhi.n	8005408 <UART_SetConfig+0x74>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <UART_SetConfig+0x98>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	0800553b 	.word	0x0800553b
 8005430:	08005409 	.word	0x08005409
 8005434:	08005409 	.word	0x08005409
 8005438:	08005409 	.word	0x08005409
 800543c:	080054a1 	.word	0x080054a1
 8005440:	08005409 	.word	0x08005409
 8005444:	08005409 	.word	0x08005409
 8005448:	08005409 	.word	0x08005409
 800544c:	080054e9 	.word	0x080054e9
 8005450:	08005409 	.word	0x08005409
 8005454:	08005409 	.word	0x08005409
 8005458:	08005409 	.word	0x08005409
 800545c:	080054b9 	.word	0x080054b9
 8005460:	4b79      	ldr	r3, [pc, #484]	@ (8005648 <UART_SetConfig+0x2b4>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d03c      	beq.n	80054e8 <UART_SetConfig+0x154>
 800546e:	2b03      	cmp	r3, #3
 8005470:	d022      	beq.n	80054b8 <UART_SetConfig+0x124>
 8005472:	2b01      	cmp	r3, #1
 8005474:	d014      	beq.n	80054a0 <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005476:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800547a:	f000 80ce 	beq.w	800561a <UART_SetConfig+0x286>
        pclk = HAL_RCC_GetPCLK2Freq();
 800547e:	f7fe fec9 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005482:	b9a8      	cbnz	r0, 80054b0 <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 8005484:	2000      	movs	r0, #0
 8005486:	e7c0      	b.n	800540a <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005488:	4b6f      	ldr	r3, [pc, #444]	@ (8005648 <UART_SetConfig+0x2b4>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005492:	2b80      	cmp	r3, #128	@ 0x80
 8005494:	d028      	beq.n	80054e8 <UART_SetConfig+0x154>
 8005496:	d863      	bhi.n	8005560 <UART_SetConfig+0x1cc>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d04e      	beq.n	800553a <UART_SetConfig+0x1a6>
 800549c:	2b40      	cmp	r3, #64	@ 0x40
 800549e:	d1b3      	bne.n	8005408 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80054a4:	f000 80be 	beq.w	8005624 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 80054a8:	f7fe fd66 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d0e9      	beq.n	8005484 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80054b2:	e006      	b.n	80054c2 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b4:	2b30      	cmp	r3, #48	@ 0x30
 80054b6:	d1a7      	bne.n	8005408 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80054bc:	d018      	beq.n	80054f0 <UART_SetConfig+0x15c>
        pclk = (uint32_t) LSE_VALUE;
 80054be:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	4a61      	ldr	r2, [pc, #388]	@ (800564c <UART_SetConfig+0x2b8>)
 80054c6:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 80054ca:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ce:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80054d6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054da:	f1a0 0310 	sub.w	r3, r0, #16
 80054de:	4293      	cmp	r3, r2
 80054e0:	d892      	bhi.n	8005408 <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	60d8      	str	r0, [r3, #12]
 80054e6:	e7cd      	b.n	8005484 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80054ec:	4858      	ldr	r0, [pc, #352]	@ (8005650 <UART_SetConfig+0x2bc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ee:	d1e8      	bne.n	80054c2 <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f0:	6862      	ldr	r2, [r4, #4]
 80054f2:	4b56      	ldr	r3, [pc, #344]	@ (800564c <UART_SetConfig+0x2b8>)
 80054f4:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80054f8:	fbb0 f0f1 	udiv	r0, r0, r1
 80054fc:	0853      	lsrs	r3, r2, #1
 80054fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005502:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005506:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800550a:	f1a3 0210 	sub.w	r2, r3, #16
 800550e:	428a      	cmp	r2, r1
 8005510:	f63f af7a 	bhi.w	8005408 <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005514:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8005518:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800551a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800551c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005520:	4313      	orrs	r3, r2
 8005522:	60cb      	str	r3, [r1, #12]
 8005524:	e7ae      	b.n	8005484 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005526:	4b48      	ldr	r3, [pc, #288]	@ (8005648 <UART_SetConfig+0x2b4>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005534:	d0d8      	beq.n	80054e8 <UART_SetConfig+0x154>
 8005536:	d81a      	bhi.n	800556e <UART_SetConfig+0x1da>
 8005538:	b9ab      	cbnz	r3, 8005566 <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800553a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800553e:	d065      	beq.n	800560c <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005540:	f7fe fe56 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
        break;
 8005544:	e79d      	b.n	8005482 <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005546:	4b40      	ldr	r3, [pc, #256]	@ (8005648 <UART_SetConfig+0x2b4>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005550:	2b20      	cmp	r3, #32
 8005552:	d0c9      	beq.n	80054e8 <UART_SetConfig+0x154>
 8005554:	d8ae      	bhi.n	80054b4 <UART_SetConfig+0x120>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ef      	beq.n	800553a <UART_SetConfig+0x1a6>
 800555a:	2b10      	cmp	r3, #16
 800555c:	d0a0      	beq.n	80054a0 <UART_SetConfig+0x10c>
 800555e:	e753      	b.n	8005408 <UART_SetConfig+0x74>
 8005560:	2bc0      	cmp	r3, #192	@ 0xc0
 8005562:	d0a9      	beq.n	80054b8 <UART_SetConfig+0x124>
 8005564:	e750      	b.n	8005408 <UART_SetConfig+0x74>
 8005566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800556a:	d099      	beq.n	80054a0 <UART_SetConfig+0x10c>
 800556c:	e74c      	b.n	8005408 <UART_SetConfig+0x74>
 800556e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005572:	d0a1      	beq.n	80054b8 <UART_SetConfig+0x124>
 8005574:	e748      	b.n	8005408 <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005576:	4311      	orrs	r1, r2
 8005578:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800557a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800557c:	4932      	ldr	r1, [pc, #200]	@ (8005648 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800557e:	f022 020f 	bic.w	r2, r2, #15
 8005582:	432a      	orrs	r2, r5
 8005584:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005586:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800558a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800558e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005592:	d045      	beq.n	8005620 <UART_SetConfig+0x28c>
 8005594:	d833      	bhi.n	80055fe <UART_SetConfig+0x26a>
 8005596:	b37b      	cbz	r3, 80055f8 <UART_SetConfig+0x264>
 8005598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800559c:	f47f af34 	bne.w	8005408 <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 80055a0:	f7fe fcea 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f43f af6d 	beq.w	8005484 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055aa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ac:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055ae:	4b27      	ldr	r3, [pc, #156]	@ (800564c <UART_SetConfig+0x2b8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055b4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 80055b8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055bc:	4299      	cmp	r1, r3
 80055be:	f63f af23 	bhi.w	8005408 <UART_SetConfig+0x74>
 80055c2:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80055c6:	f63f af1f 	bhi.w	8005408 <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ca:	2300      	movs	r3, #0
 80055cc:	4619      	mov	r1, r3
 80055ce:	f7fa fe2b 	bl	8000228 <__aeabi_uldivmod>
 80055d2:	0872      	lsrs	r2, r6, #1
 80055d4:	0203      	lsls	r3, r0, #8
 80055d6:	0209      	lsls	r1, r1, #8
 80055d8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80055dc:	1898      	adds	r0, r3, r2
 80055de:	f141 0100 	adc.w	r1, r1, #0
 80055e2:	4632      	mov	r2, r6
 80055e4:	2300      	movs	r3, #0
 80055e6:	f7fa fe1f 	bl	8000228 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005654 <UART_SetConfig+0x2c0>)
 80055ec:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80055f0:	429a      	cmp	r2, r3
 80055f2:	f63f af09 	bhi.w	8005408 <UART_SetConfig+0x74>
 80055f6:	e774      	b.n	80054e2 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f8:	f7fe fdfa 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
        break;
 80055fc:	e7d2      	b.n	80055a4 <UART_SetConfig+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005602:	f47f af01 	bne.w	8005408 <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800560a:	e7cf      	b.n	80055ac <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 800560c:	f7fe fdf0 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005610:	2800      	cmp	r0, #0
 8005612:	f43f af37 	beq.w	8005484 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005616:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005618:	e76a      	b.n	80054f0 <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800561a:	f7fe fdfb 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
        break;
 800561e:	e7f7      	b.n	8005610 <UART_SetConfig+0x27c>
        pclk = (uint32_t) HSI_VALUE;
 8005620:	480b      	ldr	r0, [pc, #44]	@ (8005650 <UART_SetConfig+0x2bc>)
 8005622:	e7c3      	b.n	80055ac <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8005624:	f7fe fca8 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
        break;
 8005628:	e7f2      	b.n	8005610 <UART_SetConfig+0x27c>
 800562a:	bf00      	nop
 800562c:	cfff69f3 	.word	0xcfff69f3
 8005630:	40008000 	.word	0x40008000
 8005634:	40013800 	.word	0x40013800
 8005638:	40004400 	.word	0x40004400
 800563c:	40004800 	.word	0x40004800
 8005640:	40004c00 	.word	0x40004c00
 8005644:	40005000 	.word	0x40005000
 8005648:	40021000 	.word	0x40021000
 800564c:	0800637c 	.word	0x0800637c
 8005650:	00f42400 	.word	0x00f42400
 8005654:	000ffcff 	.word	0x000ffcff

08005658 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005658:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800565a:	071a      	lsls	r2, r3, #28
{
 800565c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800565e:	d506      	bpl.n	800566e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005660:	6801      	ldr	r1, [r0, #0]
 8005662:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005664:	684a      	ldr	r2, [r1, #4]
 8005666:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800566a:	4322      	orrs	r2, r4
 800566c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800566e:	07dc      	lsls	r4, r3, #31
 8005670:	d506      	bpl.n	8005680 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005672:	6801      	ldr	r1, [r0, #0]
 8005674:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005676:	684a      	ldr	r2, [r1, #4]
 8005678:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800567c:	4322      	orrs	r2, r4
 800567e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005680:	0799      	lsls	r1, r3, #30
 8005682:	d506      	bpl.n	8005692 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005684:	6801      	ldr	r1, [r0, #0]
 8005686:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005688:	684a      	ldr	r2, [r1, #4]
 800568a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800568e:	4322      	orrs	r2, r4
 8005690:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005692:	075a      	lsls	r2, r3, #29
 8005694:	d506      	bpl.n	80056a4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005696:	6801      	ldr	r1, [r0, #0]
 8005698:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800569a:	684a      	ldr	r2, [r1, #4]
 800569c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056a0:	4322      	orrs	r2, r4
 80056a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056a4:	06dc      	lsls	r4, r3, #27
 80056a6:	d506      	bpl.n	80056b6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a8:	6801      	ldr	r1, [r0, #0]
 80056aa:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80056ac:	688a      	ldr	r2, [r1, #8]
 80056ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056b2:	4322      	orrs	r2, r4
 80056b4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056b6:	0699      	lsls	r1, r3, #26
 80056b8:	d506      	bpl.n	80056c8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ba:	6801      	ldr	r1, [r0, #0]
 80056bc:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80056be:	688a      	ldr	r2, [r1, #8]
 80056c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056c4:	4322      	orrs	r2, r4
 80056c6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056c8:	065a      	lsls	r2, r3, #25
 80056ca:	d509      	bpl.n	80056e0 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056cc:	6801      	ldr	r1, [r0, #0]
 80056ce:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80056d0:	684a      	ldr	r2, [r1, #4]
 80056d2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80056d6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056d8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056dc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056de:	d00b      	beq.n	80056f8 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e0:	061b      	lsls	r3, r3, #24
 80056e2:	d506      	bpl.n	80056f2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056e4:	6802      	ldr	r2, [r0, #0]
 80056e6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80056e8:	6853      	ldr	r3, [r2, #4]
 80056ea:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80056ee:	430b      	orrs	r3, r1
 80056f0:	6053      	str	r3, [r2, #4]
}
 80056f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056f6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056f8:	684a      	ldr	r2, [r1, #4]
 80056fa:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80056fc:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005700:	4322      	orrs	r2, r4
 8005702:	604a      	str	r2, [r1, #4]
 8005704:	e7ec      	b.n	80056e0 <UART_AdvFeatureConfig+0x88>
 8005706:	bf00      	nop

08005708 <UART_CheckIdleState>:
{
 8005708:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570a:	2300      	movs	r3, #0
{
 800570c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8005712:	f7fc f8b9 	bl	8001888 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	6813      	ldr	r3, [r2, #0]
 800571a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 800571c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800571e:	d40f      	bmi.n	8005740 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005720:	6813      	ldr	r3, [r2, #0]
 8005722:	0759      	lsls	r1, r3, #29
 8005724:	d431      	bmi.n	800578a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005728:	2220      	movs	r2, #32
 800572a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 800572e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8005730:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005734:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005736:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8005738:	2300      	movs	r3, #0
 800573a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800573e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005740:	69d3      	ldr	r3, [r2, #28]
 8005742:	0298      	lsls	r0, r3, #10
 8005744:	d4ec      	bmi.n	8005720 <UART_CheckIdleState+0x18>
 8005746:	e00c      	b.n	8005762 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005748:	6819      	ldr	r1, [r3, #0]
 800574a:	0749      	lsls	r1, r1, #29
 800574c:	461a      	mov	r2, r3
 800574e:	d505      	bpl.n	800575c <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005750:	69d9      	ldr	r1, [r3, #28]
 8005752:	0708      	lsls	r0, r1, #28
 8005754:	d44a      	bmi.n	80057ec <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	0509      	lsls	r1, r1, #20
 800575a:	d475      	bmi.n	8005848 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	0298      	lsls	r0, r3, #10
 8005760:	d4de      	bmi.n	8005720 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005762:	f7fc f891 	bl	8001888 <HAL_GetTick>
 8005766:	1b43      	subs	r3, r0, r5
 8005768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800576c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576e:	d3eb      	bcc.n	8005748 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005774:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	e843 2100 	strex	r1, r2, [r3]
 800577c:	2900      	cmp	r1, #0
 800577e:	d1f7      	bne.n	8005770 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8005780:	2320      	movs	r3, #32
 8005782:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8005786:	2003      	movs	r0, #3
 8005788:	e7d6      	b.n	8005738 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578a:	69d3      	ldr	r3, [r2, #28]
 800578c:	025b      	lsls	r3, r3, #9
 800578e:	d4ca      	bmi.n	8005726 <UART_CheckIdleState+0x1e>
 8005790:	e00d      	b.n	80057ae <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	0750      	lsls	r0, r2, #29
 8005796:	d507      	bpl.n	80057a8 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	0711      	lsls	r1, r2, #28
 800579c:	f100 8082 	bmi.w	80058a4 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	0512      	lsls	r2, r2, #20
 80057a4:	f100 80ac 	bmi.w	8005900 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	025b      	lsls	r3, r3, #9
 80057ac:	d4bb      	bmi.n	8005726 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ae:	f7fc f86b 	bl	8001888 <HAL_GetTick>
 80057b2:	1b43      	subs	r3, r0, r5
 80057b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	d3ea      	bcc.n	8005792 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057c0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	e843 2100 	strex	r1, r2, [r3]
 80057c8:	2900      	cmp	r1, #0
 80057ca:	d1f7      	bne.n	80057bc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	f103 0208 	add.w	r2, r3, #8
 80057d0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	f103 0008 	add.w	r0, r3, #8
 80057dc:	e840 2100 	strex	r1, r2, [r0]
 80057e0:	2900      	cmp	r1, #0
 80057e2:	d1f3      	bne.n	80057cc <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 80057e4:	2320      	movs	r3, #32
 80057e6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80057ea:	e7cc      	b.n	8005786 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057ec:	2208      	movs	r2, #8
 80057ee:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057f4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	e843 2100 	strex	r1, r2, [r3]
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d1f7      	bne.n	80057f0 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005800:	4856      	ldr	r0, [pc, #344]	@ (800595c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	f103 0208 	add.w	r2, r3, #8
 8005806:	e852 2f00 	ldrex	r2, [r2]
 800580a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	f103 0508 	add.w	r5, r3, #8
 8005810:	e845 2100 	strex	r1, r2, [r5]
 8005814:	2900      	cmp	r1, #0
 8005816:	d1f4      	bne.n	8005802 <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800581a:	2a01      	cmp	r2, #1
 800581c:	d00b      	beq.n	8005836 <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005820:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005822:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005824:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8005828:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800582c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005830:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8005834:	e79c      	b.n	8005770 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	e843 2100 	strex	r1, r2, [r3]
 8005842:	2900      	cmp	r1, #0
 8005844:	d1f7      	bne.n	8005836 <UART_CheckIdleState+0x12e>
 8005846:	e7ea      	b.n	800581e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005848:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800584c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005852:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	e843 2100 	strex	r1, r2, [r3]
 800585a:	2900      	cmp	r1, #0
 800585c:	d1f7      	bne.n	800584e <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800585e:	483f      	ldr	r0, [pc, #252]	@ (800595c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	f103 0208 	add.w	r2, r3, #8
 8005864:	e852 2f00 	ldrex	r2, [r2]
 8005868:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	f103 0508 	add.w	r5, r3, #8
 800586e:	e845 2100 	strex	r1, r2, [r5]
 8005872:	2900      	cmp	r1, #0
 8005874:	d1f4      	bne.n	8005860 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005876:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005878:	2a01      	cmp	r2, #1
 800587a:	d00a      	beq.n	8005892 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800587e:	2120      	movs	r1, #32
 8005880:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8005884:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005886:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8005888:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800588c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8005890:	e76e      	b.n	8005770 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005896:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	e843 2100 	strex	r1, r2, [r3]
 800589e:	2900      	cmp	r1, #0
 80058a0:	d1f7      	bne.n	8005892 <UART_CheckIdleState+0x18a>
 80058a2:	e7eb      	b.n	800587c <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058a4:	2208      	movs	r2, #8
 80058a6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058ac:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	e843 2100 	strex	r1, r2, [r3]
 80058b4:	2900      	cmp	r1, #0
 80058b6:	d1f7      	bne.n	80058a8 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058b8:	4828      	ldr	r0, [pc, #160]	@ (800595c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	f103 0208 	add.w	r2, r3, #8
 80058be:	e852 2f00 	ldrex	r2, [r2]
 80058c2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	f103 0508 	add.w	r5, r3, #8
 80058c8:	e845 2100 	strex	r1, r2, [r5]
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d1f4      	bne.n	80058ba <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80058d2:	2a01      	cmp	r2, #1
 80058d4:	d00b      	beq.n	80058ee <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80058d8:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058da:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80058dc:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80058e0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80058e4:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058e8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80058ec:	e766      	b.n	80057bc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	e843 2100 	strex	r1, r2, [r3]
 80058fa:	2900      	cmp	r1, #0
 80058fc:	d1f7      	bne.n	80058ee <UART_CheckIdleState+0x1e6>
 80058fe:	e7ea      	b.n	80058d6 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005900:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005904:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800590a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	e843 2100 	strex	r1, r2, [r3]
 8005912:	2900      	cmp	r1, #0
 8005914:	d1f7      	bne.n	8005906 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005916:	4811      	ldr	r0, [pc, #68]	@ (800595c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	f103 0208 	add.w	r2, r3, #8
 800591c:	e852 2f00 	ldrex	r2, [r2]
 8005920:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	f103 0508 	add.w	r5, r3, #8
 8005926:	e845 2100 	strex	r1, r2, [r5]
 800592a:	2900      	cmp	r1, #0
 800592c:	d1f4      	bne.n	8005918 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005930:	2a01      	cmp	r2, #1
 8005932:	d00a      	beq.n	800594a <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005934:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005936:	2120      	movs	r1, #32
 8005938:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800593c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8005940:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005944:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8005948:	e738      	b.n	80057bc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	e843 2100 	strex	r1, r2, [r3]
 8005956:	2900      	cmp	r1, #0
 8005958:	d1f7      	bne.n	800594a <UART_CheckIdleState+0x242>
 800595a:	e7eb      	b.n	8005934 <UART_CheckIdleState+0x22c>
 800595c:	effffffe 	.word	0xeffffffe

08005960 <HAL_UART_Init>:
  if (huart == NULL)
 8005960:	b380      	cbz	r0, 80059c4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005962:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8005966:	b510      	push	{r4, lr}
 8005968:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800596a:	b333      	cbz	r3, 80059ba <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800596c:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800596e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8005970:	2324      	movs	r3, #36	@ 0x24
 8005972:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8005976:	6813      	ldr	r3, [r2, #0]
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800597e:	b9c1      	cbnz	r1, 80059b2 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005980:	4620      	mov	r0, r4
 8005982:	f7ff fd07 	bl	8005394 <UART_SetConfig>
 8005986:	2801      	cmp	r0, #1
 8005988:	d011      	beq.n	80059ae <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800599a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80059a2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80059a4:	601a      	str	r2, [r3, #0]
}
 80059a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80059aa:	f7ff bead 	b.w	8005708 <UART_CheckIdleState>
}
 80059ae:	2001      	movs	r0, #1
 80059b0:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80059b2:	4620      	mov	r0, r4
 80059b4:	f7ff fe50 	bl	8005658 <UART_AdvFeatureConfig>
 80059b8:	e7e2      	b.n	8005980 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80059ba:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80059be:	f7fb f9cd 	bl	8000d5c <HAL_UART_MspInit>
 80059c2:	e7d3      	b.n	800596c <HAL_UART_Init+0xc>
}
 80059c4:	2001      	movs	r0, #1
 80059c6:	4770      	bx	lr

080059c8 <UART_Start_Receive_DMA>:
{
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4605      	mov	r5, r0
 80059cc:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ce:	2022      	movs	r0, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059d6:	f8c5 008c 	str.w	r0, [r5, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 80059da:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059de:	682c      	ldr	r4, [r5, #0]
  huart->pRxBuffPtr = pData;
 80059e0:	65a9      	str	r1, [r5, #88]	@ 0x58
  huart->RxXferSize = Size;
 80059e2:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
  if (huart->hdmarx != NULL)
 80059e6:	b168      	cbz	r0, 8005a04 <UART_Start_Receive_DMA+0x3c>
    huart->hdmarx->XferAbortCallback = NULL;
 80059e8:	6382      	str	r2, [r0, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059ea:	460a      	mov	r2, r1
 80059ec:	f104 0124 	add.w	r1, r4, #36	@ 0x24
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059f0:	4c1a      	ldr	r4, [pc, #104]	@ (8005a5c <UART_Start_Receive_DMA+0x94>)
 80059f2:	62c4      	str	r4, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059f4:	4c1a      	ldr	r4, [pc, #104]	@ (8005a60 <UART_Start_Receive_DMA+0x98>)
 80059f6:	6304      	str	r4, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059f8:	4c1a      	ldr	r4, [pc, #104]	@ (8005a64 <UART_Start_Receive_DMA+0x9c>)
 80059fa:	6344      	str	r4, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059fc:	f7fc ffda 	bl	80029b4 <HAL_DMA_Start_IT>
 8005a00:	bb18      	cbnz	r0, 8005a4a <UART_Start_Receive_DMA+0x82>
 8005a02:	682c      	ldr	r4, [r5, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a04:	692b      	ldr	r3, [r5, #16]
 8005a06:	b13b      	cbz	r3, 8005a18 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	e844 3200 	strex	r2, r3, [r4]
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	d1f7      	bne.n	8005a08 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	f104 0308 	add.w	r3, r4, #8
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	f104 0108 	add.w	r1, r4, #8
 8005a28:	e841 3200 	strex	r2, r3, [r1]
 8005a2c:	2a00      	cmp	r2, #0
 8005a2e:	d1f3      	bne.n	8005a18 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	f104 0308 	add.w	r3, r4, #8
 8005a34:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	f104 0208 	add.w	r2, r4, #8
 8005a40:	e842 3000 	strex	r0, r3, [r2]
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d1f3      	bne.n	8005a30 <UART_Start_Receive_DMA+0x68>
}
 8005a48:	bd38      	pop	{r3, r4, r5, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a4a:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a4e:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
      return HAL_ERROR;
 8005a52:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 8005a54:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
}
 8005a58:	bd38      	pop	{r3, r4, r5, pc}
 8005a5a:	bf00      	nop
 8005a5c:	080052f9 	.word	0x080052f9
 8005a60:	080052d9 	.word	0x080052d9
 8005a64:	08004e61 	.word	0x08004e61

08005a68 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop

08005a6c <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop

08005a70 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop

08005a74 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a74:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d017      	beq.n	8005aac <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a7c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a7e:	2324      	movs	r3, #36	@ 0x24
{
 8005a80:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8005a82:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a86:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a88:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a8a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8005a8c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a90:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8005a94:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a96:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a98:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a9a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 8005aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8005aa8:	4618      	mov	r0, r3
}
 8005aaa:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005aac:	2002      	movs	r0, #2
}
 8005aae:	4770      	bx	lr

08005ab0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ab0:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8005ab4:	2a01      	cmp	r2, #1
 8005ab6:	d037      	beq.n	8005b28 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aba:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005abc:	2024      	movs	r0, #36	@ 0x24
{
 8005abe:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005ac0:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ac4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac6:	6810      	ldr	r0, [r2, #0]
 8005ac8:	f020 0001 	bic.w	r0, r0, #1
 8005acc:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ace:	6890      	ldr	r0, [r2, #8]
 8005ad0:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8005ad4:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ad6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ad8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ada:	b310      	cbz	r0, 8005b22 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005adc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ade:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ae0:	4d12      	ldr	r5, [pc, #72]	@ (8005b2c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ae2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ae6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aea:	4911      	ldr	r1, [pc, #68]	@ (8005b30 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8005aec:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005af0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005af4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005af8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005afc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005afe:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b00:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b04:	fbb1 f1f5 	udiv	r1, r1, r5
 8005b08:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8005b12:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b14:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005b16:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8005b1a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8005b20:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005b22:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005b24:	4608      	mov	r0, r1
 8005b26:	e7ef      	b.n	8005b08 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005b28:	2002      	movs	r0, #2
}
 8005b2a:	4770      	bx	lr
 8005b2c:	08006394 	.word	0x08006394
 8005b30:	0800639c 	.word	0x0800639c

08005b34 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8005b34:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8005b38:	2a01      	cmp	r2, #1
 8005b3a:	d037      	beq.n	8005bac <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b3e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005b40:	2024      	movs	r0, #36	@ 0x24
{
 8005b42:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005b44:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b48:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005b4a:	6810      	ldr	r0, [r2, #0]
 8005b4c:	f020 0001 	bic.w	r0, r0, #1
 8005b50:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b52:	6890      	ldr	r0, [r2, #8]
 8005b54:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8005b58:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b5a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b5c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b5e:	b310      	cbz	r0, 8005ba6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b60:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b62:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b64:	4d12      	ldr	r5, [pc, #72]	@ (8005bb0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b66:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b6a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b6e:	4911      	ldr	r1, [pc, #68]	@ (8005bb4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005b70:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b74:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b78:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b7c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b80:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b82:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b84:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b88:	fbb1 f1f5 	udiv	r1, r1, r5
 8005b8c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8005b90:	2100      	movs	r1, #0
 8005b92:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8005b96:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b98:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005b9a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8005b9e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8005ba4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8005ba6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005ba8:	4608      	mov	r0, r1
 8005baa:	e7ef      	b.n	8005b8c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005bac:	2002      	movs	r0, #2
}
 8005bae:	4770      	bx	lr
 8005bb0:	08006394 	.word	0x08006394
 8005bb4:	0800639c 	.word	0x0800639c

08005bb8 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 8005bb8:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bba:	f8d0 608c 	ldr.w	r6, [r0, #140]	@ 0x8c
 8005bbe:	2e20      	cmp	r6, #32
 8005bc0:	d103      	bne.n	8005bca <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    if ((pData == NULL) || (Size == 0U))
 8005bc2:	b101      	cbz	r1, 8005bc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
 8005bc4:	b91a      	cbnz	r2, 8005bce <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      return HAL_ERROR;
 8005bc6:	2001      	movs	r0, #1
}
 8005bc8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005bca:	2002      	movs	r0, #2
}
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6703      	str	r3, [r0, #112]	@ 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	f7ff fef6 	bl	80059c8 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d1f3      	bne.n	8005bc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d1ef      	bne.n	8005bc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	2310      	movs	r3, #16
 8005bea:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	e842 3100 	strex	r1, r3, [r2]
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d1f7      	bne.n	8005bec <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
}
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	bf00      	nop

08005c00 <arm_float_to_q15>:
 8005c00:	b4f0      	push	{r4, r5, r6, r7}
 8005c02:	0897      	lsrs	r7, r2, #2
 8005c04:	d06c      	beq.n	8005ce0 <arm_float_to_q15+0xe0>
 8005c06:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8005d80 <arm_float_to_q15+0x180>
 8005c0a:	f100 0410 	add.w	r4, r0, #16
 8005c0e:	f101 0508 	add.w	r5, r1, #8
 8005c12:	463e      	mov	r6, r7
 8005c14:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005c18:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8005c1c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005c20:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8005c24:	3410      	adds	r4, #16
 8005c26:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2e:	bfd4      	ite	le
 8005c30:	eef0 7a65 	vmovle.f32	s15, s11
 8005c34:	eef0 7a46 	vmovgt.f32	s15, s12
 8005c38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c3c:	3508      	adds	r5, #8
 8005c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c42:	ee17 3a90 	vmov	r3, s15
 8005c46:	f303 030f 	ssat	r3, #16, r3
 8005c4a:	f825 3c10 	strh.w	r3, [r5, #-16]
 8005c4e:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8005c52:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8005c56:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5e:	bfd4      	ite	le
 8005c60:	eef0 7a65 	vmovle.f32	s15, s11
 8005c64:	eef0 7a46 	vmovgt.f32	s15, s12
 8005c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c70:	ee17 3a90 	vmov	r3, s15
 8005c74:	f303 030f 	ssat	r3, #16, r3
 8005c78:	f825 3c0e 	strh.w	r3, [r5, #-14]
 8005c7c:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8005c80:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8005c84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8c:	bfd4      	ite	le
 8005c8e:	eef0 7a65 	vmovle.f32	s15, s11
 8005c92:	eef0 7a46 	vmovgt.f32	s15, s12
 8005c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c9e:	ee17 3a90 	vmov	r3, s15
 8005ca2:	f303 030f 	ssat	r3, #16, r3
 8005ca6:	f825 3c0c 	strh.w	r3, [r5, #-12]
 8005caa:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8005cae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cba:	bfcc      	ite	gt
 8005cbc:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 8005cc0:	ee77 7ac6 	vsuble.f32	s15, s15, s12
 8005cc4:	3e01      	subs	r6, #1
 8005cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cca:	ee17 3a90 	vmov	r3, s15
 8005cce:	f303 030f 	ssat	r3, #16, r3
 8005cd2:	f825 3c0a 	strh.w	r3, [r5, #-10]
 8005cd6:	d1a1      	bne.n	8005c1c <arm_float_to_q15+0x1c>
 8005cd8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005cdc:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8005ce0:	f012 0203 	ands.w	r2, r2, #3
 8005ce4:	d049      	beq.n	8005d7a <arm_float_to_q15+0x17a>
 8005ce6:	edd0 7a00 	vldr	s15, [r0]
 8005cea:	eddf 5a25 	vldr	s11, [pc, #148]	@ 8005d80 <arm_float_to_q15+0x180>
 8005cee:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8005cf2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cf6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfe:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 8005d02:	bfd4      	ite	le
 8005d04:	eef0 7a46 	vmovle.f32	s15, s12
 8005d08:	eef0 7a47 	vmovgt.f32	s15, s14
 8005d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d10:	3a01      	subs	r2, #1
 8005d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d16:	ee17 3a90 	vmov	r3, s15
 8005d1a:	f303 030f 	ssat	r3, #16, r3
 8005d1e:	800b      	strh	r3, [r1, #0]
 8005d20:	d02b      	beq.n	8005d7a <arm_float_to_q15+0x17a>
 8005d22:	edd0 7a01 	vldr	s15, [r0, #4]
 8005d26:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d32:	bfd4      	ite	le
 8005d34:	eef0 6a46 	vmovle.f32	s13, s12
 8005d38:	eef0 6a47 	vmovgt.f32	s13, s14
 8005d3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d40:	2a01      	cmp	r2, #1
 8005d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d46:	ee17 3a90 	vmov	r3, s15
 8005d4a:	f303 030f 	ssat	r3, #16, r3
 8005d4e:	804b      	strh	r3, [r1, #2]
 8005d50:	d013      	beq.n	8005d7a <arm_float_to_q15+0x17a>
 8005d52:	edd0 7a02 	vldr	s15, [r0, #8]
 8005d56:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8005d5a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8005d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d62:	bfd8      	it	le
 8005d64:	eeb0 7a46 	vmovle.f32	s14, s12
 8005d68:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005d6c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005d70:	ee17 3a10 	vmov	r3, s14
 8005d74:	f303 030f 	ssat	r3, #16, r3
 8005d78:	808b      	strh	r3, [r1, #4]
 8005d7a:	bcf0      	pop	{r4, r5, r6, r7}
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	47000000 	.word	0x47000000

08005d84 <_ZdlPvj>:
 8005d84:	f000 b8fa 	b.w	8005f7c <_ZdlPv>

08005d88 <_Znwj>:
 8005d88:	2801      	cmp	r0, #1
 8005d8a:	bf38      	it	cc
 8005d8c:	2001      	movcc	r0, #1
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	4604      	mov	r4, r0
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 f904 	bl	8005fa0 <malloc>
 8005d98:	b100      	cbz	r0, 8005d9c <_Znwj+0x14>
 8005d9a:	bd10      	pop	{r4, pc}
 8005d9c:	f000 f8f0 	bl	8005f80 <_ZSt15get_new_handlerv>
 8005da0:	b908      	cbnz	r0, 8005da6 <_Znwj+0x1e>
 8005da2:	f000 f8f5 	bl	8005f90 <abort>
 8005da6:	4780      	blx	r0
 8005da8:	e7f3      	b.n	8005d92 <_Znwj+0xa>

08005daa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8005daa:	68c3      	ldr	r3, [r0, #12]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	60c2      	str	r2, [r0, #12]
 8005db0:	b510      	push	{r4, lr}
 8005db2:	b102      	cbz	r2, 8005db6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8005db4:	6050      	str	r0, [r2, #4]
 8005db6:	6842      	ldr	r2, [r0, #4]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	680c      	ldr	r4, [r1, #0]
 8005dbc:	4284      	cmp	r4, r0
 8005dbe:	d103      	bne.n	8005dc8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8005dc0:	600b      	str	r3, [r1, #0]
 8005dc2:	6098      	str	r0, [r3, #8]
 8005dc4:	6043      	str	r3, [r0, #4]
 8005dc6:	bd10      	pop	{r4, pc}
 8005dc8:	6891      	ldr	r1, [r2, #8]
 8005dca:	4281      	cmp	r1, r0
 8005dcc:	bf0c      	ite	eq
 8005dce:	6093      	streq	r3, [r2, #8]
 8005dd0:	60d3      	strne	r3, [r2, #12]
 8005dd2:	e7f6      	b.n	8005dc2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08005dd4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8005dd4:	6883      	ldr	r3, [r0, #8]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	6082      	str	r2, [r0, #8]
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	b102      	cbz	r2, 8005de0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8005dde:	6050      	str	r0, [r2, #4]
 8005de0:	6842      	ldr	r2, [r0, #4]
 8005de2:	605a      	str	r2, [r3, #4]
 8005de4:	680c      	ldr	r4, [r1, #0]
 8005de6:	4284      	cmp	r4, r0
 8005de8:	d103      	bne.n	8005df2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8005dea:	600b      	str	r3, [r1, #0]
 8005dec:	60d8      	str	r0, [r3, #12]
 8005dee:	6043      	str	r3, [r0, #4]
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	68d1      	ldr	r1, [r2, #12]
 8005df4:	4281      	cmp	r1, r0
 8005df6:	bf0c      	ite	eq
 8005df8:	60d3      	streq	r3, [r2, #12]
 8005dfa:	6093      	strne	r3, [r2, #8]
 8005dfc:	e7f6      	b.n	8005dec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08005dfe <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8005dfe:	68c3      	ldr	r3, [r0, #12]
 8005e00:	b123      	cbz	r3, 8005e0c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8005e02:	4618      	mov	r0, r3
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1fb      	bne.n	8005e02 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8005e0a:	4770      	bx	lr
 8005e0c:	6843      	ldr	r3, [r0, #4]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	4282      	cmp	r2, r0
 8005e12:	d004      	beq.n	8005e1e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8005e14:	68c2      	ldr	r2, [r0, #12]
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bf18      	it	ne
 8005e1a:	4618      	movne	r0, r3
 8005e1c:	4770      	bx	lr
 8005e1e:	4618      	mov	r0, r3
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	e7f4      	b.n	8005e0e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08005e24 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8005e24:	7802      	ldrb	r2, [r0, #0]
 8005e26:	4603      	mov	r3, r0
 8005e28:	b92a      	cbnz	r2, 8005e36 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8005e2a:	6842      	ldr	r2, [r0, #4]
 8005e2c:	6852      	ldr	r2, [r2, #4]
 8005e2e:	4282      	cmp	r2, r0
 8005e30:	d101      	bne.n	8005e36 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8005e32:	68d0      	ldr	r0, [r2, #12]
 8005e34:	4770      	bx	lr
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	b122      	cbz	r2, 8005e44 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	68d2      	ldr	r2, [r2, #12]
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	d1fb      	bne.n	8005e3a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8005e42:	4770      	bx	lr
 8005e44:	6858      	ldr	r0, [r3, #4]
 8005e46:	6882      	ldr	r2, [r0, #8]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d000      	beq.n	8005e4e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8005e4c:	4770      	bx	lr
 8005e4e:	4603      	mov	r3, r0
 8005e50:	6840      	ldr	r0, [r0, #4]
 8005e52:	e7f8      	b.n	8005e46 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08005e54 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8005e54:	f7ff bfd3 	b.w	8005dfe <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08005e58 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8005e58:	f7ff bfe4 	b.w	8005e24 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08005e5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8005e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e60:	461d      	mov	r5, r3
 8005e62:	1d1f      	adds	r7, r3, #4
 8005e64:	2300      	movs	r3, #0
 8005e66:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	604a      	str	r2, [r1, #4]
 8005e6e:	700b      	strb	r3, [r1, #0]
 8005e70:	b1a0      	cbz	r0, 8005e9c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8005e72:	4295      	cmp	r5, r2
 8005e74:	6091      	str	r1, [r2, #8]
 8005e76:	d102      	bne.n	8005e7e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8005e78:	6069      	str	r1, [r5, #4]
 8005e7a:	60ec      	str	r4, [r5, #12]
 8005e7c:	e003      	b.n	8005e86 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8005e7e:	68ab      	ldr	r3, [r5, #8]
 8005e80:	4293      	cmp	r3, r2
 8005e82:	bf08      	it	eq
 8005e84:	60a9      	streq	r1, [r5, #8]
 8005e86:	f04f 0900 	mov.w	r9, #0
 8005e8a:	f04f 0801 	mov.w	r8, #1
 8005e8e:	686b      	ldr	r3, [r5, #4]
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d132      	bne.n	8005efa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e9c:	60d1      	str	r1, [r2, #12]
 8005e9e:	68eb      	ldr	r3, [r5, #12]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d1f0      	bne.n	8005e86 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8005ea4:	e7e9      	b.n	8005e7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8005ea6:	68c3      	ldr	r3, [r0, #12]
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	d103      	bne.n	8005eb4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8005eac:	4639      	mov	r1, r7
 8005eae:	f7ff ff7c 	bl	8005daa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	6863      	ldr	r3, [r4, #4]
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	f883 8000 	strb.w	r8, [r3]
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f886 9000 	strb.w	r9, [r6]
 8005ec2:	f7ff ff87 	bl	8005dd4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8005ec6:	e7e2      	b.n	8005e8e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8005ec8:	b133      	cbz	r3, 8005ed8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	b922      	cbnz	r2, 8005ed8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8005ece:	f880 8000 	strb.w	r8, [r0]
 8005ed2:	f883 8000 	strb.w	r8, [r3]
 8005ed6:	e021      	b.n	8005f1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8005ed8:	6883      	ldr	r3, [r0, #8]
 8005eda:	42a3      	cmp	r3, r4
 8005edc:	d103      	bne.n	8005ee6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8005ede:	4639      	mov	r1, r7
 8005ee0:	f7ff ff78 	bl	8005dd4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	6863      	ldr	r3, [r4, #4]
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f883 8000 	strb.w	r8, [r3]
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f886 9000 	strb.w	r9, [r6]
 8005ef4:	f7ff ff59 	bl	8005daa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8005ef8:	e7c9      	b.n	8005e8e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8005efa:	6860      	ldr	r0, [r4, #4]
 8005efc:	7802      	ldrb	r2, [r0, #0]
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	d1c8      	bne.n	8005e94 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8005f02:	6846      	ldr	r6, [r0, #4]
 8005f04:	68b3      	ldr	r3, [r6, #8]
 8005f06:	4283      	cmp	r3, r0
 8005f08:	d1de      	bne.n	8005ec8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8005f0a:	68f2      	ldr	r2, [r6, #12]
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d0ca      	beq.n	8005ea6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8005f10:	7811      	ldrb	r1, [r2, #0]
 8005f12:	2900      	cmp	r1, #0
 8005f14:	d1c7      	bne.n	8005ea6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8005f16:	2101      	movs	r1, #1
 8005f18:	7019      	strb	r1, [r3, #0]
 8005f1a:	7011      	strb	r1, [r2, #0]
 8005f1c:	f886 9000 	strb.w	r9, [r6]
 8005f20:	4634      	mov	r4, r6
 8005f22:	e7b4      	b.n	8005e8e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08005f24 <_ZSt17__throw_bad_allocv>:
 8005f24:	b508      	push	{r3, lr}
 8005f26:	f000 f833 	bl	8005f90 <abort>

08005f2a <_ZSt19__throw_logic_errorPKc>:
 8005f2a:	b508      	push	{r3, lr}
 8005f2c:	f000 f830 	bl	8005f90 <abort>

08005f30 <_ZSt20__throw_length_errorPKc>:
 8005f30:	b508      	push	{r3, lr}
 8005f32:	f000 f82d 	bl	8005f90 <abort>
	...

08005f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005f38:	b508      	push	{r3, lr}
 8005f3a:	680b      	ldr	r3, [r1, #0]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f40:	d302      	bcc.n	8005f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8005f42:	480d      	ldr	r0, [pc, #52]	@ (8005f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8005f44:	f7ff fff4 	bl	8005f30 <_ZSt20__throw_length_errorPKc>
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d90b      	bls.n	8005f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005f4c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8005f50:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8005f54:	d206      	bcs.n	8005f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005f56:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005f5a:	bf2a      	itet	cs
 8005f5c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8005f60:	6008      	strcc	r0, [r1, #0]
 8005f62:	600b      	strcs	r3, [r1, #0]
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	3001      	adds	r0, #1
 8005f68:	d501      	bpl.n	8005f6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8005f6a:	f7ff ffdb 	bl	8005f24 <_ZSt17__throw_bad_allocv>
 8005f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f72:	f7ff bf09 	b.w	8005d88 <_Znwj>
 8005f76:	bf00      	nop
 8005f78:	080063a4 	.word	0x080063a4

08005f7c <_ZdlPv>:
 8005f7c:	f000 b818 	b.w	8005fb0 <free>

08005f80 <_ZSt15get_new_handlerv>:
 8005f80:	4b02      	ldr	r3, [pc, #8]	@ (8005f8c <_ZSt15get_new_handlerv+0xc>)
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	f3bf 8f5b 	dmb	ish
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000f2c 	.word	0x20000f2c

08005f90 <abort>:
 8005f90:	b508      	push	{r3, lr}
 8005f92:	2006      	movs	r0, #6
 8005f94:	f000 f902 	bl	800619c <raise>
 8005f98:	2001      	movs	r0, #1
 8005f9a:	f7fa ff79 	bl	8000e90 <_exit>
	...

08005fa0 <malloc>:
 8005fa0:	4b02      	ldr	r3, [pc, #8]	@ (8005fac <malloc+0xc>)
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	f000 b82d 	b.w	8006004 <_malloc_r>
 8005faa:	bf00      	nop
 8005fac:	20000014 	.word	0x20000014

08005fb0 <free>:
 8005fb0:	4b02      	ldr	r3, [pc, #8]	@ (8005fbc <free+0xc>)
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	f000 b957 	b.w	8006268 <_free_r>
 8005fba:	bf00      	nop
 8005fbc:	20000014 	.word	0x20000014

08005fc0 <sbrk_aligned>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8006000 <sbrk_aligned+0x40>)
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	6831      	ldr	r1, [r6, #0]
 8005fc8:	4605      	mov	r5, r0
 8005fca:	b911      	cbnz	r1, 8005fd2 <sbrk_aligned+0x12>
 8005fcc:	f000 f902 	bl	80061d4 <_sbrk_r>
 8005fd0:	6030      	str	r0, [r6, #0]
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f000 f8fd 	bl	80061d4 <_sbrk_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d103      	bne.n	8005fe6 <sbrk_aligned+0x26>
 8005fde:	f04f 34ff 	mov.w	r4, #4294967295
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	bd70      	pop	{r4, r5, r6, pc}
 8005fe6:	1cc4      	adds	r4, r0, #3
 8005fe8:	f024 0403 	bic.w	r4, r4, #3
 8005fec:	42a0      	cmp	r0, r4
 8005fee:	d0f8      	beq.n	8005fe2 <sbrk_aligned+0x22>
 8005ff0:	1a21      	subs	r1, r4, r0
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 f8ee 	bl	80061d4 <_sbrk_r>
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d1f2      	bne.n	8005fe2 <sbrk_aligned+0x22>
 8005ffc:	e7ef      	b.n	8005fde <sbrk_aligned+0x1e>
 8005ffe:	bf00      	nop
 8006000:	20000f30 	.word	0x20000f30

08006004 <_malloc_r>:
 8006004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006008:	1ccd      	adds	r5, r1, #3
 800600a:	f025 0503 	bic.w	r5, r5, #3
 800600e:	3508      	adds	r5, #8
 8006010:	2d0c      	cmp	r5, #12
 8006012:	bf38      	it	cc
 8006014:	250c      	movcc	r5, #12
 8006016:	2d00      	cmp	r5, #0
 8006018:	4606      	mov	r6, r0
 800601a:	db01      	blt.n	8006020 <_malloc_r+0x1c>
 800601c:	42a9      	cmp	r1, r5
 800601e:	d904      	bls.n	800602a <_malloc_r+0x26>
 8006020:	230c      	movs	r3, #12
 8006022:	6033      	str	r3, [r6, #0]
 8006024:	2000      	movs	r0, #0
 8006026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006100 <_malloc_r+0xfc>
 800602e:	f000 f869 	bl	8006104 <__malloc_lock>
 8006032:	f8d8 3000 	ldr.w	r3, [r8]
 8006036:	461c      	mov	r4, r3
 8006038:	bb44      	cbnz	r4, 800608c <_malloc_r+0x88>
 800603a:	4629      	mov	r1, r5
 800603c:	4630      	mov	r0, r6
 800603e:	f7ff ffbf 	bl	8005fc0 <sbrk_aligned>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	4604      	mov	r4, r0
 8006046:	d158      	bne.n	80060fa <_malloc_r+0xf6>
 8006048:	f8d8 4000 	ldr.w	r4, [r8]
 800604c:	4627      	mov	r7, r4
 800604e:	2f00      	cmp	r7, #0
 8006050:	d143      	bne.n	80060da <_malloc_r+0xd6>
 8006052:	2c00      	cmp	r4, #0
 8006054:	d04b      	beq.n	80060ee <_malloc_r+0xea>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	4639      	mov	r1, r7
 800605a:	4630      	mov	r0, r6
 800605c:	eb04 0903 	add.w	r9, r4, r3
 8006060:	f000 f8b8 	bl	80061d4 <_sbrk_r>
 8006064:	4581      	cmp	r9, r0
 8006066:	d142      	bne.n	80060ee <_malloc_r+0xea>
 8006068:	6821      	ldr	r1, [r4, #0]
 800606a:	1a6d      	subs	r5, r5, r1
 800606c:	4629      	mov	r1, r5
 800606e:	4630      	mov	r0, r6
 8006070:	f7ff ffa6 	bl	8005fc0 <sbrk_aligned>
 8006074:	3001      	adds	r0, #1
 8006076:	d03a      	beq.n	80060ee <_malloc_r+0xea>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	442b      	add	r3, r5
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	f8d8 3000 	ldr.w	r3, [r8]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	bb62      	cbnz	r2, 80060e0 <_malloc_r+0xdc>
 8006086:	f8c8 7000 	str.w	r7, [r8]
 800608a:	e00f      	b.n	80060ac <_malloc_r+0xa8>
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	1b52      	subs	r2, r2, r5
 8006090:	d420      	bmi.n	80060d4 <_malloc_r+0xd0>
 8006092:	2a0b      	cmp	r2, #11
 8006094:	d917      	bls.n	80060c6 <_malloc_r+0xc2>
 8006096:	1961      	adds	r1, r4, r5
 8006098:	42a3      	cmp	r3, r4
 800609a:	6025      	str	r5, [r4, #0]
 800609c:	bf18      	it	ne
 800609e:	6059      	strne	r1, [r3, #4]
 80060a0:	6863      	ldr	r3, [r4, #4]
 80060a2:	bf08      	it	eq
 80060a4:	f8c8 1000 	streq.w	r1, [r8]
 80060a8:	5162      	str	r2, [r4, r5]
 80060aa:	604b      	str	r3, [r1, #4]
 80060ac:	4630      	mov	r0, r6
 80060ae:	f000 f82f 	bl	8006110 <__malloc_unlock>
 80060b2:	f104 000b 	add.w	r0, r4, #11
 80060b6:	1d23      	adds	r3, r4, #4
 80060b8:	f020 0007 	bic.w	r0, r0, #7
 80060bc:	1ac2      	subs	r2, r0, r3
 80060be:	bf1c      	itt	ne
 80060c0:	1a1b      	subne	r3, r3, r0
 80060c2:	50a3      	strne	r3, [r4, r2]
 80060c4:	e7af      	b.n	8006026 <_malloc_r+0x22>
 80060c6:	6862      	ldr	r2, [r4, #4]
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	bf0c      	ite	eq
 80060cc:	f8c8 2000 	streq.w	r2, [r8]
 80060d0:	605a      	strne	r2, [r3, #4]
 80060d2:	e7eb      	b.n	80060ac <_malloc_r+0xa8>
 80060d4:	4623      	mov	r3, r4
 80060d6:	6864      	ldr	r4, [r4, #4]
 80060d8:	e7ae      	b.n	8006038 <_malloc_r+0x34>
 80060da:	463c      	mov	r4, r7
 80060dc:	687f      	ldr	r7, [r7, #4]
 80060de:	e7b6      	b.n	800604e <_malloc_r+0x4a>
 80060e0:	461a      	mov	r2, r3
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	d1fb      	bne.n	80060e0 <_malloc_r+0xdc>
 80060e8:	2300      	movs	r3, #0
 80060ea:	6053      	str	r3, [r2, #4]
 80060ec:	e7de      	b.n	80060ac <_malloc_r+0xa8>
 80060ee:	230c      	movs	r3, #12
 80060f0:	6033      	str	r3, [r6, #0]
 80060f2:	4630      	mov	r0, r6
 80060f4:	f000 f80c 	bl	8006110 <__malloc_unlock>
 80060f8:	e794      	b.n	8006024 <_malloc_r+0x20>
 80060fa:	6005      	str	r5, [r0, #0]
 80060fc:	e7d6      	b.n	80060ac <_malloc_r+0xa8>
 80060fe:	bf00      	nop
 8006100:	20000f34 	.word	0x20000f34

08006104 <__malloc_lock>:
 8006104:	4801      	ldr	r0, [pc, #4]	@ (800610c <__malloc_lock+0x8>)
 8006106:	f000 b89f 	b.w	8006248 <__retarget_lock_acquire_recursive>
 800610a:	bf00      	nop
 800610c:	20001074 	.word	0x20001074

08006110 <__malloc_unlock>:
 8006110:	4801      	ldr	r0, [pc, #4]	@ (8006118 <__malloc_unlock+0x8>)
 8006112:	f000 b89a 	b.w	800624a <__retarget_lock_release_recursive>
 8006116:	bf00      	nop
 8006118:	20001074 	.word	0x20001074

0800611c <memcmp>:
 800611c:	b510      	push	{r4, lr}
 800611e:	3901      	subs	r1, #1
 8006120:	4402      	add	r2, r0
 8006122:	4290      	cmp	r0, r2
 8006124:	d101      	bne.n	800612a <memcmp+0xe>
 8006126:	2000      	movs	r0, #0
 8006128:	e005      	b.n	8006136 <memcmp+0x1a>
 800612a:	7803      	ldrb	r3, [r0, #0]
 800612c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006130:	42a3      	cmp	r3, r4
 8006132:	d001      	beq.n	8006138 <memcmp+0x1c>
 8006134:	1b18      	subs	r0, r3, r4
 8006136:	bd10      	pop	{r4, pc}
 8006138:	3001      	adds	r0, #1
 800613a:	e7f2      	b.n	8006122 <memcmp+0x6>

0800613c <memset>:
 800613c:	4402      	add	r2, r0
 800613e:	4603      	mov	r3, r0
 8006140:	4293      	cmp	r3, r2
 8006142:	d100      	bne.n	8006146 <memset+0xa>
 8006144:	4770      	bx	lr
 8006146:	f803 1b01 	strb.w	r1, [r3], #1
 800614a:	e7f9      	b.n	8006140 <memset+0x4>

0800614c <_raise_r>:
 800614c:	291f      	cmp	r1, #31
 800614e:	b538      	push	{r3, r4, r5, lr}
 8006150:	4605      	mov	r5, r0
 8006152:	460c      	mov	r4, r1
 8006154:	d904      	bls.n	8006160 <_raise_r+0x14>
 8006156:	2316      	movs	r3, #22
 8006158:	6003      	str	r3, [r0, #0]
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006162:	b112      	cbz	r2, 800616a <_raise_r+0x1e>
 8006164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006168:	b94b      	cbnz	r3, 800617e <_raise_r+0x32>
 800616a:	4628      	mov	r0, r5
 800616c:	f000 f830 	bl	80061d0 <_getpid_r>
 8006170:	4622      	mov	r2, r4
 8006172:	4601      	mov	r1, r0
 8006174:	4628      	mov	r0, r5
 8006176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800617a:	f000 b817 	b.w	80061ac <_kill_r>
 800617e:	2b01      	cmp	r3, #1
 8006180:	d00a      	beq.n	8006198 <_raise_r+0x4c>
 8006182:	1c59      	adds	r1, r3, #1
 8006184:	d103      	bne.n	800618e <_raise_r+0x42>
 8006186:	2316      	movs	r3, #22
 8006188:	6003      	str	r3, [r0, #0]
 800618a:	2001      	movs	r0, #1
 800618c:	e7e7      	b.n	800615e <_raise_r+0x12>
 800618e:	2100      	movs	r1, #0
 8006190:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006194:	4620      	mov	r0, r4
 8006196:	4798      	blx	r3
 8006198:	2000      	movs	r0, #0
 800619a:	e7e0      	b.n	800615e <_raise_r+0x12>

0800619c <raise>:
 800619c:	4b02      	ldr	r3, [pc, #8]	@ (80061a8 <raise+0xc>)
 800619e:	4601      	mov	r1, r0
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	f7ff bfd3 	b.w	800614c <_raise_r>
 80061a6:	bf00      	nop
 80061a8:	20000014 	.word	0x20000014

080061ac <_kill_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d07      	ldr	r5, [pc, #28]	@ (80061cc <_kill_r+0x20>)
 80061b0:	2300      	movs	r3, #0
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	602b      	str	r3, [r5, #0]
 80061ba:	f7fa fe61 	bl	8000e80 <_kill>
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	d102      	bne.n	80061c8 <_kill_r+0x1c>
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	b103      	cbz	r3, 80061c8 <_kill_r+0x1c>
 80061c6:	6023      	str	r3, [r4, #0]
 80061c8:	bd38      	pop	{r3, r4, r5, pc}
 80061ca:	bf00      	nop
 80061cc:	20001070 	.word	0x20001070

080061d0 <_getpid_r>:
 80061d0:	f7fa be54 	b.w	8000e7c <_getpid>

080061d4 <_sbrk_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d06      	ldr	r5, [pc, #24]	@ (80061f0 <_sbrk_r+0x1c>)
 80061d8:	2300      	movs	r3, #0
 80061da:	4604      	mov	r4, r0
 80061dc:	4608      	mov	r0, r1
 80061de:	602b      	str	r3, [r5, #0]
 80061e0:	f7fa fe5c 	bl	8000e9c <_sbrk>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_sbrk_r+0x1a>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_sbrk_r+0x1a>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	20001070 	.word	0x20001070

080061f4 <__errno>:
 80061f4:	4b01      	ldr	r3, [pc, #4]	@ (80061fc <__errno+0x8>)
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20000014 	.word	0x20000014

08006200 <__libc_init_array>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4d0d      	ldr	r5, [pc, #52]	@ (8006238 <__libc_init_array+0x38>)
 8006204:	4c0d      	ldr	r4, [pc, #52]	@ (800623c <__libc_init_array+0x3c>)
 8006206:	1b64      	subs	r4, r4, r5
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	2600      	movs	r6, #0
 800620c:	42a6      	cmp	r6, r4
 800620e:	d109      	bne.n	8006224 <__libc_init_array+0x24>
 8006210:	4d0b      	ldr	r5, [pc, #44]	@ (8006240 <__libc_init_array+0x40>)
 8006212:	4c0c      	ldr	r4, [pc, #48]	@ (8006244 <__libc_init_array+0x44>)
 8006214:	f000 f872 	bl	80062fc <_init>
 8006218:	1b64      	subs	r4, r4, r5
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	2600      	movs	r6, #0
 800621e:	42a6      	cmp	r6, r4
 8006220:	d105      	bne.n	800622e <__libc_init_array+0x2e>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f855 3b04 	ldr.w	r3, [r5], #4
 8006228:	4798      	blx	r3
 800622a:	3601      	adds	r6, #1
 800622c:	e7ee      	b.n	800620c <__libc_init_array+0xc>
 800622e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006232:	4798      	blx	r3
 8006234:	3601      	adds	r6, #1
 8006236:	e7f2      	b.n	800621e <__libc_init_array+0x1e>
 8006238:	080063c4 	.word	0x080063c4
 800623c:	080063c4 	.word	0x080063c4
 8006240:	080063c4 	.word	0x080063c4
 8006244:	080063cc 	.word	0x080063cc

08006248 <__retarget_lock_acquire_recursive>:
 8006248:	4770      	bx	lr

0800624a <__retarget_lock_release_recursive>:
 800624a:	4770      	bx	lr

0800624c <memcpy>:
 800624c:	440a      	add	r2, r1
 800624e:	4291      	cmp	r1, r2
 8006250:	f100 33ff 	add.w	r3, r0, #4294967295
 8006254:	d100      	bne.n	8006258 <memcpy+0xc>
 8006256:	4770      	bx	lr
 8006258:	b510      	push	{r4, lr}
 800625a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006262:	4291      	cmp	r1, r2
 8006264:	d1f9      	bne.n	800625a <memcpy+0xe>
 8006266:	bd10      	pop	{r4, pc}

08006268 <_free_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4605      	mov	r5, r0
 800626c:	2900      	cmp	r1, #0
 800626e:	d041      	beq.n	80062f4 <_free_r+0x8c>
 8006270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006274:	1f0c      	subs	r4, r1, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfb8      	it	lt
 800627a:	18e4      	addlt	r4, r4, r3
 800627c:	f7ff ff42 	bl	8006104 <__malloc_lock>
 8006280:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <_free_r+0x90>)
 8006282:	6813      	ldr	r3, [r2, #0]
 8006284:	b933      	cbnz	r3, 8006294 <_free_r+0x2c>
 8006286:	6063      	str	r3, [r4, #4]
 8006288:	6014      	str	r4, [r2, #0]
 800628a:	4628      	mov	r0, r5
 800628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006290:	f7ff bf3e 	b.w	8006110 <__malloc_unlock>
 8006294:	42a3      	cmp	r3, r4
 8006296:	d908      	bls.n	80062aa <_free_r+0x42>
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	1821      	adds	r1, r4, r0
 800629c:	428b      	cmp	r3, r1
 800629e:	bf01      	itttt	eq
 80062a0:	6819      	ldreq	r1, [r3, #0]
 80062a2:	685b      	ldreq	r3, [r3, #4]
 80062a4:	1809      	addeq	r1, r1, r0
 80062a6:	6021      	streq	r1, [r4, #0]
 80062a8:	e7ed      	b.n	8006286 <_free_r+0x1e>
 80062aa:	461a      	mov	r2, r3
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	b10b      	cbz	r3, 80062b4 <_free_r+0x4c>
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d9fa      	bls.n	80062aa <_free_r+0x42>
 80062b4:	6811      	ldr	r1, [r2, #0]
 80062b6:	1850      	adds	r0, r2, r1
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d10b      	bne.n	80062d4 <_free_r+0x6c>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	4401      	add	r1, r0
 80062c0:	1850      	adds	r0, r2, r1
 80062c2:	4283      	cmp	r3, r0
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	d1e0      	bne.n	800628a <_free_r+0x22>
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	6053      	str	r3, [r2, #4]
 80062ce:	4408      	add	r0, r1
 80062d0:	6010      	str	r0, [r2, #0]
 80062d2:	e7da      	b.n	800628a <_free_r+0x22>
 80062d4:	d902      	bls.n	80062dc <_free_r+0x74>
 80062d6:	230c      	movs	r3, #12
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	e7d6      	b.n	800628a <_free_r+0x22>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	1821      	adds	r1, r4, r0
 80062e0:	428b      	cmp	r3, r1
 80062e2:	bf04      	itt	eq
 80062e4:	6819      	ldreq	r1, [r3, #0]
 80062e6:	685b      	ldreq	r3, [r3, #4]
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	bf04      	itt	eq
 80062ec:	1809      	addeq	r1, r1, r0
 80062ee:	6021      	streq	r1, [r4, #0]
 80062f0:	6054      	str	r4, [r2, #4]
 80062f2:	e7ca      	b.n	800628a <_free_r+0x22>
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	bf00      	nop
 80062f8:	20000f34 	.word	0x20000f34

080062fc <_init>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr

08006308 <_fini>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	bf00      	nop
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr
