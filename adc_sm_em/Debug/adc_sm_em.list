
adc_sm_em.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800779c  0800779c  0000879c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007840  08007840  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007840  08007840  00008840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007848  08007848  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007848  08007848  00008848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08007850  08007850  00008850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007858  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fbc  2000006c  080078c4  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001028  080078c4  0000a028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d080  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bd0  00000000  00000000  0004611c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000197d6  00000000  00000000  0004bcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  000654c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002dfc  00000000  00000000  00066e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e896  00000000  00000000  00069c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034711  00000000  00000000  0009851a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00143683  00000000  00000000  000ccc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002102ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065a0  00000000  00000000  002102f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00216894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007784 	.word	0x08007784

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	08007784 	.word	0x08007784

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_d2uiz>:
 8000a14:	004a      	lsls	r2, r1, #1
 8000a16:	d211      	bcs.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a1c:	d211      	bcs.n	8000a42 <__aeabi_d2uiz+0x2e>
 8000a1e:	d50d      	bpl.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d40e      	bmi.n	8000a48 <__aeabi_d2uiz+0x34>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d102      	bne.n	8000a4e <__aeabi_d2uiz+0x3a>
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	4770      	bx	lr
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	4770      	bx	lr

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <gpio_handler>:
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void gpio_handler(uint8_t* data, size_t size)
{
 8000d44:	b500      	push	{lr}
  // format: PA<0/00-15>:<0/1/A>
  char port_id = data[1];
  int pin_num;
  char level;
  if (data[3] == ':')
 8000d46:	78c2      	ldrb	r2, [r0, #3]
  {
    pin_num = data[2] - '0';
 8000d48:	7883      	ldrb	r3, [r0, #2]
  char port_id = data[1];
 8000d4a:	f890 c001 	ldrb.w	ip, [r0, #1]
  if (data[3] == ':')
 8000d4e:	2a3a      	cmp	r2, #58	@ 0x3a
    pin_num = data[2] - '0';
 8000d50:	f1a3 0330 	sub.w	r3, r3, #48	@ 0x30
  if (data[3] == ':')
 8000d54:	d01e      	beq.n	8000d94 <gpio_handler+0x50>
    level = data[4];
  }
  else
  {
    pin_num = (data[2]-'0') * 10 + (data[3]-'0');
 8000d56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d5a:	3a30      	subs	r2, #48	@ 0x30
    level = data[5];
 8000d5c:	f890 e005 	ldrb.w	lr, [r0, #5]
    pin_num = (data[2]-'0') * 10 + (data[3]-'0');
 8000d60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  }
  GPIO_TypeDef* port = 0;
  switch (port_id)
 8000d64:	f1ac 0141 	sub.w	r1, ip, #65	@ 0x41
 8000d68:	2903      	cmp	r1, #3
 8000d6a:	d901      	bls.n	8000d70 <gpio_handler+0x2c>
//    else
//    {
//      LL_GPIO_SetPinMode(port, 1 << pin_num, LL_GPIO_MODE_ALTERNATE);
//    }
  }
}
 8000d6c:	f85d fb04 	ldr.w	pc, [sp], #4
      HAL_GPIO_WritePin(port, 1 << pin_num, level ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d70:	f1ae 0231 	sub.w	r2, lr, #49	@ 0x31
 8000d74:	2101      	movs	r1, #1
 8000d76:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000d7a:	4099      	lsls	r1, r3
 8000d7c:	f100 4090 	add.w	r0, r0, #1207959552	@ 0x48000000
 8000d80:	fab2 f282 	clz	r2, r2
}
 8000d84:	f85d eb04 	ldr.w	lr, [sp], #4
      HAL_GPIO_WritePin(port, 1 << pin_num, level ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d88:	0952      	lsrs	r2, r2, #5
 8000d8a:	b289      	uxth	r1, r1
 8000d8c:	f5a0 3082 	sub.w	r0, r0, #66560	@ 0x10400
 8000d90:	f003 b96a 	b.w	8004068 <HAL_GPIO_WritePin>
    level = data[4];
 8000d94:	f890 e004 	ldrb.w	lr, [r0, #4]
 8000d98:	e7e4      	b.n	8000d64 <gpio_handler+0x20>
 8000d9a:	bf00      	nop

08000d9c <i2c_handler>:
 * define 2 mode:
 * 1. write: "W" data[0] = 'W' if W: data[1] = addr data[2:] = the content you want to write
 * 2. read: "R" data[0] = 'R' if R: data[1] = addr data[2] = length
 */
void i2c_handler(uint8_t * data, size_t size)
{
 8000d9c:	b510      	push	{r4, lr}
	if (data[0] == 'W')
 8000d9e:	7803      	ldrb	r3, [r0, #0]
 8000da0:	2b57      	cmp	r3, #87	@ 0x57
{
 8000da2:	b088      	sub	sp, #32
 8000da4:	4602      	mov	r2, r0
	if (data[0] == 'W')
 8000da6:	d003      	beq.n	8000db0 <i2c_handler+0x14>
		{
			result = -1 ;
		}
		uart_transmit(&result, 1);
	}
	else if (data[0] == 'R')
 8000da8:	2b52      	cmp	r3, #82	@ 0x52
 8000daa:	d018      	beq.n	8000dde <i2c_handler+0x42>
		{
			i2c_buffer[0] = -1;
		}
		uart_transmit(i2c_buffer, length + 1);
	}
}
 8000dac:	b008      	add	sp, #32
 8000dae:	bd10      	pop	{r4, pc}
		uint8_t result = 0;
 8000db0:	460c      	mov	r4, r1
		if (HAL_I2C_Master_Transmit(&hi2c1, data[1], data+2 , size - 2, size) !=  HAL_OK)
 8000db2:	1e8b      	subs	r3, r1, #2
		uint8_t result = 0;
 8000db4:	f04f 0c00 	mov.w	ip, #0
		if (HAL_I2C_Master_Transmit(&hi2c1, data[1], data+2 , size - 2, size) !=  HAL_OK)
 8000db8:	7841      	ldrb	r1, [r0, #1]
 8000dba:	4816      	ldr	r0, [pc, #88]	@ (8000e14 <i2c_handler+0x78>)
 8000dbc:	9400      	str	r4, [sp, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	3202      	adds	r2, #2
		uint8_t result = 0;
 8000dc2:	f88d c00c 	strb.w	ip, [sp, #12]
		if (HAL_I2C_Master_Transmit(&hi2c1, data[1], data+2 , size - 2, size) !=  HAL_OK)
 8000dc6:	f003 fb25 	bl	8004414 <HAL_I2C_Master_Transmit>
 8000dca:	b110      	cbz	r0, 8000dd2 <i2c_handler+0x36>
			result = -1 ;
 8000dcc:	23ff      	movs	r3, #255	@ 0xff
 8000dce:	f88d 300c 	strb.w	r3, [sp, #12]
		uart_transmit(&result, 1);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	a803      	add	r0, sp, #12
 8000dd6:	f000 ffc5 	bl	8001d64 <uart_transmit>
}
 8000dda:	b008      	add	sp, #32
 8000ddc:	bd10      	pop	{r4, pc}
		if (length > 16)
 8000dde:	7883      	ldrb	r3, [r0, #2]
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000de0:	7841      	ldrb	r1, [r0, #1]
		if (length > 16)
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	bf28      	it	cs
 8000de6:	2310      	movcs	r3, #16
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000de8:	1c5c      	adds	r4, r3, #1
		i2c_buffer[0] = 0;
 8000dea:	2000      	movs	r0, #0
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000dec:	b2e4      	uxtb	r4, r4
		i2c_buffer[0] = 0;
 8000dee:	f88d 000c 	strb.w	r0, [sp, #12]
		if (HAL_I2C_Master_Receive(&hi2c1, data[1], i2c_buffer + 1, length , length + 1) != HAL_OK)
 8000df2:	9400      	str	r4, [sp, #0]
 8000df4:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <i2c_handler+0x78>)
 8000df6:	f10d 020d 	add.w	r2, sp, #13
 8000dfa:	f003 fbe3 	bl	80045c4 <HAL_I2C_Master_Receive>
 8000dfe:	b110      	cbz	r0, 8000e06 <i2c_handler+0x6a>
			i2c_buffer[0] = -1;
 8000e00:	23ff      	movs	r3, #255	@ 0xff
 8000e02:	f88d 300c 	strb.w	r3, [sp, #12]
		uart_transmit(i2c_buffer, length + 1);
 8000e06:	4621      	mov	r1, r4
 8000e08:	a803      	add	r0, sp, #12
 8000e0a:	f000 ffab 	bl	8001d64 <uart_transmit>
}
 8000e0e:	b008      	add	sp, #32
 8000e10:	bd10      	pop	{r4, pc}
 8000e12:	bf00      	nop
 8000e14:	20000b2c 	.word	0x20000b2c

08000e18 <spi_handler>:
  if (data[0] == 'M')
 8000e18:	7803      	ldrb	r3, [r0, #0]
 8000e1a:	2b4d      	cmp	r3, #77	@ 0x4d
{
 8000e1c:	4684      	mov	ip, r0
  if (data[0] == 'M')
 8000e1e:	d002      	beq.n	8000e26 <spi_handler+0xe>
  else if (data[0] == 'W')
 8000e20:	2b57      	cmp	r3, #87	@ 0x57
 8000e22:	d020      	beq.n	8000e66 <spi_handler+0x4e>
}
 8000e24:	4770      	bx	lr
    LL_SPI_SetClockPolarity(hspi->Instance, cpol);
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <spi_handler+0x60>)
    uint32_t cpol = data[1] == '1' ? SPI_POLARITY_HIGH : SPI_POLARITY_LOW;
 8000e28:	7841      	ldrb	r1, [r0, #1]
    LL_SPI_SetClockPolarity(hspi->Instance, cpol);
 8000e2a:	681b      	ldr	r3, [r3, #0]
    uint32_t cpha = data[2] == '1' ? SPI_PHASE_2EDGE : SPI_PHASE_1EDGE;
 8000e2c:	7880      	ldrb	r0, [r0, #2]
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8000e2e:	681a      	ldr	r2, [r3, #0]
    uint32_t cpol = data[1] == '1' ? SPI_POLARITY_HIGH : SPI_POLARITY_LOW;
 8000e30:	f1a1 0131 	sub.w	r1, r1, #49	@ 0x31
 8000e34:	fab1 f181 	clz	r1, r1
 8000e38:	0949      	lsrs	r1, r1, #5
 8000e3a:	f022 0202 	bic.w	r2, r2, #2
 8000e3e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e42:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	2831      	cmp	r0, #49	@ 0x31
 8000e4c:	bf08      	it	eq
 8000e4e:	f042 0201 	orreq.w	r2, r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	4770      	bx	lr
    HAL_SPI_Transmit(hspi, data+1, size-1, 1000);
 8000e66:	3901      	subs	r1, #1
 8000e68:	b28a      	uxth	r2, r1
 8000e6a:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <spi_handler+0x60>)
 8000e6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e70:	f10c 0101 	add.w	r1, ip, #1
 8000e74:	f004 bbfe 	b.w	8005674 <HAL_SPI_Transmit>
 8000e78:	20000ac8 	.word	0x20000ac8

08000e7c <HAL_ADC_ConvCpltCallback>:
uint8_t adc_buffer[2050];
//int adc_ongoing = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000e7c:	b508      	push	{r3, lr}
	if (hadc != &hadc1)
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <HAL_ADC_ConvCpltCallback+0x20>)
 8000e80:	4283      	cmp	r3, r0
 8000e82:	d000      	beq.n	8000e86 <HAL_ADC_ConvCpltCallback+0xa>
		return;
	adc_ongoing = 0;
	HAL_ADC_Stop_DMA(hadc);
	HAL_TIM_Base_Stop(&htim6);
}
 8000e84:	bd08      	pop	{r3, pc}
	adc_ongoing = 0;
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 8000e8c:	f002 f872 	bl	8002f74 <HAL_ADC_Stop_DMA>
}
 8000e90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim6);
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <HAL_ADC_ConvCpltCallback+0x28>)
 8000e96:	f004 bd15 	b.w	80058c4 <HAL_TIM_Base_Stop>
 8000e9a:	bf00      	nop
 8000e9c:	20000c3c 	.word	0x20000c3c
 8000ea0:	20000cb0 	.word	0x20000cb0
 8000ea4:	200009e4 	.word	0x200009e4

08000ea8 <HAL_TIM_IC_CaptureCallback>:
	}
}
GPIO_PinState prevalue;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  if (htim == &htim2)
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <HAL_TIM_IC_CaptureCallback+0x14>)
 8000eaa:	4283      	cmp	r3, r0
 8000eac:	d000      	beq.n	8000eb0 <HAL_TIM_IC_CaptureCallback+0x8>
  {
    ic_ongoing = 0;
    HAL_TIM_IC_Stop_DMA(&htim3, TIM_CHANNEL_1);
  }
}
 8000eae:	4770      	bx	lr
    ic_ongoing = 0;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x18>)
    HAL_TIM_IC_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000eb2:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x1c>)
    ic_ongoing = 0;
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	6019      	str	r1, [r3, #0]
    HAL_TIM_IC_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000eb8:	f004 be60 	b.w	8005b7c <HAL_TIM_IC_Stop_DMA>
 8000ebc:	20000a7c 	.word	0x20000a7c
 8000ec0:	20000cac 	.word	0x20000cac
 8000ec4:	20000a30 	.word	0x20000a30

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ecc:	2238      	movs	r2, #56	@ 0x38
 8000ece:	2100      	movs	r1, #0
 8000ed0:	a806      	add	r0, sp, #24
 8000ed2:	f006 fb77 	bl	80075c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed6:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000ee0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000ee4:	9305      	str	r3, [sp, #20]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	2403      	movs	r4, #3
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	f003 fc80 	bl	80047ec <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eec:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000eee:	2205      	movs	r2, #5
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000ef6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efa:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000efe:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f02:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f04:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f06:	233c      	movs	r3, #60	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000f08:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f0a:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f003 fce8 	bl	80048e0 <HAL_RCC_OscConfig>
 8000f10:	b108      	cbz	r0, 8000f16 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f12:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <SystemClock_Config+0x4c>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f16:	2104      	movs	r1, #4
 8000f18:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f1c:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f20:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f24:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f28:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f2a:	f003 ff81 	bl	8004e30 <HAL_RCC_ClockConfig>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	b108      	cbz	r0, 8000f36 <SystemClock_Config+0x6e>
 8000f32:	b672      	cpsid	i
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <SystemClock_Config+0x6c>
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <SystemClock_Config+0x7c>)
 8000f38:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000f3c:	f003 ff16 	bl	8004d6c <HAL_RCC_MCOConfig>
}
 8000f40:	b014      	add	sp, #80	@ 0x50
 8000f42:	bd10      	pop	{r4, pc}
 8000f44:	00060400 	.word	0x00060400

08000f48 <main>:
{
 8000f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4c:	ed2d 8b02 	vpush	{d8}
 8000f50:	f5ad 5db3 	sub.w	sp, sp, #5728	@ 0x1660
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f54:	4db7      	ldr	r5, [pc, #732]	@ (8001234 <main+0x2ec>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	2400      	movs	r4, #0
  HAL_Init();
 8000f58:	f001 fa54 	bl	8002404 <HAL_Init>
  SystemClock_Config();
 8000f5c:	f7ff ffb4 	bl	8000ec8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f8cd 4850 	str.w	r4, [sp, #2128]	@ 0x850
 8000f64:	f8cd 4854 	str.w	r4, [sp, #2132]	@ 0x854
 8000f68:	f8cd 4858 	str.w	r4, [sp, #2136]	@ 0x858
 8000f6c:	f8cd 485c 	str.w	r4, [sp, #2140]	@ 0x85c
 8000f70:	f8cd 4860 	str.w	r4, [sp, #2144]	@ 0x860
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f74:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8000f76:	48b0      	ldr	r0, [pc, #704]	@ (8001238 <main+0x2f0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f78:	f043 0320 	orr.w	r3, r3, #32
 8000f7c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000f7e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000f80:	aa0b      	add	r2, sp, #44	@ 0x2c
 8000f82:	f003 0320 	and.w	r3, r3, #32
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f90:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000f92:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000f94:	aa0c      	add	r2, sp, #48	@ 0x30
 8000f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000fa6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000fa8:	aa0d      	add	r2, sp, #52	@ 0x34
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000fba:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000fbc:	aa0e      	add	r2, sp, #56	@ 0x38
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000fce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000fd0:	aa0f      	add	r2, sp, #60	@ 0x3c
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(con_GPIO_Port, con_Pin, GPIO_PIN_RESET);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4622      	mov	r2, r4
 8000fde:	f003 f843 	bl	8004068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f003 f83c 	bl	8004068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	4892      	ldr	r0, [pc, #584]	@ (800123c <main+0x2f4>)
 8000ff4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000ff8:	f003 f836 	bl	8004068 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ffc:	f44f 6780 	mov.w	r7, #1024	@ 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001002:	488f      	ldr	r0, [pc, #572]	@ (8001240 <main+0x2f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	f8cd 3854 	str.w	r3, [sp, #2132]	@ 0x854
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001008:	f50d 6105 	add.w	r1, sp, #2128	@ 0x850
  GPIO_InitStruct.Pin = con_Pin;
 800100c:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800100e:	f8cd 7850 	str.w	r7, [sp, #2128]	@ 0x850
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	f8cd 4858 	str.w	r4, [sp, #2136]	@ 0x858
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	f8cd 485c 	str.w	r4, [sp, #2140]	@ 0x85c
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800101a:	f8cd 4860 	str.w	r4, [sp, #2144]	@ 0x860
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101e:	f002 ff15 	bl	8003e4c <HAL_GPIO_Init>
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 8001022:	4885      	ldr	r0, [pc, #532]	@ (8001238 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	f8cd 4858 	str.w	r4, [sp, #2136]	@ 0x858
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 8001028:	f50d 6105 	add.w	r1, sp, #2128	@ 0x850
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	f8cd 485c 	str.w	r4, [sp, #2140]	@ 0x85c
  GPIO_InitStruct.Pin = con_Pin;
 8001030:	f8cd 6850 	str.w	r6, [sp, #2128]	@ 0x850
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	f8cd 6854 	str.w	r6, [sp, #2132]	@ 0x854
  HAL_GPIO_Init(con_GPIO_Port, &GPIO_InitStruct);
 8001038:	f002 ff08 	bl	8003e4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f50d 6105 	add.w	r1, sp, #2128	@ 0x850
 8001040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001044:	f8cd 7850 	str.w	r7, [sp, #2128]	@ 0x850
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	f8cd 6854 	str.w	r6, [sp, #2132]	@ 0x854
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	f8cd 4858 	str.w	r4, [sp, #2136]	@ 0x858
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	f8cd 485c 	str.w	r4, [sp, #2140]	@ 0x85c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f002 fefa 	bl	8003e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001058:	f44f 7340 	mov.w	r3, #768	@ 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	4877      	ldr	r0, [pc, #476]	@ (800123c <main+0x2f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800105e:	f8cd 3850 	str.w	r3, [sp, #2128]	@ 0x850
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f50d 6105 	add.w	r1, sp, #2128	@ 0x850
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	f8cd 6854 	str.w	r6, [sp, #2132]	@ 0x854
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	f8cd 4858 	str.w	r4, [sp, #2136]	@ 0x858
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	f8cd 485c 	str.w	r4, [sp, #2140]	@ 0x85c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f002 feeb 	bl	8003e4c <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001076:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	64ab      	str	r3, [r5, #72]	@ 0x48
 800107e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	9308      	str	r3, [sp, #32]
 8001086:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001088:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8001090:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001092:	aa09      	add	r2, sp, #36	@ 0x24
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	6813      	ldr	r3, [r2, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800109c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800109e:	4333      	orrs	r3, r6
 80010a0:	64ab      	str	r3, [r5, #72]	@ 0x48
 80010a2:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80010a4:	aa0a      	add	r2, sp, #40	@ 0x28
 80010a6:	4033      	ands	r3, r6
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010ac:	4621      	mov	r1, r4
 80010ae:	4622      	mov	r2, r4
 80010b0:	200b      	movs	r0, #11
 80010b2:	f002 fa4f 	bl	8003554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b6:	200b      	movs	r0, #11
 80010b8:	f002 fa88 	bl	80035cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010bc:	4622      	mov	r2, r4
 80010be:	4621      	mov	r1, r4
 80010c0:	200c      	movs	r0, #12
 80010c2:	f002 fa47 	bl	8003554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010c6:	200c      	movs	r0, #12
 80010c8:	f002 fa80 	bl	80035cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel8_IRQn, 0, 0);
 80010cc:	4622      	mov	r2, r4
 80010ce:	4621      	mov	r1, r4
 80010d0:	2063      	movs	r0, #99	@ 0x63
 80010d2:	f002 fa3f 	bl	8003554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel8_IRQn);
 80010d6:	2063      	movs	r0, #99	@ 0x63
 80010d8:	f002 fa78 	bl	80035cc <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 80010dc:	4859      	ldr	r0, [pc, #356]	@ (8001244 <main+0x2fc>)
 80010de:	4b5a      	ldr	r3, [pc, #360]	@ (8001248 <main+0x300>)
 80010e0:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80010e2:	f240 1301 	movw	r3, #257	@ 0x101
 80010e6:	8083      	strh	r3, [r0, #4]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80010e8:	2508      	movs	r5, #8
 80010ea:	f241 0321 	movw	r3, #4129	@ 0x1021
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80010ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80010f2:	e9c0 3502 	strd	r3, r5, [r0, #8]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010f6:	6184      	str	r4, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010f8:	6206      	str	r6, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010fa:	f002 fae1 	bl	80036c0 <HAL_CRC_Init>
 80010fe:	b108      	cbz	r0, 8001104 <main+0x1bc>
 8001100:	b672      	cpsid	i
  while (1)
 8001102:	e7fe      	b.n	8001102 <main+0x1ba>
  huart2.Instance = USART2;
 8001104:	4c51      	ldr	r4, [pc, #324]	@ (800124c <main+0x304>)
  huart2.Init.BaudRate = 115200;
 8001106:	4a52      	ldr	r2, [pc, #328]	@ (8001250 <main+0x308>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8001108:	6120      	str	r0, [r4, #16]
  huart2.Init.BaudRate = 115200;
 800110a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 800110e:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001112:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001116:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart2.Init.BaudRate = 115200;
 800111a:	e9c4 2300 	strd	r2, r3, [r4]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111e:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001120:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001124:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001126:	f005 ff39 	bl	8006f9c <HAL_UART_Init>
 800112a:	b108      	cbz	r0, 8001130 <main+0x1e8>
 800112c:	b672      	cpsid	i
  while (1)
 800112e:	e7fe      	b.n	800112e <main+0x1e6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	4601      	mov	r1, r0
 8001132:	4620      	mov	r0, r4
 8001134:	f005 fffa 	bl	800712c <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	b108      	cbz	r0, 800113e <main+0x1f6>
 800113a:	b672      	cpsid	i
  while (1)
 800113c:	e7fe      	b.n	800113c <main+0x1f4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113e:	4601      	mov	r1, r0
 8001140:	4620      	mov	r0, r4
 8001142:	f006 f819 	bl	8007178 <HAL_UARTEx_SetRxFifoThreshold>
 8001146:	b108      	cbz	r0, 800114c <main+0x204>
 8001148:	b672      	cpsid	i
  while (1)
 800114a:	e7fe      	b.n	800114a <main+0x202>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800114c:	4620      	mov	r0, r4
 800114e:	f005 ffcf 	bl	80070f0 <HAL_UARTEx_DisableFifoMode>
 8001152:	4601      	mov	r1, r0
 8001154:	b108      	cbz	r0, 800115a <main+0x212>
 8001156:	b672      	cpsid	i
  while (1)
 8001158:	e7fe      	b.n	8001158 <main+0x210>
  ADC_MultiModeTypeDef multimode = {0};
 800115a:	f10d 084c 	add.w	r8, sp, #76	@ 0x4c
  hadc1.Instance = ADC1;
 800115e:	4c3d      	ldr	r4, [pc, #244]	@ (8001254 <main+0x30c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001160:	9007      	str	r0, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8001162:	e9c8 0000 	strd	r0, r0, [r8]
 8001166:	f8c8 0008 	str.w	r0, [r8, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800116a:	2220      	movs	r2, #32
 800116c:	f50d 6005 	add.w	r0, sp, #2128	@ 0x850
 8001170:	f006 fa28 	bl	80075c4 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001174:	9907      	ldr	r1, [sp, #28]
  hadc1.Init.NbrOfConversion = 1;
 8001176:	6226      	str	r6, [r4, #32]
  hadc1.Instance = ADC1;
 8001178:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800117c:	6023      	str	r3, [r4, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117e:	2604      	movs	r6, #4
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001180:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001184:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001186:	e9c4 1101 	strd	r1, r1, [r4, #4]
  hadc1.Init.GainCompensation = 0;
 800118a:	e9c4 1103 	strd	r1, r1, [r4, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800118e:	6327      	str	r7, [r4, #48]	@ 0x30
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001190:	6161      	str	r1, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001192:	83a1      	strh	r1, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001194:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001198:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800119c:	63e1      	str	r1, [r4, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800119e:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a2:	61a6      	str	r6, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80011a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a6:	f001 f94f 	bl	8002448 <HAL_ADC_Init>
 80011aa:	b108      	cbz	r0, 80011b0 <main+0x268>
 80011ac:	b672      	cpsid	i
  while (1)
 80011ae:	e7fe      	b.n	80011ae <main+0x266>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b0:	f8c8 0000 	str.w	r0, [r8]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011b4:	a913      	add	r1, sp, #76	@ 0x4c
 80011b6:	4620      	mov	r0, r4
 80011b8:	f001 ff24 	bl	8003004 <HAL_ADCEx_MultiModeConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	b108      	cbz	r0, 80011c4 <main+0x27c>
 80011c0:	b672      	cpsid	i
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <main+0x27a>
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011c4:	f8cd 3858 	str.w	r3, [sp, #2136]	@ 0x858
  sConfig.Offset = 0;
 80011c8:	f8cd 3864 	str.w	r3, [sp, #2148]	@ 0x864
  sConfig.Channel = ADC_CHANNEL_1;
 80011cc:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <main+0x310>)
 80011ce:	f8cd 3850 	str.w	r3, [sp, #2128]	@ 0x850
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d2:	2306      	movs	r3, #6
 80011d4:	f8cd 3854 	str.w	r3, [sp, #2132]	@ 0x854
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d8:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011da:	237f      	movs	r3, #127	@ 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011dc:	f50d 6105 	add.w	r1, sp, #2128	@ 0x850
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e0:	f8cd 385c 	str.w	r3, [sp, #2140]	@ 0x85c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e4:	f8cd 6860 	str.w	r6, [sp, #2144]	@ 0x860
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e8:	f001 fa98 	bl	800271c <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b108      	cbz	r0, 80011f4 <main+0x2ac>
 80011f0:	b672      	cpsid	i
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <main+0x2aa>
  hspi3.Instance = SPI3;
 80011f4:	4819      	ldr	r0, [pc, #100]	@ (800125c <main+0x314>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011f6:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8001260 <main+0x318>
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	6083      	str	r3, [r0, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001200:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001204:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001206:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001208:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800120c:	e9c0 c300 	strd	ip, r3, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001210:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001214:	60c3      	str	r3, [r0, #12]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001216:	f44f 7800 	mov.w	r8, #512	@ 0x200
 800121a:	2318      	movs	r3, #24
 800121c:	e9c0 8306 	strd	r8, r3, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8001220:	2307      	movs	r3, #7
 8001222:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001224:	6345      	str	r5, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001226:	f004 f9a7 	bl	8005578 <HAL_SPI_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	b1d0      	cbz	r0, 8001264 <main+0x31c>
 800122e:	b672      	cpsid	i
  while (1)
 8001230:	e7fe      	b.n	8001230 <main+0x2e8>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	48000800 	.word	0x48000800
 800123c:	48000400 	.word	0x48000400
 8001240:	48001800 	.word	0x48001800
 8001244:	20000b94 	.word	0x20000b94
 8001248:	40023000 	.word	0x40023000
 800124c:	200008f0 	.word	0x200008f0
 8001250:	40004400 	.word	0x40004400
 8001254:	20000c3c 	.word	0x20000c3c
 8001258:	04300002 	.word	0x04300002
 800125c:	20000ac8 	.word	0x20000ac8
 8001260:	40003c00 	.word	0x40003c00
  htim6.Instance = TIM6;
 8001264:	4881      	ldr	r0, [pc, #516]	@ (800146c <main+0x524>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f8cd 3850 	str.w	r3, [sp, #2128]	@ 0x850
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	f8cd 3854 	str.w	r3, [sp, #2132]	@ 0x854
 8001272:	f8cd 3858 	str.w	r3, [sp, #2136]	@ 0x858
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	6183      	str	r3, [r0, #24]
  htim6.Instance = TIM6;
 8001278:	4b7d      	ldr	r3, [pc, #500]	@ (8001470 <main+0x528>)
 800127a:	6003      	str	r3, [r0, #0]
  htim6.Init.Period = 149;
 800127c:	2395      	movs	r3, #149	@ 0x95
 800127e:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001280:	f004 ff44 	bl	800610c <HAL_TIM_Base_Init>
 8001284:	b108      	cbz	r0, 800128a <main+0x342>
 8001286:	b672      	cpsid	i
  while (1)
 8001288:	e7fe      	b.n	8001288 <main+0x340>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800128a:	2320      	movs	r3, #32
 800128c:	f8cd 3850 	str.w	r3, [sp, #2128]	@ 0x850
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001290:	4876      	ldr	r0, [pc, #472]	@ (800146c <main+0x524>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001294:	f50d 6105 	add.w	r1, sp, #2128	@ 0x850
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	f8cd 3858 	str.w	r3, [sp, #2136]	@ 0x858
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800129c:	f005 f870 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	b108      	cbz	r0, 80012a6 <main+0x35e>
 80012a2:	b672      	cpsid	i
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <main+0x35c>
  hi2c1.Instance = I2C1;
 80012a6:	4c73      	ldr	r4, [pc, #460]	@ (8001474 <main+0x52c>)
  hi2c1.Init.Timing = 0x10E32879;
 80012a8:	4b73      	ldr	r3, [pc, #460]	@ (8001478 <main+0x530>)
 80012aa:	4e74      	ldr	r6, [pc, #464]	@ (800147c <main+0x534>)
  hi2c1.Init.OwnAddress1 = 0;
 80012ac:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80012ae:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b2:	e9c4 0006 	strd	r0, r0, [r4, #24]
  hi2c1.Init.Timing = 0x10E32879;
 80012b6:	e9c4 6300 	strd	r6, r3, [r4]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ba:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	2301      	movs	r3, #1
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012be:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c0:	60e3      	str	r3, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c2:	f003 f84d 	bl	8004360 <HAL_I2C_Init>
 80012c6:	4601      	mov	r1, r0
 80012c8:	b108      	cbz	r0, 80012ce <main+0x386>
 80012ca:	b672      	cpsid	i
  while (1)
 80012cc:	e7fe      	b.n	80012cc <main+0x384>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ce:	4620      	mov	r0, r4
 80012d0:	f003 fa36 	bl	8004740 <HAL_I2CEx_ConfigAnalogFilter>
 80012d4:	4601      	mov	r1, r0
 80012d6:	b108      	cbz	r0, 80012dc <main+0x394>
 80012d8:	b672      	cpsid	i
  while (1)
 80012da:	e7fe      	b.n	80012da <main+0x392>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012dc:	4620      	mov	r0, r4
 80012de:	f003 fa59 	bl	8004794 <HAL_I2CEx_ConfigDigitalFilter>
 80012e2:	4601      	mov	r1, r0
 80012e4:	b108      	cbz	r0, 80012ea <main+0x3a2>
 80012e6:	b672      	cpsid	i
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <main+0x3a0>
  hdac1.Instance = DAC1;
 80012ea:	4c65      	ldr	r4, [pc, #404]	@ (8001480 <main+0x538>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80012ec:	2230      	movs	r2, #48	@ 0x30
 80012ee:	f50d 6005 	add.w	r0, sp, #2128	@ 0x850
 80012f2:	f006 f967 	bl	80075c4 <memset>
  hdac1.Instance = DAC1;
 80012f6:	4b63      	ldr	r3, [pc, #396]	@ (8001484 <main+0x53c>)
 80012f8:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012fa:	4620      	mov	r0, r4
 80012fc:	f002 fa82 	bl	8003804 <HAL_DAC_Init>
 8001300:	4602      	mov	r2, r0
 8001302:	b108      	cbz	r0, 8001308 <main+0x3c0>
 8001304:	b672      	cpsid	i
  while (1)
 8001306:	e7fe      	b.n	8001306 <main+0x3be>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001308:	2302      	movs	r3, #2
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800130a:	4620      	mov	r0, r4
 800130c:	f50d 6105 	add.w	r1, sp, #2128	@ 0x850
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001310:	f8cd 3850 	str.w	r3, [sp, #2128]	@ 0x850
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001314:	f8cd 3864 	str.w	r3, [sp, #2148]	@ 0x864
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001318:	f8cd 3868 	str.w	r3, [sp, #2152]	@ 0x868
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800131c:	f8ad 2854 	strh.w	r2, [sp, #2132]	@ 0x854
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001320:	f8cd 2858 	str.w	r2, [sp, #2136]	@ 0x858
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001324:	f8cd 285c 	str.w	r2, [sp, #2140]	@ 0x85c
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001328:	f8cd 2860 	str.w	r2, [sp, #2144]	@ 0x860
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800132c:	f8cd 286c 	str.w	r2, [sp, #2156]	@ 0x86c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001330:	f002 fae6 	bl	8003900 <HAL_DAC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	b108      	cbz	r0, 800133c <main+0x3f4>
 8001338:	b672      	cpsid	i
  while (1)
 800133a:	e7fe      	b.n	800133a <main+0x3f2>
  hcomp3.Instance = COMP3;
 800133c:	4852      	ldr	r0, [pc, #328]	@ (8001488 <main+0x540>)
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800133e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001342:	6043      	str	r3, [r0, #4]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001344:	6183      	str	r3, [r0, #24]
  hcomp3.Instance = COMP3;
 8001346:	4b51      	ldr	r3, [pc, #324]	@ (800148c <main+0x544>)
 8001348:	6003      	str	r3, [r0, #0]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_70MV;
 800134a:	2550      	movs	r5, #80	@ 0x50
 800134c:	f44f 23e0 	mov.w	r3, #458752	@ 0x70000
 8001350:	e9c0 5302 	strd	r5, r3, [r0, #8]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8001354:	f001 ff0a 	bl	800316c <HAL_COMP_Init>
 8001358:	b108      	cbz	r0, 800135e <main+0x416>
 800135a:	b672      	cpsid	i
  while (1)
 800135c:	e7fe      	b.n	800135c <main+0x414>
  htim3.Instance = TIM3;
 800135e:	4c4c      	ldr	r4, [pc, #304]	@ (8001490 <main+0x548>)
 8001360:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <main+0x54c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f8cd 0850 	str.w	r0, [sp, #2128]	@ 0x850
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	ad13      	add	r5, sp, #76	@ 0x4c
 8001368:	e9c5 0000 	strd	r0, r0, [r5]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001370:	f8cd 0854 	str.w	r0, [sp, #2132]	@ 0x854
 8001374:	f8cd 0858 	str.w	r0, [sp, #2136]	@ 0x858
 8001378:	f8cd 085c 	str.w	r0, [sp, #2140]	@ 0x85c
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	61a0      	str	r0, [r4, #24]
  htim3.Instance = TIM3;
 8001380:	6023      	str	r3, [r4, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	60a8      	str	r0, [r5, #8]
  htim3.Init.Period = 65535;
 8001384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001388:	4620      	mov	r0, r4
  htim3.Init.Period = 65535;
 800138a:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800138c:	f004 febe 	bl	800610c <HAL_TIM_Base_Init>
 8001390:	b108      	cbz	r0, 8001396 <main+0x44e>
 8001392:	b672      	cpsid	i
  while (1)
 8001394:	e7fe      	b.n	8001394 <main+0x44c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139a:	f50d 6105 	add.w	r1, sp, #2128	@ 0x850
 800139e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a0:	f8cd 3850 	str.w	r3, [sp, #2128]	@ 0x850
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a4:	f004 fca0 	bl	8005ce8 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b108      	cbz	r0, 80013b0 <main+0x468>
 80013ac:	b672      	cpsid	i
  while (1)
 80013ae:	e7fe      	b.n	80013ae <main+0x466>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b0:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	602b      	str	r3, [r5, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	60ab      	str	r3, [r5, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b6:	a913      	add	r1, sp, #76	@ 0x4c
 80013b8:	f004 ffe2 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	b108      	cbz	r0, 80013c2 <main+0x47a>
 80013be:	b672      	cpsid	i
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <main+0x478>
  htim2.Instance = TIM2;
 80013c2:	4d35      	ldr	r5, [pc, #212]	@ (8001498 <main+0x550>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c4:	2300      	movs	r3, #0
 80013c6:	ac13      	add	r4, sp, #76	@ 0x4c
 80013c8:	e9c4 3300 	strd	r3, r3, [r4]
 80013cc:	e9c4 3302 	strd	r3, r3, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	e9c5 3301 	strd	r3, r3, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	9312      	str	r3, [sp, #72]	@ 0x48
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013da:	f8cd 3850 	str.w	r3, [sp, #2128]	@ 0x850
 80013de:	f8cd 3854 	str.w	r3, [sp, #2132]	@ 0x854
 80013e2:	f8cd 3858 	str.w	r3, [sp, #2136]	@ 0x858
 80013e6:	f8cd 385c 	str.w	r3, [sp, #2140]	@ 0x85c
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ea:	612b      	str	r3, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	61ab      	str	r3, [r5, #24]
  htim2.Instance = TIM2;
 80013ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f2:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f4:	4628      	mov	r0, r5
  htim2.Init.Period = 4294967295;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013fc:	f004 fe86 	bl	800610c <HAL_TIM_Base_Init>
 8001400:	b108      	cbz	r0, 8001406 <main+0x4be>
 8001402:	b672      	cpsid	i
  while (1)
 8001404:	e7fe      	b.n	8001404 <main+0x4bc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001406:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140a:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140c:	a913      	add	r1, sp, #76	@ 0x4c
 800140e:	4628      	mov	r0, r5
 8001410:	f004 fc6a 	bl	8005ce8 <HAL_TIM_ConfigClockSource>
 8001414:	b108      	cbz	r0, 800141a <main+0x4d2>
 8001416:	b672      	cpsid	i
  while (1)
 8001418:	e7fe      	b.n	8001418 <main+0x4d0>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800141a:	4628      	mov	r0, r5
 800141c:	f004 fea8 	bl	8006170 <HAL_TIM_IC_Init>
 8001420:	b108      	cbz	r0, 8001426 <main+0x4de>
 8001422:	b672      	cpsid	i
  while (1)
 8001424:	e7fe      	b.n	8001424 <main+0x4dc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	9010      	str	r0, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142a:	a910      	add	r1, sp, #64	@ 0x40
 800142c:	4628      	mov	r0, r5
 800142e:	f004 ffa7 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4602      	mov	r2, r0
 8001434:	b108      	cbz	r0, 800143a <main+0x4f2>
 8001436:	b672      	cpsid	i
  while (1)
 8001438:	e7fe      	b.n	8001438 <main+0x4f0>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800143a:	f8cd 0850 	str.w	r0, [sp, #2128]	@ 0x850
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800143e:	f8cd 0858 	str.w	r0, [sp, #2136]	@ 0x858
  sConfigIC.ICFilter = 0;
 8001442:	f8cd 085c 	str.w	r0, [sp, #2140]	@ 0x85c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001446:	2401      	movs	r4, #1
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001448:	f50d 6105 	add.w	r1, sp, #2128	@ 0x850
 800144c:	4628      	mov	r0, r5
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800144e:	f8cd 4854 	str.w	r4, [sp, #2132]	@ 0x854
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	f004 fefd 	bl	8006250 <HAL_TIM_IC_ConfigChannel>
 8001456:	4602      	mov	r2, r0
 8001458:	b108      	cbz	r0, 800145e <main+0x516>
 800145a:	b672      	cpsid	i
  while (1)
 800145c:	e7fe      	b.n	800145c <main+0x514>
  if (HAL_TIMEx_TISelection(&htim2, TIM_TIM2_TI1_COMP3, TIM_CHANNEL_1) != HAL_OK)
 800145e:	2103      	movs	r1, #3
 8001460:	4628      	mov	r0, r5
 8001462:	f004 ffe7 	bl	8006434 <HAL_TIMEx_TISelection>
 8001466:	b1c8      	cbz	r0, 800149c <main+0x554>
 8001468:	b672      	cpsid	i
  while (1)
 800146a:	e7fe      	b.n	800146a <main+0x522>
 800146c:	200009e4 	.word	0x200009e4
 8001470:	40001000 	.word	0x40001000
 8001474:	20000b2c 	.word	0x20000b2c
 8001478:	10e32879 	.word	0x10e32879
 800147c:	40005400 	.word	0x40005400
 8001480:	20000b80 	.word	0x20000b80
 8001484:	50000800 	.word	0x50000800
 8001488:	20000bb8 	.word	0x20000bb8
 800148c:	40010208 	.word	0x40010208
 8001490:	20000a30 	.word	0x20000a30
 8001494:	40000400 	.word	0x40000400
 8001498:	20000a7c 	.word	0x20000a7c
  uart_init();
 800149c:	f000 ff2a 	bl	80022f4 <uart_init>
  uart_register_handler("GPIO", gpio_handler);
 80014a0:	493b      	ldr	r1, [pc, #236]	@ (8001590 <main+0x648>)
 80014a2:	483c      	ldr	r0, [pc, #240]	@ (8001594 <main+0x64c>)
 80014a4:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 80015c4 <main+0x67c>
 80014a8:	f000 fdc6 	bl	8002038 <uart_register_handler>
  uart_register_handler("SPI", spi_handler);
 80014ac:	493a      	ldr	r1, [pc, #232]	@ (8001598 <main+0x650>)
 80014ae:	483b      	ldr	r0, [pc, #236]	@ (800159c <main+0x654>)
 80014b0:	f000 fdc2 	bl	8002038 <uart_register_handler>
  uart_register_handler("I2C", i2c_handler);
 80014b4:	483a      	ldr	r0, [pc, #232]	@ (80015a0 <main+0x658>)
 80014b6:	493b      	ldr	r1, [pc, #236]	@ (80015a4 <main+0x65c>)
 80014b8:	f000 fdbe 	bl	8002038 <uart_register_handler>
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 80014bc:	4621      	mov	r1, r4
 80014be:	483a      	ldr	r0, [pc, #232]	@ (80015a8 <main+0x660>)
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 80014c0:	4c39      	ldr	r4, [pc, #228]	@ (80015a8 <main+0x660>)
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 80014c2:	f002 fdcb 	bl	800405c <HAL_GPIO_ReadPin>
	uint32_t tmp = (int)(freq * 1e6);
 80014c6:	a730      	add	r7, pc, #192	@ (adr r7, 8001588 <main+0x640>)
 80014c8:	e9d7 6700 	ldrd	r6, r7, [r7]
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 80014cc:	4603      	mov	r3, r0
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 80014ce:	2101      	movs	r1, #1
 80014d0:	4620      	mov	r0, r4
  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 80014d2:	f888 3000 	strb.w	r3, [r8]
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 80014d6:	f002 fdc1 	bl	800405c <HAL_GPIO_ReadPin>
 80014da:	f898 2000 	ldrb.w	r2, [r8]
		  set_sm_freq(1e6 , &htim6);
 80014de:	4933      	ldr	r1, [pc, #204]	@ (80015ac <main+0x664>)
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 80014e0:	4603      	mov	r3, r0
 80014e2:	429a      	cmp	r2, r3
		  set_sm_freq(1e6 , &htim6);
 80014e4:	4832      	ldr	r0, [pc, #200]	@ (80015b0 <main+0x668>)
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 80014e6:	d048      	beq.n	800157a <main+0x632>
		  set_sm_freq(1e6 , &htim6);
 80014e8:	f000 f8c2 	bl	8001670 <set_sm_freq>
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 80014ec:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <main+0x66c>)
 80014ee:	4832      	ldr	r0, [pc, #200]	@ (80015b8 <main+0x670>)
 80014f0:	4a2e      	ldr	r2, [pc, #184]	@ (80015ac <main+0x664>)
 80014f2:	f240 4101 	movw	r1, #1025	@ 0x401
 80014f6:	f000 f8a5 	bl	8001644 <samp>
		  make_8to16(adc_buffer, 2050,temp_buffer );
 80014fa:	aa13      	add	r2, sp, #76	@ 0x4c
 80014fc:	f640 0102 	movw	r1, #2050	@ 0x802
 8001500:	482d      	ldr	r0, [pc, #180]	@ (80015b8 <main+0x670>)
 8001502:	f000 f863 	bl	80015cc <make_8to16>
		  uint16_t threshold = get_max_min(temp_buffer, 1025);
 8001506:	f240 4101 	movw	r1, #1025	@ 0x401
 800150a:	a813      	add	r0, sp, #76	@ 0x4c
 800150c:	f000 f878 	bl	8001600 <get_max_min>
		  float freq = get_freq(&hcomp3, &hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, threshold,
 8001510:	f50d 6305 	add.w	r3, sp, #2128	@ 0x850
 8001514:	9303      	str	r3, [sp, #12]
 8001516:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800151a:	2300      	movs	r3, #0
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	4927      	ldr	r1, [pc, #156]	@ (80015bc <main+0x674>)
 8001520:	9000      	str	r0, [sp, #0]
 8001522:	9204      	str	r2, [sp, #16]
 8001524:	4826      	ldr	r0, [pc, #152]	@ (80015c0 <main+0x678>)
 8001526:	9505      	str	r5, [sp, #20]
 8001528:	461a      	mov	r2, r3
 800152a:	9501      	str	r5, [sp, #4]
 800152c:	f000 f8b0 	bl	8001690 <get_freq>
	uint32_t tmp = (int)(freq * 1e6);
 8001530:	ee10 0a10 	vmov	r0, s0
		  float freq = get_freq(&hcomp3, &hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, threshold,
 8001534:	eeb0 8a40 	vmov.f32	s16, s0
	uint32_t tmp = (int)(freq * 1e6);
 8001538:	f7fe ffda 	bl	80004f0 <__aeabi_f2d>
 800153c:	4632      	mov	r2, r6
 800153e:	463b      	mov	r3, r7
 8001540:	f7ff f82e 	bl	80005a0 <__aeabi_dmul>
 8001544:	f7ff fa3e 	bl	80009c4 <__aeabi_d2iz>
 8001548:	ba00      	rev	r0, r0
	uart_transmit(freq_8, 4);
 800154a:	2104      	movs	r1, #4
	freq_8[0] = (tmp >> 24) & 0xFF;
 800154c:	9010      	str	r0, [sp, #64]	@ 0x40
	uart_transmit(freq_8, 4);
 800154e:	a810      	add	r0, sp, #64	@ 0x40
 8001550:	f000 fc08 	bl	8001d64 <uart_transmit>
		  set_sm_freq(get_fit_sm_hz(freq) , &htim6);
 8001554:	eeb0 0a48 	vmov.f32	s0, s16
 8001558:	f000 f916 	bl	8001788 <get_fit_sm_hz>
 800155c:	4913      	ldr	r1, [pc, #76]	@ (80015ac <main+0x664>)
 800155e:	f000 f887 	bl	8001670 <set_sm_freq>
		  samp(adc_buffer, 1025, &htim6, &hadc1);
 8001562:	4815      	ldr	r0, [pc, #84]	@ (80015b8 <main+0x670>)
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <main+0x66c>)
 8001566:	4a11      	ldr	r2, [pc, #68]	@ (80015ac <main+0x664>)
 8001568:	f240 4101 	movw	r1, #1025	@ 0x401
 800156c:	f000 f86a 	bl	8001644 <samp>
		  uart_transmit(adc_buffer, 2050);
 8001570:	4811      	ldr	r0, [pc, #68]	@ (80015b8 <main+0x670>)
 8001572:	f640 0102 	movw	r1, #2050	@ 0x802
 8001576:	f000 fbf5 	bl	8001d64 <uart_transmit>
	  prevalue = HAL_GPIO_ReadPin(con_GPIO_Port, con_Pin);
 800157a:	2101      	movs	r1, #1
 800157c:	4620      	mov	r0, r4
 800157e:	f002 fd6d 	bl	800405c <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
	  if (HAL_GPIO_ReadPin(con_GPIO_Port,con_Pin) != prevalue)
 8001584:	e7a3      	b.n	80014ce <main+0x586>
 8001586:	bf00      	nop
 8001588:	00000000 	.word	0x00000000
 800158c:	412e8480 	.word	0x412e8480
 8001590:	08000d45 	.word	0x08000d45
 8001594:	0800779c 	.word	0x0800779c
 8001598:	08000e19 	.word	0x08000e19
 800159c:	080077a4 	.word	0x080077a4
 80015a0:	080077a8 	.word	0x080077a8
 80015a4:	08000d9d 	.word	0x08000d9d
 80015a8:	48000800 	.word	0x48000800
 80015ac:	200009e4 	.word	0x200009e4
 80015b0:	000f4240 	.word	0x000f4240
 80015b4:	20000c3c 	.word	0x20000c3c
 80015b8:	2000008c 	.word	0x2000008c
 80015bc:	20000b80 	.word	0x20000b80
 80015c0:	20000bb8 	.word	0x20000bb8
 80015c4:	20000088 	.word	0x20000088

080015c8 <Error_Handler>:
 80015c8:	b672      	cpsid	i
  while (1)
 80015ca:	e7fe      	b.n	80015ca <Error_Handler+0x2>

080015cc <make_8to16>:


uint16_t *make_8to16(uint8_t *buffer, size_t size , uint16_t *new_buffer)
{
	int i = 0;
	if (size % 2 != 0)
 80015cc:	07cb      	lsls	r3, r1, #31
 80015ce:	d412      	bmi.n	80015f6 <make_8to16+0x2a>
		return 0;
	//uint16_t buffer_16[size / 2];
	while (i < size / 2)
 80015d0:	0849      	lsrs	r1, r1, #1
 80015d2:	d012      	beq.n	80015fa <make_8to16+0x2e>
{
 80015d4:	b510      	push	{r4, lr}
 80015d6:	4603      	mov	r3, r0
 80015d8:	f1a2 0e02 	sub.w	lr, r2, #2
 80015dc:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
	{
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 80015e0:	785c      	ldrb	r4, [r3, #1]
 80015e2:	f813 1b02 	ldrb.w	r1, [r3], #2
 80015e6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
	while (i < size / 2)
 80015ea:	4563      	cmp	r3, ip
		new_buffer[i] = buffer[2*i] | buffer[2 * i + 1] << 8;
 80015ec:	f82e 1f02 	strh.w	r1, [lr, #2]!
	while (i < size / 2)
 80015f0:	d1f6      	bne.n	80015e0 <make_8to16+0x14>
		++i;
	}
	return new_buffer;
 80015f2:	4610      	mov	r0, r2
}
 80015f4:	bd10      	pop	{r4, pc}
		return 0;
 80015f6:	2000      	movs	r0, #0
 80015f8:	4770      	bx	lr
	return new_buffer;
 80015fa:	4610      	mov	r0, r2
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <get_max_min>:
uint16_t min = 4097;



uint16_t get_max_min(uint16_t * buffer, size_t size)
{
 8001600:	b430      	push	{r4, r5}
		{
			min = buffer[i];
		}
		i++;
	}
	return (max + min) / 2 ;
 8001602:	4c0e      	ldr	r4, [pc, #56]	@ (800163c <get_max_min+0x3c>)
 8001604:	4d0e      	ldr	r5, [pc, #56]	@ (8001640 <get_max_min+0x40>)
 8001606:	8822      	ldrh	r2, [r4, #0]
 8001608:	f8b5 c000 	ldrh.w	ip, [r5]
	while (i < size)
 800160c:	2901      	cmp	r1, #1
 800160e:	d90e      	bls.n	800162e <get_max_min+0x2e>
 8001610:	1e83      	subs	r3, r0, #2
 8001612:	eb03 0141 	add.w	r1, r3, r1, lsl #1
		if (max < buffer[i])
 8001616:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800161a:	4293      	cmp	r3, r2
			max = buffer[i];
 800161c:	bf84      	itt	hi
 800161e:	8023      	strhhi	r3, [r4, #0]
		if (max < buffer[i])
 8001620:	461a      	movhi	r2, r3
		if (min > buffer[i])
 8001622:	4563      	cmp	r3, ip
			min = buffer[i];
 8001624:	bf3c      	itt	cc
 8001626:	802b      	strhcc	r3, [r5, #0]
 8001628:	469c      	movcc	ip, r3
	while (i < size)
 800162a:	4281      	cmp	r1, r0
 800162c:	d1f3      	bne.n	8001616 <get_max_min+0x16>
	return (max + min) / 2 ;
 800162e:	eb02 000c 	add.w	r0, r2, ip
}
 8001632:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8001636:	bc30      	pop	{r4, r5}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000ca8 	.word	0x20000ca8
 8001640:	20000004 	.word	0x20000004

08001644 <samp>:

void samp(uint8_t * buffer,size_t size ,TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc)
{
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	461c      	mov	r4, r3
 8001648:	460e      	mov	r6, r1
 800164a:	4605      	mov	r5, r0
	HAL_TIM_Base_Start(htim);
 800164c:	4610      	mov	r0, r2
 800164e:	f004 f8ff 	bl	8005850 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(hadc, (uint32_t *) buffer, size);
 8001652:	4632      	mov	r2, r6
 8001654:	4629      	mov	r1, r5
 8001656:	4620      	mov	r0, r4
 8001658:	f001 fbc8 	bl	8002dec <HAL_ADC_Start_DMA>

    adc_ongoing = 1;
 800165c:	4a03      	ldr	r2, [pc, #12]	@ (800166c <samp+0x28>)
 800165e:	2301      	movs	r3, #1
 8001660:	6013      	str	r3, [r2, #0]
    while (1)
    {
    	if (adc_ongoing == 0)
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1fc      	bne.n	8001662 <samp+0x1e>
    		break;
    }
    return;
    //uart_transmit(adc_buffer,2050);
}
 8001668:	bd70      	pop	{r4, r5, r6, pc}
 800166a:	bf00      	nop
 800166c:	20000cb0 	.word	0x20000cb0

08001670 <set_sm_freq>:
uint32_t sys_clock = 150e6;
void set_sm_freq(uint32_t freq, TIM_HandleTypeDef *htim)
{
	uint32_t set = sys_clock / freq - 1;
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <set_sm_freq+0x18>)
	if (set <38)
		set = 38;
	htim->Instance->ARR = set;
 8001672:	680a      	ldr	r2, [r1, #0]
	uint32_t set = sys_clock / freq - 1;
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fbb3 f0f0 	udiv	r0, r3, r0
 800167a:	3801      	subs	r0, #1
	if (set <38)
 800167c:	2826      	cmp	r0, #38	@ 0x26
 800167e:	bf38      	it	cc
 8001680:	2026      	movcc	r0, #38	@ 0x26
	htim->Instance->ARR = set;
 8001682:	62d0      	str	r0, [r2, #44]	@ 0x2c
}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000000 	.word	0x20000000
 800168c:	00000000 	.word	0x00000000

08001690 <get_freq>:
float get_freq(COMP_HandleTypeDef * hcomp ,DAC_HandleTypeDef * hdac,
		uint32_t dac_channel, uint32_t Alignment,uint32_t threshold , TIM_HandleTypeDef *htim,
		uint32_t tim_channel, uint32_t *pData, uint16_t length, TIM_HandleTypeDef *htim_sec )
{
 8001690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001694:	ed2d 8b02 	vpush	{d8}
 8001698:	460e      	mov	r6, r1
 800169a:	4617      	mov	r7, r2
 800169c:	4680      	mov	r8, r0
	HAL_DAC_SetValue(hdac, dac_channel, Alignment , threshold);
 800169e:	461a      	mov	r2, r3
 80016a0:	4639      	mov	r1, r7
 80016a2:	9b08      	ldr	r3, [sp, #32]
{
 80016a4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80016a6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
	HAL_DAC_SetValue(hdac, dac_channel, Alignment , threshold);
 80016aa:	4630      	mov	r0, r6
 80016ac:	f002 f90a 	bl	80038c4 <HAL_DAC_SetValue>
	HAL_DAC_Start(hdac, dac_channel);
 80016b0:	4639      	mov	r1, r7
 80016b2:	4630      	mov	r0, r6
 80016b4:	f002 f8bc 	bl	8003830 <HAL_DAC_Start>
	HAL_COMP_Start(hcomp);
 80016b8:	4640      	mov	r0, r8
 80016ba:	f001 ff0d 	bl	80034d8 <HAL_COMP_Start>

	HAL_TIM_IC_Start_DMA(htim, tim_channel, pData, length);
 80016be:	462b      	mov	r3, r5
 80016c0:	4622      	mov	r2, r4
 80016c2:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	@ 0x24
 80016c6:	f004 f913 	bl	80058f0 <HAL_TIM_IC_Start_DMA>
	ic_ongoing = 1;
 80016ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001780 <get_freq+0xf0>)
 80016cc:	2301      	movs	r3, #1
 80016ce:	6013      	str	r3, [r2, #0]
	while (ic_ongoing)
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1fc      	bne.n	80016d0 <get_freq+0x40>
	//uint32_t time = LL_TIM_GetCounter(htim_sec->Instance);
	//HAL_TIM_Base_Stop(htim_sec);
    //const float f_cpu = 150.f;
    //float freq = f_cpu / cyc;
	uint32_t t1 = pData[1];
	uint32_t t2 = pData[length-1];
 80016d6:	f105 4380 	add.w	r3, r5, #1073741824	@ 0x40000000
 80016da:	3b01      	subs	r3, #1
	uint32_t t1 = pData[1];
 80016dc:	6862      	ldr	r2, [r4, #4]
	uint32_t t2 = pData[length-1];
 80016de:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (t2 < t1)
		t2 = (1<<32) - t1 + t2;
	float freq = (float)(150 * 1e6)/ (t2 - t1) * (length-2);
 80016e2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001784 <get_freq+0xf4>
	if (t2 < t1)
 80016e6:	429a      	cmp	r2, r3
		t2 = (1<<32) - t1 + t2;
 80016e8:	bf88      	it	hi
 80016ea:	1a9b      	subhi	r3, r3, r2
	float freq = (float)(150 * 1e6)/ (t2 - t1) * (length-2);
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f6:	1eae      	subs	r6, r5, #2
 80016f8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80016fc:	ee07 6a90 	vmov	s15, r6
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	uint32_t T = 150e6 / freq;
 8001704:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001708:	ee17 0a90 	vmov	r0, s15
 800170c:	f7fe fef0 	bl	80004f0 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	a118      	add	r1, pc, #96	@ (adr r1, 8001778 <get_freq+0xe8>)
 8001716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800171a:	f7ff f86b 	bl	80007f4 <__aeabi_ddiv>
 800171e:	f7ff f979 	bl	8000a14 <__aeabi_d2uiz>
	for (int i = 2 ; i < length ; ++i)
 8001722:	2d02      	cmp	r5, #2
 8001724:	dd24      	ble.n	8001770 <get_freq+0xe0>
 8001726:	4622      	mov	r2, r4
 8001728:	eb04 0485 	add.w	r4, r4, r5, lsl #2
	{
		if( (((pData[i] - pData[i - 1]) * 10 )< (7 * T))
 800172c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001730:	3c08      	subs	r4, #8
	uint32_t counter = 0;
 8001732:	2500      	movs	r5, #0
		if( (((pData[i] - pData[i - 1]) * 10 )< (7 * T))
 8001734:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
 8001738:	1a5b      	subs	r3, r3, r1
 800173a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800173e:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 8001742:	d907      	bls.n	8001754 <get_freq+0xc4>
				&& (((pData[i - 1] - pData[i - 2])* 10) < (7*T)))
 8001744:	6813      	ldr	r3, [r2, #0]
 8001746:	1ac9      	subs	r1, r1, r3
 8001748:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800174c:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
			counter ++;
 8001750:	bf88      	it	hi
 8001752:	3501      	addhi	r5, #1
	for (int i = 2 ; i < length ; ++i)
 8001754:	3204      	adds	r2, #4
 8001756:	4294      	cmp	r4, r2
 8001758:	d1ec      	bne.n	8001734 <get_freq+0xa4>

	}
	freq = (float)(150 * 1e6)/ (t2 - t1) * (length-2 - counter);
 800175a:	1b76      	subs	r6, r6, r5
 800175c:	ee07 6a90 	vmov	s15, r6
 8001760:	eeb8 0a67 	vcvt.f32.u32	s0, s15
	return freq ;

}
 8001764:	ee20 0a08 	vmul.f32	s0, s0, s16
 8001768:	ecbd 8b02 	vpop	{d8}
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t counter = 0;
 8001770:	2500      	movs	r5, #0
 8001772:	e7f2      	b.n	800175a <get_freq+0xca>
 8001774:	f3af 8000 	nop.w
 8001778:	00000000 	.word	0x00000000
 800177c:	41a1e1a3 	.word	0x41a1e1a3
 8001780:	20000cac 	.word	0x20000cac
 8001784:	4d0f0d18 	.word	0x4d0f0d18

08001788 <get_fit_sm_hz>:

}
uint32_t get_fit_sm_hz(float freq)
{
	uint32_t a = freq ;
	return a*1e3/4;
 8001788:	eefc 7ac0 	vcvt.u32.f32	s15, s0
{
 800178c:	b508      	push	{r3, lr}
	return a*1e3/4;
 800178e:	ee17 0a90 	vmov	r0, s15
 8001792:	f7fe fe8b 	bl	80004ac <__aeabi_ui2d>
 8001796:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <get_fit_sm_hz+0x24>)
 8001798:	2200      	movs	r2, #0
 800179a:	f7fe ff01 	bl	80005a0 <__aeabi_dmul>
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <get_fit_sm_hz+0x28>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f7fe fefd 	bl	80005a0 <__aeabi_dmul>
 80017a6:	f7ff f935 	bl	8000a14 <__aeabi_d2uiz>

}
 80017aa:	bd08      	pop	{r3, pc}
 80017ac:	408f4000 	.word	0x408f4000
 80017b0:	3fd00000 	.word	0x3fd00000

080017b4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <HAL_MspInit+0x30>)
 80017b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80017be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 80017c0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	f002 0201 	and.w	r2, r2, #1
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017cc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017dc:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80017de:	f003 b877 	b.w	80048d0 <HAL_PWREx_DisableUCPDDeadBattery>
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	4604      	mov	r4, r0
 80017ec:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f0:	2254      	movs	r2, #84	@ 0x54
 80017f2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80017f8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80017fc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fe:	f005 fee1 	bl	80075c4 <memset>
  if(hadc->Instance==ADC1)
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001808:	d001      	beq.n	800180e <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800180a:	b01c      	add	sp, #112	@ 0x70
 800180c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800180e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001812:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001816:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001818:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800181a:	9318      	str	r3, [sp, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f003 fc36 	bl	800508c <HAL_RCCEx_PeriphCLKConfig>
 8001820:	2800      	cmp	r0, #0
 8001822:	d136      	bne.n	8001892 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001824:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <HAL_ADC_MspInit+0xb8>)
    hdma_adc1.Instance = DMA1_Channel1;
 8001826:	4d1f      	ldr	r5, [pc, #124]	@ (80018a4 <HAL_ADC_MspInit+0xbc>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001828:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800182a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800182e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001830:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001832:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001836:	9200      	str	r2, [sp, #0]
 8001838:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001844:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184c:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001852:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001856:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f002 faf5 	bl	8003e4c <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001862:	4a11      	ldr	r2, [pc, #68]	@ (80018a8 <HAL_ADC_MspInit+0xc0>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001864:	622e      	str	r6, [r5, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001866:	2305      	movs	r3, #5
 8001868:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800186c:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001870:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001872:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001876:	4628      	mov	r0, r5
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800187c:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001880:	e9c5 3606 	strd	r3, r6, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001884:	f002 f934 	bl	8003af0 <HAL_DMA_Init>
 8001888:	b930      	cbnz	r0, 8001898 <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800188a:	6565      	str	r5, [r4, #84]	@ 0x54
 800188c:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 800188e:	b01c      	add	sp, #112	@ 0x70
 8001890:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001892:	f7ff fe99 	bl	80015c8 <Error_Handler>
 8001896:	e7c5      	b.n	8001824 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8001898:	f7ff fe96 	bl	80015c8 <Error_Handler>
 800189c:	e7f5      	b.n	800188a <HAL_ADC_MspInit+0xa2>
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	20000bdc 	.word	0x20000bdc
 80018a8:	40020008 	.word	0x40020008

080018ac <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80018ac:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP3)
 80018ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <HAL_COMP_MspInit+0x74>)
 80018b0:	6802      	ldr	r2, [r0, #0]
{
 80018b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	2400      	movs	r4, #0
  if(hcomp->Instance==COMP3)
 80018b6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80018bc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80018c0:	9406      	str	r4, [sp, #24]
  if(hcomp->Instance==COMP3)
 80018c2:	d001      	beq.n	80018c8 <HAL_COMP_MspInit+0x1c>

  /* USER CODE END COMP3_MspInit 1 */

  }

}
 80018c4:	b008      	add	sp, #32
 80018c6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c8:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80018cc:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80018d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	4814      	ldr	r0, [pc, #80]	@ (8001924 <HAL_COMP_MspInit+0x78>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d4:	f042 0204 	orr.w	r2, r2, #4
 80018d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018dc:	f002 0204 	and.w	r2, r2, #4
 80018e0:	9200      	str	r2, [sp, #0]
 80018e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018f4:	2204      	movs	r2, #4
 80018f6:	2302      	movs	r3, #2
 80018f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 80018fe:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF3_COMP3;
 8001902:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f002 faa2 	bl	8003e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001908:	2201      	movs	r2, #1
 800190a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	a902      	add	r1, sp, #8
 800190e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001912:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f002 fa98 	bl	8003e4c <HAL_GPIO_Init>
}
 800191c:	b008      	add	sp, #32
 800191e:	bd10      	pop	{r4, pc}
 8001920:	40010208 	.word	0x40010208
 8001924:	48000800 	.word	0x48000800

08001928 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_CRC_MspInit+0x28>)
 800192a:	6802      	ldr	r2, [r0, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d000      	beq.n	8001932 <HAL_CRC_MspInit+0xa>
 8001930:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001932:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
{
 8001936:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8001938:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800193a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800193e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800194a:	b002      	add	sp, #8
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023000 	.word	0x40023000

08001954 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC1)
 8001954:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <HAL_DAC_MspInit+0x2c>)
 8001956:	6802      	ldr	r2, [r0, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d000      	beq.n	800195e <HAL_DAC_MspInit+0xa>
 800195c:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800195e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8001962:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
{
 8001966:	b082      	sub	sp, #8
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001968:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800196a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800196e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800197a:	b002      	add	sp, #8
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	50000800 	.word	0x50000800

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	4604      	mov	r4, r0
 8001988:	b09f      	sub	sp, #124	@ 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800198c:	2254      	movs	r2, #84	@ 0x54
 800198e:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001994:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001998:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199a:	f005 fe13 	bl	80075c4 <memset>
  if(hi2c->Instance==I2C1)
 800199e:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <HAL_I2C_MspInit+0xac>)
 80019a0:	6822      	ldr	r2, [r4, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_MspInit+0x26>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019a6:	b01f      	add	sp, #124	@ 0x7c
 80019a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019aa:	2340      	movs	r3, #64	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ac:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019ae:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b0:	f003 fb6c 	bl	800508c <HAL_RCCEx_PeriphCLKConfig>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d138      	bne.n	8001a2a <HAL_I2C_MspInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4c1e      	ldr	r4, [pc, #120]	@ (8001a34 <HAL_I2C_MspInit+0xb0>)
 80019ba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80019c2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80019d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019dc:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019de:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019e2:	2600      	movs	r6, #0
 80019e4:	2700      	movs	r7, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019e8:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80019f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f8:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f002 fa27 	bl	8003e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019fe:	2280      	movs	r2, #128	@ 0x80
 8001a00:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a04:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a0c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f002 fa1c 	bl	8003e4c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a1a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001a1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a22:	9303      	str	r3, [sp, #12]
 8001a24:	9b03      	ldr	r3, [sp, #12]
}
 8001a26:	b01f      	add	sp, #124	@ 0x7c
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001a2a:	f7ff fdcd 	bl	80015c8 <Error_Handler>
 8001a2e:	e7c3      	b.n	80019b8 <HAL_I2C_MspInit+0x34>
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000400 	.word	0x48000400
 8001a3c:	00000000 	.word	0x00000000

08001a40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a40:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 8001a42:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab0 <HAL_SPI_MspInit+0x70>)
 8001a44:	6801      	ldr	r1, [r0, #0]
{
 8001a46:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 8001a4a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001a50:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001a54:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI3)
 8001a56:	d002      	beq.n	8001a5e <HAL_SPI_MspInit+0x1e>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001a58:	b009      	add	sp, #36	@ 0x24
 8001a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a62:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001a66:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8001aa8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6c:	4811      	ldr	r0, [pc, #68]	@ (8001ab4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a72:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a76:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a80:	f042 0204 	orr.w	r2, r2, #4
 8001a84:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a90:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001a92:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a98:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9a:	f002 f9d7 	bl	8003e4c <HAL_GPIO_Init>
}
 8001a9e:	b009      	add	sp, #36	@ 0x24
 8001aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	00001400 	.word	0x00001400
 8001aac:	00000002 	.word	0x00000002
 8001ab0:	40003c00 	.word	0x40003c00
 8001ab4:	48000800 	.word	0x48000800

08001ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab8:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM2)
 8001aba:	6803      	ldr	r3, [r0, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 8001ac0:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 8001ac2:	d01f      	beq.n	8001b04 <HAL_TIM_Base_MspInit+0x4c>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001ac4:	4a24      	ldr	r2, [pc, #144]	@ (8001b58 <HAL_TIM_Base_MspInit+0xa0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d004      	beq.n	8001ad4 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001aca:	4a24      	ldr	r2, [pc, #144]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00d      	beq.n	8001aec <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001ad0:	b005      	add	sp, #20
 8001ad2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ad4:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <HAL_TIM_Base_MspInit+0xa8>)
 8001ad6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ad8:	f042 0202 	orr.w	r2, r2, #2
 8001adc:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	9b02      	ldr	r3, [sp, #8]
}
 8001ae8:	b005      	add	sp, #20
 8001aea:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001aec:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <HAL_TIM_Base_MspInit+0xa8>)
 8001aee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001af0:	f042 0210 	orr.w	r2, r2, #16
 8001af4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	9303      	str	r3, [sp, #12]
 8001afe:	9b03      	ldr	r3, [sp, #12]
}
 8001b00:	b005      	add	sp, #20
 8001b02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b04:	4a16      	ldr	r2, [pc, #88]	@ (8001b60 <HAL_TIM_Base_MspInit+0xa8>)
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 8001b06:	4d17      	ldr	r5, [pc, #92]	@ (8001b64 <HAL_TIM_Base_MspInit+0xac>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b08:	6d91      	ldr	r1, [r2, #88]	@ 0x58
 8001b0a:	f041 0101 	orr.w	r1, r1, #1
 8001b0e:	6591      	str	r1, [r2, #88]	@ 0x58
 8001b10:	6d92      	ldr	r2, [r2, #88]	@ 0x58
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 8001b12:	4915      	ldr	r1, [pc, #84]	@ (8001b68 <HAL_TIM_Base_MspInit+0xb0>)
 8001b14:	6029      	str	r1, [r5, #0]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b16:	f002 0201 	and.w	r2, r2, #1
 8001b1a:	9201      	str	r2, [sp, #4]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2138      	movs	r1, #56	@ 0x38
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b20:	9a01      	ldr	r2, [sp, #4]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001b22:	2280      	movs	r2, #128	@ 0x80
 8001b24:	e9c5 1301 	strd	r1, r3, [r5, #4]
 8001b28:	e9c5 3203 	strd	r3, r2, [r5, #12]
 8001b2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b34:	e9c5 1205 	strd	r1, r2, [r5, #20]
 8001b38:	4604      	mov	r4, r0
 8001b3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001b3e:	4628      	mov	r0, r5
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001b40:	e9c5 3207 	strd	r3, r2, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001b44:	f001 ffd4 	bl	8003af0 <HAL_DMA_Init>
 8001b48:	b918      	cbnz	r0, 8001b52 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001b4a:	6265      	str	r5, [r4, #36]	@ 0x24
 8001b4c:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8001b4e:	b005      	add	sp, #20
 8001b50:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001b52:	f7ff fd39 	bl	80015c8 <Error_Handler>
 8001b56:	e7f8      	b.n	8001b4a <HAL_TIM_Base_MspInit+0x92>
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40001000 	.word	0x40001000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	20000984 	.word	0x20000984
 8001b68:	4002001c 	.word	0x4002001c

08001b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b6c:	b530      	push	{r4, r5, lr}
 8001b6e:	4604      	mov	r4, r0
 8001b70:	b09d      	sub	sp, #116	@ 0x74
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	2254      	movs	r2, #84	@ 0x54
 8001b76:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001b7c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001b80:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b82:	f005 fd1f 	bl	80075c4 <memset>
  if(huart->Instance==USART2)
 8001b86:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <HAL_UART_MspInit+0xc4>)
 8001b88:	6822      	ldr	r2, [r4, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d001      	beq.n	8001b92 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b8e:	b01d      	add	sp, #116	@ 0x74
 8001b90:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b92:	2202      	movs	r2, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001b94:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b96:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b98:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001b9a:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9c:	f003 fa76 	bl	800508c <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d13f      	bne.n	8001c24 <HAL_UART_MspInit+0xb8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba4:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	4824      	ldr	r0, [pc, #144]	@ (8001c38 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA2_Channel8;
 8001baa:	4d24      	ldr	r5, [pc, #144]	@ (8001c3c <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001bb0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bb2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bb4:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001bb8:	9200      	str	r2, [sp, #0]
 8001bba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bbe:	f042 0202 	orr.w	r2, r2, #2
 8001bc2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001bcc:	2218      	movs	r2, #24
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bd4:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be0:	2307      	movs	r3, #7
 8001be2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f002 f932 	bl	8003e4c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001be8:	4915      	ldr	r1, [pc, #84]	@ (8001c40 <HAL_UART_MspInit+0xd4>)
 8001bea:	221a      	movs	r2, #26
 8001bec:	2300      	movs	r3, #0
 8001bee:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bf2:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001bf4:	2280      	movs	r2, #128	@ 0x80
 8001bf6:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8001bfa:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8001bfe:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8001c02:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c04:	f001 ff74 	bl	8003af0 <HAL_DMA_Init>
 8001c08:	b978      	cbnz	r0, 8001c2a <HAL_UART_MspInit+0xbe>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c10:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8001c14:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c16:	f001 fc9d 	bl	8003554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c1a:	2026      	movs	r0, #38	@ 0x26
 8001c1c:	f001 fcd6 	bl	80035cc <HAL_NVIC_EnableIRQ>
}
 8001c20:	b01d      	add	sp, #116	@ 0x74
 8001c22:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001c24:	f7ff fcd0 	bl	80015c8 <Error_Handler>
 8001c28:	e7bc      	b.n	8001ba4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001c2a:	f7ff fccd 	bl	80015c8 <Error_Handler>
 8001c2e:	e7ec      	b.n	8001c0a <HAL_UART_MspInit+0x9e>
 8001c30:	40004400 	.word	0x40004400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	20000890 	.word	0x20000890
 8001c40:	40020494 	.word	0x40020494

08001c44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c44:	e7fe      	b.n	8001c44 <NMI_Handler>
 8001c46:	bf00      	nop

08001c48 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <HardFault_Handler>
 8001c4a:	bf00      	nop

08001c4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler>
 8001c4e:	bf00      	nop

08001c50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <BusFault_Handler>
 8001c52:	bf00      	nop

08001c54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler>
 8001c56:	bf00      	nop

08001c58 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop

08001c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop

08001c64 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c64:	f000 bbde 	b.w	8002424 <HAL_IncTick>

08001c68 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c68:	4801      	ldr	r0, [pc, #4]	@ (8001c70 <DMA1_Channel1_IRQHandler+0x8>)
 8001c6a:	f002 b8a1 	b.w	8003db0 <HAL_DMA_IRQHandler>
 8001c6e:	bf00      	nop
 8001c70:	20000bdc 	.word	0x20000bdc

08001c74 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001c74:	4801      	ldr	r0, [pc, #4]	@ (8001c7c <DMA1_Channel2_IRQHandler+0x8>)
 8001c76:	f002 b89b 	b.w	8003db0 <HAL_DMA_IRQHandler>
 8001c7a:	bf00      	nop
 8001c7c:	20000984 	.word	0x20000984

08001c80 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c80:	4801      	ldr	r0, [pc, #4]	@ (8001c88 <USART2_IRQHandler+0x8>)
 8001c82:	f004 bd21 	b.w	80066c8 <HAL_UART_IRQHandler>
 8001c86:	bf00      	nop
 8001c88:	200008f0 	.word	0x200008f0

08001c8c <DMA2_Channel8_IRQHandler>:
void DMA2_Channel8_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel8_IRQn 0 */

  /* USER CODE END DMA2_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c8c:	4801      	ldr	r0, [pc, #4]	@ (8001c94 <DMA2_Channel8_IRQHandler+0x8>)
 8001c8e:	f002 b88f 	b.w	8003db0 <HAL_DMA_IRQHandler>
 8001c92:	bf00      	nop
 8001c94:	20000890 	.word	0x20000890

08001c98 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001c98:	2001      	movs	r0, #1
 8001c9a:	4770      	bx	lr

08001c9c <_kill>:

int _kill(int pid, int sig)
{
 8001c9c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c9e:	f005 fced 	bl	800767c <__errno>
 8001ca2:	2316      	movs	r3, #22
 8001ca4:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8001caa:	bd08      	pop	{r3, pc}

08001cac <_exit>:

void _exit (int status)
{
 8001cac:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001cae:	f005 fce5 	bl	800767c <__errno>
 8001cb2:	2316      	movs	r3, #22
 8001cb4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001cb6:	e7fe      	b.n	8001cb6 <_exit+0xa>

08001cb8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	490c      	ldr	r1, [pc, #48]	@ (8001cec <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cba:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001cbc:	680b      	ldr	r3, [r1, #0]
{
 8001cbe:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4c0c      	ldr	r4, [pc, #48]	@ (8001cf4 <_sbrk+0x3c>)
 8001cc2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001cc4:	b12b      	cbz	r3, 8001cd2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4418      	add	r0, r3
 8001cc8:	4290      	cmp	r0, r2
 8001cca:	d807      	bhi.n	8001cdc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ccc:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <_sbrk+0x40>)
 8001cd4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001cd6:	4418      	add	r0, r3
 8001cd8:	4290      	cmp	r0, r2
 8001cda:	d9f7      	bls.n	8001ccc <_sbrk+0x14>
    errno = ENOMEM;
 8001cdc:	f005 fcce 	bl	800767c <__errno>
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	20000cb4 	.word	0x20000cb4
 8001cf0:	20020000 	.word	0x20020000
 8001cf4:	00000400 	.word	0x00000400
 8001cf8:	20001028 	.word	0x20001028

08001cfc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cfc:	4a03      	ldr	r2, [pc, #12]	@ (8001d0c <SystemInit+0x10>)
 8001cfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <_ZL17reg_write_handlerPhj>:
  uart_transmit((uint8_t*)&value, 4);
}

static void reg_write_handler(uint8_t* data, size_t size)
{
  if (size != 12)
 8001d10:	290c      	cmp	r1, #12
 8001d12:	d10b      	bne.n	8001d2c <_ZL17reg_write_handlerPhj+0x1c>
    return;

  uint32_t addr = *(uint32_t*)data;
  volatile uint32_t* reg = (volatile uint32_t*)addr;
 8001d14:	6802      	ldr	r2, [r0, #0]
  uint32_t value = *(uint32_t*)(data+4);
  uint32_t mask = *(uint32_t*)(data+8);

  *reg = (*reg & ~mask) | value;
 8001d16:	6841      	ldr	r1, [r0, #4]
 8001d18:	6813      	ldr	r3, [r2, #0]
{
 8001d1a:	b410      	push	{r4}
  *reg = (*reg & ~mask) | value;
 8001d1c:	6884      	ldr	r4, [r0, #8]
 8001d1e:	ea23 0304 	bic.w	r3, r3, r4
 8001d22:	430b      	orrs	r3, r1
}
 8001d24:	f85d 4b04 	ldr.w	r4, [sp], #4
  *reg = (*reg & ~mask) | value;
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	4770      	bx	lr
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop

08001d30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0>:
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8001d30:	b1b0      	cbz	r0, 8001d60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x30>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d32:	b538      	push	{r3, r4, r5, lr}
 8001d34:	4604      	mov	r4, r0
	{
	  _M_erase(_S_right(__x));
 8001d36:	68e0      	ldr	r0, [r4, #12]
 8001d38:	f7ff fffa 	bl	8001d30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0>
      { _M_string_length = __length; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
 8001d3c:	6920      	ldr	r0, [r4, #16]
      _GLIBCXX20_CONSTEXPR
      const_pointer
      _M_local_data() const
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001d3e:	f104 0318 	add.w	r3, r4, #24

      _GLIBCXX20_CONSTEXPR
      bool
      _M_is_local() const
      {
	if (_M_data() == _M_local_data())
 8001d42:	4298      	cmp	r0, r3
 8001d44:	4625      	mov	r5, r4
      { return static_cast<_Link_type>(__x->_M_left); }
 8001d46:	68a4      	ldr	r4, [r4, #8]
 8001d48:	d003      	beq.n	8001d52 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x22>
      }

      _GLIBCXX20_CONSTEXPR
      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001d4a:	69a9      	ldr	r1, [r5, #24]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001d4c:	3101      	adds	r1, #1
 8001d4e:	f005 fa5d 	bl	800720c <_ZdlPvj>
 8001d52:	212c      	movs	r1, #44	@ 0x2c
 8001d54:	4628      	mov	r0, r5
 8001d56:	f005 fa59 	bl	800720c <_ZdlPvj>
      while (__x != 0)
 8001d5a:	2c00      	cmp	r4, #0
 8001d5c:	d1eb      	bne.n	8001d36 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0+0x6>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
	}
    }
 8001d5e:	bd38      	pop	{r3, r4, r5, pc}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <uart_transmit>:
{
 8001d64:	b570      	push	{r4, r5, r6, lr}
 8001d66:	b082      	sub	sp, #8
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001d68:	4e12      	ldr	r6, [pc, #72]	@ (8001db4 <uart_transmit+0x50>)
      (uint8_t)(size & 0xFF), (uint8_t)(size >> 8)};
 8001d6a:	f8ad 1006 	strh.w	r1, [sp, #6]
  uint8_t tx_buf[4] = {0x55, 0xA5,
 8001d6e:	f24a 5255 	movw	r2, #42325	@ 0xa555
 8001d72:	f8ad 2004 	strh.w	r2, [sp, #4]
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001d76:	2204      	movs	r2, #4
{
 8001d78:	460c      	mov	r4, r1
 8001d7a:	4605      	mov	r5, r0
  HAL_UART_Transmit(huart_reg, tx_buf, 4, 10);
 8001d7c:	eb0d 0102 	add.w	r1, sp, r2
 8001d80:	230a      	movs	r3, #10
 8001d82:	6830      	ldr	r0, [r6, #0]
 8001d84:	f004 fbe0 	bl	8006548 <HAL_UART_Transmit>
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8001d88:	4622      	mov	r2, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	480a      	ldr	r0, [pc, #40]	@ (8001db8 <uart_transmit+0x54>)
 8001d8e:	f001 fcd5 	bl	800373c <HAL_CRC_Calculate>
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8001d92:	4629      	mov	r1, r5
 8001d94:	1c63      	adds	r3, r4, #1
  uint16_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, size);
 8001d96:	4605      	mov	r5, r0
  HAL_UART_Transmit(huart_reg, data, size, size+1);
 8001d98:	b2a2      	uxth	r2, r4
 8001d9a:	6830      	ldr	r0, [r6, #0]
 8001d9c:	f004 fbd4 	bl	8006548 <HAL_UART_Transmit>
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8001da0:	6830      	ldr	r0, [r6, #0]
  tx_buf[0] = crc & 0xFF;
 8001da2:	f8ad 5004 	strh.w	r5, [sp, #4]
  HAL_UART_Transmit(huart_reg, tx_buf, 2, 10);
 8001da6:	230a      	movs	r3, #10
 8001da8:	2202      	movs	r2, #2
 8001daa:	a901      	add	r1, sp, #4
 8001dac:	f004 fbcc 	bl	8006548 <HAL_UART_Transmit>
}
 8001db0:	b002      	add	sp, #8
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	20000010 	.word	0x20000010
 8001db8:	20000b94 	.word	0x20000b94

08001dbc <_ZL16reg_read_handlerPhj>:
  if (size != 4)
 8001dbc:	2904      	cmp	r1, #4
 8001dbe:	d000      	beq.n	8001dc2 <_ZL16reg_read_handlerPhj+0x6>
 8001dc0:	4770      	bx	lr
{
 8001dc2:	b500      	push	{lr}
  volatile uint32_t* reg = (volatile uint32_t*)addr;
 8001dc4:	6803      	ldr	r3, [r0, #0]
{
 8001dc6:	b083      	sub	sp, #12
  uint32_t value = *reg;
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	9301      	str	r3, [sp, #4]
  uart_transmit((uint8_t*)&value, 4);
 8001dcc:	a801      	add	r0, sp, #4
 8001dce:	f7ff ffc9 	bl	8001d64 <uart_transmit>
}
 8001dd2:	b003      	add	sp, #12
 8001dd4:	f85d fb04 	ldr.w	pc, [sp], #4

08001dd8 <HAL_UARTEx_RxEventCallback>:
  if (huart != huart_reg)
 8001dd8:	4b65      	ldr	r3, [pc, #404]	@ (8001f70 <HAL_UARTEx_RxEventCallback+0x198>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4283      	cmp	r3, r0
 8001dde:	d000      	beq.n	8001de2 <HAL_UARTEx_RxEventCallback+0xa>
 8001de0:	4770      	bx	lr
{
 8001de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  auto end = rx_buf + Size;
 8001de6:	4e63      	ldr	r6, [pc, #396]	@ (8001f74 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001de8:	eb06 0c01 	add.w	ip, r6, r1
  for (auto* p = rx_buf; p < end; )
 8001dec:	45b4      	cmp	ip, r6
{
 8001dee:	b08b      	sub	sp, #44	@ 0x2c
  for (auto* p = rx_buf; p < end; )
 8001df0:	f240 80a5 	bls.w	8001f3e <HAL_UARTEx_RxEventCallback+0x166>
  if (end - begin < 8)
 8001df4:	2907      	cmp	r1, #7
 8001df6:	f240 80a2 	bls.w	8001f3e <HAL_UARTEx_RxEventCallback+0x166>
 8001dfa:	4667      	mov	r7, ip
  if (*begin++ != 0x55)
 8001dfc:	7833      	ldrb	r3, [r6, #0]
 8001dfe:	2b55      	cmp	r3, #85	@ 0x55
 8001e00:	f040 809b 	bne.w	8001f3a <HAL_UARTEx_RxEventCallback+0x162>
  if (*begin++ != 0xA5)
 8001e04:	7873      	ldrb	r3, [r6, #1]
 8001e06:	2ba5      	cmp	r3, #165	@ 0xa5
 8001e08:	f040 8097 	bne.w	8001f3a <HAL_UARTEx_RxEventCallback+0x162>
  size += *begin++ << 8;
 8001e0c:	f106 0a04 	add.w	sl, r6, #4
 8001e10:	f8b6 9002 	ldrh.w	r9, [r6, #2]
  if (size > end - begin + 2 || size < 2)
 8001e14:	eba7 030a 	sub.w	r3, r7, sl
 8001e18:	3302      	adds	r3, #2
 8001e1a:	4599      	cmp	r9, r3
 8001e1c:	f300 808d 	bgt.w	8001f3a <HAL_UARTEx_RxEventCallback+0x162>
 8001e20:	f1b9 0f01 	cmp.w	r9, #1
 8001e24:	f340 8089 	ble.w	8001f3a <HAL_UARTEx_RxEventCallback+0x162>
  int crc = begin[size] + (begin[size+1] << 8);
 8001e28:	eb0a 0809 	add.w	r8, sl, r9
 8001e2c:	f81a 4009 	ldrb.w	r4, [sl, r9]
 8001e30:	f898 3001 	ldrb.w	r3, [r8, #1]
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 8001e34:	4850      	ldr	r0, [pc, #320]	@ (8001f78 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001e36:	464a      	mov	r2, r9
 8001e38:	4651      	mov	r1, sl
  int crc = begin[size] + (begin[size+1] << 8);
 8001e3a:	eb04 2403 	add.w	r4, r4, r3, lsl #8
  int calc = HAL_CRC_Calculate(&hcrc, (uint32_t*)begin, size);
 8001e3e:	f001 fc7d 	bl	800373c <HAL_CRC_Calculate>
  if (calc != crc)
 8001e42:	4284      	cmp	r4, r0
 8001e44:	d179      	bne.n	8001f3a <HAL_UARTEx_RxEventCallback+0x162>
 8001e46:	4653      	mov	r3, sl
 8001e48:	e001      	b.n	8001e4e <HAL_UARTEx_RxEventCallback+0x76>
  for (; p != end; ++p)
 8001e4a:	4598      	cmp	r8, r3
 8001e4c:	d06c      	beq.n	8001f28 <HAL_UARTEx_RxEventCallback+0x150>
    if (*p == ':')
 8001e4e:	781a      	ldrb	r2, [r3, #0]
 8001e50:	2a3a      	cmp	r2, #58	@ 0x3a
 8001e52:	461d      	mov	r5, r3
 8001e54:	461c      	mov	r4, r3
 8001e56:	f103 0301 	add.w	r3, r3, #1
 8001e5a:	d1f6      	bne.n	8001e4a <HAL_UARTEx_RxEventCallback+0x72>
  if (p != end)
 8001e5c:	45a8      	cmp	r8, r5
 8001e5e:	d063      	beq.n	8001f28 <HAL_UARTEx_RxEventCallback+0x150>
	: allocator_type(__a), _M_p(__dat) { }
 8001e60:	ab06      	add	r3, sp, #24
 8001e62:	9304      	str	r3, [sp, #16]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8001e64:	eba5 030a 	sub.w	r3, r5, sl
      template<typename _InputIterator>
#endif
	_GLIBCXX20_CONSTEXPR
        basic_string(_InputIterator __beg, _InputIterator __end,
		     const _Alloc& __a = _Alloc())
	: _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 8001e68:	2200      	movs	r2, #0
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	9205      	str	r2, [sp, #20]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001e6e:	9303      	str	r3, [sp, #12]
	if (__dnew > size_type(_S_local_capacity))
 8001e70:	d875      	bhi.n	8001f5e <HAL_UARTEx_RxEventCallback+0x186>
 8001e72:	a806      	add	r0, sp, #24
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001e74:	45aa      	cmp	sl, r5
 8001e76:	d008      	beq.n	8001e8a <HAL_UARTEx_RxEventCallback+0xb2>
 8001e78:	3c01      	subs	r4, #1
 8001e7a:	1cf3      	adds	r3, r6, #3
	    traits_type::assign(*__p, *__k1); // These types are off.
 8001e7c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8001e80:	f800 2b01 	strb.w	r2, [r0], #1
	  for (; __k1 != __k2; ++__k1, (void)++__p)
 8001e84:	42a3      	cmp	r3, r4
 8001e86:	d1f9      	bne.n	8001e7c <HAL_UARTEx_RxEventCallback+0xa4>
      { return _M_dataplus._M_p; }
 8001e88:	9804      	ldr	r0, [sp, #16]

	this->_S_copy_chars(_M_data(), __beg, __end);

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
 8001e8a:	9b03      	ldr	r3, [sp, #12]
      { _M_string_length = __length; }
 8001e8c:	9305      	str	r3, [sp, #20]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	54c2      	strb	r2, [r0, r3]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001e92:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001e94:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001e98:	689c      	ldr	r4, [r3, #8]
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
 8001e9a:	2c00      	cmp	r4, #0
 8001e9c:	d03c      	beq.n	8001f18 <HAL_UARTEx_RxEventCallback+0x140>
 8001e9e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	e9cd 7600 	strd	r7, r6, [sp]
 8001ea8:	4656      	mov	r6, sl
 8001eaa:	46aa      	mov	sl, r5
 8001eac:	461d      	mov	r5, r3
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 8001eae:	6967      	ldr	r7, [r4, #20]
       *  If the result of the comparison is nonzero returns it,
       *  otherwise the shorter one is ordered first.
      */
      _GLIBCXX20_CONSTEXPR
      int
      compare(const basic_string& __str) const
 8001eb0:	6920      	ldr	r0, [r4, #16]
 8001eb2:	42b7      	cmp	r7, r6
 8001eb4:	463a      	mov	r2, r7
 8001eb6:	bf28      	it	cs
 8001eb8:	4632      	movcs	r2, r6
 8001eba:	4659      	mov	r1, fp
	if (__n == 0)
 8001ebc:	b112      	cbz	r2, 8001ec4 <HAL_UARTEx_RxEventCallback+0xec>
	return __builtin_memcmp(__s1, __s2, __n);
 8001ebe:	f005 fb71 	bl	80075a4 <memcmp>
	const size_type __size = this->size();
	const size_type __osize = __str.size();
	const size_type __len = std::min(__size, __osize);

	int __r = traits_type::compare(_M_data(), __str.data(), __len);
	if (!__r)
 8001ec2:	b900      	cbnz	r0, 8001ec6 <HAL_UARTEx_RxEventCallback+0xee>
	const difference_type __d = difference_type(__n1 - __n2);
 8001ec4:	1bb8      	subs	r0, r7, r6
      { return static_cast<_Link_type>(__x->_M_right); }
 8001ec6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	bfaa      	itet	ge
 8001ece:	4625      	movge	r5, r4
	  __y = __x, __x = _S_left(__x);
	else
	  __x = _S_right(__x);
 8001ed0:	460c      	movlt	r4, r1
	  __y = __x, __x = _S_left(__x);
 8001ed2:	4614      	movge	r4, r2
      while (__x != 0)
 8001ed4:	2c00      	cmp	r4, #0
 8001ed6:	d1ea      	bne.n	8001eae <HAL_UARTEx_RxEventCallback+0xd6>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8001ed8:	4a29      	ldr	r2, [pc, #164]	@ (8001f80 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001eda:	9f00      	ldr	r7, [sp, #0]
 8001edc:	462b      	mov	r3, r5
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	4655      	mov	r5, sl
 8001ee2:	46b2      	mov	sl, r6
 8001ee4:	9e01      	ldr	r6, [sp, #4]
 8001ee6:	d017      	beq.n	8001f18 <HAL_UARTEx_RxEventCallback+0x140>
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001ee8:	e9d3 1404 	ldrd	r1, r4, [r3, #16]
 8001eec:	4554      	cmp	r4, sl
 8001eee:	4622      	mov	r2, r4
 8001ef0:	bf28      	it	cs
 8001ef2:	4652      	movcs	r2, sl
	if (__n == 0)
 8001ef4:	b12a      	cbz	r2, 8001f02 <HAL_UARTEx_RxEventCallback+0x12a>
	return __builtin_memcmp(__s1, __s2, __n);
 8001ef6:	4658      	mov	r0, fp
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	f005 fb53 	bl	80075a4 <memcmp>
	if (!__r)
 8001efe:	9b00      	ldr	r3, [sp, #0]
 8001f00:	b908      	cbnz	r0, 8001f06 <HAL_UARTEx_RxEventCallback+0x12e>
	const difference_type __d = difference_type(__n1 - __n2);
 8001f02:	ebaa 0004 	sub.w	r0, sl, r4
	      || _M_impl._M_key_compare(__k,
 8001f06:	2800      	cmp	r0, #0
 8001f08:	db06      	blt.n	8001f18 <HAL_UARTEx_RxEventCallback+0x140>
      ++p;
 8001f0a:	1c68      	adds	r0, r5, #1
      it->second(p, end-p);
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	eba8 0100 	sub.w	r1, r8, r0
 8001f12:	4798      	blx	r3
      { return _M_dataplus._M_p; }
 8001f14:	f8dd b010 	ldr.w	fp, [sp, #16]
	if (_M_data() == _M_local_data())
 8001f18:	ab06      	add	r3, sp, #24
 8001f1a:	459b      	cmp	fp, r3
 8001f1c:	d004      	beq.n	8001f28 <HAL_UARTEx_RxEventCallback+0x150>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001f1e:	9906      	ldr	r1, [sp, #24]
 8001f20:	4658      	mov	r0, fp
 8001f22:	3101      	adds	r1, #1
 8001f24:	f005 f972 	bl	800720c <_ZdlPvj>
  return size + 6;
 8001f28:	f109 0906 	add.w	r9, r9, #6
    p += res;
 8001f2c:	444e      	add	r6, r9
  for (auto* p = rx_buf; p < end; )
 8001f2e:	42b7      	cmp	r7, r6
 8001f30:	d903      	bls.n	8001f3a <HAL_UARTEx_RxEventCallback+0x162>
  if (end - begin < 8)
 8001f32:	1bbb      	subs	r3, r7, r6
 8001f34:	2b07      	cmp	r3, #7
 8001f36:	f73f af61 	bgt.w	8001dfc <HAL_UARTEx_RxEventCallback+0x24>
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <HAL_UARTEx_RxEventCallback+0x198>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	490d      	ldr	r1, [pc, #52]	@ (8001f74 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001f40:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001f44:	4618      	mov	r0, r3
 8001f46:	f005 f93d 	bl	80071c4 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	b00b      	add	sp, #44	@ 0x2c
 8001f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    _M_data(_M_create(__dnew, size_type(0)));
 8001f5e:	a804      	add	r0, sp, #16
 8001f60:	a903      	add	r1, sp, #12
 8001f62:	f005 fa2d 	bl	80073c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 8001f66:	9b03      	ldr	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 8001f68:	9004      	str	r0, [sp, #16]
      { _M_allocated_capacity = __capacity; }
 8001f6a:	9306      	str	r3, [sp, #24]
 8001f6c:	e782      	b.n	8001e74 <HAL_UARTEx_RxEventCallback+0x9c>
 8001f6e:	bf00      	nop
 8001f70:	20000010 	.word	0x20000010
 8001f74:	20000cd0 	.word	0x20000cd0
 8001f78:	20000b94 	.word	0x20000b94
 8001f7c:	20000cb8 	.word	0x20000cb8
 8001f80:	20000cbc 	.word	0x20000cbc
 8001f84:	2000000c 	.word	0x2000000c

08001f88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001f8c:	688c      	ldr	r4, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001f8e:	b083      	sub	sp, #12
 8001f90:	468b      	mov	fp, r1
 8001f92:	4681      	mov	r9, r0
 8001f94:	9201      	str	r2, [sp, #4]
      while (__x != 0)
 8001f96:	b39c      	cbz	r4, 8002000 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x78>
 8001f98:	9b01      	ldr	r3, [sp, #4]
 8001f9a:	e9d3 8700 	ldrd	r8, r7, [r3]
 8001f9e:	e000      	b.n	8001fa2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x1a>
 8001fa0:	4614      	mov	r4, r2
 8001fa2:	6966      	ldr	r6, [r4, #20]
      compare(const basic_string& __str) const
 8001fa4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8001fa8:	42b7      	cmp	r7, r6
 8001faa:	463d      	mov	r5, r7
 8001fac:	bf28      	it	cs
 8001fae:	4635      	movcs	r5, r6
 8001fb0:	4640      	mov	r0, r8
 8001fb2:	462a      	mov	r2, r5
	if (__n == 0)
 8001fb4:	b11d      	cbz	r5, 8001fbe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x36>
	return __builtin_memcmp(__s1, __s2, __n);
 8001fb6:	4651      	mov	r1, sl
 8001fb8:	f005 faf4 	bl	80075a4 <memcmp>
	if (!__r)
 8001fbc:	b900      	cbnz	r0, 8001fc0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x38>
	const difference_type __d = difference_type(__n1 - __n2);
 8001fbe:	1bb8      	subs	r0, r7, r6
      { return static_cast<_Link_type>(__x->_M_right); }
 8001fc0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	bfaa      	itet	ge
 8001fc8:	460a      	movge	r2, r1
 8001fca:	2101      	movlt	r1, #1
 8001fcc:	2100      	movge	r1, #0
      while (__x != 0)
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d1e6      	bne.n	8001fa0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x18>
      if (__comp)
 8001fd2:	b9b1      	cbnz	r1, 8002002 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x7a>
 8001fd4:	46a3      	mov	fp, r4
	if (__n == 0)
 8001fd6:	b18d      	cbz	r5, 8001ffc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x74>
	return __builtin_memcmp(__s1, __s2, __n);
 8001fd8:	462a      	mov	r2, r5
 8001fda:	4641      	mov	r1, r8
 8001fdc:	4650      	mov	r0, sl
 8001fde:	f005 fae1 	bl	80075a4 <memcmp>
	if (!__r)
 8001fe2:	b158      	cbz	r0, 8001ffc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x74>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001fe4:	2800      	cmp	r0, #0
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001fe6:	f04f 0300 	mov.w	r3, #0
    }
 8001fea:	4648      	mov	r0, r9
 8001fec:	bfb4      	ite	lt
 8001fee:	e9c9 3b00 	strdlt	r3, fp, [r9]
      : first(__a), second(__b) { }
 8001ff2:	e9c9 4300 	strdge	r4, r3, [r9]
 8001ff6:	b003      	add	sp, #12
 8001ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const difference_type __d = difference_type(__n1 - __n2);
 8001ffc:	1bf0      	subs	r0, r6, r7
 8001ffe:	e7f1      	b.n	8001fe4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x5c>
      { return &this->_M_impl._M_header; }
 8002000:	1d0c      	adds	r4, r1, #4
	  if (__j == begin())
 8002002:	f8db 300c 	ldr.w	r3, [fp, #12]
 8002006:	429c      	cmp	r4, r3
 8002008:	d00e      	beq.n	8002028 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0xa0>
	_M_node = _Rb_tree_decrement(_M_node);
 800200a:	4620      	mov	r0, r4
 800200c:	f005 f968 	bl	80072e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002010:	9b01      	ldr	r3, [sp, #4]
 8002012:	e9d0 a604 	ldrd	sl, r6, [r0, #16]
 8002016:	e9d3 8700 	ldrd	r8, r7, [r3]
 800201a:	42b7      	cmp	r7, r6
	return *this;
 800201c:	46a3      	mov	fp, r4
 800201e:	463d      	mov	r5, r7
	_M_node = _Rb_tree_decrement(_M_node);
 8002020:	4604      	mov	r4, r0
 8002022:	bf28      	it	cs
 8002024:	4635      	movcs	r5, r6
	return *this;
 8002026:	e7d6      	b.n	8001fd6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_+0x4e>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002028:	2300      	movs	r3, #0
    }
 800202a:	4648      	mov	r0, r9
 800202c:	e9c9 3400 	strd	r3, r4, [r9]
 8002030:	b003      	add	sp, #12
 8002032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002036:	bf00      	nop

08002038 <uart_register_handler>:
{
 8002038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800203c:	b091      	sub	sp, #68	@ 0x44
	: allocator_type(__a), _M_p(__dat) { }
 800203e:	ae0c      	add	r6, sp, #48	@ 0x30
 8002040:	9101      	str	r1, [sp, #4]
 8002042:	960a      	str	r6, [sp, #40]	@ 0x28
	if (__s == 0)
 8002044:	2800      	cmp	r0, #0
 8002046:	f000 814b 	beq.w	80022e0 <uart_register_handler+0x2a8>
 800204a:	4605      	mov	r5, r0
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 800204c:	f7fe f8e4 	bl	8000218 <strlen>
	if (__dnew > size_type(_S_local_capacity))
 8002050:	280f      	cmp	r0, #15
 8002052:	4604      	mov	r4, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002054:	9008      	str	r0, [sp, #32]
	if (__dnew > size_type(_S_local_capacity))
 8002056:	f200 80a2 	bhi.w	800219e <uart_register_handler+0x166>
	if (__n == 1)
 800205a:	2801      	cmp	r0, #1
 800205c:	d146      	bne.n	80020ec <uart_register_handler+0xb4>
	__c1 = __c2;
 800205e:	782b      	ldrb	r3, [r5, #0]
 8002060:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
      { return _M_dataplus._M_p; }
 8002064:	4632      	mov	r2, r6
 8002066:	2300      	movs	r3, #0
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002068:	f8df 827c 	ldr.w	r8, [pc, #636]	@ 80022e8 <uart_register_handler+0x2b0>
      { _M_string_length = __length; }
 800206c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800206e:	5513      	strb	r3, [r2, r4]
 8002070:	f8d8 5008 	ldr.w	r5, [r8, #8]
      while (__x != 0)
 8002074:	2d00      	cmp	r5, #0
 8002076:	d03d      	beq.n	80020f4 <uart_register_handler+0xbc>
 8002078:	f108 0904 	add.w	r9, r8, #4
 800207c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800207e:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8002082:	46ca      	mov	sl, r9
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002084:	e9d5 0404 	ldrd	r0, r4, [r5, #16]
 8002088:	455c      	cmp	r4, fp
 800208a:	4622      	mov	r2, r4
 800208c:	bf28      	it	cs
 800208e:	465a      	movcs	r2, fp
	if (__n == 0)
 8002090:	b11a      	cbz	r2, 800209a <uart_register_handler+0x62>
	return __builtin_memcmp(__s1, __s2, __n);
 8002092:	4639      	mov	r1, r7
 8002094:	f005 fa86 	bl	80075a4 <memcmp>
	if (!__r)
 8002098:	b908      	cbnz	r0, 800209e <uart_register_handler+0x66>
	const difference_type __d = difference_type(__n1 - __n2);
 800209a:	eba4 000b 	sub.w	r0, r4, fp
      { return static_cast<_Link_type>(__x->_M_right); }
 800209e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80020a2:	2800      	cmp	r0, #0
 80020a4:	bfaa      	itet	ge
 80020a6:	46aa      	movge	sl, r5
	  __x = _S_right(__x);
 80020a8:	4615      	movlt	r5, r2
	  __y = __x, __x = _S_left(__x);
 80020aa:	461d      	movge	r5, r3
      while (__x != 0)
 80020ac:	2d00      	cmp	r5, #0
 80020ae:	d1e9      	bne.n	8002084 <uart_register_handler+0x4c>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 80020b0:	45ca      	cmp	sl, r9
 80020b2:	4654      	mov	r4, sl
 80020b4:	d021      	beq.n	80020fa <uart_register_handler+0xc2>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80020b6:	e9da 1504 	ldrd	r1, r5, [sl, #16]
 80020ba:	455d      	cmp	r5, fp
 80020bc:	462a      	mov	r2, r5
 80020be:	bf28      	it	cs
 80020c0:	465a      	movcs	r2, fp
	if (__n == 0)
 80020c2:	b11a      	cbz	r2, 80020cc <uart_register_handler+0x94>
	return __builtin_memcmp(__s1, __s2, __n);
 80020c4:	4638      	mov	r0, r7
 80020c6:	f005 fa6d 	bl	80075a4 <memcmp>
	if (!__r)
 80020ca:	b908      	cbnz	r0, 80020d0 <uart_register_handler+0x98>
	const difference_type __d = difference_type(__n1 - __n2);
 80020cc:	ebab 0005 	sub.w	r0, fp, r5
 80020d0:	2800      	cmp	r0, #0
 80020d2:	db12      	blt.n	80020fa <uart_register_handler+0xc2>
  handler_map[cmd] = cb;
 80020d4:	9b01      	ldr	r3, [sp, #4]
 80020d6:	62a3      	str	r3, [r4, #40]	@ 0x28
	if (_M_data() == _M_local_data())
 80020d8:	42b7      	cmp	r7, r6
 80020da:	d004      	beq.n	80020e6 <uart_register_handler+0xae>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80020dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80020de:	4638      	mov	r0, r7
 80020e0:	3101      	adds	r1, #1
 80020e2:	f005 f893 	bl	800720c <_ZdlPvj>
}
 80020e6:	b011      	add	sp, #68	@ 0x44
 80020e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d0b9      	beq.n	8002064 <uart_register_handler+0x2c>
      { return _M_dataplus._M_p; }
 80020f0:	4630      	mov	r0, r6
 80020f2:	e05c      	b.n	80021ae <uart_register_handler+0x176>
 80020f4:	f108 0904 	add.w	r9, r8, #4
 80020f8:	464c      	mov	r4, r9
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80020fa:	202c      	movs	r0, #44	@ 0x2c
 80020fc:	f005 f888 	bl	8007210 <_Znwj>
 8002100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8002102:	f100 0218 	add.w	r2, r0, #24
 8002106:	9203      	str	r2, [sp, #12]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8002108:	6102      	str	r2, [r0, #16]
	if (_M_data() == _M_local_data())
 800210a:	42b3      	cmp	r3, r6
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800210c:	f100 0210 	add.w	r2, r0, #16
 8002110:	4605      	mov	r5, r0
 8002112:	9206      	str	r2, [sp, #24]
 8002114:	f000 809f 	beq.w	8002256 <uart_register_handler+0x21e>
      { _M_dataplus._M_p = __p; }
 8002118:	6103      	str	r3, [r0, #16]
	    if (_M_string_length > _S_local_capacity)
 800211a:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
      { _M_allocated_capacity = __capacity; }
 800211e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002120:	6183      	str	r3, [r0, #24]
      { _M_string_length = __length; }
 8002122:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
 8002124:	454c      	cmp	r4, r9
 8002126:	f8c5 b014 	str.w	fp, [r5, #20]
      { _M_dataplus._M_p = __p; }
 800212a:	960a      	str	r6, [sp, #40]	@ 0x28
      { _M_string_length = __length; }
 800212c:	930b      	str	r3, [sp, #44]	@ 0x2c
	__c1 = __c2;
 800212e:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002132:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002134:	d069      	beq.n	800220a <uart_register_handler+0x1d2>
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002136:	6963      	ldr	r3, [r4, #20]
      compare(const basic_string& __str) const
 8002138:	692a      	ldr	r2, [r5, #16]
 800213a:	6921      	ldr	r1, [r4, #16]
 800213c:	9202      	str	r2, [sp, #8]
 800213e:	455b      	cmp	r3, fp
 8002140:	461a      	mov	r2, r3
 8002142:	bf28      	it	cs
 8002144:	465a      	movcs	r2, fp
 8002146:	9204      	str	r2, [sp, #16]
 8002148:	9105      	str	r1, [sp, #20]
	if (__n == 0)
 800214a:	2a00      	cmp	r2, #0
 800214c:	d036      	beq.n	80021bc <uart_register_handler+0x184>
	return __builtin_memcmp(__s1, __s2, __n);
 800214e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8002152:	9802      	ldr	r0, [sp, #8]
 8002154:	9307      	str	r3, [sp, #28]
 8002156:	f005 fa25 	bl	80075a4 <memcmp>
	if (!__r)
 800215a:	9b07      	ldr	r3, [sp, #28]
 800215c:	2800      	cmp	r0, #0
	const difference_type __d = difference_type(__n1 - __n2);
 800215e:	bf04      	itt	eq
 8002160:	ebab 0203 	subeq.w	r2, fp, r3
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8002164:	2a00      	cmpeq	r2, #0
 8002166:	db2d      	blt.n	80021c4 <uart_register_handler+0x18c>
 8002168:	9a04      	ldr	r2, [sp, #16]
 800216a:	9902      	ldr	r1, [sp, #8]
 800216c:	9805      	ldr	r0, [sp, #20]
 800216e:	9307      	str	r3, [sp, #28]
 8002170:	f005 fa18 	bl	80075a4 <memcmp>
	if (!__r)
 8002174:	9b07      	ldr	r3, [sp, #28]
 8002176:	b908      	cbnz	r0, 800217c <uart_register_handler+0x144>
	const difference_type __d = difference_type(__n1 - __n2);
 8002178:	eba3 000b 	sub.w	r0, r3, fp
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800217c:	2800      	cmp	r0, #0
 800217e:	db73      	blt.n	8002268 <uart_register_handler+0x230>
	if (_M_data() == _M_local_data())
 8002180:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8002184:	429a      	cmp	r2, r3
 8002186:	d004      	beq.n	8002192 <uart_register_handler+0x15a>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8002188:	69a9      	ldr	r1, [r5, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800218a:	4618      	mov	r0, r3
 800218c:	3101      	adds	r1, #1
 800218e:	f005 f83d 	bl	800720c <_ZdlPvj>
 8002192:	212c      	movs	r1, #44	@ 0x2c
 8002194:	4628      	mov	r0, r5
 8002196:	f005 f839 	bl	800720c <_ZdlPvj>
      { return _M_dataplus._M_p; }
 800219a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800219c:	e79a      	b.n	80020d4 <uart_register_handler+0x9c>
	    _M_data(_M_create(__dnew, size_type(0)));
 800219e:	a80a      	add	r0, sp, #40	@ 0x28
 80021a0:	2200      	movs	r2, #0
 80021a2:	a908      	add	r1, sp, #32
 80021a4:	f005 f90c 	bl	80073c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 80021a8:	9b08      	ldr	r3, [sp, #32]
      { _M_dataplus._M_p = __p; }
 80021aa:	900a      	str	r0, [sp, #40]	@ 0x28
      { _M_allocated_capacity = __capacity; }
 80021ac:	930c      	str	r3, [sp, #48]	@ 0x30
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 80021ae:	4622      	mov	r2, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f005 fa8f 	bl	80076d4 <memcpy>
	_M_set_length(__dnew);
 80021b6:	9c08      	ldr	r4, [sp, #32]
      { return _M_dataplus._M_p; }
 80021b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80021ba:	e754      	b.n	8002066 <uart_register_handler+0x2e>
	const difference_type __d = difference_type(__n1 - __n2);
 80021bc:	ebab 0203 	sub.w	r2, fp, r3
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80021c0:	2a00      	cmp	r2, #0
 80021c2:	dad9      	bge.n	8002178 <uart_register_handler+0x140>
	  if (__pos._M_node == _M_leftmost()) // begin()
 80021c4:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80021c8:	42bc      	cmp	r4, r7
 80021ca:	d037      	beq.n	800223c <uart_register_handler+0x204>
	_M_node = _Rb_tree_decrement(_M_node);
 80021cc:	4620      	mov	r0, r4
 80021ce:	f005 f887 	bl	80072e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80021d2:	4607      	mov	r7, r0
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80021d4:	e9d0 0a04 	ldrd	r0, sl, [r0, #16]
 80021d8:	45da      	cmp	sl, fp
 80021da:	4652      	mov	r2, sl
 80021dc:	bf28      	it	cs
 80021de:	465a      	movcs	r2, fp
	if (__n == 0)
 80021e0:	b182      	cbz	r2, 8002204 <uart_register_handler+0x1cc>
	return __builtin_memcmp(__s1, __s2, __n);
 80021e2:	9902      	ldr	r1, [sp, #8]
 80021e4:	f005 f9de 	bl	80075a4 <memcmp>
	if (!__r)
 80021e8:	b160      	cbz	r0, 8002204 <uart_register_handler+0x1cc>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80021ea:	2800      	cmp	r0, #0
 80021ec:	db72      	blt.n	80022d4 <uart_register_handler+0x29c>
	    return _M_get_insert_unique_pos(__k);
 80021ee:	9a06      	ldr	r2, [sp, #24]
 80021f0:	493d      	ldr	r1, [pc, #244]	@ (80022e8 <uart_register_handler+0x2b0>)
 80021f2:	a808      	add	r0, sp, #32
 80021f4:	f7ff fec8 	bl	8001f88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE24_M_get_insert_unique_posERS7_>
 80021f8:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
	if (__res.second)
 80021fc:	b9df      	cbnz	r7, 8002236 <uart_register_handler+0x1fe>
 80021fe:	692b      	ldr	r3, [r5, #16]
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	e7bd      	b.n	8002180 <uart_register_handler+0x148>
	const difference_type __d = difference_type(__n1 - __n2);
 8002204:	ebaa 000b 	sub.w	r0, sl, fp
 8002208:	e7ef      	b.n	80021ea <uart_register_handler+0x1b2>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800220a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0ed      	beq.n	80021ee <uart_register_handler+0x1b6>
 8002212:	f8d8 7010 	ldr.w	r7, [r8, #16]
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002216:	6929      	ldr	r1, [r5, #16]
      compare(const basic_string& __str) const
 8002218:	e9d7 0404 	ldrd	r0, r4, [r7, #16]
 800221c:	455c      	cmp	r4, fp
 800221e:	4622      	mov	r2, r4
 8002220:	bf28      	it	cs
 8002222:	465a      	movcs	r2, fp
	if (__n == 0)
 8002224:	b112      	cbz	r2, 800222c <uart_register_handler+0x1f4>
	return __builtin_memcmp(__s1, __s2, __n);
 8002226:	f005 f9bd 	bl	80075a4 <memcmp>
	if (!__r)
 800222a:	b908      	cbnz	r0, 8002230 <uart_register_handler+0x1f8>
	const difference_type __d = difference_type(__n1 - __n2);
 800222c:	eba4 000b 	sub.w	r0, r4, fp
 8002230:	2800      	cmp	r0, #0
 8002232:	dadc      	bge.n	80021ee <uart_register_handler+0x1b6>
 8002234:	e000      	b.n	8002238 <uart_register_handler+0x200>
			    || _M_impl._M_key_compare(_S_key(__z),
 8002236:	b90c      	cbnz	r4, 800223c <uart_register_handler+0x204>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8002238:	454f      	cmp	r7, r9
 800223a:	d140      	bne.n	80022be <uart_register_handler+0x286>
			    || _M_impl._M_key_compare(_S_key(__z),
 800223c:	2001      	movs	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800223e:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <uart_register_handler+0x2b4>)
 8002240:	463a      	mov	r2, r7
 8002242:	4629      	mov	r1, r5
 8002244:	f005 f84e 	bl	80072e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8002248:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	462c      	mov	r4, r5
 8002250:	f8c8 3014 	str.w	r3, [r8, #20]
	~_Auto_node()
 8002254:	e7a1      	b.n	800219a <uart_register_handler+0x162>
	    if (_M_string_length > _S_local_capacity)
 8002256:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800225a:	9803      	ldr	r0, [sp, #12]
 800225c:	4631      	mov	r1, r6
 800225e:	f10b 0201 	add.w	r2, fp, #1
 8002262:	f005 fa37 	bl	80076d4 <memcpy>
 8002266:	e75c      	b.n	8002122 <uart_register_handler+0xea>
	  if (__pos._M_node == _M_rightmost())
 8002268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800226c:	42bc      	cmp	r4, r7
 800226e:	d019      	beq.n	80022a4 <uart_register_handler+0x26c>
	_M_node = _Rb_tree_increment(_M_node);
 8002270:	4620      	mov	r0, r4
 8002272:	9307      	str	r3, [sp, #28]
 8002274:	f005 f832 	bl	80072dc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002278:	e9d0 1a04 	ldrd	r1, sl, [r0, #16]
 800227c:	45da      	cmp	sl, fp
 800227e:	4652      	mov	r2, sl
 8002280:	bf28      	it	cs
 8002282:	465a      	movcs	r2, fp
	if (__n == 0)
 8002284:	9b07      	ldr	r3, [sp, #28]
 8002286:	4607      	mov	r7, r0
 8002288:	b122      	cbz	r2, 8002294 <uart_register_handler+0x25c>
	return __builtin_memcmp(__s1, __s2, __n);
 800228a:	9802      	ldr	r0, [sp, #8]
 800228c:	f005 f98a 	bl	80075a4 <memcmp>
	if (!__r)
 8002290:	9b07      	ldr	r3, [sp, #28]
 8002292:	b908      	cbnz	r0, 8002298 <uart_register_handler+0x260>
	const difference_type __d = difference_type(__n1 - __n2);
 8002294:	ebab 000a 	sub.w	r0, fp, sl
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8002298:	2800      	cmp	r0, #0
 800229a:	daa8      	bge.n	80021ee <uart_register_handler+0x1b6>
	      if (_S_right(__pos._M_node) == 0)
 800229c:	68e2      	ldr	r2, [r4, #12]
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d1cc      	bne.n	800223c <uart_register_handler+0x204>
 80022a2:	4627      	mov	r7, r4
	if (__n == 0)
 80022a4:	9a04      	ldr	r2, [sp, #16]
 80022a6:	b132      	cbz	r2, 80022b6 <uart_register_handler+0x27e>
	return __builtin_memcmp(__s1, __s2, __n);
 80022a8:	9905      	ldr	r1, [sp, #20]
 80022aa:	9802      	ldr	r0, [sp, #8]
 80022ac:	9303      	str	r3, [sp, #12]
 80022ae:	f005 f979 	bl	80075a4 <memcmp>
	if (!__r)
 80022b2:	9b03      	ldr	r3, [sp, #12]
 80022b4:	b908      	cbnz	r0, 80022ba <uart_register_handler+0x282>
	const difference_type __d = difference_type(__n1 - __n2);
 80022b6:	ebab 0003 	sub.w	r0, fp, r3
			    || _M_impl._M_key_compare(_S_key(__z),
 80022ba:	0fc0      	lsrs	r0, r0, #31
 80022bc:	e7bf      	b.n	800223e <uart_register_handler+0x206>
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	692a      	ldr	r2, [r5, #16]
 80022c2:	9202      	str	r2, [sp, #8]
 80022c4:	459b      	cmp	fp, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	9205      	str	r2, [sp, #20]
 80022ca:	465a      	mov	r2, fp
 80022cc:	bf28      	it	cs
 80022ce:	461a      	movcs	r2, r3
 80022d0:	9204      	str	r2, [sp, #16]
 80022d2:	e7e7      	b.n	80022a4 <uart_register_handler+0x26c>
	      if (_S_right(__before._M_node) == 0)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ae      	beq.n	8002238 <uart_register_handler+0x200>
 80022da:	4627      	mov	r7, r4
			    || _M_impl._M_key_compare(_S_key(__z),
 80022dc:	2001      	movs	r0, #1
 80022de:	e7ae      	b.n	800223e <uart_register_handler+0x206>
	  std::__throw_logic_error(__N("basic_string: "
 80022e0:	4803      	ldr	r0, [pc, #12]	@ (80022f0 <uart_register_handler+0x2b8>)
 80022e2:	f005 f866 	bl	80073b2 <_ZSt19__throw_logic_errorPKc>
 80022e6:	bf00      	nop
 80022e8:	20000cb8 	.word	0x20000cb8
 80022ec:	20000cbc 	.word	0x20000cbc
 80022f0:	080077c4 	.word	0x080077c4

080022f4 <uart_init>:
{
 80022f4:	b508      	push	{r3, lr}
  uart_register_handler("RDR", reg_read_handler);
 80022f6:	490b      	ldr	r1, [pc, #44]	@ (8002324 <uart_init+0x30>)
 80022f8:	480b      	ldr	r0, [pc, #44]	@ (8002328 <uart_init+0x34>)
 80022fa:	f7ff fe9d 	bl	8002038 <uart_register_handler>
  uart_register_handler("WRR", reg_write_handler);
 80022fe:	490b      	ldr	r1, [pc, #44]	@ (800232c <uart_init+0x38>)
 8002300:	480b      	ldr	r0, [pc, #44]	@ (8002330 <uart_init+0x3c>)
 8002302:	f7ff fe99 	bl	8002038 <uart_register_handler>
  HAL_UARTEx_ReceiveToIdle_DMA(huart_reg, rx_buf, sizeof(rx_buf)/sizeof(*rx_buf));
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <uart_init+0x40>)
 8002308:	490b      	ldr	r1, [pc, #44]	@ (8002338 <uart_init+0x44>)
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8002310:	f004 ff58 	bl	80071c4 <HAL_UARTEx_ReceiveToIdle_DMA>
  hdma_rx->Instance->CCR &= ~DMA_CCR_HTIE;
 8002314:	4b09      	ldr	r3, [pc, #36]	@ (800233c <uart_init+0x48>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	6813      	ldr	r3, [r2, #0]
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6013      	str	r3, [r2, #0]
}
 8002322:	bd08      	pop	{r3, pc}
 8002324:	08001dbd 	.word	0x08001dbd
 8002328:	080077f8 	.word	0x080077f8
 800232c:	08001d11 	.word	0x08001d11
 8002330:	080077fc 	.word	0x080077fc
 8002334:	20000010 	.word	0x20000010
 8002338:	20000cd0 	.word	0x20000cd0
 800233c:	2000000c 	.word	0x2000000c

08002340 <_GLOBAL__sub_I_huart_reg>:
      _M_header._M_color = _S_red;
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <_GLOBAL__sub_I_huart_reg+0x14>)
 8002342:	2200      	movs	r2, #0
      _M_header._M_left = &_M_header;
 8002344:	1d19      	adds	r1, r3, #4
 8002346:	e9c3 2102 	strd	r2, r1, [r3, #8]
      _M_node_count = 0;
 800234a:	e9c3 1204 	strd	r1, r2, [r3, #16]
      _M_header._M_color = _S_red;
 800234e:	711a      	strb	r2, [r3, #4]
}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000cb8 	.word	0x20000cb8

08002358 <_GLOBAL__sub_D_huart_reg>:
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002358:	4b01      	ldr	r3, [pc, #4]	@ (8002360 <_GLOBAL__sub_D_huart_reg+0x8>)
      { _M_erase(_M_begin()); }
 800235a:	6898      	ldr	r0, [r3, #8]
 800235c:	f7ff bce8 	b.w	8001d30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPhjEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E.isra.0>
 8002360:	20000cb8 	.word	0x20000cb8

08002364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002364:	480d      	ldr	r0, [pc, #52]	@ (800239c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002366:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002368:	f7ff fcc8 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480c      	ldr	r0, [pc, #48]	@ (80023a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800236e:	490d      	ldr	r1, [pc, #52]	@ (80023a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002370:	4a0d      	ldr	r2, [pc, #52]	@ (80023a8 <LoopForever+0xe>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002384:	4c0a      	ldr	r4, [pc, #40]	@ (80023b0 <LoopForever+0x16>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002392:	f005 f979 	bl	8007688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002396:	f7fe fdd7 	bl	8000f48 <main>

0800239a <LoopForever>:

LoopForever:
    b LoopForever
 800239a:	e7fe      	b.n	800239a <LoopForever>
  ldr   r0, =_estack
 800239c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80023a8:	08007858 	.word	0x08007858
  ldr r2, =_sbss
 80023ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80023b0:	20001028 	.word	0x20001028

080023b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC1_2_IRQHandler>
	...

080023b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80023ba:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <HAL_InitTick+0x40>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b90b      	cbnz	r3, 80023c4 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80023c2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023c4:	490d      	ldr	r1, [pc, #52]	@ (80023fc <HAL_InitTick+0x44>)
 80023c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023ca:	4605      	mov	r5, r0
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	6808      	ldr	r0, [r1, #0]
 80023d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80023d6:	f001 f907 	bl	80035e8 <HAL_SYSTICK_Config>
 80023da:	4604      	mov	r4, r0
 80023dc:	2800      	cmp	r0, #0
 80023de:	d1ef      	bne.n	80023c0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e0:	2d0f      	cmp	r5, #15
 80023e2:	d8ed      	bhi.n	80023c0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e4:	4602      	mov	r2, r0
 80023e6:	4629      	mov	r1, r5
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f001 f8b2 	bl	8003554 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <HAL_InitTick+0x48>)
 80023f2:	4620      	mov	r0, r4
 80023f4:	601d      	str	r5, [r3, #0]
}
 80023f6:	bd38      	pop	{r3, r4, r5, pc}
 80023f8:	20000014 	.word	0x20000014
 80023fc:	20000008 	.word	0x20000008
 8002400:	20000018 	.word	0x20000018

08002404 <HAL_Init>:
{
 8002404:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002406:	2003      	movs	r0, #3
 8002408:	f001 f892 	bl	8003530 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800240c:	200f      	movs	r0, #15
 800240e:	f7ff ffd3 	bl	80023b8 <HAL_InitTick>
 8002412:	b110      	cbz	r0, 800241a <HAL_Init+0x16>
    status = HAL_ERROR;
 8002414:	2401      	movs	r4, #1
}
 8002416:	4620      	mov	r0, r4
 8002418:	bd10      	pop	{r4, pc}
 800241a:	4604      	mov	r4, r0
    HAL_MspInit();
 800241c:	f7ff f9ca 	bl	80017b4 <HAL_MspInit>
}
 8002420:	4620      	mov	r0, r4
 8002422:	bd10      	pop	{r4, pc}

08002424 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002424:	4a03      	ldr	r2, [pc, #12]	@ (8002434 <HAL_IncTick+0x10>)
 8002426:	4904      	ldr	r1, [pc, #16]	@ (8002438 <HAL_IncTick+0x14>)
 8002428:	6813      	ldr	r3, [r2, #0]
 800242a:	6809      	ldr	r1, [r1, #0]
 800242c:	440b      	add	r3, r1
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000ed8 	.word	0x20000ed8
 8002438:	20000014 	.word	0x20000014

0800243c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800243c:	4b01      	ldr	r3, [pc, #4]	@ (8002444 <HAL_GetTick+0x8>)
 800243e:	6818      	ldr	r0, [r3, #0]
}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000ed8 	.word	0x20000ed8

08002448 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002448:	b530      	push	{r4, r5, lr}
 800244a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002450:	2800      	cmp	r0, #0
 8002452:	d05c      	beq.n	800250e <HAL_ADC_Init+0xc6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002454:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8002456:	4604      	mov	r4, r0
 8002458:	2d00      	cmp	r5, #0
 800245a:	f000 80cc 	beq.w	80025f6 <HAL_ADC_Init+0x1ae>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800245e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002460:	6893      	ldr	r3, [r2, #8]
 8002462:	009d      	lsls	r5, r3, #2
 8002464:	d505      	bpl.n	8002472 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002466:	6893      	ldr	r3, [r2, #8]
 8002468:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800246c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002470:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002472:	6893      	ldr	r3, [r2, #8]
 8002474:	00d8      	lsls	r0, r3, #3
 8002476:	d419      	bmi.n	80024ac <HAL_ADC_Init+0x64>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002478:	4b78      	ldr	r3, [pc, #480]	@ (800265c <HAL_ADC_Init+0x214>)
 800247a:	4879      	ldr	r0, [pc, #484]	@ (8002660 <HAL_ADC_Init+0x218>)
 800247c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800247e:	6891      	ldr	r1, [r2, #8]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	fba0 0303 	umull	r0, r3, r0, r3
 8002486:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 800248a:	099b      	lsrs	r3, r3, #6
 800248c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002490:	3301      	adds	r3, #1
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002498:	6091      	str	r1, [r2, #8]
 800249a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800249c:	9b01      	ldr	r3, [sp, #4]
 800249e:	b12b      	cbz	r3, 80024ac <HAL_ADC_Init+0x64>
    {
      wait_loop_index--;
 80024a0:	9b01      	ldr	r3, [sp, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f9      	bne.n	80024a0 <HAL_ADC_Init+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024ac:	6893      	ldr	r3, [r2, #8]
 80024ae:	00d9      	lsls	r1, r3, #3
 80024b0:	d430      	bmi.n	8002514 <HAL_ADC_Init+0xcc>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ba:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80024bc:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024be:	4303      	orrs	r3, r0
 80024c0:	6623      	str	r3, [r4, #96]	@ 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024c2:	6893      	ldr	r3, [r2, #8]
 80024c4:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80024ca:	d11c      	bne.n	8002506 <HAL_ADC_Init+0xbe>
 80024cc:	06db      	lsls	r3, r3, #27
 80024ce:	d41a      	bmi.n	8002506 <HAL_ADC_Init+0xbe>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80024d2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024dc:	6893      	ldr	r3, [r2, #8]
 80024de:	07dd      	lsls	r5, r3, #31
 80024e0:	d432      	bmi.n	8002548 <HAL_ADC_Init+0x100>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e2:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80024e6:	d017      	beq.n	8002518 <HAL_ADC_Init+0xd0>
 80024e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002664 <HAL_ADC_Init+0x21c>)
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d014      	beq.n	8002518 <HAL_ADC_Init+0xd0>
 80024ee:	495e      	ldr	r1, [pc, #376]	@ (8002668 <HAL_ADC_Init+0x220>)
 80024f0:	4b5e      	ldr	r3, [pc, #376]	@ (800266c <HAL_ADC_Init+0x224>)
 80024f2:	6889      	ldr	r1, [r1, #8]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	430b      	orrs	r3, r1
 80024f8:	495d      	ldr	r1, [pc, #372]	@ (8002670 <HAL_ADC_Init+0x228>)
 80024fa:	6889      	ldr	r1, [r1, #8]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	07d9      	lsls	r1, r3, #31
 8002500:	d422      	bmi.n	8002548 <HAL_ADC_Init+0x100>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002502:	495c      	ldr	r1, [pc, #368]	@ (8002674 <HAL_ADC_Init+0x22c>)
 8002504:	e01a      	b.n	800253c <HAL_ADC_Init+0xf4>
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002506:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002508:	f043 0310 	orr.w	r3, r3, #16
 800250c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800250e:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002510:	b003      	add	sp, #12
 8002512:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002514:	2000      	movs	r0, #0
 8002516:	e7d4      	b.n	80024c2 <HAL_ADC_Init+0x7a>
 8002518:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 800251c:	4b51      	ldr	r3, [pc, #324]	@ (8002664 <HAL_ADC_Init+0x21c>)
 800251e:	688d      	ldr	r5, [r1, #8]
 8002520:	6899      	ldr	r1, [r3, #8]
 8002522:	07c9      	lsls	r1, r1, #31
 8002524:	d410      	bmi.n	8002548 <HAL_ADC_Init+0x100>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002526:	07ed      	lsls	r5, r5, #31
 8002528:	d40e      	bmi.n	8002548 <HAL_ADC_Init+0x100>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800252a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800252e:	f000 8092 	beq.w	8002656 <HAL_ADC_Init+0x20e>
 8002532:	4950      	ldr	r1, [pc, #320]	@ (8002674 <HAL_ADC_Init+0x22c>)
 8002534:	4d50      	ldr	r5, [pc, #320]	@ (8002678 <HAL_ADC_Init+0x230>)
 8002536:	429a      	cmp	r2, r3
 8002538:	bf08      	it	eq
 800253a:	4629      	moveq	r1, r5
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800253c:	688b      	ldr	r3, [r1, #8]
 800253e:	6865      	ldr	r5, [r4, #4]
 8002540:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002544:	432b      	orrs	r3, r5
 8002546:	608b      	str	r3, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 8002548:	68e5      	ldr	r5, [r4, #12]
 800254a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800254c:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8002550:	432b      	orrs	r3, r5
 8002552:	68a5      	ldr	r5, [r4, #8]
 8002554:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002556:	7f65      	ldrb	r5, [r4, #29]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002558:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 800255a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800255e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002562:	d04e      	beq.n	8002602 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002564:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002566:	b121      	cbz	r1, 8002572 <HAL_ADC_Init+0x12a>
                   | hadc->Init.ExternalTrigConvEdge
 8002568:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800256a:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800256e:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002570:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002572:	68d5      	ldr	r5, [r2, #12]
 8002574:	4941      	ldr	r1, [pc, #260]	@ (800267c <HAL_ADC_Init+0x234>)
 8002576:	4029      	ands	r1, r5
 8002578:	4319      	orrs	r1, r3
 800257a:	60d1      	str	r1, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800257c:	6913      	ldr	r3, [r2, #16]
 800257e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002580:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002584:	430b      	orrs	r3, r1
 8002586:	6113      	str	r3, [r2, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002588:	6893      	ldr	r3, [r2, #8]
 800258a:	071b      	lsls	r3, r3, #28
 800258c:	d424      	bmi.n	80025d8 <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800258e:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002590:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002594:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002596:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800259a:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800259c:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025a0:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025a4:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80025a6:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025a8:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025aa:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80025ac:	2900      	cmp	r1, #0
 80025ae:	d035      	beq.n	800261c <HAL_ADC_Init+0x1d4>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025b6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80025ba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025c2:	430b      	orrs	r3, r1
 80025c4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80025c8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d031      	beq.n	8002634 <HAL_ADC_Init+0x1ec>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025d0:	6913      	ldr	r3, [r2, #16]
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025d8:	6963      	ldr	r3, [r4, #20]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d016      	beq.n	800260c <HAL_ADC_Init+0x1c4>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025de:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80025e0:	f023 030f 	bic.w	r3, r3, #15
 80025e4:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025e6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80025e8:	f023 0303 	bic.w	r3, r3, #3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 80025f2:	b003      	add	sp, #12
 80025f4:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80025f6:	f7ff f8f7 	bl	80017e8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80025fa:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 80025fc:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8002600:	e72d      	b.n	800245e <HAL_ADC_Init+0x16>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002602:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002604:	3901      	subs	r1, #1
 8002606:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800260a:	e7ab      	b.n	8002564 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800260c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800260e:	6a23      	ldr	r3, [r4, #32]
 8002610:	f021 010f 	bic.w	r1, r1, #15
 8002614:	3b01      	subs	r3, #1
 8002616:	430b      	orrs	r3, r1
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	e7e4      	b.n	80025e6 <HAL_ADC_Init+0x19e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800261c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002620:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002622:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8002626:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800262a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800262e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002632:	e7c9      	b.n	80025c8 <HAL_ADC_Init+0x180>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002634:	6911      	ldr	r1, [r2, #16]
 8002636:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002638:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800263a:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 800263e:	f021 0104 	bic.w	r1, r1, #4
 8002642:	432b      	orrs	r3, r5
 8002644:	430b      	orrs	r3, r1
 8002646:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002648:	430b      	orrs	r3, r1
 800264a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800264c:	430b      	orrs	r3, r1
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6113      	str	r3, [r2, #16]
 8002654:	e7c0      	b.n	80025d8 <HAL_ADC_Init+0x190>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002656:	4908      	ldr	r1, [pc, #32]	@ (8002678 <HAL_ADC_Init+0x230>)
 8002658:	e770      	b.n	800253c <HAL_ADC_Init+0xf4>
 800265a:	bf00      	nop
 800265c:	20000008 	.word	0x20000008
 8002660:	053e2d63 	.word	0x053e2d63
 8002664:	50000100 	.word	0x50000100
 8002668:	50000400 	.word	0x50000400
 800266c:	50000500 	.word	0x50000500
 8002670:	50000600 	.word	0x50000600
 8002674:	50000700 	.word	0x50000700
 8002678:	50000300 	.word	0x50000300
 800267c:	fff04007 	.word	0xfff04007

08002680 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop

08002684 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002684:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002686:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002688:	f7ff fffa 	bl	8002680 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800268c:	bd08      	pop	{r3, pc}
 800268e:	bf00      	nop

08002690 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop

08002694 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002694:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002696:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002698:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 800269c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800269e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026a0:	d11d      	bne.n	80026de <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026a2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026aa:	680a      	ldr	r2, [r1, #0]
 80026ac:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026b0:	68ca      	ldr	r2, [r1, #12]
 80026b2:	d01b      	beq.n	80026ec <ADC_DMAConvCplt+0x58>
 80026b4:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80026b8:	d10d      	bne.n	80026d6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026ba:	68ca      	ldr	r2, [r1, #12]
 80026bc:	0494      	lsls	r4, r2, #18
 80026be:	d40a      	bmi.n	80026d6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026ca:	04d1      	lsls	r1, r2, #19
 80026cc:	d403      	bmi.n	80026d6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fbd0 	bl	8000e7c <HAL_ADC_ConvCpltCallback>
}
 80026dc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026de:	06d2      	lsls	r2, r2, #27
 80026e0:	d40a      	bmi.n	80026f8 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80026e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ea:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026ec:	0790      	lsls	r0, r2, #30
 80026ee:	d5e7      	bpl.n	80026c0 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fbc3 	bl	8000e7c <HAL_ADC_ConvCpltCallback>
 80026f6:	e7f1      	b.n	80026dc <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ffc9 	bl	8002690 <HAL_ADC_ErrorCallback>
}
 80026fe:	bd10      	pop	{r4, pc}

08002700 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002700:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002702:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002704:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800270a:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800270c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002714:	f7ff ffbc 	bl	8002690 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002718:	bd08      	pop	{r3, pc}
 800271a:	bf00      	nop

0800271c <HAL_ADC_ConfigChannel>:
{
 800271c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800271e:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8002722:	b083      	sub	sp, #12
 8002724:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002726:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002728:	f04f 0000 	mov.w	r0, #0
 800272c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800272e:	f000 811f 	beq.w	8002970 <HAL_ADC_ConfigChannel+0x254>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002732:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8002734:	2001      	movs	r0, #1
 8002736:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800273a:	6894      	ldr	r4, [r2, #8]
 800273c:	0764      	lsls	r4, r4, #29
 800273e:	d469      	bmi.n	8002814 <HAL_ADC_ConfigChannel+0xf8>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002740:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002742:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8002746:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800274a:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 800274e:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002750:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8002754:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002758:	f854 500e 	ldr.w	r5, [r4, lr]
 800275c:	261f      	movs	r6, #31
 800275e:	fa00 f00c 	lsl.w	r0, r0, ip
 8002762:	fa06 fc0c 	lsl.w	ip, r6, ip
 8002766:	ea25 0c0c 	bic.w	ip, r5, ip
 800276a:	ea40 000c 	orr.w	r0, r0, ip
 800276e:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002772:	6890      	ldr	r0, [r2, #8]
 8002774:	0740      	lsls	r0, r0, #29
 8002776:	d556      	bpl.n	8002826 <HAL_ADC_ConfigChannel+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002778:	6890      	ldr	r0, [r2, #8]
 800277a:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800277c:	6894      	ldr	r4, [r2, #8]
 800277e:	07e6      	lsls	r6, r4, #31
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002780:	4605      	mov	r5, r0
 8002782:	d413      	bmi.n	80027ac <HAL_ADC_ConfigChannel+0x90>
 8002784:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002786:	4cbe      	ldr	r4, [pc, #760]	@ (8002a80 <HAL_ADC_ConfigChannel+0x364>)
 8002788:	f8d2 60b0 	ldr.w	r6, [r2, #176]	@ 0xb0
 800278c:	f007 0c18 	and.w	ip, r7, #24
 8002790:	fa24 f40c 	lsr.w	r4, r4, ip
 8002794:	f3c0 0c12 	ubfx	ip, r0, #0, #19
 8002798:	4004      	ands	r4, r0
 800279a:	ea26 060c 	bic.w	r6, r6, ip
 800279e:	4334      	orrs	r4, r6
 80027a0:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027a4:	4cb7      	ldr	r4, [pc, #732]	@ (8002a84 <HAL_ADC_ConfigChannel+0x368>)
 80027a6:	42a7      	cmp	r7, r4
 80027a8:	f000 808e 	beq.w	80028c8 <HAL_ADC_ConfigChannel+0x1ac>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027ac:	49b6      	ldr	r1, [pc, #728]	@ (8002a88 <HAL_ADC_ConfigChannel+0x36c>)
 80027ae:	420d      	tst	r5, r1
 80027b0:	d02e      	beq.n	8002810 <HAL_ADC_ConfigChannel+0xf4>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b2:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80027b6:	f000 80d9 	beq.w	800296c <HAL_ADC_ConfigChannel+0x250>
 80027ba:	4cb4      	ldr	r4, [pc, #720]	@ (8002a8c <HAL_ADC_ConfigChannel+0x370>)
 80027bc:	49b4      	ldr	r1, [pc, #720]	@ (8002a90 <HAL_ADC_ConfigChannel+0x374>)
 80027be:	48b5      	ldr	r0, [pc, #724]	@ (8002a94 <HAL_ADC_ConfigChannel+0x378>)
 80027c0:	42a2      	cmp	r2, r4
 80027c2:	bf08      	it	eq
 80027c4:	4601      	moveq	r1, r0
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80027c6:	48b4      	ldr	r0, [pc, #720]	@ (8002a98 <HAL_ADC_ConfigChannel+0x37c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027c8:	6889      	ldr	r1, [r1, #8]
 80027ca:	4285      	cmp	r5, r0
 80027cc:	f001 74e0 	and.w	r4, r1, #29360128	@ 0x1c00000
 80027d0:	f000 80d1 	beq.w	8002976 <HAL_ADC_ConfigChannel+0x25a>
 80027d4:	48b1      	ldr	r0, [pc, #708]	@ (8002a9c <HAL_ADC_ConfigChannel+0x380>)
 80027d6:	4285      	cmp	r5, r0
 80027d8:	f000 80cd 	beq.w	8002976 <HAL_ADC_ConfigChannel+0x25a>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027dc:	48b0      	ldr	r0, [pc, #704]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x384>)
 80027de:	4285      	cmp	r5, r0
 80027e0:	f000 80f2 	beq.w	80029c8 <HAL_ADC_ConfigChannel+0x2ac>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e4:	48af      	ldr	r0, [pc, #700]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x388>)
 80027e6:	4285      	cmp	r5, r0
 80027e8:	d112      	bne.n	8002810 <HAL_ADC_ConfigChannel+0xf4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027ea:	0249      	lsls	r1, r1, #9
 80027ec:	d410      	bmi.n	8002810 <HAL_ADC_ConfigChannel+0xf4>
        if (ADC_VREFINT_INSTANCE(hadc))
 80027ee:	49a7      	ldr	r1, [pc, #668]	@ (8002a8c <HAL_ADC_ConfigChannel+0x370>)
 80027f0:	428a      	cmp	r2, r1
 80027f2:	d00d      	beq.n	8002810 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f4:	48a7      	ldr	r0, [pc, #668]	@ (8002a94 <HAL_ADC_ConfigChannel+0x378>)
 80027f6:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 80027fa:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80027fe:	bf08      	it	eq
 8002800:	4601      	moveq	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002802:	688a      	ldr	r2, [r1, #8]
 8002804:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002808:	4322      	orrs	r2, r4
 800280a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800280e:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002810:	2000      	movs	r0, #0
 8002812:	e003      	b.n	800281c <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002814:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8002822:	b003      	add	sp, #12
 8002824:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002826:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002828:	6808      	ldr	r0, [r1, #0]
 800282a:	0727      	lsls	r7, r4, #28
 800282c:	d4a6      	bmi.n	800277c <HAL_ADC_ConfigChannel+0x60>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800282e:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8002830:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8002834:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002836:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8002838:	40b4      	lsls	r4, r6
 800283a:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800283e:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8002842:	ea6f 0404 	mvn.w	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002846:	f102 0714 	add.w	r7, r2, #20
 800284a:	f000 8135 	beq.w	8002ab8 <HAL_ADC_ConfigChannel+0x39c>
  MODIFY_REG(*preg,
 800284e:	40b5      	lsls	r5, r6
 8002850:	583e      	ldr	r6, [r7, r0]
 8002852:	4034      	ands	r4, r6
 8002854:	432c      	orrs	r4, r5
 8002856:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002858:	6950      	ldr	r0, [r2, #20]
 800285a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800285e:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002860:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002864:	2f04      	cmp	r7, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002866:	68d6      	ldr	r6, [r2, #12]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002868:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286a:	f102 0460 	add.w	r4, r2, #96	@ 0x60
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800286e:	f000 80d6 	beq.w	8002a1e <HAL_ADC_ConfigChannel+0x302>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002872:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8002876:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8002878:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 800287c:	40b5      	lsls	r5, r6
 800287e:	4e8a      	ldr	r6, [pc, #552]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x38c>)
 8002880:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002884:	ea0c 0606 	and.w	r6, ip, r6
 8002888:	4306      	orrs	r6, r0
 800288a:	4335      	orrs	r5, r6
 800288c:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8002890:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002894:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8002896:	698e      	ldr	r6, [r1, #24]
 8002898:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800289c:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80028a0:	4330      	orrs	r0, r6
 80028a2:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028a6:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028a8:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 80028aa:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80028ae:	f1a5 0501 	sub.w	r5, r5, #1
 80028b2:	fab5 f585 	clz	r5, r5
 80028b6:	096d      	lsrs	r5, r5, #5
 80028b8:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80028bc:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 80028c0:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80028c4:	6808      	ldr	r0, [r1, #0]
}
 80028c6:	e759      	b.n	800277c <HAL_ADC_ConfigChannel+0x60>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028c8:	f1bc 0f00 	cmp.w	ip, #0
 80028cc:	f000 8091 	beq.w	80029f2 <HAL_ADC_ConfigChannel+0x2d6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028d4:	2c00      	cmp	r4, #0
 80028d6:	f000 80f7 	beq.w	8002ac8 <HAL_ADC_ConfigChannel+0x3ac>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80028da:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028de:	3401      	adds	r4, #1
 80028e0:	f004 041f 	and.w	r4, r4, #31
 80028e4:	2c09      	cmp	r4, #9
 80028e6:	f240 80ef 	bls.w	8002ac8 <HAL_ADC_ConfigChannel+0x3ac>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80028ee:	2c00      	cmp	r4, #0
 80028f0:	f000 817a 	beq.w	8002be8 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 80028f4:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028f8:	3401      	adds	r4, #1
 80028fa:	06a4      	lsls	r4, r4, #26
 80028fc:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002904:	2d00      	cmp	r5, #0
 8002906:	f000 8174 	beq.w	8002bf2 <HAL_ADC_ConfigChannel+0x4d6>
  return __builtin_clz(value);
 800290a:	fab5 f585 	clz	r5, r5
 800290e:	3501      	adds	r5, #1
 8002910:	f005 051f 	and.w	r5, r5, #31
 8002914:	2601      	movs	r6, #1
 8002916:	fa06 f505 	lsl.w	r5, r6, r5
 800291a:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002920:	2800      	cmp	r0, #0
 8002922:	f000 8164 	beq.w	8002bee <HAL_ADC_ConfigChannel+0x4d2>
  return __builtin_clz(value);
 8002926:	fab0 f080 	clz	r0, r0
 800292a:	1c45      	adds	r5, r0, #1
 800292c:	f005 051f 	and.w	r5, r5, #31
 8002930:	2003      	movs	r0, #3
 8002932:	f06f 061d 	mvn.w	r6, #29
 8002936:	fb10 6005 	smlabb	r0, r0, r5, r6
 800293a:	0500      	lsls	r0, r0, #20
 800293c:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002940:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002942:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8002944:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002946:	f005 0504 	and.w	r5, r5, #4
 800294a:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 800294e:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8002952:	fa04 f700 	lsl.w	r7, r4, r0
 8002956:	f04f 0c07 	mov.w	ip, #7
 800295a:	5974      	ldr	r4, [r6, r5]
 800295c:	fa0c f000 	lsl.w	r0, ip, r0
 8002960:	ea24 0000 	bic.w	r0, r4, r0
 8002964:	4338      	orrs	r0, r7
 8002966:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002968:	680d      	ldr	r5, [r1, #0]
}
 800296a:	e71f      	b.n	80027ac <HAL_ADC_ConfigChannel+0x90>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800296c:	4949      	ldr	r1, [pc, #292]	@ (8002a94 <HAL_ADC_ConfigChannel+0x378>)
 800296e:	e72a      	b.n	80027c6 <HAL_ADC_ConfigChannel+0xaa>
  __HAL_LOCK(hadc);
 8002970:	2002      	movs	r0, #2
}
 8002972:	b003      	add	sp, #12
 8002974:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002976:	020d      	lsls	r5, r1, #8
 8002978:	f53f af4a 	bmi.w	8002810 <HAL_ADC_ConfigChannel+0xf4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800297c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002980:	d04b      	beq.n	8002a1a <HAL_ADC_ConfigChannel+0x2fe>
 8002982:	494a      	ldr	r1, [pc, #296]	@ (8002aac <HAL_ADC_ConfigChannel+0x390>)
 8002984:	428a      	cmp	r2, r1
 8002986:	f47f af43 	bne.w	8002810 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800298a:	4841      	ldr	r0, [pc, #260]	@ (8002a90 <HAL_ADC_ConfigChannel+0x374>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800298c:	4a48      	ldr	r2, [pc, #288]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x394>)
 800298e:	4d49      	ldr	r5, [pc, #292]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x398>)
 8002990:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002992:	6881      	ldr	r1, [r0, #8]
 8002994:	0992      	lsrs	r2, r2, #6
 8002996:	fba5 5202 	umull	r5, r2, r5, r2
 800299a:	0992      	lsrs	r2, r2, #6
 800299c:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80029a0:	3201      	adds	r2, #1
 80029a2:	4321      	orrs	r1, r4
 80029a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80029a8:	0092      	lsls	r2, r2, #2
 80029aa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80029ae:	6081      	str	r1, [r0, #8]
 80029b0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80029b2:	9a01      	ldr	r2, [sp, #4]
 80029b4:	2a00      	cmp	r2, #0
 80029b6:	f43f af2b 	beq.w	8002810 <HAL_ADC_ConfigChannel+0xf4>
            wait_loop_index--;
 80029ba:	9a01      	ldr	r2, [sp, #4]
 80029bc:	3a01      	subs	r2, #1
 80029be:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80029c0:	9a01      	ldr	r2, [sp, #4]
 80029c2:	2a00      	cmp	r2, #0
 80029c4:	d1f9      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x29e>
 80029c6:	e723      	b.n	8002810 <HAL_ADC_ConfigChannel+0xf4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029c8:	01c8      	lsls	r0, r1, #7
 80029ca:	f53f af21 	bmi.w	8002810 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ce:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80029d2:	f000 8104 	beq.w	8002bde <HAL_ADC_ConfigChannel+0x4c2>
 80029d6:	4d2d      	ldr	r5, [pc, #180]	@ (8002a8c <HAL_ADC_ConfigChannel+0x370>)
 80029d8:	492d      	ldr	r1, [pc, #180]	@ (8002a90 <HAL_ADC_ConfigChannel+0x374>)
 80029da:	482e      	ldr	r0, [pc, #184]	@ (8002a94 <HAL_ADC_ConfigChannel+0x378>)
 80029dc:	42aa      	cmp	r2, r5
 80029de:	bf08      	it	eq
 80029e0:	4601      	moveq	r1, r0
 80029e2:	688a      	ldr	r2, [r1, #8]
 80029e4:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80029e8:	4322      	orrs	r2, r4
 80029ea:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80029ee:	608a      	str	r2, [r1, #8]
}
 80029f0:	e70e      	b.n	8002810 <HAL_ADC_ConfigChannel+0xf4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f2:	0e80      	lsrs	r0, r0, #26
 80029f4:	3001      	adds	r0, #1
 80029f6:	f000 051f 	and.w	r5, r0, #31
 80029fa:	2401      	movs	r4, #1
 80029fc:	0680      	lsls	r0, r0, #26
 80029fe:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002a02:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a04:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a06:	ea44 0400 	orr.w	r4, r4, r0
 8002a0a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a0e:	d97f      	bls.n	8002b10 <HAL_ADC_ConfigChannel+0x3f4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a10:	381e      	subs	r0, #30
 8002a12:	0500      	lsls	r0, r0, #20
 8002a14:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8002a18:	e792      	b.n	8002940 <HAL_ADC_ConfigChannel+0x224>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1a:	481e      	ldr	r0, [pc, #120]	@ (8002a94 <HAL_ADC_ConfigChannel+0x378>)
 8002a1c:	e7b6      	b.n	800298c <HAL_ADC_ConfigChannel+0x270>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a1e:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8002a20:	6e15      	ldr	r5, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a22:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a26:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a2a:	2e00      	cmp	r6, #0
 8002a2c:	d172      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x3f8>
 8002a2e:	f3c0 6684 	ubfx	r6, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a32:	42b5      	cmp	r5, r6
 8002a34:	f000 80b1 	beq.w	8002b9a <HAL_ADC_ConfigChannel+0x47e>
 8002a38:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002a3a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a3c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8002a40:	42b5      	cmp	r5, r6
 8002a42:	f000 8098 	beq.w	8002b76 <HAL_ADC_ConfigChannel+0x45a>
 8002a46:	68a5      	ldr	r5, [r4, #8]
 8002a48:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4a:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a4e:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a52:	f3c0 6684 	ubfx	r6, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a56:	42ae      	cmp	r6, r5
 8002a58:	f000 80af 	beq.w	8002bba <HAL_ADC_ConfigChannel+0x49e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a5c:	68e5      	ldr	r5, [r4, #12]
 8002a5e:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a60:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a64:	f3c5 6484 	ubfx	r4, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a68:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a6c:	42a5      	cmp	r5, r4
 8002a6e:	f47f ae85 	bne.w	800277c <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 8002a72:	6830      	ldr	r0, [r6, #0]
 8002a74:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002a78:	6030      	str	r0, [r6, #0]
 8002a7a:	6808      	ldr	r0, [r1, #0]
}
 8002a7c:	e67e      	b.n	800277c <HAL_ADC_ConfigChannel+0x60>
 8002a7e:	bf00      	nop
 8002a80:	0007ffff 	.word	0x0007ffff
 8002a84:	407f0000 	.word	0x407f0000
 8002a88:	80080000 	.word	0x80080000
 8002a8c:	50000100 	.word	0x50000100
 8002a90:	50000700 	.word	0x50000700
 8002a94:	50000300 	.word	0x50000300
 8002a98:	c3210000 	.word	0xc3210000
 8002a9c:	90c00010 	.word	0x90c00010
 8002aa0:	c7520000 	.word	0xc7520000
 8002aa4:	cb840000 	.word	0xcb840000
 8002aa8:	03fff000 	.word	0x03fff000
 8002aac:	50000600 	.word	0x50000600
 8002ab0:	20000008 	.word	0x20000008
 8002ab4:	053e2d63 	.word	0x053e2d63
  MODIFY_REG(*preg,
 8002ab8:	583d      	ldr	r5, [r7, r0]
 8002aba:	402c      	ands	r4, r5
 8002abc:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002abe:	6950      	ldr	r0, [r2, #20]
 8002ac0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8002ac4:	6150      	str	r0, [r2, #20]
}
 8002ac6:	e6cb      	b.n	8002860 <HAL_ADC_ConfigChannel+0x144>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8002acc:	2c00      	cmp	r4, #0
 8002ace:	f000 8094 	beq.w	8002bfa <HAL_ADC_ConfigChannel+0x4de>
  return __builtin_clz(value);
 8002ad2:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ad6:	3401      	adds	r4, #1
 8002ad8:	06a4      	lsls	r4, r4, #26
 8002ada:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002ae2:	2d00      	cmp	r5, #0
 8002ae4:	f000 8087 	beq.w	8002bf6 <HAL_ADC_ConfigChannel+0x4da>
  return __builtin_clz(value);
 8002ae8:	fab5 f585 	clz	r5, r5
 8002aec:	3501      	adds	r5, #1
 8002aee:	f005 051f 	and.w	r5, r5, #31
 8002af2:	2601      	movs	r6, #1
 8002af4:	fa06 f505 	lsl.w	r5, r6, r5
 8002af8:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d06f      	beq.n	8002be2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002b02:	fab0 f080 	clz	r0, r0
 8002b06:	3001      	adds	r0, #1
 8002b08:	f000 001f 	and.w	r0, r0, #31
 8002b0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b10:	0500      	lsls	r0, r0, #20
 8002b12:	e715      	b.n	8002940 <HAL_ADC_ConfigChannel+0x224>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8002b18:	b11e      	cbz	r6, 8002b22 <HAL_ADC_ConfigChannel+0x406>
  return __builtin_clz(value);
 8002b1a:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b1e:	42b5      	cmp	r5, r6
 8002b20:	d03b      	beq.n	8002b9a <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b22:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002b24:	6e55      	ldr	r5, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b26:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	fa90 f6a0 	rbit	r6, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2e:	f104 0708 	add.w	r7, r4, #8
 8002b32:	46bc      	mov	ip, r7
  if (value == 0U)
 8002b34:	b11e      	cbz	r6, 8002b3e <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
 8002b36:	fab6 f686 	clz	r6, r6
 8002b3a:	42ae      	cmp	r6, r5
 8002b3c:	d01d      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b3e:	68a5      	ldr	r5, [r4, #8]
 8002b40:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b42:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	fa90 fca0 	rbit	ip, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4a:	f104 060c 	add.w	r6, r4, #12
 8002b4e:	46b6      	mov	lr, r6
  if (value == 0U)
 8002b50:	f1bc 0f00 	cmp.w	ip, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8002b56:	fabc fc8c 	clz	ip, ip
 8002b5a:	45ac      	cmp	ip, r5
 8002b5c:	d02f      	beq.n	8002bbe <HAL_ADC_ConfigChannel+0x4a2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b5e:	68e5      	ldr	r5, [r4, #12]
 8002b60:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b62:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002b6a:	2d00      	cmp	r5, #0
 8002b6c:	f43f ae06 	beq.w	800277c <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 8002b70:	fab5 f585 	clz	r5, r5
 8002b74:	e77a      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x350>
 8002b76:	f104 0c08 	add.w	ip, r4, #8
  MODIFY_REG(*preg,
 8002b7a:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002b7c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002b80:	6650      	str	r0, [r2, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b82:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b84:	6808      	ldr	r0, [r1, #0]
 8002b86:	68a5      	ldr	r5, [r4, #8]
 8002b88:	f3c0 0612 	ubfx	r6, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b8c:	4667      	mov	r7, ip
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b8e:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b92:	2e00      	cmp	r6, #0
 8002b94:	f43f af5d 	beq.w	8002a52 <HAL_ADC_ConfigChannel+0x336>
 8002b98:	e7d5      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x42a>
  MODIFY_REG(*preg,
 8002b9a:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8002b9c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002ba0:	6610      	str	r0, [r2, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ba2:	6e50      	ldr	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ba4:	6808      	ldr	r0, [r1, #0]
 8002ba6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002ba8:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bac:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bb0:	2e00      	cmp	r6, #0
 8002bb2:	d1ba      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x40e>
 8002bb4:	f3c0 6684 	ubfx	r6, r0, #26, #5
 8002bb8:	e742      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x324>
 8002bba:	f104 0e0c 	add.w	lr, r4, #12
  MODIFY_REG(*preg,
 8002bbe:	6838      	ldr	r0, [r7, #0]
 8002bc0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002bc4:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bc6:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bc8:	6808      	ldr	r0, [r1, #0]
 8002bca:	68e4      	ldr	r4, [r4, #12]
 8002bcc:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd0:	4676      	mov	r6, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bd2:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	f43f af46 	beq.w	8002a68 <HAL_ADC_ConfigChannel+0x34c>
 8002bdc:	e7c3      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x44a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bde:	4908      	ldr	r1, [pc, #32]	@ (8002c00 <HAL_ADC_ConfigChannel+0x4e4>)
 8002be0:	e6ff      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x2c6>
 8002be2:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8002be6:	e6ab      	b.n	8002940 <HAL_ADC_ConfigChannel+0x224>
 8002be8:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8002bec:	e688      	b.n	8002900 <HAL_ADC_ConfigChannel+0x1e4>
 8002bee:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <HAL_ADC_ConfigChannel+0x4e8>)
 8002bf0:	e6a6      	b.n	8002940 <HAL_ADC_ConfigChannel+0x224>
 8002bf2:	2502      	movs	r5, #2
 8002bf4:	e691      	b.n	800291a <HAL_ADC_ConfigChannel+0x1fe>
 8002bf6:	2502      	movs	r5, #2
 8002bf8:	e77e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x3dc>
 8002bfa:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8002bfe:	e76e      	b.n	8002ade <HAL_ADC_ConfigChannel+0x3c2>
 8002c00:	50000300 	.word	0x50000300
 8002c04:	fe500000 	.word	0xfe500000

08002c08 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c08:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	f012 0f04 	tst.w	r2, #4
{
 8002c10:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c16:	d101      	bne.n	8002c1c <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c18:	0716      	lsls	r6, r2, #28
 8002c1a:	d53c      	bpl.n	8002c96 <ADC_ConversionStop+0x8e>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	0195      	lsls	r5, r2, #6
 8002c20:	d504      	bpl.n	8002c2c <ADC_ConversionStop+0x24>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002c22:	8ba0      	ldrh	r0, [r4, #28]
 8002c24:	f240 1201 	movw	r2, #257	@ 0x101
 8002c28:	4290      	cmp	r0, r2
 8002c2a:	d045      	beq.n	8002cb8 <ADC_ConversionStop+0xb0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002c2c:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	d033      	beq.n	8002c9a <ADC_ConversionStop+0x92>
 8002c32:	0750      	lsls	r0, r2, #29
 8002c34:	d502      	bpl.n	8002c3c <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	0792      	lsls	r2, r2, #30
 8002c3a:	d559      	bpl.n	8002cf0 <ADC_ConversionStop+0xe8>
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002c3c:	2901      	cmp	r1, #1
 8002c3e:	d055      	beq.n	8002cec <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	0710      	lsls	r0, r2, #28
 8002c44:	d50a      	bpl.n	8002c5c <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	0792      	lsls	r2, r2, #30
 8002c4a:	d407      	bmi.n	8002c5c <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c52:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002c56:	f042 0220 	orr.w	r2, r2, #32
 8002c5a:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8002c5c:	2903      	cmp	r1, #3
 8002c5e:	d145      	bne.n	8002cec <ADC_ConversionStop+0xe4>
 8002c60:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8002c62:	f7ff fbeb 	bl	800243c <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c66:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002c68:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	421d      	tst	r5, r3
 8002c6e:	d012      	beq.n	8002c96 <ADC_ConversionStop+0x8e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c70:	f7ff fbe4 	bl	800243c <HAL_GetTick>
 8002c74:	1b80      	subs	r0, r0, r6
 8002c76:	2805      	cmp	r0, #5
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c78:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002c7a:	d9f6      	bls.n	8002c6a <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	422a      	tst	r2, r5
 8002c80:	d0f3      	beq.n	8002c6a <ADC_ConversionStop+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c82:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002c84:	f043 0310 	orr.w	r3, r3, #16
 8002c88:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6623      	str	r3, [r4, #96]	@ 0x60
          return HAL_ERROR;
 8002c92:	2001      	movs	r0, #1
}
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002c96:	2000      	movs	r0, #0
}
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c9a:	0716      	lsls	r6, r2, #28
 8002c9c:	d50a      	bpl.n	8002cb4 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	0795      	lsls	r5, r2, #30
 8002ca2:	d407      	bmi.n	8002cb4 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002caa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002cae:	f042 0220 	orr.w	r2, r2, #32
 8002cb2:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002cb4:	2508      	movs	r5, #8
 8002cb6:	e7d4      	b.n	8002c62 <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	0650      	lsls	r0, r2, #25
 8002cbc:	d406      	bmi.n	8002ccc <ADC_ConversionStop+0xc4>
 8002cbe:	4a11      	ldr	r2, [pc, #68]	@ (8002d04 <ADC_ConversionStop+0xfc>)
 8002cc0:	e001      	b.n	8002cc6 <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002cc2:	3a01      	subs	r2, #1
 8002cc4:	d0dd      	beq.n	8002c82 <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	0649      	lsls	r1, r1, #25
 8002cca:	d5fa      	bpl.n	8002cc2 <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002ccc:	2240      	movs	r2, #64	@ 0x40
 8002cce:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	0756      	lsls	r6, r2, #29
 8002cd4:	d50a      	bpl.n	8002cec <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	0795      	lsls	r5, r2, #30
 8002cda:	d407      	bmi.n	8002cec <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ce2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002ce6:	f042 0210 	orr.w	r2, r2, #16
 8002cea:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002cec:	2504      	movs	r5, #4
 8002cee:	e7b8      	b.n	8002c62 <ADC_ConversionStop+0x5a>
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cf6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002cfa:	f042 0210 	orr.w	r2, r2, #16
 8002cfe:	609a      	str	r2, [r3, #8]
}
 8002d00:	e79c      	b.n	8002c3c <ADC_ConversionStop+0x34>
 8002d02:	bf00      	nop
 8002d04:	a3400000 	.word	0xa3400000

08002d08 <ADC_Enable>:
{
 8002d08:	b570      	push	{r4, r5, r6, lr}
 8002d0a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002d0c:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d0e:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8002d10:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	07d2      	lsls	r2, r2, #31
 8002d16:	d434      	bmi.n	8002d82 <ADC_Enable+0x7a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d18:	6899      	ldr	r1, [r3, #8]
 8002d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd0 <ADC_Enable+0xc8>)
 8002d1c:	4211      	tst	r1, r2
 8002d1e:	4604      	mov	r4, r0
 8002d20:	d132      	bne.n	8002d88 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d28:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	d048      	beq.n	8002dca <ADC_Enable+0xc2>
 8002d38:	4826      	ldr	r0, [pc, #152]	@ (8002dd4 <ADC_Enable+0xcc>)
 8002d3a:	4a27      	ldr	r2, [pc, #156]	@ (8002dd8 <ADC_Enable+0xd0>)
 8002d3c:	4927      	ldr	r1, [pc, #156]	@ (8002ddc <ADC_Enable+0xd4>)
 8002d3e:	4283      	cmp	r3, r0
 8002d40:	bf08      	it	eq
 8002d42:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d44:	6893      	ldr	r3, [r2, #8]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	d429      	bmi.n	8002d9e <ADC_Enable+0x96>
    tickstart = HAL_GetTick();
 8002d4a:	f7ff fb77 	bl	800243c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8002d54:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d56:	d414      	bmi.n	8002d82 <ADC_Enable+0x7a>
  MODIFY_REG(ADCx->CR,
 8002d58:	4e21      	ldr	r6, [pc, #132]	@ (8002de0 <ADC_Enable+0xd8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	07d0      	lsls	r0, r2, #31
 8002d5e:	d404      	bmi.n	8002d6a <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	4032      	ands	r2, r6
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d6a:	f7ff fb67 	bl	800243c <HAL_GetTick>
 8002d6e:	1b43      	subs	r3, r0, r5
 8002d70:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d72:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d74:	d902      	bls.n	8002d7c <ADC_Enable+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	07d1      	lsls	r1, r2, #31
 8002d7a:	d505      	bpl.n	8002d88 <ADC_Enable+0x80>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	07d2      	lsls	r2, r2, #31
 8002d80:	d5eb      	bpl.n	8002d5a <ADC_Enable+0x52>
  return HAL_OK;
 8002d82:	2000      	movs	r0, #0
}
 8002d84:	b002      	add	sp, #8
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d88:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002d8a:	f043 0310 	orr.w	r3, r3, #16
 8002d8e:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d90:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 8002d92:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6623      	str	r3, [r4, #96]	@ 0x60
}
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <ADC_Enable+0xdc>)
 8002da0:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <ADC_Enable+0xe0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	3301      	adds	r3, #1
 8002dae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0c6      	beq.n	8002d4a <ADC_Enable+0x42>
        wait_loop_index--;
 8002dbc:	9b01      	ldr	r3, [sp, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002dc2:	9b01      	ldr	r3, [sp, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f9      	bne.n	8002dbc <ADC_Enable+0xb4>
 8002dc8:	e7bf      	b.n	8002d4a <ADC_Enable+0x42>
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dca:	4a04      	ldr	r2, [pc, #16]	@ (8002ddc <ADC_Enable+0xd4>)
 8002dcc:	e7ba      	b.n	8002d44 <ADC_Enable+0x3c>
 8002dce:	bf00      	nop
 8002dd0:	8000003f 	.word	0x8000003f
 8002dd4:	50000100 	.word	0x50000100
 8002dd8:	50000700 	.word	0x50000700
 8002ddc:	50000300 	.word	0x50000300
 8002de0:	7fffffc0 	.word	0x7fffffc0
 8002de4:	20000008 	.word	0x20000008
 8002de8:	053e2d63 	.word	0x053e2d63

08002dec <HAL_ADC_Start_DMA>:
{
 8002dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002df0:	6805      	ldr	r5, [r0, #0]
 8002df2:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
{
 8002df6:	4604      	mov	r4, r0
 8002df8:	460e      	mov	r6, r1
 8002dfa:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dfc:	d022      	beq.n	8002e44 <HAL_ADC_Start_DMA+0x58>
 8002dfe:	4a39      	ldr	r2, [pc, #228]	@ (8002ee4 <HAL_ADC_Start_DMA+0xf8>)
 8002e00:	4839      	ldr	r0, [pc, #228]	@ (8002ee8 <HAL_ADC_Start_DMA+0xfc>)
 8002e02:	4b3a      	ldr	r3, [pc, #232]	@ (8002eec <HAL_ADC_Start_DMA+0x100>)
 8002e04:	4295      	cmp	r5, r2
 8002e06:	bf08      	it	eq
 8002e08:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e0a:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e0c:	68ab      	ldr	r3, [r5, #8]
 8002e0e:	075b      	lsls	r3, r3, #29
 8002e10:	d415      	bmi.n	8002e3e <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 8002e12:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d011      	beq.n	8002e3e <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e1a:	4b35      	ldr	r3, [pc, #212]	@ (8002ef0 <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 8002e1c:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e1e:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e20:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 8002e24:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e28:	d00e      	beq.n	8002e48 <HAL_ADC_Start_DMA+0x5c>
 8002e2a:	f240 2321 	movw	r3, #545	@ 0x221
 8002e2e:	fa23 f308 	lsr.w	r3, r3, r8
 8002e32:	4003      	ands	r3, r0
 8002e34:	d108      	bne.n	8002e48 <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 8002e36:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8002e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8002e3e:	2002      	movs	r0, #2
}
 8002e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e44:	4829      	ldr	r0, [pc, #164]	@ (8002eec <HAL_ADC_Start_DMA+0x100>)
 8002e46:	e7e0      	b.n	8002e0a <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f7ff ff5d 	bl	8002d08 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d13f      	bne.n	8002ed2 <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 8002e52:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e54:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002e56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e62:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <HAL_ADC_Start_DMA+0xf8>)
 8002e66:	4299      	cmp	r1, r3
 8002e68:	d038      	beq.n	8002edc <HAL_ADC_Start_DMA+0xf0>
 8002e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e6e:	4299      	cmp	r1, r3
 8002e70:	d034      	beq.n	8002edc <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e72:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002e74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002e78:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e7a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e7c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002e7e:	4d1d      	ldr	r5, [pc, #116]	@ (8002ef4 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e80:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e84:	bf1c      	itt	ne
 8002e86:	6e23      	ldrne	r3, [r4, #96]	@ 0x60
 8002e88:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8002e8c:	6623      	str	r3, [r4, #96]	@ 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e8e:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e90:	4d19      	ldr	r5, [pc, #100]	@ (8002ef8 <HAL_ADC_Start_DMA+0x10c>)
 8002e92:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e94:	4d19      	ldr	r5, [pc, #100]	@ (8002efc <HAL_ADC_Start_DMA+0x110>)
 8002e96:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e98:	251c      	movs	r5, #28
 8002e9a:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ea2:	684d      	ldr	r5, [r1, #4]
 8002ea4:	f045 0510 	orr.w	r5, r5, #16
 8002ea8:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002eaa:	68cd      	ldr	r5, [r1, #12]
 8002eac:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002eb4:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002eb6:	3140      	adds	r1, #64	@ 0x40
 8002eb8:	f000 feac 	bl	8003c14 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ebc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002ebe:	6893      	ldr	r3, [r2, #8]
 8002ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6093      	str	r3, [r2, #8]
}
 8002ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8002ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002edc:	f1b8 0f00 	cmp.w	r8, #0
 8002ee0:	d1cb      	bne.n	8002e7a <HAL_ADC_Start_DMA+0x8e>
 8002ee2:	e7c6      	b.n	8002e72 <HAL_ADC_Start_DMA+0x86>
 8002ee4:	50000100 	.word	0x50000100
 8002ee8:	50000700 	.word	0x50000700
 8002eec:	50000300 	.word	0x50000300
 8002ef0:	50000600 	.word	0x50000600
 8002ef4:	08002695 	.word	0x08002695
 8002ef8:	08002685 	.word	0x08002685
 8002efc:	08002701 	.word	0x08002701

08002f00 <ADC_Disable>:
{
 8002f00:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f02:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	0795      	lsls	r5, r2, #30
 8002f08:	d502      	bpl.n	8002f10 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f0a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8002f0c:	2000      	movs	r0, #0
}
 8002f0e:	bd38      	pop	{r3, r4, r5, pc}
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	07d4      	lsls	r4, r2, #31
 8002f14:	d5fa      	bpl.n	8002f0c <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	f002 020d 	and.w	r2, r2, #13
 8002f1c:	2a01      	cmp	r2, #1
 8002f1e:	4604      	mov	r4, r0
 8002f20:	d009      	beq.n	8002f36 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f22:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f24:	f043 0310 	orr.w	r3, r3, #16
 8002f28:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 8002f32:	2001      	movs	r0, #1
}
 8002f34:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002f3c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f40:	2103      	movs	r1, #3
 8002f42:	f042 0202 	orr.w	r2, r2, #2
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002f4a:	f7ff fa77 	bl	800243c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8002f54:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f56:	d403      	bmi.n	8002f60 <ADC_Disable+0x60>
 8002f58:	e7d8      	b.n	8002f0c <ADC_Disable+0xc>
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	07db      	lsls	r3, r3, #31
 8002f5e:	d5d5      	bpl.n	8002f0c <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f60:	f7ff fa6c 	bl	800243c <HAL_GetTick>
 8002f64:	1b40      	subs	r0, r0, r5
 8002f66:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f68:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f6a:	d9f6      	bls.n	8002f5a <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	07d2      	lsls	r2, r2, #31
 8002f70:	d5f3      	bpl.n	8002f5a <ADC_Disable+0x5a>
 8002f72:	e7d6      	b.n	8002f22 <ADC_Disable+0x22>

08002f74 <HAL_ADC_Stop_DMA>:
{
 8002f74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8002f76:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d028      	beq.n	8002fd0 <HAL_ADC_Stop_DMA+0x5c>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f84:	2103      	movs	r1, #3
 8002f86:	4604      	mov	r4, r0
 8002f88:	f7ff fe3e 	bl	8002c08 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	b9d0      	cbnz	r0, 8002fc6 <HAL_ADC_Stop_DMA+0x52>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f90:	6823      	ldr	r3, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002f92:	6d60      	ldr	r0, [r4, #84]	@ 0x54
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	60da      	str	r2, [r3, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002f9c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002fa0:	2a02      	cmp	r2, #2
 8002fa2:	d018      	beq.n	8002fd6 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	f022 0210 	bic.w	r2, r2, #16
 8002faa:	605a      	str	r2, [r3, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8002fac:	4620      	mov	r0, r4
 8002fae:	f7ff ffa7 	bl	8002f00 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	b938      	cbnz	r0, 8002fc6 <HAL_ADC_Stop_DMA+0x52>
      ADC_STATE_CLR_SET(hadc->State,
 8002fb6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002fb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	65e3      	str	r3, [r4, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8002fcc:	4628      	mov	r0, r5
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hadc);
 8002fd0:	2502      	movs	r5, #2
}
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002fd6:	f000 fe75 	bl	8003cc4 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002fda:	4605      	mov	r5, r0
 8002fdc:	b160      	cbz	r0, 8002ff8 <HAL_ADC_Stop_DMA+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fde:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002fe0:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe6:	65e3      	str	r3, [r4, #92]	@ 0x5c
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002fe8:	6853      	ldr	r3, [r2, #4]
 8002fea:	f023 0310 	bic.w	r3, r3, #16
      (void)ADC_Disable(hadc);
 8002fee:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002ff0:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 8002ff2:	f7ff ff85 	bl	8002f00 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002ff6:	e7e6      	b.n	8002fc6 <HAL_ADC_Stop_DMA+0x52>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002ff8:	6822      	ldr	r2, [r4, #0]
 8002ffa:	6853      	ldr	r3, [r2, #4]
 8002ffc:	f023 0310 	bic.w	r3, r3, #16
 8003000:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8003002:	e7d3      	b.n	8002fac <HAL_ADC_Stop_DMA+0x38>

08003004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003004:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003006:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800300a:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800300c:	2a01      	cmp	r2, #1
{
 800300e:	b09d      	sub	sp, #116	@ 0x74
  __HAL_LOCK(hadc);
 8003010:	d057      	beq.n	80030c2 <HAL_ADCEx_MultiModeConfigChannel+0xbe>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003012:	6802      	ldr	r2, [r0, #0]
 8003014:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003016:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8003018:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800301a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800301e:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8003020:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003024:	9419      	str	r4, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003026:	d00b      	beq.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8003028:	4d4a      	ldr	r5, [pc, #296]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800302a:	42aa      	cmp	r2, r5
 800302c:	d047      	beq.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0xba>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003030:	f883 4058 	strb.w	r4, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003034:	f042 0220 	orr.w	r2, r2, #32
 8003038:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800303a:	b01d      	add	sp, #116	@ 0x74
 800303c:	bc70      	pop	{r4, r5, r6}
 800303e:	4770      	bx	lr
 8003040:	4845      	ldr	r0, [pc, #276]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003042:	6880      	ldr	r0, [r0, #8]
 8003044:	0740      	lsls	r0, r0, #29
 8003046:	d50b      	bpl.n	8003060 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8003048:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800304c:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8003050:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003052:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 800305a:	b01d      	add	sp, #116	@ 0x74
 800305c:	bc70      	pop	{r4, r5, r6}
 800305e:	4770      	bx	lr
 8003060:	6890      	ldr	r0, [r2, #8]
 8003062:	0740      	lsls	r0, r0, #29
 8003064:	d4f1      	bmi.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003066:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800306a:	d02e      	beq.n	80030ca <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 800306c:	483a      	ldr	r0, [pc, #232]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800306e:	4282      	cmp	r2, r0
 8003070:	d02b      	beq.n	80030ca <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003072:	2e00      	cmp	r6, #0
 8003074:	d05a      	beq.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003076:	4839      	ldr	r0, [pc, #228]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003078:	684c      	ldr	r4, [r1, #4]
 800307a:	6882      	ldr	r2, [r0, #8]
 800307c:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003080:	4322      	orrs	r2, r4
 8003082:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 8003086:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800308a:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800308c:	4a31      	ldr	r2, [pc, #196]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800308e:	4c34      	ldr	r4, [pc, #208]	@ (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003090:	6895      	ldr	r5, [r2, #8]
 8003092:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003096:	6892      	ldr	r2, [r2, #8]
 8003098:	68a4      	ldr	r4, [r4, #8]
 800309a:	07e4      	lsls	r4, r4, #31
 800309c:	d40d      	bmi.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800309e:	432a      	orrs	r2, r5
 80030a0:	43d2      	mvns	r2, r2
 80030a2:	f002 0201 	and.w	r2, r2, #1
 80030a6:	b142      	cbz	r2, 80030ba <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        MODIFY_REG(tmpADC_Common->CCR,
 80030a8:	6884      	ldr	r4, [r0, #8]
 80030aa:	688a      	ldr	r2, [r1, #8]
 80030ac:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 80030b0:	4332      	orrs	r2, r6
 80030b2:	f021 010f 	bic.w	r1, r1, #15
 80030b6:	430a      	orrs	r2, r1
 80030b8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ba:	2000      	movs	r0, #0
 80030bc:	e7ca      	b.n	8003054 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 80030be:	4829      	ldr	r0, [pc, #164]	@ (8003164 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 80030c0:	e7bf      	b.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 80030c2:	2002      	movs	r0, #2
}
 80030c4:	b01d      	add	sp, #116	@ 0x74
 80030c6:	bc70      	pop	{r4, r5, r6}
 80030c8:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030ca:	b1b6      	cbz	r6, 80030fa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030cc:	4826      	ldr	r0, [pc, #152]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80030ce:	684c      	ldr	r4, [r1, #4]
 80030d0:	6882      	ldr	r2, [r0, #8]
 80030d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030d6:	4322      	orrs	r2, r4
 80030d8:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 80030dc:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80030e0:	6082      	str	r2, [r0, #8]
 80030e2:	481d      	ldr	r0, [pc, #116]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80030e8:	6892      	ldr	r2, [r2, #8]
 80030ea:	6880      	ldr	r0, [r0, #8]
 80030ec:	07c0      	lsls	r0, r0, #31
 80030ee:	d4e4      	bmi.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030f0:	43d2      	mvns	r2, r2
 80030f2:	481d      	ldr	r0, [pc, #116]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80030f4:	f002 0201 	and.w	r2, r2, #1
 80030f8:	e7d5      	b.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030fa:	491b      	ldr	r1, [pc, #108]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80030fc:	688a      	ldr	r2, [r1, #8]
 80030fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003102:	608a      	str	r2, [r1, #8]
 8003104:	4914      	ldr	r1, [pc, #80]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003106:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800310a:	6892      	ldr	r2, [r2, #8]
 800310c:	6889      	ldr	r1, [r1, #8]
 800310e:	07cd      	lsls	r5, r1, #31
 8003110:	d4d3      	bmi.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003112:	43d2      	mvns	r2, r2
 8003114:	4914      	ldr	r1, [pc, #80]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8003116:	f002 0201 	and.w	r2, r2, #1
 800311a:	2a00      	cmp	r2, #0
 800311c:	d0cd      	beq.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800311e:	688a      	ldr	r2, [r1, #8]
 8003120:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003124:	f022 020f 	bic.w	r2, r2, #15
 8003128:	608a      	str	r2, [r1, #8]
 800312a:	e7c6      	b.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800312c:	490b      	ldr	r1, [pc, #44]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800312e:	4c09      	ldr	r4, [pc, #36]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003130:	688a      	ldr	r2, [r1, #8]
 8003132:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003136:	608a      	str	r2, [r1, #8]
 8003138:	68a4      	ldr	r4, [r4, #8]
 800313a:	f8d0 2408 	ldr.w	r2, [r0, #1032]	@ 0x408
 800313e:	f500 60a0 	add.w	r0, r0, #1280	@ 0x500
 8003142:	6880      	ldr	r0, [r0, #8]
 8003144:	07c5      	lsls	r5, r0, #31
 8003146:	d4b8      	bmi.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003148:	4322      	orrs	r2, r4
 800314a:	43d2      	mvns	r2, r2
 800314c:	f002 0201 	and.w	r2, r2, #1
 8003150:	e7e3      	b.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003152:	bf00      	nop
 8003154:	50000400 	.word	0x50000400
 8003158:	50000100 	.word	0x50000100
 800315c:	50000700 	.word	0x50000700
 8003160:	50000600 	.word	0x50000600
 8003164:	50000500 	.word	0x50000500
 8003168:	50000300 	.word	0x50000300

0800316c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	b082      	sub	sp, #8
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003170:	2300      	movs	r3, #0
 8003172:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003174:	2800      	cmp	r0, #0
 8003176:	d047      	beq.n	8003208 <HAL_COMP_Init+0x9c>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003178:	6802      	ldr	r2, [r0, #0]
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	4604      	mov	r4, r0
 8003180:	db42      	blt.n	8003208 <HAL_COMP_Init+0x9c>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003182:	7f43      	ldrb	r3, [r0, #29]
 8003184:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8003188:	2b00      	cmp	r3, #0
 800318a:	d07b      	beq.n	8003284 <HAL_COMP_Init+0x118>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 800318c:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 8003190:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003192:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 8003194:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 8003196:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8003198:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800319a:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 800319c:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 800319e:	6921      	ldr	r1, [r4, #16]
 80031a0:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 80031a2:	4992      	ldr	r1, [pc, #584]	@ (80033ec <HAL_COMP_Init+0x280>)
 80031a4:	4001      	ands	r1, r0
 80031a6:	430b      	orrs	r3, r1
 80031a8:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80031aa:	6813      	ldr	r3, [r2, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	d501      	bpl.n	80031b4 <HAL_COMP_Init+0x48>
 80031b0:	022e      	lsls	r6, r5, #8
 80031b2:	d52c      	bpl.n	800320e <HAL_COMP_Init+0xa2>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80031b4:	498e      	ldr	r1, [pc, #568]	@ (80033f0 <HAL_COMP_Init+0x284>)

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80031b6:	69a3      	ldr	r3, [r4, #24]
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80031b8:	428a      	cmp	r2, r1
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80031ba:	f003 0003 	and.w	r0, r3, #3
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80031be:	d067      	beq.n	8003290 <HAL_COMP_Init+0x124>
 80031c0:	498c      	ldr	r1, [pc, #560]	@ (80033f4 <HAL_COMP_Init+0x288>)
 80031c2:	428a      	cmp	r2, r1
 80031c4:	d076      	beq.n	80032b4 <HAL_COMP_Init+0x148>
 80031c6:	3104      	adds	r1, #4
 80031c8:	428a      	cmp	r2, r1
 80031ca:	d036      	beq.n	800323a <HAL_COMP_Init+0xce>
 80031cc:	3104      	adds	r1, #4
 80031ce:	428a      	cmp	r2, r1
 80031d0:	f000 80e1 	beq.w	8003396 <HAL_COMP_Init+0x22a>
 80031d4:	4988      	ldr	r1, [pc, #544]	@ (80033f8 <HAL_COMP_Init+0x28c>)
 80031d6:	428a      	cmp	r2, r1
 80031d8:	f000 80ff 	beq.w	80033da <HAL_COMP_Init+0x26e>
 80031dc:	3104      	adds	r1, #4
 80031de:	428a      	cmp	r2, r1
 80031e0:	f000 8098 	beq.w	8003314 <HAL_COMP_Init+0x1a8>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80031e4:	2800      	cmp	r0, #0
 80031e6:	f040 8111 	bne.w	800340c <HAL_COMP_Init+0x2a0>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80031ea:	4b84      	ldr	r3, [pc, #528]	@ (80033fc <HAL_COMP_Init+0x290>)
 80031ec:	429a      	cmp	r2, r3
 80031ee:	f040 8167 	bne.w	80034c0 <HAL_COMP_Init+0x354>
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80031f2:	4983      	ldr	r1, [pc, #524]	@ (8003400 <HAL_COMP_Init+0x294>)
 80031f4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80031f6:	f06f 0302 	mvn.w	r3, #2
 80031fa:	401a      	ands	r2, r3
 80031fc:	624a      	str	r2, [r1, #36]	@ 0x24
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80031fe:	4a80      	ldr	r2, [pc, #512]	@ (8003400 <HAL_COMP_Init+0x294>)
 8003200:	6a11      	ldr	r1, [r2, #32]
 8003202:	400b      	ands	r3, r1
 8003204:	6213      	str	r3, [r2, #32]
}
 8003206:	e065      	b.n	80032d4 <HAL_COMP_Init+0x168>
    status = HAL_ERROR;
 8003208:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800320a:	b002      	add	sp, #8
 800320c:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800320e:	4b7d      	ldr	r3, [pc, #500]	@ (8003404 <HAL_COMP_Init+0x298>)
 8003210:	497d      	ldr	r1, [pc, #500]	@ (8003408 <HAL_COMP_Init+0x29c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	fba1 1303 	umull	r1, r3, r1, r3
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	3301      	adds	r3, #1
 800321e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003226:	9b01      	ldr	r3, [sp, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0c3      	beq.n	80031b4 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 800322c:	9b01      	ldr	r3, [sp, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003232:	9b01      	ldr	r3, [sp, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f9      	bne.n	800322c <HAL_COMP_Init+0xc0>
 8003238:	e7bc      	b.n	80031b4 <HAL_COMP_Init+0x48>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800323a:	2800      	cmp	r0, #0
 800323c:	d062      	beq.n	8003304 <HAL_COMP_Init+0x198>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800323e:	06de      	lsls	r6, r3, #27
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003240:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003244:	d429      	bmi.n	800329a <HAL_COMP_Init+0x12e>
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003246:	ea6f 0c01 	mvn.w	ip, r1
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800324a:	f003 0620 	and.w	r6, r3, #32
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800324e:	486c      	ldr	r0, [pc, #432]	@ (8003400 <HAL_COMP_Init+0x294>)
 8003250:	6885      	ldr	r5, [r0, #8]
 8003252:	ea05 050c 	and.w	r5, r5, ip
 8003256:	6085      	str	r5, [r0, #8]
 8003258:	2e00      	cmp	r6, #0
 800325a:	d056      	beq.n	800330a <HAL_COMP_Init+0x19e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800325c:	68c5      	ldr	r5, [r0, #12]
 800325e:	430d      	orrs	r5, r1
 8003260:	60c5      	str	r5, [r0, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003262:	4867      	ldr	r0, [pc, #412]	@ (8003400 <HAL_COMP_Init+0x294>)
 8003264:	6141      	str	r1, [r0, #20]
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003266:	0798      	lsls	r0, r3, #30
 8003268:	d53b      	bpl.n	80032e2 <HAL_COMP_Init+0x176>
  SET_BIT(EXTI->EMR1, ExtiLine);
 800326a:	4865      	ldr	r0, [pc, #404]	@ (8003400 <HAL_COMP_Init+0x294>)
 800326c:	6842      	ldr	r2, [r0, #4]
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800326e:	07db      	lsls	r3, r3, #31
 8003270:	ea42 0201 	orr.w	r2, r2, r1
 8003274:	6042      	str	r2, [r0, #4]
 8003276:	d43d      	bmi.n	80032f4 <HAL_COMP_Init+0x188>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003278:	43c8      	mvns	r0, r1
 800327a:	4a61      	ldr	r2, [pc, #388]	@ (8003400 <HAL_COMP_Init+0x294>)
 800327c:	6813      	ldr	r3, [r2, #0]
 800327e:	4003      	ands	r3, r0
 8003280:	6013      	str	r3, [r2, #0]
}
 8003282:	e027      	b.n	80032d4 <HAL_COMP_Init+0x168>
      hcomp->Lock = HAL_UNLOCKED;
 8003284:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8003286:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8003288:	f7fe fb10 	bl	80018ac <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	e77d      	b.n	800318c <HAL_COMP_Init+0x20>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003290:	b1b0      	cbz	r0, 80032c0 <HAL_COMP_Init+0x154>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003292:	06dd      	lsls	r5, r3, #27
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003294:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003298:	d5d5      	bpl.n	8003246 <HAL_COMP_Init+0xda>
 800329a:	f003 0620 	and.w	r6, r3, #32
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800329e:	4858      	ldr	r0, [pc, #352]	@ (8003400 <HAL_COMP_Init+0x294>)
 80032a0:	6885      	ldr	r5, [r0, #8]
 80032a2:	430d      	orrs	r5, r1
 80032a4:	6085      	str	r5, [r0, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80032a6:	68c5      	ldr	r5, [r0, #12]
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80032a8:	2e00      	cmp	r6, #0
 80032aa:	d1d8      	bne.n	800325e <HAL_COMP_Init+0xf2>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80032ac:	ea25 0501 	bic.w	r5, r5, r1
 80032b0:	60c5      	str	r5, [r0, #12]
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80032b2:	e7d6      	b.n	8003262 <HAL_COMP_Init+0xf6>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80032b4:	b318      	cbz	r0, 80032fe <HAL_COMP_Init+0x192>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80032b6:	06dd      	lsls	r5, r3, #27
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80032b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80032bc:	d4ed      	bmi.n	800329a <HAL_COMP_Init+0x12e>
 80032be:	e7c2      	b.n	8003246 <HAL_COMP_Init+0xda>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80032c0:	f46f 1300 	mvn.w	r3, #2097152	@ 0x200000
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80032c4:	494e      	ldr	r1, [pc, #312]	@ (8003400 <HAL_COMP_Init+0x294>)
 80032c6:	684a      	ldr	r2, [r1, #4]
 80032c8:	401a      	ands	r2, r3
 80032ca:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80032cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003400 <HAL_COMP_Init+0x294>)
 80032ce:	6811      	ldr	r1, [r2, #0]
 80032d0:	400b      	ands	r3, r1
 80032d2:	6013      	str	r3, [r2, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80032d4:	7f63      	ldrb	r3, [r4, #29]
 80032d6:	b90b      	cbnz	r3, 80032dc <HAL_COMP_Init+0x170>
      hcomp->State = HAL_COMP_STATE_READY;
 80032d8:	2301      	movs	r3, #1
 80032da:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2000      	movs	r0, #0
}
 80032de:	b002      	add	sp, #8
 80032e0:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80032e2:	4e47      	ldr	r6, [pc, #284]	@ (8003400 <HAL_COMP_Init+0x294>)
 80032e4:	6875      	ldr	r5, [r6, #4]
 80032e6:	ea25 0501 	bic.w	r5, r5, r1
 80032ea:	6075      	str	r5, [r6, #4]
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032ec:	07dd      	lsls	r5, r3, #31
 80032ee:	ea6f 0001 	mvn.w	r0, r1
 80032f2:	d54b      	bpl.n	800338c <HAL_COMP_Init+0x220>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80032f4:	4a42      	ldr	r2, [pc, #264]	@ (8003400 <HAL_COMP_Init+0x294>)
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	e7ea      	b.n	80032d4 <HAL_COMP_Init+0x168>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80032fe:	f46f 0380 	mvn.w	r3, #4194304	@ 0x400000
 8003302:	e7df      	b.n	80032c4 <HAL_COMP_Init+0x158>
 8003304:	f06f 5300 	mvn.w	r3, #536870912	@ 0x20000000
 8003308:	e7dc      	b.n	80032c4 <HAL_COMP_Init+0x158>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800330a:	68c5      	ldr	r5, [r0, #12]
 800330c:	ea05 050c 	and.w	r5, r5, ip
 8003310:	60c5      	str	r5, [r0, #12]
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003312:	e7a6      	b.n	8003262 <HAL_COMP_Init+0xf6>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003314:	b1f8      	cbz	r0, 8003356 <HAL_COMP_Init+0x1ea>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003316:	06da      	lsls	r2, r3, #27
 8003318:	d451      	bmi.n	80033be <HAL_COMP_Init+0x252>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800331a:	4939      	ldr	r1, [pc, #228]	@ (8003400 <HAL_COMP_Init+0x294>)
 800331c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	628a      	str	r2, [r1, #40]	@ 0x28
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003324:	069a      	lsls	r2, r3, #26
 8003326:	d552      	bpl.n	80033ce <HAL_COMP_Init+0x262>
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003328:	4935      	ldr	r1, [pc, #212]	@ (8003400 <HAL_COMP_Init+0x294>)
 800332a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	62ca      	str	r2, [r1, #44]	@ 0x2c
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003332:	4a33      	ldr	r2, [pc, #204]	@ (8003400 <HAL_COMP_Init+0x294>)
 8003334:	2101      	movs	r1, #1
 8003336:	6351      	str	r1, [r2, #52]	@ 0x34
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003338:	079e      	lsls	r6, r3, #30
  SET_BIT(EXTI->EMR2, ExtiLine);
 800333a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800333c:	d434      	bmi.n	80033a8 <HAL_COMP_Init+0x23c>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800333e:	f021 0101 	bic.w	r1, r1, #1
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003342:	07dd      	lsls	r5, r3, #31
 8003344:	6251      	str	r1, [r2, #36]	@ 0x24
 8003346:	d434      	bmi.n	80033b2 <HAL_COMP_Init+0x246>
 8003348:	f06f 0001 	mvn.w	r0, #1
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800334c:	4a2c      	ldr	r2, [pc, #176]	@ (8003400 <HAL_COMP_Init+0x294>)
 800334e:	6a13      	ldr	r3, [r2, #32]
 8003350:	4003      	ands	r3, r0
 8003352:	6213      	str	r3, [r2, #32]
}
 8003354:	e7be      	b.n	80032d4 <HAL_COMP_Init+0x168>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003356:	492a      	ldr	r1, [pc, #168]	@ (8003400 <HAL_COMP_Init+0x294>)
 8003358:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800335a:	f06f 0301 	mvn.w	r3, #1
 800335e:	401a      	ands	r2, r3
 8003360:	624a      	str	r2, [r1, #36]	@ 0x24
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003362:	e74c      	b.n	80031fe <HAL_COMP_Init+0x92>
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003364:	4926      	ldr	r1, [pc, #152]	@ (8003400 <HAL_COMP_Init+0x294>)
 8003366:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 8003368:	f020 0002 	bic.w	r0, r0, #2
 800336c:	62c8      	str	r0, [r1, #44]	@ 0x2c
  WRITE_REG(EXTI->PR2, ExtiLine);
 800336e:	2002      	movs	r0, #2
 8003370:	6348      	str	r0, [r1, #52]	@ 0x34
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003372:	0799      	lsls	r1, r3, #30
 8003374:	f100 8088 	bmi.w	8003488 <HAL_COMP_Init+0x31c>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003378:	4821      	ldr	r0, [pc, #132]	@ (8003400 <HAL_COMP_Init+0x294>)
 800337a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800337c:	07de      	lsls	r6, r3, #31
 800337e:	f021 0102 	bic.w	r1, r1, #2
 8003382:	6241      	str	r1, [r0, #36]	@ 0x24
 8003384:	f100 808a 	bmi.w	800349c <HAL_COMP_Init+0x330>
 8003388:	f06f 0002 	mvn.w	r0, #2
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800338c:	4b1b      	ldr	r3, [pc, #108]	@ (80033fc <HAL_COMP_Init+0x290>)
 800338e:	429a      	cmp	r2, r3
 8003390:	f47f af73 	bne.w	800327a <HAL_COMP_Init+0x10e>
 8003394:	e7da      	b.n	800334c <HAL_COMP_Init+0x1e0>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003396:	2800      	cmp	r0, #0
 8003398:	f000 8085 	beq.w	80034a6 <HAL_COMP_Init+0x33a>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800339c:	06d8      	lsls	r0, r3, #27
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800339e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80033a2:	f53f af7a 	bmi.w	800329a <HAL_COMP_Init+0x12e>
 80033a6:	e74e      	b.n	8003246 <HAL_COMP_Init+0xda>
  SET_BIT(EXTI->EMR2, ExtiLine);
 80033a8:	f041 0101 	orr.w	r1, r1, #1
 80033ac:	6251      	str	r1, [r2, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80033ae:	07da      	lsls	r2, r3, #31
 80033b0:	d5ca      	bpl.n	8003348 <HAL_COMP_Init+0x1dc>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80033b2:	2101      	movs	r1, #1
  SET_BIT(EXTI->IMR2, ExtiLine);
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <HAL_COMP_Init+0x294>)
 80033b6:	6a13      	ldr	r3, [r2, #32]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6213      	str	r3, [r2, #32]
}
 80033bc:	e78a      	b.n	80032d4 <HAL_COMP_Init+0x168>
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80033be:	f8d1 2214 	ldr.w	r2, [r1, #532]	@ 0x214
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80033c2:	069e      	lsls	r6, r3, #26
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	f8c1 2214 	str.w	r2, [r1, #532]	@ 0x214
 80033cc:	d4ac      	bmi.n	8003328 <HAL_COMP_Init+0x1bc>
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80033ce:	490c      	ldr	r1, [pc, #48]	@ (8003400 <HAL_COMP_Init+0x294>)
 80033d0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	62ca      	str	r2, [r1, #44]	@ 0x2c
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80033d8:	e7ab      	b.n	8003332 <HAL_COMP_Init+0x1c6>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80033da:	2800      	cmp	r0, #0
 80033dc:	d066      	beq.n	80034ac <HAL_COMP_Init+0x340>
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80033de:	06d8      	lsls	r0, r3, #27
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80033e0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80033e4:	f53f af59 	bmi.w	800329a <HAL_COMP_Init+0x12e>
 80033e8:	e72d      	b.n	8003246 <HAL_COMP_Init+0xda>
 80033ea:	bf00      	nop
 80033ec:	ff007e0f 	.word	0xff007e0f
 80033f0:	40010200 	.word	0x40010200
 80033f4:	40010204 	.word	0x40010204
 80033f8:	40010210 	.word	0x40010210
 80033fc:	40010218 	.word	0x40010218
 8003400:	40010400 	.word	0x40010400
 8003404:	20000008 	.word	0x20000008
 8003408:	053e2d63 	.word	0x053e2d63
 800340c:	06dd      	lsls	r5, r3, #27
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800340e:	4930      	ldr	r1, [pc, #192]	@ (80034d0 <HAL_COMP_Init+0x364>)
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003410:	f003 0620 	and.w	r6, r3, #32
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003414:	d51d      	bpl.n	8003452 <HAL_COMP_Init+0x2e6>
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003416:	428a      	cmp	r2, r1
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003418:	bf18      	it	ne
 800341a:	2102      	movne	r1, #2
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800341c:	f47f af3f 	bne.w	800329e <HAL_COMP_Init+0x132>
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003420:	482c      	ldr	r0, [pc, #176]	@ (80034d4 <HAL_COMP_Init+0x368>)
 8003422:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003424:	f041 0102 	orr.w	r1, r1, #2
 8003428:	6281      	str	r1, [r0, #40]	@ 0x28
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800342a:	2e00      	cmp	r6, #0
 800342c:	d09a      	beq.n	8003364 <HAL_COMP_Init+0x1f8>
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800342e:	4a29      	ldr	r2, [pc, #164]	@ (80034d4 <HAL_COMP_Init+0x368>)
 8003430:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003432:	2502      	movs	r5, #2
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003434:	f003 0001 	and.w	r0, r3, #1
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003438:	4329      	orrs	r1, r5
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800343a:	079b      	lsls	r3, r3, #30
 800343c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  WRITE_REG(EXTI->PR2, ExtiLine);
 800343e:	6355      	str	r5, [r2, #52]	@ 0x34
 8003440:	d537      	bpl.n	80034b2 <HAL_COMP_Init+0x346>
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003442:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	6253      	str	r3, [r2, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800344a:	b9d8      	cbnz	r0, 8003484 <HAL_COMP_Init+0x318>
 800344c:	f06f 0002 	mvn.w	r0, #2
 8003450:	e77c      	b.n	800334c <HAL_COMP_Init+0x1e0>
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003452:	428a      	cmp	r2, r1
 8003454:	d137      	bne.n	80034c6 <HAL_COMP_Init+0x35a>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003456:	481f      	ldr	r0, [pc, #124]	@ (80034d4 <HAL_COMP_Init+0x368>)
 8003458:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800345a:	f021 0102 	bic.w	r1, r1, #2
 800345e:	6281      	str	r1, [r0, #40]	@ 0x28
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003460:	2e00      	cmp	r6, #0
 8003462:	f43f af7f 	beq.w	8003364 <HAL_COMP_Init+0x1f8>
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003466:	4601      	mov	r1, r0
 8003468:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800346a:	f040 0002 	orr.w	r0, r0, #2
 800346e:	62c8      	str	r0, [r1, #44]	@ 0x2c
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003470:	2002      	movs	r0, #2
 8003472:	6348      	str	r0, [r1, #52]	@ 0x34
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003474:	0798      	lsls	r0, r3, #30
 8003476:	d407      	bmi.n	8003488 <HAL_COMP_Init+0x31c>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003478:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800347a:	07d8      	lsls	r0, r3, #31
 800347c:	f022 0202 	bic.w	r2, r2, #2
 8003480:	624a      	str	r2, [r1, #36]	@ 0x24
 8003482:	d5e3      	bpl.n	800344c <HAL_COMP_Init+0x2e0>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003484:	2102      	movs	r1, #2
 8003486:	e795      	b.n	80033b4 <HAL_COMP_Init+0x248>
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003488:	4812      	ldr	r0, [pc, #72]	@ (80034d4 <HAL_COMP_Init+0x368>)
 800348a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	f041 0102 	orr.w	r1, r1, #2
 8003494:	6241      	str	r1, [r0, #36]	@ 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	f43f af76 	beq.w	8003388 <HAL_COMP_Init+0x21c>
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800349c:	4b0c      	ldr	r3, [pc, #48]	@ (80034d0 <HAL_COMP_Init+0x364>)
 800349e:	429a      	cmp	r2, r3
 80034a0:	d0f0      	beq.n	8003484 <HAL_COMP_Init+0x318>
 80034a2:	2102      	movs	r1, #2
 80034a4:	e726      	b.n	80032f4 <HAL_COMP_Init+0x188>
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80034a6:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80034aa:	e70b      	b.n	80032c4 <HAL_COMP_Init+0x158>
 80034ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80034b0:	e708      	b.n	80032c4 <HAL_COMP_Init+0x158>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80034b2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80034b4:	f023 0302 	bic.w	r3, r3, #2
 80034b8:	6253      	str	r3, [r2, #36]	@ 0x24
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d1e2      	bne.n	8003484 <HAL_COMP_Init+0x318>
 80034be:	e7c5      	b.n	800344c <HAL_COMP_Init+0x2e0>
 80034c0:	f06f 0302 	mvn.w	r3, #2
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80034c4:	e6fe      	b.n	80032c4 <HAL_COMP_Init+0x158>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80034c6:	f06f 0c02 	mvn.w	ip, #2
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80034ca:	2102      	movs	r1, #2
 80034cc:	e6bf      	b.n	800324e <HAL_COMP_Init+0xe2>
 80034ce:	bf00      	nop
 80034d0:	40010218 	.word	0x40010218
 80034d4:	40010400 	.word	0x40010400

080034d8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80034d8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80034da:	2300      	movs	r3, #0
 80034dc:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80034de:	b130      	cbz	r0, 80034ee <HAL_COMP_Start+0x16>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80034e0:	6803      	ldr	r3, [r0, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2a00      	cmp	r2, #0
 80034e6:	db02      	blt.n	80034ee <HAL_COMP_Start+0x16>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80034e8:	7f42      	ldrb	r2, [r0, #29]
 80034ea:	2a01      	cmp	r2, #1
 80034ec:	d002      	beq.n	80034f4 <HAL_COMP_Start+0x1c>
    status = HAL_ERROR;
 80034ee:	2001      	movs	r0, #1
      status = HAL_ERROR;
    }
  }

  return status;
}
 80034f0:	b002      	add	sp, #8
 80034f2:	4770      	bx	lr
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80034f4:	681a      	ldr	r2, [r3, #0]
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80034f6:	490c      	ldr	r1, [pc, #48]	@ (8003528 <HAL_COMP_Start+0x50>)
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 80034fe:	680b      	ldr	r3, [r1, #0]
 8003500:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <HAL_COMP_Start+0x54>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0cdb      	lsrs	r3, r3, #19
 8003508:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      hcomp->State = HAL_COMP_STATE_BUSY;
 800350c:	2102      	movs	r1, #2
 800350e:	7741      	strb	r1, [r0, #29]
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8003510:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003512:	9b01      	ldr	r3, [sp, #4]
 8003514:	b12b      	cbz	r3, 8003522 <HAL_COMP_Start+0x4a>
        wait_loop_index--;
 8003516:	9b01      	ldr	r3, [sp, #4]
 8003518:	3b01      	subs	r3, #1
 800351a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800351c:	9b01      	ldr	r3, [sp, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f9      	bne.n	8003516 <HAL_COMP_Start+0x3e>
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2000      	movs	r0, #0
}
 8003524:	b002      	add	sp, #8
 8003526:	4770      	bx	lr
 8003528:	20000008 	.word	0x20000008
 800352c:	431bde83 	.word	0x431bde83

08003530 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003530:	4907      	ldr	r1, [pc, #28]	@ (8003550 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003532:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003534:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003536:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800353a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003540:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003542:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800354a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_NVIC_SetPriority+0x70>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800355e:	f1c3 0e07 	rsb	lr, r3, #7
 8003562:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800356a:	bf28      	it	cs
 800356c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003570:	f1bc 0f06 	cmp.w	ip, #6
 8003574:	d91c      	bls.n	80035b0 <HAL_NVIC_SetPriority+0x5c>
 8003576:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	fa03 f30c 	lsl.w	r3, r3, ip
 8003582:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	fa03 f30e 	lsl.w	r3, r3, lr
 800358e:	ea21 0303 	bic.w	r3, r1, r3
 8003592:	fa03 f30c 	lsl.w	r3, r3, ip
 8003596:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003598:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800359a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800359e:	db0a      	blt.n	80035b6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80035a4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80035a8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80035ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80035b0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b2:	4694      	mov	ip, r2
 80035b4:	e7e7      	b.n	8003586 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	4a04      	ldr	r2, [pc, #16]	@ (80035c8 <HAL_NVIC_SetPriority+0x74>)
 80035b8:	f000 000f 	and.w	r0, r0, #15
 80035bc:	4402      	add	r2, r0
 80035be:	7613      	strb	r3, [r2, #24]
 80035c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80035c4:	e000ed00 	.word	0xe000ed00
 80035c8:	e000ecfc 	.word	0xe000ecfc

080035cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035cc:	2800      	cmp	r0, #0
 80035ce:	db07      	blt.n	80035e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <HAL_NVIC_EnableIRQ+0x18>)
 80035d2:	0941      	lsrs	r1, r0, #5
 80035d4:	2301      	movs	r3, #1
 80035d6:	f000 001f 	and.w	r0, r0, #31
 80035da:	4083      	lsls	r3, r0
 80035dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	3801      	subs	r0, #1
 80035ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80035ee:	d301      	bcc.n	80035f4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80035f2:	4770      	bx	lr
{
 80035f4:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fa:	4c07      	ldr	r4, [pc, #28]	@ (8003618 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003602:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003606:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003608:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800360a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800360c:	619a      	str	r2, [r3, #24]
}
 800360e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003612:	6119      	str	r1, [r3, #16]
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003620:	0897      	lsrs	r7, r2, #2
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
  {
    if ((BufferLength % 4U) == 1U)
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003622:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003624:	d015      	beq.n	8003652 <CRC_Handle_8+0x36>
 8003626:	468c      	mov	ip, r1
 8003628:	eb01 0687 	add.w	r6, r1, r7, lsl #2
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800362c:	f89c 3001 	ldrb.w	r3, [ip, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003630:	f89c 8000 	ldrb.w	r8, [ip]
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003634:	f89c 4003 	ldrb.w	r4, [ip, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003638:	f89c e002 	ldrb.w	lr, [ip, #2]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800363c:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800363e:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8003642:	4323      	orrs	r3, r4
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003644:	f10c 0c04 	add.w	ip, ip, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003648:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  for (i = 0U; i < (BufferLength / 4U); i++)
 800364c:	45b4      	cmp	ip, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800364e:	602b      	str	r3, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003650:	d1ec      	bne.n	800362c <CRC_Handle_8+0x10>
  if ((BufferLength % 4U) != 0U)
 8003652:	f012 0203 	ands.w	r2, r2, #3
 8003656:	d00c      	beq.n	8003672 <CRC_Handle_8+0x56>
    if ((BufferLength % 4U) == 1U)
 8003658:	2a01      	cmp	r2, #1
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800365a:	f811 4027 	ldrb.w	r4, [r1, r7, lsl #2]
 800365e:	ea4f 0787 	mov.w	r7, r7, lsl #2
    if ((BufferLength % 4U) == 1U)
 8003662:	d009      	beq.n	8003678 <CRC_Handle_8+0x5c>
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003664:	4439      	add	r1, r7
    if ((BufferLength % 4U) == 2U)
 8003666:	2a02      	cmp	r2, #2
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003668:	784b      	ldrb	r3, [r1, #1]
 800366a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      *pReg = data;
 800366e:	802b      	strh	r3, [r5, #0]
    if ((BufferLength % 4U) == 2U)
 8003670:	d107      	bne.n	8003682 <CRC_Handle_8+0x66>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003672:	6828      	ldr	r0, [r5, #0]
}
 8003674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003678:	702c      	strb	r4, [r5, #0]
  return hcrc->Instance->DR;
 800367a:	6805      	ldr	r5, [r0, #0]
 800367c:	6828      	ldr	r0, [r5, #0]
}
 800367e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003682:	788b      	ldrb	r3, [r1, #2]
 8003684:	702b      	strb	r3, [r5, #0]
  return hcrc->Instance->DR;
 8003686:	6805      	ldr	r5, [r0, #0]
 8003688:	6828      	ldr	r0, [r5, #0]
}
 800368a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800368e:	bf00      	nop

08003690 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003690:	b530      	push	{r4, r5, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003692:	ea5f 0e52 	movs.w	lr, r2, lsr #1
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003696:	6804      	ldr	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003698:	d00b      	beq.n	80036b2 <CRC_Handle_16+0x22>
 800369a:	2300      	movs	r3, #0
 800369c:	1c8d      	adds	r5, r1, #2
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800369e:	f831 c023 	ldrh.w	ip, [r1, r3, lsl #2]
 80036a2:	f835 0023 	ldrh.w	r0, [r5, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036a6:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80036a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036ac:	4573      	cmp	r3, lr
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80036ae:	6020      	str	r0, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036b0:	d1f5      	bne.n	800369e <CRC_Handle_16+0xe>
  if ((BufferLength % 2U) != 0U)
 80036b2:	07d3      	lsls	r3, r2, #31
    *pReg = pBuffer[2U * i];
 80036b4:	bf44      	itt	mi
 80036b6:	f831 302e 	ldrhmi.w	r3, [r1, lr, lsl #2]
 80036ba:	8023      	strhmi	r3, [r4, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80036bc:	6820      	ldr	r0, [r4, #0]
}
 80036be:	bd30      	pop	{r4, r5, pc}

080036c0 <HAL_CRC_Init>:
  if (hcrc == NULL)
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d036      	beq.n	8003732 <HAL_CRC_Init+0x72>
{
 80036c4:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80036c6:	7f43      	ldrb	r3, [r0, #29]
 80036c8:	4604      	mov	r4, r0
 80036ca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80036ce:	b363      	cbz	r3, 800372a <HAL_CRC_Init+0x6a>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80036d0:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80036d2:	2202      	movs	r2, #2
 80036d4:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80036d6:	b9f3      	cbnz	r3, 8003716 <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <HAL_CRC_Init+0x78>)
 80036dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	f022 0218 	bic.w	r2, r2, #24
 80036e4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80036e6:	7962      	ldrb	r2, [r4, #5]
 80036e8:	b18a      	cbz	r2, 800370e <HAL_CRC_Init+0x4e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80036ea:	6922      	ldr	r2, [r4, #16]
 80036ec:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	6961      	ldr	r1, [r4, #20]
 80036f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036f6:	430a      	orrs	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	69a1      	ldr	r1, [r4, #24]
 80036fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003702:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
 8003704:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003706:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8003708:	7761      	strb	r1, [r4, #29]
  return HAL_OK;
 800370a:	2000      	movs	r0, #0
}
 800370c:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800370e:	f04f 32ff 	mov.w	r2, #4294967295
 8003712:	611a      	str	r2, [r3, #16]
 8003714:	e7eb      	b.n	80036ee <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003716:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800371a:	4620      	mov	r0, r4
 800371c:	f000 f83a 	bl	8003794 <HAL_CRCEx_Polynomial_Set>
 8003720:	b908      	cbnz	r0, 8003726 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	e7df      	b.n	80036e6 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 8003726:	2001      	movs	r0, #1
}
 8003728:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800372a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800372c:	f7fe f8fc 	bl	8001928 <HAL_CRC_MspInit>
 8003730:	e7ce      	b.n	80036d0 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 8003732:	2001      	movs	r0, #1
}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	04c11db7 	.word	0x04c11db7

0800373c <HAL_CRC_Calculate>:
{
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_CRC_DR_RESET(hcrc);
 800373e:	6806      	ldr	r6, [r0, #0]
  switch (hcrc->InputDataFormat)
 8003740:	6a07      	ldr	r7, [r0, #32]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003742:	2502      	movs	r5, #2
 8003744:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8003746:	68b5      	ldr	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 8003748:	2f02      	cmp	r7, #2
  __HAL_CRC_DR_RESET(hcrc);
 800374a:	f045 0501 	orr.w	r5, r5, #1
{
 800374e:	4604      	mov	r4, r0
  __HAL_CRC_DR_RESET(hcrc);
 8003750:	60b5      	str	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 8003752:	d007      	beq.n	8003764 <HAL_CRC_Calculate+0x28>
 8003754:	2f03      	cmp	r7, #3
 8003756:	d00f      	beq.n	8003778 <HAL_CRC_Calculate+0x3c>
 8003758:	2f01      	cmp	r7, #1
 800375a:	d008      	beq.n	800376e <HAL_CRC_Calculate+0x32>
  hcrc->State = HAL_CRC_STATE_READY;
 800375c:	2301      	movs	r3, #1
 800375e:	7763      	strb	r3, [r4, #29]
  switch (hcrc->InputDataFormat)
 8003760:	2000      	movs	r0, #0
}
 8003762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003764:	f7ff ff94 	bl	8003690 <CRC_Handle_16>
  hcrc->State = HAL_CRC_STATE_READY;
 8003768:	2301      	movs	r3, #1
 800376a:	7763      	strb	r3, [r4, #29]
}
 800376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800376e:	f7ff ff55 	bl	800361c <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 8003772:	2301      	movs	r3, #1
 8003774:	7763      	strb	r3, [r4, #29]
}
 8003776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (index = 0U; index < BufferLength; index++)
 8003778:	b13a      	cbz	r2, 800378a <HAL_CRC_Calculate+0x4e>
 800377a:	3904      	subs	r1, #4
 800377c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 8003780:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8003784:	6033      	str	r3, [r6, #0]
      for (index = 0U; index < BufferLength; index++)
 8003786:	4291      	cmp	r1, r2
 8003788:	d1fa      	bne.n	8003780 <HAL_CRC_Calculate+0x44>
  hcrc->State = HAL_CRC_STATE_READY;
 800378a:	2301      	movs	r3, #1
      temp = hcrc->Instance->DR;
 800378c:	6830      	ldr	r0, [r6, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800378e:	7763      	strb	r3, [r4, #29]
}
 8003790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003792:	bf00      	nop

08003794 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003794:	07cb      	lsls	r3, r1, #31
 8003796:	d51a      	bpl.n	80037ce <HAL_CRCEx_Polynomial_Set+0x3a>
{
 8003798:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800379a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800379c:	3b01      	subs	r3, #1
 800379e:	1c5c      	adds	r4, r3, #1
 80037a0:	fa21 fc03 	lsr.w	ip, r1, r3
 80037a4:	d015      	beq.n	80037d2 <HAL_CRCEx_Polynomial_Set+0x3e>
 80037a6:	f01c 0f01 	tst.w	ip, #1
 80037aa:	d0f7      	beq.n	800379c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80037ac:	2a18      	cmp	r2, #24
 80037ae:	d811      	bhi.n	80037d4 <HAL_CRCEx_Polynomial_Set+0x40>
 80037b0:	e8df f002 	tbb	[pc, r2]
 80037b4:	10101016 	.word	0x10101016
 80037b8:	10101010 	.word	0x10101010
 80037bc:	10101024 	.word	0x10101024
 80037c0:	10101010 	.word	0x10101010
 80037c4:	10101021 	.word	0x10101021
 80037c8:	10101010 	.word	0x10101010
 80037cc:	14          	.byte	0x14
 80037cd:	00          	.byte	0x00
 80037ce:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 80037d0:	4770      	bx	lr
    switch (PolyLength)
 80037d2:	b12a      	cbz	r2, 80037e0 <HAL_CRCEx_Polynomial_Set+0x4c>
 80037d4:	2001      	movs	r0, #1
}
 80037d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037da:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
 80037dc:	2b06      	cmp	r3, #6
 80037de:	d8f9      	bhi.n	80037d4 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80037e0:	6804      	ldr	r4, [r0, #0]
 80037e2:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	f023 0318 	bic.w	r3, r3, #24
 80037ea:	4313      	orrs	r3, r2
 80037ec:	2000      	movs	r0, #0
 80037ee:	60a3      	str	r3, [r4, #8]
}
 80037f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037f4:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
 80037f6:	2b07      	cmp	r3, #7
 80037f8:	d9f2      	bls.n	80037e0 <HAL_CRCEx_Polynomial_Set+0x4c>
 80037fa:	e7eb      	b.n	80037d4 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d9ef      	bls.n	80037e0 <HAL_CRCEx_Polynomial_Set+0x4c>
 8003800:	e7e8      	b.n	80037d4 <HAL_CRCEx_Polynomial_Set+0x40>
 8003802:	bf00      	nop

08003804 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003804:	b188      	cbz	r0, 800382a <HAL_DAC_Init+0x26>
{
 8003806:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003808:	7903      	ldrb	r3, [r0, #4]
 800380a:	4604      	mov	r4, r0
 800380c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003810:	b13b      	cbz	r3, 8003822 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003812:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003814:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003816:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003818:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800381a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800381c:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800381e:	4618      	mov	r0, r3
}
 8003820:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003822:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003824:	f7fe f896 	bl	8001954 <HAL_DAC_MspInit>
 8003828:	e7f3      	b.n	8003812 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800382a:	2001      	movs	r0, #1
}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <HAL_DAC_Start>:
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003830:	2800      	cmp	r0, #0
 8003832:	d03f      	beq.n	80038b4 <HAL_DAC_Start+0x84>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003834:	7943      	ldrb	r3, [r0, #5]
 8003836:	2b01      	cmp	r3, #1
 8003838:	4602      	mov	r2, r0
 800383a:	d03d      	beq.n	80038b8 <HAL_DAC_Start+0x88>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800383c:	2302      	movs	r3, #2
{
 800383e:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 8003840:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003842:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <HAL_DAC_Start+0x8c>)
  __HAL_DAC_ENABLE(hdac, Channel);
 8003844:	6804      	ldr	r4, [r0, #0]
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	481d      	ldr	r0, [pc, #116]	@ (80038c0 <HAL_DAC_Start+0x90>)
  __HAL_DAC_ENABLE(hdac, Channel);
 800384a:	6825      	ldr	r5, [r4, #0]
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	fba0 0303 	umull	r0, r3, r0, r3
  __HAL_DAC_ENABLE(hdac, Channel);
 8003852:	f001 0c10 	and.w	ip, r1, #16
 8003856:	2001      	movs	r0, #1
{
 8003858:	b082      	sub	sp, #8
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800385a:	099b      	lsrs	r3, r3, #6
  __HAL_DAC_ENABLE(hdac, Channel);
 800385c:	fa00 f00c 	lsl.w	r0, r0, ip
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003860:	3301      	adds	r3, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 8003862:	4328      	orrs	r0, r5
 8003864:	6020      	str	r0, [r4, #0]
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003866:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 8003868:	9b01      	ldr	r3, [sp, #4]
 800386a:	b12b      	cbz	r3, 8003878 <HAL_DAC_Start+0x48>
  {
    wait_loop_index--;
 800386c:	9b01      	ldr	r3, [sp, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 8003872:	9b01      	ldr	r3, [sp, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f9      	bne.n	800386c <HAL_DAC_Start+0x3c>
  }

  if (Channel == DAC_CHANNEL_1)
 8003878:	b979      	cbnz	r1, 800389a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003880:	2b02      	cmp	r3, #2
 8003882:	d103      	bne.n	800388c <HAL_DAC_Start+0x5c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003884:	6863      	ldr	r3, [r4, #4]
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6063      	str	r3, [r4, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800388c:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 800388e:	2301      	movs	r3, #1
 8003890:	7113      	strb	r3, [r2, #4]
  __HAL_UNLOCK(hdac);
 8003892:	7150      	strb	r0, [r2, #5]

  /* Return function status */
  return HAL_OK;
}
 8003894:	b002      	add	sp, #8
 8003896:	bc30      	pop	{r4, r5}
 8003898:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800389a:	6821      	ldr	r1, [r4, #0]
 800389c:	2302      	movs	r3, #2
 800389e:	f401 1178 	and.w	r1, r1, #4063232	@ 0x3e0000
 80038a2:	fa03 f30c 	lsl.w	r3, r3, ip
 80038a6:	4299      	cmp	r1, r3
 80038a8:	d1f0      	bne.n	800388c <HAL_DAC_Start+0x5c>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	6063      	str	r3, [r4, #4]
 80038b2:	e7eb      	b.n	800388c <HAL_DAC_Start+0x5c>
    return HAL_ERROR;
 80038b4:	2001      	movs	r0, #1
 80038b6:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80038b8:	2002      	movs	r0, #2
}
 80038ba:	4770      	bx	lr
 80038bc:	20000008 	.word	0x20000008
 80038c0:	053e2d63 	.word	0x053e2d63

080038c4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80038c4:	b410      	push	{r4}
 80038c6:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 80038c8:	2400      	movs	r4, #0
 80038ca:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038cc:	b198      	cbz	r0, 80038f6 <HAL_DAC_SetValue+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80038ce:	6800      	ldr	r0, [r0, #0]
 80038d0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80038d2:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80038d4:	b151      	cbz	r1, 80038ec <HAL_DAC_SetValue+0x28>
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80038d6:	9901      	ldr	r1, [sp, #4]
 80038d8:	3114      	adds	r1, #20
 80038da:	440a      	add	r2, r1
 80038dc:	9201      	str	r2, [sp, #4]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80038de:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
 80038e0:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80038e2:	6013      	str	r3, [r2, #0]
}
 80038e4:	b003      	add	sp, #12
 80038e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ea:	4770      	bx	lr
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80038ec:	9901      	ldr	r1, [sp, #4]
 80038ee:	3108      	adds	r1, #8
 80038f0:	440a      	add	r2, r1
 80038f2:	9201      	str	r2, [sp, #4]
 80038f4:	e7f3      	b.n	80038de <HAL_DAC_SetValue+0x1a>
    return HAL_ERROR;
 80038f6:	2001      	movs	r0, #1
}
 80038f8:	b003      	add	sp, #12
 80038fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003900:	2800      	cmp	r0, #0
 8003902:	f000 80ce 	beq.w	8003aa2 <HAL_DAC_ConfigChannel+0x1a2>
{
 8003906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390a:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 800390c:	2900      	cmp	r1, #0
 800390e:	f000 80ca 	beq.w	8003aa6 <HAL_DAC_ConfigChannel+0x1a6>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003912:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003914:	6889      	ldr	r1, [r1, #8]
  __HAL_LOCK(hdac);
 8003916:	2b01      	cmp	r3, #1
 8003918:	4606      	mov	r6, r0
 800391a:	f000 80d3 	beq.w	8003ac4 <HAL_DAC_ConfigChannel+0x1c4>
 800391e:	2301      	movs	r3, #1
 8003920:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003922:	2904      	cmp	r1, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8003924:	f04f 0302 	mov.w	r3, #2
 8003928:	4614      	mov	r4, r2
 800392a:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800392c:	d07b      	beq.n	8003a26 <HAL_DAC_ConfigChannel+0x126>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800392e:	6803      	ldr	r3, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003930:	f002 0410 	and.w	r4, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	2a01      	cmp	r2, #1
 8003938:	d108      	bne.n	800394c <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 800393a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800393c:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800393e:	251f      	movs	r5, #31
 8003940:	40a5      	lsls	r5, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003942:	40a2      	lsls	r2, r4
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003944:	ea20 0005 	bic.w	r0, r0, r5
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003948:	4302      	orrs	r2, r0
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800394a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800394c:	69bd      	ldr	r5, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 800394e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003950:	f8d7 8014 	ldr.w	r8, [r7, #20]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003954:	2007      	movs	r0, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003956:	2d01      	cmp	r5, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003958:	fa00 f004 	lsl.w	r0, r0, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800395c:	f000 809e 	beq.w	8003a9c <HAL_DAC_ConfigChannel+0x19c>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003960:	2d02      	cmp	r5, #2
 8003962:	f000 80a3 	beq.w	8003aac <HAL_DAC_ConfigChannel+0x1ac>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003966:	fab8 fc88 	clz	ip, r8
 800396a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800396e:	793d      	ldrb	r5, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003970:	f897 e005 	ldrb.w	lr, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003974:	f1a5 0501 	sub.w	r5, r5, #1
 8003978:	fab5 f585 	clz	r5, r5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800397c:	f1ae 0e01 	sub.w	lr, lr, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003980:	096d      	lsrs	r5, r5, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003982:	fabe fe8e 	clz	lr, lr
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003986:	022d      	lsls	r5, r5, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003988:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800398c:	ea45 254e 	orr.w	r5, r5, lr, lsl #9
 8003990:	ea45 0508 	orr.w	r5, r5, r8
 8003994:	430d      	orrs	r5, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800399a:	40a1      	lsls	r1, r4
 800399c:	4301      	orrs	r1, r0
 800399e:	ea22 0801 	bic.w	r8, r2, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80039a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a6:	40a2      	lsls	r2, r4
 80039a8:	ea28 0802 	bic.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80039b0:	ea45 050c 	orr.w	r5, r5, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80039b4:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80039b8:	d07b      	beq.n	8003ab2 <HAL_DAC_ConfigChannel+0x1b2>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80039ba:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039be:	40a5      	lsls	r5, r4
 80039c0:	ea45 0508 	orr.w	r5, r5, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80039c4:	63dd      	str	r5, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039cc:	40a1      	lsls	r1, r4
 80039ce:	ea22 0201 	bic.w	r2, r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80039d4:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 80039d8:	681d      	ldr	r5, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80039da:	f640 70fe 	movw	r0, #4094	@ 0xffe
 80039de:	40a0      	lsls	r0, r4
 80039e0:	ea25 0500 	bic.w	r5, r5, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039e4:	fa01 f004 	lsl.w	r0, r1, r4
 80039e8:	4328      	orrs	r0, r5
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80039ea:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 80039ec:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80039ee:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80039f2:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80039f6:	430a      	orrs	r2, r1
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80039f8:	f640 700f 	movw	r0, #3855	@ 0xf0f
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	25c0      	movs	r5, #192	@ 0xc0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003a00:	40a0      	lsls	r0, r4
 8003a02:	40a2      	lsls	r2, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003a04:	fa05 f404 	lsl.w	r4, r5, r4
 8003a08:	ea21 0104 	bic.w	r1, r1, r4
 8003a0c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003a0e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8003a10:	ea21 0100 	bic.w	r1, r1, r0
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a14:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003a16:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8003a18:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003a1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 8003a1c:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 8003a1e:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 8003a20:	7174      	strb	r4, [r6, #5]
}
 8003a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8003a26:	f7fe fd09 	bl	800243c <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a2a:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003a2c:	4605      	mov	r5, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 8003a30:	b154      	cbz	r4, 8003a48 <HAL_DAC_ConfigChannel+0x148>
 8003a32:	e018      	b.n	8003a66 <HAL_DAC_ConfigChannel+0x166>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a34:	f7fe fd02 	bl	800243c <HAL_GetTick>
 8003a38:	1b40      	subs	r0, r0, r5
 8003a3a:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a3c:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a3e:	d902      	bls.n	8003a46 <HAL_DAC_ConfigChannel+0x146>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a42:	0411      	lsls	r1, r2, #16
 8003a44:	d448      	bmi.n	8003ad8 <HAL_DAC_ConfigChannel+0x1d8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a48:	0412      	lsls	r2, r2, #16
 8003a4a:	d4f3      	bmi.n	8003a34 <HAL_DAC_ConfigChannel+0x134>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a50:	e00d      	b.n	8003a6e <HAL_DAC_ConfigChannel+0x16e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a52:	f7fe fcf3 	bl	800243c <HAL_GetTick>
 8003a56:	1b40      	subs	r0, r0, r5
 8003a58:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a5a:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a5c:	d902      	bls.n	8003a64 <HAL_DAC_ConfigChannel+0x164>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a60:	2a00      	cmp	r2, #0
 8003a62:	db39      	blt.n	8003ad8 <HAL_DAC_ConfigChannel+0x1d8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a66:	2a00      	cmp	r2, #0
 8003a68:	dbf3      	blt.n	8003a52 <HAL_DAC_ConfigChannel+0x152>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a72:	f004 0410 	and.w	r4, r4, #16
 8003a76:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8003a7a:	40a0      	lsls	r0, r4
 8003a7c:	40a1      	lsls	r1, r4
 8003a7e:	ea22 0200 	bic.w	r2, r2, r0
 8003a82:	430a      	orrs	r2, r1
 8003a84:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003a86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a8a:	20ff      	movs	r0, #255	@ 0xff
 8003a8c:	40a0      	lsls	r0, r4
 8003a8e:	40a1      	lsls	r1, r4
 8003a90:	ea22 0200 	bic.w	r2, r2, r0
 8003a94:	430a      	orrs	r2, r1
 8003a96:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	e74b      	b.n	8003934 <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 8003a9c:	f04f 0c00 	mov.w	ip, #0
 8003aa0:	e765      	b.n	800396e <HAL_DAC_ConfigChannel+0x6e>
    return HAL_ERROR;
 8003aa2:	2001      	movs	r0, #1
}
 8003aa4:	4770      	bx	lr
    return HAL_ERROR;
 8003aa6:	2001      	movs	r0, #1
}
 8003aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8003aac:	f04f 0c01 	mov.w	ip, #1
 8003ab0:	e75d      	b.n	800396e <HAL_DAC_ConfigChannel+0x6e>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003ab2:	f001 fac1 	bl	8005038 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <HAL_DAC_ConfigChannel+0x1e8>)
 8003ab8:	4298      	cmp	r0, r3
 8003aba:	d905      	bls.n	8003ac8 <HAL_DAC_ConfigChannel+0x1c8>
  hdac->Instance->MCR = tmpreg1;
 8003abc:	6833      	ldr	r3, [r6, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003abe:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 8003ac2:	e77c      	b.n	80039be <HAL_DAC_ConfigChannel+0xbe>
  __HAL_LOCK(hdac);
 8003ac4:	2002      	movs	r0, #2
 8003ac6:	e7ac      	b.n	8003a22 <HAL_DAC_ConfigChannel+0x122>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003ac8:	4a08      	ldr	r2, [pc, #32]	@ (8003aec <HAL_DAC_ConfigChannel+0x1ec>)
  hdac->Instance->MCR = tmpreg1;
 8003aca:	6833      	ldr	r3, [r6, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003acc:	4290      	cmp	r0, r2
 8003ace:	f67f af76 	bls.w	80039be <HAL_DAC_ConfigChannel+0xbe>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003ad2:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 8003ad6:	e772      	b.n	80039be <HAL_DAC_ConfigChannel+0xbe>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ad8:	6933      	ldr	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ada:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	6133      	str	r3, [r6, #16]
            return HAL_TIMEOUT;
 8003ae2:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ae4:	7132      	strb	r2, [r6, #4]
            return HAL_TIMEOUT;
 8003ae6:	e79c      	b.n	8003a22 <HAL_DAC_ConfigChannel+0x122>
 8003ae8:	09896800 	.word	0x09896800
 8003aec:	04c4b400 	.word	0x04c4b400

08003af0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d076      	beq.n	8003be2 <HAL_DMA_Init+0xf2>
{
 8003af4:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003af6:	4a3c      	ldr	r2, [pc, #240]	@ (8003be8 <HAL_DMA_Init+0xf8>)
 8003af8:	6804      	ldr	r4, [r0, #0]
 8003afa:	4294      	cmp	r4, r2
 8003afc:	4603      	mov	r3, r0
 8003afe:	d95c      	bls.n	8003bba <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b00:	493a      	ldr	r1, [pc, #232]	@ (8003bec <HAL_DMA_Init+0xfc>)
 8003b02:	4a3b      	ldr	r2, [pc, #236]	@ (8003bf0 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8003b04:	483b      	ldr	r0, [pc, #236]	@ (8003bf4 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b06:	4421      	add	r1, r4
 8003b08:	fba2 2101 	umull	r2, r1, r2, r1
 8003b0c:	0909      	lsrs	r1, r1, #4
 8003b0e:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b10:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b12:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8003b18:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b1a:	4e35      	ldr	r6, [pc, #212]	@ (8003bf0 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b1c:	4f36      	ldr	r7, [pc, #216]	@ (8003bf8 <HAL_DMA_Init+0x108>)
 8003b1e:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b22:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8003b24:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b26:	4302      	orrs	r2, r0
 8003b28:	6958      	ldr	r0, [r3, #20]
 8003b2a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2c:	6998      	ldr	r0, [r3, #24]
 8003b2e:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 8003b30:	6820      	ldr	r0, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b32:	f420 4cff 	bic.w	ip, r0, #32640	@ 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b36:	69d8      	ldr	r0, [r3, #28]
 8003b38:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b3a:	b2e0      	uxtb	r0, r4
 8003b3c:	3808      	subs	r0, #8
 8003b3e:	fba6 6000 	umull	r6, r0, r6, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b42:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b44:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b48:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8003b4a:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8003b4e:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b50:	4e25      	ldr	r6, [pc, #148]	@ (8003be8 <HAL_DMA_Init+0xf8>)
 8003b52:	4a2a      	ldr	r2, [pc, #168]	@ (8003bfc <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b54:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b58:	42b4      	cmp	r4, r6
 8003b5a:	bf98      	it	ls
 8003b5c:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b5e:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b62:	2401      	movs	r4, #1
 8003b64:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b68:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b6a:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b6e:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b72:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b74:	649e      	str	r6, [r3, #72]	@ 0x48
 8003b76:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b7a:	d027      	beq.n	8003bcc <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b7c:	685e      	ldr	r6, [r3, #4]
 8003b7e:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b80:	3e01      	subs	r6, #1
 8003b82:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b84:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b88:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b8c:	d824      	bhi.n	8003bd8 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b90:	481c      	ldr	r0, [pc, #112]	@ (8003c04 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b92:	442a      	add	r2, r5
 8003b94:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b96:	3d01      	subs	r5, #1
 8003b98:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b9a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b9c:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ba0:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ba2:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba4:	4a18      	ldr	r2, [pc, #96]	@ (8003c08 <HAL_DMA_Init+0x118>)
 8003ba6:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba8:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8003baa:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bac:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8003bae:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8003bb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8003bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8003bb8:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bba:	4914      	ldr	r1, [pc, #80]	@ (8003c0c <HAL_DMA_Init+0x11c>)
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf0 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8003bbe:	4814      	ldr	r0, [pc, #80]	@ (8003c10 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bc0:	4421      	add	r1, r4
 8003bc2:	fba2 2101 	umull	r2, r1, r2, r1
 8003bc6:	0909      	lsrs	r1, r1, #4
 8003bc8:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8003bca:	e7a1      	b.n	8003b10 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bcc:	2400      	movs	r4, #0
 8003bce:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bd0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bd4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8003bd8:	2200      	movs	r2, #0
 8003bda:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003be0:	e7e2      	b.n	8003ba8 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8003be2:	2001      	movs	r0, #1
}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40020407 	.word	0x40020407
 8003bec:	bffdfbf8 	.word	0xbffdfbf8
 8003bf0:	cccccccd 	.word	0xcccccccd
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40020800 	.word	0x40020800
 8003bfc:	40020820 	.word	0x40020820
 8003c00:	1000823f 	.word	0x1000823f
 8003c04:	40020940 	.word	0x40020940
 8003c08:	40020900 	.word	0x40020900
 8003c0c:	bffdfff8 	.word	0xbffdfff8
 8003c10:	40020000 	.word	0x40020000

08003c14 <HAL_DMA_Start_IT>:
{
 8003c14:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8003c16:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8003c1a:	2c01      	cmp	r4, #1
 8003c1c:	d009      	beq.n	8003c32 <HAL_DMA_Start_IT+0x1e>
 8003c1e:	2401      	movs	r4, #1
 8003c20:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003c24:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8003c28:	2c01      	cmp	r4, #1
 8003c2a:	d005      	beq.n	8003c38 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8003c32:	2002      	movs	r0, #2
}
 8003c34:	bcf0      	pop	{r4, r5, r6, r7}
 8003c36:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c38:	2402      	movs	r4, #2
 8003c3a:	f880 4025 	strb.w	r4, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3e:	2400      	movs	r4, #0
 8003c40:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003c42:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c44:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 8003c46:	6825      	ldr	r5, [r4, #0]
 8003c48:	f025 0501 	bic.w	r5, r5, #1
 8003c4c:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c4e:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	@ 0x50
 8003c52:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8003c54:	b115      	cbz	r5, 8003c5c <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c56:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	@ 0x58
 8003c5a:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c5c:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8003c5e:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8003c60:	f006 0c1f 	and.w	ip, r6, #31
 8003c64:	2601      	movs	r6, #1
 8003c66:	fa06 f60c 	lsl.w	r6, r6, ip
 8003c6a:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003c6c:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c6e:	6883      	ldr	r3, [r0, #8]
 8003c70:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8003c72:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8003c74:	bf0b      	itete	eq
 8003c76:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003c78:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003c7a:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003c7c:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003c7e:	b1bb      	cbz	r3, 8003cb0 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	f043 030e 	orr.w	r3, r3, #14
 8003c86:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c88:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	03d2      	lsls	r2, r2, #15
 8003c8e:	d503      	bpl.n	8003c98 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c96:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003c98:	b11d      	cbz	r5, 8003ca2 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca0:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003caa:	6023      	str	r3, [r4, #0]
}
 8003cac:	bcf0      	pop	{r4, r5, r6, r7}
 8003cae:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	f023 0304 	bic.w	r3, r3, #4
 8003cb6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	f043 030a 	orr.w	r3, r3, #10
 8003cbe:	6023      	str	r3, [r4, #0]
 8003cc0:	e7e2      	b.n	8003c88 <HAL_DMA_Start_IT+0x74>
 8003cc2:	bf00      	nop

08003cc4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003cc8:	2a02      	cmp	r2, #2
{
 8003cca:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ccc:	d009      	beq.n	8003ce2 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cce:	2204      	movs	r2, #4
 8003cd0:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8003cd4:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8003cd6:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8003cd8:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003cdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8003ce0:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce2:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ce4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
{
 8003ce6:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ce8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cea:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cec:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cee:	f020 000e 	bic.w	r0, r0, #14
 8003cf2:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cf4:	6820      	ldr	r0, [r4, #0]
 8003cf6:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8003cfa:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8003cfc:	6810      	ldr	r0, [r2, #0]
 8003cfe:	f020 0001 	bic.w	r0, r0, #1
 8003d02:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d04:	f001 011f 	and.w	r1, r1, #31
 8003d08:	2201      	movs	r2, #1
 8003d0a:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d0c:	e9d3 4114 	ldrd	r4, r1, [r3, #80]	@ 0x50
 8003d10:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d12:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d14:	6044      	str	r4, [r0, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8003d16:	b131      	cbz	r1, 8003d26 <HAL_DMA_Abort+0x62>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d18:	680a      	ldr	r2, [r1, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1a:	e9d3 0416 	ldrd	r0, r4, [r3, #88]	@ 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d22:	600a      	str	r2, [r1, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d24:	6044      	str	r4, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8003d26:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8003d28:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	2000      	movs	r0, #0
}
 8003d34:	bc30      	pop	{r4, r5}
 8003d36:	4770      	bx	lr

08003d38 <HAL_DMA_Abort_IT>:
{
 8003d38:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d3a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d009      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 8003d42:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d44:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8003d46:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d48:	63c1      	str	r1, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003d4a:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    status = HAL_ERROR;
 8003d52:	4618      	mov	r0, r3
}
 8003d54:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d56:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d58:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d5a:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d5c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003d5e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d60:	f021 010e 	bic.w	r1, r1, #14
 8003d64:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	f021 0101 	bic.w	r1, r1, #1
 8003d6c:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d6e:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d70:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d76:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d78:	f002 021f 	and.w	r2, r2, #31
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d80:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	@ 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d84:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d86:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003d88:	b132      	cbz	r2, 8003d98 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d8a:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d8c:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	@ 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d94:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d96:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8003d98:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003d9a:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8003d9c:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003da2:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8003da6:	b103      	cbz	r3, 8003daa <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8003da8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2000      	movs	r0, #0
}
 8003dac:	bd38      	pop	{r3, r4, r5, pc}
 8003dae:	bf00      	nop

08003db0 <HAL_DMA_IRQHandler>:
{
 8003db0:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003db2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003db4:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003db6:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003db8:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003dba:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	420a      	tst	r2, r1
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x36>
 8003dc8:	f014 0f04 	tst.w	r4, #4
 8003dcc:	d00b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dce:	682b      	ldr	r3, [r5, #0]
 8003dd0:	069b      	lsls	r3, r3, #26
 8003dd2:	d403      	bmi.n	8003ddc <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	f023 0304 	bic.w	r3, r3, #4
 8003dda:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8003ddc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dde:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003de0:	b1cb      	cbz	r3, 8003e16 <HAL_DMA_IRQHandler+0x66>
}
 8003de2:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003de4:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003de6:	2202      	movs	r2, #2
 8003de8:	409a      	lsls	r2, r3
 8003dea:	420a      	tst	r2, r1
 8003dec:	d015      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8003dee:	f014 0f02 	tst.w	r4, #2
 8003df2:	d012      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	0699      	lsls	r1, r3, #26
 8003df8:	d406      	bmi.n	8003e08 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dfa:	682b      	ldr	r3, [r5, #0]
 8003dfc:	f023 030a 	bic.w	r3, r3, #10
 8003e00:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8003e08:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e0a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <HAL_DMA_IRQHandler+0x32>
}
 8003e16:	bc70      	pop	{r4, r5, r6}
 8003e18:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	420a      	tst	r2, r1
 8003e20:	d0f9      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8003e22:	0722      	lsls	r2, r4, #28
 8003e24:	d5f7      	bpl.n	8003e16 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e26:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8003e28:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2a:	f022 020e 	bic.w	r2, r2, #14
 8003e2e:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e30:	2201      	movs	r2, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8003e36:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e38:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e3a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003e3c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003e40:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8003e44:	2900      	cmp	r1, #0
 8003e46:	d0e6      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x66>
}
 8003e48:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003e4a:	4708      	bx	r1

08003e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e50:	680c      	ldr	r4, [r1, #0]
{
 8003e52:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e54:	2c00      	cmp	r4, #0
 8003e56:	f000 8089 	beq.w	8003f6c <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8003e5a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e5c:	f04f 0b01 	mov.w	fp, #1
 8003e60:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8003e64:	ea1e 0a04 	ands.w	sl, lr, r4
 8003e68:	d07b      	beq.n	8003f62 <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e6a:	684d      	ldr	r5, [r1, #4]
 8003e6c:	f005 0203 	and.w	r2, r5, #3
 8003e70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e74:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e76:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e7a:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e7e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e82:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e86:	d974      	bls.n	8003f72 <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e88:	2a03      	cmp	r2, #3
 8003e8a:	f040 80b0 	bne.w	8003fee <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e8e:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8003e92:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e96:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e9a:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e9c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003ea0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ea2:	d05e      	beq.n	8003f62 <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea4:	4f66      	ldr	r7, [pc, #408]	@ (8004040 <HAL_GPIO_Init+0x1f4>)
 8003ea6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	663a      	str	r2, [r7, #96]	@ 0x60
 8003eae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003eb0:	f002 0201 	and.w	r2, r2, #1
 8003eb4:	9203      	str	r2, [sp, #12]
 8003eb6:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eb8:	f023 0203 	bic.w	r2, r3, #3
 8003ebc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003ec0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ec4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec8:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003eca:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003ece:	260f      	movs	r6, #15
 8003ed0:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ed4:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ed8:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003edc:	d01d      	beq.n	8003f1a <HAL_GPIO_Init+0xce>
 8003ede:	4e59      	ldr	r6, [pc, #356]	@ (8004044 <HAL_GPIO_Init+0x1f8>)
 8003ee0:	42b0      	cmp	r0, r6
 8003ee2:	f000 8097 	beq.w	8004014 <HAL_GPIO_Init+0x1c8>
 8003ee6:	4e58      	ldr	r6, [pc, #352]	@ (8004048 <HAL_GPIO_Init+0x1fc>)
 8003ee8:	42b0      	cmp	r0, r6
 8003eea:	f000 809a 	beq.w	8004022 <HAL_GPIO_Init+0x1d6>
 8003eee:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8004050 <HAL_GPIO_Init+0x204>
 8003ef2:	4570      	cmp	r0, lr
 8003ef4:	f000 8087 	beq.w	8004006 <HAL_GPIO_Init+0x1ba>
 8003ef8:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8004054 <HAL_GPIO_Init+0x208>
 8003efc:	4570      	cmp	r0, lr
 8003efe:	f000 8097 	beq.w	8004030 <HAL_GPIO_Init+0x1e4>
 8003f02:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8004058 <HAL_GPIO_Init+0x20c>
 8003f06:	4570      	cmp	r0, lr
 8003f08:	bf0c      	ite	eq
 8003f0a:	f04f 0e05 	moveq.w	lr, #5
 8003f0e:	f04f 0e06 	movne.w	lr, #6
 8003f12:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f16:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f1a:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800404c <HAL_GPIO_Init+0x200>)
 8003f1e:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f20:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8003f22:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003f26:	4e49      	ldr	r6, [pc, #292]	@ (800404c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8003f28:	bf54      	ite	pl
 8003f2a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003f2c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8003f30:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8003f32:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f34:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003f36:	4e45      	ldr	r6, [pc, #276]	@ (800404c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8003f38:	bf54      	ite	pl
 8003f3a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003f3c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8003f40:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8003f42:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f44:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003f46:	4e41      	ldr	r6, [pc, #260]	@ (800404c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8003f48:	bf54      	ite	pl
 8003f4a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003f4c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8003f50:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f52:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f54:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8003f56:	4d3d      	ldr	r5, [pc, #244]	@ (800404c <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8003f58:	bf54      	ite	pl
 8003f5a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8003f5c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8003f60:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8003f62:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f64:	fa34 f203 	lsrs.w	r2, r4, r3
 8003f68:	f47f af7a 	bne.w	8003e60 <HAL_GPIO_Init+0x14>
  }
}
 8003f6c:	b005      	add	sp, #20
 8003f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003f72:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f76:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f78:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f7c:	fa06 f80c 	lsl.w	r8, r6, ip
 8003f80:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003f84:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8003f88:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f8c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f8e:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f92:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8003f96:	fa0e fe03 	lsl.w	lr, lr, r3
 8003f9a:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8003f9e:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8003fa2:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa6:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003faa:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fae:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb2:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003fb4:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb8:	f47f af69 	bne.w	8003e8e <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fbc:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003fbe:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fc2:	f003 0e07 	and.w	lr, r3, #7
 8003fc6:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003fca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fce:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8003fd2:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fd6:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fd8:	260f      	movs	r6, #15
 8003fda:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fde:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fe0:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fe4:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003fe8:	f8c8 e020 	str.w	lr, [r8, #32]
 8003fec:	e74f      	b.n	8003e8e <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 8003fee:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff2:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ff4:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff8:	fa06 fe0c 	lsl.w	lr, r6, ip
 8003ffc:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8004000:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004004:	e743      	b.n	8003e8e <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004006:	f04f 0e03 	mov.w	lr, #3
 800400a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800400e:	ea47 070c 	orr.w	r7, r7, ip
 8004012:	e782      	b.n	8003f1a <HAL_GPIO_Init+0xce>
 8004014:	f04f 0e01 	mov.w	lr, #1
 8004018:	fa0e fc0c 	lsl.w	ip, lr, ip
 800401c:	ea47 070c 	orr.w	r7, r7, ip
 8004020:	e77b      	b.n	8003f1a <HAL_GPIO_Init+0xce>
 8004022:	f04f 0e02 	mov.w	lr, #2
 8004026:	fa0e fc0c 	lsl.w	ip, lr, ip
 800402a:	ea47 070c 	orr.w	r7, r7, ip
 800402e:	e774      	b.n	8003f1a <HAL_GPIO_Init+0xce>
 8004030:	f04f 0e04 	mov.w	lr, #4
 8004034:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004038:	ea47 070c 	orr.w	r7, r7, ip
 800403c:	e76d      	b.n	8003f1a <HAL_GPIO_Init+0xce>
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
 8004044:	48000400 	.word	0x48000400
 8004048:	48000800 	.word	0x48000800
 800404c:	40010400 	.word	0x40010400
 8004050:	48000c00 	.word	0x48000c00
 8004054:	48001000 	.word	0x48001000
 8004058:	48001400 	.word	0x48001400

0800405c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800405c:	6903      	ldr	r3, [r0, #16]
 800405e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004060:	bf14      	ite	ne
 8004062:	2001      	movne	r0, #1
 8004064:	2000      	moveq	r0, #0
 8004066:	4770      	bx	lr

08004068 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004068:	b10a      	cbz	r2, 800406e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800406a:	6181      	str	r1, [r0, #24]
 800406c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800406e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop

08004074 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t itflag   = hi2c->Instance->ISR;
 8004076:	6803      	ldr	r3, [r0, #0]
{
 8004078:	4605      	mov	r5, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800407a:	6998      	ldr	r0, [r3, #24]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800407c:	f010 0c10 	ands.w	ip, r0, #16
 8004080:	d041      	beq.n	8004106 <I2C_IsErrorOccurred+0x92>
 8004082:	4616      	mov	r6, r2
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004084:	2210      	movs	r2, #16
 8004086:	460f      	mov	r7, r1
 8004088:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800408a:	699c      	ldr	r4, [r3, #24]
 800408c:	f014 0420 	ands.w	r4, r4, #32
 8004090:	d176      	bne.n	8004180 <I2C_IsErrorOccurred+0x10c>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004092:	1c7a      	adds	r2, r7, #1
 8004094:	d14d      	bne.n	8004132 <I2C_IsErrorOccurred+0xbe>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004096:	699a      	ldr	r2, [r3, #24]
 8004098:	0696      	lsls	r6, r2, #26
 800409a:	d5fc      	bpl.n	8004096 <I2C_IsErrorOccurred+0x22>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800409c:	2220      	movs	r2, #32
 800409e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040a0:	699a      	ldr	r2, [r3, #24]
    error_code |= HAL_I2C_ERROR_AF;
 80040a2:	f044 0c04 	orr.w	ip, r4, #4

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040a6:	05d4      	lsls	r4, r2, #23
    status = HAL_ERROR;
 80040a8:	f04f 0001 	mov.w	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040ac:	d42f      	bmi.n	800410e <I2C_IsErrorOccurred+0x9a>

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040ae:	0557      	lsls	r7, r2, #21
 80040b0:	d53a      	bpl.n	8004128 <I2C_IsErrorOccurred+0xb4>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040b6:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80040b8:	f04c 0c08 	orr.w	ip, ip, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040bc:	0596      	lsls	r6, r2, #22
 80040be:	d504      	bpl.n	80040ca <I2C_IsErrorOccurred+0x56>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80040c4:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040c8:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80040ce:	bf44      	itt	mi
 80040d0:	2200      	movmi	r2, #0
 80040d2:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	07d2      	lsls	r2, r2, #31
 80040d8:	d403      	bmi.n	80040e2 <I2C_IsErrorOccurred+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	4927      	ldr	r1, [pc, #156]	@ (8004184 <I2C_IsErrorOccurred+0x110>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80040ea:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80040ee:	ea43 030c 	orr.w	r3, r3, ip
    hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	2120      	movs	r1, #32
    hi2c->ErrorCode |= error_code;
 80040f4:	646b      	str	r3, [r5, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f6:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fe:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8004102:	2001      	movs	r0, #1
  }

  return status;
}
 8004104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  itflag = hi2c->Instance->ISR;
 8004106:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004108:	05d4      	lsls	r4, r2, #23
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	4660      	mov	r0, ip
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800410c:	d5cf      	bpl.n	80040ae <I2C_IsErrorOccurred+0x3a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800410e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004112:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004114:	0551      	lsls	r1, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8004116:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800411a:	d5cf      	bpl.n	80040bc <I2C_IsErrorOccurred+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800411c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004120:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8004122:	f04c 0c08 	orr.w	ip, ip, #8
 8004126:	e7c9      	b.n	80040bc <I2C_IsErrorOccurred+0x48>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004128:	0594      	lsls	r4, r2, #22
 800412a:	d4c9      	bmi.n	80040c0 <I2C_IsErrorOccurred+0x4c>
  if (status != HAL_OK)
 800412c:	2800      	cmp	r0, #0
 800412e:	d1cc      	bne.n	80040ca <I2C_IsErrorOccurred+0x56>
}
 8004130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7fe f983 	bl	800243c <HAL_GetTick>
 8004136:	1b80      	subs	r0, r0, r6
 8004138:	42b8      	cmp	r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800413a:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800413c:	d801      	bhi.n	8004142 <I2C_IsErrorOccurred+0xce>
 800413e:	2f00      	cmp	r7, #0
 8004140:	d1a3      	bne.n	800408a <I2C_IsErrorOccurred+0x16>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004142:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8004144:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004148:	6999      	ldr	r1, [r3, #24]
 800414a:	040c      	lsls	r4, r1, #16
          tmp2 = hi2c->Mode;
 800414c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800414e:	d50b      	bpl.n	8004168 <I2C_IsErrorOccurred+0xf4>
 8004150:	0441      	lsls	r1, r0, #17
 8004152:	d409      	bmi.n	8004168 <I2C_IsErrorOccurred+0xf4>
              (tmp1 != I2C_CR2_STOP) && \
 8004154:	2a20      	cmp	r2, #32
 8004156:	d007      	beq.n	8004168 <I2C_IsErrorOccurred+0xf4>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800415e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004160:	f7fe f96c 	bl	800243c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004164:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004166:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	0692      	lsls	r2, r2, #26
 800416c:	d48d      	bmi.n	800408a <I2C_IsErrorOccurred+0x16>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800416e:	f7fe f965 	bl	800243c <HAL_GetTick>
 8004172:	1b83      	subs	r3, r0, r6
 8004174:	2b19      	cmp	r3, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004176:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004178:	d9f6      	bls.n	8004168 <I2C_IsErrorOccurred+0xf4>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	2420      	movs	r4, #32
 800417e:	e78f      	b.n	80040a0 <I2C_IsErrorOccurred+0x2c>
 8004180:	2400      	movs	r4, #0
 8004182:	e78b      	b.n	800409c <I2C_IsErrorOccurred+0x28>
 8004184:	fe00e800 	.word	0xfe00e800

08004188 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	6803      	ldr	r3, [r0, #0]
 800418c:	4604      	mov	r4, r0
 800418e:	460d      	mov	r5, r1
 8004190:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004192:	e005      	b.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004194:	f7ff ff6e 	bl	8004074 <I2C_IsErrorOccurred>
 8004198:	bb00      	cbnz	r0, 80041dc <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 800419a:	1c6a      	adds	r2, r5, #1
 800419c:	d108      	bne.n	80041b0 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 800419e:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	079b      	lsls	r3, r3, #30
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a4:	4632      	mov	r2, r6
 80041a6:	4629      	mov	r1, r5
 80041a8:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041aa:	d5f3      	bpl.n	8004194 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 80041ac:	2000      	movs	r0, #0
}
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b0:	f7fe f944 	bl	800243c <HAL_GetTick>
 80041b4:	1b80      	subs	r0, r0, r6
 80041b6:	42a8      	cmp	r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80041b8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	d801      	bhi.n	80041c0 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d1ef      	bne.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	f012 0202 	ands.w	r2, r2, #2
 80041c6:	d1eb      	bne.n	80041a0 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80041ca:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041d4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
}
 80041de:	bd70      	pop	{r4, r5, r6, pc}

080041e0 <I2C_WaitOnFlagUntilTimeout>:
{
 80041e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041e8:	461e      	mov	r6, r3
 80041ea:	4605      	mov	r5, r0
 80041ec:	6803      	ldr	r3, [r0, #0]
 80041ee:	4688      	mov	r8, r1
 80041f0:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f2:	e005      	b.n	8004200 <I2C_WaitOnFlagUntilTimeout+0x20>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f4:	f7ff ff3e 	bl	8004074 <I2C_IsErrorOccurred>
 80041f8:	bb68      	cbnz	r0, 8004256 <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	1c73      	adds	r3, r6, #1
 80041fc:	d10e      	bne.n	800421c <I2C_WaitOnFlagUntilTimeout+0x3c>
 80041fe:	682b      	ldr	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004200:	699c      	ldr	r4, [r3, #24]
 8004202:	ea38 0404 	bics.w	r4, r8, r4
 8004206:	bf0c      	ite	eq
 8004208:	2301      	moveq	r3, #1
 800420a:	2300      	movne	r3, #0
 800420c:	42bb      	cmp	r3, r7
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800420e:	464a      	mov	r2, r9
 8004210:	4631      	mov	r1, r6
 8004212:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004214:	d0ee      	beq.n	80041f4 <I2C_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8004216:	2000      	movs	r0, #0
}
 8004218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421c:	f7fe f90e 	bl	800243c <HAL_GetTick>
 8004220:	eba0 0009 	sub.w	r0, r0, r9
 8004224:	42b0      	cmp	r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004226:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004228:	d801      	bhi.n	800422e <I2C_WaitOnFlagUntilTimeout+0x4e>
 800422a:	2e00      	cmp	r6, #0
 800422c:	d1e8      	bne.n	8004200 <I2C_WaitOnFlagUntilTimeout+0x20>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	ea38 0202 	bics.w	r2, r8, r2
 8004234:	bf0c      	ite	eq
 8004236:	2201      	moveq	r2, #1
 8004238:	2200      	movne	r2, #0
 800423a:	42ba      	cmp	r2, r7
 800423c:	d1e0      	bne.n	8004200 <I2C_WaitOnFlagUntilTimeout+0x20>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004240:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004242:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 8004246:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800424a:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800424e:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
      return HAL_ERROR;
 8004256:	2001      	movs	r0, #1
 8004258:	e7de      	b.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x38>
 800425a:	bf00      	nop

0800425c <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800425c:	6803      	ldr	r3, [r0, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	069b      	lsls	r3, r3, #26
 8004262:	d429      	bmi.n	80042b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
{
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4605      	mov	r5, r0
 8004268:	460c      	mov	r4, r1
 800426a:	4616      	mov	r6, r2
 800426c:	e00d      	b.n	800428a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fe f8e5 	bl	800243c <HAL_GetTick>
 8004272:	1b80      	subs	r0, r0, r6
 8004274:	42a0      	cmp	r0, r4
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004276:	6829      	ldr	r1, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004278:	d800      	bhi.n	800427c <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
 800427a:	b91c      	cbnz	r4, 8004284 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800427c:	698b      	ldr	r3, [r1, #24]
 800427e:	f013 0320 	ands.w	r3, r3, #32
 8004282:	d00d      	beq.n	80042a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004284:	698b      	ldr	r3, [r1, #24]
 8004286:	069b      	lsls	r3, r3, #26
 8004288:	d408      	bmi.n	800429c <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800428a:	4632      	mov	r2, r6
 800428c:	4621      	mov	r1, r4
 800428e:	4628      	mov	r0, r5
 8004290:	f7ff fef0 	bl	8004074 <I2C_IsErrorOccurred>
 8004294:	2800      	cmp	r0, #0
 8004296:	d0ea      	beq.n	800426e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      return HAL_ERROR;
 8004298:	2001      	movs	r0, #1
}
 800429a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800429c:	2000      	movs	r0, #0
}
 800429e:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a0:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80042a2:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a8:	430a      	orrs	r2, r1
 80042aa:	646a      	str	r2, [r5, #68]	@ 0x44
      return HAL_ERROR;
 80042ac:	2001      	movs	r0, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b2:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
        return HAL_ERROR;
 80042b6:	e7f0      	b.n	800429a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
  return HAL_OK;
 80042b8:	2000      	movs	r0, #0
}
 80042ba:	4770      	bx	lr

080042bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80042bc:	6803      	ldr	r3, [r0, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
{
 80042c0:	b570      	push	{r4, r5, r6, lr}
 80042c2:	4604      	mov	r4, r0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80042c4:	0758      	lsls	r0, r3, #29
{
 80042c6:	460d      	mov	r5, r1
 80042c8:	4616      	mov	r6, r2
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80042ca:	d437      	bmi.n	800433c <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042cc:	4632      	mov	r2, r6
 80042ce:	4629      	mov	r1, r5
 80042d0:	4620      	mov	r0, r4
 80042d2:	f7ff fecf 	bl	8004074 <I2C_IsErrorOccurred>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80042d6:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d8:	b9e8      	cbnz	r0, 8004316 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	0691      	lsls	r1, r2, #26
 80042de:	d523      	bpl.n	8004328 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80042e0:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	f012 0210 	ands.w	r2, r2, #16
 80042e8:	d01d      	beq.n	8004326 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ea:	2120      	movs	r1, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ec:	2510      	movs	r5, #16
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80042ee:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f0:	61dd      	str	r5, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80042f2:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f4:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	4d18      	ldr	r5, [pc, #96]	@ (800435c <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 80042fa:	402a      	ands	r2, r5
 80042fc:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8004302:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004306:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800430a:	f7fe f897 	bl	800243c <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
      status = HAL_ERROR;
 8004312:	2001      	movs	r0, #1
}
 8004314:	bd70      	pop	{r4, r5, r6, pc}
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	069a      	lsls	r2, r3, #26
 800431a:	d4f6      	bmi.n	800430a <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800431c:	f7fe f88e 	bl	800243c <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	e7f5      	b.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004326:	6462      	str	r2, [r4, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004328:	f7fe f888 	bl	800243c <HAL_GetTick>
 800432c:	1b80      	subs	r0, r0, r6
 800432e:	4285      	cmp	r5, r0
 8004330:	6822      	ldr	r2, [r4, #0]
 8004332:	d305      	bcc.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
 8004334:	b125      	cbz	r5, 8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004336:	6993      	ldr	r3, [r2, #24]
 8004338:	075b      	lsls	r3, r3, #29
 800433a:	d5c7      	bpl.n	80042cc <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
  HAL_StatusTypeDef status = HAL_OK;
 800433c:	2000      	movs	r0, #0
}
 800433e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004340:	6993      	ldr	r3, [r2, #24]
 8004342:	f013 0304 	ands.w	r3, r3, #4
 8004346:	d1f6      	bne.n	8004336 <I2C_WaitOnRXNEFlagUntilTimeout+0x7a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	6c61      	ldr	r1, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800434a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800434e:	2020      	movs	r0, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004350:	4301      	orrs	r1, r0
 8004352:	6461      	str	r1, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004354:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004358:	6993      	ldr	r3, [r2, #24]
 800435a:	e7da      	b.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
 800435c:	fe00e800 	.word	0xfe00e800

08004360 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004360:	2800      	cmp	r0, #0
 8004362:	d054      	beq.n	800440e <HAL_I2C_Init+0xae>
{
 8004364:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004366:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800436a:	4604      	mov	r4, r0
 800436c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004370:	2b00      	cmp	r3, #0
 8004372:	d047      	beq.n	8004404 <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 8004374:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004376:	2224      	movs	r2, #36	@ 0x24
 8004378:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800437c:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800437e:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8004380:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004384:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8004388:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800438a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800438c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800438e:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004394:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004396:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004398:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800439a:	d009      	beq.n	80043b0 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800439c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043a0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043a2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043a4:	d107      	bne.n	80043b6 <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	e006      	b.n	80043be <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043b4:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043bc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043be:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043c0:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043c2:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 80043c6:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80043ca:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043cc:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043ce:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043d0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043d2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043d4:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043dc:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043de:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043e0:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043e2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043e4:	4301      	orrs	r1, r0
 80043e6:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	f041 0101 	orr.w	r1, r1, #1
 80043ee:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f0:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f4:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fa:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8004400:	4610      	mov	r0, r2
}
 8004402:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004404:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8004408:	f7fd fabc 	bl	8001984 <HAL_I2C_MspInit>
 800440c:	e7b2      	b.n	8004374 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800440e:	2001      	movs	r0, #1
}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop

08004414 <HAL_I2C_Master_Transmit>:
{
 8004414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800441a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800441e:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004420:	2b20      	cmp	r3, #32
{
 8004422:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004424:	f040 8090 	bne.w	8004548 <HAL_I2C_Master_Transmit+0x134>
    __HAL_LOCK(hi2c);
 8004428:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800442c:	2b01      	cmp	r3, #1
 800442e:	4604      	mov	r4, r0
 8004430:	f000 808a 	beq.w	8004548 <HAL_I2C_Master_Transmit+0x134>
 8004434:	f04f 0a01 	mov.w	sl, #1
 8004438:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800443c:	460f      	mov	r7, r1
 800443e:	4690      	mov	r8, r2
 8004440:	f7fd fffc 	bl	800243c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004444:	4652      	mov	r2, sl
    tickstart = HAL_GetTick();
 8004446:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004448:	9000      	str	r0, [sp, #0]
 800444a:	2319      	movs	r3, #25
 800444c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004450:	4620      	mov	r0, r4
 8004452:	f7ff fec5 	bl	80041e0 <I2C_WaitOnFlagUntilTimeout>
 8004456:	2800      	cmp	r0, #0
 8004458:	d172      	bne.n	8004540 <HAL_I2C_Master_Transmit+0x12c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800445a:	2321      	movs	r3, #33	@ 0x21
 800445c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004460:	2310      	movs	r3, #16
 8004462:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004466:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8004468:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800446c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800446e:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr  = pData;
 8004470:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004474:	b29b      	uxth	r3, r3
 8004476:	2bff      	cmp	r3, #255	@ 0xff
    hi2c->XferISR   = NULL;
 8004478:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800447a:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800447e:	d867      	bhi.n	8004550 <HAL_I2C_Master_Transmit+0x13c>
      hi2c->XferSize = hi2c->XferCount;
 8004480:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004482:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 8004484:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 808d 	bne.w	80045a6 <HAL_I2C_Master_Transmit+0x192>
  MODIFY_REG(hi2c->Instance->CR2, \
 800448c:	6853      	ldr	r3, [r2, #4]
 800448e:	494a      	ldr	r1, [pc, #296]	@ (80045b8 <HAL_I2C_Master_Transmit+0x1a4>)
 8004490:	400b      	ands	r3, r1
 8004492:	433b      	orrs	r3, r7
 8004494:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004498:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800449c:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 800449e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80044a0:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a2:	462a      	mov	r2, r5
 80044a4:	4631      	mov	r1, r6
 80044a6:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d038      	beq.n	800451e <HAL_I2C_Master_Transmit+0x10a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ac:	f7ff fe6c 	bl	8004188 <I2C_WaitOnTXISFlagUntilTimeout>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d145      	bne.n	8004540 <HAL_I2C_Master_Transmit+0x12c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044bc:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044be:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80044c0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80044c2:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80044cc:	3a01      	subs	r2, #1
 80044ce:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044d0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80044d2:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0e2      	beq.n	800449e <HAL_I2C_Master_Transmit+0x8a>
 80044d8:	2a00      	cmp	r2, #0
 80044da:	d1e0      	bne.n	800449e <HAL_I2C_Master_Transmit+0x8a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044dc:	2180      	movs	r1, #128	@ 0x80
 80044de:	9500      	str	r5, [sp, #0]
 80044e0:	4633      	mov	r3, r6
 80044e2:	4620      	mov	r0, r4
 80044e4:	f7ff fe7c 	bl	80041e0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044e8:	21ff      	movs	r1, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044ea:	bb48      	cbnz	r0, 8004540 <HAL_I2C_Master_Transmit+0x12c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80044ee:	f8df c0d0 	ldr.w	ip, [pc, #208]	@ 80045c0 <HAL_I2C_Master_Transmit+0x1ac>
 80044f2:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	428b      	cmp	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80044f8:	4660      	mov	r0, ip
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044fa:	d947      	bls.n	800458c <HAL_I2C_Master_Transmit+0x178>
  MODIFY_REG(hi2c->Instance->CR2, \
 80044fc:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044fe:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004500:	ea03 030c 	and.w	r3, r3, ip
 8004504:	433b      	orrs	r3, r7
 8004506:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800450a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800450e:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8004510:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004514:	462a      	mov	r2, r5
 8004516:	4631      	mov	r1, r6
 8004518:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1c6      	bne.n	80044ac <HAL_I2C_Master_Transmit+0x98>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451e:	f7ff fe9d 	bl	800425c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004522:	b968      	cbnz	r0, 8004540 <HAL_I2C_Master_Transmit+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004524:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004526:	4d25      	ldr	r5, [pc, #148]	@ (80045bc <HAL_I2C_Master_Transmit+0x1a8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004528:	2120      	movs	r1, #32
 800452a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	402a      	ands	r2, r5
 8004530:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004532:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004536:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800453a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800453e:	e000      	b.n	8004542 <HAL_I2C_Master_Transmit+0x12e>
      return HAL_ERROR;
 8004540:	2001      	movs	r0, #1
}
 8004542:	b002      	add	sp, #8
 8004544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004548:	2002      	movs	r0, #2
}
 800454a:	b002      	add	sp, #8
 800454c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004550:	23ff      	movs	r3, #255	@ 0xff
 8004552:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004554:	21fe      	movs	r1, #254	@ 0xfe
 8004556:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
      xfermode = I2C_RELOAD_MODE;
 800455a:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800455e:	f818 cb01 	ldrb.w	ip, [r8], #1
 8004562:	f8c2 c028 	str.w	ip, [r2, #40]	@ 0x28
      hi2c->XferSize--;
 8004566:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004568:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800456a:	f8df c04c 	ldr.w	ip, [pc, #76]	@ 80045b8 <HAL_I2C_Master_Transmit+0x1a4>
      hi2c->pBuffPtr++;
 800456e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004572:	3901      	subs	r1, #1
 8004574:	b289      	uxth	r1, r1
 8004576:	8561      	strh	r1, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004578:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800457a:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800457c:	ea01 010c 	and.w	r1, r1, ip
 8004580:	430b      	orrs	r3, r1
 8004582:	4303      	orrs	r3, r0
 8004584:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004588:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800458a:	e788      	b.n	800449e <HAL_I2C_Master_Transmit+0x8a>
          hi2c->XferSize = hi2c->XferCount;
 800458c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800458e:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8004590:	b29b      	uxth	r3, r3
 8004592:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004594:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004596:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800459a:	4001      	ands	r1, r0
 800459c:	430b      	orrs	r3, r1
 800459e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045a2:	6053      	str	r3, [r2, #4]
}
 80045a4:	e77b      	b.n	800449e <HAL_I2C_Master_Transmit+0x8a>
      hi2c->XferSize--;
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b299      	uxth	r1, r3
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045aa:	1c4b      	adds	r3, r1, #1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	041b      	lsls	r3, r3, #16
      xfermode = I2C_AUTOEND_MODE;
 80045b0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80045b4:	e7d3      	b.n	800455e <HAL_I2C_Master_Transmit+0x14a>
 80045b6:	bf00      	nop
 80045b8:	fc009800 	.word	0xfc009800
 80045bc:	fe00e800 	.word	0xfe00e800
 80045c0:	fc009c00 	.word	0xfc009c00

080045c4 <HAL_I2C_Master_Receive>:
{
 80045c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ca:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80045ce:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d0:	2b20      	cmp	r3, #32
{
 80045d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d4:	f040 8091 	bne.w	80046fa <HAL_I2C_Master_Receive+0x136>
    __HAL_LOCK(hi2c);
 80045d8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80045dc:	2b01      	cmp	r3, #1
 80045de:	4604      	mov	r4, r0
 80045e0:	f000 808b 	beq.w	80046fa <HAL_I2C_Master_Receive+0x136>
 80045e4:	f04f 0a01 	mov.w	sl, #1
 80045e8:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80045ec:	460f      	mov	r7, r1
 80045ee:	4691      	mov	r9, r2
 80045f0:	f7fd ff24 	bl	800243c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045f4:	4652      	mov	r2, sl
    tickstart = HAL_GetTick();
 80045f6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045f8:	9000      	str	r0, [sp, #0]
 80045fa:	2319      	movs	r3, #25
 80045fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004600:	4620      	mov	r0, r4
 8004602:	f7ff fded 	bl	80041e0 <I2C_WaitOnFlagUntilTimeout>
 8004606:	2800      	cmp	r0, #0
 8004608:	d173      	bne.n	80046f2 <HAL_I2C_Master_Receive+0x12e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800460a:	2322      	movs	r3, #34	@ 0x22
 800460c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004610:	2310      	movs	r3, #16
 8004612:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004616:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8004618:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800461c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800461e:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr  = pData;
 8004620:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004624:	b29b      	uxth	r3, r3
 8004626:	2bff      	cmp	r3, #255	@ 0xff
    hi2c->XferISR   = NULL;
 8004628:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800462a:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800462e:	d868      	bhi.n	8004702 <HAL_I2C_Master_Receive+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 8004630:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004632:	4840      	ldr	r0, [pc, #256]	@ (8004734 <HAL_I2C_Master_Receive+0x170>)
 8004634:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8004636:	b29b      	uxth	r3, r3
 8004638:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800463a:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800463c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004640:	4001      	ands	r1, r0
 8004642:	430b      	orrs	r3, r1
 8004644:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004648:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 800464c:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 800464e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004650:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004652:	462a      	mov	r2, r5
 8004654:	4631      	mov	r1, r6
 8004656:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8004658:	2b00      	cmp	r3, #0
 800465a:	d039      	beq.n	80046d0 <HAL_I2C_Master_Receive+0x10c>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465c:	f7ff fe2e 	bl	80042bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004660:	2800      	cmp	r0, #0
 8004662:	d146      	bne.n	80046f2 <HAL_I2C_Master_Receive+0x12e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800466a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800466c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800466e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8004670:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004672:	3b01      	subs	r3, #1
 8004674:	b29b      	uxth	r3, r3
 8004676:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004678:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800467a:	3a01      	subs	r2, #1
 800467c:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800467e:	3101      	adds	r1, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004680:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8004682:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004684:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0e1      	beq.n	800464e <HAL_I2C_Master_Receive+0x8a>
 800468a:	2a00      	cmp	r2, #0
 800468c:	d1df      	bne.n	800464e <HAL_I2C_Master_Receive+0x8a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800468e:	2180      	movs	r1, #128	@ 0x80
 8004690:	9500      	str	r5, [sp, #0]
 8004692:	4633      	mov	r3, r6
 8004694:	4620      	mov	r0, r4
 8004696:	f7ff fda3 	bl	80041e0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800469a:	21ff      	movs	r1, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800469c:	bb48      	cbnz	r0, 80046f2 <HAL_I2C_Master_Receive+0x12e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800469e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80046a0:	f8df c098 	ldr.w	ip, [pc, #152]	@ 800473c <HAL_I2C_Master_Receive+0x178>
 80046a4:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	428b      	cmp	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80046aa:	4660      	mov	r0, ip
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ac:	d935      	bls.n	800471a <HAL_I2C_Master_Receive+0x156>
  MODIFY_REG(hi2c->Instance->CR2, \
 80046ae:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046b0:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80046b2:	ea03 030c 	and.w	r3, r3, ip
 80046b6:	433b      	orrs	r3, r7
 80046b8:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c0:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 80046c2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c6:	462a      	mov	r2, r5
 80046c8:	4631      	mov	r1, r6
 80046ca:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1c5      	bne.n	800465c <HAL_I2C_Master_Receive+0x98>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d0:	f7ff fdc4 	bl	800425c <I2C_WaitOnSTOPFlagUntilTimeout>
 80046d4:	b968      	cbnz	r0, 80046f2 <HAL_I2C_Master_Receive+0x12e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80046d8:	4d17      	ldr	r5, [pc, #92]	@ (8004738 <HAL_I2C_Master_Receive+0x174>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046da:	2120      	movs	r1, #32
 80046dc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	402a      	ands	r2, r5
 80046e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80046e8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046ec:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80046f0:	e000      	b.n	80046f4 <HAL_I2C_Master_Receive+0x130>
      return HAL_ERROR;
 80046f2:	2001      	movs	r0, #1
}
 80046f4:	b002      	add	sp, #8
 80046f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80046fa:	2002      	movs	r0, #2
}
 80046fc:	b002      	add	sp, #8
 80046fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 8004702:	6853      	ldr	r3, [r2, #4]
 8004704:	490b      	ldr	r1, [pc, #44]	@ (8004734 <HAL_I2C_Master_Receive+0x170>)
 8004706:	400b      	ands	r3, r1
 8004708:	433b      	orrs	r3, r7
 800470a:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800470e:	f443 3392 	orr.w	r3, r3, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004712:	21ff      	movs	r1, #255	@ 0xff
 8004714:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004716:	6053      	str	r3, [r2, #4]
}
 8004718:	e799      	b.n	800464e <HAL_I2C_Master_Receive+0x8a>
          hi2c->XferSize = hi2c->XferCount;
 800471a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800471c:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800471e:	b29b      	uxth	r3, r3
 8004720:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004722:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004724:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004728:	4001      	ands	r1, r0
 800472a:	430b      	orrs	r3, r1
 800472c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004730:	6053      	str	r3, [r2, #4]
}
 8004732:	e78c      	b.n	800464e <HAL_I2C_Master_Receive+0x8a>
 8004734:	fc009800 	.word	0xfc009800
 8004738:	fe00e800 	.word	0xfe00e800
 800473c:	fc009c00 	.word	0xfc009c00

08004740 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004740:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8004744:	2a20      	cmp	r2, #32
 8004746:	d123      	bne.n	8004790 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004748:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004750:	2a01      	cmp	r2, #1
 8004752:	4603      	mov	r3, r0
 8004754:	d01c      	beq.n	8004790 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004756:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004758:	2024      	movs	r0, #36	@ 0x24
{
 800475a:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800475c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8004760:	6810      	ldr	r0, [r2, #0]
 8004762:	f020 0001 	bic.w	r0, r0, #1
 8004766:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004768:	6810      	ldr	r0, [r2, #0]
 800476a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800476e:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004770:	6810      	ldr	r0, [r2, #0]
 8004772:	4301      	orrs	r1, r0
 8004774:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004776:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004778:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 800477c:	f041 0101 	orr.w	r1, r1, #1
 8004780:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004782:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004786:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 800478a:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 800478c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8004790:	2002      	movs	r0, #2
}
 8004792:	4770      	bx	lr

08004794 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004794:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8004798:	2a20      	cmp	r2, #32
 800479a:	d122      	bne.n	80047e2 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 800479c:	b500      	push	{lr}
 800479e:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a2:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80047a6:	2a01      	cmp	r2, #1
 80047a8:	4603      	mov	r3, r0
 80047aa:	d01c      	beq.n	80047e6 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ac:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047ae:	2024      	movs	r0, #36	@ 0x24
 80047b0:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 80047b4:	6810      	ldr	r0, [r2, #0]
 80047b6:	f020 0001 	bic.w	r0, r0, #1
 80047ba:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047bc:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047be:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047c2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047c6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047c8:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ca:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 80047ce:	f041 0101 	orr.w	r1, r1, #1
 80047d2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80047d8:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 80047dc:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 80047de:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80047e2:	2002      	movs	r0, #2
}
 80047e4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80047e6:	2002      	movs	r0, #2
}
 80047e8:	f85d fb04 	ldr.w	pc, [sp], #4

080047ec <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ec:	4a35      	ldr	r2, [pc, #212]	@ (80048c4 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80047ee:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047f0:	b960      	cbnz	r0, 800480c <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047fa:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047fe:	d01b      	beq.n	8004838 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004808:	2000      	movs	r0, #0
}
 800480a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800480c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004810:	d006      	beq.n	8004820 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004812:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800481a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800481c:	2000      	movs	r0, #0
}
 800481e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004828:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800482c:	d029      	beq.n	8004882 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800482e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004832:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004836:	e7f1      	b.n	800481c <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800483c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004840:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004842:	4821      	ldr	r0, [pc, #132]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004844:	4921      	ldr	r1, [pc, #132]	@ (80048cc <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004846:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800484a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800484e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004850:	6803      	ldr	r3, [r0, #0]
 8004852:	2032      	movs	r0, #50	@ 0x32
 8004854:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004858:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800485a:	fba1 1303 	umull	r1, r3, r1, r3
 800485e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004860:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004862:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004866:	d506      	bpl.n	8004876 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004868:	e000      	b.n	800486c <HAL_PWREx_ControlVoltageScaling+0x80>
 800486a:	b123      	cbz	r3, 8004876 <HAL_PWREx_ControlVoltageScaling+0x8a>
 800486c:	6951      	ldr	r1, [r2, #20]
 800486e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004870:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004874:	d4f9      	bmi.n	800486a <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004876:	4b13      	ldr	r3, [pc, #76]	@ (80048c4 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	055b      	lsls	r3, r3, #21
 800487c:	d5ce      	bpl.n	800481c <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 800487e:	2003      	movs	r0, #3
 8004880:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004886:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800488a:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800488c:	480e      	ldr	r0, [pc, #56]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800488e:	490f      	ldr	r1, [pc, #60]	@ (80048cc <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004890:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004894:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004898:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800489a:	6803      	ldr	r3, [r0, #0]
 800489c:	2032      	movs	r0, #50	@ 0x32
 800489e:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a2:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048a4:	fba1 1303 	umull	r1, r3, r1, r3
 80048a8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048aa:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048ac:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048b0:	d5e1      	bpl.n	8004876 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80048b2:	e001      	b.n	80048b8 <HAL_PWREx_ControlVoltageScaling+0xcc>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0de      	beq.n	8004876 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80048b8:	6951      	ldr	r1, [r2, #20]
 80048ba:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80048bc:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c0:	d5d9      	bpl.n	8004876 <HAL_PWREx_ControlVoltageScaling+0x8a>
 80048c2:	e7f7      	b.n	80048b4 <HAL_PWREx_ControlVoltageScaling+0xc8>
 80048c4:	40007000 	.word	0x40007000
 80048c8:	20000008 	.word	0x20000008
 80048cc:	431bde83 	.word	0x431bde83

080048d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048d0:	4a02      	ldr	r2, [pc, #8]	@ (80048dc <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80048d2:	6893      	ldr	r3, [r2, #8]
 80048d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048d8:	6093      	str	r3, [r2, #8]
}
 80048da:	4770      	bx	lr
 80048dc:	40007000 	.word	0x40007000

080048e0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048e0:	2800      	cmp	r0, #0
 80048e2:	f000 81bd 	beq.w	8004c60 <HAL_RCC_OscConfig+0x380>
{
 80048e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ea:	6803      	ldr	r3, [r0, #0]
 80048ec:	07d9      	lsls	r1, r3, #31
{
 80048ee:	b082      	sub	sp, #8
 80048f0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f2:	d512      	bpl.n	800491a <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048f4:	49a6      	ldr	r1, [pc, #664]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 80048f6:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f8:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fa:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048fe:	2a0c      	cmp	r2, #12
 8004900:	f000 80d0 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x1c4>
 8004904:	2a08      	cmp	r2, #8
 8004906:	f040 80d2 	bne.w	8004aae <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490a:	4aa1      	ldr	r2, [pc, #644]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	0392      	lsls	r2, r2, #14
 8004910:	d503      	bpl.n	800491a <HAL_RCC_OscConfig+0x3a>
 8004912:	6862      	ldr	r2, [r4, #4]
 8004914:	2a00      	cmp	r2, #0
 8004916:	f000 8137 	beq.w	8004b88 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800491a:	079a      	lsls	r2, r3, #30
 800491c:	d522      	bpl.n	8004964 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800491e:	4a9c      	ldr	r2, [pc, #624]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 8004920:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004922:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004924:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004928:	2b0c      	cmp	r3, #12
 800492a:	f000 80f8 	beq.w	8004b1e <HAL_RCC_OscConfig+0x23e>
 800492e:	2b04      	cmp	r3, #4
 8004930:	f040 80fa 	bne.w	8004b28 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004934:	4b96      	ldr	r3, [pc, #600]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	055b      	lsls	r3, r3, #21
 800493a:	d503      	bpl.n	8004944 <HAL_RCC_OscConfig+0x64>
 800493c:	68e3      	ldr	r3, [r4, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8122 	beq.w	8004b88 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004944:	4a92      	ldr	r2, [pc, #584]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 8004946:	6920      	ldr	r0, [r4, #16]
 8004948:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800494a:	4992      	ldr	r1, [pc, #584]	@ (8004b94 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004950:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004954:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004956:	6808      	ldr	r0, [r1, #0]
 8004958:	f7fd fd2e 	bl	80023b8 <HAL_InitTick>
 800495c:	2800      	cmp	r0, #0
 800495e:	f040 8113 	bne.w	8004b88 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	071a      	lsls	r2, r3, #28
 8004966:	d519      	bpl.n	800499c <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004968:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496a:	4d89      	ldr	r5, [pc, #548]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80c2 	beq.w	8004af6 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8004972:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd fd5d 	bl	800243c <HAL_GetTick>
 8004982:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004984:	e005      	b.n	8004992 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004986:	f7fd fd59 	bl	800243c <HAL_GetTick>
 800498a:	1b80      	subs	r0, r0, r6
 800498c:	2802      	cmp	r0, #2
 800498e:	f200 8117 	bhi.w	8004bc0 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004992:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004996:	079b      	lsls	r3, r3, #30
 8004998:	d5f5      	bpl.n	8004986 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	075d      	lsls	r5, r3, #29
 800499e:	d541      	bpl.n	8004a24 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 80049a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049a4:	00d0      	lsls	r0, r2, #3
 80049a6:	f100 810f 	bmi.w	8004bc8 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80049b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80049b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80049bc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049be:	4e76      	ldr	r6, [pc, #472]	@ (8004b98 <HAL_RCC_OscConfig+0x2b8>)
 80049c0:	6833      	ldr	r3, [r6, #0]
 80049c2:	05d9      	lsls	r1, r3, #23
 80049c4:	f140 812e 	bpl.w	8004c24 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	68a3      	ldr	r3, [r4, #8]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	f000 80fe 	beq.w	8004bcc <HAL_RCC_OscConfig+0x2ec>
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	f000 8184 	beq.w	8004cde <HAL_RCC_OscConfig+0x3fe>
 80049d6:	4e6e      	ldr	r6, [pc, #440]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 80049d8:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 80049e4:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 80049e8:	f022 0204 	bic.w	r2, r2, #4
 80049ec:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f040 80f2 	bne.w	8004bda <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f6:	f7fd fd21 	bl	800243c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fa:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80049fe:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a00:	e005      	b.n	8004a0e <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a02:	f7fd fd1b 	bl	800243c <HAL_GetTick>
 8004a06:	1bc0      	subs	r0, r0, r7
 8004a08:	4540      	cmp	r0, r8
 8004a0a:	f200 80d9 	bhi.w	8004bc0 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a0e:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8004a12:	0799      	lsls	r1, r3, #30
 8004a14:	d4f5      	bmi.n	8004a02 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a16:	b125      	cbz	r5, 8004a22 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a18:	4a5d      	ldr	r2, [pc, #372]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 8004a1a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	069a      	lsls	r2, r3, #26
 8004a26:	d518      	bpl.n	8004a5a <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a28:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a2a:	4d59      	ldr	r5, [pc, #356]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80e5 	beq.w	8004bfc <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8004a32:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3e:	f7fd fcfd 	bl	800243c <HAL_GetTick>
 8004a42:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a44:	e005      	b.n	8004a52 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a46:	f7fd fcf9 	bl	800243c <HAL_GetTick>
 8004a4a:	1b80      	subs	r0, r0, r6
 8004a4c:	2802      	cmp	r0, #2
 8004a4e:	f200 80b7 	bhi.w	8004bc0 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a52:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004a56:	079b      	lsls	r3, r3, #30
 8004a58:	d5f5      	bpl.n	8004a46 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a5a:	69e3      	ldr	r3, [r4, #28]
 8004a5c:	b1f3      	cbz	r3, 8004a9c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a5e:	4d4c      	ldr	r5, [pc, #304]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 8004a60:	68aa      	ldr	r2, [r5, #8]
 8004a62:	f002 020c 	and.w	r2, r2, #12
 8004a66:	2a0c      	cmp	r2, #12
 8004a68:	f000 8147 	beq.w	8004cfa <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a6c:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6e:	682b      	ldr	r3, [r5, #0]
 8004a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a74:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a76:	f000 80f5 	beq.w	8004c64 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7a:	f7fd fcdf 	bl	800243c <HAL_GetTick>
 8004a7e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a80:	e005      	b.n	8004a8e <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fd fcdb 	bl	800243c <HAL_GetTick>
 8004a86:	1b00      	subs	r0, r0, r4
 8004a88:	2802      	cmp	r0, #2
 8004a8a:	f200 8099 	bhi.w	8004bc0 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	d4f6      	bmi.n	8004a82 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a94:	68ea      	ldr	r2, [r5, #12]
 8004a96:	4b41      	ldr	r3, [pc, #260]	@ (8004b9c <HAL_RCC_OscConfig+0x2bc>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8004a9c:	2000      	movs	r0, #0
}
 8004a9e:	b002      	add	sp, #8
 8004aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa4:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004aa8:	2903      	cmp	r1, #3
 8004aaa:	f43f af2e 	beq.w	800490a <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aae:	6863      	ldr	r3, [r4, #4]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab4:	d055      	beq.n	8004b62 <HAL_RCC_OscConfig+0x282>
 8004ab6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aba:	f000 80c4 	beq.w	8004c46 <HAL_RCC_OscConfig+0x366>
 8004abe:	4d34      	ldr	r5, [pc, #208]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 8004ac0:	682a      	ldr	r2, [r5, #0]
 8004ac2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ac6:	602a      	str	r2, [r5, #0]
 8004ac8:	682a      	ldr	r2, [r5, #0]
 8004aca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ace:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d14b      	bne.n	8004b6c <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8004ad4:	f7fd fcb2 	bl	800243c <HAL_GetTick>
 8004ad8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ada:	e004      	b.n	8004ae6 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fd fcae 	bl	800243c <HAL_GetTick>
 8004ae0:	1b80      	subs	r0, r0, r6
 8004ae2:	2864      	cmp	r0, #100	@ 0x64
 8004ae4:	d86c      	bhi.n	8004bc0 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae6:	682b      	ldr	r3, [r5, #0]
 8004ae8:	0399      	lsls	r1, r3, #14
 8004aea:	d4f7      	bmi.n	8004adc <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	079a      	lsls	r2, r3, #30
 8004af0:	f57f af38 	bpl.w	8004964 <HAL_RCC_OscConfig+0x84>
 8004af4:	e713      	b.n	800491e <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8004af6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004b02:	f7fd fc9b 	bl	800243c <HAL_GetTick>
 8004b06:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b08:	e004      	b.n	8004b14 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b0a:	f7fd fc97 	bl	800243c <HAL_GetTick>
 8004b0e:	1b80      	subs	r0, r0, r6
 8004b10:	2802      	cmp	r0, #2
 8004b12:	d855      	bhi.n	8004bc0 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b14:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004b18:	079f      	lsls	r7, r3, #30
 8004b1a:	d4f6      	bmi.n	8004b0a <HAL_RCC_OscConfig+0x22a>
 8004b1c:	e73d      	b.n	800499a <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b1e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b22:	2a02      	cmp	r2, #2
 8004b24:	f43f af06 	beq.w	8004934 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b28:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004b2a:	4d19      	ldr	r5, [pc, #100]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d037      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b36:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b38:	f7fd fc80 	bl	800243c <HAL_GetTick>
 8004b3c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b3e:	e004      	b.n	8004b4a <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b40:	f7fd fc7c 	bl	800243c <HAL_GetTick>
 8004b44:	1b80      	subs	r0, r0, r6
 8004b46:	2802      	cmp	r0, #2
 8004b48:	d83a      	bhi.n	8004bc0 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	055f      	lsls	r7, r3, #21
 8004b4e:	d5f7      	bpl.n	8004b40 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b50:	686b      	ldr	r3, [r5, #4]
 8004b52:	6922      	ldr	r2, [r4, #16]
 8004b54:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004b58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b5c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	e700      	b.n	8004964 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b62:	4a0b      	ldr	r2, [pc, #44]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 8004b64:	6813      	ldr	r3, [r2, #0]
 8004b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b6c:	f7fd fc66 	bl	800243c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b70:	4e07      	ldr	r6, [pc, #28]	@ (8004b90 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004b72:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b74:	e004      	b.n	8004b80 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b76:	f7fd fc61 	bl	800243c <HAL_GetTick>
 8004b7a:	1b40      	subs	r0, r0, r5
 8004b7c:	2864      	cmp	r0, #100	@ 0x64
 8004b7e:	d81f      	bhi.n	8004bc0 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b80:	6833      	ldr	r3, [r6, #0]
 8004b82:	039f      	lsls	r7, r3, #14
 8004b84:	d5f7      	bpl.n	8004b76 <HAL_RCC_OscConfig+0x296>
 8004b86:	e7b1      	b.n	8004aec <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8004b88:	2001      	movs	r0, #1
}
 8004b8a:	b002      	add	sp, #8
 8004b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b90:	40021000 	.word	0x40021000
 8004b94:	20000018 	.word	0x20000018
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ba6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fc48 	bl	800243c <HAL_GetTick>
 8004bac:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bae:	682b      	ldr	r3, [r5, #0]
 8004bb0:	0559      	lsls	r1, r3, #21
 8004bb2:	f57f aed6 	bpl.w	8004962 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb6:	f7fd fc41 	bl	800243c <HAL_GetTick>
 8004bba:	1b80      	subs	r0, r0, r6
 8004bbc:	2802      	cmp	r0, #2
 8004bbe:	d9f6      	bls.n	8004bae <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8004bc0:	2003      	movs	r0, #3
}
 8004bc2:	b002      	add	sp, #8
 8004bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004bc8:	2500      	movs	r5, #0
 8004bca:	e6f8      	b.n	80049be <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bcc:	4a65      	ldr	r2, [pc, #404]	@ (8004d64 <HAL_RCC_OscConfig+0x484>)
 8004bce:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004bda:	f7fd fc2f 	bl	800243c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bde:	4f61      	ldr	r7, [pc, #388]	@ (8004d64 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8004be0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be6:	e004      	b.n	8004bf2 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fd fc28 	bl	800243c <HAL_GetTick>
 8004bec:	1b80      	subs	r0, r0, r6
 8004bee:	4540      	cmp	r0, r8
 8004bf0:	d8e6      	bhi.n	8004bc0 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004bf6:	079b      	lsls	r3, r3, #30
 8004bf8:	d5f6      	bpl.n	8004be8 <HAL_RCC_OscConfig+0x308>
 8004bfa:	e70c      	b.n	8004a16 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8004bfc:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004c08:	f7fd fc18 	bl	800243c <HAL_GetTick>
 8004c0c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c0e:	e004      	b.n	8004c1a <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c10:	f7fd fc14 	bl	800243c <HAL_GetTick>
 8004c14:	1b80      	subs	r0, r0, r6
 8004c16:	2802      	cmp	r0, #2
 8004c18:	d8d2      	bhi.n	8004bc0 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c1a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004c1e:	079f      	lsls	r7, r3, #30
 8004c20:	d4f6      	bmi.n	8004c10 <HAL_RCC_OscConfig+0x330>
 8004c22:	e71a      	b.n	8004a5a <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c2a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004c2c:	f7fd fc06 	bl	800243c <HAL_GetTick>
 8004c30:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c32:	6833      	ldr	r3, [r6, #0]
 8004c34:	05da      	lsls	r2, r3, #23
 8004c36:	f53f aec7 	bmi.w	80049c8 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3a:	f7fd fbff 	bl	800243c <HAL_GetTick>
 8004c3e:	1bc0      	subs	r0, r0, r7
 8004c40:	2802      	cmp	r0, #2
 8004c42:	d9f6      	bls.n	8004c32 <HAL_RCC_OscConfig+0x352>
 8004c44:	e7bc      	b.n	8004bc0 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c4a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004c5c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c5e:	e785      	b.n	8004b6c <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8004c60:	2001      	movs	r0, #1
}
 8004c62:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004c64:	f7fd fbea 	bl	800243c <HAL_GetTick>
 8004c68:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c6a:	e004      	b.n	8004c76 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fd fbe6 	bl	800243c <HAL_GetTick>
 8004c70:	1b80      	subs	r0, r0, r6
 8004c72:	2802      	cmp	r0, #2
 8004c74:	d8a4      	bhi.n	8004bc0 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	0199      	lsls	r1, r3, #6
 8004c7a:	d4f7      	bmi.n	8004c6c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c7c:	68e9      	ldr	r1, [r5, #12]
 8004c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d68 <HAL_RCC_OscConfig+0x488>)
 8004c80:	6a22      	ldr	r2, [r4, #32]
 8004c82:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c84:	4e37      	ldr	r6, [pc, #220]	@ (8004d64 <HAL_RCC_OscConfig+0x484>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c86:	400b      	ands	r3, r1
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8004c8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c92:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004c96:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8004c9a:	3801      	subs	r0, #1
 8004c9c:	0849      	lsrs	r1, r1, #1
 8004c9e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004ca2:	3901      	subs	r1, #1
 8004ca4:	0852      	lsrs	r2, r2, #1
 8004ca6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004caa:	3a01      	subs	r2, #1
 8004cac:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004cb0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cb8:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cba:	68eb      	ldr	r3, [r5, #12]
 8004cbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cc0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004cc2:	f7fd fbbb 	bl	800243c <HAL_GetTick>
 8004cc6:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc8:	e005      	b.n	8004cd6 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fd fbb7 	bl	800243c <HAL_GetTick>
 8004cce:	1b00      	subs	r0, r0, r4
 8004cd0:	2802      	cmp	r0, #2
 8004cd2:	f63f af75 	bhi.w	8004bc0 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd6:	6833      	ldr	r3, [r6, #0]
 8004cd8:	019a      	lsls	r2, r3, #6
 8004cda:	d5f6      	bpl.n	8004cca <HAL_RCC_OscConfig+0x3ea>
 8004cdc:	e6de      	b.n	8004a9c <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cde:	4b21      	ldr	r3, [pc, #132]	@ (8004d64 <HAL_RCC_OscConfig+0x484>)
 8004ce0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004ce4:	f042 0204 	orr.w	r2, r2, #4
 8004ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004cec:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cf8:	e76f      	b.n	8004bda <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	f43f af44 	beq.w	8004b88 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8004d00:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	6a22      	ldr	r2, [r4, #32]
 8004d04:	f003 0103 	and.w	r1, r3, #3
 8004d08:	4291      	cmp	r1, r2
 8004d0a:	f47f af3d 	bne.w	8004b88 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d0e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004d10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d14:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d16:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004d1a:	f47f af35 	bne.w	8004b88 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d1e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004d20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d24:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004d28:	f47f af2e 	bne.w	8004b88 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d2c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004d2e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d32:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004d36:	f47f af27 	bne.w	8004b88 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d3a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004d3c:	0852      	lsrs	r2, r2, #1
 8004d3e:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8004d42:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d44:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004d48:	f47f af1e 	bne.w	8004b88 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d4c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004d4e:	0852      	lsrs	r2, r2, #1
 8004d50:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004d54:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d56:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004d5a:	bf14      	ite	ne
 8004d5c:	2001      	movne	r0, #1
 8004d5e:	2000      	moveq	r0, #0
 8004d60:	e69d      	b.n	8004a9e <HAL_RCC_OscConfig+0x1be>
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000
 8004d68:	019f800c 	.word	0x019f800c

08004d6c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6e:	b087      	sub	sp, #28
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	9303      	str	r3, [sp, #12]
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8004d74:	2502      	movs	r5, #2
 8004d76:	2300      	movs	r3, #0
 8004d78:	e9cd 5301 	strd	r5, r3, [sp, #4]
  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8004d7c:	4f0f      	ldr	r7, [pc, #60]	@ (8004dbc <HAL_RCC_MCOConfig+0x50>)
{
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4616      	mov	r6, r2
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8004d82:	f3c0 4003 	ubfx	r0, r0, #16, #4
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8004d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d88:	2301      	movs	r3, #1
 8004d8a:	4083      	lsls	r3, r0
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8004d90:	f500 1090 	add.w	r0, r0, #1179648	@ 0x120000

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8004d94:	b2a3      	uxth	r3, r4
 8004d96:	9300      	str	r3, [sp, #0]
{
 8004d98:	460d      	mov	r5, r1
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8004d9a:	f3c4 5307 	ubfx	r3, r4, #20, #8
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8004d9e:	0280      	lsls	r0, r0, #10
 8004da0:	4669      	mov	r1, sp
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8004da2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8004da4:	f7ff f852 	bl	8003e4c <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8004da8:	00e3      	lsls	r3, r4, #3
 8004daa:	d405      	bmi.n	8004db8 <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004db2:	4333      	orrs	r3, r6
 8004db4:	432b      	orrs	r3, r5
 8004db6:	60bb      	str	r3, [r7, #8]
  }
}
 8004db8:	b007      	add	sp, #28
 8004dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dbc:	40021000 	.word	0x40021000

08004dc0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004dc0:	4b18      	ldr	r3, [pc, #96]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x64>)
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	f002 020c 	and.w	r2, r2, #12
 8004dc8:	2a04      	cmp	r2, #4
 8004dca:	d026      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	f002 020c 	and.w	r2, r2, #12
 8004dd2:	2a08      	cmp	r2, #8
 8004dd4:	d023      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	f002 020c 	and.w	r2, r2, #12
 8004ddc:	2a0c      	cmp	r2, #12
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8004de0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8004de2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004de4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004de6:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004de8:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dea:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8004dee:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df0:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df4:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df8:	bf0c      	ite	eq
 8004dfa:	4b0b      	ldreq	r3, [pc, #44]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dfc:	4b0b      	ldrne	r3, [pc, #44]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dfe:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e04:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e08:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x64>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004e10:	3301      	adds	r3, #1
 8004e12:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004e14:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8004e18:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004e1a:	4804      	ldr	r0, [pc, #16]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x6c>)
 8004e1c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8004e1e:	4802      	ldr	r0, [pc, #8]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x68>)
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
 8004e28:	017d7840 	.word	0x017d7840
 8004e2c:	00f42400 	.word	0x00f42400

08004e30 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004e30:	2800      	cmp	r0, #0
 8004e32:	f000 80ee 	beq.w	8005012 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e36:	4a78      	ldr	r2, [pc, #480]	@ (8005018 <HAL_RCC_ClockConfig+0x1e8>)
{
 8004e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	428b      	cmp	r3, r1
 8004e44:	460d      	mov	r5, r1
 8004e46:	4604      	mov	r4, r0
 8004e48:	d20c      	bcs.n	8004e64 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	f023 030f 	bic.w	r3, r3, #15
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e54:	6813      	ldr	r3, [r2, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	428b      	cmp	r3, r1
 8004e5c:	d002      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004e5e:	2001      	movs	r0, #1
}
 8004e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	07df      	lsls	r7, r3, #31
 8004e68:	d569      	bpl.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e6a:	6867      	ldr	r7, [r4, #4]
 8004e6c:	2f03      	cmp	r7, #3
 8004e6e:	f000 80a0 	beq.w	8004fb2 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e72:	4b6a      	ldr	r3, [pc, #424]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e74:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e76:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e78:	f000 8097 	beq.w	8004faa <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e7c:	055b      	lsls	r3, r3, #21
 8004e7e:	d5ee      	bpl.n	8004e5e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e80:	f7ff ff9e 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8004e84:	4b66      	ldr	r3, [pc, #408]	@ (8005020 <HAL_RCC_ClockConfig+0x1f0>)
 8004e86:	4298      	cmp	r0, r3
 8004e88:	f240 80c0 	bls.w	800500c <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e8c:	4a63      	ldr	r2, [pc, #396]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
 8004e8e:	6893      	ldr	r3, [r2, #8]
 8004e90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e9a:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e9e:	4e5f      	ldr	r6, [pc, #380]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
 8004ea0:	68b3      	ldr	r3, [r6, #8]
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	433b      	orrs	r3, r7
 8004ea8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004eaa:	f7fd fac7 	bl	800243c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eae:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004eb2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb4:	e004      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb6:	f7fd fac1 	bl	800243c <HAL_GetTick>
 8004eba:	1bc0      	subs	r0, r0, r7
 8004ebc:	4540      	cmp	r0, r8
 8004ebe:	d871      	bhi.n	8004fa4 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec0:	68b3      	ldr	r3, [r6, #8]
 8004ec2:	6862      	ldr	r2, [r4, #4]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004ecc:	d1f3      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	079f      	lsls	r7, r3, #30
 8004ed2:	d436      	bmi.n	8004f42 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8004ed4:	f1b9 0f00 	cmp.w	r9, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004eda:	68b3      	ldr	r3, [r6, #8]
 8004edc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ee0:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee2:	4e4d      	ldr	r6, [pc, #308]	@ (8005018 <HAL_RCC_ClockConfig+0x1e8>)
 8004ee4:	6833      	ldr	r3, [r6, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	42ab      	cmp	r3, r5
 8004eec:	d846      	bhi.n	8004f7c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	075a      	lsls	r2, r3, #29
 8004ef2:	d506      	bpl.n	8004f02 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef4:	4949      	ldr	r1, [pc, #292]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
 8004ef6:	68e0      	ldr	r0, [r4, #12]
 8004ef8:	688a      	ldr	r2, [r1, #8]
 8004efa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004efe:	4302      	orrs	r2, r0
 8004f00:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f02:	071b      	lsls	r3, r3, #28
 8004f04:	d507      	bpl.n	8004f16 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f06:	4a45      	ldr	r2, [pc, #276]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
 8004f08:	6921      	ldr	r1, [r4, #16]
 8004f0a:	6893      	ldr	r3, [r2, #8]
 8004f0c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004f10:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004f14:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f16:	f7ff ff53 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004f1a:	4a40      	ldr	r2, [pc, #256]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
 8004f1c:	4c41      	ldr	r4, [pc, #260]	@ (8005024 <HAL_RCC_ClockConfig+0x1f4>)
 8004f1e:	6892      	ldr	r2, [r2, #8]
 8004f20:	4941      	ldr	r1, [pc, #260]	@ (8005028 <HAL_RCC_ClockConfig+0x1f8>)
 8004f22:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004f26:	4603      	mov	r3, r0
 8004f28:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8004f2a:	4840      	ldr	r0, [pc, #256]	@ (800502c <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f2c:	f002 021f 	and.w	r2, r2, #31
 8004f30:	40d3      	lsrs	r3, r2
 8004f32:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8004f34:	6800      	ldr	r0, [r0, #0]
}
 8004f36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8004f3a:	f7fd ba3d 	b.w	80023b8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3e:	079e      	lsls	r6, r3, #30
 8004f40:	d5cf      	bpl.n	8004ee2 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f42:	0758      	lsls	r0, r3, #29
 8004f44:	d504      	bpl.n	8004f50 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f46:	4935      	ldr	r1, [pc, #212]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
 8004f48:	688a      	ldr	r2, [r1, #8]
 8004f4a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004f4e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	0719      	lsls	r1, r3, #28
 8004f52:	d506      	bpl.n	8004f62 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f54:	4a31      	ldr	r2, [pc, #196]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
 8004f56:	6893      	ldr	r3, [r2, #8]
 8004f58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f5c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f60:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f62:	4a2e      	ldr	r2, [pc, #184]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
 8004f64:	68a1      	ldr	r1, [r4, #8]
 8004f66:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f68:	4e2b      	ldr	r6, [pc, #172]	@ (8005018 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f72:	6833      	ldr	r3, [r6, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	42ab      	cmp	r3, r5
 8004f7a:	d9b8      	bls.n	8004eee <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7c:	6833      	ldr	r3, [r6, #0]
 8004f7e:	f023 030f 	bic.w	r3, r3, #15
 8004f82:	432b      	orrs	r3, r5
 8004f84:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004f86:	f7fd fa59 	bl	800243c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004f8e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f90:	6833      	ldr	r3, [r6, #0]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	42ab      	cmp	r3, r5
 8004f98:	d0a9      	beq.n	8004eee <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9a:	f7fd fa4f 	bl	800243c <HAL_GetTick>
 8004f9e:	1bc0      	subs	r0, r0, r7
 8004fa0:	4540      	cmp	r0, r8
 8004fa2:	d9f5      	bls.n	8004f90 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8004fa4:	2003      	movs	r0, #3
}
 8004fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004faa:	039a      	lsls	r2, r3, #14
 8004fac:	f53f af68 	bmi.w	8004e80 <HAL_RCC_ClockConfig+0x50>
 8004fb0:	e755      	b.n	8004e5e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
 8004fb4:	6811      	ldr	r1, [r2, #0]
 8004fb6:	0188      	lsls	r0, r1, #6
 8004fb8:	f57f af51 	bpl.w	8004e5e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fbc:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fbe:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fc0:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8004fc2:	4e17      	ldr	r6, [pc, #92]	@ (8005020 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fc4:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8004fc8:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fca:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fce:	bf0c      	ite	eq
 8004fd0:	4817      	ldreq	r0, [pc, #92]	@ (8005030 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fd2:	4818      	ldrne	r0, [pc, #96]	@ (8005034 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fd4:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fd6:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fda:	4810      	ldr	r0, [pc, #64]	@ (800501c <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fdc:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004fe0:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fe4:	68c1      	ldr	r1, [r0, #12]
 8004fe6:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8004fea:	3101      	adds	r1, #1
 8004fec:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8004fee:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8004ff2:	42b2      	cmp	r2, r6
 8004ff4:	d90a      	bls.n	800500c <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ff6:	6882      	ldr	r2, [r0, #8]
 8004ff8:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8004ffc:	f43f af46 	beq.w	8004e8c <HAL_RCC_ClockConfig+0x5c>
 8005000:	0799      	lsls	r1, r3, #30
 8005002:	d503      	bpl.n	800500c <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005004:	68a3      	ldr	r3, [r4, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f43f af40 	beq.w	8004e8c <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800500c:	f04f 0900 	mov.w	r9, #0
 8005010:	e745      	b.n	8004e9e <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8005012:	2001      	movs	r0, #1
}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40022000 	.word	0x40022000
 800501c:	40021000 	.word	0x40021000
 8005020:	04c4b400 	.word	0x04c4b400
 8005024:	080077b4 	.word	0x080077b4
 8005028:	20000008 	.word	0x20000008
 800502c:	20000018 	.word	0x20000018
 8005030:	017d7840 	.word	0x017d7840
 8005034:	00f42400 	.word	0x00f42400

08005038 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005038:	4b01      	ldr	r3, [pc, #4]	@ (8005040 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000008 	.word	0x20000008

08005044 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005046:	4a06      	ldr	r2, [pc, #24]	@ (8005060 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005048:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800504a:	4906      	ldr	r1, [pc, #24]	@ (8005064 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800504c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005050:	6808      	ldr	r0, [r1, #0]
 8005052:	5cd3      	ldrb	r3, [r2, r3]
 8005054:	f003 031f 	and.w	r3, r3, #31
}
 8005058:	40d8      	lsrs	r0, r3
 800505a:	4770      	bx	lr
 800505c:	40021000 	.word	0x40021000
 8005060:	080077ac 	.word	0x080077ac
 8005064:	20000008 	.word	0x20000008

08005068 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005068:	4b05      	ldr	r3, [pc, #20]	@ (8005080 <HAL_RCC_GetPCLK2Freq+0x18>)
 800506a:	4a06      	ldr	r2, [pc, #24]	@ (8005084 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800506c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800506e:	4906      	ldr	r1, [pc, #24]	@ (8005088 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005070:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005074:	6808      	ldr	r0, [r1, #0]
 8005076:	5cd3      	ldrb	r3, [r2, r3]
 8005078:	f003 031f 	and.w	r3, r3, #31
}
 800507c:	40d8      	lsrs	r0, r3
 800507e:	4770      	bx	lr
 8005080:	40021000 	.word	0x40021000
 8005084:	080077ac 	.word	0x080077ac
 8005088:	20000008 	.word	0x20000008

0800508c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005090:	6803      	ldr	r3, [r0, #0]
{
 8005092:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005094:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8005098:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800509a:	d052      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509c:	4bac      	ldr	r3, [pc, #688]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800509e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80050a0:	00d5      	lsls	r5, r2, #3
 80050a2:	f140 813a 	bpl.w	800531a <HAL_RCCEx_PeriphCLKConfig+0x28e>
    FlagStatus       pwrclkchanged = RESET;
 80050a6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050a8:	4daa      	ldr	r5, [pc, #680]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050b2:	f7fd f9c3 	bl	800243c <HAL_GetTick>
 80050b6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050b8:	e005      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ba:	f7fd f9bf 	bl	800243c <HAL_GetTick>
 80050be:	1b83      	subs	r3, r0, r6
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	f200 8135 	bhi.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c6:	682b      	ldr	r3, [r5, #0]
 80050c8:	05d8      	lsls	r0, r3, #23
 80050ca:	d5f6      	bpl.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050cc:	4da0      	ldr	r5, [pc, #640]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ce:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050d0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050d4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80050d8:	d026      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80050da:	4293      	cmp	r3, r2
 80050dc:	d024      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050de:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050e2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80050e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ea:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050ee:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f6:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050fa:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050fe:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005100:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005104:	d510      	bpl.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fd f999 	bl	800243c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800510e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005110:	e005      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005112:	f7fd f993 	bl	800243c <HAL_GetTick>
 8005116:	1b80      	subs	r0, r0, r6
 8005118:	4540      	cmp	r0, r8
 800511a:	f200 8109 	bhi.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005122:	079b      	lsls	r3, r3, #30
 8005124:	d5f5      	bpl.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005126:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005128:	4989      	ldr	r1, [pc, #548]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800512a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800512e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005138:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800513a:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 800513c:	2f00      	cmp	r7, #0
 800513e:	f040 80fc 	bne.w	800533a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005142:	07dd      	lsls	r5, r3, #31
 8005144:	d508      	bpl.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005146:	4982      	ldr	r1, [pc, #520]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005148:	6865      	ldr	r5, [r4, #4]
 800514a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800514e:	f022 0203 	bic.w	r2, r2, #3
 8005152:	432a      	orrs	r2, r5
 8005154:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005158:	0799      	lsls	r1, r3, #30
 800515a:	d508      	bpl.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800515c:	497c      	ldr	r1, [pc, #496]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800515e:	68a5      	ldr	r5, [r4, #8]
 8005160:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005164:	f022 020c 	bic.w	r2, r2, #12
 8005168:	432a      	orrs	r2, r5
 800516a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800516e:	075a      	lsls	r2, r3, #29
 8005170:	d508      	bpl.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005172:	4977      	ldr	r1, [pc, #476]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005174:	68e5      	ldr	r5, [r4, #12]
 8005176:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800517a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800517e:	432a      	orrs	r2, r5
 8005180:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005184:	071f      	lsls	r7, r3, #28
 8005186:	d508      	bpl.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005188:	4971      	ldr	r1, [pc, #452]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800518a:	6925      	ldr	r5, [r4, #16]
 800518c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005190:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8005194:	432a      	orrs	r2, r5
 8005196:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800519a:	06de      	lsls	r6, r3, #27
 800519c:	d508      	bpl.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800519e:	496c      	ldr	r1, [pc, #432]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051a0:	6965      	ldr	r5, [r4, #20]
 80051a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80051a6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80051aa:	432a      	orrs	r2, r5
 80051ac:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051b0:	069d      	lsls	r5, r3, #26
 80051b2:	d508      	bpl.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b4:	4966      	ldr	r1, [pc, #408]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051b6:	69a5      	ldr	r5, [r4, #24]
 80051b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80051bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80051c0:	432a      	orrs	r2, r5
 80051c2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c6:	0659      	lsls	r1, r3, #25
 80051c8:	d508      	bpl.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ca:	4961      	ldr	r1, [pc, #388]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051cc:	69e5      	ldr	r5, [r4, #28]
 80051ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80051d2:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80051d6:	432a      	orrs	r2, r5
 80051d8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051dc:	061a      	lsls	r2, r3, #24
 80051de:	d508      	bpl.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051e0:	495b      	ldr	r1, [pc, #364]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051e2:	6a25      	ldr	r5, [r4, #32]
 80051e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80051e8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80051ec:	432a      	orrs	r2, r5
 80051ee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051f2:	05df      	lsls	r7, r3, #23
 80051f4:	d508      	bpl.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051f6:	4956      	ldr	r1, [pc, #344]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051f8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80051fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80051fe:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005202:	432a      	orrs	r2, r5
 8005204:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005208:	039e      	lsls	r6, r3, #14
 800520a:	d508      	bpl.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800520c:	4950      	ldr	r1, [pc, #320]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800520e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8005210:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8005214:	f022 0203 	bic.w	r2, r2, #3
 8005218:	432a      	orrs	r2, r5
 800521a:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800521e:	059d      	lsls	r5, r3, #22
 8005220:	d508      	bpl.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005222:	494b      	ldr	r1, [pc, #300]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005224:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8005226:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800522a:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800522e:	432a      	orrs	r2, r5
 8005230:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005234:	0559      	lsls	r1, r3, #21
 8005236:	d50b      	bpl.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005238:	4945      	ldr	r1, [pc, #276]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800523a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800523c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005240:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005244:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005246:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800524a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800524e:	d07a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005250:	051a      	lsls	r2, r3, #20
 8005252:	d50b      	bpl.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005254:	493e      	ldr	r1, [pc, #248]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005256:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8005258:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800525c:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005260:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005262:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005266:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800526a:	d075      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2cc>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800526c:	04df      	lsls	r7, r3, #19
 800526e:	d50b      	bpl.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005270:	4937      	ldr	r1, [pc, #220]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005272:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005274:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005278:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800527c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800527e:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005282:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005286:	d06c      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005288:	049e      	lsls	r6, r3, #18
 800528a:	d50b      	bpl.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800528c:	4930      	ldr	r1, [pc, #192]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800528e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8005290:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005294:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005298:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800529a:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800529e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052a2:	d063      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052a4:	045d      	lsls	r5, r3, #17
 80052a6:	d50b      	bpl.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052a8:	4929      	ldr	r1, [pc, #164]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052aa:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80052ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80052b0:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80052b4:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052b6:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ba:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052be:	d05a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052c0:	0419      	lsls	r1, r3, #16
 80052c2:	d50b      	bpl.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052c4:	4922      	ldr	r1, [pc, #136]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052c6:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80052c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80052cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80052d0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80052d2:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052d6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80052da:	d051      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80052dc:	03da      	lsls	r2, r3, #15
 80052de:	d50b      	bpl.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80052e0:	491b      	ldr	r1, [pc, #108]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052e2:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80052e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80052e8:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80052ec:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052ee:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80052f2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052f6:	d048      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052f8:	035b      	lsls	r3, r3, #13
 80052fa:	d50b      	bpl.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052fc:	4a14      	ldr	r2, [pc, #80]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052fe:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8005300:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8005304:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005308:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800530a:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800530e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005312:	d03f      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x308>
  }

#endif /* QUADSPI */

  return status;
}
 8005314:	b002      	add	sp, #8
 8005316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800531a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800531c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005320:	659a      	str	r2, [r3, #88]	@ 0x58
 8005322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800532c:	2701      	movs	r7, #1
 800532e:	e6bb      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005330:	6823      	ldr	r3, [r4, #0]
        status = ret;
 8005332:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 8005334:	2f00      	cmp	r7, #0
 8005336:	f43f af04 	beq.w	8005142 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4905      	ldr	r1, [pc, #20]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800533c:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800533e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005342:	658a      	str	r2, [r1, #88]	@ 0x58
 8005344:	e6fd      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005346:	68ca      	ldr	r2, [r1, #12]
 8005348:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800534c:	60ca      	str	r2, [r1, #12]
 800534e:	e77f      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8005350:	40021000 	.word	0x40021000
 8005354:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005358:	68ca      	ldr	r2, [r1, #12]
 800535a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800535e:	60ca      	str	r2, [r1, #12]
 8005360:	e784      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005362:	68ca      	ldr	r2, [r1, #12]
 8005364:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005368:	60ca      	str	r2, [r1, #12]
 800536a:	e78d      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800536c:	68ca      	ldr	r2, [r1, #12]
 800536e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005372:	60ca      	str	r2, [r1, #12]
 8005374:	e796      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005376:	68ca      	ldr	r2, [r1, #12]
 8005378:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800537c:	60ca      	str	r2, [r1, #12]
 800537e:	e79f      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005380:	68ca      	ldr	r2, [r1, #12]
 8005382:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005386:	60ca      	str	r2, [r1, #12]
 8005388:	e7a8      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800538a:	68ca      	ldr	r2, [r1, #12]
 800538c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005390:	60ca      	str	r2, [r1, #12]
 8005392:	e7b1      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005394:	68d3      	ldr	r3, [r2, #12]
 8005396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800539a:	60d3      	str	r3, [r2, #12]
}
 800539c:	b002      	add	sp, #8
 800539e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a2:	bf00      	nop

080053a4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80053a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053a6:	b083      	sub	sp, #12
 80053a8:	460c      	mov	r4, r1
 80053aa:	4615      	mov	r5, r2
 80053ac:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053ae:	f7fd f845 	bl	800243c <HAL_GetTick>
 80053b2:	4425      	add	r5, r4
 80053b4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80053b6:	f7fd f841 	bl	800243c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ba:	4b25      	ldr	r3, [pc, #148]	@ (8005450 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80053c2:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 80053c6:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053c8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ca:	6832      	ldr	r2, [r6, #0]
 80053cc:	e001      	b.n	80053d2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053ce:	1c63      	adds	r3, r4, #1
 80053d0:	d106      	bne.n	80053e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d2:	6893      	ldr	r3, [r2, #8]
 80053d4:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80053d8:	d1f9      	bne.n	80053ce <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 80053da:	4618      	mov	r0, r3
}
 80053dc:	b003      	add	sp, #12
 80053de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e0:	f7fd f82c 	bl	800243c <HAL_GetTick>
 80053e4:	1bc0      	subs	r0, r0, r7
 80053e6:	42a8      	cmp	r0, r5
 80053e8:	d208      	bcs.n	80053fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 80053ea:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80053ec:	2b00      	cmp	r3, #0
      count--;
 80053ee:	9b01      	ldr	r3, [sp, #4]
 80053f0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80053f4:	bf08      	it	eq
 80053f6:	2500      	moveq	r5, #0
      count--;
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	e7e6      	b.n	80053ca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fc:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005400:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005402:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005406:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800540a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800540c:	d013      	beq.n	8005436 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800540e:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8005410:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005414:	d107      	bne.n	8005426 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005424:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005426:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005428:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800542a:	f886 205d 	strb.w	r2, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800542e:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005432:	2003      	movs	r0, #3
 8005434:	e7d2      	b.n	80053dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005436:	68b2      	ldr	r2, [r6, #8]
 8005438:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800543c:	d002      	beq.n	8005444 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800543e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005442:	d1e4      	bne.n	800540e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	e7df      	b.n	800540e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800544e:	bf00      	nop
 8005450:	20000008 	.word	0x20000008

08005454 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005458:	b083      	sub	sp, #12
 800545a:	461f      	mov	r7, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800545c:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800545e:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 8005460:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005464:	4606      	mov	r6, r0
 8005466:	460c      	mov	r4, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005468:	f7fc ffe8 	bl	800243c <HAL_GetTick>
 800546c:	442f      	add	r7, r5
 800546e:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005470:	f7fc ffe4 	bl	800243c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005474:	4b2f      	ldr	r3, [pc, #188]	@ (8005534 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe0>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005476:	f8d6 9000 	ldr.w	r9, [r6]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005480:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005484:	0d1b      	lsrs	r3, r3, #20
 8005486:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 800548a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800548c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800548e:	464a      	mov	r2, r9
 8005490:	e001      	b.n	8005496 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x42>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8005492:	1c6b      	adds	r3, r5, #1
 8005494:	d10e      	bne.n	80054b4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
  while ((hspi->Instance->SR & Fifo) != State)
 8005496:	6893      	ldr	r3, [r2, #8]
 8005498:	4023      	ands	r3, r4
 800549a:	d01d      	beq.n	80054d8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x84>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800549c:	f5b4 6fc0 	cmp.w	r4, #1536	@ 0x600
 80054a0:	d1f7      	bne.n	8005492 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3e>
      tmpreg8 = *ptmpreg8;
 80054a2:	f899 300c 	ldrb.w	r3, [r9, #12]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80054ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 80054b0:	1c6b      	adds	r3, r5, #1
 80054b2:	d0f0      	beq.n	8005496 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054b4:	f7fc ffc2 	bl	800243c <HAL_GetTick>
 80054b8:	eba0 0008 	sub.w	r0, r0, r8
 80054bc:	42b8      	cmp	r0, r7
 80054be:	d20f      	bcs.n	80054e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054c0:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054c2:	6832      	ldr	r2, [r6, #0]
      {
        tmp_timeout = 0U;
 80054c4:	2b00      	cmp	r3, #0
      }
      count--;
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80054cc:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80054ce:	6893      	ldr	r3, [r2, #8]
        tmp_timeout = 0U;
 80054d0:	bf08      	it	eq
 80054d2:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 80054d4:	4023      	ands	r3, r4
 80054d6:	d1e1      	bne.n	800549c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x48>
    }
  }

  return HAL_OK;
 80054d8:	4618      	mov	r0, r3
}
 80054da:	b003      	add	sp, #12
 80054dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e0:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054e4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e6:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054ee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f0:	d013      	beq.n	800551a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054f2:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 80054f4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80054f8:	d107      	bne.n	800550a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb6>
          SPI_RESET_CRC(hspi);
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005508:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800550a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800550c:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800550e:	f886 205d 	strb.w	r2, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005512:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005516:	2003      	movs	r0, #3
 8005518:	e7df      	b.n	80054da <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800551a:	68b2      	ldr	r2, [r6, #8]
 800551c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005520:	d002      	beq.n	8005528 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005522:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005526:	d1e4      	bne.n	80054f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e7df      	b.n	80054f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
 8005532:	bf00      	nop
 8005534:	20000008 	.word	0x20000008

08005538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800553a:	4613      	mov	r3, r2
{
 800553c:	460d      	mov	r5, r1
 800553e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005540:	460a      	mov	r2, r1
 8005542:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8005546:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005548:	f7ff ff84 	bl	8005454 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800554c:	b970      	cbnz	r0, 800556c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800554e:	4632      	mov	r2, r6
 8005550:	4629      	mov	r1, r5
 8005552:	4620      	mov	r0, r4
 8005554:	f7ff ff26 	bl	80053a4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005558:	b940      	cbnz	r0, 800556c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800555a:	4633      	mov	r3, r6
 800555c:	462a      	mov	r2, r5
 800555e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff ff76 	bl	8005454 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005568:	b900      	cbnz	r0, 800556c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800556a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800556c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800556e:	f043 0320 	orr.w	r3, r3, #32
 8005572:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005574:	2003      	movs	r0, #3
}
 8005576:	bd70      	pop	{r4, r5, r6, pc}

08005578 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005578:	2800      	cmp	r0, #0
 800557a:	d077      	beq.n	800566c <HAL_SPI_Init+0xf4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800557c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800557e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005582:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005584:	2a00      	cmp	r2, #0
 8005586:	d057      	beq.n	8005638 <HAL_SPI_Init+0xc0>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005588:	2300      	movs	r3, #0
 800558a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800558e:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005592:	2100      	movs	r1, #0
 8005594:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005596:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 800559a:	2b00      	cmp	r3, #0
 800559c:	d05a      	beq.n	8005654 <HAL_SPI_Init+0xdc>
  __HAL_SPI_DISABLE(hspi);
 800559e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a0:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80055a2:	2302      	movs	r3, #2
 80055a4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80055a8:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055aa:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80055ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055b2:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b4:	d846      	bhi.n	8005644 <HAL_SPI_Init+0xcc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055b6:	d154      	bne.n	8005662 <HAL_SPI_Init+0xea>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055b8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055ba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055be:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 80055c2:	68a3      	ldr	r3, [r4, #8]
 80055c4:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055c6:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ca:	6862      	ldr	r2, [r4, #4]
 80055cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055d0:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 80055d4:	431a      	orrs	r2, r3
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	4313      	orrs	r3, r2
 80055de:	6962      	ldr	r2, [r4, #20]
 80055e0:	f002 0201 	and.w	r2, r2, #1
 80055e4:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80055e8:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055f4:	69e3      	ldr	r3, [r4, #28]
 80055f6:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 80055fa:	6a23      	ldr	r3, [r4, #32]
 80055fc:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8005600:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8005604:	4313      	orrs	r3, r2
 8005606:	ea43 0308 	orr.w	r3, r3, r8
 800560a:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800560c:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800560e:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005610:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005614:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005616:	ea4e 0306 	orr.w	r3, lr, r6
 800561a:	ea43 030c 	orr.w	r3, r3, ip
 800561e:	4303      	orrs	r3, r0
 8005620:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005622:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005624:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005626:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800562a:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800562c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800562e:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005630:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
}
 8005634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005638:	6843      	ldr	r3, [r0, #4]
 800563a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800563e:	d0a6      	beq.n	800558e <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005640:	61c2      	str	r2, [r0, #28]
 8005642:	e7a4      	b.n	800558e <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005644:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8005648:	d112      	bne.n	8005670 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800564a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800564c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800564e:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8005652:	e7b6      	b.n	80055c2 <HAL_SPI_Init+0x4a>
    hspi->Lock = HAL_UNLOCKED;
 8005654:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005658:	4620      	mov	r0, r4
 800565a:	f7fc f9f1 	bl	8001a40 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800565e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005660:	e79d      	b.n	800559e <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005662:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005666:	2500      	movs	r5, #0
 8005668:	62a5      	str	r5, [r4, #40]	@ 0x28
 800566a:	e7aa      	b.n	80055c2 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 800566c:	2001      	movs	r0, #1
}
 800566e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005670:	2000      	movs	r0, #0
 8005672:	e7f8      	b.n	8005666 <HAL_SPI_Init+0xee>

08005674 <HAL_SPI_Transmit>:
{
 8005674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005678:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800567a:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 800567e:	2801      	cmp	r0, #1
{
 8005680:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8005682:	d068      	beq.n	8005756 <HAL_SPI_Transmit+0xe2>
 8005684:	461d      	mov	r5, r3
 8005686:	2301      	movs	r3, #1
 8005688:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800568c:	4689      	mov	r9, r1
 800568e:	4690      	mov	r8, r2
 8005690:	f7fc fed4 	bl	800243c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005694:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8005698:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800569a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800569c:	b2df      	uxtb	r7, r3
 800569e:	d007      	beq.n	80056b0 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 80056a0:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4638      	mov	r0, r7
  __HAL_UNLOCK(hspi);
 80056a6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80056aa:	b003      	add	sp, #12
 80056ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 80056b0:	f1b9 0f00 	cmp.w	r9, #0
 80056b4:	d0f5      	beq.n	80056a2 <HAL_SPI_Transmit+0x2e>
 80056b6:	f1b8 0f00 	cmp.w	r8, #0
 80056ba:	d0f2      	beq.n	80056a2 <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056bc:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056be:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056c2:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056c4:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056ca:	f884 105d 	strb.w	r1, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 80056ce:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056d2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056d4:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80056d6:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->TxXferCount = Size;
 80056da:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80056de:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80056e2:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 80056e6:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e8:	d061      	beq.n	80057ae <HAL_SPI_Transmit+0x13a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	0651      	lsls	r1, r2, #25
 80056ee:	d403      	bmi.n	80056f8 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056f6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056f8:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056fa:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056fc:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8005700:	d92e      	bls.n	8005760 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005702:	2900      	cmp	r1, #0
 8005704:	d06a      	beq.n	80057dc <HAL_SPI_Transmit+0x168>
 8005706:	f1b8 0f01 	cmp.w	r8, #1
 800570a:	d067      	beq.n	80057dc <HAL_SPI_Transmit+0x168>
    while (hspi->TxXferCount > 0U)
 800570c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800570e:	b292      	uxth	r2, r2
 8005710:	b992      	cbnz	r2, 8005738 <HAL_SPI_Transmit+0xc4>
 8005712:	e077      	b.n	8005804 <HAL_SPI_Transmit+0x190>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005714:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005716:	f832 1b02 	ldrh.w	r1, [r2], #2
 800571a:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800571c:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005720:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005722:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005726:	fa1f fc8c 	uxth.w	ip, ip
 800572a:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800572e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d066      	beq.n	8005804 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	0792      	lsls	r2, r2, #30
 800573c:	d4ea      	bmi.n	8005714 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573e:	f7fc fe7d 	bl	800243c <HAL_GetTick>
 8005742:	1b80      	subs	r0, r0, r6
 8005744:	42a8      	cmp	r0, r5
 8005746:	d3f2      	bcc.n	800572e <HAL_SPI_Transmit+0xba>
 8005748:	1c68      	adds	r0, r5, #1
 800574a:	d0f0      	beq.n	800572e <HAL_SPI_Transmit+0xba>
          hspi->State = HAL_SPI_STATE_READY;
 800574c:	2301      	movs	r3, #1
 800574e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8005752:	2703      	movs	r7, #3
 8005754:	e7a5      	b.n	80056a2 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8005756:	2702      	movs	r7, #2
}
 8005758:	4638      	mov	r0, r7
 800575a:	b003      	add	sp, #12
 800575c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005760:	2900      	cmp	r1, #0
 8005762:	d02d      	beq.n	80057c0 <HAL_SPI_Transmit+0x14c>
 8005764:	f1b8 0f01 	cmp.w	r8, #1
 8005768:	d02a      	beq.n	80057c0 <HAL_SPI_Transmit+0x14c>
    while (hspi->TxXferCount > 0U)
 800576a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800576c:	b29b      	uxth	r3, r3
 800576e:	b993      	cbnz	r3, 8005796 <HAL_SPI_Transmit+0x122>
 8005770:	e048      	b.n	8005804 <HAL_SPI_Transmit+0x190>
        if (hspi->TxXferCount > 1U)
 8005772:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005774:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800577a:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 800577c:	d938      	bls.n	80057f0 <HAL_SPI_Transmit+0x17c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800577e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005782:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005784:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005786:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005788:	3b02      	subs	r3, #2
 800578a:	b29b      	uxth	r3, r3
 800578c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800578e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005790:	b292      	uxth	r2, r2
 8005792:	2a00      	cmp	r2, #0
 8005794:	d036      	beq.n	8005804 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	6893      	ldr	r3, [r2, #8]
 800579a:	0799      	lsls	r1, r3, #30
 800579c:	d4e9      	bmi.n	8005772 <HAL_SPI_Transmit+0xfe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579e:	f7fc fe4d 	bl	800243c <HAL_GetTick>
 80057a2:	1b80      	subs	r0, r0, r6
 80057a4:	42a8      	cmp	r0, r5
 80057a6:	d3f2      	bcc.n	800578e <HAL_SPI_Transmit+0x11a>
 80057a8:	1c6b      	adds	r3, r5, #1
 80057aa:	d0f0      	beq.n	800578e <HAL_SPI_Transmit+0x11a>
 80057ac:	e7ce      	b.n	800574c <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e794      	b.n	80056ea <HAL_SPI_Transmit+0x76>
      if (hspi->TxXferCount > 1U)
 80057c0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80057c2:	b292      	uxth	r2, r2
 80057c4:	2a01      	cmp	r2, #1
 80057c6:	d937      	bls.n	8005838 <HAL_SPI_Transmit+0x1c4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057c8:	4649      	mov	r1, r9
 80057ca:	f831 2b02 	ldrh.w	r2, [r1], #2
 80057ce:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80057d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d2:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80057d4:	3b02      	subs	r3, #2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80057da:	e7c6      	b.n	800576a <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057dc:	4649      	mov	r1, r9
 80057de:	f831 2b02 	ldrh.w	r2, [r1], #2
 80057e2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80057e4:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e6:	63a1      	str	r1, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80057e8:	3a01      	subs	r2, #1
 80057ea:	b292      	uxth	r2, r2
 80057ec:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 80057ee:	e78d      	b.n	800570c <HAL_SPI_Transmit+0x98>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057f0:	7803      	ldrb	r3, [r0, #0]
 80057f2:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80057f4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 80057f6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80057f8:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80057fa:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80057fc:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80057fe:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005800:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005802:	e7c4      	b.n	800578e <HAL_SPI_Transmit+0x11a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005804:	4632      	mov	r2, r6
 8005806:	4629      	mov	r1, r5
 8005808:	4620      	mov	r0, r4
 800580a:	f7ff fe95 	bl	8005538 <SPI_EndRxTxTransaction>
 800580e:	b108      	cbz	r0, 8005814 <HAL_SPI_Transmit+0x1a0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005810:	2320      	movs	r3, #32
 8005812:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005814:	68a3      	ldr	r3, [r4, #8]
 8005816:	b933      	cbnz	r3, 8005826 <HAL_SPI_Transmit+0x1b2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005818:	6822      	ldr	r2, [r4, #0]
 800581a:	9301      	str	r3, [sp, #4]
 800581c:	68d3      	ldr	r3, [r2, #12]
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	6893      	ldr	r3, [r2, #8]
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005826:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005828:	2b00      	cmp	r3, #0
 800582a:	f47f af3a 	bne.w	80056a2 <HAL_SPI_Transmit+0x2e>
    hspi->State = HAL_SPI_STATE_READY;
 800582e:	2201      	movs	r2, #1
 8005830:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005834:	461f      	mov	r7, r3
 8005836:	e734      	b.n	80056a2 <HAL_SPI_Transmit+0x2e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005838:	f899 2000 	ldrb.w	r2, [r9]
 800583c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800583e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005840:	3301      	adds	r3, #1
 8005842:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005844:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005846:	3b01      	subs	r3, #1
 8005848:	b29b      	uxth	r3, r3
 800584a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800584c:	e78d      	b.n	800576a <HAL_SPI_Transmit+0xf6>
 800584e:	bf00      	nop

08005850 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005850:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005854:	2b01      	cmp	r3, #1
 8005856:	d12f      	bne.n	80058b8 <HAL_TIM_Base_Start+0x68>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005858:	6803      	ldr	r3, [r0, #0]
 800585a:	4a18      	ldr	r2, [pc, #96]	@ (80058bc <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585e:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005864:	d01a      	beq.n	800589c <HAL_TIM_Base_Start+0x4c>
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800586a:	d017      	beq.n	800589c <HAL_TIM_Base_Start+0x4c>
 800586c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <HAL_TIM_Base_Start+0x4c>
 8005874:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005878:	4293      	cmp	r3, r2
 800587a:	d00f      	beq.n	800589c <HAL_TIM_Base_Start+0x4c>
 800587c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <HAL_TIM_Base_Start+0x4c>
 8005884:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <HAL_TIM_Base_Start+0x4c>
 800588c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <HAL_TIM_Base_Start+0x4c>
 8005894:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005898:	4293      	cmp	r3, r2
 800589a:	d107      	bne.n	80058ac <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589c:	6899      	ldr	r1, [r3, #8]
 800589e:	4a08      	ldr	r2, [pc, #32]	@ (80058c0 <HAL_TIM_Base_Start+0x70>)
 80058a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	2a06      	cmp	r2, #6
 80058a4:	d006      	beq.n	80058b4 <HAL_TIM_Base_Start+0x64>
 80058a6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80058aa:	d003      	beq.n	80058b4 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80058b4:	2000      	movs	r0, #0
 80058b6:	4770      	bx	lr
    return HAL_ERROR;
 80058b8:	2001      	movs	r0, #1
}
 80058ba:	4770      	bx	lr
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	00010007 	.word	0x00010007

080058c4 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058c4:	6803      	ldr	r3, [r0, #0]
 80058c6:	6a19      	ldr	r1, [r3, #32]
 80058c8:	f241 1211 	movw	r2, #4369	@ 0x1111
 80058cc:	4211      	tst	r1, r2
 80058ce:	d108      	bne.n	80058e2 <HAL_TIM_Base_Stop+0x1e>
 80058d0:	6a19      	ldr	r1, [r3, #32]
 80058d2:	f244 4244 	movw	r2, #17476	@ 0x4444
 80058d6:	4211      	tst	r1, r2
 80058d8:	d103      	bne.n	80058e2 <HAL_TIM_Base_Stop+0x1e>
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
}
 80058e8:	2000      	movs	r0, #0
 80058ea:	4770      	bx	lr

080058ec <HAL_TIM_IC_MspInit>:
/**
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop

080058f0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80058f4:	2910      	cmp	r1, #16
 80058f6:	d83b      	bhi.n	8005970 <HAL_TIM_IC_Start_DMA+0x80>
 80058f8:	e8df f001 	tbb	[pc, r1]
 80058fc:	3a3a3a09 	.word	0x3a3a3a09
 8005900:	3a3a3a42 	.word	0x3a3a3a42
 8005904:	3a3a3a4e 	.word	0x3a3a3a4e
 8005908:	3a3a3a56 	.word	0x3a3a3a56
 800590c:	4a          	.byte	0x4a
 800590d:	00          	.byte	0x00
 800590e:	f894 003e 	ldrb.w	r0, [r4, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005912:	f894 c044 	ldrb.w	ip, [r4, #68]	@ 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005916:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005918:	fa5f fc8c 	uxtb.w	ip, ip
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800591c:	2802      	cmp	r0, #2
 800591e:	d026      	beq.n	800596e <HAL_TIM_IC_Start_DMA+0x7e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005920:	f1bc 0f02 	cmp.w	ip, #2
 8005924:	d044      	beq.n	80059b0 <HAL_TIM_IC_Start_DMA+0xc0>
  {
    return HAL_BUSY;
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005926:	2801      	cmp	r0, #1
 8005928:	d120      	bne.n	800596c <HAL_TIM_IC_Start_DMA+0x7c>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800592a:	f1bc 0f01 	cmp.w	ip, #1
 800592e:	d11d      	bne.n	800596c <HAL_TIM_IC_Start_DMA+0x7c>
  {
    if ((pData == NULL) || (Length == 0U))
 8005930:	b1e2      	cbz	r2, 800596c <HAL_TIM_IC_Start_DMA+0x7c>
 8005932:	b1db      	cbz	r3, 800596c <HAL_TIM_IC_Start_DMA+0x7c>

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005934:	f001 001f 	and.w	r0, r1, #31
 8005938:	fa0c fc00 	lsl.w	ip, ip, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800593c:	6825      	ldr	r5, [r4, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800593e:	ea6f 000c 	mvn.w	r0, ip
 8005942:	2910      	cmp	r1, #16
 8005944:	d836      	bhi.n	80059b4 <HAL_TIM_IC_Start_DMA+0xc4>
 8005946:	e8df f011 	tbh	[pc, r1, lsl #1]
 800594a:	00a3      	.short	0x00a3
 800594c:	00350035 	.word	0x00350035
 8005950:	00830035 	.word	0x00830035
 8005954:	00350035 	.word	0x00350035
 8005958:	00c30035 	.word	0x00c30035
 800595c:	00350035 	.word	0x00350035
 8005960:	00e30035 	.word	0x00e30035
 8005964:	00350035 	.word	0x00350035
 8005968:	004b0035 	.word	0x004b0035
      return HAL_ERROR;
 800596c:	2001      	movs	r0, #1
}
 800596e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005970:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8005974:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005976:	f894 c047 	ldrb.w	ip, [r4, #71]	@ 0x47
 800597a:	fa5f fc8c 	uxtb.w	ip, ip
 800597e:	e7cd      	b.n	800591c <HAL_TIM_IC_Start_DMA+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005980:	f894 003f 	ldrb.w	r0, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005984:	f894 c045 	ldrb.w	ip, [r4, #69]	@ 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005988:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800598a:	fa5f fc8c 	uxtb.w	ip, ip
 800598e:	e7c5      	b.n	800591c <HAL_TIM_IC_Start_DMA+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005990:	f894 0042 	ldrb.w	r0, [r4, #66]	@ 0x42
 8005994:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005996:	e7ee      	b.n	8005976 <HAL_TIM_IC_Start_DMA+0x86>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005998:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800599c:	f894 c046 	ldrb.w	ip, [r4, #70]	@ 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059a0:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80059a2:	fa5f fc8c 	uxtb.w	ip, ip
 80059a6:	e7b9      	b.n	800591c <HAL_TIM_IC_Start_DMA+0x2c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059a8:	f894 0041 	ldrb.w	r0, [r4, #65]	@ 0x41
 80059ac:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80059ae:	e7e2      	b.n	8005976 <HAL_TIM_IC_Start_DMA+0x86>
    return HAL_BUSY;
 80059b0:	4660      	mov	r0, ip
}
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b4:	2602      	movs	r6, #2
 80059b6:	f884 6043 	strb.w	r6, [r4, #67]	@ 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ba:	f884 6047 	strb.w	r6, [r4, #71]	@ 0x47
  TIMx->CCER &= ~tmp;
 80059be:	6a2e      	ldr	r6, [r5, #32]
 80059c0:	4030      	ands	r0, r6
 80059c2:	6228      	str	r0, [r5, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c4:	6a28      	ldr	r0, [r5, #32]
  switch (Channel)
 80059c6:	3904      	subs	r1, #4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c8:	ea40 000c 	orr.w	r0, r0, ip
 80059cc:	6228      	str	r0, [r5, #32]
  switch (Channel)
 80059ce:	2908      	cmp	r1, #8
 80059d0:	d812      	bhi.n	80059f8 <HAL_TIM_IC_Start_DMA+0x108>
 80059d2:	e8df f001 	tbb	[pc, r1]
 80059d6:	1149      	.short	0x1149
 80059d8:	11891111 	.word	0x11891111
 80059dc:	1111      	.short	0x1111
 80059de:	a9          	.byte	0xa9
 80059df:	00          	.byte	0x00
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e0:	2302      	movs	r3, #2
 80059e2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  TIMx->CCER &= ~tmp;
 80059ea:	6a2b      	ldr	r3, [r5, #32]
 80059ec:	4003      	ands	r3, r0
 80059ee:	622b      	str	r3, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059f0:	6a2b      	ldr	r3, [r5, #32]
 80059f2:	ea43 030c 	orr.w	r3, r3, ip
 80059f6:	622b      	str	r3, [r5, #32]
{
 80059f8:	2001      	movs	r0, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005b68 <HAL_TIM_IC_Start_DMA+0x278>)
 80059fc:	429d      	cmp	r5, r3
 80059fe:	f000 80a7 	beq.w	8005b50 <HAL_TIM_IC_Start_DMA+0x260>
 8005a02:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
 8005a06:	f000 80a3 	beq.w	8005b50 <HAL_TIM_IC_Start_DMA+0x260>
 8005a0a:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8005a0e:	429d      	cmp	r5, r3
 8005a10:	f000 809e 	beq.w	8005b50 <HAL_TIM_IC_Start_DMA+0x260>
 8005a14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a18:	429d      	cmp	r5, r3
 8005a1a:	f000 8099 	beq.w	8005b50 <HAL_TIM_IC_Start_DMA+0x260>
 8005a1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a22:	429d      	cmp	r5, r3
 8005a24:	f000 8094 	beq.w	8005b50 <HAL_TIM_IC_Start_DMA+0x260>
 8005a28:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8005a2c:	429d      	cmp	r5, r3
 8005a2e:	f000 808f 	beq.w	8005b50 <HAL_TIM_IC_Start_DMA+0x260>
 8005a32:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8005a36:	429d      	cmp	r5, r3
 8005a38:	f000 808a 	beq.w	8005b50 <HAL_TIM_IC_Start_DMA+0x260>
 8005a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a40:	429d      	cmp	r5, r3
 8005a42:	f000 8085 	beq.w	8005b50 <HAL_TIM_IC_Start_DMA+0x260>
    __HAL_TIM_ENABLE(htim);
 8005a46:	682b      	ldr	r3, [r5, #0]
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	602b      	str	r3, [r5, #0]
}
 8005a4e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a50:	2102      	movs	r1, #2
 8005a52:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a56:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
  TIMx->CCER &= ~tmp;
 8005a5a:	6a29      	ldr	r1, [r5, #32]
 8005a5c:	4001      	ands	r1, r0
 8005a5e:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a60:	6a29      	ldr	r1, [r5, #32]
 8005a62:	ea41 010c 	orr.w	r1, r1, ip
 8005a66:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005a68:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005a6a:	f105 0138 	add.w	r1, r5, #56	@ 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005a6e:	4d3f      	ldr	r5, [pc, #252]	@ (8005b6c <HAL_TIM_IC_Start_DMA+0x27c>)
 8005a70:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005a72:	4d3f      	ldr	r5, [pc, #252]	@ (8005b70 <HAL_TIM_IC_Start_DMA+0x280>)
 8005a74:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005a76:	4d3f      	ldr	r5, [pc, #252]	@ (8005b74 <HAL_TIM_IC_Start_DMA+0x284>)
 8005a78:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005a7a:	f7fe f8cb 	bl	8003c14 <HAL_DMA_Start_IT>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	f47f af74 	bne.w	800596c <HAL_TIM_IC_Start_DMA+0x7c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005a84:	6825      	ldr	r5, [r4, #0]
 8005a86:	68eb      	ldr	r3, [r5, #12]
 8005a88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a8c:	60eb      	str	r3, [r5, #12]
      break;
 8005a8e:	e7b4      	b.n	80059fa <HAL_TIM_IC_Start_DMA+0x10a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a90:	2102      	movs	r1, #2
 8005a92:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a96:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
  TIMx->CCER &= ~tmp;
 8005a9a:	6a29      	ldr	r1, [r5, #32]
 8005a9c:	4001      	ands	r1, r0
 8005a9e:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aa0:	6a29      	ldr	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005aa2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aa4:	ea41 010c 	orr.w	r1, r1, ip
 8005aa8:	6229      	str	r1, [r5, #32]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8005aaa:	f105 0134 	add.w	r1, r5, #52	@ 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005aae:	4d2f      	ldr	r5, [pc, #188]	@ (8005b6c <HAL_TIM_IC_Start_DMA+0x27c>)
 8005ab0:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005ab2:	4d2f      	ldr	r5, [pc, #188]	@ (8005b70 <HAL_TIM_IC_Start_DMA+0x280>)
 8005ab4:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005ab6:	4d2f      	ldr	r5, [pc, #188]	@ (8005b74 <HAL_TIM_IC_Start_DMA+0x284>)
 8005ab8:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8005aba:	f7fe f8ab 	bl	8003c14 <HAL_DMA_Start_IT>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	f47f af54 	bne.w	800596c <HAL_TIM_IC_Start_DMA+0x7c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005ac4:	6825      	ldr	r5, [r4, #0]
 8005ac6:	68eb      	ldr	r3, [r5, #12]
 8005ac8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005acc:	60eb      	str	r3, [r5, #12]
      break;
 8005ace:	e794      	b.n	80059fa <HAL_TIM_IC_Start_DMA+0x10a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad0:	2102      	movs	r1, #2
 8005ad2:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
  TIMx->CCER &= ~tmp;
 8005ada:	6a29      	ldr	r1, [r5, #32]
 8005adc:	4001      	ands	r1, r0
 8005ade:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ae0:	6a29      	ldr	r1, [r5, #32]
 8005ae2:	ea4c 0101 	orr.w	r1, ip, r1
 8005ae6:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005ae8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005aea:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005aee:	4d1f      	ldr	r5, [pc, #124]	@ (8005b6c <HAL_TIM_IC_Start_DMA+0x27c>)
 8005af0:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005af2:	4d1f      	ldr	r5, [pc, #124]	@ (8005b70 <HAL_TIM_IC_Start_DMA+0x280>)
 8005af4:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005af6:	4d1f      	ldr	r5, [pc, #124]	@ (8005b74 <HAL_TIM_IC_Start_DMA+0x284>)
 8005af8:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005afa:	f7fe f88b 	bl	8003c14 <HAL_DMA_Start_IT>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f47f af34 	bne.w	800596c <HAL_TIM_IC_Start_DMA+0x7c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005b04:	6825      	ldr	r5, [r4, #0]
 8005b06:	68eb      	ldr	r3, [r5, #12]
 8005b08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b0c:	60eb      	str	r3, [r5, #12]
      break;
 8005b0e:	e774      	b.n	80059fa <HAL_TIM_IC_Start_DMA+0x10a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b10:	2102      	movs	r1, #2
 8005b12:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b16:	f884 1047 	strb.w	r1, [r4, #71]	@ 0x47
  TIMx->CCER &= ~tmp;
 8005b1a:	6a29      	ldr	r1, [r5, #32]
 8005b1c:	4001      	ands	r1, r0
 8005b1e:	6229      	str	r1, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b20:	6a29      	ldr	r1, [r5, #32]
 8005b22:	ea41 010c 	orr.w	r1, r1, ip
 8005b26:	6229      	str	r1, [r5, #32]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005b28:	6b20      	ldr	r0, [r4, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005b2a:	f105 0140 	add.w	r1, r5, #64	@ 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005b2e:	4d0f      	ldr	r5, [pc, #60]	@ (8005b6c <HAL_TIM_IC_Start_DMA+0x27c>)
 8005b30:	62c5      	str	r5, [r0, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005b32:	4d0f      	ldr	r5, [pc, #60]	@ (8005b70 <HAL_TIM_IC_Start_DMA+0x280>)
 8005b34:	6305      	str	r5, [r0, #48]	@ 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005b36:	4d0f      	ldr	r5, [pc, #60]	@ (8005b74 <HAL_TIM_IC_Start_DMA+0x284>)
 8005b38:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005b3a:	f7fe f86b 	bl	8003c14 <HAL_DMA_Start_IT>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f47f af14 	bne.w	800596c <HAL_TIM_IC_Start_DMA+0x7c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005b44:	6825      	ldr	r5, [r4, #0]
 8005b46:	68eb      	ldr	r3, [r5, #12]
 8005b48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b4c:	60eb      	str	r3, [r5, #12]
      break;
 8005b4e:	e754      	b.n	80059fa <HAL_TIM_IC_Start_DMA+0x10a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b50:	68aa      	ldr	r2, [r5, #8]
 8005b52:	4b09      	ldr	r3, [pc, #36]	@ (8005b78 <HAL_TIM_IC_Start_DMA+0x288>)
 8005b54:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	2b06      	cmp	r3, #6
 8005b58:	f43f af09 	beq.w	800596e <HAL_TIM_IC_Start_DMA+0x7e>
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b60:	f47f af71 	bne.w	8005a46 <HAL_TIM_IC_Start_DMA+0x156>
}
 8005b64:	bd70      	pop	{r4, r5, r6, pc}
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	08005e9d 	.word	0x08005e9d
 8005b70:	08005f35 	.word	0x08005f35
 8005b74:	08005f99 	.word	0x08005f99
 8005b78:	00010007 	.word	0x00010007

08005b7c <HAL_TIM_IC_Stop_DMA>:
{
 8005b7c:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b7e:	6803      	ldr	r3, [r0, #0]
{
 8005b80:	4604      	mov	r4, r0
  TIMx->CCER &= ~tmp;
 8005b82:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b84:	f001 001f 	and.w	r0, r1, #31
{
 8005b88:	460d      	mov	r5, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	4081      	lsls	r1, r0
  TIMx->CCER &= ~tmp;
 8005b8e:	ea22 0201 	bic.w	r2, r2, r1
 8005b92:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	621a      	str	r2, [r3, #32]
  switch (Channel)
 8005b98:	2d0c      	cmp	r5, #12
 8005b9a:	d808      	bhi.n	8005bae <HAL_TIM_IC_Stop_DMA+0x32>
 8005b9c:	e8df f005 	tbb	[pc, r5]
 8005ba0:	07070772 	.word	0x07070772
 8005ba4:	0707073c 	.word	0x0707073c
 8005ba8:	07070723 	.word	0x07070723
 8005bac:	09          	.byte	0x09
 8005bad:	00          	.byte	0x00
 8005bae:	2001      	movs	r0, #1
}
 8005bb0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005bb2:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005bb4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005bb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005bbc:	f7fe f8bc 	bl	8003d38 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	6a19      	ldr	r1, [r3, #32]
 8005bc4:	f241 1211 	movw	r2, #4369	@ 0x1111
 8005bc8:	4211      	tst	r1, r2
 8005bca:	d105      	bne.n	8005bd8 <HAL_TIM_IC_Stop_DMA+0x5c>
 8005bcc:	6a19      	ldr	r1, [r3, #32]
 8005bce:	f244 4244 	movw	r2, #17476	@ 0x4444
 8005bd2:	4211      	tst	r1, r2
 8005bd4:	f000 8081 	beq.w	8005cda <HAL_TIM_IC_Stop_DMA+0x15e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bde:	2301      	movs	r3, #1
 8005be0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 8005be4:	e069      	b.n	8005cba <HAL_TIM_IC_Stop_DMA+0x13e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005be6:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005be8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005bf0:	f7fe f8a2 	bl	8003d38 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	6a19      	ldr	r1, [r3, #32]
 8005bf8:	f241 1211 	movw	r2, #4369	@ 0x1111
 8005bfc:	4211      	tst	r1, r2
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_IC_Stop_DMA+0x8e>
 8005c00:	6a19      	ldr	r1, [r3, #32]
 8005c02:	f244 4244 	movw	r2, #17476	@ 0x4444
 8005c06:	4211      	tst	r1, r2
 8005c08:	d067      	beq.n	8005cda <HAL_TIM_IC_Stop_DMA+0x15e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c10:	2301      	movs	r3, #1
 8005c12:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005c16:	e050      	b.n	8005cba <HAL_TIM_IC_Stop_DMA+0x13e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005c18:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005c1a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c20:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005c22:	f7fe f889 	bl	8003d38 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	6a19      	ldr	r1, [r3, #32]
 8005c2a:	f241 1211 	movw	r2, #4369	@ 0x1111
 8005c2e:	4211      	tst	r1, r2
 8005c30:	d145      	bne.n	8005cbe <HAL_TIM_IC_Stop_DMA+0x142>
 8005c32:	6a19      	ldr	r1, [r3, #32]
 8005c34:	f244 4244 	movw	r2, #17476	@ 0x4444
 8005c38:	4211      	tst	r1, r2
 8005c3a:	d140      	bne.n	8005cbe <HAL_TIM_IC_Stop_DMA+0x142>
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c44:	3d04      	subs	r5, #4
 8005c46:	2d0c      	cmp	r5, #12
 8005c48:	d83f      	bhi.n	8005cca <HAL_TIM_IC_Stop_DMA+0x14e>
 8005c4a:	a301      	add	r3, pc, #4	@ (adr r3, 8005c50 <HAL_TIM_IC_Stop_DMA+0xd4>)
 8005c4c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8005c50:	08005cbf 	.word	0x08005cbf
 8005c54:	08005ccb 	.word	0x08005ccb
 8005c58:	08005ccb 	.word	0x08005ccb
 8005c5c:	08005ccb 	.word	0x08005ccb
 8005c60:	08005c0b 	.word	0x08005c0b
 8005c64:	08005ccb 	.word	0x08005ccb
 8005c68:	08005ccb 	.word	0x08005ccb
 8005c6c:	08005ccb 	.word	0x08005ccb
 8005c70:	08005bd9 	.word	0x08005bd9
 8005c74:	08005ccb 	.word	0x08005ccb
 8005c78:	08005ccb 	.word	0x08005ccb
 8005c7c:	08005ccb 	.word	0x08005ccb
 8005c80:	08005cd3 	.word	0x08005cd3
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005c84:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005c86:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005c88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005c8c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005c8e:	f7fe f853 	bl	8003d38 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	6a19      	ldr	r1, [r3, #32]
 8005c96:	f241 1211 	movw	r2, #4369	@ 0x1111
 8005c9a:	4211      	tst	r1, r2
 8005c9c:	d108      	bne.n	8005cb0 <HAL_TIM_IC_Stop_DMA+0x134>
 8005c9e:	6a19      	ldr	r1, [r3, #32]
 8005ca0:	f244 4244 	movw	r2, #17476	@ 0x4444
 8005ca4:	4211      	tst	r1, r2
 8005ca6:	d103      	bne.n	8005cb0 <HAL_TIM_IC_Stop_DMA+0x134>
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cb6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  switch (Channel)
 8005cba:	2000      	movs	r0, #0
}
 8005cbc:	bd38      	pop	{r3, r4, r5, pc}
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005cc8:	e7f7      	b.n	8005cba <HAL_TIM_IC_Stop_DMA+0x13e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cd0:	e785      	b.n	8005bde <HAL_TIM_IC_Stop_DMA+0x62>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cd8:	e781      	b.n	8005bde <HAL_TIM_IC_Stop_DMA+0x62>
    __HAL_TIM_DISABLE(htim);
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	d0e4      	beq.n	8005cb0 <HAL_TIM_IC_Stop_DMA+0x134>
 8005ce6:	e7ad      	b.n	8005c44 <HAL_TIM_IC_Stop_DMA+0xc8>

08005ce8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005ce8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f000 8091 	beq.w	8005e14 <HAL_TIM_ConfigClockSource+0x12c>
 8005cf2:	4602      	mov	r2, r0
{
 8005cf4:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8005cf8:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfa:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8005cfe:	2001      	movs	r0, #1
 8005d00:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005d04:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d06:	4b61      	ldr	r3, [pc, #388]	@ (8005e8c <HAL_TIM_ConfigClockSource+0x1a4>)
 8005d08:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005d0a:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005d0c:	680b      	ldr	r3, [r1, #0]
 8005d0e:	2b70      	cmp	r3, #112	@ 0x70
 8005d10:	f000 80ac 	beq.w	8005e6c <HAL_TIM_ConfigClockSource+0x184>
 8005d14:	d827      	bhi.n	8005d66 <HAL_TIM_ConfigClockSource+0x7e>
 8005d16:	2b50      	cmp	r3, #80	@ 0x50
 8005d18:	d07e      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x130>
 8005d1a:	d93e      	bls.n	8005d9a <HAL_TIM_ConfigClockSource+0xb2>
 8005d1c:	2b60      	cmp	r3, #96	@ 0x60
 8005d1e:	d11a      	bne.n	8005d56 <HAL_TIM_ConfigClockSource+0x6e>
  tmpccer = TIMx->CCER;
 8005d20:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockFilter);
 8005d22:	68c8      	ldr	r0, [r1, #12]
                               sClockSourceConfig->ClockPolarity,
 8005d24:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d26:	6a21      	ldr	r1, [r4, #32]
 8005d28:	f021 0110 	bic.w	r1, r1, #16
 8005d2c:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d34:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d3c:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005d40:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005d42:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005d44:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d46:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d4e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005d52:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d54:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005d56:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005d58:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005d5a:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005d5e:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005d62:	bc30      	pop	{r4, r5}
 8005d64:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6a:	d06f      	beq.n	8005e4c <HAL_TIM_ConfigClockSource+0x164>
 8005d6c:	d941      	bls.n	8005df2 <HAL_TIM_ConfigClockSource+0x10a>
 8005d6e:	4948      	ldr	r1, [pc, #288]	@ (8005e90 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005d70:	428b      	cmp	r3, r1
 8005d72:	d008      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x9e>
 8005d74:	d92d      	bls.n	8005dd2 <HAL_TIM_ConfigClockSource+0xea>
 8005d76:	4947      	ldr	r1, [pc, #284]	@ (8005e94 <HAL_TIM_ConfigClockSource+0x1ac>)
 8005d78:	428b      	cmp	r3, r1
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x9e>
 8005d7c:	f023 0c20 	bic.w	ip, r3, #32
 8005d80:	3910      	subs	r1, #16
 8005d82:	458c      	cmp	ip, r1
 8005d84:	d1e7      	bne.n	8005d56 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8005d86:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d88:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005d8c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d90:	4319      	orrs	r1, r3
 8005d92:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8005d96:	60a1      	str	r1, [r4, #8]
}
 8005d98:	e02e      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x110>
  switch (sClockSourceConfig->ClockSource)
 8005d9a:	2b40      	cmp	r3, #64	@ 0x40
 8005d9c:	d12e      	bne.n	8005dfc <HAL_TIM_ConfigClockSource+0x114>
                               sClockSourceConfig->ClockPolarity,
 8005d9e:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005da0:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005da2:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005da4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005da8:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005daa:	6a23      	ldr	r3, [r4, #32]
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005db8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005dbc:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005dbe:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005dc0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dc2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dca:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005dce:	60a3      	str	r3, [r4, #8]
}
 8005dd0:	e012      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x110>
  switch (sClockSourceConfig->ClockSource)
 8005dd2:	3920      	subs	r1, #32
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	d0d6      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x9e>
 8005dd8:	d904      	bls.n	8005de4 <HAL_TIM_ConfigClockSource+0xfc>
 8005dda:	492f      	ldr	r1, [pc, #188]	@ (8005e98 <HAL_TIM_ConfigClockSource+0x1b0>)
 8005ddc:	428b      	cmp	r3, r1
 8005dde:	d0d2      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8005de0:	2001      	movs	r0, #1
 8005de2:	e7b8      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8005de4:	f023 0110 	bic.w	r1, r3, #16
 8005de8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005dec:	d0cb      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8005dee:	2001      	movs	r0, #1
 8005df0:	e7b1      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8005df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df6:	d1ae      	bne.n	8005d56 <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e7ac      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8005dfc:	d8ab      	bhi.n	8005d56 <HAL_TIM_ConfigClockSource+0x6e>
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d0c1      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x9e>
 8005e02:	d903      	bls.n	8005e0c <HAL_TIM_ConfigClockSource+0x124>
 8005e04:	2b30      	cmp	r3, #48	@ 0x30
 8005e06:	d0be      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8005e08:	2001      	movs	r0, #1
 8005e0a:	e7a4      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8005e0c:	f033 0110 	bics.w	r1, r3, #16
 8005e10:	d1a1      	bne.n	8005d56 <HAL_TIM_ConfigClockSource+0x6e>
 8005e12:	e7b8      	b.n	8005d86 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8005e14:	2002      	movs	r0, #2
}
 8005e16:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8005e18:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005e1a:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8005e1c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e1e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005e22:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e24:	6a23      	ldr	r3, [r4, #32]
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e2c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e32:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005e36:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005e38:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005e3a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e44:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005e48:	60a3      	str	r3, [r4, #8]
}
 8005e4a:	e7d5      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x110>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e4c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005e50:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e52:	432b      	orrs	r3, r5
 8005e54:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e56:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005e5e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005e60:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e62:	68a3      	ldr	r3, [r4, #8]
 8005e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e68:	60a3      	str	r3, [r4, #8]
      break;
 8005e6a:	e7c5      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x110>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e6c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005e70:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e72:	432b      	orrs	r3, r5
 8005e74:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e76:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e7a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005e7e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005e80:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005e82:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005e88:	60a3      	str	r3, [r4, #8]
      break;
 8005e8a:	e7b5      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x110>
 8005e8c:	ffce0088 	.word	0xffce0088
 8005e90:	00100040 	.word	0x00100040
 8005e94:	00100060 	.word	0x00100060
 8005e98:	00100030 	.word	0x00100030

08005e9c <TIM_DMACaptureCplt>:
{
 8005e9c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e9e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ea0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ea2:	4283      	cmp	r3, r0
 8005ea4:	d01e      	beq.n	8005ee4 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ea6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ea8:	4283      	cmp	r3, r0
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005eac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005eae:	4283      	cmp	r3, r0
 8005eb0:	d027      	beq.n	8005f02 <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005eb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005eb4:	4283      	cmp	r3, r0
 8005eb6:	d02f      	beq.n	8005f18 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f7fa fff5 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	7723      	strb	r3, [r4, #28]
}
 8005ec2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f4      	bne.n	8005eb8 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_IC_CaptureCallback(htim);
 8005ed4:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ed6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	f7fa ffe5 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	7723      	strb	r3, [r4, #28]
}
 8005ee2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e4      	bne.n	8005eb8 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eee:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 8005ef8:	f7fa ffd6 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efc:	2300      	movs	r3, #0
 8005efe:	7723      	strb	r3, [r4, #28]
}
 8005f00:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f02:	2204      	movs	r2, #4
 8005f04:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1d5      	bne.n	8005eb8 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f12:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005f16:	e7cf      	b.n	8005eb8 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f18:	2208      	movs	r2, #8
 8005f1a:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1ca      	bne.n	8005eb8 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	2301      	movs	r3, #1
 8005f24:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 8005f2c:	e7c4      	b.n	8005eb8 <TIM_DMACaptureCplt+0x1c>
 8005f2e:	bf00      	nop

08005f30 <HAL_TIM_IC_CaptureHalfCpltCallback>:
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop

08005f34 <TIM_DMACaptureHalfCplt>:
{
 8005f34:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f36:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f38:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005f3a:	4282      	cmp	r2, r0
 8005f3c:	d019      	beq.n	8005f72 <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f3e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005f40:	4282      	cmp	r2, r0
 8005f42:	4603      	mov	r3, r0
 8005f44:	d00d      	beq.n	8005f62 <TIM_DMACaptureHalfCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005f48:	4282      	cmp	r2, r0
 8005f4a:	d01a      	beq.n	8005f82 <TIM_DMACaptureHalfCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f4c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005f4e:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f50:	bf04      	itt	eq
 8005f52:	2308      	moveq	r3, #8
 8005f54:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff ffea 	bl	8005f30 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	7723      	strb	r3, [r4, #28]
}
 8005f60:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f62:	2302      	movs	r3, #2
 8005f64:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005f66:	4620      	mov	r0, r4
 8005f68:	f7ff ffe2 	bl	8005f30 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	7723      	strb	r3, [r4, #28]
}
 8005f70:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f72:	2301      	movs	r3, #1
 8005f74:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7ff ffda 	bl	8005f30 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	7723      	strb	r3, [r4, #28]
}
 8005f80:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f82:	2304      	movs	r3, #4
 8005f84:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005f86:	4620      	mov	r0, r4
 8005f88:	f7ff ffd2 	bl	8005f30 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	7723      	strb	r3, [r4, #28]
}
 8005f90:	bd10      	pop	{r4, pc}
 8005f92:	bf00      	nop

08005f94 <HAL_TIM_ErrorCallback>:
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop

08005f98 <TIM_DMAError>:
{
 8005f98:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f9c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005f9e:	4283      	cmp	r3, r0
 8005fa0:	d01c      	beq.n	8005fdc <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fa2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005fa4:	4283      	cmp	r3, r0
 8005fa6:	d00e      	beq.n	8005fc6 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005fa8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005faa:	4283      	cmp	r3, r0
 8005fac:	d020      	beq.n	8005ff0 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005fae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005fb0:	4283      	cmp	r3, r0
 8005fb2:	d028      	beq.n	8006006 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  HAL_TIM_ErrorCallback(htim);
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f7ff ffea 	bl	8005f94 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	7723      	strb	r3, [r4, #28]
}
 8005fc4:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fc6:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fc8:	2202      	movs	r2, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fce:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff ffdf 	bl	8005f94 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	7723      	strb	r3, [r4, #28]
}
 8005fda:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  HAL_TIM_ErrorCallback(htim);
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f7ff ffd5 	bl	8005f94 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	2300      	movs	r3, #0
 8005fec:	7723      	strb	r3, [r4, #28]
}
 8005fee:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ff0:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff2:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff8:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f7ff ffca 	bl	8005f94 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006000:	2300      	movs	r3, #0
 8006002:	7723      	strb	r3, [r4, #28]
}
 8006004:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006008:	2208      	movs	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800600a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800600e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8006010:	4620      	mov	r0, r4
 8006012:	f7ff ffbf 	bl	8005f94 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	2300      	movs	r3, #0
 8006018:	7723      	strb	r3, [r4, #28]
}
 800601a:	bd10      	pop	{r4, pc}

0800601c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800601c:	4a3a      	ldr	r2, [pc, #232]	@ (8006108 <TIM_Base_SetConfig+0xec>)
  tmpcr1 = TIMx->CR1;
 800601e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006020:	4290      	cmp	r0, r2
{
 8006022:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006024:	d049      	beq.n	80060ba <TIM_Base_SetConfig+0x9e>
 8006026:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800602a:	d029      	beq.n	8006080 <TIM_Base_SetConfig+0x64>
 800602c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006030:	4290      	cmp	r0, r2
 8006032:	d025      	beq.n	8006080 <TIM_Base_SetConfig+0x64>
 8006034:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006038:	4290      	cmp	r0, r2
 800603a:	d021      	beq.n	8006080 <TIM_Base_SetConfig+0x64>
 800603c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006040:	4290      	cmp	r0, r2
 8006042:	d01d      	beq.n	8006080 <TIM_Base_SetConfig+0x64>
 8006044:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8006048:	4290      	cmp	r0, r2
 800604a:	d058      	beq.n	80060fe <TIM_Base_SetConfig+0xe2>
 800604c:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8006050:	4290      	cmp	r0, r2
 8006052:	d054      	beq.n	80060fe <TIM_Base_SetConfig+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006054:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 8006058:	4290      	cmp	r0, r2
 800605a:	d042      	beq.n	80060e2 <TIM_Base_SetConfig+0xc6>
 800605c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006060:	4290      	cmp	r0, r2
 8006062:	d03e      	beq.n	80060e2 <TIM_Base_SetConfig+0xc6>
 8006064:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006068:	4290      	cmp	r0, r2
 800606a:	d03a      	beq.n	80060e2 <TIM_Base_SetConfig+0xc6>
  TIMx->PSC = Structure->Prescaler;
 800606c:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606e:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006070:	6949      	ldr	r1, [r1, #20]
 8006072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006076:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006078:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607a:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800607c:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607e:	e010      	b.n	80060a2 <TIM_Base_SetConfig+0x86>
    tmpcr1 |= Structure->CounterMode;
 8006080:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006082:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006088:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800608a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800608e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006090:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006096:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006098:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800609a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800609c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800609e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060a0:	6282      	str	r2, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80060a2:	2301      	movs	r3, #1
 80060a4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060a6:	6903      	ldr	r3, [r0, #16]
 80060a8:	07db      	lsls	r3, r3, #31
 80060aa:	d503      	bpl.n	80060b4 <TIM_Base_SetConfig+0x98>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060ac:	6903      	ldr	r3, [r0, #16]
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	6103      	str	r3, [r0, #16]
}
 80060b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b8:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ba:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 80060bc:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80060c2:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80060c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060ca:	694a      	ldr	r2, [r1, #20]
 80060cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80060d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d4:	688b      	ldr	r3, [r1, #8]
 80060d6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060d8:	680b      	ldr	r3, [r1, #0]
 80060da:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80060dc:	690b      	ldr	r3, [r1, #16]
 80060de:	6303      	str	r3, [r0, #48]	@ 0x30
 80060e0:	e7df      	b.n	80060a2 <TIM_Base_SetConfig+0x86>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060e2:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e4:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ea:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060f0:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f2:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80060f4:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80060f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060f8:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060fa:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060fc:	e7ee      	b.n	80060dc <TIM_Base_SetConfig+0xc0>
    tmpcr1 |= Structure->CounterMode;
 80060fe:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006100:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006106:	e7dc      	b.n	80060c2 <TIM_Base_SetConfig+0xa6>
 8006108:	40012c00 	.word	0x40012c00

0800610c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800610c:	b370      	cbz	r0, 800616c <HAL_TIM_Base_Init+0x60>
{
 800610e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006110:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006114:	4604      	mov	r4, r0
 8006116:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800611a:	b313      	cbz	r3, 8006162 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800611e:	2302      	movs	r3, #2
 8006120:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006124:	f851 0b04 	ldr.w	r0, [r1], #4
 8006128:	f7ff ff78 	bl	800601c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612c:	2301      	movs	r3, #1
 800612e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006132:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006136:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800613a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800613e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006142:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800614e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006152:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006156:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800615a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800615e:	2000      	movs	r0, #0
}
 8006160:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006162:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006166:	f7fb fca7 	bl	8001ab8 <HAL_TIM_Base_MspInit>
 800616a:	e7d7      	b.n	800611c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800616c:	2001      	movs	r0, #1
}
 800616e:	4770      	bx	lr

08006170 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8006170:	b370      	cbz	r0, 80061d0 <HAL_TIM_IC_Init+0x60>
{
 8006172:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006174:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006178:	4604      	mov	r4, r0
 800617a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800617e:	b313      	cbz	r3, 80061c6 <HAL_TIM_IC_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006180:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006182:	2302      	movs	r3, #2
 8006184:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006188:	f851 0b04 	ldr.w	r0, [r1], #4
 800618c:	f7ff ff46 	bl	800601c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006190:	2301      	movs	r3, #1
 8006192:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006196:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800619a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800619e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80061a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80061a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80061b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80061b6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80061ba:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80061be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80061c2:	2000      	movs	r0, #0
}
 80061c4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80061c6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 80061ca:	f7ff fb8f 	bl	80058ec <HAL_TIM_IC_MspInit>
 80061ce:	e7d7      	b.n	8006180 <HAL_TIM_IC_Init+0x10>
    return HAL_ERROR;
 80061d0:	2001      	movs	r0, #1
}
 80061d2:	4770      	bx	lr

080061d4 <TIM_TI1_SetConfig>:
{
 80061d4:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80061d6:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d8:	6a05      	ldr	r5, [r0, #32]
 80061da:	f025 0501 	bic.w	r5, r5, #1
 80061de:	6205      	str	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061e0:	4d19      	ldr	r5, [pc, #100]	@ (8006248 <TIM_TI1_SetConfig+0x74>)
  tmpccmr1 = TIMx->CCMR1;
 80061e2:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061e4:	42a8      	cmp	r0, r5
{
 80061e6:	4694      	mov	ip, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061e8:	d01c      	beq.n	8006224 <TIM_TI1_SetConfig+0x50>
 80061ea:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80061ee:	d019      	beq.n	8006224 <TIM_TI1_SetConfig+0x50>
 80061f0:	4a16      	ldr	r2, [pc, #88]	@ (800624c <TIM_TI1_SetConfig+0x78>)
 80061f2:	4290      	cmp	r0, r2
 80061f4:	d016      	beq.n	8006224 <TIM_TI1_SetConfig+0x50>
 80061f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80061fa:	4290      	cmp	r0, r2
 80061fc:	d012      	beq.n	8006224 <TIM_TI1_SetConfig+0x50>
 80061fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006202:	4290      	cmp	r0, r2
 8006204:	d00e      	beq.n	8006224 <TIM_TI1_SetConfig+0x50>
 8006206:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800620a:	4290      	cmp	r0, r2
 800620c:	d00a      	beq.n	8006224 <TIM_TI1_SetConfig+0x50>
 800620e:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006212:	4290      	cmp	r0, r2
 8006214:	d006      	beq.n	8006224 <TIM_TI1_SetConfig+0x50>
 8006216:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800621a:	4290      	cmp	r0, r2
 800621c:	d002      	beq.n	8006224 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800621e:	f044 0201 	orr.w	r2, r4, #1
 8006222:	e003      	b.n	800622c <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006224:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8006228:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800622c:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800622e:	f026 040a 	bic.w	r4, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006232:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006236:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006238:	f001 010a 	and.w	r1, r1, #10
 800623c:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800623e:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8006240:	6183      	str	r3, [r0, #24]
}
 8006242:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8006244:	6201      	str	r1, [r0, #32]
}
 8006246:	4770      	bx	lr
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40000400 	.word	0x40000400

08006250 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006250:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d048      	beq.n	80062ea <HAL_TIM_IC_ConfigChannel+0x9a>
{
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800625c:	2001      	movs	r0, #1
 800625e:	460d      	mov	r5, r1
 8006260:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8006264:	b14a      	cbz	r2, 800627a <HAL_TIM_IC_ConfigChannel+0x2a>
  else if (Channel == TIM_CHANNEL_2)
 8006266:	2a04      	cmp	r2, #4
 8006268:	d01a      	beq.n	80062a0 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 800626a:	2a08      	cmp	r2, #8
 800626c:	d03f      	beq.n	80062ee <HAL_TIM_IC_ConfigChannel+0x9e>
  else if (Channel == TIM_CHANNEL_4)
 800626e:	2a0c      	cmp	r2, #12
 8006270:	d060      	beq.n	8006334 <HAL_TIM_IC_ConfigChannel+0xe4>
  __HAL_UNLOCK(htim);
 8006272:	2300      	movs	r3, #0
 8006274:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006278:	bd70      	pop	{r4, r5, r6, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	68cb      	ldr	r3, [r1, #12]
 800627e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8006282:	f7ff ffa7 	bl	80061d4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006286:	6983      	ldr	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006288:	68aa      	ldr	r2, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800628a:	f023 030c 	bic.w	r3, r3, #12
 800628e:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006290:	6983      	ldr	r3, [r0, #24]
 8006292:	4313      	orrs	r3, r2
 8006294:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8006296:	2300      	movs	r3, #0
 8006298:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	2000      	movs	r0, #0
}
 800629e:	bd70      	pop	{r4, r5, r6, pc}
                      sConfig->ICSelection,
 80062a0:	e9d1 2600 	ldrd	r2, r6, [r1]
    TIM_TI2_SetConfig(htim->Instance,
 80062a4:	6823      	ldr	r3, [r4, #0]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062a6:	0110      	lsls	r0, r2, #4
  tmpccer = TIMx->CCER;
 80062a8:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062aa:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b0:	f021 0110 	bic.w	r1, r1, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062b4:	f000 00a0 	and.w	r0, r0, #160	@ 0xa0
 80062b8:	4310      	orrs	r0, r2
                      sConfig->ICFilter);
 80062ba:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062bc:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062be:	6999      	ldr	r1, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80062c0:	68ad      	ldr	r5, [r5, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062c2:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062c6:	0312      	lsls	r2, r2, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062c8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062cc:	b292      	uxth	r2, r2
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ce:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062d2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1 ;
 80062d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d6:	6218      	str	r0, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80062de:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80062e0:	699a      	ldr	r2, [r3, #24]
 80062e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80062e6:	619a      	str	r2, [r3, #24]
 80062e8:	e7d5      	b.n	8006296 <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 80062ea:	2002      	movs	r0, #2
}
 80062ec:	4770      	bx	lr
                      sConfig->ICSelection,
 80062ee:	e9d1 2100 	ldrd	r2, r1, [r1]
    TIM_TI3_SetConfig(htim->Instance,
 80062f2:	6823      	ldr	r3, [r4, #0]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062f4:	0210      	lsls	r0, r2, #8
  tmpccer = TIMx->CCER;
 80062f6:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062f8:	6a1e      	ldr	r6, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062fa:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062fe:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006302:	f400 6020 	and.w	r0, r0, #2560	@ 0xa00
 8006306:	4310      	orrs	r0, r2
                      sConfig->ICFilter);
 8006308:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800630a:	621e      	str	r6, [r3, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800630c:	68ae      	ldr	r6, [r5, #8]
  tmpccmr2 = TIMx->CCMR2;
 800630e:	69dd      	ldr	r5, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006310:	f025 0503 	bic.w	r5, r5, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006314:	0112      	lsls	r2, r2, #4
  tmpccmr2 |= TIM_ICSelection;
 8006316:	4329      	orrs	r1, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006318:	b2d2      	uxtb	r2, r2
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800631a:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800631e:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 8006320:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006322:	6218      	str	r0, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	f022 020c 	bic.w	r2, r2, #12
 800632a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800632c:	69da      	ldr	r2, [r3, #28]
 800632e:	4332      	orrs	r2, r6
 8006330:	61da      	str	r2, [r3, #28]
 8006332:	e7b0      	b.n	8006296 <HAL_TIM_IC_ConfigChannel+0x46>
                      sConfig->ICSelection,
 8006334:	e9d1 2600 	ldrd	r2, r6, [r1]
    TIM_TI4_SetConfig(htim->Instance,
 8006338:	6823      	ldr	r3, [r4, #0]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800633a:	0310      	lsls	r0, r2, #12
  tmpccer = TIMx->CCER;
 800633c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800633e:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006340:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006344:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006348:	f400 4020 	and.w	r0, r0, #40960	@ 0xa000
 800634c:	4310      	orrs	r0, r2
                      sConfig->ICFilter);
 800634e:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006350:	6219      	str	r1, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006352:	69d9      	ldr	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006354:	68ad      	ldr	r5, [r5, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006356:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800635a:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800635c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006360:	b292      	uxth	r2, r2
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006362:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006366:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 8006368:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800636a:	6218      	str	r0, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800636c:	69da      	ldr	r2, [r3, #28]
 800636e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006372:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006374:	69da      	ldr	r2, [r3, #28]
 8006376:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800637a:	61da      	str	r2, [r3, #28]
 800637c:	e78b      	b.n	8006296 <HAL_TIM_IC_ConfigChannel+0x46>
 800637e:	bf00      	nop

08006380 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006380:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d04e      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
{
 8006388:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800638a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800638c:	4d27      	ldr	r5, [pc, #156]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 800638e:	2302      	movs	r3, #2
 8006390:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006394:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006396:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006398:	680c      	ldr	r4, [r1, #0]
 800639a:	4684      	mov	ip, r0
  tmpsmcr = htim->Instance->SMCR;
 800639c:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800639e:	d02c      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063a0:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80063a4:	42aa      	cmp	r2, r5
 80063a6:	d033      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80063a8:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 80063ac:	42aa      	cmp	r2, r5
 80063ae:	d024      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  tmpcr2 &= ~TIM_CR2_MMS;
 80063b0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063b8:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ba:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80063be:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c0:	d00e      	beq.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80063c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d00b      	beq.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80063c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d007      	beq.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80063d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d003      	beq.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80063d8:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 80063dc:	429a      	cmp	r2, r3
 80063de:	d104      	bne.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063e0:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063e2:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063e6:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063e8:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80063ea:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80063f2:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  return HAL_OK;
}
 80063f6:	bc30      	pop	{r4, r5}
 80063f8:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063fa:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006400:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006402:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800640a:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800640c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640e:	e7e7      	b.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006410:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006412:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006416:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006418:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800641c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006420:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 8006422:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006424:	e7dc      	b.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  __HAL_LOCK(htim);
 8006426:	2002      	movs	r0, #2
}
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40000400 	.word	0x40000400

08006434 <HAL_TIMEx_TISelection>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel)
{
 8006434:	4603      	mov	r3, r0

  /* Check parameters */
  assert_param(IS_TIM_TISEL_TIX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_TISEL(TISelection));

  __HAL_LOCK(htim);
 8006436:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800643a:	2801      	cmp	r0, #1
 800643c:	d043      	beq.n	80064c6 <HAL_TIMEx_TISelection+0x92>
 800643e:	2001      	movs	r0, #1
 8006440:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  switch (Channel)
 8006444:	2a0c      	cmp	r2, #12
 8006446:	d808      	bhi.n	800645a <HAL_TIMEx_TISelection+0x26>
 8006448:	e8df f002 	tbb	[pc, r2]
 800644c:	07070717 	.word	0x07070717
 8006450:	0707072f 	.word	0x0707072f
 8006454:	07070736 	.word	0x07070736
 8006458:	0c          	.byte	0x0c
 8006459:	00          	.byte	0x00
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 800645a:	2200      	movs	r2, #0
  switch (Channel)
 800645c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
}
 8006462:	4770      	bx	lr
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI4SEL, TISelection);
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8006468:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800646c:	430a      	orrs	r2, r1
 800646e:	65c2      	str	r2, [r0, #92]	@ 0x5c
  __HAL_UNLOCK(htim);
 8006470:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006478:	4770      	bx	lr
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
{
 800647e:	b410      	push	{r4}
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8006480:	4c14      	ldr	r4, [pc, #80]	@ (80064d4 <HAL_TIMEx_TISelection+0xa0>)
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 8006482:	f020 000f 	bic.w	r0, r0, #15
 8006486:	4301      	orrs	r1, r0
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 8006488:	42a2      	cmp	r2, r4
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI1SEL, TISelection);
 800648a:	65d1      	str	r1, [r2, #92]	@ 0x5c
      if (IS_TIM_HSE32_INSTANCE(htim->Instance))
 800648c:	d01d      	beq.n	80064ca <HAL_TIMEx_TISelection+0x96>
 800648e:	4912      	ldr	r1, [pc, #72]	@ (80064d8 <HAL_TIMEx_TISelection+0xa4>)
 8006490:	428a      	cmp	r2, r1
 8006492:	d01a      	beq.n	80064ca <HAL_TIMEx_TISelection+0x96>
        CLEAR_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 8006494:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 8006496:	f021 0101 	bic.w	r1, r1, #1
 800649a:	6691      	str	r1, [r2, #104]	@ 0x68
  __HAL_UNLOCK(htim);
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80064a2:	2000      	movs	r0, #0
}
 80064a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064a8:	4770      	bx	lr
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI2SEL, TISelection);
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80064ae:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80064b2:	430a      	orrs	r2, r1
 80064b4:	65c2      	str	r2, [r0, #92]	@ 0x5c
      break;
 80064b6:	e7db      	b.n	8006470 <HAL_TIMEx_TISelection+0x3c>
      MODIFY_REG(htim->Instance->TISEL, TIM_TISEL_TI3SEL, TISelection);
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80064bc:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80064c0:	430a      	orrs	r2, r1
 80064c2:	65c2      	str	r2, [r0, #92]	@ 0x5c
      break;
 80064c4:	e7d4      	b.n	8006470 <HAL_TIMEx_TISelection+0x3c>
  __HAL_LOCK(htim);
 80064c6:	2002      	movs	r0, #2
 80064c8:	4770      	bx	lr
        SET_BIT(htim->Instance->OR, TIM_OR_HSE32EN);
 80064ca:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80064cc:	f041 0101 	orr.w	r1, r1, #1
 80064d0:	6691      	str	r1, [r2, #104]	@ 0x68
 80064d2:	e7e3      	b.n	800649c <HAL_TIMEx_TISelection+0x68>
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064dc:	b410      	push	{r4}
 80064de:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	e842 3100 	strex	r1, r3, [r2]
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d1f7      	bne.n	80064e0 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064f0:	4c14      	ldr	r4, [pc, #80]	@ (8006544 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	f102 0308 	add.w	r3, r2, #8
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	f102 0c08 	add.w	ip, r2, #8
 8006500:	e84c 3100 	strex	r1, r3, [ip]
 8006504:	2900      	cmp	r1, #0
 8006506:	d1f4      	bne.n	80064f2 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006508:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d008      	beq.n	8006520 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006510:	2220      	movs	r2, #32
 8006512:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 8006516:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxISR = NULL;
 800651a:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 800651e:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006524:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	e842 3100 	strex	r1, r3, [r2]
 800652c:	2900      	cmp	r1, #0
 800652e:	d0ee      	beq.n	800650e <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	e852 3f00 	ldrex	r3, [r2]
 8006534:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	e842 3100 	strex	r1, r3, [r2]
 800653c:	2900      	cmp	r1, #0
 800653e:	d1ef      	bne.n	8006520 <UART_EndRxTransfer+0x44>
 8006540:	e7e5      	b.n	800650e <UART_EndRxTransfer+0x32>
 8006542:	bf00      	nop
 8006544:	effffffe 	.word	0xeffffffe

08006548 <HAL_UART_Transmit>:
{
 8006548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654c:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800654e:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8006552:	2820      	cmp	r0, #32
 8006554:	d151      	bne.n	80065fa <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8006556:	4688      	mov	r8, r1
 8006558:	b109      	cbz	r1, 800655e <HAL_UART_Transmit+0x16>
 800655a:	4617      	mov	r7, r2
 800655c:	b912      	cbnz	r2, 8006564 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 800655e:	2001      	movs	r0, #1
}
 8006560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006564:	461c      	mov	r4, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006566:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800656a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656c:	f8c5 9090 	str.w	r9, [r5, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006570:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8006574:	f7fb ff62 	bl	800243c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006578:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 800657a:	f8a5 7054 	strh.w	r7, [r5, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8006582:	f8a5 7056 	strh.w	r7, [r5, #86]	@ 0x56
    tickstart = HAL_GetTick();
 8006586:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006588:	d03a      	beq.n	8006600 <HAL_UART_Transmit+0xb8>
    while (huart->TxXferCount > 0U)
 800658a:	f8b5 2056 	ldrh.w	r2, [r5, #86]	@ 0x56
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658e:	682b      	ldr	r3, [r5, #0]
    while (huart->TxXferCount > 0U)
 8006590:	b292      	uxth	r2, r2
 8006592:	b912      	cbnz	r2, 800659a <HAL_UART_Transmit+0x52>
 8006594:	e01a      	b.n	80065cc <HAL_UART_Transmit+0x84>
    if (Timeout != HAL_MAX_DELAY)
 8006596:	1c67      	adds	r7, r4, #1
 8006598:	d120      	bne.n	80065dc <HAL_UART_Transmit+0x94>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	0610      	lsls	r0, r2, #24
 800659e:	d5fa      	bpl.n	8006596 <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 80065a0:	f1b8 0f00 	cmp.w	r8, #0
 80065a4:	d023      	beq.n	80065ee <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065a6:	f818 2b01 	ldrb.w	r2, [r8], #1
 80065aa:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 80065ac:	f8b5 2056 	ldrh.w	r2, [r5, #86]	@ 0x56
 80065b0:	3a01      	subs	r2, #1
 80065b2:	b292      	uxth	r2, r2
 80065b4:	f8a5 2056 	strh.w	r2, [r5, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065b8:	f8b5 2056 	ldrh.w	r2, [r5, #86]	@ 0x56
 80065bc:	b292      	uxth	r2, r2
 80065be:	2a00      	cmp	r2, #0
 80065c0:	d1eb      	bne.n	800659a <HAL_UART_Transmit+0x52>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	0652      	lsls	r2, r2, #25
 80065c6:	d404      	bmi.n	80065d2 <HAL_UART_Transmit+0x8a>
    if (Timeout != HAL_MAX_DELAY)
 80065c8:	1c61      	adds	r1, r4, #1
 80065ca:	d125      	bne.n	8006618 <HAL_UART_Transmit+0xd0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065cc:	69da      	ldr	r2, [r3, #28]
 80065ce:	0652      	lsls	r2, r2, #25
 80065d0:	d5fa      	bpl.n	80065c8 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80065d2:	2320      	movs	r3, #32
 80065d4:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
    return HAL_OK;
 80065d8:	2000      	movs	r0, #0
 80065da:	e7c1      	b.n	8006560 <HAL_UART_Transmit+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065dc:	f7fb ff2e 	bl	800243c <HAL_GetTick>
 80065e0:	1b80      	subs	r0, r0, r6
 80065e2:	4284      	cmp	r4, r0
 80065e4:	d312      	bcc.n	800660c <HAL_UART_Transmit+0xc4>
 80065e6:	b18c      	cbz	r4, 800660c <HAL_UART_Transmit+0xc4>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	e7d5      	b.n	800659a <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ee:	f839 2b02 	ldrh.w	r2, [r9], #2
 80065f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065f8:	e7d8      	b.n	80065ac <HAL_UART_Transmit+0x64>
    return HAL_BUSY;
 80065fa:	2002      	movs	r0, #2
}
 80065fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006600:	692b      	ldr	r3, [r5, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1c1      	bne.n	800658a <HAL_UART_Transmit+0x42>
 8006606:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8006608:	4698      	mov	r8, r3
 800660a:	e7be      	b.n	800658a <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 800660c:	2320      	movs	r3, #32
 800660e:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        return HAL_TIMEOUT;
 8006612:	2003      	movs	r0, #3
}
 8006614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006618:	f7fb ff10 	bl	800243c <HAL_GetTick>
 800661c:	1b83      	subs	r3, r0, r6
 800661e:	429c      	cmp	r4, r3
 8006620:	d3f4      	bcc.n	800660c <HAL_UART_Transmit+0xc4>
 8006622:	2c00      	cmp	r4, #0
 8006624:	d0f2      	beq.n	800660c <HAL_UART_Transmit+0xc4>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006626:	682b      	ldr	r3, [r5, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	e7cf      	b.n	80065cc <HAL_UART_Transmit+0x84>

0800662c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop

08006630 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop

08006634 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop

08006638 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop

0800663c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800663c:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800663e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006640:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
{
 8006644:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006646:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	0612      	lsls	r2, r2, #24
 800664e:	d501      	bpl.n	8006654 <UART_DMAError+0x18>
 8006650:	2921      	cmp	r1, #33	@ 0x21
 8006652:	d013      	beq.n	800667c <UART_DMAError+0x40>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	065b      	lsls	r3, r3, #25
 8006658:	d501      	bpl.n	800665e <UART_DMAError+0x22>
 800665a:	2c22      	cmp	r4, #34	@ 0x22
 800665c:	d008      	beq.n	8006670 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800665e:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8006662:	f043 0310 	orr.w	r3, r3, #16
 8006666:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800666a:	f7ff ffe5 	bl	8006638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800666e:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006676:	f7ff ff31 	bl	80064dc <UART_EndRxTransfer>
 800667a:	e7f0      	b.n	800665e <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800667c:	2200      	movs	r2, #0
 800667e:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006686:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	e843 2100 	strex	r1, r2, [r3]
 800668e:	2900      	cmp	r1, #0
 8006690:	d1f7      	bne.n	8006682 <UART_DMAError+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	f103 0208 	add.w	r2, r3, #8
 8006696:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800669a:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	f103 0c08 	add.w	ip, r3, #8
 80066a2:	e84c 2100 	strex	r1, r2, [ip]
 80066a6:	2900      	cmp	r1, #0
 80066a8:	d1f3      	bne.n	8006692 <UART_DMAError+0x56>
  huart->gState = HAL_UART_STATE_READY;
 80066aa:	2220      	movs	r2, #32
 80066ac:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 80066b0:	e7d0      	b.n	8006654 <UART_DMAError+0x18>
 80066b2:	bf00      	nop

080066b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066b6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80066be:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066c2:	f7ff ffb9 	bl	8006638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c6:	bd08      	pop	{r3, pc}

080066c8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066c8:	6803      	ldr	r3, [r0, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066cc:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066ce:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 80066d2:	ea12 0f0c 	tst.w	r2, ip
{
 80066d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066da:	689d      	ldr	r5, [r3, #8]
{
 80066dc:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80066de:	d133      	bne.n	8006748 <HAL_UART_IRQHandler+0x80>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066e0:	0696      	lsls	r6, r2, #26
 80066e2:	d507      	bpl.n	80066f4 <HAL_UART_IRQHandler+0x2c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066e4:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066e8:	f005 5c80 	and.w	ip, r5, #268435456	@ 0x10000000
 80066ec:	ea56 060c 	orrs.w	r6, r6, ip
 80066f0:	f040 80f8 	bne.w	80068e4 <HAL_UART_IRQHandler+0x21c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80066f6:	2801      	cmp	r0, #1
 80066f8:	f000 80b4 	beq.w	8006864 <HAL_UART_IRQHandler+0x19c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066fc:	02d7      	lsls	r7, r2, #11
 80066fe:	d419      	bmi.n	8006734 <HAL_UART_IRQHandler+0x6c>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006700:	0610      	lsls	r0, r2, #24
 8006702:	d506      	bpl.n	8006712 <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006704:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006708:	f001 0080 	and.w	r0, r1, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800670c:	4328      	orrs	r0, r5
 800670e:	f040 80f0 	bne.w	80068f2 <HAL_UART_IRQHandler+0x22a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006712:	0657      	lsls	r7, r2, #25
 8006714:	d502      	bpl.n	800671c <HAL_UART_IRQHandler+0x54>
 8006716:	064e      	lsls	r6, r1, #25
 8006718:	f100 80cc 	bmi.w	80068b4 <HAL_UART_IRQHandler+0x1ec>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800671c:	0215      	lsls	r5, r2, #8
 800671e:	d502      	bpl.n	8006726 <HAL_UART_IRQHandler+0x5e>
 8006720:	0048      	lsls	r0, r1, #1
 8006722:	f100 80fa 	bmi.w	800691a <HAL_UART_IRQHandler+0x252>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006726:	01d3      	lsls	r3, r2, #7
 8006728:	d502      	bpl.n	8006730 <HAL_UART_IRQHandler+0x68>
 800672a:	2900      	cmp	r1, #0
 800672c:	f2c0 812b 	blt.w	8006986 <HAL_UART_IRQHandler+0x2be>
}
 8006730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006734:	026e      	lsls	r6, r5, #9
 8006736:	d5e3      	bpl.n	8006700 <HAL_UART_IRQHandler+0x38>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006738:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800673c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800673e:	621a      	str	r2, [r3, #32]
}
 8006740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006744:	f000 bcce 	b.w	80070e4 <HAL_UARTEx_WakeupCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006748:	48b2      	ldr	r0, [pc, #712]	@ (8006a14 <HAL_UART_IRQHandler+0x34c>)
 800674a:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800674e:	48b2      	ldr	r0, [pc, #712]	@ (8006a18 <HAL_UART_IRQHandler+0x350>)
 8006750:	4008      	ands	r0, r1
 8006752:	ea50 000c 	orrs.w	r0, r0, ip
 8006756:	d0cd      	beq.n	80066f4 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006758:	07d7      	lsls	r7, r2, #31
 800675a:	461e      	mov	r6, r3
 800675c:	d509      	bpl.n	8006772 <HAL_UART_IRQHandler+0xaa>
 800675e:	05c8      	lsls	r0, r1, #23
 8006760:	d507      	bpl.n	8006772 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006762:	2001      	movs	r0, #1
 8006764:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006766:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800676a:	f040 0001 	orr.w	r0, r0, #1
 800676e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006772:	0797      	lsls	r7, r2, #30
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006774:	f002 0004 	and.w	r0, r2, #4
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006778:	f140 80ad 	bpl.w	80068d6 <HAL_UART_IRQHandler+0x20e>
 800677c:	07ef      	lsls	r7, r5, #31
 800677e:	d510      	bpl.n	80067a2 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006780:	2702      	movs	r7, #2
 8006782:	621f      	str	r7, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006784:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
 8006788:	f047 0704 	orr.w	r7, r7, #4
 800678c:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006790:	b138      	cbz	r0, 80067a2 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006792:	2004      	movs	r0, #4
 8006794:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006796:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800679a:	f040 0002 	orr.w	r0, r0, #2
 800679e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067a2:	0710      	lsls	r0, r2, #28
 80067a4:	d50c      	bpl.n	80067c0 <HAL_UART_IRQHandler+0xf8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067a6:	f001 0020 	and.w	r0, r1, #32
 80067aa:	ea50 000c 	orrs.w	r0, r0, ip
 80067ae:	d007      	beq.n	80067c0 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067b0:	2008      	movs	r0, #8
 80067b2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067b4:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80067b8:	f040 0008 	orr.w	r0, r0, #8
 80067bc:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067c0:	0517      	lsls	r7, r2, #20
 80067c2:	d50a      	bpl.n	80067da <HAL_UART_IRQHandler+0x112>
 80067c4:	0148      	lsls	r0, r1, #5
 80067c6:	d508      	bpl.n	80067da <HAL_UART_IRQHandler+0x112>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80067cc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80067d2:	f043 0320 	orr.w	r3, r3, #32
 80067d6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067da:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0a6      	beq.n	8006730 <HAL_UART_IRQHandler+0x68>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067e2:	0692      	lsls	r2, r2, #26
 80067e4:	d506      	bpl.n	80067f4 <HAL_UART_IRQHandler+0x12c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067e6:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067ea:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 80067ee:	4329      	orrs	r1, r5
 80067f0:	f040 8087 	bne.w	8006902 <HAL_UART_IRQHandler+0x23a>
      errorcode = huart->ErrorCode;
 80067f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067f8:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067fa:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006802:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8006806:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006808:	f000 80c2 	beq.w	8006990 <HAL_UART_IRQHandler+0x2c8>
        UART_EndRxTransfer(huart);
 800680c:	f7ff fe66 	bl	80064dc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006810:	68b3      	ldr	r3, [r6, #8]
 8006812:	065b      	lsls	r3, r3, #25
 8006814:	d57d      	bpl.n	8006912 <HAL_UART_IRQHandler+0x24a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	f106 0308 	add.w	r3, r6, #8
 800681a:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800681e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	f106 0108 	add.w	r1, r6, #8
 8006826:	e841 3200 	strex	r2, r3, [r1]
 800682a:	b162      	cbz	r2, 8006846 <HAL_UART_IRQHandler+0x17e>
 800682c:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	f103 0208 	add.w	r2, r3, #8
 8006832:	e852 2f00 	ldrex	r2, [r2]
 8006836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	f103 0008 	add.w	r0, r3, #8
 800683e:	e840 2100 	strex	r1, r2, [r0]
 8006842:	2900      	cmp	r1, #0
 8006844:	d1f3      	bne.n	800682e <HAL_UART_IRQHandler+0x166>
          if (huart->hdmarx != NULL)
 8006846:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800684a:	2800      	cmp	r0, #0
 800684c:	d061      	beq.n	8006912 <HAL_UART_IRQHandler+0x24a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800684e:	4b73      	ldr	r3, [pc, #460]	@ (8006a1c <HAL_UART_IRQHandler+0x354>)
 8006850:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006852:	f7fd fa71 	bl	8003d38 <HAL_DMA_Abort_IT>
 8006856:	2800      	cmp	r0, #0
 8006858:	f43f af6a 	beq.w	8006730 <HAL_UART_IRQHandler+0x68>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800685c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006860:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006862:	e043      	b.n	80068ec <HAL_UART_IRQHandler+0x224>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006864:	06d7      	lsls	r7, r2, #27
 8006866:	f57f af49 	bpl.w	80066fc <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800686a:	06ce      	lsls	r6, r1, #27
 800686c:	f57f af46 	bpl.w	80066fc <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006870:	2210      	movs	r2, #16
 8006872:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	6899      	ldr	r1, [r3, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006876:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687a:	0648      	lsls	r0, r1, #25
 800687c:	f140 808d 	bpl.w	800699a <HAL_UART_IRQHandler+0x2d2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006880:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006884:	6805      	ldr	r5, [r0, #0]
 8006886:	6869      	ldr	r1, [r5, #4]
 8006888:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800688a:	2900      	cmp	r1, #0
 800688c:	f000 80ba 	beq.w	8006a04 <HAL_UART_IRQHandler+0x33c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006890:	4291      	cmp	r1, r2
 8006892:	f080 80b7 	bcs.w	8006a04 <HAL_UART_IRQHandler+0x33c>
        huart->RxXferCount = nb_remaining_rx_data;
 8006896:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800689a:	6829      	ldr	r1, [r5, #0]
 800689c:	0689      	lsls	r1, r1, #26
 800689e:	d541      	bpl.n	8006924 <HAL_UART_IRQHandler+0x25c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068a0:	2302      	movs	r3, #2
 80068a2:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068a4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 80068a8:	1a51      	subs	r1, r2, r1
 80068aa:	4620      	mov	r0, r4
 80068ac:	b289      	uxth	r1, r1
 80068ae:	f7fb fa93 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
 80068b2:	e73d      	b.n	8006730 <HAL_UART_IRQHandler+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	e843 2100 	strex	r1, r2, [r3]
 80068c0:	2900      	cmp	r1, #0
 80068c2:	d1f7      	bne.n	80068b4 <HAL_UART_IRQHandler+0x1ec>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068c4:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068c6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80068c8:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 80068cc:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ce:	4620      	mov	r0, r4
 80068d0:	f7ff feac 	bl	800662c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068d4:	e72c      	b.n	8006730 <HAL_UART_IRQHandler+0x68>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f43f af63 	beq.w	80067a2 <HAL_UART_IRQHandler+0xda>
 80068dc:	07ef      	lsls	r7, r5, #31
 80068de:	f53f af58 	bmi.w	8006792 <HAL_UART_IRQHandler+0xca>
 80068e2:	e75e      	b.n	80067a2 <HAL_UART_IRQHandler+0xda>
      if (huart->RxISR != NULL)
 80068e4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f43f af22 	beq.w	8006730 <HAL_UART_IRQHandler+0x68>
}
 80068ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068f0:	4718      	bx	r3
    if (huart->TxISR != NULL)
 80068f2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f43f af1b 	beq.w	8006730 <HAL_UART_IRQHandler+0x68>
      huart->TxISR(huart);
 80068fa:	4620      	mov	r0, r4
}
 80068fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8006900:	4718      	bx	r3
        if (huart->RxISR != NULL)
 8006902:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006904:	2b00      	cmp	r3, #0
 8006906:	f43f af75 	beq.w	80067f4 <HAL_UART_IRQHandler+0x12c>
          huart->RxISR(huart);
 800690a:	4620      	mov	r0, r4
 800690c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800690e:	6826      	ldr	r6, [r4, #0]
 8006910:	e770      	b.n	80067f4 <HAL_UART_IRQHandler+0x12c>
            HAL_UART_ErrorCallback(huart);
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff fe90 	bl	8006638 <HAL_UART_ErrorCallback>
 8006918:	e70a      	b.n	8006730 <HAL_UART_IRQHandler+0x68>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800691a:	4620      	mov	r0, r4
}
 800691c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006920:	f000 bbe4 	b.w	80070ec <HAL_UARTEx_TxFifoEmptyCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	e843 2100 	strex	r1, r2, [r3]
 8006930:	2900      	cmp	r1, #0
 8006932:	d1f7      	bne.n	8006924 <HAL_UART_IRQHandler+0x25c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	f103 0208 	add.w	r2, r3, #8
 8006938:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	f103 0508 	add.w	r5, r3, #8
 8006944:	e845 2100 	strex	r1, r2, [r5]
 8006948:	2900      	cmp	r1, #0
 800694a:	d1f3      	bne.n	8006934 <HAL_UART_IRQHandler+0x26c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	f103 0208 	add.w	r2, r3, #8
 8006950:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006954:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	f103 0508 	add.w	r5, r3, #8
 800695c:	e845 2100 	strex	r1, r2, [r5]
 8006960:	2900      	cmp	r1, #0
 8006962:	d1f3      	bne.n	800694c <HAL_UART_IRQHandler+0x284>
          huart->RxState = HAL_UART_STATE_READY;
 8006964:	2220      	movs	r2, #32
 8006966:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696a:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006970:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	e843 2100 	strex	r1, r2, [r3]
 8006978:	2900      	cmp	r1, #0
 800697a:	d1f7      	bne.n	800696c <HAL_UART_IRQHandler+0x2a4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800697c:	f7fd f9a2 	bl	8003cc4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006980:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
 8006984:	e78c      	b.n	80068a0 <HAL_UART_IRQHandler+0x1d8>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006986:	4620      	mov	r0, r4
}
 8006988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800698c:	f000 bbac 	b.w	80070e8 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8006990:	f7ff fe52 	bl	8006638 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006994:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8006998:	e6ca      	b.n	8006730 <HAL_UART_IRQHandler+0x68>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800699a:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 800699e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 80069a2:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a4:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 80069a6:	2900      	cmp	r1, #0
 80069a8:	f43f aec2 	beq.w	8006730 <HAL_UART_IRQHandler+0x68>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069ac:	1a12      	subs	r2, r2, r0
 80069ae:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 80069b0:	2900      	cmp	r1, #0
 80069b2:	f43f aebd 	beq.w	8006730 <HAL_UART_IRQHandler+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069ba:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	e843 2000 	strex	r0, r2, [r3]
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d1f7      	bne.n	80069b6 <HAL_UART_IRQHandler+0x2ee>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069c6:	4d16      	ldr	r5, [pc, #88]	@ (8006a20 <HAL_UART_IRQHandler+0x358>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	f103 0208 	add.w	r2, r3, #8
 80069cc:	e852 2f00 	ldrex	r2, [r2]
 80069d0:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	f103 0608 	add.w	r6, r3, #8
 80069d6:	e846 2000 	strex	r0, r2, [r6]
 80069da:	2800      	cmp	r0, #0
 80069dc:	d1f4      	bne.n	80069c8 <HAL_UART_IRQHandler+0x300>
        huart->RxState = HAL_UART_STATE_READY;
 80069de:	2220      	movs	r2, #32
 80069e0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 80069e4:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e6:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	e843 2000 	strex	r0, r2, [r3]
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d1f7      	bne.n	80069e8 <HAL_UART_IRQHandler+0x320>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069f8:	2302      	movs	r3, #2
 80069fa:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069fc:	4620      	mov	r0, r4
 80069fe:	f7fb f9eb 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
 8006a02:	e695      	b.n	8006730 <HAL_UART_IRQHandler+0x68>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006a04:	4291      	cmp	r1, r2
 8006a06:	f47f ae93 	bne.w	8006730 <HAL_UART_IRQHandler+0x68>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a0a:	682b      	ldr	r3, [r5, #0]
 8006a0c:	069b      	lsls	r3, r3, #26
 8006a0e:	f57f ae8f 	bpl.w	8006730 <HAL_UART_IRQHandler+0x68>
 8006a12:	e7f1      	b.n	80069f8 <HAL_UART_IRQHandler+0x330>
 8006a14:	10000001 	.word	0x10000001
 8006a18:	04000120 	.word	0x04000120
 8006a1c:	080066b5 	.word	0x080066b5
 8006a20:	effffffe 	.word	0xeffffffe

08006a24 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a24:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8006a26:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d002      	beq.n	8006a38 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a32:	f7ff fdff 	bl	8006634 <HAL_UART_RxHalfCpltCallback>
}
 8006a36:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a38:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006a3c:	0849      	lsrs	r1, r1, #1
 8006a3e:	f7fb f9cb 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
}
 8006a42:	bd08      	pop	{r3, pc}

08006a44 <UART_DMAReceiveCplt>:
{
 8006a44:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a46:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a48:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f012 0220 	ands.w	r2, r2, #32
 8006a50:	d128      	bne.n	8006aa4 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8006a52:	6803      	ldr	r3, [r0, #0]
 8006a54:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	e843 2100 	strex	r1, r2, [r3]
 8006a64:	2900      	cmp	r1, #0
 8006a66:	d1f7      	bne.n	8006a58 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	f103 0208 	add.w	r2, r3, #8
 8006a6c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a70:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	f103 0c08 	add.w	ip, r3, #8
 8006a78:	e84c 2100 	strex	r1, r2, [ip]
 8006a7c:	2900      	cmp	r1, #0
 8006a7e:	d1f3      	bne.n	8006a68 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	f103 0208 	add.w	r2, r3, #8
 8006a84:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	f103 0c08 	add.w	ip, r3, #8
 8006a90:	e84c 2100 	strex	r1, r2, [ip]
 8006a94:	2900      	cmp	r1, #0
 8006a96:	d1f3      	bne.n	8006a80 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8006aa0:	2a01      	cmp	r2, #1
 8006aa2:	d007      	beq.n	8006ab4 <UART_DMAReceiveCplt+0x70>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d013      	beq.n	8006ad6 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8006aae:	f7ff fdbf 	bl	8006630 <HAL_UART_RxCpltCallback>
}
 8006ab2:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	e843 2100 	strex	r1, r2, [r3]
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d0ef      	beq.n	8006aa4 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	e853 2f00 	ldrex	r2, [r3]
 8006ac8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	e843 2100 	strex	r1, r2, [r3]
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d1ef      	bne.n	8006ab4 <UART_DMAReceiveCplt+0x70>
 8006ad4:	e7e6      	b.n	8006aa4 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ad6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006ada:	f7fb f97d 	bl	8001dd8 <HAL_UARTEx_RxEventCallback>
}
 8006ade:	bd08      	pop	{r3, pc}

08006ae0 <UART_SetConfig>:
{
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ae4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ae6:	6882      	ldr	r2, [r0, #8]
 8006ae8:	6900      	ldr	r0, [r0, #16]
 8006aea:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aec:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aee:	4302      	orrs	r2, r0
 8006af0:	430a      	orrs	r2, r1
 8006af2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006af4:	49a0      	ldr	r1, [pc, #640]	@ (8006d78 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006af6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006af8:	4029      	ands	r1, r5
 8006afa:	430a      	orrs	r2, r1
 8006afc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b02:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b04:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006b08:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b0a:	499c      	ldr	r1, [pc, #624]	@ (8006d7c <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b0c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b0e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b10:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b12:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b14:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8006b18:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b1c:	f000 80d1 	beq.w	8006cc2 <UART_SetConfig+0x1e2>
    tmpreg |= huart->Init.OneBitSampling;
 8006b20:	6a26      	ldr	r6, [r4, #32]
 8006b22:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b24:	430a      	orrs	r2, r1
 8006b26:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2a:	f022 020f 	bic.w	r2, r2, #15
 8006b2e:	432a      	orrs	r2, r5
 8006b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b32:	4a93      	ldr	r2, [pc, #588]	@ (8006d80 <UART_SetConfig+0x2a0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d039      	beq.n	8006bac <UART_SetConfig+0xcc>
 8006b38:	4a92      	ldr	r2, [pc, #584]	@ (8006d84 <UART_SetConfig+0x2a4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d012      	beq.n	8006b64 <UART_SetConfig+0x84>
 8006b3e:	4a92      	ldr	r2, [pc, #584]	@ (8006d88 <UART_SetConfig+0x2a8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	f000 80a6 	beq.w	8006c92 <UART_SetConfig+0x1b2>
 8006b46:	4a91      	ldr	r2, [pc, #580]	@ (8006d8c <UART_SetConfig+0x2ac>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d043      	beq.n	8006bd4 <UART_SetConfig+0xf4>
 8006b4c:	4a90      	ldr	r2, [pc, #576]	@ (8006d90 <UART_SetConfig+0x2b0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	f000 808f 	beq.w	8006c72 <UART_SetConfig+0x192>
        ret = HAL_ERROR;
 8006b54:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006b56:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006b58:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8006b5c:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8006b60:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b64:	4b8b      	ldr	r3, [pc, #556]	@ (8006d94 <UART_SetConfig+0x2b4>)
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b0c      	cmp	r3, #12
 8006b70:	d8f0      	bhi.n	8006b54 <UART_SetConfig+0x74>
 8006b72:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <UART_SetConfig+0x98>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006c87 	.word	0x08006c87
 8006b7c:	08006b55 	.word	0x08006b55
 8006b80:	08006b55 	.word	0x08006b55
 8006b84:	08006b55 	.word	0x08006b55
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006b55 	.word	0x08006b55
 8006b90:	08006b55 	.word	0x08006b55
 8006b94:	08006b55 	.word	0x08006b55
 8006b98:	08006c35 	.word	0x08006c35
 8006b9c:	08006b55 	.word	0x08006b55
 8006ba0:	08006b55 	.word	0x08006b55
 8006ba4:	08006b55 	.word	0x08006b55
 8006ba8:	08006c05 	.word	0x08006c05
 8006bac:	4b79      	ldr	r3, [pc, #484]	@ (8006d94 <UART_SetConfig+0x2b4>)
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d03c      	beq.n	8006c34 <UART_SetConfig+0x154>
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d022      	beq.n	8006c04 <UART_SetConfig+0x124>
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d014      	beq.n	8006bec <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006bc6:	f000 80ce 	beq.w	8006d66 <UART_SetConfig+0x286>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bca:	f7fe fa4d 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006bce:	b9a8      	cbnz	r0, 8006bfc <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	e7c0      	b.n	8006b56 <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8006d94 <UART_SetConfig+0x2b4>)
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bde:	2b80      	cmp	r3, #128	@ 0x80
 8006be0:	d028      	beq.n	8006c34 <UART_SetConfig+0x154>
 8006be2:	d863      	bhi.n	8006cac <UART_SetConfig+0x1cc>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d04e      	beq.n	8006c86 <UART_SetConfig+0x1a6>
 8006be8:	2b40      	cmp	r3, #64	@ 0x40
 8006bea:	d1b3      	bne.n	8006b54 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006bf0:	f000 80be 	beq.w	8006d70 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf4:	f7fe f8e4 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d0e9      	beq.n	8006bd0 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bfc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006bfe:	e006      	b.n	8006c0e <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c00:	2b30      	cmp	r3, #48	@ 0x30
 8006c02:	d1a7      	bne.n	8006b54 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c04:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006c08:	d018      	beq.n	8006c3c <UART_SetConfig+0x15c>
        pclk = (uint32_t) LSE_VALUE;
 8006c0a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	4a61      	ldr	r2, [pc, #388]	@ (8006d98 <UART_SetConfig+0x2b8>)
 8006c12:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8006c16:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c1a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c1e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006c22:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c26:	f1a0 0310 	sub.w	r3, r0, #16
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d892      	bhi.n	8006b54 <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	60d8      	str	r0, [r3, #12]
 8006c32:	e7cd      	b.n	8006bd0 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c34:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006c38:	4858      	ldr	r0, [pc, #352]	@ (8006d9c <UART_SetConfig+0x2bc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c3a:	d1e8      	bne.n	8006c0e <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c3c:	6862      	ldr	r2, [r4, #4]
 8006c3e:	4b56      	ldr	r3, [pc, #344]	@ (8006d98 <UART_SetConfig+0x2b8>)
 8006c40:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8006c44:	fbb0 f0f1 	udiv	r0, r0, r1
 8006c48:	0853      	lsrs	r3, r2, #1
 8006c4a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4e:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c52:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c56:	f1a3 0210 	sub.w	r2, r3, #16
 8006c5a:	428a      	cmp	r2, r1
 8006c5c:	f63f af7a 	bhi.w	8006b54 <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c60:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8006c64:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c66:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c68:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60cb      	str	r3, [r1, #12]
 8006c70:	e7ae      	b.n	8006bd0 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c72:	4b48      	ldr	r3, [pc, #288]	@ (8006d94 <UART_SetConfig+0x2b4>)
 8006c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c80:	d0d8      	beq.n	8006c34 <UART_SetConfig+0x154>
 8006c82:	d81a      	bhi.n	8006cba <UART_SetConfig+0x1da>
 8006c84:	b9ab      	cbnz	r3, 8006cb2 <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c86:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006c8a:	d065      	beq.n	8006d58 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f7fe f9da 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
        break;
 8006c90:	e79d      	b.n	8006bce <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c92:	4b40      	ldr	r3, [pc, #256]	@ (8006d94 <UART_SetConfig+0x2b4>)
 8006c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	d0c9      	beq.n	8006c34 <UART_SetConfig+0x154>
 8006ca0:	d8ae      	bhi.n	8006c00 <UART_SetConfig+0x120>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0ef      	beq.n	8006c86 <UART_SetConfig+0x1a6>
 8006ca6:	2b10      	cmp	r3, #16
 8006ca8:	d0a0      	beq.n	8006bec <UART_SetConfig+0x10c>
 8006caa:	e753      	b.n	8006b54 <UART_SetConfig+0x74>
 8006cac:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cae:	d0a9      	beq.n	8006c04 <UART_SetConfig+0x124>
 8006cb0:	e750      	b.n	8006b54 <UART_SetConfig+0x74>
 8006cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cb6:	d099      	beq.n	8006bec <UART_SetConfig+0x10c>
 8006cb8:	e74c      	b.n	8006b54 <UART_SetConfig+0x74>
 8006cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cbe:	d0a1      	beq.n	8006c04 <UART_SetConfig+0x124>
 8006cc0:	e748      	b.n	8006b54 <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cc2:	4311      	orrs	r1, r2
 8006cc4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cc8:	4932      	ldr	r1, [pc, #200]	@ (8006d94 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cca:	f022 020f 	bic.w	r2, r2, #15
 8006cce:	432a      	orrs	r2, r5
 8006cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cd2:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006cd6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cde:	d045      	beq.n	8006d6c <UART_SetConfig+0x28c>
 8006ce0:	d833      	bhi.n	8006d4a <UART_SetConfig+0x26a>
 8006ce2:	b37b      	cbz	r3, 8006d44 <UART_SetConfig+0x264>
 8006ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce8:	f47f af34 	bne.w	8006b54 <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 8006cec:	f7fe f868 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f43f af6d 	beq.w	8006bd0 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cf6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cf8:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cfa:	4b27      	ldr	r3, [pc, #156]	@ (8006d98 <UART_SetConfig+0x2b8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cfc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d00:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8006d04:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	f63f af23 	bhi.w	8006b54 <UART_SetConfig+0x74>
 8006d0e:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006d12:	f63f af1f 	bhi.w	8006b54 <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d16:	2300      	movs	r3, #0
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f7f9 fe9b 	bl	8000a54 <__aeabi_uldivmod>
 8006d1e:	0872      	lsrs	r2, r6, #1
 8006d20:	0203      	lsls	r3, r0, #8
 8006d22:	0209      	lsls	r1, r1, #8
 8006d24:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006d28:	1898      	adds	r0, r3, r2
 8006d2a:	f141 0100 	adc.w	r1, r1, #0
 8006d2e:	4632      	mov	r2, r6
 8006d30:	2300      	movs	r3, #0
 8006d32:	f7f9 fe8f 	bl	8000a54 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d36:	4b1a      	ldr	r3, [pc, #104]	@ (8006da0 <UART_SetConfig+0x2c0>)
 8006d38:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	f63f af09 	bhi.w	8006b54 <UART_SetConfig+0x74>
 8006d42:	e774      	b.n	8006c2e <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d44:	f7fe f97e 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
        break;
 8006d48:	e7d2      	b.n	8006cf0 <UART_SetConfig+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d4e:	f47f af01 	bne.w	8006b54 <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 8006d52:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006d56:	e7cf      	b.n	8006cf8 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d58:	f7fe f974 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f43f af37 	beq.w	8006bd0 <UART_SetConfig+0xf0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d62:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006d64:	e76a      	b.n	8006c3c <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d66:	f7fe f97f 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
        break;
 8006d6a:	e7f7      	b.n	8006d5c <UART_SetConfig+0x27c>
        pclk = (uint32_t) HSI_VALUE;
 8006d6c:	480b      	ldr	r0, [pc, #44]	@ (8006d9c <UART_SetConfig+0x2bc>)
 8006d6e:	e7c3      	b.n	8006cf8 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 8006d70:	f7fe f826 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
        break;
 8006d74:	e7f2      	b.n	8006d5c <UART_SetConfig+0x27c>
 8006d76:	bf00      	nop
 8006d78:	cfff69f3 	.word	0xcfff69f3
 8006d7c:	40008000 	.word	0x40008000
 8006d80:	40013800 	.word	0x40013800
 8006d84:	40004400 	.word	0x40004400
 8006d88:	40004800 	.word	0x40004800
 8006d8c:	40004c00 	.word	0x40004c00
 8006d90:	40005000 	.word	0x40005000
 8006d94:	40021000 	.word	0x40021000
 8006d98:	08007800 	.word	0x08007800
 8006d9c:	00f42400 	.word	0x00f42400
 8006da0:	000ffcff 	.word	0x000ffcff

08006da4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006da4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006da6:	071a      	lsls	r2, r3, #28
{
 8006da8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006daa:	d506      	bpl.n	8006dba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dac:	6801      	ldr	r1, [r0, #0]
 8006dae:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006db0:	684a      	ldr	r2, [r1, #4]
 8006db2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006db6:	4322      	orrs	r2, r4
 8006db8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dba:	07dc      	lsls	r4, r3, #31
 8006dbc:	d506      	bpl.n	8006dcc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dbe:	6801      	ldr	r1, [r0, #0]
 8006dc0:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006dc2:	684a      	ldr	r2, [r1, #4]
 8006dc4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006dc8:	4322      	orrs	r2, r4
 8006dca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dcc:	0799      	lsls	r1, r3, #30
 8006dce:	d506      	bpl.n	8006dde <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dd0:	6801      	ldr	r1, [r0, #0]
 8006dd2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006dd4:	684a      	ldr	r2, [r1, #4]
 8006dd6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006dda:	4322      	orrs	r2, r4
 8006ddc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dde:	075a      	lsls	r2, r3, #29
 8006de0:	d506      	bpl.n	8006df0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de2:	6801      	ldr	r1, [r0, #0]
 8006de4:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006de6:	684a      	ldr	r2, [r1, #4]
 8006de8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006dec:	4322      	orrs	r2, r4
 8006dee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df0:	06dc      	lsls	r4, r3, #27
 8006df2:	d506      	bpl.n	8006e02 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df4:	6801      	ldr	r1, [r0, #0]
 8006df6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006df8:	688a      	ldr	r2, [r1, #8]
 8006dfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006dfe:	4322      	orrs	r2, r4
 8006e00:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e02:	0699      	lsls	r1, r3, #26
 8006e04:	d506      	bpl.n	8006e14 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e06:	6801      	ldr	r1, [r0, #0]
 8006e08:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006e0a:	688a      	ldr	r2, [r1, #8]
 8006e0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e10:	4322      	orrs	r2, r4
 8006e12:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e14:	065a      	lsls	r2, r3, #25
 8006e16:	d509      	bpl.n	8006e2c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e18:	6801      	ldr	r1, [r0, #0]
 8006e1a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006e1c:	684a      	ldr	r2, [r1, #4]
 8006e1e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006e22:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e24:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e28:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e2a:	d00b      	beq.n	8006e44 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e2c:	061b      	lsls	r3, r3, #24
 8006e2e:	d506      	bpl.n	8006e3e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e30:	6802      	ldr	r2, [r0, #0]
 8006e32:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006e34:	6853      	ldr	r3, [r2, #4]
 8006e36:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	6053      	str	r3, [r2, #4]
}
 8006e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e42:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e44:	684a      	ldr	r2, [r1, #4]
 8006e46:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006e48:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006e4c:	4322      	orrs	r2, r4
 8006e4e:	604a      	str	r2, [r1, #4]
 8006e50:	e7ec      	b.n	8006e2c <UART_AdvFeatureConfig+0x88>
 8006e52:	bf00      	nop

08006e54 <UART_WaitOnFlagUntilTimeout>:
{
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	9f08      	ldr	r7, [sp, #32]
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	4680      	mov	r8, r0
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5e:	6801      	ldr	r1, [r0, #0]
{
 8006e60:	4616      	mov	r6, r2
 8006e62:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e64:	e001      	b.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8006e66:	1c78      	adds	r0, r7, #1
 8006e68:	d10a      	bne.n	8006e80 <UART_WaitOnFlagUntilTimeout+0x2c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6a:	69cc      	ldr	r4, [r1, #28]
 8006e6c:	ea35 0404 	bics.w	r4, r5, r4
 8006e70:	bf0c      	ite	eq
 8006e72:	2401      	moveq	r4, #1
 8006e74:	2400      	movne	r4, #0
 8006e76:	42b4      	cmp	r4, r6
 8006e78:	d0f5      	beq.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8006e7a:	2000      	movs	r0, #0
}
 8006e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e80:	f7fb fadc 	bl	800243c <HAL_GetTick>
 8006e84:	eba0 0009 	sub.w	r0, r0, r9
 8006e88:	42b8      	cmp	r0, r7
 8006e8a:	d81b      	bhi.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x70>
 8006e8c:	b1d7      	cbz	r7, 8006ec4 <UART_WaitOnFlagUntilTimeout+0x70>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e8e:	f8d8 1000 	ldr.w	r1, [r8]
 8006e92:	680b      	ldr	r3, [r1, #0]
 8006e94:	075a      	lsls	r2, r3, #29
 8006e96:	d5e8      	bpl.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x16>
 8006e98:	2d80      	cmp	r5, #128	@ 0x80
 8006e9a:	d0e6      	beq.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x16>
 8006e9c:	2d40      	cmp	r5, #64	@ 0x40
 8006e9e:	d0e4      	beq.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ea0:	69cc      	ldr	r4, [r1, #28]
 8006ea2:	f014 0408 	ands.w	r4, r4, #8
 8006ea6:	d10f      	bne.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ea8:	69cb      	ldr	r3, [r1, #28]
 8006eaa:	051b      	lsls	r3, r3, #20
 8006eac:	d5dd      	bpl.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006eb2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	f7ff fb11 	bl	80064dc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eba:	2320      	movs	r3, #32
 8006ebc:	f8c8 3090 	str.w	r3, [r8, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8006ec0:	f888 4084 	strb.w	r4, [r8, #132]	@ 0x84
        return HAL_TIMEOUT;
 8006ec4:	2003      	movs	r0, #3
 8006ec6:	e7d9      	b.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ec8:	2408      	movs	r4, #8
          UART_EndRxTransfer(huart);
 8006eca:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ecc:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 8006ece:	f7ff fb05 	bl	80064dc <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8006ed2:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ed4:	f8c8 4090 	str.w	r4, [r8, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8006ed8:	f888 3084 	strb.w	r3, [r8, #132]	@ 0x84
          return HAL_ERROR;
 8006edc:	2001      	movs	r0, #1
 8006ede:	e7cd      	b.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x28>

08006ee0 <UART_CheckIdleState>:
{
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee4:	2600      	movs	r6, #0
{
 8006ee6:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee8:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8006eec:	f7fb faa6 	bl	800243c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8006ef6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ef8:	d410      	bmi.n	8006f1c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	075b      	lsls	r3, r3, #29
 8006efe:	d427      	bmi.n	8006f50 <UART_CheckIdleState+0x70>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f00:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8006f08:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f10:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8006f12:	2300      	movs	r3, #0
 8006f14:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8006f18:	b002      	add	sp, #8
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	4632      	mov	r2, r6
 8006f24:	4603      	mov	r3, r0
 8006f26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f7ff ff92 	bl	8006e54 <UART_WaitOnFlagUntilTimeout>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d0e1      	beq.n	8006efa <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	e843 2100 	strex	r1, r2, [r3]
 8006f42:	2900      	cmp	r1, #0
 8006f44:	d1f7      	bne.n	8006f36 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8006f46:	2320      	movs	r3, #32
 8006f48:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8006f4c:	2003      	movs	r0, #3
 8006f4e:	e7e0      	b.n	8006f12 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	2200      	movs	r2, #0
 8006f58:	462b      	mov	r3, r5
 8006f5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f7ff ff78 	bl	8006e54 <UART_WaitOnFlagUntilTimeout>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d0cb      	beq.n	8006f00 <UART_CheckIdleState+0x20>
 8006f68:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f6e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	e843 2100 	strex	r1, r2, [r3]
 8006f76:	2900      	cmp	r1, #0
 8006f78:	d1f7      	bne.n	8006f6a <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	f103 0208 	add.w	r2, r3, #8
 8006f7e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	f103 0008 	add.w	r0, r3, #8
 8006f8a:	e840 2100 	strex	r1, r2, [r0]
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	d1f3      	bne.n	8006f7a <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 8006f92:	2320      	movs	r3, #32
 8006f94:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8006f98:	e7d8      	b.n	8006f4c <UART_CheckIdleState+0x6c>
 8006f9a:	bf00      	nop

08006f9c <HAL_UART_Init>:
  if (huart == NULL)
 8006f9c:	b380      	cbz	r0, 8007000 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f9e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8006fa2:	b510      	push	{r4, lr}
 8006fa4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006fa6:	b333      	cbz	r3, 8006ff6 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8006fa8:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006faa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8006fac:	2324      	movs	r3, #36	@ 0x24
 8006fae:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006fb2:	6813      	ldr	r3, [r2, #0]
 8006fb4:	f023 0301 	bic.w	r3, r3, #1
 8006fb8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fba:	b9c1      	cbnz	r1, 8006fee <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f7ff fd8f 	bl	8006ae0 <UART_SetConfig>
 8006fc2:	2801      	cmp	r0, #1
 8006fc4:	d011      	beq.n	8006fea <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fd6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006fde:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006fe0:	601a      	str	r2, [r3, #0]
}
 8006fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006fe6:	f7ff bf7b 	b.w	8006ee0 <UART_CheckIdleState>
}
 8006fea:	2001      	movs	r0, #1
 8006fec:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7ff fed8 	bl	8006da4 <UART_AdvFeatureConfig>
 8006ff4:	e7e2      	b.n	8006fbc <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8006ff6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8006ffa:	f7fa fdb7 	bl	8001b6c <HAL_UART_MspInit>
 8006ffe:	e7d3      	b.n	8006fa8 <HAL_UART_Init+0xc>
}
 8007000:	2001      	movs	r0, #1
 8007002:	4770      	bx	lr

08007004 <UART_Start_Receive_DMA>:
{
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4605      	mov	r5, r0
 8007008:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800700a:	2022      	movs	r0, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700c:	2200      	movs	r2, #0
 800700e:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007012:	f8c5 008c 	str.w	r0, [r5, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 8007016:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800701a:	682c      	ldr	r4, [r5, #0]
  huart->pRxBuffPtr = pData;
 800701c:	65a9      	str	r1, [r5, #88]	@ 0x58
  huart->RxXferSize = Size;
 800701e:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
  if (huart->hdmarx != NULL)
 8007022:	b168      	cbz	r0, 8007040 <UART_Start_Receive_DMA+0x3c>
    huart->hdmarx->XferAbortCallback = NULL;
 8007024:	6382      	str	r2, [r0, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007026:	460a      	mov	r2, r1
 8007028:	f104 0124 	add.w	r1, r4, #36	@ 0x24
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800702c:	4c1a      	ldr	r4, [pc, #104]	@ (8007098 <UART_Start_Receive_DMA+0x94>)
 800702e:	62c4      	str	r4, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007030:	4c1a      	ldr	r4, [pc, #104]	@ (800709c <UART_Start_Receive_DMA+0x98>)
 8007032:	6304      	str	r4, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007034:	4c1a      	ldr	r4, [pc, #104]	@ (80070a0 <UART_Start_Receive_DMA+0x9c>)
 8007036:	6344      	str	r4, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007038:	f7fc fdec 	bl	8003c14 <HAL_DMA_Start_IT>
 800703c:	bb18      	cbnz	r0, 8007086 <UART_Start_Receive_DMA+0x82>
 800703e:	682c      	ldr	r4, [r5, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007040:	692b      	ldr	r3, [r5, #16]
 8007042:	b13b      	cbz	r3, 8007054 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	e844 3200 	strex	r2, r3, [r4]
 8007050:	2a00      	cmp	r2, #0
 8007052:	d1f7      	bne.n	8007044 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	f104 0308 	add.w	r3, r4, #8
 8007058:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705c:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	f104 0108 	add.w	r1, r4, #8
 8007064:	e841 3200 	strex	r2, r3, [r1]
 8007068:	2a00      	cmp	r2, #0
 800706a:	d1f3      	bne.n	8007054 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	f104 0308 	add.w	r3, r4, #8
 8007070:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	f104 0208 	add.w	r2, r4, #8
 800707c:	e842 3000 	strex	r0, r3, [r2]
 8007080:	2800      	cmp	r0, #0
 8007082:	d1f3      	bne.n	800706c <UART_Start_Receive_DMA+0x68>
}
 8007084:	bd38      	pop	{r3, r4, r5, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007086:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8007088:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800708a:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
      return HAL_ERROR;
 800708e:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 8007090:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
}
 8007094:	bd38      	pop	{r3, r4, r5, pc}
 8007096:	bf00      	nop
 8007098:	08006a45 	.word	0x08006a45
 800709c:	08006a25 	.word	0x08006a25
 80070a0:	0800663d 	.word	0x0800663d

080070a4 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070a4:	6803      	ldr	r3, [r0, #0]
 80070a6:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070a8:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 80070aa:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ac:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070b0:	4d0a      	ldr	r5, [pc, #40]	@ (80070dc <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80070b2:	4c0b      	ldr	r4, [pc, #44]	@ (80070e0 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070b4:	f815 200c 	ldrb.w	r2, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070b8:	f3c1 6142 	ubfx	r1, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070bc:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070be:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80070c0:	f814 500c 	ldrb.w	r5, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 80070c4:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070c6:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070ca:	00db      	lsls	r3, r3, #3
  }
}
 80070cc:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070ce:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070d2:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070d6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
}
 80070da:	4770      	bx	lr
 80070dc:	08007820 	.word	0x08007820
 80070e0:	08007818 	.word	0x08007818

080070e4 <HAL_UARTEx_WakeupCallback>:
}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop

080070e8 <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop

080070ec <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop

080070f0 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80070f0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d017      	beq.n	8007128 <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070f8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80070fa:	2324      	movs	r3, #36	@ 0x24
{
 80070fc:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80070fe:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007102:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007104:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007106:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8007108:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800710c:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8007110:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007112:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007114:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 8007116:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800711a:	2220      	movs	r2, #32
 800711c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 8007120:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007124:	4618      	mov	r0, r3
}
 8007126:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007128:	2002      	movs	r0, #2
}
 800712a:	4770      	bx	lr

0800712c <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800712c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007130:	2b01      	cmp	r3, #1
 8007132:	d01f      	beq.n	8007174 <HAL_UARTEx_SetTxFifoThreshold+0x48>
{
 8007134:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007136:	2324      	movs	r3, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007138:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800713a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800713e:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007148:	68ab      	ldr	r3, [r5, #8]
 800714a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800714e:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007150:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007152:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007154:	4604      	mov	r4, r0
 8007156:	b14b      	cbz	r3, 800716c <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8007158:	f7ff ffa4 	bl	80070a4 <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 800715c:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800715e:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007160:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8007162:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8007166:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800716a:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800716c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8007170:	6683      	str	r3, [r0, #104]	@ 0x68
 8007172:	e7f3      	b.n	800715c <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8007174:	2002      	movs	r0, #2
}
 8007176:	4770      	bx	lr

08007178 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007178:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800717c:	2b01      	cmp	r3, #1
 800717e:	d01f      	beq.n	80071c0 <HAL_UARTEx_SetRxFifoThreshold+0x48>
{
 8007180:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007182:	2324      	movs	r3, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007184:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007186:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800718a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007194:	68ab      	ldr	r3, [r5, #8]
 8007196:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800719a:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800719c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800719e:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071a0:	4604      	mov	r4, r0
 80071a2:	b14b      	cbz	r3, 80071b8 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 80071a4:	f7ff ff7e 	bl	80070a4 <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 80071a8:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071aa:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80071ae:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80071b2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 80071b8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80071bc:	6683      	str	r3, [r0, #104]	@ 0x68
 80071be:	e7f3      	b.n	80071a8 <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 80071c0:	2002      	movs	r0, #2
}
 80071c2:	4770      	bx	lr

080071c4 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 80071c4:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80071c6:	f8d0 608c 	ldr.w	r6, [r0, #140]	@ 0x8c
 80071ca:	2e20      	cmp	r6, #32
 80071cc:	d103      	bne.n	80071d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    if ((pData == NULL) || (Size == 0U))
 80071ce:	b101      	cbz	r1, 80071d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
 80071d0:	b91a      	cbnz	r2, 80071da <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      return HAL_ERROR;
 80071d2:	2001      	movs	r0, #1
}
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80071d6:	2002      	movs	r0, #2
}
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80071da:	2301      	movs	r3, #1
 80071dc:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071de:	2300      	movs	r3, #0
 80071e0:	6703      	str	r3, [r0, #112]	@ 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80071e2:	4604      	mov	r4, r0
 80071e4:	f7ff ff0e 	bl	8007004 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d1f3      	bne.n	80071d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ec:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d1ef      	bne.n	80071d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071f2:	6822      	ldr	r2, [r4, #0]
 80071f4:	2310      	movs	r3, #16
 80071f6:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fc:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	e842 3100 	strex	r1, r3, [r2]
 8007204:	2900      	cmp	r1, #0
 8007206:	d1f7      	bne.n	80071f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
}
 8007208:	bd70      	pop	{r4, r5, r6, pc}
 800720a:	bf00      	nop

0800720c <_ZdlPvj>:
 800720c:	f000 b8fa 	b.w	8007404 <_ZdlPv>

08007210 <_Znwj>:
 8007210:	2801      	cmp	r0, #1
 8007212:	bf38      	it	cc
 8007214:	2001      	movcc	r0, #1
 8007216:	b510      	push	{r4, lr}
 8007218:	4604      	mov	r4, r0
 800721a:	4620      	mov	r0, r4
 800721c:	f000 f904 	bl	8007428 <malloc>
 8007220:	b100      	cbz	r0, 8007224 <_Znwj+0x14>
 8007222:	bd10      	pop	{r4, pc}
 8007224:	f000 f8f0 	bl	8007408 <_ZSt15get_new_handlerv>
 8007228:	b908      	cbnz	r0, 800722e <_Znwj+0x1e>
 800722a:	f000 f8f5 	bl	8007418 <abort>
 800722e:	4780      	blx	r0
 8007230:	e7f3      	b.n	800721a <_Znwj+0xa>

08007232 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8007232:	68c3      	ldr	r3, [r0, #12]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	60c2      	str	r2, [r0, #12]
 8007238:	b510      	push	{r4, lr}
 800723a:	b102      	cbz	r2, 800723e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 800723c:	6050      	str	r0, [r2, #4]
 800723e:	6842      	ldr	r2, [r0, #4]
 8007240:	605a      	str	r2, [r3, #4]
 8007242:	680c      	ldr	r4, [r1, #0]
 8007244:	4284      	cmp	r4, r0
 8007246:	d103      	bne.n	8007250 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8007248:	600b      	str	r3, [r1, #0]
 800724a:	6098      	str	r0, [r3, #8]
 800724c:	6043      	str	r3, [r0, #4]
 800724e:	bd10      	pop	{r4, pc}
 8007250:	6891      	ldr	r1, [r2, #8]
 8007252:	4281      	cmp	r1, r0
 8007254:	bf0c      	ite	eq
 8007256:	6093      	streq	r3, [r2, #8]
 8007258:	60d3      	strne	r3, [r2, #12]
 800725a:	e7f6      	b.n	800724a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0800725c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 800725c:	6883      	ldr	r3, [r0, #8]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	6082      	str	r2, [r0, #8]
 8007262:	b510      	push	{r4, lr}
 8007264:	b102      	cbz	r2, 8007268 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8007266:	6050      	str	r0, [r2, #4]
 8007268:	6842      	ldr	r2, [r0, #4]
 800726a:	605a      	str	r2, [r3, #4]
 800726c:	680c      	ldr	r4, [r1, #0]
 800726e:	4284      	cmp	r4, r0
 8007270:	d103      	bne.n	800727a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8007272:	600b      	str	r3, [r1, #0]
 8007274:	60d8      	str	r0, [r3, #12]
 8007276:	6043      	str	r3, [r0, #4]
 8007278:	bd10      	pop	{r4, pc}
 800727a:	68d1      	ldr	r1, [r2, #12]
 800727c:	4281      	cmp	r1, r0
 800727e:	bf0c      	ite	eq
 8007280:	60d3      	streq	r3, [r2, #12]
 8007282:	6093      	strne	r3, [r2, #8]
 8007284:	e7f6      	b.n	8007274 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08007286 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8007286:	68c3      	ldr	r3, [r0, #12]
 8007288:	b123      	cbz	r3, 8007294 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 800728a:	4618      	mov	r0, r3
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1fb      	bne.n	800728a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8007292:	4770      	bx	lr
 8007294:	6843      	ldr	r3, [r0, #4]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	4282      	cmp	r2, r0
 800729a:	d004      	beq.n	80072a6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 800729c:	68c2      	ldr	r2, [r0, #12]
 800729e:	4293      	cmp	r3, r2
 80072a0:	bf18      	it	ne
 80072a2:	4618      	movne	r0, r3
 80072a4:	4770      	bx	lr
 80072a6:	4618      	mov	r0, r3
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	e7f4      	b.n	8007296 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

080072ac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80072ac:	7802      	ldrb	r2, [r0, #0]
 80072ae:	4603      	mov	r3, r0
 80072b0:	b92a      	cbnz	r2, 80072be <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80072b2:	6842      	ldr	r2, [r0, #4]
 80072b4:	6852      	ldr	r2, [r2, #4]
 80072b6:	4282      	cmp	r2, r0
 80072b8:	d101      	bne.n	80072be <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80072ba:	68d0      	ldr	r0, [r2, #12]
 80072bc:	4770      	bx	lr
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	b122      	cbz	r2, 80072cc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80072c2:	4610      	mov	r0, r2
 80072c4:	68d2      	ldr	r2, [r2, #12]
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	d1fb      	bne.n	80072c2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80072ca:	4770      	bx	lr
 80072cc:	6858      	ldr	r0, [r3, #4]
 80072ce:	6882      	ldr	r2, [r0, #8]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d000      	beq.n	80072d6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 80072d4:	4770      	bx	lr
 80072d6:	4603      	mov	r3, r0
 80072d8:	6840      	ldr	r0, [r0, #4]
 80072da:	e7f8      	b.n	80072ce <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

080072dc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80072dc:	f7ff bfd3 	b.w	8007286 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

080072e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80072e0:	f7ff bfe4 	b.w	80072ac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080072e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80072e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e8:	461d      	mov	r5, r3
 80072ea:	1d1f      	adds	r7, r3, #4
 80072ec:	2300      	movs	r3, #0
 80072ee:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80072f2:	460c      	mov	r4, r1
 80072f4:	604a      	str	r2, [r1, #4]
 80072f6:	700b      	strb	r3, [r1, #0]
 80072f8:	b1a0      	cbz	r0, 8007324 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 80072fa:	4295      	cmp	r5, r2
 80072fc:	6091      	str	r1, [r2, #8]
 80072fe:	d102      	bne.n	8007306 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8007300:	6069      	str	r1, [r5, #4]
 8007302:	60ec      	str	r4, [r5, #12]
 8007304:	e003      	b.n	800730e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8007306:	68ab      	ldr	r3, [r5, #8]
 8007308:	4293      	cmp	r3, r2
 800730a:	bf08      	it	eq
 800730c:	60a9      	streq	r1, [r5, #8]
 800730e:	f04f 0900 	mov.w	r9, #0
 8007312:	f04f 0801 	mov.w	r8, #1
 8007316:	686b      	ldr	r3, [r5, #4]
 8007318:	42a3      	cmp	r3, r4
 800731a:	d132      	bne.n	8007382 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 800731c:	2201      	movs	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007324:	60d1      	str	r1, [r2, #12]
 8007326:	68eb      	ldr	r3, [r5, #12]
 8007328:	4293      	cmp	r3, r2
 800732a:	d1f0      	bne.n	800730e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 800732c:	e7e9      	b.n	8007302 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 800732e:	68c3      	ldr	r3, [r0, #12]
 8007330:	42a3      	cmp	r3, r4
 8007332:	d103      	bne.n	800733c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8007334:	4639      	mov	r1, r7
 8007336:	f7ff ff7c 	bl	8007232 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800733a:	4604      	mov	r4, r0
 800733c:	6863      	ldr	r3, [r4, #4]
 800733e:	4639      	mov	r1, r7
 8007340:	f883 8000 	strb.w	r8, [r3]
 8007344:	4630      	mov	r0, r6
 8007346:	f886 9000 	strb.w	r9, [r6]
 800734a:	f7ff ff87 	bl	800725c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800734e:	e7e2      	b.n	8007316 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8007350:	b133      	cbz	r3, 8007360 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8007352:	781a      	ldrb	r2, [r3, #0]
 8007354:	b922      	cbnz	r2, 8007360 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8007356:	f880 8000 	strb.w	r8, [r0]
 800735a:	f883 8000 	strb.w	r8, [r3]
 800735e:	e021      	b.n	80073a4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8007360:	6883      	ldr	r3, [r0, #8]
 8007362:	42a3      	cmp	r3, r4
 8007364:	d103      	bne.n	800736e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8007366:	4639      	mov	r1, r7
 8007368:	f7ff ff78 	bl	800725c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800736c:	4604      	mov	r4, r0
 800736e:	6863      	ldr	r3, [r4, #4]
 8007370:	4639      	mov	r1, r7
 8007372:	f883 8000 	strb.w	r8, [r3]
 8007376:	4630      	mov	r0, r6
 8007378:	f886 9000 	strb.w	r9, [r6]
 800737c:	f7ff ff59 	bl	8007232 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8007380:	e7c9      	b.n	8007316 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8007382:	6860      	ldr	r0, [r4, #4]
 8007384:	7802      	ldrb	r2, [r0, #0]
 8007386:	2a00      	cmp	r2, #0
 8007388:	d1c8      	bne.n	800731c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 800738a:	6846      	ldr	r6, [r0, #4]
 800738c:	68b3      	ldr	r3, [r6, #8]
 800738e:	4283      	cmp	r3, r0
 8007390:	d1de      	bne.n	8007350 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8007392:	68f2      	ldr	r2, [r6, #12]
 8007394:	2a00      	cmp	r2, #0
 8007396:	d0ca      	beq.n	800732e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8007398:	7811      	ldrb	r1, [r2, #0]
 800739a:	2900      	cmp	r1, #0
 800739c:	d1c7      	bne.n	800732e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 800739e:	2101      	movs	r1, #1
 80073a0:	7019      	strb	r1, [r3, #0]
 80073a2:	7011      	strb	r1, [r2, #0]
 80073a4:	f886 9000 	strb.w	r9, [r6]
 80073a8:	4634      	mov	r4, r6
 80073aa:	e7b4      	b.n	8007316 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

080073ac <_ZSt17__throw_bad_allocv>:
 80073ac:	b508      	push	{r3, lr}
 80073ae:	f000 f833 	bl	8007418 <abort>

080073b2 <_ZSt19__throw_logic_errorPKc>:
 80073b2:	b508      	push	{r3, lr}
 80073b4:	f000 f830 	bl	8007418 <abort>

080073b8 <_ZSt20__throw_length_errorPKc>:
 80073b8:	b508      	push	{r3, lr}
 80073ba:	f000 f82d 	bl	8007418 <abort>
	...

080073c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80073c0:	b508      	push	{r3, lr}
 80073c2:	680b      	ldr	r3, [r1, #0]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c8:	d302      	bcc.n	80073d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80073ca:	480d      	ldr	r0, [pc, #52]	@ (8007400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80073cc:	f7ff fff4 	bl	80073b8 <_ZSt20__throw_length_errorPKc>
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d90b      	bls.n	80073ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80073d4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80073d8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80073dc:	d206      	bcs.n	80073ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80073de:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80073e2:	bf2a      	itet	cs
 80073e4:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80073e8:	6008      	strcc	r0, [r1, #0]
 80073ea:	600b      	strcs	r3, [r1, #0]
 80073ec:	6808      	ldr	r0, [r1, #0]
 80073ee:	3001      	adds	r0, #1
 80073f0:	d501      	bpl.n	80073f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80073f2:	f7ff ffdb 	bl	80073ac <_ZSt17__throw_bad_allocv>
 80073f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80073fa:	f7ff bf09 	b.w	8007210 <_Znwj>
 80073fe:	bf00      	nop
 8007400:	08007828 	.word	0x08007828

08007404 <_ZdlPv>:
 8007404:	f000 b818 	b.w	8007438 <free>

08007408 <_ZSt15get_new_handlerv>:
 8007408:	4b02      	ldr	r3, [pc, #8]	@ (8007414 <_ZSt15get_new_handlerv+0xc>)
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	f3bf 8f5b 	dmb	ish
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20000edc 	.word	0x20000edc

08007418 <abort>:
 8007418:	b508      	push	{r3, lr}
 800741a:	2006      	movs	r0, #6
 800741c:	f000 f902 	bl	8007624 <raise>
 8007420:	2001      	movs	r0, #1
 8007422:	f7fa fc43 	bl	8001cac <_exit>
	...

08007428 <malloc>:
 8007428:	4b02      	ldr	r3, [pc, #8]	@ (8007434 <malloc+0xc>)
 800742a:	4601      	mov	r1, r0
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	f000 b82d 	b.w	800748c <_malloc_r>
 8007432:	bf00      	nop
 8007434:	2000001c 	.word	0x2000001c

08007438 <free>:
 8007438:	4b02      	ldr	r3, [pc, #8]	@ (8007444 <free+0xc>)
 800743a:	4601      	mov	r1, r0
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	f000 b957 	b.w	80076f0 <_free_r>
 8007442:	bf00      	nop
 8007444:	2000001c 	.word	0x2000001c

08007448 <sbrk_aligned>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	4e0f      	ldr	r6, [pc, #60]	@ (8007488 <sbrk_aligned+0x40>)
 800744c:	460c      	mov	r4, r1
 800744e:	6831      	ldr	r1, [r6, #0]
 8007450:	4605      	mov	r5, r0
 8007452:	b911      	cbnz	r1, 800745a <sbrk_aligned+0x12>
 8007454:	f000 f902 	bl	800765c <_sbrk_r>
 8007458:	6030      	str	r0, [r6, #0]
 800745a:	4621      	mov	r1, r4
 800745c:	4628      	mov	r0, r5
 800745e:	f000 f8fd 	bl	800765c <_sbrk_r>
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	d103      	bne.n	800746e <sbrk_aligned+0x26>
 8007466:	f04f 34ff 	mov.w	r4, #4294967295
 800746a:	4620      	mov	r0, r4
 800746c:	bd70      	pop	{r4, r5, r6, pc}
 800746e:	1cc4      	adds	r4, r0, #3
 8007470:	f024 0403 	bic.w	r4, r4, #3
 8007474:	42a0      	cmp	r0, r4
 8007476:	d0f8      	beq.n	800746a <sbrk_aligned+0x22>
 8007478:	1a21      	subs	r1, r4, r0
 800747a:	4628      	mov	r0, r5
 800747c:	f000 f8ee 	bl	800765c <_sbrk_r>
 8007480:	3001      	adds	r0, #1
 8007482:	d1f2      	bne.n	800746a <sbrk_aligned+0x22>
 8007484:	e7ef      	b.n	8007466 <sbrk_aligned+0x1e>
 8007486:	bf00      	nop
 8007488:	20000ee0 	.word	0x20000ee0

0800748c <_malloc_r>:
 800748c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007490:	1ccd      	adds	r5, r1, #3
 8007492:	f025 0503 	bic.w	r5, r5, #3
 8007496:	3508      	adds	r5, #8
 8007498:	2d0c      	cmp	r5, #12
 800749a:	bf38      	it	cc
 800749c:	250c      	movcc	r5, #12
 800749e:	2d00      	cmp	r5, #0
 80074a0:	4606      	mov	r6, r0
 80074a2:	db01      	blt.n	80074a8 <_malloc_r+0x1c>
 80074a4:	42a9      	cmp	r1, r5
 80074a6:	d904      	bls.n	80074b2 <_malloc_r+0x26>
 80074a8:	230c      	movs	r3, #12
 80074aa:	6033      	str	r3, [r6, #0]
 80074ac:	2000      	movs	r0, #0
 80074ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007588 <_malloc_r+0xfc>
 80074b6:	f000 f869 	bl	800758c <__malloc_lock>
 80074ba:	f8d8 3000 	ldr.w	r3, [r8]
 80074be:	461c      	mov	r4, r3
 80074c0:	bb44      	cbnz	r4, 8007514 <_malloc_r+0x88>
 80074c2:	4629      	mov	r1, r5
 80074c4:	4630      	mov	r0, r6
 80074c6:	f7ff ffbf 	bl	8007448 <sbrk_aligned>
 80074ca:	1c43      	adds	r3, r0, #1
 80074cc:	4604      	mov	r4, r0
 80074ce:	d158      	bne.n	8007582 <_malloc_r+0xf6>
 80074d0:	f8d8 4000 	ldr.w	r4, [r8]
 80074d4:	4627      	mov	r7, r4
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	d143      	bne.n	8007562 <_malloc_r+0xd6>
 80074da:	2c00      	cmp	r4, #0
 80074dc:	d04b      	beq.n	8007576 <_malloc_r+0xea>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	4639      	mov	r1, r7
 80074e2:	4630      	mov	r0, r6
 80074e4:	eb04 0903 	add.w	r9, r4, r3
 80074e8:	f000 f8b8 	bl	800765c <_sbrk_r>
 80074ec:	4581      	cmp	r9, r0
 80074ee:	d142      	bne.n	8007576 <_malloc_r+0xea>
 80074f0:	6821      	ldr	r1, [r4, #0]
 80074f2:	1a6d      	subs	r5, r5, r1
 80074f4:	4629      	mov	r1, r5
 80074f6:	4630      	mov	r0, r6
 80074f8:	f7ff ffa6 	bl	8007448 <sbrk_aligned>
 80074fc:	3001      	adds	r0, #1
 80074fe:	d03a      	beq.n	8007576 <_malloc_r+0xea>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	442b      	add	r3, r5
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	f8d8 3000 	ldr.w	r3, [r8]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	bb62      	cbnz	r2, 8007568 <_malloc_r+0xdc>
 800750e:	f8c8 7000 	str.w	r7, [r8]
 8007512:	e00f      	b.n	8007534 <_malloc_r+0xa8>
 8007514:	6822      	ldr	r2, [r4, #0]
 8007516:	1b52      	subs	r2, r2, r5
 8007518:	d420      	bmi.n	800755c <_malloc_r+0xd0>
 800751a:	2a0b      	cmp	r2, #11
 800751c:	d917      	bls.n	800754e <_malloc_r+0xc2>
 800751e:	1961      	adds	r1, r4, r5
 8007520:	42a3      	cmp	r3, r4
 8007522:	6025      	str	r5, [r4, #0]
 8007524:	bf18      	it	ne
 8007526:	6059      	strne	r1, [r3, #4]
 8007528:	6863      	ldr	r3, [r4, #4]
 800752a:	bf08      	it	eq
 800752c:	f8c8 1000 	streq.w	r1, [r8]
 8007530:	5162      	str	r2, [r4, r5]
 8007532:	604b      	str	r3, [r1, #4]
 8007534:	4630      	mov	r0, r6
 8007536:	f000 f82f 	bl	8007598 <__malloc_unlock>
 800753a:	f104 000b 	add.w	r0, r4, #11
 800753e:	1d23      	adds	r3, r4, #4
 8007540:	f020 0007 	bic.w	r0, r0, #7
 8007544:	1ac2      	subs	r2, r0, r3
 8007546:	bf1c      	itt	ne
 8007548:	1a1b      	subne	r3, r3, r0
 800754a:	50a3      	strne	r3, [r4, r2]
 800754c:	e7af      	b.n	80074ae <_malloc_r+0x22>
 800754e:	6862      	ldr	r2, [r4, #4]
 8007550:	42a3      	cmp	r3, r4
 8007552:	bf0c      	ite	eq
 8007554:	f8c8 2000 	streq.w	r2, [r8]
 8007558:	605a      	strne	r2, [r3, #4]
 800755a:	e7eb      	b.n	8007534 <_malloc_r+0xa8>
 800755c:	4623      	mov	r3, r4
 800755e:	6864      	ldr	r4, [r4, #4]
 8007560:	e7ae      	b.n	80074c0 <_malloc_r+0x34>
 8007562:	463c      	mov	r4, r7
 8007564:	687f      	ldr	r7, [r7, #4]
 8007566:	e7b6      	b.n	80074d6 <_malloc_r+0x4a>
 8007568:	461a      	mov	r2, r3
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	42a3      	cmp	r3, r4
 800756e:	d1fb      	bne.n	8007568 <_malloc_r+0xdc>
 8007570:	2300      	movs	r3, #0
 8007572:	6053      	str	r3, [r2, #4]
 8007574:	e7de      	b.n	8007534 <_malloc_r+0xa8>
 8007576:	230c      	movs	r3, #12
 8007578:	6033      	str	r3, [r6, #0]
 800757a:	4630      	mov	r0, r6
 800757c:	f000 f80c 	bl	8007598 <__malloc_unlock>
 8007580:	e794      	b.n	80074ac <_malloc_r+0x20>
 8007582:	6005      	str	r5, [r0, #0]
 8007584:	e7d6      	b.n	8007534 <_malloc_r+0xa8>
 8007586:	bf00      	nop
 8007588:	20000ee4 	.word	0x20000ee4

0800758c <__malloc_lock>:
 800758c:	4801      	ldr	r0, [pc, #4]	@ (8007594 <__malloc_lock+0x8>)
 800758e:	f000 b89f 	b.w	80076d0 <__retarget_lock_acquire_recursive>
 8007592:	bf00      	nop
 8007594:	20001024 	.word	0x20001024

08007598 <__malloc_unlock>:
 8007598:	4801      	ldr	r0, [pc, #4]	@ (80075a0 <__malloc_unlock+0x8>)
 800759a:	f000 b89a 	b.w	80076d2 <__retarget_lock_release_recursive>
 800759e:	bf00      	nop
 80075a0:	20001024 	.word	0x20001024

080075a4 <memcmp>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	3901      	subs	r1, #1
 80075a8:	4402      	add	r2, r0
 80075aa:	4290      	cmp	r0, r2
 80075ac:	d101      	bne.n	80075b2 <memcmp+0xe>
 80075ae:	2000      	movs	r0, #0
 80075b0:	e005      	b.n	80075be <memcmp+0x1a>
 80075b2:	7803      	ldrb	r3, [r0, #0]
 80075b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	d001      	beq.n	80075c0 <memcmp+0x1c>
 80075bc:	1b18      	subs	r0, r3, r4
 80075be:	bd10      	pop	{r4, pc}
 80075c0:	3001      	adds	r0, #1
 80075c2:	e7f2      	b.n	80075aa <memcmp+0x6>

080075c4 <memset>:
 80075c4:	4402      	add	r2, r0
 80075c6:	4603      	mov	r3, r0
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d100      	bne.n	80075ce <memset+0xa>
 80075cc:	4770      	bx	lr
 80075ce:	f803 1b01 	strb.w	r1, [r3], #1
 80075d2:	e7f9      	b.n	80075c8 <memset+0x4>

080075d4 <_raise_r>:
 80075d4:	291f      	cmp	r1, #31
 80075d6:	b538      	push	{r3, r4, r5, lr}
 80075d8:	4605      	mov	r5, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	d904      	bls.n	80075e8 <_raise_r+0x14>
 80075de:	2316      	movs	r3, #22
 80075e0:	6003      	str	r3, [r0, #0]
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075ea:	b112      	cbz	r2, 80075f2 <_raise_r+0x1e>
 80075ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075f0:	b94b      	cbnz	r3, 8007606 <_raise_r+0x32>
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 f830 	bl	8007658 <_getpid_r>
 80075f8:	4622      	mov	r2, r4
 80075fa:	4601      	mov	r1, r0
 80075fc:	4628      	mov	r0, r5
 80075fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007602:	f000 b817 	b.w	8007634 <_kill_r>
 8007606:	2b01      	cmp	r3, #1
 8007608:	d00a      	beq.n	8007620 <_raise_r+0x4c>
 800760a:	1c59      	adds	r1, r3, #1
 800760c:	d103      	bne.n	8007616 <_raise_r+0x42>
 800760e:	2316      	movs	r3, #22
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	2001      	movs	r0, #1
 8007614:	e7e7      	b.n	80075e6 <_raise_r+0x12>
 8007616:	2100      	movs	r1, #0
 8007618:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800761c:	4620      	mov	r0, r4
 800761e:	4798      	blx	r3
 8007620:	2000      	movs	r0, #0
 8007622:	e7e0      	b.n	80075e6 <_raise_r+0x12>

08007624 <raise>:
 8007624:	4b02      	ldr	r3, [pc, #8]	@ (8007630 <raise+0xc>)
 8007626:	4601      	mov	r1, r0
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	f7ff bfd3 	b.w	80075d4 <_raise_r>
 800762e:	bf00      	nop
 8007630:	2000001c 	.word	0x2000001c

08007634 <_kill_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d07      	ldr	r5, [pc, #28]	@ (8007654 <_kill_r+0x20>)
 8007638:	2300      	movs	r3, #0
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	f7fa fb2b 	bl	8001c9c <_kill>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d102      	bne.n	8007650 <_kill_r+0x1c>
 800764a:	682b      	ldr	r3, [r5, #0]
 800764c:	b103      	cbz	r3, 8007650 <_kill_r+0x1c>
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	bf00      	nop
 8007654:	20001020 	.word	0x20001020

08007658 <_getpid_r>:
 8007658:	f7fa bb1e 	b.w	8001c98 <_getpid>

0800765c <_sbrk_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d06      	ldr	r5, [pc, #24]	@ (8007678 <_sbrk_r+0x1c>)
 8007660:	2300      	movs	r3, #0
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7fa fb26 	bl	8001cb8 <_sbrk>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_sbrk_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_sbrk_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	20001020 	.word	0x20001020

0800767c <__errno>:
 800767c:	4b01      	ldr	r3, [pc, #4]	@ (8007684 <__errno+0x8>)
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	2000001c 	.word	0x2000001c

08007688 <__libc_init_array>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	4d0d      	ldr	r5, [pc, #52]	@ (80076c0 <__libc_init_array+0x38>)
 800768c:	4c0d      	ldr	r4, [pc, #52]	@ (80076c4 <__libc_init_array+0x3c>)
 800768e:	1b64      	subs	r4, r4, r5
 8007690:	10a4      	asrs	r4, r4, #2
 8007692:	2600      	movs	r6, #0
 8007694:	42a6      	cmp	r6, r4
 8007696:	d109      	bne.n	80076ac <__libc_init_array+0x24>
 8007698:	4d0b      	ldr	r5, [pc, #44]	@ (80076c8 <__libc_init_array+0x40>)
 800769a:	4c0c      	ldr	r4, [pc, #48]	@ (80076cc <__libc_init_array+0x44>)
 800769c:	f000 f872 	bl	8007784 <_init>
 80076a0:	1b64      	subs	r4, r4, r5
 80076a2:	10a4      	asrs	r4, r4, #2
 80076a4:	2600      	movs	r6, #0
 80076a6:	42a6      	cmp	r6, r4
 80076a8:	d105      	bne.n	80076b6 <__libc_init_array+0x2e>
 80076aa:	bd70      	pop	{r4, r5, r6, pc}
 80076ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b0:	4798      	blx	r3
 80076b2:	3601      	adds	r6, #1
 80076b4:	e7ee      	b.n	8007694 <__libc_init_array+0xc>
 80076b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ba:	4798      	blx	r3
 80076bc:	3601      	adds	r6, #1
 80076be:	e7f2      	b.n	80076a6 <__libc_init_array+0x1e>
 80076c0:	08007848 	.word	0x08007848
 80076c4:	08007848 	.word	0x08007848
 80076c8:	08007848 	.word	0x08007848
 80076cc:	08007850 	.word	0x08007850

080076d0 <__retarget_lock_acquire_recursive>:
 80076d0:	4770      	bx	lr

080076d2 <__retarget_lock_release_recursive>:
 80076d2:	4770      	bx	lr

080076d4 <memcpy>:
 80076d4:	440a      	add	r2, r1
 80076d6:	4291      	cmp	r1, r2
 80076d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80076dc:	d100      	bne.n	80076e0 <memcpy+0xc>
 80076de:	4770      	bx	lr
 80076e0:	b510      	push	{r4, lr}
 80076e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ea:	4291      	cmp	r1, r2
 80076ec:	d1f9      	bne.n	80076e2 <memcpy+0xe>
 80076ee:	bd10      	pop	{r4, pc}

080076f0 <_free_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4605      	mov	r5, r0
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d041      	beq.n	800777c <_free_r+0x8c>
 80076f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076fc:	1f0c      	subs	r4, r1, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bfb8      	it	lt
 8007702:	18e4      	addlt	r4, r4, r3
 8007704:	f7ff ff42 	bl	800758c <__malloc_lock>
 8007708:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <_free_r+0x90>)
 800770a:	6813      	ldr	r3, [r2, #0]
 800770c:	b933      	cbnz	r3, 800771c <_free_r+0x2c>
 800770e:	6063      	str	r3, [r4, #4]
 8007710:	6014      	str	r4, [r2, #0]
 8007712:	4628      	mov	r0, r5
 8007714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007718:	f7ff bf3e 	b.w	8007598 <__malloc_unlock>
 800771c:	42a3      	cmp	r3, r4
 800771e:	d908      	bls.n	8007732 <_free_r+0x42>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	1821      	adds	r1, r4, r0
 8007724:	428b      	cmp	r3, r1
 8007726:	bf01      	itttt	eq
 8007728:	6819      	ldreq	r1, [r3, #0]
 800772a:	685b      	ldreq	r3, [r3, #4]
 800772c:	1809      	addeq	r1, r1, r0
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	e7ed      	b.n	800770e <_free_r+0x1e>
 8007732:	461a      	mov	r2, r3
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b10b      	cbz	r3, 800773c <_free_r+0x4c>
 8007738:	42a3      	cmp	r3, r4
 800773a:	d9fa      	bls.n	8007732 <_free_r+0x42>
 800773c:	6811      	ldr	r1, [r2, #0]
 800773e:	1850      	adds	r0, r2, r1
 8007740:	42a0      	cmp	r0, r4
 8007742:	d10b      	bne.n	800775c <_free_r+0x6c>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	4401      	add	r1, r0
 8007748:	1850      	adds	r0, r2, r1
 800774a:	4283      	cmp	r3, r0
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	d1e0      	bne.n	8007712 <_free_r+0x22>
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	6053      	str	r3, [r2, #4]
 8007756:	4408      	add	r0, r1
 8007758:	6010      	str	r0, [r2, #0]
 800775a:	e7da      	b.n	8007712 <_free_r+0x22>
 800775c:	d902      	bls.n	8007764 <_free_r+0x74>
 800775e:	230c      	movs	r3, #12
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	e7d6      	b.n	8007712 <_free_r+0x22>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	1821      	adds	r1, r4, r0
 8007768:	428b      	cmp	r3, r1
 800776a:	bf04      	itt	eq
 800776c:	6819      	ldreq	r1, [r3, #0]
 800776e:	685b      	ldreq	r3, [r3, #4]
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	bf04      	itt	eq
 8007774:	1809      	addeq	r1, r1, r0
 8007776:	6021      	streq	r1, [r4, #0]
 8007778:	6054      	str	r4, [r2, #4]
 800777a:	e7ca      	b.n	8007712 <_free_r+0x22>
 800777c:	bd38      	pop	{r3, r4, r5, pc}
 800777e:	bf00      	nop
 8007780:	20000ee4 	.word	0x20000ee4

08007784 <_init>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr

08007790 <_fini>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	bf00      	nop
 8007794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007796:	bc08      	pop	{r3}
 8007798:	469e      	mov	lr, r3
 800779a:	4770      	bx	lr
